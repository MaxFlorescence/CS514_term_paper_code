# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import go_run as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 2337
    tuple_0 = (int_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"]\xcdV\xb4\x98\xabz\xb8\xa4v\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -309.573179
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -3569
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = ()
    str_0 = ">x6H"
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "\x0cOAY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = 'Lj"\nIFLqiO$S7HG'
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"\xa7\xa5\x1f\xa7I\xa4\xe3\x93X/\x19\xb6\xdd"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = -1957
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "$7pe3orRs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    str_0 = "4\x0c<'e@;E"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = "\x0c~`6c+`mzFR_2"
    str_1 = "L}qhaXISue'"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    int_0 = -970
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    int_0 = 42
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "l 4ZbgJny\x0bZAJ_p\x0b\x0cV"
    dict_0 = {str_0: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = ")1 >X\r32wI'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b"\x14X"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    int_0 = -579
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    int_0 = -49
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "JCewH-`5Z@PHlI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = "-/[k0yr)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    int_0 = 981
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = "n\teF/;U%&F"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    int_0 = -2002
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    float_0 = -3563.29172
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    int_0 = -153
    tuple_0 = (int_0,)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    int_0 = -770
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_45():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bool_0 = True
    str_0 = ""
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    int_0 = 2421
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    int_0 = -1179
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    bytes_0 = b"\xf7D\xba\xa0\x91\xc5\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    int_0 = -1604
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    bytes_0 = b"\xac1-\xa44:(2\xd0\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    str_0 = "s\x0cS["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    int_0 = 984
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = "*h\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = True
    tuple_1 = (tuple_0, bool_1)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_64():
    pass


@pytest.mark.xfail(strict=True)
def test_case_65():
    bytes_0 = b"_\x04\xc90\xe8\x1b\xc69\x9fue^\xe0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    str_0 = "n_Yd?"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    bool_1 = True
    module_0.get_new_command(tuple_0, bool_1)


def test_case_69():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_70():
    str_0 = "?%#\tiu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    bytes_0 = b"\x13;a/~"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    float_0 = 4549.97
    set_0 = {float_0, float_0, float_0}
    dict_0 = {}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    bytes_0 = b"[\xa0\xfd\xa3\x98\x12,H\x83\xa7\x0c\xee\xd0\xae\x80 \xb7\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    int_0 = -74
    module_0.match(int_0, int_0)


def test_case_76():
    pass


@pytest.mark.xfail(strict=True)
def test_case_77():
    bytes_0 = b"\xbc\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    float_0 = 844.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    float_0 = 3445.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    str_0 = ":Of1n"
    bytes_0 = b"EH\xf9\x87G'Y"
    dict_0 = {str_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0, str_0, bytes_0)
    tuple_1 = (tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    float_0 = -4455.049846
    int_0 = -843
    bool_0 = True
    tuple_0 = (float_0, float_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    float_0 = 1194.0774
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    complex_0 = 6235.197 + 285.09j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    set_0 = set()
    tuple_0 = ()
    bool_0 = True
    str_0 = 'te8 ")9@{\\UD2*\x0b~@o'
    tuple_1 = (set_0, tuple_0, bool_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_88():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    bytes_0 = b"\xea"
    bytes_1 = b"\xbf6\xfa\xe5"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_90():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_91():
    pass


@pytest.mark.xfail(strict=True)
def test_case_92():
    int_0 = 1277
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    bytes_0 = b">\xeb\xc8\xea\xb8\xcf\x81(\xc6\xc3\x18\xcd\xb4\xb4\xcc\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    bool_0 = True
    bytes_0 = b""
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    int_0 = 1109
    module_0.get_new_command(int_0, int_0)


def test_case_99():
    pass


@pytest.mark.xfail(strict=True)
def test_case_100():
    bytes_0 = b"\x91\x00\xc7\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    bytes_0 = b"\x11?x\xe6L\x1bs\xec5\x08\xca"
    bytes_1 = b"Y\xd7\xb2\xcd\x9bvs\xfc\x14\xe6\x80\xd4(\xb0\x99"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_102():
    float_0 = -2518.8012
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    bytes_0 = b"\x01\xb2\x04"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    list_0 = []
    list_1 = []
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    none_type_0 = None
    complex_0 = 3086 + 773.6j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    float_0 = 257.225933
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    int_0 = -3135
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    float_0 = -1167.23
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


def test_case_112():
    pass


@pytest.mark.xfail(strict=True)
def test_case_113():
    int_0 = 2534
    str_0 = "$+\n\nLp\x0cSd\x0b%"
    dict_0 = {int_0: int_0, int_0: str_0, str_0: str_0}
    complex_0 = -452.09877 - 2363.1144j
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    str_0 = "\t=P1oVlMw>B}#CrY?ni"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    int_0 = 849
    module_0.match(int_0, int_0)


def test_case_117():
    pass


@pytest.mark.xfail(strict=True)
def test_case_118():
    int_0 = 50
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    str_0 = ".Ml2N.\x0c3DA#iL<&:/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    float_0 = 489.92
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    str_0 = ""
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    int_0 = 70
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    bytes_0 = b"\xc9"
    dict_0 = {}
    tuple_0 = ()
    tuple_1 = (dict_0, tuple_0)
    list_0 = [tuple_0, dict_0]
    tuple_2 = (bytes_0, tuple_1, bytes_0, list_0)
    module_0.get_new_command(tuple_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    float_0 = 317.301
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    int_0 = -3460
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    str_0 = "v?(w+c(cD$Y<W}PlVpK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    int_0 = -635
    module_0.get_new_command(int_0, int_0)


def test_case_128():
    pass


@pytest.mark.xfail(strict=True)
def test_case_129():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = "Q[4!G\x0cmh[O.|kf; (4mV"
    str_1 = "X0K^$t&pP)nUq\\O#"
    dict_0 = {str_0: tuple_0, str_1: bool_0, str_1: bool_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    str_0 = "6)e%Qvn $<TF)O"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    int_0 = 642
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    bytes_0 = b"\xb0\x14\x10\xe4\x06"
    int_0 = 350
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    str_0 = "#f0aU4AyG)WkWM/2n*Iv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    bytes_0 = b"\x87\xb1[\xf1\x0b\xe1qo\xf9\xc1\x03XO"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    list_0 = []
    tuple_0 = (list_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    int_0 = -2946
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    str_0 = "lVsi72yUh>2ee"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    float_0 = 5247.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_141():
    pass


@pytest.mark.xfail(strict=True)
def test_case_142():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_143():
    complex_0 = 830.65451 - 2140.545j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    list_0 = [complex_0, dict_0, complex_0, dict_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    complex_0 = -2429.1 - 2620.49903j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    str_0 = "9F]qknZ WU&h_7RV(-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    float_0 = 559.7937
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    int_0 = 2089
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [int_0]
    tuple_0 = (dict_0, list_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    bytes_0 = b"\xe8\xa7\x11pk.@\x0e\x1d\x11\x86lE\x07\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    tuple_0 = ()
    str_0 = "BKS#()?zstZ'xS\x0b"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    bytes_0 = b"\xe7\xd9\xe9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    int_0 = -2197
    module_0.get_new_command(int_0, int_0)


def test_case_156():
    pass


@pytest.mark.xfail(strict=True)
def test_case_157():
    str_0 = "o\x0c[vZl1lmQ(Dyyv2M?n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    str_0 = 'EjH^-v\nIMs="I}JI<'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    str_0 = "Gx/,k5slduD(o\r\t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    int_0 = -412
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    str_0 = "tX:D>*CT7`u4zw"
    module_0.match(str_0, str_0)


def test_case_163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_164():
    str_0 = "'iUy5efK\r"
    dict_0 = {str_0: str_0}
    int_0 = 2094
    tuple_0 = (str_0, dict_0, int_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    float_0 = -2377.0
    module_0.get_new_command(float_0, float_0)


def test_case_167():
    pass


@pytest.mark.xfail(strict=True)
def test_case_168():
    str_0 = "6s}xvp4|M+v(\\"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    none_type_0 = None
    int_0 = -1525
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    str_0 = "9xU<gl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    int_0 = 510
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    float_0 = 407.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    str_0 = "@8;zdN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    str_0 = "N"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    float_0 = -853.0
    bytes_0 = b"\xce\x80!\xf3q\xd5{\x0f\x00l\x0b\nj\xdd\xe5L\x10\xc9"
    list_0 = [float_0, float_0, float_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    str_0 = "$C\nP)pC{^X"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    int_0 = -2222
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    float_0 = -1257.59064
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    float_0 = 1593.049
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (object_0, float_0, tuple_0, float_0)
    dict_1 = {tuple_1: dict_0}
    module_0.match(dict_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    int_0 = 1066
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_191():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_192():
    str_0 = "|=s%o@2/r,Xm^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    bytes_0 = b'\xe5"!4\xa4\x1b:_\x1b%\x8c\x8a\x0f\xa8v\x8688\x8a'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    str_0 = "Lcw/D"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    str_0 = "u\r_+\\5Z52g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    int_0 = -5668
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    float_0 = 1445.98382
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    str_0 = "^/R7bXne _gt2%E(9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.get_new_command(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_201():
    tuple_0 = ()
    bool_0 = True
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (tuple_0, bool_0, list_0, list_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_202():
    bool_0 = True
    int_0 = 1128
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    float_0 = -2287.7518
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    int_0 = 555
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_205():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_206():
    str_0 = "4tg/^*C5&r;!a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    bytes_0 = b'=\xdf\x18\xac"\xad\x07\xb9 2a'
    str_0 = ")513bu"
    tuple_0 = (bytes_0, str_0)
    set_0 = {str_0, tuple_0, str_0, str_0}
    dict_0 = {tuple_0: str_0, str_0: set_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    str_0 = ">|l?\t4QfmY;obbD)G"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    tuple_0 = ()
    set_0 = {tuple_0}
    complex_0 = 1957.321 - 2590j
    tuple_1 = (tuple_0, complex_0)
    module_0.get_new_command(set_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_210():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    bytes_0 = b"\x03\x8b\n\xc9\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    int_0 = -2266
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bytes_0 = b"8F\xe3\xc9\xc0\xcf2\x07#\xfe\xe5\tE\xfd\x8bp[\xfcF"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    complex_0 = 1999.616988 + 611.97627j
    bool_0 = True
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    str_0 = "WT,kg  @Fq&7jv%+gk?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    float_0 = 2741.808477
    float_1 = -1916.251183
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_219():
    int_0 = 1517
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    int_0 = -1499
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    int_0 = 993
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_223():
    pass


@pytest.mark.xfail(strict=True)
def test_case_224():
    float_0 = 3086.569
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    bytes_0 = b"\xd4\xce%jF\xc3\x10\xd2\x17_\xb8\xaa\x83\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    bytes_0 = b"\xe5\x16%"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    bytes_0 = b"I\x8b\xab\xb8h\xa3\x8dy{\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    bytes_0 = b"\xf8/\x98\xca\xca\xb8\xe5\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    int_0 = 1766
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    bytes_0 = b"z\xac\x89\xdd\xa7w]q\x87l\xed\x12\xad\xb8/Y\xfeJ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    complex_0 = 170.4424 + 1030.851977j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    bytes_0 = b"\xa23dK~\xc4k\x85\x14\x12\x13\x06"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    int_0 = -1087
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    int_0 = 506
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    str_0 = "UIqJb@ZE.."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    bytes_0 = b"\xca\xdb~\xbb4\x82\x10x\xda\xcd\xba\x9a\xc3\x19$\xbc\xa7\x99\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    bytes_0 = b"\x7f\xbe2\xdck"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    int_0 = 1404
    set_0 = {int_0, int_0}
    bytes_0 = b"\xc9\x1c\x8ad\x87,\x88\x98l\xbe)}\xbfa1"
    tuple_0 = (set_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    str_0 = "[~@.?\x0bgoKVb<V8mqGG"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    int_0 = 281
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    complex_0 = 2916.05 - 510j
    bool_0 = False
    tuple_0 = (complex_0, complex_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    str_0 = '["~?~"l\x0bTRv'
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    bytes_0 = b"\x0cE\xe8B\x90U\x92BO\xed\xc7\xda]\x1f\xf6\x17/\xc4|"
    int_0 = 2080
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    str_0 = "4\t2t}XIYT~Put]O.fLT"
    complex_0 = 2150.744 - 3269.804971j
    module_0.get_new_command(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    bytes_0 = b"(\xba\xdc\xc6\xd1"
    bytes_1 = b"\xf6\xa0\xb4/W\xa6)MBg\xab#f\xf8("
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_251():
    int_0 = 1167
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    str_0 = ',"ag/TgO@pQk>'
    str_1 = "-;\nFop4n\x0ct;J4ukv "
    set_0 = {str_1, str_0, str_0}
    complex_0 = -2411.73632 + 1093.3j
    dict_0 = {str_0: str_0, str_0: str_0, str_1: set_0, str_1: complex_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    int_0 = 1180
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    bool_0 = False
    str_0 = "|V@cb:B\tG[p"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_256():
    pass


@pytest.mark.xfail(strict=True)
def test_case_257():
    complex_0 = 1576.42 + 150.364678j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    bytes_0 = b"x\xe7\x9fn\x13z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    int_0 = 1791
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    complex_0 = 2123.84 + 512.994388j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    bool_0 = True
    int_0 = 2741
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, int_0: bool_0, bool_0: int_0, int_0: list_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    int_0 = -290
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    float_0 = -1829.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    int_0 = 616
    int_1 = 1324
    str_0 = "L"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (int_0, int_1, list_0, int_1)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    bytes_0 = b"\xb6\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    float_0 = -1993.49664
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    float_0 = 1700.8
    object_0 = module_1.object()
    dict_0 = {float_0: float_0, object_0: object_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    str_0 = "0Z\x0c\"sQyb|0tVy'J=R{"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    bool_0 = False
    int_0 = 1665
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    int_0 = 1763
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    float_0 = -3016.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    float_0 = 1484.3
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (list_0,)
    tuple_1 = (float_0, float_0, bool_0, tuple_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    bytes_0 = b"\xc9\xdfr\xae\xaa\xbb\xb6\xad:"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    complex_0 = 496.07293 - 2350.1j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    str_0 = "=GnVl+psVics{v#!ld?N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    float_0 = 2795.194
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    int_0 = -151
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    complex_0 = 59 + 2960.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    bool_0 = False
    bytes_0 = b'\xdb]\x1ej>"\x03\xdb\xbd\x05\xac\x89'
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bytes_0, bool_1)
    module_0.match(tuple_0, tuple_0)


def test_case_283():
    pass


@pytest.mark.xfail(strict=True)
def test_case_284():
    str_0 = "\tCe5F<FD`M"
    set_0 = {str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


def test_case_286():
    pass


@pytest.mark.xfail(strict=True)
def test_case_287():
    float_0 = 1073.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    float_0 = 15.34
    set_0 = set()
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: set_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_289():
    pass


@pytest.mark.xfail(strict=True)
def test_case_290():
    str_0 = "3fM8\x0b3.^\t_m?`"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_292():
    int_0 = -1404
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    int_0 = -742
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_296():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    bool_0 = True
    str_0 = "E !is"
    int_0 = 1312
    tuple_0 = (bool_0, str_0, int_0, int_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    str_0 = "TR,AW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    tuple_0 = (dict_0, dict_0, dict_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    float_0 = 2242.28
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (list_0, float_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    str_0 = 'lV%"!j'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    int_0 = 2509
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    float_0 = 1968.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    str_0 = "f!(q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    bytes_0 = b"\x97\n\x1c\x12\x05\xf2X\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    int_0 = 1303
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    bytes_0 = b"\x02X\x1a\xfa\xbd\n\xdeg\x16\x89\xf4\x9f\xa9"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    bytes_0 = b""
    str_0 = "cj)!7\r2"
    tuple_0 = (bytes_0, str_0, str_0)
    set_0 = {tuple_0, bytes_0, tuple_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    int_0 = -328
    list_0 = [int_0, int_0, int_0]
    int_1 = 590
    module_1.object(*list_0, **int_1)


@pytest.mark.xfail(strict=True)
def test_case_313():
    complex_0 = -1337.236 + 1881.626j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    bytes_0 = b"\xfa\xcc\x1fJEf_\x13\x10\xd2\xdb\xe1\xff^0;t3\x13B"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    bytes_0 = b"\x80\xd6\xfb\xaf\x07L\xb7\xc6\x88\xcf!A\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    int_0 = -3784
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    int_0 = -675
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    int_0 = -2287
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_322():
    int_0 = -2954
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    int_0 = 461
    list_0 = []
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    int_0 = 755
    bool_0 = True
    list_0 = [int_0, int_0, int_0, bool_0]
    bool_1 = False
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_325():
    complex_0 = 4394.48317 + 387.63j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    int_0 = -1005
    list_0 = [int_0]
    int_1 = 4477
    module_0.match(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_327():
    str_0 = '(" Ok]bf(e\x0b`5'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    int_0 = 1488
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    str_0 = "YJ]\th%T:I;8"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    int_0 = -100
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    bytes_0 = b"\xfeO\xcd\xa8\xdf\x1f\xa8\x80\x01\x17\x95xj+\x9b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_337():
    str_0 = ""
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    str_0 = "2"
    list_0 = [str_0, str_0]
    tuple_0 = (str_0, list_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    bool_0 = False
    str_0 = "WH8^M/Y}bl;t 6"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    float_0 = -1229.82564
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    float_0 = -256.379
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    bytes_0 = b"\xb7Q\xfb\r\xfbq"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    int_0 = -2361
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    str_0 = "B<%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_347():
    pass


def test_case_348():
    pass


@pytest.mark.xfail(strict=True)
def test_case_349():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    int_0 = 289
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    bytes_0 = b"\x85\xe5\x04\xd7x\xc2c\xcb\xb81u\x9a"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    float_0 = 1064.75625
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    bytes_0 = b"\xa1G"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    str_0 = "f)Q*1["
    bytes_0 = b"Obx"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    complex_0 = -1708 + 3231.115j
    set_0 = {complex_0}
    str_0 = "2%OL-iO934=w8DG"
    list_0 = []
    tuple_0 = (list_0,)
    tuple_1 = (set_0, complex_0, str_0, tuple_0)
    dict_0 = {complex_0: tuple_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    int_0 = 2525
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    str_0 = "T)dKT>P!'_$Q\x0bK.T+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    complex_0 = -1232 - 4011.95j
    module_0.match(complex_0, complex_0)


def test_case_360():
    pass


def test_case_361():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_362():
    int_0 = -364
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    str_0 = "ifKS<=*S$\r,9gif)t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    int_0 = -608
    module_0.get_new_command(int_0, int_0)


def test_case_365():
    pass


@pytest.mark.xfail(strict=True)
def test_case_366():
    int_0 = -937
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    bytes_0 = b"j"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    bytes_0 = b"\x8f\x08j\xad\xce\x99#Fqn\xfecR\x17\xa0\x8f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    complex_0 = -366.58865 + 902.185802j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    none_type_0 = None
    str_0 = ""
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    int_0 = -173
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    int_0 = -1509
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    bytes_0 = b"\xc2{\x9b#<\xd5?\x8d\xab"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    bytes_0 = b"]O\xe19\xa8\x17\xe3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    complex_0 = -1717.8882 - 2875.07j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    int_0 = 139
    set_0 = {int_0, int_0}
    list_0 = [set_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    none_type_0 = None
    int_0 = 1268
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    str_0 = "HR*)h(GY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    str_0 = "tgq;e+"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    int_0 = -974
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    float_0 = 965.5058
    str_0 = "hg9W0a!B."
    tuple_0 = (float_0, str_0)
    dict_0 = {tuple_0: str_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    bytes_0 = b"J"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    bytes_0 = b"\xfa\xac\xb1PW\x0e\x99la"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    int_0 = -1622
    tuple_0 = (int_0, int_0, int_0, int_0)
    float_0 = -1596.0
    list_0 = [tuple_0, int_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    str_0 = "\"hBhD\\?tK3366'&@D#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


def test_case_390():
    pass


@pytest.mark.xfail(strict=True)
def test_case_391():
    none_type_0 = None
    float_0 = 525.6
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    none_type_0 = None
    bytes_0 = b"\x0c\xf8\x8av\x7f\x84\x06\xdc,\x86}/}\xeaj\x87e\x1d"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    str_0 = 'fEt|=&*.y&LD"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    float_0 = -978.251
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    int_0 = -1229
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    int_0 = 3319
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    int_0 = -2310
    bytes_0 = b"\xd2\x81\xa8\x94\x12C\x0cJl\xe1\x1e\xaf\x1b\xd9\xbb\x04\xe7"
    tuple_0 = (int_0, bytes_0)
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    int_0 = -581
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_402():
    int_0 = 1495
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    complex_0 = 168.82682 + 3304.500046j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    bytes_0 = b"\x8e\x082\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    bytes_0 = b"\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    float_0 = -4422.191905
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    tuple_0 = ()
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    bool_0 = False
    tuple_1 = (tuple_0, list_0, bool_0, list_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    str_0 = "-]H$_\tJ3B\x0c_qVGI<I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    complex_0 = 2606.6053 + 434.06207j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    float_0 = -870.415
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    bytes_0 = b"p{\xaf\x8a\xb4~eI\xf4\x97kK]\xa3\xb7"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bool_0)
    bool_1 = True
    set_0 = {bytes_0, bool_1, tuple_0, bytes_0}
    tuple_1 = (bytes_0, tuple_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    complex_0 = 614 + 2124.269298j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    str_0 = "\r*M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    str_0 = "wQ<~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    complex_0 = 3839.123 + 276.65j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    bytes_0 = b"\xaa@\x81\x82\xb8\x9b\x15,\xf1\xfa"
    set_0 = {bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    bytes_0 = b"\x91\xe9\xcd\xbdn\x10\x99_\xbc\x99"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    str_0 = "\r-.P-9]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    int_0 = 2139
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    int_0 = -2540
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    complex_0 = -3946 - 2174.6j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    bytes_0 = b"\xc6b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    bytes_0 = b"\xd2\xab\xf5\xc7\xf1$~\x00\xc9\xafBPu\x04\x01\x7fZsp"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    int_0 = -1445
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    bytes_0 = b"\xbf\x94\xf41\x10\xe1\xd5rM\xc5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    bytes_0 = b"\xc0AvI\xc5\xbf\xb1B\xd6\x8b\x8f\x99\x9e\xcav\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    bytes_0 = b"\r\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    float_0 = -695.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    int_0 = -1047
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    str_0 = "\t;vJ\\+oFY%+xoZ0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bytes_0 = b"-\xb9\x95\xd9\xfcq\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    complex_0 = -2864.5 - 1338.027j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    int_0 = -1631
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    bytes_0 = b"nI7a\x00\xfeu\xa7X\xbe\x18\xb3t\xf1\xbfPT"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    int_0 = 1224
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    bytes_0 = b"wBaf\xbf\r#\xdc\x95"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    set_0 = set()
    int_0 = 1735
    bool_0 = False
    dict_0 = {bool_0: set_0}
    list_0 = [set_0, bool_0, dict_0]
    tuple_0 = (set_0, int_0, set_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    int_0 = 1095
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    str_0 = "Ru^jew58"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    int_0 = 155
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    str_0 = ">7<1%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    int_0 = -775
    int_1 = 2350
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_456():
    int_0 = 339
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    complex_0 = 295.68288 + 1372.78j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    str_0 = ">@Vk|^gE^2&Y>f t4B"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    float_0 = 1078.21
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    complex_0 = -558.076173 + 3718.465861j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    int_0 = 212
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    int_0 = -1735
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0, tuple_0)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    bytes_0 = b"c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    int_0 = 2408
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    int_0 = -2763
    module_0.get_new_command(int_0, int_0)


def test_case_466():
    pass


@pytest.mark.xfail(strict=True)
def test_case_467():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    str_0 = "\x0b%3\n`L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    str_0 = '["QV&gn(b8aXK'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    int_0 = -1036
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    bytes_0 = b"\xb4\nH\x85X\xd3\x9d\x87TmnA\xb8\xec\x9a\xeej\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    int_0 = -537
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    float_0 = 1389.021
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    bytes_0 = b"'\x7f0O\xd6<\xe5(\xfe8\xa9\x16p%[\xba"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    str_0 = "L&\\i1BKT<'bf,'>}ou"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    float_0 = -2513.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    complex_0 = 888.135585 - 2441.907487j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    int_0 = -227
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    int_0 = -879
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    str_0 = "uaC5C5OTQ'',2'):_D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    int_0 = 383
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    str_0 = "M5b\x0cg\x0b=W\n7'!hBE'\tR9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    str_0 = "Q&#g_"
    bytes_0 = b'\xae\xad"_\x1d\x16\xed'
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, str_0: bool_0, bytes_0: str_0}
    tuple_0 = (bytes_0, dict_0, str_0, dict_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    bytes_0 = b"\xb1\xb8Vu\x08"
    bytes_1 = b'\xf5\xf8\x03%7"'
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_487():
    int_0 = -1840
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bytes_0 = b'\xacX"i\xd4\x10gj\xed\x83\x87\xdb\xbb\xe0\x00\x12'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    int_0 = 2063
    list_0 = [int_0, int_0]
    bytes_0 = b"\x84e__\x9c\x03T\x03-y\x08$;*\x9e"
    dict_0 = {}
    set_0 = set()
    tuple_0 = (list_0, bytes_0, dict_0, set_0)
    tuple_1 = (int_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    str_0 = ".T2bAqvtz)F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    none_type_0 = None
    str_0 = "ys8z ->[/[5y&[#"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    str_0 = "<?^&=vw,gz}USz!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    int_0 = -1883
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_496():
    pass


def test_case_497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_498():
    str_0 = "P'mNk=h}EE{G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    float_0 = -1820.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    str_0 = "G6S`5$t*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    bytes_0 = b"\x10\xf6\xef\xaf\x8aN\\\xd7\xbcS\x9bD\xd1\x8f\xba\xf6\x01;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    bytes_0 = b"gY4BL\t|\x8f\x91\xd4'X\x93\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    str_0 = "\t?:Yfw-yu@EPX(O"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    int_0 = -415
    str_0 = "a%\x0bE)}YfKw]`/yW x*i "
    dict_0 = {str_0: int_0, str_0: int_0, str_0: int_0}
    dict_1 = {int_0: int_0, str_0: str_0, str_0: int_0, str_0: dict_0}
    module_0.get_new_command(dict_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    bool_0 = True
    int_0 = -1428
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    int_0 = -1550
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    int_0 = -2713
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    int_0 = -2873
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


def test_case_511():
    pass


@pytest.mark.xfail(strict=True)
def test_case_512():
    bytes_0 = b"D\x9f\xea\xc9\x12\xda$~W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    str_0 = "<rT\\[VMf"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    int_0 = 808
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    float_0 = 475.51009
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    bytes_0 = b"\x0ep\xf6\x86\xd5r\xf8\x1b\xbb\xb0^\x17"
    int_0 = -455
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    str_0 = "@6GXTE"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    int_0 = 1248
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    str_0 = "`=?g_\tg;ft}=f.IR*Kj]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    none_type_0 = None
    str_0 = "LcK=*oQi\tddB&v"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    float_0 = 1784.42
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    complex_0 = -1770.7 + 32.4j
    bytes_0 = b"\xeaU\xcc1G\x01r\xa0O>"
    bytes_1 = b"zK\xaa"
    str_0 = "GN]zB~beD"
    tuple_0 = (complex_0, bytes_0, bytes_1, str_0)
    list_0 = [tuple_0, bytes_1, bytes_1, bytes_1]
    module_0.get_new_command(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_525():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    int_0 = 2960
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    int_0 = 2137
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    float_0 = -951.9586
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


def test_case_532():
    pass


@pytest.mark.xfail(strict=True)
def test_case_533():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    int_0 = 2848
    module_0.get_new_command(int_0, int_0)


def test_case_535():
    pass


@pytest.mark.xfail(strict=True)
def test_case_536():
    int_0 = -334
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    str_0 = "#xL6]g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    bool_0 = False
    bytes_0 = b"\\(\xf6\xd7\xae\x1e\xff\xa2]=\x95\xef\xec"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    none_type_0 = None
    str_0 = "9XD\n01\t"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    int_0 = -4653
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    str_0 = "^jN6[hs7e7k->Q2F,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    int_0 = 2071
    bytes_0 = b"\x80\x85;\xbc\x0e`\xcc}"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    str_0 = "Y\nSFI/`+MCjsM5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    bool_0 = True
    bool_1 = False
    bool_2 = True
    tuple_0 = (bool_0, bool_0, bool_1, bool_2)
    module_0.match(tuple_0, bool_1)


def test_case_549():
    pass


@pytest.mark.xfail(strict=True)
def test_case_550():
    int_0 = -3053
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    float_0 = -371.6324
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    str_0 = "<^)a"
    bool_0 = False
    set_0 = {str_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    int_0 = 879
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    int_0 = 2437
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = ""
    int_1 = -192
    dict_0 = {str_0: int_1, str_0: int_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    bool_0 = False
    set_0 = {bool_0}
    str_0 = "9zAli01o$>yX9$\r?6dL"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    list_0 = []
    complex_0 = -1440.74 - 85.1j
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    bytes_0 = b"c\x8b\xe4n\x070[\x83\xf7\x04aKt*(\xe6\x0e\x03N\x92"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_560():
    pass


@pytest.mark.xfail(strict=True)
def test_case_561():
    int_0 = 608
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    bool_0 = False
    bytes_0 = b"\x87\x7f\x0f\x98"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    bytes_0 = b"@Mi\xa1\xbdi\xd8\xd0\xa5\xfc\xd6h\xd2-l7"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    list_0 = [bool_0, bool_0, bytes_0, bytes_0]
    dict_0 = {tuple_0: bool_0, tuple_0: list_0}
    tuple_1 = (bytes_0, tuple_0, dict_0, list_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    list_0 = []
    bytes_0 = b"<\x9dI\x96\xaa"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    int_0 = 1240
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    bytes_0 = b"\xa5\xf0\x19\xb5\x9f\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    str_0 = "\x0b4s-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    int_0 = 746
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    int_0 = 434
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    bytes_0 = b"\xcd\x82/+\xd6!\xff/"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    int_0 = -3069
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    int_0 = -61
    module_0.match(int_0, int_0)


def test_case_575():
    pass


@pytest.mark.xfail(strict=True)
def test_case_576():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    float_0 = 60.176844
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    str_0 = "z(P<8T#qg|byhrf[\rw>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


def test_case_581():
    pass


@pytest.mark.xfail(strict=True)
def test_case_582():
    str_0 = "r)0fe*}P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    bytes_0 = b"\xe3\x8bpI\xb7"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, bytes_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    float_0 = 4065.532928
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    list_0 = []
    object_0 = module_1.object(*list_0)
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    bytes_0 = b"=\x9a\x87(J\xce\x17\x7f\xb3\xf6\xb3\xdd^t2\x96\x84u"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    int_0 = 217
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    str_0 = "bhg\r74Zld$5}"
    int_0 = 752
    bytes_0 = b"e\xd5%\x8a>\x1c:\xc8T&"
    tuple_0 = (int_0, bytes_0)
    tuple_1 = (str_0, tuple_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_591():
    int_0 = -3173
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    int_0 = -3380
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    int_0 = 392
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    bytes_0 = b"elC\xf0n\x1f4\x89\xfb)\x0e\x8f\x15\xe1\xfd"
    module_0.match(bytes_0, bytes_0)


def test_case_596():
    pass


def test_case_597():
    pass


@pytest.mark.xfail(strict=True)
def test_case_598():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    int_0 = 3957
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    complex_0 = 2964.5 + 2074.26j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    str_0 = "x`QWdBAz])\t,j0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    int_0 = 785
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    int_0 = 2149
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    float_0 = 126.00285
    set_0 = {float_0, float_0, float_0}
    str_0 = ".@N+x#8uE9s\rJ6.v[L"
    tuple_0 = (float_0, set_0, float_0, str_0)
    float_1 = -2423.2
    module_0.get_new_command(tuple_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_605():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    int_0 = 321
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    complex_0 = 1678.1 - 548.613j
    list_0 = [complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    int_0 = 1622
    complex_0 = 29.5625 - 1531.8j
    tuple_0 = (int_0, int_0, complex_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    bool_0 = False
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    tuple_0 = ()
    str_0 = "1S3*]K-"
    dict_0 = {tuple_0: tuple_0, str_0: str_0, tuple_0: str_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_612():
    pass


@pytest.mark.xfail(strict=True)
def test_case_613():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    bytes_0 = b"c\x81\x01R#\xe6\xed\x92"
    module_0.match(bytes_0, bytes_0)


def test_case_615():
    pass


@pytest.mark.xfail(strict=True)
def test_case_616():
    str_0 = "\rQSm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    none_type_0 = None
    bytes_0 = b"\xe70\xca\xd3\xc7\x88(\xba\x8a\xbc\xe0"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_619():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    bool_0 = False
    bytes_0 = b"\xd5,O\x1a\x94\xa8,"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    list_0 = [set_0, set_0, set_0, bytes_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    int_0 = 2454
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    float_0 = 649.82
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    int_0 = -907
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    str_0 = '#_r";'
    set_0 = {str_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    int_0 = 1159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    bytes_0 = b"\xd54Iv.\xf3\x9e+J\x7f\xc3!DO\x0fO"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    float_0 = -1929.075
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    str_0 = "#$Q^yAcH(QF9w @x1d"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    bool_0 = False
    bytes_0 = b"K"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    str_0 = "v'_)'0zMF\t89D.5 "
    set_0 = {str_0, str_0}
    bytes_0 = b"3\xe4\xc6\x91i\xf8\x04\xea\ty,J"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    float_0 = -1413.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    int_0 = -1587
    module_0.match(int_0, int_0)


def test_case_635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_636():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    bytes_0 = b"V\x87)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    int_0 = -1669
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    bool_2 = True
    module_0.get_new_command(tuple_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_641():
    complex_0 = -2438.1611 + 2684.73j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    int_0 = -1138
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    str_0 = "b%8Yf/]g Zc\\=q_n\r7]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    int_0 = -1975
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    int_0 = 1263
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    int_0 = -573
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    int_0 = -2268
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    float_0 = 4071.34221
    set_0 = {float_0, float_0}
    list_0 = [set_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    bytes_0 = b"\x1c\x1b\x8d\xd0\x97d\x85\x1e\xae\x90\x03\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    float_0 = -593.0
    bytes_0 = b"'\x12\x0b\xb9\x1c[\x11sB\xeeFx\x03\x96\x8a\xd3\x90\xff\xa8"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    bytes_0 = b"Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    int_0 = 2106
    float_0 = 309.7
    dict_0 = {int_0: int_0, int_0: float_0, int_0: int_0}
    list_0 = [dict_0, int_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    bytes_0 = b"\x1c\xddG\xdb:e/\x00N\xf7\xb0\xa8'\xa8\xfbpW"
    int_0 = -300
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    none_type_0 = None
    int_0 = -1962
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    bool_0 = True
    int_0 = 2529
    set_0 = set()
    bool_1 = False
    tuple_0 = (bool_0, int_0, set_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_657():
    bytes_0 = b"\xd5\xab\x83\xed\xf8\x7f\xef$vG\xed\x8dTL<"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    str_0 = ""
    list_0 = [set_0, set_0, set_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    bytes_0 = b"O\\\xf7T\xd47s\x1faF\xea\xb0\x07\xd85\xb5\x18"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    float_0 = -814.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    bytes_0 = b"\x1a\xe7\\w\x04\x97\x9b+&\xd7\xd1\xd9\xe6\xa2\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    bytes_0 = b"\xa3w\xf6\xb8\xc6?\xac"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    int_0 = -2105
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    complex_0 = -1061 + 2961.83284j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    bytes_0 = b"BT\x15\xf8v\x9e\x0fP\x9cg?:\xc1m)\xe1]1\xf9\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    bytes_0 = b"\x1e\x1e\xef\xfe"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    object_0 = module_1.object()
    bool_0 = True
    int_0 = 2649
    tuple_0 = (bool_0, int_0, int_0, object_0)
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    int_0 = 3338
    module_0.match(int_0, int_0)


def test_case_672():
    pass


@pytest.mark.xfail(strict=True)
def test_case_673():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    int_0 = -795
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    bytes_0 = b"e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    bytes_0 = b"\xd3\xa1\xfd\xbfT"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    float_0 = -786.0
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    int_0 = -789
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    int_0 = 938
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    int_0 = -230
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    bytes_0 = b"\xfe\xfa\xbd\\\x8e\xda}\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    int_0 = 3125
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    str_0 = "\\O\twD&[XF2ekD"
    module_0.match(str_0, str_0)


def test_case_685():
    pass


@pytest.mark.xfail(strict=True)
def test_case_686():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    float_0 = 4085.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    int_0 = 979
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    str_0 = "r;FEf)"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    bytes_0 = b"J\xff\xc5\x13%\xa1\xf0\x1a8\xd7@a\x92\xf2}"
    set_0 = set()
    module_0.match(bytes_0, set_0)


def test_case_693():
    pass


@pytest.mark.xfail(strict=True)
def test_case_694():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_695():
    pass


@pytest.mark.xfail(strict=True)
def test_case_696():
    int_0 = 2089
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    bytes_0 = b"\xd4Zg\xde\xd6 8xh\x83\xa8\xe8\x19\xac\xeel\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    bytes_0 = b"\xca\x116\xb4<>\xd4\x18\xce2.\x02\xde>\x11\xff\xad\xecd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    bool_0 = True
    int_0 = 684
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    bytes_0 = b"\xad\x8dS 1\x1f#\xf2C\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    int_0 = -383
    bool_0 = True
    list_0 = [int_0]
    dict_0 = {int_0: list_0}
    tuple_0 = (int_0, bool_0, list_0, dict_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    str_0 = ":`gn7F; q"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    bool_0 = False
    object_0 = module_1.object()
    tuple_0 = (bool_0, bool_0, object_0, object_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    int_0 = -1681
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    int_0 = 104
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    int_0 = -4692
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    bytes_0 = b"Hi\xf9\xa9\xe1e\xeb\xdb\x18\\\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    list_0 = []
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    float_0 = -889.935066
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    bytes_0 = b"vk\x06\xcf\x11\x1a\xfeC\x08\x01<\xcb\xb0\x94\xf6?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    bytes_0 = b"\xe5\xcb\xa0#\x92\x1d\xa6\xe9\xce"
    bool_0 = False
    set_0 = {bytes_0, bool_0, bytes_0, bool_0}
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, bytes_0, list_0)
    bytes_1 = b"dy"
    bool_1 = False
    tuple_1 = (tuple_0, bytes_1, bool_1)
    bool_2 = False
    tuple_2 = (set_0, tuple_1, bool_2)
    tuple_3 = (bytes_0, bytes_0, tuple_2)
    tuple_4 = (tuple_3,)
    tuple_5 = (tuple_4,)
    module_0.match(tuple_5, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    none_type_0 = None
    int_0 = -1192
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    complex_0 = 995 + 2770.8976j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    bytes_0 = b"\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    str_0 = "\rQlg IBx<Q:)5Y0,:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    bool_0 = False
    int_0 = -1467
    object_0 = module_1.object()
    dict_0 = {bool_0: bool_0, bool_0: int_0, object_0: object_0, bool_0: bool_0}
    module_0.match(dict_0, object_0)


def test_case_720():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_721():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    float_0 = 337.7803
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    bytes_0 = b"\n\xb6\x84q\xdf<\x96"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    int_0 = -1277
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    bytes_0 = b'"$\xcak\xc1\xcd\x95G;\xa0'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    float_0 = 3295.636548
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    float_0 = -221.2785
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    str_0 = "@OT,JDTcpxk/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, set_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    str_0 = "!C_<c'qw"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    bytes_0 = b"\xa5\xd4\x13\xe6\xf0,\xec0\x88\x1a\xdf\xfb\xf5\t!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    tuple_0 = ()
    bool_0 = False
    list_0 = [tuple_0, bool_0, tuple_0]
    tuple_1 = (tuple_0, bool_0, bool_0, list_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    str_0 = "T~{VMLKQ\t;ZqGi'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    str_0 = "|x"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    float_0 = -466.85462
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    complex_0 = -1659.97317 + 1209.2093j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    bytes_0 = b"\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    int_0 = -3627
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    complex_0 = -272.64 + 1987.247j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    bytes_0 = b"\x80\x91z\x8e?\xad\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    float_0 = 844.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    int_0 = 874
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    str_0 = "J^h\\L&1L%}7Pk\x0bW%\\?!"
    bool_0 = False
    list_0 = [str_0, bool_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    str_0 = "0nGKx}+FaM9h:cM?{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    float_0 = -3218.39
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    str_0 = "`!B_0sN<[T54A2ef1!A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_758():
    str_0 = "B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    bool_0 = True
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    float_0 = -1750.18901
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_761():
    pass


@pytest.mark.xfail(strict=True)
def test_case_762():
    int_0 = 1385
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    str_0 = "?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    str_0 = ";i1\x0bv1K=I`>%g3\tC9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    str_0 = ""
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    bytes_0 = b"}\x07\xd5\xc2\xa33\xa0\xb6\x9b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    complex_0 = -2197.3 + 66.9533j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    int_0 = -5556
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    list_0 = []
    bool_0 = True
    str_0 = ""
    tuple_0 = (list_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    bytes_0 = b"\xf7v\x8b\xaf\x00\x9d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    set_0 = set()
    int_0 = 883
    module_0.match(set_0, int_0)


def test_case_772():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_773():
    complex_0 = 209.22088 - 2396j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    bool_0 = False
    str_0 = "b61\x0c7e0\t[2w5"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    str_0 = "g&9\\n,+>Zf=*0vN(k\r=5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    str_0 = "JY?RK'^/Fw2to\n|_@\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    bytes_0 = b"\xae\xab\xd5\x8f\x07lc3yF\x1f\xbe\x8c!\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    float_0 = 1858.9741
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    complex_0 = -168.14563 + 2607.689j
    module_0.match(complex_0, complex_0)


def test_case_780():
    pass


@pytest.mark.xfail(strict=True)
def test_case_781():
    str_0 = ":.K`I=u"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    str_0 = "jhG8m:HR!K;3|z=\t"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    int_0 = -781
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    str_0 = "lF$-4`}swERF*z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    tuple_0 = ()
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    complex_0 = 619.4346 - 83.4185j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, complex_0)


def test_case_787():
    pass


@pytest.mark.xfail(strict=True)
def test_case_788():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    str_0 = "8j"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    bytes_0 = b"!\xee\xf7\xf7K@\xb01\x81\x85\xa1S\xf9\xbb\xac\xf6|!\x94("
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_791():
    pass


@pytest.mark.xfail(strict=True)
def test_case_792():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    bool_0 = True
    bytes_0 = b"\xc2"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    float_0 = 59.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    str_0 = "0$kJ%\x0bRcZ \x0cu"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    bytes_0 = b"\x15\x90\xd6\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    str_0 = "gV%;^<>r@P:"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    int_0 = 1483
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    str_0 = "cKy)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    bytes_0 = b"t\xcb7_\x84I\xd4\xa0~:f\xf0}d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    bool_0 = True
    bool_1 = False
    str_0 = "{[0MFDs\t"
    dict_0 = {bool_0: bool_1, str_0: bool_0, bool_1: bool_1, bool_0: str_0}
    int_0 = -2251
    module_0.get_new_command(int_0, dict_0)


def test_case_804():
    pass


@pytest.mark.xfail(strict=True)
def test_case_805():
    int_0 = -528
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    bytes_0 = b"\xb6\xb0\xa5\xd4\xcf\x0c\x85\x04\xd2\xfd p\x9e\x90h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    str_0 = "J##8-``n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    bytes_0 = b"\x8a\x03c\xd1\x16\xf1\x07\xbf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_810():
    pass


@pytest.mark.xfail(strict=True)
def test_case_811():
    str_0 = "10\\+w?S/q."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    int_0 = -1103
    list_0 = []
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    str_0 = "Y`\\Uo@tk-'u1>)k:\x0cN\n7"
    str_1 = "B)*"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    complex_0 = -676.802 - 1528j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    str_0 = "o@9;EcOLHY;"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_817():
    pass


def test_case_818():
    pass


@pytest.mark.xfail(strict=True)
def test_case_819():
    bytes_0 = b"a\xc1\xa8?\xce\xec\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    int_0 = -553
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    int_0 = -4812
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    complex_0 = 230.68 + 3177.38236j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    list_0 = []
    str_0 = "3ta+`,C`7L\"N'VNfA\x0bG"
    dict_0 = {str_0: str_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    bytes_0 = b"R(\xfbhv\x0cj\x07\xec"
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    int_0 = 560
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    str_0 = ")IwD,"
    int_0 = 327
    list_0 = [int_0]
    tuple_0 = (str_0, int_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    bytes_0 = b"\xd3\x97\x03\xc6l\x12\xf9\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_828():
    pass


@pytest.mark.xfail(strict=True)
def test_case_829():
    int_0 = 2086
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    str_0 = "od{\rzD!f$Jgyt'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    bool_0 = False
    dict_0 = {}
    str_0 = "~eh2zrX"
    tuple_0 = (dict_0, dict_0, dict_0, str_0)
    tuple_1 = (dict_0, bool_0, tuple_0)
    tuple_2 = (bool_0, bool_0, tuple_1)
    module_0.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_832():
    int_0 = 2594
    int_1 = -3141
    tuple_0 = (int_0, int_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    str_0 = ",&6\n/U\x0c!\x0czIj$PS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    float_0 = 84.13
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    str_0 = "AGeR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    int_0 = -1590
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_839():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    float_0 = 1802.855
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, set_0, float_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    none_type_0 = None
    int_0 = 1029
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    str_0 = 'G+([]n/_"#fNFaZ!L:0'
    str_1 = "J4Cc"
    str_2 = "hS\"`Pep\nG.'397Vv/tn"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    int_0 = -837
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    int_0 = -2968
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    int_0 = -3497
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    str_0 = "\\a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    int_0 = -2793
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    float_0 = 1197.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    str_0 = "6Cq<}w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    str_0 = "Al5eB{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    float_0 = 1144.035
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    bytes_0 = b"."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    str_0 = "MQO[Dj:8%L&Od"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    int_0 = -2042
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    bytes_0 = b"\xe0\xed \xf3\x19\xa6\x8a{ry\xf9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    complex_0 = 2069.855 - 1228.8j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    object_0 = module_1.object()
    tuple_0 = (object_0, object_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    bool_0 = True
    str_0 = "1W=Q[PSL\x0bZIFKo'Xm"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    bytes_0 = b"\xd6l0\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    bytes_0 = b"=\xb7\x1e\xa5\x8b\xfa*\x9dE\xff-\x93V"
    module_0.match(bytes_0, bytes_0)


def test_case_863():
    pass


@pytest.mark.xfail(strict=True)
def test_case_864():
    str_0 = "qK&cm0$\\\rO-g{Sdx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    float_0 = 1497.5
    float_1 = 1065.77
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_866():
    complex_0 = -204.79257 - 2567.37j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    complex_0 = -940.753 - 109.7527j
    set_0 = {complex_0, complex_0}
    module_0.match(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    bytes_0 = b"\x0b\x85\xb9\x98\xcc"
    module_0.match(bytes_0, bytes_0)


def test_case_869():
    pass


@pytest.mark.xfail(strict=True)
def test_case_870():
    int_0 = -1208
    module_0.get_new_command(int_0, int_0)


def test_case_871():
    pass


def test_case_872():
    pass


@pytest.mark.xfail(strict=True)
def test_case_873():
    int_0 = -1568
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    str_0 = "k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    int_0 = 6292
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    float_0 = -1437.65544
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    tuple_0 = ()
    bytes_0 = b"\x1c\xd4\xb5\xdb,\xeed"
    list_0 = [tuple_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    str_0 = "zt40PZ%"
    set_0 = {str_0, str_0, str_0, str_0}
    bytes_0 = b"\xa3\x11TVd}2]u/:7\x8cwu\xf6\xb5\xf1^\x91"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    int_0 = -2651
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    object_0 = module_1.object()
    bytes_0 = b"f}\x85g`\x87\xd0\xd6\x1e x\xa9\xe7\xbc\xd8\x0bW\x91"
    list_0 = [object_0, object_0, bytes_0, bytes_0]
    list_1 = [list_0, object_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    float_0 = 987.9105
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    bytes_0 = b"\x06"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    str_0 = "WP7Wbvgl\n):;c\r."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    bytes_0 = b"Z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    float_0 = 2893.5
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    bytes_0 = b"\xa4\xdf/r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    int_0 = 2094
    list_0 = [int_0, int_0]
    float_0 = 252.69
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    complex_0 = -46.2 + 4871.03j
    module_0.get_new_command(complex_0, complex_0)


def test_case_894():
    pass


@pytest.mark.xfail(strict=True)
def test_case_895():
    float_0 = -1579.77709
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    float_0 = -3161.66481
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    str_0 = "5gZ7$:WJT^(T\x0cs$1K"
    set_0 = {str_0}
    int_0 = 1102
    bytes_0 = b'\xa8"Wv\xd3 \x15U\xfb'
    tuple_0 = (set_0, int_0, bytes_0)
    bool_0 = False
    tuple_1 = (str_0, str_0, tuple_0, bool_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    str_0 = "`O`\t~^@*Jj#(us]}5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    bytes_0 = b"\x08B\xdb`\xa1H \xe6\xcc\xff\xf1\xf9"
    set_0 = {bytes_0, bytes_0}
    dict_0 = {}
    str_0 = "xg@yhYncd@Z(s:O0,"
    tuple_0 = (dict_0, dict_0, str_0)
    tuple_1 = (set_0, tuple_0, str_0)
    tuple_2 = (bytes_0, tuple_1)
    list_0 = [tuple_2]
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_902():
    int_0 = -1878
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    int_0 = -2265
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    float_0 = -1115.0
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    bytes_0 = b"\xab\x02\x19n\x01\x7f!\xe5\xb7\xe0\x86\xad\xc0\tw\x98&\xed\xe0w"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "E"
    tuple_0 = (bytes_0, dict_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_906():
    pass


@pytest.mark.xfail(strict=True)
def test_case_907():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    bool_0 = True
    int_0 = 1658
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    complex_0 = 1400.5 - 244.311j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    float_0 = 171.66
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    int_0 = -346
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    bytes_0 = b"\x1e<+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    int_0 = -1921
    bytes_0 = b"\xb3\t\x0e\xae\xf0b\xc0\x89\x1d"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    list_0 = []
    tuple_0 = (list_0,)
    list_1 = [tuple_0, tuple_0, list_0, tuple_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_916():
    bytes_0 = b'"\xe1\x8a\xae\x16\xd1U\xd6\x8d+\x8a\xbe'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    float_0 = 1896.8104
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    str_0 = "T`@VIlRir5]1HY"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    float_0 = 1858.980113
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    bool_0 = True
    set_0 = {bool_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    int_0 = 2300
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    str_0 = "W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    complex_0 = -2138.00685 - 2678.770984j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    int_0 = -108
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    complex_0 = -3380.23776 - 1093j
    int_0 = 870
    set_0 = {complex_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = "\tQ^"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    str_0 = "4x'#_\x0c#="
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    int_0 = -1192
    bytes_0 = b"7\x9e\x93"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    bytes_0 = b"Ei\x05k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    bytes_0 = b"\n+Y\xcf\xd3 V\xf2\xb4\x85\xb2\x86]\xc9\xe8C"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    str_0 = "^zMG;H\x0c>s5Dfaj_"
    bytes_0 = b"y\xe1"
    tuple_0 = (str_0, str_0, bytes_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_937():
    int_0 = 388
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    int_0 = -112
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    int_0 = 2317
    bool_0 = False
    set_0 = {int_0, bool_0}
    set_1 = set()
    module_0.match(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_940():
    str_0 = "xQz\x0bm$"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0, set_0]
    list_1 = [list_0, list_0, set_0]
    module_0.get_new_command(list_1, list_1)


def test_case_941():
    pass


def test_case_942():
    pass


@pytest.mark.xfail(strict=True)
def test_case_943():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


def test_case_944():
    pass


@pytest.mark.xfail(strict=True)
def test_case_945():
    str_0 = "A"
    str_1 = "x"
    bytes_0 = b"\xc8\xa2-\x9aq\x918\x084{\xc2\x7f\xa2\xf4\x96\xec\xef\x87\xd2"
    str_2 = "/jJ[]"
    str_3 = "2?;b]Ww{ju:h1ayCv"
    dict_0 = {str_0: str_0, str_1: bytes_0, str_2: bytes_0, str_3: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


def test_case_947():
    pass


@pytest.mark.xfail(strict=True)
def test_case_948():
    float_0 = -807.895132
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    int_0 = -1862
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    str_0 = "\rT\rop3_R0j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    str_0 = "M}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    str_0 = "-mtuRi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    int_0 = 440
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    str_0 = " ChZ!QH`1L"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    int_0 = -315
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    complex_0 = -1927.6 + 1826.32321j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    bytes_0 = b"\x0fu\\\x0c\xc9:\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    int_0 = -2797
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    str_0 = "s"
    list_0 = [str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    complex_0 = -1925.998 - 1070.43j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    float_0 = -5062.62
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    float_0 = 2756.593
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    float_0 = -2140.6195
    module_0.get_new_command(float_0, float_0)


def test_case_964():
    pass


@pytest.mark.xfail(strict=True)
def test_case_965():
    bytes_0 = b"B\xbbmd\xdd\xe8,\xf1\x9fj\x7fx\x8a"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    int_0 = -209
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_970():
    pass


@pytest.mark.xfail(strict=True)
def test_case_971():
    int_0 = 2686
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    str_0 = "jxpcSeU&P\t1<g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    bytes_0 = b"\x02\x81\xf8"
    list_0 = [bytes_0, bytes_0]
    dict_0 = {bytes_0: list_0}
    module_0.match(dict_0, bytes_0)


def test_case_974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_975():
    bytes_0 = b"-\xa2z\x1a{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    int_0 = -2715
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    int_0 = -5
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    str_0 = "*~!<h\n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    int_0 = 1900
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    int_0 = 632
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    list_0 = []
    bool_0 = False
    module_0.match(list_0, bool_0)


def test_case_985():
    pass


@pytest.mark.xfail(strict=True)
def test_case_986():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    int_0 = 1550
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    bytes_0 = b"\xe4\xdd\x07\x1e\x11\x06f\x87\x07g'\t(\xb6S@"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    int_0 = 1104
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    int_0 = 1356
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    bytes_0 = b"\x1a\xf4\xb0\xd6\x93:\xe4\x1d\xdb\xec\xdc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    int_0 = -1580
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    bytes_0 = b"\x0c\xc7\xfe\xd7\xc6\xb4\x0f\x1c\x88\xf54\xf9\x07l"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    int_0 = -615
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    bytes_0 = b"Ni\xe5\xbc\xee\xbd\xc6\xe6\xb2UlQN]\xc6\x80l\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    complex_0 = 3535.882071 - 1347.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    str_0 = "\rfLHj~JR|{Le%P"
    float_0 = 2005.3
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    float_0 = 1345.90949
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    int_0 = 2635
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    float_0 = 2742.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    int_0 = -2199
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    float_0 = 1189.136
    list_0 = [float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    str_0 = '|szn\n"2'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    bytes_0 = b"Hj\xd2Z\xb2\xb2\xe1W\x9c\xdc\xd0\xeex\xf6n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    float_0 = -823.8543
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    bytes_0 = b"\xee\xb8\xf8$%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    float_0 = 3078.77
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    int_0 = -14
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    int_0 = 1666
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    none_type_0 = None
    bool_0 = True
    tuple_0 = (none_type_0, bool_0, none_type_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    str_0 = "hOSOFnSJAnVX0!H "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [str_0, str_0, dict_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    bytes_0 = b"j*;U\xcea\xce\x1a"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    int_0 = -107
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    int_0 = -1596
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    float_0 = 159.8
    str_0 = "Cp\rj\t\x0bWp"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    int_0 = 376
    int_1 = -636
    bytes_0 = b"\xab\r\xf7@\x96y\x14\xad\xb1%%W\x9f&\xa1H\x00;\xac"
    tuple_0 = (int_1, bytes_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_1023():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1024():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    none_type_0 = None
    str_0 = "<f`1\tz\tD,\x0cDRKp;0D/"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    int_0 = -4244
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    str_0 = "\nh%.sEK\\`KGaf6s\x0c#+x%"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    str_0 = "?:~/&b|Ta"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    str_0 = '> Ks&N#"OdrJ`Z+?'
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


def test_case_1030():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1031():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    str_0 = "\\}pT"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    bytes_0 = b",\xbf\\g\x0e\x02\x0cl\x0c\xc1\xe2\x9d?"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    int_0 = -340
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    bool_0 = True
    str_0 = "K[Fu5AoMll"
    str_1 = "<l\\<0<f|XQ9i"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_1: str_1}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    str_0 = '\x0cFsew"hbfwX:V<^:`f'
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    int_0 = -2010
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    str_0 = "Mky/WC@gG8#}=<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    str_0 = "0\x0cZ2"
    list_0 = [str_0]
    float_0 = -1697.1852
    tuple_0 = (str_0, list_0, float_0)
    dict_0 = {str_0: float_0, float_0: tuple_0}
    tuple_1 = (dict_0,)
    list_1 = [tuple_0, tuple_1, tuple_1]
    module_0.get_new_command(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    str_0 = "wx30jeEh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    int_0 = 734
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_1045():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1046():
    str_0 = "=rBzOOz>NG:7wT(;#$x"
    str_1 = ".\nfe9"
    set_0 = {str_0, str_0, str_1}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    str_0 = "I\\2N"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    float_0 = 2849.573
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    bytes_0 = b"C\rn\xbc\xa0z\xaa:O\r\xdb\x98\xadP7\x84kj\x11"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    bool_0 = False
    str_0 = "/="
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    str_0 = "[13f}bk)x\x0cQp"
    str_1 = "oyvWFPSo)8@dz1T"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    str_0 = "}<{hWwFK<(A"
    str_1 = "V"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    int_0 = 1128
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    float_0 = 3372.420929
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    float_0 = -2941.6834
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    bytes_0 = b""
    bytes_1 = b"\x0e\x1b\x10\x1b\xc6\xa7\x00gHAV\xf5\xa8\x87;#\xebxW\xef"
    tuple_0 = (bytes_0, bytes_1)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    float_0 = -123.0
    tuple_0 = (float_0,)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    str_0 = "OrI_`m(V\x0c?{_0a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    float_0 = -238.45989
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    int_0 = 813
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    int_0 = 3869
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    int_0 = 220
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    str_0 = "6+f0^0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    str_0 = "=bkB\\2$\noECQYXR@"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    int_0 = 1618
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    complex_0 = -2109.26 - 453j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    str_0 = " "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    str_0 = "#(kY&7FHQE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    str_0 = "Kr^B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    int_0 = -2609
    bool_0 = False
    dict_0 = {int_0: int_0, bool_0: int_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    str_0 = "g~\tf\\f<K44zER+Z7O{Q:"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1079():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1080():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    int_0 = 3906
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    str_0 = "q\x0cOD_Cpt.Zy=jt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    int_0 = 440
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"\xf7\x03\x1c\x7f\xb1/\xa0\xab2kgv\xff\xaf\xff\xf0\xad"
    tuple_0 = (bytes_0, bool_0, bytes_0)
    tuple_1 = (list_0, tuple_0, list_0)
    list_1 = [tuple_1, tuple_1]
    module_0.get_new_command(list_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    int_0 = -915
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    int_0 = 3276
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    complex_0 = 1107.87527 + 1140j
    set_0 = {complex_0}
    list_0 = [set_0, complex_0, set_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


def test_case_1091():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1092():
    bytes_0 = b"\x84\xb8\x0f\xfd\x9e\xb3\x03\x17\x7f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    str_0 = "!C3Bxz zJ"
    bytes_0 = b"\x1dm\xd0\xdagK\xfa\x12\xf6\xca\xeb/\x9bs\x868q\x163;"
    tuple_0 = (str_0, bytes_0)
    set_0 = set()
    list_0 = [tuple_0, tuple_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    list_0 = []
    str_0 = "L$zrmC*QI"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    bytes_0 = b"9\xa8\xa1XLv\xa0\xf6?\x06"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    int_0 = 323
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    bytes_0 = b"^V\x9a\xf3\x9fk\xd7C\x88\x99\xebj\xc8S4YX\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    float_0 = 105.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    bytes_0 = b"7\xbe\x9a\xfb\x0b\x8b\t\xdb\xea\x17\xcf\xd9\x82@\x92\xc5\xae\xe6!\t"
    bytes_1 = b"\xffG\xdd\xd9Zp\x0cY\xd2\xfd\x8e\xe8\x95n\xe0i&\x8c\xfd\xa7"
    set_0 = {bytes_0, bytes_1, bytes_1}
    float_0 = 4111.545
    int_0 = 1535
    tuple_0 = (float_0, int_0)
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    bytes_0 = b'"\xbe'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    int_0 = -3488
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    bytes_0 = b"\xa9rf\xb5\x04\xde\xbf\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    str_0 = "\\U!m]^@A#4N\rO"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1109():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1110():
    int_0 = 170
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    int_0 = 35
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    bool_0 = True
    bytes_0 = b"?\xb3\x1e\xbb9\xc6\x92`8\xd7\xd8\xff"
    tuple_0 = (bool_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    bytes_0 = b"\x88\xe9\xb6"
    module_0.match(bytes_0, bytes_0)


def test_case_1114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1115():
    int_0 = -892
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    bytes_0 = b'\xc6\x93\xee\xff\xa9\x97\r7\xa2\x063"\x1d[\xae'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bytes_1 = b"\x05\xc7\xabe\xd9\x88d\x8eF\x08\xe2\xd9\x90\x81\xbf\xff6\xd3"
    bool_0 = True
    str_0 = "V9-=43Y#q;"
    tuple_0 = (dict_0, bytes_1, bool_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    str_0 = ","
    bytes_0 = b"\xa6km\x9a\x9b\x91\xd1\x1b\x06\xd0\x7fQ\x04S\xb8"
    module_0.match(str_0, bytes_0)


def test_case_1120():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1121():
    int_0 = 2704
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    int_0 = -2537
    module_1.object(*int_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: list_0}
    int_0 = 3491
    tuple_0 = (bool_0, dict_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    bytes_0 = b"\xddQ\xaaE\xa1c\xbb|L\xa84\xa9\x8f\x86k\x87\xf3\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    int_0 = 1389
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    float_0 = 5700.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    float_0 = 766.8
    str_0 = 'd&"\x0bcrTAA[L\x0cbBP6t$Y0'
    list_0 = [float_0, float_0, float_0]
    float_1 = 2220.0
    tuple_0 = (float_0, str_0, list_0, float_1)
    tuple_1 = (float_0, tuple_0, float_1, tuple_0)
    bytes_0 = b"<iQ)a_v\x04\xfa\xe4\xd2\xe1\xed"
    list_1 = [tuple_1]
    tuple_2 = (list_0, list_1, bytes_0, tuple_0)
    tuple_3 = (float_0, tuple_1, bytes_0, tuple_2)
    module_0.match(tuple_3, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    int_0 = 47
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    float_0 = -295.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    int_0 = 5268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    bytes_0 = b"\xab\xbey\xc4\x0e\xdbaK\xf3\xfc\x0cC\xc8\x7f"
    tuple_0 = (list_0, list_0, bytes_0, set_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    str_0 = "^44.I^'#fQxmg<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    bytes_0 = b"\xef\xac\xa2I|\x12\xb7\x9fM\xaa\x04M\x80\xc0\xe8\xa9\xc2P\\<"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    set_0 = set()
    str_0 = "%cps,$]h\t/t,TIQ"
    tuple_0 = (set_0, str_0)
    list_0 = [dict_0, tuple_0, dict_0, str_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    int_0 = -1658
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    bytes_0 = b"eo\xa7\xae\xb3\xbb\xab\xfa\x14\x84\r\x9e^\xe7<\xee\xb5\xadK4"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


def test_case_1138():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1139():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_1, bool_0: bool_1}
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_1, bool_1: dict_0}
    module_0.get_new_command(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    bytes_0 = b"\x16\x16\xdb4\xa6gP9B\xfd\xf6\xfdU\x0f?u\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    float_0 = 1567.0596
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    str_0 = "%uAza$T-{W"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    complex_0 = -2333.02848 + 276j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    str_0 = 'Q@\x0bdu"h}J=w/{'
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {str_0: tuple_0, tuple_0: str_0}
    tuple_1 = (str_0, tuple_0, dict_0)
    bytes_0 = b"\xb23Y\xc4\xff\xe3\xdb"
    tuple_2 = (tuple_1, bytes_0)
    module_0.match(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    bytes_0 = b"\x87\xc8\x0f\x82\xc7\x15J\xd6\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    str_0 = "~(AnfjOQ*Jok"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    complex_0 = -1275 - 835.3501j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    int_0 = -1532
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    float_0 = 1974.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    bytes_0 = b"\xb1\x84#\xe4;\xbb\x02\xa2\x8b\x94\xf5\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    float_0 = 501.878
    bool_0 = True
    set_0 = {float_0, float_0, float_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    bytes_0 = b"\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    bytes_0 = b"\x87"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1158():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1159():
    int_0 = -368
    set_0 = {int_0}
    list_0 = [set_0, set_0, set_0]
    bool_0 = True
    tuple_0 = (bool_0,)
    list_1 = [list_0, int_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    float_0 = 154.2
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    bool_0 = False
    set_0 = {bool_0}
    dict_0 = {bool_0: bool_0}
    tuple_0 = (set_0, bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_1164():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1165():
    int_0 = 4843
    complex_0 = 404.99 - 4242j
    module_0.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    float_0 = 675.904
    int_0 = -4801
    tuple_0 = (int_0,)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    bytes_0 = b"M\x1d\xdf9\xcf\x1c8gI\xb2\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    int_0 = -304
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    float_0 = -331.0
    module_0.get_new_command(float_0, float_0)


def test_case_1173():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1174():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    int_0 = 427
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    set_0 = set()
    list_0 = [set_0, set_0]
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


def test_case_1177():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1178():
    str_0 = '@+H)\x0c"MJG\\rb'
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    bytes_0 = b"\xe6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    bool_0 = True
    bytes_0 = b"\xf5\xe7y\xc6\x0174\xa7\x1aF\x91Uo0c\xbd\xac\xaaF"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    str_0 = "V`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    bytes_0 = b"\x11\xd2\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    bytes_0 = b"\x16\x83 \xb2S3R\xd0\x16\xfdU\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    complex_0 = 74.1 - 1372.05j
    bool_0 = False
    tuple_0 = (complex_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    int_0 = 3412
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    str_0 = "\x0bkWP+Wk^qh.upGK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    str_0 = "'>\\Yfr="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    int_0 = 3439
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    bytes_0 = b""
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    str_0 = "5dnGFyPtL("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    str_0 = "D$T!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    int_0 = 3604
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    int_0 = 1455
    tuple_0 = (int_0, int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    complex_0 = 2876.4 - 404.482594j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    str_0 = "\n&S]cWfWCyYgD;"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    complex_0 = -502 - 1358j
    list_0 = [complex_0]
    list_1 = [list_0]
    module_0.match(list_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    str_0 = "b'\"Q^}*>=LF"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    bytes_0 = b'\xa2a"=y\x0f\x17\r\x9ee\x81H\xeb|'
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    int_0 = 2729
    bytes_0 = b"\xfd\x11i\xe2\xb6\x1e\x18\xcd\xb7l\x04"
    dict_0 = {int_0: bytes_0, int_0: int_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    int_0 = -2344
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    int_0 = -5116
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    int_0 = 2171
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    str_0 = "V\\DN"
    bool_0 = False
    dict_0 = {str_0: str_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    int_0 = -2298
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    bytes_0 = b"\x908\x0f]\x9d\xb02\xfe\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    bytes_0 = b"\xbb\xfd\xbe!\x0e\x04T"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    float_0 = 4522.9877
    float_1 = 1554.828266
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    bytes_0 = b"\x94\xc6C\x90G\xe2\xccv\x16\xf1\xb5\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    complex_0 = 2759.53444 + 919.93j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    str_0 = "4.AFadk|Uv:\x0bl)]G@@"
    str_1 = "@"
    dict_0 = {str_1: str_0}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    list_1 = [list_0, tuple_0, list_0, list_0]
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    bytes_0 = b"\x08\xccO\x91~CGs\x07\xf8\x97\xfd\xa7\x84S1\x8a\xeb\x0f"
    module_0.match(bytes_0, bytes_0)


def test_case_1220():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1221():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    float_0 = -1778.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    bytes_0 = b"\xebw'\x95"
    list_0 = [bytes_0, bytes_0]
    set_0 = {bytes_0}
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    int_0 = 135
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    int_0 = 1838
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    bytes_0 = b"Gbi:\x82\xbbC\x835\x9fu\x05\xfbRi\x1c\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    str_0 = "uB:%F.tim/8!4\x0cZVrL&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    float_0 = 1490.802
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bytes_0 = b"\x82\x81\x8d\xb4\x15\xaf('\xab\x89T\xfaXJ\x96\x80\x0b"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    str_0 = ",fYud7~|"
    bool_0 = False
    list_0 = []
    list_1 = [str_0, bool_0, bool_0, list_0]
    module_0.get_new_command(str_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    bytes_0 = b"\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    str_0 = "\x0blAZ}roBm&mf9x"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    bytes_0 = b"\xb2\x91`\xfa\xaa5\xf7i\xea\x02\x01\x88\xfef\x99\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    float_0 = -173.0
    list_0 = [float_0, float_0]
    str_0 = "jUk#Y'Hm"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    bytes_0 = b"\xa5\xea-G6\x0e\x19R_\n\xa5\xc7)\x80\xd4\x18\x17"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    bytes_0 = b"\x00\xcb\x83\xa7\x8f\xaa\xa3z\x91B"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    none_type_0 = None
    bytes_0 = b"\xf3\xb2"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    int_0 = 1685
    tuple_0 = (int_0,)
    int_1 = -1338
    str_0 = "h=KZAYejOC"
    tuple_1 = (str_0,)
    set_0 = {int_0, tuple_1, int_1, str_0}
    tuple_2 = (tuple_0, int_1, set_0)
    float_0 = -527.551
    tuple_3 = (tuple_2, float_0)
    module_0.match(tuple_3, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    bytes_0 = b"\xcd\x13]\xcd\x9c\x99\x1f\x93/j\xa0\x05\x84"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


def test_case_1244():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1245():
    int_0 = 88
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    bool_0 = True
    str_0 = 'q\r5c+!jQbG#9`6"1'
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    tuple_2 = (str_0, str_0, tuple_1)
    module_0.get_new_command(bool_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    str_0 = "b~\\5y?Y\\W&"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    int_0 = 1462
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    bytes_0 = b"\xee\xa3;\x92\x8fc\x99\x0ep\x14\xfb;@\xd6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    str_0 = "a\\g[|@mmR*LO}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    float_0 = -1293.328
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    int_0 = -2836
    str_0 = "Z\x0b:QrT1MI<FD"
    list_0 = [int_0, int_0, str_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    dict_0 = {}
    int_0 = 484
    list_0 = [dict_0, dict_0, int_0, int_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    int_0 = 937
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    bytes_0 = b"\xeb\xed\\*\x13a\xba\x98\xe9\x9c\x1f<\x97S"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    str_0 = "\rf@fAVaFJVD+0rtE<m26"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    str_0 = "Y|Gem%/\nt\n3VV%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bool_1 = True
    module_0.get_new_command(list_0, bool_1)


def test_case_1266():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1267():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    complex_0 = -123.838086 + 1150.6778j
    list_0 = [complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    bytes_0 = b"\x86}\x8c"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0, tuple_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    str_0 = "oYltsav%][WlzH@vzX}g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    object_0 = module_1.object()
    bytes_0 = b"}HyM\x06\x9a\xb5\xd2\x1e\xb5\xa9\x85!\x1d\xd7"
    bool_0 = True
    list_0 = [bool_0, object_0, bytes_0]
    tuple_0 = (bool_0, bool_0, object_0, list_0)
    dict_0 = {object_0: bytes_0, object_0: bytes_0, bytes_0: bytes_0, bytes_0: tuple_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    float_0 = -1620.91793
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    bytes_0 = b"\xcf\xf1\x93x0\xb1\x0bV\xfd\x81\x00#4\xcd\xc9"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    str_0 = "s>aA.ura@\t^V uPKz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    set_0 = set()
    dict_0 = {}
    tuple_0 = ()
    tuple_1 = (set_0, dict_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bytes_0 = b"~\xfb\xe7\xf2\xc5aG\xc8\xba>\x84"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    bytes_0 = b"\xa1\x89J\x8cf\xb4x\x82\x8a"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    complex_0 = 2853.83 + 3791.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    str_0 = "e.^cF)"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    int_0 = -4179
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    complex_0 = -3493.74427 - 2320j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    bytes_0 = b"\xba\xaf\x83\xea\x06\xf4\xc2\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    bytes_0 = b"Q\xf4\xd5\x19I\xa4S\x03\x17\xb0s\xa0\x9bxy\xca\x97S\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    bytes_0 = b"l"
    str_0 = "r4-}N%\x0c*HCF&7"
    dict_0 = {bytes_0: str_0, str_0: str_0, str_0: bytes_0}
    tuple_0 = (bytes_0, str_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    complex_0 = -3816.59 + 1141.75j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    int_0 = -64
    tuple_0 = (int_0, int_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    complex_0 = 48.2411 - 1939.2751j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    float_0 = -2525.0
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    int_0 = -1159
    module_0.match(int_0, int_0)


def test_case_1294():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1295():
    str_0 = "_:ln1b^ZD$FxIP\tX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    str_0 = "J@\t"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    int_0 = -1917
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    float_0 = -580.9122
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    int_0 = -1893
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    bytes_0 = b":\xaf\x94-\x01\xc3}"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    float_0 = 302.7054
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    int_0 = -1752
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    int_0 = 2230
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    int_0 = -2061
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    int_0 = 1491
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    bool_0 = False
    int_0 = -1752
    set_0 = {bool_0, int_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    int_0 = 3433
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    bytes_0 = b"&1\x8dH\xaf\xbb\x93\xcc\x01\x97\x13\x15\xbd\xd1\xae/\\"
    int_0 = 2113
    tuple_0 = (bytes_0, int_0)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    int_0 = -2352
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    str_0 = ">"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    bytes_0 = b"\xfb\xc0Ss\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    str_0 = "<7O"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    int_0 = 3773
    set_0 = {int_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    str_0 = 'v*uPau\\)SvM"hwH'
    none_type_0 = None
    str_1 = "F=tst&d!\tJK}Bm~6Ana;"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    float_0 = -127.48
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    bytes_0 = b"\xb2\xef\xbc{\x9b3D\xce\xd7w\xe8\xae\xdb:o"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    bool_0 = False
    complex_0 = -1454.022 + 2139.348j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    dict_0 = {bool_0: list_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(bool_0, tuple_0)


def test_case_1320():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1321():
    str_0 = "xM^Ht"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    bytes_0 = b"\xfb\xe4W!\xfd\xe6wi\xb2M\xbb \xc7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    float_0 = 5299.77699
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    bytes_0 = b"\xe0}\xbb\xaf\xcf#\xfb\xc9t\xd3\xa1*\xeb\xea\x92}\xd2\xc6\x8b5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    str_0 = "\t#8&Z&yQ2P"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    float_0 = 1269.007084
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    complex_0 = 3511.577 + 1168j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    none_type_0 = None
    int_0 = -612
    module_0.get_new_command(none_type_0, int_0)


def test_case_1329():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1330():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    bytes_0 = b"b\x01:X*\x99\x1aZ\xb9\x1c(\xbe\xa3\xa7y"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    str_0 = "DK;tbFTu\t']H\x0c)K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    float_0 = -409.924052
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    str_0 = ";0:]#"
    tuple_0 = (str_0,)
    list_0 = [tuple_0, str_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    str_0 = "![e>;f((SKJo/PfSN"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    str_0 = "p]GmdQV,V^vA_sIn!"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    int_0 = -392
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    bytes_0 = b"qY\xc1i\xeb\xf7\xff\xc6H\xa1\xad\xa8\xfe\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    tuple_0 = ()
    int_0 = -1283
    dict_0 = {tuple_0: tuple_0, tuple_0: int_0, tuple_0: int_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_1343():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1344():
    str_0 = "^Ci{6Q\\n'"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bytes_0 = b"Sa\x0bC\xe1\x9a\xb9\x14\x99D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    bytes_0 = b"p\x9d1\xcb\x18\n\xaay\xe3\xb0]\x81\n\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    int_0 = -2196
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    float_0 = 732.21
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    complex_0 = -166.43703 - 2488.72j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    tuple_0 = (dict_0,)
    tuple_1 = ()
    list_0 = [tuple_0, complex_0, tuple_1, dict_0]
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    complex_0 = -476.62232 - 3086.805912j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    str_0 = "D(&Aqx#\x0bWxz.A,U"
    set_0 = {str_0, str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    str_0 = "F|ld)Q8[9nmxZ\x0b; 6"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    bytes_0 = b"\xa4\xfb\xee\x9b\xa0\xa2=\xbbK\xd1\xde\x18"
    bool_0 = False
    int_0 = 1399
    tuple_0 = (bytes_0, bool_0, int_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    str_0 = "{ke\x0bjo'@aaO"
    module_0.match(str_0, str_0)


def test_case_1357():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    bytes_0 = b"f+\xf0XQj=\\I\xec\x81\xbe\xe8\xef\xf2\x94\xe4\xe8\x8c\xac"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    complex_0 = -2367.531 - 2941j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    str_0 = "NAuKM(Bvk;EQu7]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    bytes_0 = b'/"\xbc\x9a\x9a\xe6'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "+X{RPd"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    str_0 = "Lqodi{Pv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    bool_0 = False
    bytes_0 = b'\xb2}O\xec\xa9B)=\xb7\t\xea\x00d%">\x9a!ks'
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, bytes_0, dict_0, dict_0)
    bool_1 = False
    tuple_1 = (tuple_0, bytes_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    float_0 = 2087.601
    bool_0 = True
    dict_0 = {float_0: float_0, bool_0: float_0, float_0: float_0, float_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    bytes_0 = b"\x1aGwz'Q\x8f7+G\xe7\xc6M"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    float_0 = -2921.2885
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bytes_0 = b"\x02\xbej\x04O\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    str_0 = "e"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    float_0 = -2251.66
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    bytes_0 = b"^\xcdw"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    float_0 = -1735.224
    int_0 = 394
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    str_0 = "-&5gE"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    bytes_0 = b"S\xee|\xcbb\xf4\x07\xd4\x1d\xe4\n\x05\xd8ap?\xe0\xbf\xf6{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    bytes_0 = b"\xdds0\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    int_0 = 1445
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0}
    set_1 = {tuple_0}
    module_0.get_new_command(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    str_0 = "Xf\\jf`=[c=R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    complex_0 = -803.59 - 1851.264j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    str_0 = "_B"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    float_0 = 250.888
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    bytes_0 = b"\xb5[\r\xbfS5>~\xf8*g\xf96RO=\xc90"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    bytes_0 = b"P7s\x1dR\x19)\xb3\xe7\x83\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    bytes_0 = b"<\xb7\xc4G'\x85\x9e\x17\xad2\x89\xf4\x12\xd0!'!\x8c\xb8\x06"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    int_0 = 1955
    int_1 = 3030
    bool_0 = True
    set_0 = {bool_0, int_0, int_1}
    tuple_0 = (int_0, int_1, bool_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    bytes_0 = b"\xadQ'\xdd\x96\xf4Z\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    float_0 = -2082.695553
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    int_0 = -2541
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    bytes_0 = b'\xde\xa2\x13L\xc8\x11\x86s"\xef\x13\xfe\x8b'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    str_0 = '>2kA%{F$)e?6v"7e?C*'
    module_1.object(*str_0)


def test_case_1396():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1397():
    none_type_0 = None
    int_0 = 2688
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    str_0 = "ScSoi73+q;-D\x0b1nrnjt."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    int_0 = -128
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    float_0 = 500.555
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    float_0 = -840.138187
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    int_0 = -4518
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    none_type_0 = None
    int_0 = 2054
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    str_0 = "^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    float_0 = 1809.79261
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    int_0 = -2896
    module_0.match(int_0, int_0)


def test_case_1409():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1410():
    bytes_0 = b"d\x7f\x1ad9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    str_0 = "XEYnNv,%}n>Q;xa{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    str_0 = "mqKJm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    float_0 = 912.44
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    int_0 = -1551
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    float_0 = 2890.67925
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    bytes_0 = b"\xcf\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    str_0 = "w\n\x0b=ak~?ZW69SPKP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    str_0 = "$`=-GhX~RA-%B"
    str_1 = "|[hzxnG(^"
    str_2 = "Pg++:!_n>6@?1"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    int_0 = 1312
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    int_0 = 3586
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    int_0 = 3770
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    str_0 = "'/\"k"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    str_0 = "P\nr@OUYx"
    module_0.match(str_0, str_0)


def test_case_1424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1425():
    int_0 = -736
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    str_0 = "G^H;_dLrkt"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    complex_0 = 4164.654 + 455j
    set_0 = {complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    str_0 = "%"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    bytes_0 = b"\x1e\x94\xd7F\xaf\xdd!M\xbb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    bytes_0 = b"\x89(\x81\xe7\x91Z\x04\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    bytes_0 = b"H{(a\x06\xe8\x9a\x91\xc3L\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    float_0 = -450.40199
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    str_0 = ""
    str_1 = "g,!6 S\"wB,z: j'0a"
    dict_0 = {str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    complex_0 = 3382.6 + 47j
    module_0.match(complex_0, complex_0)


def test_case_1436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1437():
    int_0 = -846
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    int_0 = -1457
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    bytes_0 = b"\x8f\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    str_0 = "tK=$0\rK05iH3!u4nB9:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    float_0 = 2495.0549
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    str_0 = 'TG6\\"ZzP'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    int_0 = 553
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    int_0 = -4524
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1446():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1447():
    int_0 = -325
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    float_0 = -97.999908
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bool_0 = True
    float_0 = 150.0
    tuple_0 = (float_0,)
    list_0 = [bool_0, tuple_0, bool_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    str_0 = ";l}(*_68O+@[[-"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, str_0)


def test_case_1452():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1453():
    str_0 = "RZ_UW9Bdz\rAI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_1457():
    pass


def test_case_1458():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1459():
    bytes_0 = b""
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    int_0 = -3567
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    int_0 = 2933
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    int_0 = 2708
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    int_0 = 1318
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    complex_0 = -1399.715875 + 589.102j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1466():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1467():
    bool_0 = True
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    float_0 = 1721.812225
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    str_0 = "\rA`m?fZhIxP0-z^U<M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    float_0 = -1488.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    str_0 = "CqIsJ_E!o8]!m|x2'd[v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    str_0 = "2lp^q"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    str_0 = "u1<^^HB#zVY+\r7W4e2x"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    complex_0 = -526 + 1190j
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    bytes_0 = b"=\xba\xd59\x07G\\8\xac\xdfy\xe7rd\x08\x1dU"
    str_0 = "L5sHYwq<d,\x0c3$%g.^L"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    str_0 = "&3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    bytes_0 = b"Z\xc1\x112"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    float_0 = -912.32075
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    bool_0 = False
    int_0 = -544
    dict_0 = {int_0: bool_0, int_0: int_0}
    set_0 = set()
    tuple_0 = (set_0, int_0, set_0, bool_0)
    tuple_1 = (bool_0, bool_0, dict_0, tuple_0)
    list_0 = [tuple_1, dict_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    bytes_0 = b"\\\x80\xb0\xd7\xa0\xadQ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    int_0 = 2257
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_1489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1490():
    float_0 = 3396.2268
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    bytes_0 = b" \xf6\xf8YE\xee\xaf|\xa4\xe2\xd6\x94\xe0\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    int_0 = -388
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_1494():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1495():
    complex_0 = -505.24 - 1662.226j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    bytes_0 = b"\xd4\xdbt\x9c&\x83\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, bool_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    float_0 = -2412.160113
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    str_0 = "DO{E;cxTl&53\x0c["
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    str_0 = "9+^Tj\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    int_0 = 1728
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    str_0 = ".)P]J7>7~Gf2x!yRuFx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    float_0 = 275.972
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    str_0 = "U;vR;&3'#m;IM/=2n\\"
    bytes_0 = b"\xbe\xe9"
    bool_0 = True
    dict_0 = {str_0: bytes_0, bytes_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    float_0 = -140.9
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    str_0 = "8{7~7$&HL@J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    int_0 = 2608
    bytes_0 = b"\x8a~\x88Q\x8e"
    int_1 = 648
    tuple_0 = (int_0, int_0, bytes_0, int_1)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    int_0 = -279
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    int_0 = -824
    int_1 = -3754
    dict_0 = {int_0: int_0, int_1: int_1, int_1: int_0, int_0: int_0}
    module_0.match(dict_0, int_1)


def test_case_1515():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1516():
    bool_0 = False
    int_0 = -1505
    str_0 = "\tj1~/!J"
    bool_1 = True
    str_1 = " [\t?h\x0b]r+\r;y/^P"
    tuple_0 = (bool_1, str_1, bool_0)
    tuple_1 = (int_0, int_0, tuple_0)
    tuple_2 = (bool_0, int_0, str_0, tuple_1)
    tuple_3 = (tuple_2, bool_1, str_0)
    module_0.get_new_command(tuple_3, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    bool_0 = True
    bytes_0 = b"}\xf8\xddtt^)\x02ju\\\xc5z"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    bytes_0 = b"<O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    int_0 = -236
    list_0 = [int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    bytes_0 = b'\xb6,\xbdB\xa6g/\xf5}\xecUmM\xec\xec"\x937\x12'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    int_0 = 1679
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    complex_0 = 1174.1646 - 215.24129j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    set_0 = set()
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    none_type_0 = None
    int_0 = 472
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    int_0 = 1364
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    bool_0 = False
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    float_0 = -3953.0
    bytes_0 = b"\xf2lm\xf5\x95\xf0\xfd\xdc\x8c"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    list_0 = []
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


def test_case_1532():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1533():
    bytes_0 = b"i\xe6\xbf\xed\xb8\xe5\xd2\r\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    int_0 = -769
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    bytes_0 = b"}c\x8c\xa8\xbd\x9a6\x93\xbc\x0c\x0f \xd9$W\x0bQ\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    int_0 = -444
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    int_0 = 3897
    int_1 = 1591
    bytes_0 = b"\xfa\xaa\xa9\xfc\xbc#[D"
    tuple_0 = (int_0, int_1, bytes_0)
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_1540():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1541():
    bytes_0 = b"&\x08{L\xf3\x0e\xee\x9a\x12\x97bk}\xf5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1542():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1543():
    int_0 = -2668
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    int_0 = -447
    list_0 = []
    tuple_0 = (int_0, int_0, list_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    bytes_0 = b"]4\xe9\xd06+\xe3(W\xf9\xbb\xce \x10\xf0\xd6q="
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    none_type_0 = None
    float_0 = -954.1389
    dict_0 = {
        none_type_0: float_0,
        float_0: float_0,
        none_type_0: none_type_0,
        none_type_0: float_0,
    }
    tuple_0 = (float_0, dict_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    bytes_0 = b"\xce\xb9\xcb8\x84\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    str_0 = "M-,]E4.2#mD\n!k vzRx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    str_0 = "!sXe.h&"
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    int_0 = -4655
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    bytes_0 = b"v"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {bool_0: list_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    bool_0 = False
    str_0 = "sa%FP*<xZY9[/"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    int_0 = 3774
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    bytes_0 = b"j}\xc9m\xce\xd7F]\x86\x07)\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    bytes_0 = b"\xe1\xef\xfcg\xfd\xad\xca3\x83\xd3\xa8J\x16\xab\xb8{4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    float_0 = 1233.40714
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    float_0 = -802.244963
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    bytes_0 = b"\xa3\xed\xb4\x1f\xb2&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    complex_0 = -162.1936 + 684j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    str_0 = "r>]$VPl>"
    list_0 = []
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    complex_0 = 1897.027424 - 2663.83006j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bytes_0 = b"\xad\xaf\x06\x02\xcc\x95j\xb0\xb3#\xb1\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    bytes_0 = b"4\xe6\xd1\x88A\xa7\x1b(\xb6\xfc\xf3\x8d\x1d\xb3\x92\xd6\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    int_0 = 1599
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    bytes_0 = b"\xbc\x91\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    str_0 = ".<qMdMiWoM{+\\)t"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    bytes_0 = b"\xe9gust?\xe7"
    module_0.match(bytes_0, bytes_0)


def test_case_1573():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1574():
    str_0 = "N<h+c<!o_M~l2k3j&'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    bytes_0 = b"\x7f \x0c6\xa6jo\x8a\xf9\xf2TS\x85;\xd2\xe7\x92"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


def test_case_1577():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1578():
    int_0 = 1711
    bool_0 = True
    module_0.match(int_0, bool_0)


def test_case_1579():
    pass


def test_case_1580():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1581():
    complex_0 = 2492.12974 - 1022j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


def test_case_1582():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1583():
    float_0 = 721.71779
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bytes_0 = b"\xcf-\xb5\xa5\xb3\xc0\xe2\xd6X\x13\xfc\x7f\xc2\xde\xf1\x9b\xfct"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    str_0 = "E~"
    str_1 = "`"
    str_2 = 'DX#P1FQJ>:?5\x0b"'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    str_0 = "*9<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    int_0 = 1282
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    bytes_0 = b"#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    int_0 = 2155
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    str_0 = "0x-<6W}MKJ~$3de"
    module_0.get_new_command(str_0, str_0)


def test_case_1591():
    pass


def test_case_1592():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1593():
    bytes_0 = b"Y8)\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    str_0 = "?2aG[xvN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    bytes_0 = b"\x9f \xb7M\xd0ty\x82\xa4\x9a\xd1\xa8\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    str_0 = "v~<{"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    str_0 = "_)G^/yCEu:j\rfaY9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    int_0 = 950
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    str_0 = "en Fdt\r6g4d<>A+.O_:"
    module_0.get_new_command(str_0, str_0)


def test_case_1603():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1604():
    bytes_0 = b"Bi\x12\x05 \xcbl\x96\xa5,\xb3\x03y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    str_0 = "f)M-,$"
    str_1 = "Tb$x\rGHI?\x0c/j59kES"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    str_0 = "nLj'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1607():
    pass


def test_case_1608():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1609():
    complex_0 = 2967.0124 + 105.804225j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    float_0 = -1166.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    int_0 = -3257
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    str_0 = "dh\t3B])phLd~h{e"
    bool_0 = False
    tuple_0 = (dict_0, int_0, str_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    bytes_0 = b"\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_1614():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1615():
    str_0 = "FF+T6DA8\r<U\t4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    str_0 = "WFO~//1p09\x0b6qM$q_Tw"
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    bytes_0 = b"Iv \xa8|$\xcb\\V\xb5\xdd\x8b5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    int_0 = -2250
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    float_0 = -50.1
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    float_0 = -375.03
    module_0.get_new_command(float_0, float_0)


def test_case_1621():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    str_0 = "\\5v[~ViaQr<o"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    bytes_0 = b"&D&\xc7\x8b5yI\x06\xd6Y\xb1n"
    dict_0 = {}
    tuple_0 = (bytes_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    bytes_0 = b"\xff\x8bq\xa5\xae\x85`e\x18\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    bytes_0 = b"\x0e\xb6\xf1\x14n\x19\xe3\xb9;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    float_0 = -3207.732585
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    bytes_0 = b"$\xb4"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    float_0 = -1596.86177
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    str_0 = "pd_BaA3BYA386x$/3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    complex_0 = -1792 + 3106.45j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1632():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1633():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    str_0 = "{_-3(\nJZ6v/"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    int_0 = -1730
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    int_0 = -1500
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    bytes_0 = b"\xe4H\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    float_0 = 293.3526
    str_0 = "K?^;5!"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    bytes_0 = b"\xaapC\x90\xf2\xd7\x0b\x96\xf2\xb5\xe7\xfb\xacZ\x84\xf1A\x10\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    str_0 = "_8r!"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (str_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    int_0 = -1648
    bool_0 = True
    float_0 = -46.33
    str_0 = 'i+?\tn0mpG"gQlS$'
    tuple_0 = (int_0, bool_0, float_0, str_0)
    int_1 = 73
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    int_0 = 1379
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    int_0 = -3005
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    complex_0 = -1139 + 1339.78j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    str_0 = "CdCntC_{\tM\x0b!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    str_0 = "R(FJ2]K ]\rEEh8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    bytes_0 = b"\xb1\x0fx\xb40\xcd7g\xcb\xf5|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    int_0 = -4292
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    str_0 = "'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    int_0 = 144
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    int_0 = 1699
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    str_0 = 'z)g"=-IC;G'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    bytes_0 = b"\xcax\x11\xf2O\x95"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    int_0 = 4396
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    int_0 = -4367
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    dict_0 = {int_0: tuple_0, bool_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    int_0 = 537
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1, bool_1: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    bytes_0 = b"\xad\xb5\x8e\xbd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    str_0 = "(q5"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    bytes_0 = b"V"
    complex_0 = 2212.6 - 1725.474j
    module_0.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    bytes_0 = b"\x03:)\x98f\xad\x9b\xe9\xea\x0c]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    str_0 = "(`tlj]WSxaFU~<3Jry"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    float_0 = -1789.81103
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    complex_0 = -954.256 - 3466.69272j
    str_0 = "BpV6oQ-lH(#kYy"
    list_0 = [str_0, str_0]
    bytes_0 = b"\xabA\xf0\xf0\x97\xb0\xeaX\xf5\x8b\x9b\x80"
    tuple_0 = (complex_0, str_0, list_0, bytes_0)
    list_1 = [tuple_0, list_0, complex_0]
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    bool_0 = True
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    int_0 = 1492
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    float_0 = 1778.3404
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    int_0 = 3400
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1676():
    object_0 = module_1.object()


def test_case_1677():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1678():
    int_0 = 16
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    int_0 = -1304
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    complex_0 = 72.790669 + 2902.463723j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1681():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1682():
    bytes_0 = b"#\xf1&\x18ZZ\xc1\x84\xe5L\xa0\xf3\rr\xfc\x89Z "
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    bytes_0 = b"\xf6\xd41\xfd\xe7\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    bytes_0 = b"O,\x1f:\xb7\xeb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    int_0 = 1328
    list_0 = [int_0, int_0, int_0]
    float_0 = 1171.11
    set_0 = set()
    tuple_0 = (list_0, float_0, int_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    str_0 = "m5g>Ta;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    complex_0 = 2706.13003 + 1911.4j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    object_0 = module_1.object()
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    str_0 = "n20k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    int_0 = 1698
    module_0.get_new_command(int_0, int_0)


def test_case_1691():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1692():
    bool_0 = False
    str_0 = "a\x0bOis\n$"
    str_1 = "#JcI(;qb Acyd\tgA\x0b~sz"
    tuple_0 = (bool_0, str_0, str_1)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    int_0 = 2611
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    complex_0 = -70.763 + 867j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    float_0 = -741.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    float_0 = 2164.56267
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_1698():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1699():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    complex_0 = 80.127749 - 516j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bytes_0 = b"NG\x14D\x15#,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    int_0 = -256
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    str_0 = "\rtD=$CQn eGEMRmz\nk!"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    str_0 = "Ay;)kco_rw3,skNL"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    int_0 = 1093
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = " ;}*1Tr\\Wo+`[@Rl"
    tuple_0 = (dict_0, str_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    float_0 = 1884.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    complex_0 = -1941 + 3783.335502j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    float_0 = -438.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_1, bool_0)
    tuple_1 = (bool_0, bool_1, tuple_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    complex_0 = -492.911 - 3072.5735j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    float_0 = -681.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    float_0 = 4325.944165
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bool_0 = False
    int_0 = -1488
    set_0 = {bool_0, int_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    float_0 = 858.84826
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    str_0 = "M><u:uVCiL;'"
    bool_0 = False
    list_0 = [bool_0, bool_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    bytes_0 = b'Q\x87\x92"\xd0&9r\xbc'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    str_0 = "~Q4n&z)Uj]\nds:BrP&="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    float_0 = 540.03757
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    float_0 = -13.06
    module_0.get_new_command(float_0, float_0)


def test_case_1725():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1726():
    int_0 = 340
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    float_0 = -2842.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    int_0 = 1691
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    str_0 = "G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    float_0 = -2230.4559
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    str_0 = ">N(vi \nL"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    int_0 = 184
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    complex_0 = -172 + 2102.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    str_0 = "a"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    str_0 = '"0qS"a[&LYGlCjaC'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    str_0 = "|{'R,Di;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    int_0 = 2792
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    bytes_0 = b"\x0b\xf34\xe5\xc2\xac~R\t"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    complex_0 = 2489.161 + 552.952j
    set_0 = {complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    str_0 = "\trPzYDmN"
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0]
    module_1.object(*list_1)


def test_case_1742():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1743():
    dict_0 = {}
    int_0 = -665
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    bytes_0 = b"\x83\x9a:!=Q*\xcd\x8f\x189"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    str_0 = "kgTFSH}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    float_0 = 1933.3105
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    bytes_0 = b"\xed\xe4P,\x8dK\x9e=\x84\xca\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    str_0 = "U41B8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    bytes_0 = b"|\xf9"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    int_0 = -3325
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {int_0, int_0, tuple_0, tuple_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    str_0 = "g9="
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


def test_case_1755():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1756():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


def test_case_1757():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1758():
    bytes_0 = b"\x90\xbd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    bytes_0 = b"u\xaf.Z\xa0\xa8\xa8$\xa6\xb0\xa6c\x15"
    module_0.match(bytes_0, bytes_0)


def test_case_1760():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1761():
    bytes_0 = b"x\x15\xb5 \xadG\xdf[V'\x98\x80g'n\"\x9e|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    bytes_0 = b'"\xf6z\xe5|\x10( oR\x17'
    module_0.match(bytes_0, bytes_0)


def test_case_1763():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1764():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    str_0 = "X6v|-hj.d=(Yqc^e@_T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    bytes_0 = b"\x1e\x06!\xc0\xc8\x0e\xb8\x046\xe0\xb4Gx\x9fG"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    str_0 = "N`v^krQ'M\"ZpfDFso"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    float_0 = 1130.334
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    bytes_0 = b"\xda\xad\x97\x96CX\xf8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    int_0 = 666
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    int_0 = 1211
    tuple_0 = (int_0,)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    bytes_0 = b"P\xc9\xf3\x14\xb8\xe0\xd9\x8cy2K\x8b*,N"
    module_0.match(bytes_0, bytes_0)


def test_case_1773():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1774():
    str_0 = "t797"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


def test_case_1776():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1777():
    list_0 = []
    list_1 = [list_0]
    str_0 = "\x0b6>FS=K"
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    float_0 = -813.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    int_0 = -1565
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    bytes_0 = b"\xe3Q2i\xf9\xb61\xcd\x82X\xbe"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    str_0 = "glpR^s%edBs"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    int_0 = -3459
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    bytes_0 = b"\x9e\x84\xf4\x82e"
    tuple_0 = ()
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    bytes_0 = b"\x7ft\x02F}=ed\x95\xe4\x9f\x07\xc5/\x86\x0f\xb4\xb5iq"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    bytes_0 = b"\x05:\x0eS\xa5\x08l\x1fO\x1d4I%P\x11\x87\xde(/2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    bytes_0 = b"\xff\xb3\xd8\xb8V,\xf5o|\n\x1e\x83'\x93"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    str_0 = "HVQO.e@\t.9"
    module_0.get_new_command(str_0, str_0)


def test_case_1792():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1793():
    bytes_0 = b"\xe2\xbbt?\xccw\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    float_0 = 1221.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    object_0 = module_1.object()
    bool_0 = True
    str_0 = "-_iYD.QU].}K IP*y:7x"
    tuple_0 = (object_0, bool_0, str_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    int_0 = -243
    module_0.match(int_0, int_0)


def test_case_1797():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1798():
    float_0 = -828.5
    set_0 = {float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    str_0 = "ftU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    bytes_0 = b"kv\xae\xf8\x19q\x07\x01\x89\xb4\x03\xc5\xa3u\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    str_0 = '"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    str_0 = "rI6&LPg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    bytes_0 = b"\xc9\xab\xd5\x07"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    bool_0 = False
    bytes_0 = b"gq"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    bytes_0 = b"\r`\x8d4\xd7\x89\xdd\xb7\xbdh"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    complex_0 = 2359 + 936.957453j
    module_0.match(complex_0, complex_0)


def test_case_1807():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1808():
    bytes_0 = b"\xb0\xff\x11k\xb0\x91TB\n\x91n[\xd1BA\xd7o\xee"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    float_0 = -3920.4787
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    int_0 = -2743
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    int_0 = -891
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    int_0 = -2013
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    none_type_0 = None
    tuple_0 = ()
    bytes_0 = b"\xa5\xb1\xc3\xfa\xa6\x96\xf5=\xeeHA\x12kW"
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    int_0 = -1697
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    int_0 = -779
    bool_0 = True
    list_0 = [int_0, int_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    int_0 = 5481
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    tuple_0 = ()
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    bytes_0 = b"x\xff\xdc\xb5\xb7\xdc\xf8\xeeu5\xfa"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(none_type_0, object_0)


def test_case_1821():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1822():
    bool_0 = False
    bytes_0 = b"\x13\xcc\xc7\r\x1d\xf1"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    str_0 = '"W0Tnk~$40{Zw '
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1824():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1825():
    str_0 = " `(WkgtsYx0aWK`\t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    str_0 = "cE@4"
    int_0 = 2545
    dict_0 = {str_0: int_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    int_0 = 1669
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    float_0 = -652.41
    dict_0 = {float_0: float_0}
    tuple_0 = (dict_0,)
    tuple_1 = ()
    module_0.match(tuple_0, tuple_1)


def test_case_1829():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1830():
    str_0 = "<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    str_0 = "a\t;=7<g`DaI+"
    module_0.get_new_command(str_0, str_0)


def test_case_1832():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1833():
    str_0 = "X:gv+op8:pLu1GeU~B"
    set_0 = {str_0}
    bytes_0 = b"\xd2\x9aC"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    str_0 = "XGUx\x0b\x0cV[G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    int_0 = -449
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    int_0 = 962
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    str_0 = "iWObsHa0^_cW#{:Nv\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    int_0 = -1280
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    int_0 = -1440
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    bytes_0 = b"\x98\xb1.\xade"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    bytes_0 = b"\x91g\xe5\x10\xbe*\xb6\x8a 8\xfa\xec\\A!:"
    module_0.match(bytes_0, bytes_0)


def test_case_1845():
    pass


def test_case_1846():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1847():
    str_0 = "{nuWFC]Y3aSB"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    bytes_0 = b"C]#\x98@\xa0Us\xe7\xc8^\x07\xd6\x14\x11\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    bytes_0 = b"\x89\xd4nr\xfb\x9f \xc5\xf2\xf9a\x92'B\x02b\xd6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    str_0 = "])Pt4,"
    dict_0 = {str_0: str_0, str_0: str_0}
    float_0 = -3539.1614
    int_0 = -406
    tuple_0 = (int_0, dict_0)
    tuple_1 = (dict_0, float_0, tuple_0, int_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    set_0 = set()
    list_0 = []
    int_0 = -3219
    tuple_0 = (set_0, list_0, list_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    bytes_0 = b"\x8a\r_\xe8_z\xb2\x02\x97\xb4sqj\x89;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    int_0 = -757
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    list_0 = []
    float_0 = -1014.852
    tuple_0 = (list_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    float_0 = -1037.7
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    int_0 = 5597
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    str_0 = "LFMe'\r|%Blr2&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    int_0 = -874
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    bool_0 = True
    list_0 = []
    list_1 = [bool_0, bool_0, bool_0, list_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    float_0 = -3709.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    str_0 = "uadKK_>tISg\x0c\x0bKz/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    none_type_0 = None
    int_0 = 1691
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    int_0 = -2770
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    bytes_0 = b"\xc9\x0c\x8e:(A\xc2\xa8V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bytes_0 = b'q\x95\x99\x92\xfd\xbe<\xfb"u\xf4\xc2h\x84\xb6\x18'
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    int_0 = 2043
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    bytes_0 = b"\x85gV"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    bytes_0 = b"\x97\xeb\xfcHh\x9d\x1c\xcdHn\xf9\xe4\x87|_\xa9x?\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    str_0 = "VL#_Je"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    int_0 = 409
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    int_0 = 587
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    bytes_0 = b"\xb0\x8f\x19"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


def test_case_1878():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1879():
    bool_0 = True
    str_0 = "v=)\\?&CuT"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    float_0 = 883.910759
    tuple_0 = ()
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    complex_0 = 2200 + 468.31337j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    float_0 = 2850.787756
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    complex_0 = -671.81 + 2390.3934j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    bytes_0 = b"\xd3\x9d\xe7K)\xb9m\xdc\x8d5\xe3\xe4"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_1885():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1886():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    str_0 = "kJLB-"
    str_1 = "Tq:*2<9Q$+-.:T}q@"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    int_0 = -25
    bool_0 = False
    list_0 = [int_0, bool_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    int_0 = -617
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    int_0 = 1908
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    str_0 = "u0Y\"r'j]e?7Ck]2,/"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    bool_0 = True
    float_0 = -509.5543
    str_0 = "v$gt#x{m|o"
    dict_0 = {float_0: bool_0}
    tuple_0 = (bool_0, float_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    str_0 = "p0\nRhh!7F\r\x0cYB^\n e1'|"
    dict_0 = {str_0: str_0}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    complex_0 = -961.38 + 1386.02j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    int_0 = 2259
    module_0.get_new_command(int_0, int_0)


def test_case_1897():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1898():
    bytes_0 = b"\xde\xb3\x95\xca\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    str_0 = "O:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    bytes_0 = b""
    tuple_0 = (bytes_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    int_0 = -356
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    int_0 = 4052
    module_0.get_new_command(int_0, int_0)


def test_case_1903():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    tuple_1 = (bool_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    str_0 = "Jjvl4.:6g|z^OQ4."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    tuple_0 = ()
    int_0 = -2313
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    complex_0 = -1653.5 + 1591.5062j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    complex_0 = 1104.124 + 3375.4j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1911():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1912():
    float_0 = -966.76825
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    int_0 = -1751
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    int_0 = -946
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    float_0 = -318.56078
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    float_0 = -436.63
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    str_0 = "]^jv:"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    int_0 = -691
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    str_0 = "eJfNbNU0&M)tbhm`u_Ov"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    bytes_0 = b'\x99\x88"\xe0\xff\xa6\x03\xdf\xe2\xc0~$\x02\x7fD3~\x04'
    bool_0 = False
    str_0 = "RU\t\r1 0Q\x0c"
    tuple_0 = (bytes_0, bool_0, bool_0, str_0)
    module_0.match(tuple_0, bytes_0)


def test_case_1922():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1923():
    int_0 = -158
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    tuple_1 = (tuple_0, int_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    int_0 = 1368
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    int_0 = 2074
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    int_0 = 12
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    str_0 = "h>']S9/:+a+\\*.Jag`b"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    none_type_0 = None
    bytes_0 = b"\x11\x90arUW"
    module_0.match(none_type_0, bytes_0)


def test_case_1931():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1932():
    str_0 = 'JSgO95+0m"'
    set_0 = {str_0}
    list_0 = [set_0, set_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    bytes_0 = b"p\x18]\x9ev\xbdU0\x13\x8d\x85\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    float_0 = -489.44308
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    int_0 = -1157
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    bool_0 = True
    str_0 = "6TxP,f0uVn<G10v 1wrg"
    set_0 = {bool_0, bool_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    bytes_0 = b"\xad\xad$\xe6eu\x92\x81\x00\xeaj\x96U\xb9\xfe\xc3\x05F\xbb\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    none_type_0 = None
    str_0 = "uJ9G].R2eSoRcgB8j"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    complex_0 = -2547.388224 - 4315.983j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    int_0 = -2191
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    bool_0 = True
    bytes_0 = b"\xa2\x1cV;_^\x06;\x15\x96"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    set_0 = set()
    bytes_0 = b"\x1fi\x95\xb7V\xb0{|Y\xda\x94"
    float_0 = -44.6544
    tuple_0 = (bytes_0, float_0)
    module_0.match(set_0, tuple_0)


def test_case_1947():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1948():
    bytes_0 = b"\x1c\xd4\xb8\xb0\xa4\xf9\xc3]z\x15"
    bool_0 = True
    int_0 = 193
    tuple_0 = (bytes_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    float_0 = -1023.113
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    int_0 = -16
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    bytes_0 = b"!\x85SLo\x84\xe5\xcb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    bytes_0 = b"\xe2\xc9\xdb\x1f\xdd\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    complex_0 = -306.86 - 1157.3948j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    int_0 = -1598
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    int_0 = -1239
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    int_0 = 414
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    bytes_0 = b'\x1fc\xe7\x06\x96qJ\x00\x90k\xe7,\x91S\xddK"6?'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    str_0 = "r[i2WWJ$1*`:N\r9^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    bytes_0 = b"\xe3G\xc3\xbc\xe0\x16\xdd\xdb\xb9F\xeb\xb00\xfc\xebs\xff\x94\xcd"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    bytes_0 = b"8\xa9\x1f\x0c\x89h\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    float_0 = 1793.2344
    module_0.get_new_command(float_0, float_0)


def test_case_1964():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1965():
    none_type_0 = None
    int_0 = -820
    module_0.match(none_type_0, int_0)


def test_case_1966():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1967():
    str_0 = "|20xKEK\"6'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    str_0 = "#,"
    int_0 = -598
    tuple_0 = (str_0, int_0)
    set_0 = {tuple_0, int_0, tuple_0}
    list_0 = [set_0, set_0]
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    str_0 = "\"d?x\x0b'2"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    bytes_0 = b"g\x14?"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    int_0 = -302
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    bytes_0 = b"_\xe6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    str_0 = "{<ohu?4Qk%'B6<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    str_0 = "Sjy0#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    str_0 = "u{/S\\*VU_NX:4Yzm5-"
    str_1 = "JZKG!"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    bytes_0 = b"\xd0w\xfcd\xc9\xdeD\x1a\x9f\xd1\xbc9\x9fF\x8e\xee#\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    bytes_0 = b"\xa9>\xeen\x0b\x19LI"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    float_0 = 2764.5934
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    bytes_0 = b's\xfb\xed"N\xfc\x98\xe7&%\x1d\xac^\xde\xe2'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    bytes_0 = b"J\xcdl:\x18y\xa0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    complex_0 = -2549 - 3682.914j
    bytes_0 = b"\xca\xbe\xa3"
    tuple_0 = (bytes_0,)
    bool_0 = True
    dict_0 = {complex_0: complex_0, tuple_0: bool_0, tuple_0: tuple_0}
    bytes_1 = b";\x8dXL2\xbf\xe1"
    tuple_1 = (dict_0, bytes_1)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    str_0 = "Q1xP\nRPRdv|:zp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    int_0 = 712
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    int_0 = -3450
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    bytes_0 = b"?\xb9h\x84-!\xac\x9c\xe1\xbd\x08"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    int_0 = -743
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    int_0 = -1715
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    bool_0 = False
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    int_0 = 5813
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    int_0 = 19
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    bool_0 = False
    bytes_0 = b"\xd4\xa2\x83\xabR\xc9\xb1S\xff.\xebJ>m\xd5`\xc6"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    bytes_0 = b"\xe2\x83\xcc\x84\xea\x13\xbe)"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    str_0 = "$~>r("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    int_0 = 339
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    bytes_0 = b"\t\x84N\xe3\xcd\x1e\xf4\xfdM"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    str_0 = "/)NHuQtn\\~tFWvh4<Y}^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    bytes_0 = b"kw\xf3\xb5$\xb5\xb9\xaa\x10\x92<\x01\xa8\x05"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    bytes_0 = b"us\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    str_0 = '"{7k'
    str_1 = "u2 R^?v_Lz]Q{ "
    str_2 = ";JTg\x0cz&3vQd"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    int_0 = 2398
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    bytes_0 = b"\xb4\xf9Y\xe1>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    float_0 = -846.7
    str_0 = '"C_$a_d'
    list_0 = [str_0, float_0]
    str_1 = "kh /3o"
    tuple_0 = (float_0, str_0, list_0, str_1)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    complex_0 = -1507.4 + 281.9909j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    bytes_0 = b"\xca&\x05\xe5h;\xb4\xf3\x1f\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    float_0 = -884.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    str_0 = "^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    dict_0 = {}
    object_0 = module_1.object()
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    list_0 = []
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    int_0 = 2022
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    bytes_0 = b"\x85\xd4\n\xa4\xda\x89\xee\xc8\xf9\x87r\xda\x9b\xcf\x02\xe6\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    bytes_0 = b"\xe1\x08\xfb\xffy\xe7\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    int_0 = -189
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    int_0 = -307
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2022():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2023():
    int_0 = -1851
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    float_0 = 1083.9278
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    int_0 = -1826
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    int_0 = -476
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    str_0 = "CMOz\x0bj?37s>kkg4y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    int_0 = 1815
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "K"
    str_1 = "!~t'~T.CMr=SLSPA\\"
    str_2 = "29xiq3.@f+[qT|M?"
    dict_0 = {str_0: str_0, str_1: int_0, str_1: str_1, str_2: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    float_0 = 1048.512
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    str_0 = 'T\rRm3zrYW"^r K'
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    bytes_0 = b"S9\xdf\xcf,\x00V\x7f\xa0\xd6\x02B{\xf3E\xb2("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    int_0 = 736
    dict_0 = {int_0: int_0}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    bytes_0 = b"\xa5\xeae^"
    module_0.match(bytes_0, bytes_0)


def test_case_2035():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2036():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    str_0 = "%3;B!*dlS`xImA2\\a"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    int_0 = 1188
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    bytes_0 = b"\xc4mNs\xc7"
    module_0.match(bytes_0, bytes_0)


def test_case_2041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2042():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    int_0 = 2036
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    float_0 = -1004.251
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    str_0 = ";DJ.`KVLD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    complex_0 = 1932 + 2887j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    str_0 = "u[\x0b>@??qrFY6sk-$"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    str_0 = "-|02'yo}=19r$(l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    complex_0 = -2093.502171 - 795.184j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    str_0 = "\\RQ(:]>8\\J."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    int_0 = -2550
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    bytes_0 = b"\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


def test_case_2054():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2055():
    str_0 = "f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    int_0 = -1904
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    int_0 = 2881
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    bytes_0 = b"L\xd8I{\xd27\x97\xaf\xaa8\x8e%\x7f\x008t%\xdb\xbd"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


def test_case_2060():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2061():
    int_0 = -4187
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    int_0 = -356
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    bytes_0 = b"\xe7\x00i\xd8\xe8\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    int_0 = 376
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    bytes_0 = b"mw"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    str_0 = "\t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, tuple_0, tuple_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    int_0 = 2624
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    bytes_0 = b"\x0es+\x8e\x80\xd3"
    int_0 = -158
    set_0 = {bytes_0, bytes_0, bytes_0, int_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_2072():
    pass


def test_case_2073():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2074():
    bool_0 = False
    str_0 = "e:"
    set_0 = {bool_0, bool_0}
    dict_0 = {str_0: set_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    complex_0 = 3542.8126 - 287.602178j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    bytes_0 = b"\xfa"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    complex_0 = 2906.826 - 2524.344641j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    int_0 = -561
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_2079():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2080():
    bytes_0 = b"!\x1f\xe1"
    complex_0 = 1918 - 1651.340364j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    none_type_0 = None
    bytes_0 = b"\xec\xe4v\xfb \xc9\xfc\rB\x9e\x1fb\xef\r\xb3R[\x15("
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    bytes_0 = b"\x86\xdb\xf6\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    float_0 = 5601.702
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    bytes_0 = b"\x9a\xc3\xe9\x04\xf3\xaa*"
    int_0 = -1974
    list_0 = [bytes_0, bytes_0, int_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    tuple_0 = ()
    str_0 = 'm\r!}= ,n4KBq"?TNTL'
    int_0 = 425
    list_0 = [str_0, str_0, int_0]
    tuple_1 = (tuple_0, str_0, str_0, list_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    str_0 = " 0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    int_0 = 570
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    complex_0 = 2344.252 + 1280j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    int_0 = 414
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    object_0 = module_1.object()
    bytes_0 = b"\xb9\x0e<\x99f\xbf\xf6\xc7\x8aMu&[\xb1"
    tuple_0 = (object_0, bytes_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    bytes_0 = b"9\xc1\xcd\xd9)D\xd6y\xdfo\x82\xb5\xc02\x18\xfe\xb4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = False
    list_0 = [bool_1]
    tuple_0 = (set_0, bool_0, bool_1, list_0)
    list_1 = [tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    float_0 = -2824.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    int_0 = 1387
    tuple_0 = (int_0, int_0)
    str_0 = "v("
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = True
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    bytes_0 = b"\xa1\x83r\xa1\xf8\xdf\xea\xfd\xbd-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    int_0 = 1076
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    bytes_0 = b"\t8\x98\xa6\xc52\x92P"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_2102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2103():
    complex_0 = -2757.106483 - 1698.2j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    bytes_0 = b'\x83\x88\x18"'
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    bool_0 = True
    bytes_0 = b"\xd6;\xa3D\x93"
    dict_0 = {bool_0: bool_0, bytes_0: bytes_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    bool_0 = False
    bytes_0 = b"N=\xfd\x0c\xec\xac\xd1\x0bG\xca\xc1\xf2\xb1\x08\xe0\x81U \x16\x07"
    list_0 = [bool_0, bool_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    float_0 = -649.77
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    str_0 = "(\rShh\rNib"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    int_0 = 1415
    module_0.get_new_command(int_0, int_0)


def test_case_2110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2111():
    str_0 = "9=w\t-mj)*t*nD;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    int_0 = -1651
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    str_0 = "DFE_RL-L!s"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    bytes_0 = b"=\x94\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    bool_0 = False
    dict_0 = {}
    str_0 = "bF\x0cP=5{#~|"
    tuple_0 = (bool_0, dict_0, str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    int_0 = 2140
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    int_0 = 1356
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, list_0]
    str_0 = "Tv35VO00w_3"
    dict_0 = {str_0: int_0, str_0: list_0, str_0: str_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    float_0 = -669.522
    set_0 = {float_0}
    tuple_0 = (set_0,)
    tuple_1 = (float_0, float_0, set_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    str_0 = "-C;Bs"
    bytes_0 = b"\x88\xa0\xbfK\x1b@m\x00J\xf7\x9aA\x04<:"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    int_0 = -3848
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    none_type_0 = None
    complex_0 = 2033.481 + 2081.730672j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    int_0 = 1858
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    str_0 = "\x0cIM.G-F{H!<w`J'L"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


def test_case_2126():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2127():
    str_0 = "t\\?}o,(no[]"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    str_0 = "0/SFadCk`"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    str_0 = "Wz@KOg\nt7Z5\thfe"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    int_0 = 117
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    int_0 = 181
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    int_0 = -453
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    int_0 = -321
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    tuple_0 = ()
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    str_0 = "=>EWSBf G\tt,\x0cg |T'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    complex_0 = 763.255471 - 989.205574j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    bytes_0 = b"\xfd\xeeJ\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    float_0 = 273.936417
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    int_0 = 623
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    int_0 = 611
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    str_0 = "-PGhv\x0c\na"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    str_0 = "7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    int_0 = -825
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    bytes_0 = b"\x11\xea^\xda6$NN2\xe5\x04k\xc5DG"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    str_0 = "(6Y[rI A!qY\x0c{Rls!7"
    float_0 = -8.0
    tuple_0 = (str_0, float_0, str_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    bytes_0 = b"\xfd\x11\ng\xf8;B\xd5\xd5mQ\xc4}\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    str_0 = "wkGTxb_5%ZA["
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    bytes_0 = b"wC+\x04G\x0bi\xb0\xe3$\xdfq\xb0\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    str_0 = "W~|\r~\r\t0C0D~7q\x0c)I)6U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    bool_0 = False
    bytes_0 = b"\xab\x16\xfe\x192\xc8\x92\x83\xf4\x9eU\xf0Wo\xad"
    list_0 = [bool_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    int_0 = -3733
    float_0 = 478.827
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    int_0 = 1294
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    int_0 = -983
    tuple_0 = (int_0,)
    dict_0 = {int_0: tuple_0, int_0: tuple_0}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    str_0 = ";Rp6m3<W"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    str_0 = "1pNvZ4z IK=NOa((~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    bool_0 = False
    str_0 = "N"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    float_0 = -3362.167466
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_2163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2164():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    str_0 = "M}1vtetk^%<\rV["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    float_0 = 1573.812766
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    str_0 = "v#`ydNI=4D}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    str_0 = "y9&2'tTj2P<"
    int_0 = 3427
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    complex_0 = -2433.252029 - 590.788j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    bytes_0 = b"\xfa\xff"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    float_0 = 900.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


def test_case_2172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2173():
    int_0 = 4317
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    set_0 = set()
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    int_0 = -1609
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    int_0 = -572
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    bytes_0 = b"5\xa9\x8e\x93\xbe"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    str_0 = "r\\%v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    bytes_0 = b"L\xac\xf0l\xba\xdf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    bytes_0 = b"\xa8\xd8d\x8a/"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2183():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2184():
    str_0 = "1/ix\r"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    bytes_0 = b"\x88\xcd\xd0\xfc#\xdd\xf0>b\xe4\x9d+\xe0z"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    float_0 = 164.591869
    bytes_0 = b"\xf9r~\x12\x97\x89\xdb"
    bool_0 = True
    bool_1 = False
    str_0 = ")"
    bool_2 = False
    dict_0 = {bool_1: bytes_0, str_0: bool_1, bool_0: bool_1, bool_1: bool_2}
    tuple_0 = (float_0, bytes_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    float_0 = -74.1309
    set_0 = set()
    tuple_0 = (float_0, set_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    str_0 = "$"
    dict_0 = {}
    float_0 = 1931.706
    set_0 = {str_0}
    bool_0 = False
    int_0 = -53
    tuple_0 = (bool_0, int_0, set_0, dict_0)
    bool_1 = True
    tuple_1 = (str_0, set_0, tuple_0, bool_1)
    tuple_2 = (str_0, dict_0, float_0, tuple_1)
    module_0.match(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    float_0 = -4582.40569
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    complex_0 = -2262.736681 - 409.310634j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    bytes_0 = b"\x16\x9dP\x9b\xd6e\xfe\xa3#|\xecB\xb9\xbf\xe3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    float_0 = -1339.19
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    bytes_0 = b"\n0\x8e\x94`6\xab\xae\xfa\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    bytes_0 = b"X\xab}\xd3H\xe5@\xa9\xebl\xe9\x89\xd2\xf9\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    complex_0 = -1267.3 + 957.9j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    complex_0 = -592.9 - 679.132j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    none_type_0 = None
    bytes_0 = b"\xae\x90\x1f\xd0\xb87"
    module_0.match(none_type_0, bytes_0)


def test_case_2201():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2202():
    int_0 = -149
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    int_0 = -708
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    int_0 = 2747
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    bytes_0 = b"\xa3\xb2\xa4\t\xfa\xb0\x1a\xbbU-I"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    list_1 = [tuple_0]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    set_0 = set()
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    str_0 = '\r(_)"]'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    int_0 = 1834
    tuple_0 = (int_0,)
    float_0 = 1231.8
    tuple_1 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    int_0 = 144
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    bytes_0 = b"b\x9d\x8e\xb6\x9c\x17x\xf5d?J\x992;\x10\x0e\xe1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    float_0 = -1414.49412
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    int_0 = 3111
    set_0 = {int_0, int_0}
    list_0 = [set_0, int_0, int_0, set_0]
    str_0 = "7@YYg"
    str_1 = "W\x0ceV:+|0MJisYrCN\x0c44="
    dict_0 = {str_0: list_0, str_0: set_0, str_0: list_0, str_1: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    str_0 = "+dfHv\r(N~la"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    int_0 = -671
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    float_0 = 3074.09
    complex_0 = 2641.394987 - 1431.9004j
    module_0.get_new_command(float_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    str_0 = "?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    bytes_0 = b"\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2221():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2222():
    none_type_0 = None
    bytes_0 = b":X"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_2224():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2225():
    float_0 = 289.125195
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    str_0 = "+.aO\\/<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    complex_0 = -1203.77903 + 5229.58534j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    str_0 = 'K%X?DQiF"=3'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    int_0 = -377
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    str_0 = "eyeQf"
    list_0 = [str_0, str_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    bytes_0 = b"E\x00'\x7f\xe3A(CV"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    float_0 = -2914.833389
    set_0 = {float_0, float_0, float_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    bytes_0 = b"S\x10\x97\xdc\x81(p\x11+\xd8l\x97*\x9d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    str_0 = "\tB>im* \rUW"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    bool_0 = True
    bytes_0 = b"0\xb2\x9dfj\xc9/\xb5\xe6\x9c"
    str_0 = "yCaV`$cfcT4/7LAQBI"
    tuple_0 = (bool_0, bytes_0, str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    float_0 = -81.365
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    str_0 = "$6ljU19@d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    int_0 = 1912
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    bool_0 = False
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


def test_case_2242():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2243():
    str_0 = "%jkQXl?S#V\\$\x0b"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    int_0 = -121
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    str_0 = "s99-Um2\x0cq"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    bytes_0 = b"\xef\x1dB\xc0\x8eg\xa3\x13T\x84\xfe:m\x94\x16\x00\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    str_0 = "BX-\t[WOgETBbe1w[o|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    int_0 = 390
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    int_0 = -748
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    int_0 = 1506
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    bytes_0 = b"\xe2\xc3M\x16\xdeW\x1d\x8cH\x04\xc3\xd8\x06\x0b_\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    bool_0 = False
    str_0 = "T"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    complex_0 = 164.070602 + 621.4222j
    bool_0 = True
    tuple_0 = (complex_0, bool_0, bool_0, complex_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    complex_0 = -3302 - 309.9983j
    tuple_0 = (complex_0, complex_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    float_0 = -3548.98568
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    int_0 = -1188
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    str_0 = "72?wD#[MD($z8H/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    int_0 = -2601
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    str_0 = "l9{]cM>\\XzT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    int_0 = 3131
    module_0.get_new_command(int_0, int_0)


def test_case_2265():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2266():
    str_0 = "h$d%E4\x0cBN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    bytes_0 = b"UC\xdd\xd8\xd0\x95,LO D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    int_0 = 2435
    list_0 = [int_0]
    tuple_0 = (list_0, int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    float_0 = 235.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    list_0 = []
    bool_0 = True
    list_1 = [list_0, bool_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    int_0 = -1716
    str_0 = "p_"
    tuple_0 = (int_0, int_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    int_0 = -2080
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    float_0 = -4169.2456
    str_0 = "JK"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    bytes_0 = b"0\xd54\x90\x9a\x1d\xcc\xfc\x05\x8b\xb5\xafv\x0b\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    none_type_0 = None
    complex_0 = 1055.1 - 550.19051j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    str_0 = "LDg /|nfhSLH\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    int_0 = 362
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    str_0 = "Mj qdJ'm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    float_0 = -1561.507
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    int_0 = -2031
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    str_0 = "Fd{`x53?%n2K_%&A%En"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    int_0 = 277
    int_1 = -1455
    bool_0 = False
    tuple_0 = (int_0, int_1, bool_0)
    float_0 = 1329.483
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    list_0 = []
    str_0 = ">G"
    object_0 = module_1.object()
    dict_0 = {str_0: object_0, str_0: object_0, str_0: object_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    bytes_0 = b"\x19\x13\xa5\x03r7*\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    str_0 = "Vn]6@qAvSo?Yz}jA?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    int_0 = -296
    dict_0 = {int_0: int_0, int_0: int_0}
    set_0 = set()
    tuple_0 = (int_0, dict_0, set_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    int_0 = -404
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    complex_0 = 273.96272 - 774.136744j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    int_0 = -957
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    int_0 = -1173
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    str_0 = "Q#V%PCk"
    str_1 = "w.w(E3"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_1.object(**dict_0)


def test_case_2295():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2296():
    float_0 = -848.146524
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    float_0 = 472.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    int_0 = -876
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    int_0 = -571
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    str_0 = "3\r4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    str_0 = "aX"
    set_0 = set()
    module_0.get_new_command(str_0, set_0)


def test_case_2305():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2306():
    bytes_0 = b"\x04r\x05@\xdd\x04)yz\xc9 e/\x10F\xb7O"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = False
    bool_1 = False
    tuple_0 = (list_0, bool_0, bool_1, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    float_0 = -4956.96
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    bool_0 = True
    str_0 = ">Xh5F"
    list_0 = [bool_0, str_0, bool_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    bytes_0 = b"|ui"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    bool_0 = True
    str_0 = "*#^2vQC?\x0b$'"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    float_0 = -1767.5835
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    bytes_0 = b"\xc6\xb6\xcf\xb9\x18Rv\xf6\x15"
    int_0 = -3136
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    int_0 = 4508
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    float_0 = 1465.4599
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    bytes_0 = b"\x93\xa0\xbaH\xdc0\xb74G\x9b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    str_0 = "l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    str_0 = "d@}O\x0b#t"
    set_0 = {str_0, str_0}
    list_0 = [set_0, str_0]
    list_1 = [list_0, str_0, set_0, set_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    str_0 = "-2|i\r4e="
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    bytes_0 = b"=:o\xe7\ra\xd8\xe3\x15\xb6>&y16\x88\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    int_0 = 1349
    str_0 = "t~DJv|g"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    float_0 = -2746.8275
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    float_0 = -2277.383
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    int_0 = 670
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    str_0 = "=Zy@);b\x0cS[R"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    int_0 = 3107
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    tuple_0 = ()
    bytes_0 = b"\xde\x1b6b\xa4\xe3\xf2\xd7o\xac&\x7f"
    module_0.match(tuple_0, bytes_0)


def test_case_2330():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2331():
    bytes_0 = b"\xf0\riZK\x1b\x177\x0e\x95l\xd2"
    list_0 = []
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    float_0 = 1429.384
    bool_0 = False
    list_0 = [float_0, float_0, bool_0, float_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    str_0 = "BwH-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    str_0 = "qD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    complex_0 = 2514.430744 - 3165.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    str_0 = "9v,; "
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


def test_case_2338():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2339():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    bytes_0 = b"\xac`7\xf7\x988\xeb\x8e\r\x0ce\xa6\xcfcH"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    bytes_0 = b"3\x9bCX%\xf0D\x8a\x08\x8a`\x9d\xb39)\xb7\x0cIk"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    str_0 = "s@-DY45<MDnB;]{|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    bytes_0 = b"\x1d\x9e\x99\x08h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    float_0 = -688.0
    module_0.get_new_command(float_0, float_0)


def test_case_2346():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2347():
    str_0 = "y662e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    int_0 = -508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    float_0 = -870.6
    dict_0 = {float_0: float_0, float_0: float_0}
    bool_0 = True
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    str_0 = '$Z\x0cl:{Gu"UKjN8(3@ub<'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    bytes_0 = b"\xec\xfa\xe5\x0e\x83G\xb5h\xfb\xd7\xb2dU"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0}
    str_0 = "rI1my=X}62-;~R\t\x0b"
    tuple_0 = (dict_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    str_0 = 'cSgS10."y\\NiyWri_\r'
    str_1 = "rQNCTeJ)H!*5"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2354():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2355():
    bytes_0 = b"$\x1e7"
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(bytes_0, tuple_0)


def test_case_2356():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2357():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    float_0 = -2151.320514
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    bytes_0 = b"\xfc\x92\xb8\xe1\x1b>oc\xc1\xe8V\xb8k$\xb1\xdf\xa4\xdc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    str_0 = "{c8\r[UIbp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    float_0 = -1419.0
    list_1 = [list_0, float_0]
    module_1.object(*list_1)


def test_case_2363():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2364():
    int_0 = 1246
    float_0 = -1255.69
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    str_0 = ";nm/i-p<\n\\P..GV@Z6"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    bytes_0 = b"\xceI/C\xe41_\t\x97?\xfa\xe2;\xb35"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    bytes_0 = b"\x90\xde4\xf9\xcb\x0b\xa0\x93lW\xfbz\xd4Ch \xe4"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    int_0 = 630
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    bool_0 = True
    int_0 = 585
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    float_0 = 2371.93819
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    int_0 = 571
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    bytes_0 = b"\xb7\xd8:\xf1\xb1a1\xf1\xfa\x02\xc5I\xb5gi:Cba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    float_0 = 1625.0
    int_0 = -573
    set_0 = set()
    tuple_0 = (float_0, int_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    str_0 = "\x0b;'+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    complex_0 = 510 - 829.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    int_0 = -531
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    str_0 = "wf\x0b/5W@>S"
    bool_0 = True
    int_0 = -1655
    tuple_0 = (str_0, bool_0, int_0, int_0)
    dict_0 = {tuple_0: int_0, str_0: str_0, str_0: int_0, bool_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    str_0 = "~z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    int_0 = 174
    list_0 = [int_0, int_0]
    int_1 = 857
    module_0.get_new_command(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2383():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2384():
    str_0 = "\r.\x0cy$A."
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    complex_0 = 1580.989 + 1161.84899j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    bool_0 = True
    float_0 = 2452.4
    list_0 = [bool_0, bool_0, float_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    complex_0 = 1166.48 - 2638.2284j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    float_0 = 690.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    bool_0 = True
    complex_0 = -696.285833 - 2230.77j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    float_0 = 1635.94
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    complex_0 = 1974.1003 + 438.43j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    int_0 = 3880
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    bytes_0 = b"I|\xcfr\xb8a^\x8e\xf9\xfe\t\xe0"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    object_0 = module_1.object()
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    bytes_0 = b"<\x1e\xc2\xbe\xcb'\x18\x95;G\xf3\x1b\n;\xc8\xf5\\"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    complex_0 = 466.2 - 1547.17j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    str_0 = "F\\%F[Fk7%l(Eo"
    int_0 = -2333
    tuple_0 = (int_0,)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: tuple_0}
    str_1 = "!ut0\x0csU\n!"
    tuple_1 = (int_0, str_1)
    tuple_2 = (dict_0, tuple_1, int_0)
    module_0.match(tuple_2, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = "X_f\nPr.r[IZXDA"
    set_0 = {bool_0, str_0}
    module_0.match(tuple_0, set_0)


def test_case_2398():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2399():
    int_0 = -171
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    str_0 = "HurB1On-NC$}t^\x0c\x0b\x0b"
    module_0.get_new_command(str_0, str_0)


def test_case_2401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2402():
    int_0 = -4972
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    float_0 = 175.651739
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    bytes_0 = b"\x83.\xc9dm\xae\x12\xe3\xdek)S"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    int_0 = -212
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    int_0 = -1716
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    int_0 = 1201
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    int_0 = 889
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    str_0 = "\\ou\nW{\n_"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    str_0 = '\\"b\r.}W.eU=u]J+mes'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    float_0 = 985.0
    set_0 = {float_0, float_0, float_0}
    list_0 = [set_0, set_0, float_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    int_0 = -632
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    bytes_0 = b"?\xb6A\x89:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    float_0 = -350.7227
    list_0 = [float_0]
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    str_0 = "=xr%#{\x0bV5w}J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    bytes_0 = b"\xd5\xa4\xb7\xb9\xe5\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    float_0 = 1622.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    complex_0 = 190.56161 - 2211.20168j
    list_0 = [complex_0, complex_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


def test_case_2422():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2423():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_2424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2425():
    str_0 = "mW,pJb2e-R_J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    bytes_0 = b"\x13\xef"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2427():
    pass


def test_case_2428():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2429():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    str_0 = "B(?sC5$A#Udjqw@B=U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    str_0 = "Z\nrK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    str_0 = "'\rs\r]e~OtKK}4n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    bytes_0 = b"\x897\xbd%p\xef\x84\x90\x91\xbeh\xefm\xf8\xac"
    set_0 = {bytes_0, bytes_0}
    str_0 = "hOx}gO4UB7c5{u\r+e"
    tuple_0 = (set_0, str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


def test_case_2436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2437():
    int_0 = -956
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    str_0 = "se\x0b'Hud|2(\x0bv%8IcnjRL"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    int_0 = 1615
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    bytes_0 = b"\x95=\x89h\x04~\xa5\x9f\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    int_0 = -3668
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    float_0 = 656.730597
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    str_0 = "%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    bytes_0 = b"\xff(\x00f.\xb1\xd0>H\xe9\x04\x1d\x12\x95\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    int_0 = -110
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    str_0 = "OE:-Q?\rZ\x0c\rha5D;Z`[K"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, set_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_2449():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2450():
    int_0 = 2444
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    str_0 = "CuWB6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    str_0 = "S0aO0cn&DQ4c7\n|Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    bytes_0 = b"\xe1|\x97\x0f\x8bp}\xdd3\xda\x0b\x8fM\x00\x8dh\\\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    float_0 = -1770.114
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    bytes_0 = b"\x872\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    bytes_0 = b"\x9c\xd9\xcf\xb5ak\x97\xa6a+T\xbch\x7f\xd5"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    bytes_0 = b"\xabQO\xac-\xb5Q\xc3\xc1~l\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    int_0 = 4505
    list_0 = [int_0, int_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    int_0 = 508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    str_0 = '\x0c~;#6>)"t Rqe~d!N'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    str_0 = "&Ff"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    int_0 = -4789
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    bytes_0 = b"G\xf7\x90yM\xa9\xa1x\xf5\x04=7D\xc7\x82\xda"
    str_0 = '*<m)"(T({"\tj:%s'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: str_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    float_0 = 161.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    float_0 = -2982.114716
    dict_0 = {float_0: float_0, float_0: float_0}
    bytes_0 = b"\x85"
    tuple_0 = (float_0, dict_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    str_0 = "\nv!7/^"
    module_0.get_new_command(str_0, str_0)


def test_case_2468():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2469():
    str_0 = ",`#mF[I"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    bytes_0 = b"\xe6W*\x06W\xb5\x8d6\xc5:X\xa6\xfd\xd0\xc5\xa1\x08i*\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    bytes_0 = b'\x13"wP\xc4h\xcf'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    str_0 = "nz`YRM&*G7c\x0c$jwKOHb&"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    str_0 = "*9<g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    bytes_0 = b"\x92\x84\x1f\x84D\x81\xbe >|1\xe7\x12r\x8e\xe0\x1c<M"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2475():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2476():
    str_0 = ";T<\x0cru%:.gK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    float_0 = 1113.01
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    bytes_0 = b"\xb19\x0f9\x08\xb9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    bytes_0 = b'\xb7\xf9\xf9\xba?\xe0\xd6\xd1"R\xb0\xdb\xd0\xde\x87\x91d'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    bytes_0 = b"='\x97G\xe7`\xb2\xba\xa1\xaeF\x06Z\x05\xc0\x0c\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    str_0 = "q[-M@"
    module_0.get_new_command(str_0, str_0)


def test_case_2482():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2483():
    int_0 = 4008
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    bytes_0 = b"I\x9d\x87}w\xafX!\xa07\xbc\x87\x02\xa7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    bytes_0 = b"\xb7\x1eU\x93\xbe\xd5\xca\xf2\xa5(\xe2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    bytes_0 = b"M\xf6\xc0S\x7fs\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    int_0 = -1777
    dict_0 = {}
    tuple_0 = (int_0, dict_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    complex_0 = -1162.581 - 943.1369j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    int_0 = 2802
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_2492():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2493():
    bytes_0 = b"\xebn*\xa3-\x1e\x9c\x8f<a\x89\xc1*\x85J"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    float_0 = -3040.03
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    float_0 = -23.59
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    float_0 = -2669.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    int_0 = 760
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    str_0 = "?GBhNMLOB0ql~"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    int_0 = -2790
    bytes_0 = b"\xae%Y"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: bytes_0}
    list_0 = [dict_0, int_0, dict_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    int_0 = 1996
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    int_0 = 2518
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    complex_0 = -252.3626 - 1943.75j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    bytes_0 = b"\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2504():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2505():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bytes_0 = b'$\xb7\xe7\xe1\xf8qc"'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    bytes_0 = b"\xcf\xb8\xc3\xe2_n\x94\x96\xdc"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2509():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2510():
    str_0 = "vxXaUI/rUD\\Y@Vu.)m"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    float_0 = 1874.3069
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    bytes_0 = b"\xffQ\xe2\xb2\xf3\xec\x1dJ\x19/\xc1\xd0p"
    str_0 = "?6PIbyStCWt\\A"
    tuple_0 = (str_0,)
    set_0 = {bytes_0, bytes_0, bytes_0, tuple_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_2513():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2514():
    bytes_0 = b"\\\xf8\x9d\xafHAF\x9f\xc1\xf1"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    bytes_0 = b"\xfay\tk\x19\xb3\xbdR\\\x18\xc3>\x1f\xbd^"
    list_0 = [bytes_0]
    str_0 = "in"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    str_0 = 'L)?MWM"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    str_0 = "|W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    float_0 = 1199.261
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    complex_0 = 624 - 1450.08j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    int_0 = 1700
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    float_0 = -2856.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    int_0 = 230
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    int_0 = 276
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bytes_0 = b"*\x07\xaaXi\x1f"
    tuple_0 = (bool_0, bool_0, set_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    float_0 = 995.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    bool_0 = False
    bytes_0 = b"y\xe9"
    dict_0 = {bool_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    float_0 = -2921.0
    float_1 = -3135.443032
    module_0.get_new_command(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    int_0 = 2767
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    str_0 = "Wu1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    bytes_0 = b"\xe8hS\x91\x97\xe6@\xe8\xad1\x91\xa7\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    str_0 = "DF-e\tH"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    complex_0 = 662 + 26.5107j
    list_0 = [complex_0]
    module_0.match(list_0, list_0)


def test_case_2533():
    pass


def test_case_2534():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2535():
    float_0 = -717.0794
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    str_0 = "u@g"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    float_0 = -2125.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    str_0 = "aQ\\rMF.Q2_j$"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    bytes_0 = b"\x0fG!\x0b\xea\x80\xdf\x08\xb3\x9f8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bytes_0 = b"A\xc2Bv|\xf3|\xa9\x9e1\xe9\x1e\xc08<\x14\xe9Cj"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    str_0 = "}VHwX?iK=\\-guO~"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    str_0 = "~9Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    bytes_0 = b"\xb9\x1bd\xbbdngQ\xa3p\x8b\\~\x13\x860\x8a\xba$y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    bytes_0 = b"\x8dF|\xf0iER\xab~Y\x1e{\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    str_0 = "uXCd+[aRl"
    str_1 = "r"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2547():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2548():
    bytes_0 = b"\xa2\x16\x18c\xa5<\xcbg}\xfa\xef\x132t7\xc3\xed\xa11\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    bytes_0 = b"\xc1\x9b\xaddxn\x17^\x8c\xe6\xca\xea\xf6"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0, bool_0, set_0, bool_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    int_0 = 1129
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    bytes_0 = b"\x8d\xc6\x8e\xb6H\xdb\xfd\x9d\xf0'\xcc\xa2KF<\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    float_0 = -32.03721
    module_0.get_new_command(float_0, float_0)


def test_case_2555():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2556():
    int_0 = 4355
    module_0.match(int_0, int_0)


def test_case_2557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2558():
    int_0 = 263
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    int_0 = -1614
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    float_0 = 1103.1
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    int_0 = 732
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    int_0 = 2682
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    int_0 = -1556
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    str_0 = "&^x\nRPq$\\oonDS70o'2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    bool_0 = True
    str_0 = "\\"
    tuple_0 = (bool_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    int_0 = -1889
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    complex_0 = -3439.58 - 78j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    str_0 = "m1QuCXfx)VlE*b..R.2"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    int_0 = -1211
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    bytes_0 = b"\x18\x91O"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    str_0 = 'pD8qypl0ps"'
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    str_0 = "R<Tt/:P[_s?w\nNBCa\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    bytes_0 = b"\x05d"
    int_0 = 931
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    bool_0 = True
    bytes_0 = b".\xb0+\x15\x83\x8b\xf5ioo\x11\x94\xb6"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    list_1 = [bool_0, list_0, list_0]
    module_0.get_new_command(list_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    bytes_0 = b"tR\xc2\x82)\xa4\xac3\xef\xbe\xb5-\xa6\x1d)\xe5r\xadv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    int_0 = 352
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    float_0 = 485.145
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    str_0 = "$,e]XXTp\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    bytes_0 = b"o\x86\xd5/\xb0\xd7\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bytes_0 = b"\xad\x9a\x0bS\x8f\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    float_0 = -2944.36
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    complex_0 = -2277.4167 + 4225.707j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    bytes_0 = b"\x9d \xe5&)Pj._\xba\xcc~\xf4\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    str_0 = "$ow?H=Gq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    int_0 = 1466
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    str_0 = "mYP\\qyU1@iz%;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    bytes_0 = b"\xfcv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    str_0 = "$A_6\x0bKZC"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    str_0 = "#<WS\n}[46$`h$%pu>Zpu"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    str_0 = "|4a[E<O?J~B$7'MNE?"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    float_0 = 1662.16
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    complex_0 = -103.966883 + 4938j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_2600():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2601():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    dict_0 = {tuple_0: tuple_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    complex_0 = -992.867 + 97j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    float_0 = 649.0
    dict_0 = {}
    tuple_0 = (float_0, dict_0)
    str_0 = "m\r1hL&].J(&OMd|cO"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    complex_0 = -1621.96118 + 993.797j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    bytes_0 = b"\x82\xdf\x8f\x00\x83\x02"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    bool_0 = False
    bytes_0 = b"\xd1\xbd\x96\xb8\x19\xd2\xc2\xd2\x8f\xd9"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    bytes_0 = b"5\x86\xb5\xcb\x9a\xb0,\xe7\x02\xc7\xc6\xdd\xf2\xcc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, bool_0, bool_1, set_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_2610():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2611():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    bytes_0 = b"\xd5H\xc9\xc7\xd0p\xe6\xddA\xe7\xe85\xbeYi\xcbR\xb4^\x93"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    int_0 = 1631
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    float_0 = -1912.61841
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    int_0 = -322
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2616():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2617():
    complex_0 = -169.777 + 4482.2107j
    bool_0 = True
    tuple_0 = (complex_0, bool_0)
    float_0 = 4129.20822
    dict_0 = {tuple_0: bool_0, float_0: tuple_0, bool_0: bool_0, bool_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    int_0 = -1661
    bytes_0 = b"}Q\xac\x80\xde\xc7D)\xeb\nf; >\x8d\xb4\xce"
    list_0 = [int_0, int_0, bytes_0, int_0]
    tuple_0 = (list_0, int_0, list_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    int_0 = -3
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    bytes_0 = b"[\x0e\x15=\xe2\x03\xa4\x92!+\xd0P#e"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    bool_0 = True
    str_0 = "OQ"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    complex_0 = 195.774235 - 747.446j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    complex_0 = -6251.748 + 804.967018j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    bytes_0 = b"\x9d\x89h\x03"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    str_0 = "kH\r$0u=6Guh$"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    str_0 = "Ef\x0c2|'FxO2n/%vJ6"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0, str_0]
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    str_0 = "\x0be9j'%9S"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    float_0 = -3224.746
    bytes_0 = b"\xe5C\xb3\xc4\x1e?68-\x1d"
    dict_0 = {float_0: float_0, float_0: bytes_0, float_0: float_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0, none_type_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    complex_0 = -1115 - 1625.57j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    float_0 = -370.4869
    module_0.get_new_command(float_0, float_0)


def test_case_2635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2636():
    str_0 = "vg\t7p$UIHE%,vGob]W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    bytes_0 = b"\x89\xe793Z\xe9s\x86\x84`\xbc5\xd7g\xe5\xd4m"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    str_0 = "c~9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    str_0 = "bAhyDdg*`s1_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    int_0 = -2608
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    int_0 = 1616
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    complex_0 = 1010.277 + 396.6j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    int_0 = -2351
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    int_0 = -3780
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    int_0 = 1563
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    str_0 = "%?\rM#LQGMh=?'Um*#^h"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    int_0 = -1740
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    float_0 = -755.364
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bytes_0 = b"\xad"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    int_0 = 3415
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    str_0 = "V3Y4R"
    module_0.get_new_command(str_0, str_0)


def test_case_2655():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2656():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    bytes_0 = b"\xd6P\xc5\x92\x8e\x15J\xcb~^"
    module_0.match(bytes_0, bytes_0)


def test_case_2658():
    pass


def test_case_2659():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2660():
    float_0 = -2248.321
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    bytes_0 = b'"\xa8\\'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    float_0 = -1829.0
    list_0 = [float_0]
    list_1 = [list_0, list_0, float_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    bytes_0 = b"O?\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    bytes_0 = b"rG\xd7\xcb\xf6'3\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    bytes_0 = b"\x93\xc4)\x18\x99\x06B!9\x06\x11\xcf\xce{\xba\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    str_0 = "gRg*.eBUm5,<<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    float_0 = 993.0
    list_0 = [float_0]
    module_0.match(list_0, float_0)


def test_case_2668():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2669():
    float_0 = 3669.0
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    str_0 = '\r-,j81"tM2'
    int_0 = 1773
    dict_0 = {str_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    str_0 = ""
    bytes_0 = b"\x82\x15\xa4\x19;?gmr\xa6#\x99\xbcIFC\xff"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    complex_0 = 2942.5571 + 2538.233608j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    int_0 = -89
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0]
    list_1 = [list_0, int_0]
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    str_0 = "Dz+ii\t*{dO]`Bbivk"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    bytes_0 = b"\xd7\x84\x18\xe7\r\x06\xef\xb0;\xe4\xa0\xde\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    bytes_0 = b"\xc3\xc2\x98z"
    bytes_1 = b"^\xd5\x7f\x93\x97\x03\xda\x0b\x11\xef\xa8\xf7WG\x12%<"
    int_0 = -3508
    tuple_0 = (bytes_0, bytes_1, bytes_0, int_0)
    module_0.match(tuple_0, bytes_0)


def test_case_2680():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2681():
    float_0 = -1648.6649
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    str_0 = "n&RN]w=#3`^ee7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    bytes_0 = b"Nw\xb9\xd2\xc8_\x06\x86\x0fO\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    int_0 = 1627
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    str_0 = "\rcF%QfPdy-\x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    bytes_0 = b"\xb6&\xc9\xc8\xbe\x9bf\x19"
    float_0 = 33.08579
    bool_0 = True
    tuple_0 = (bytes_0, float_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    complex_0 = 1361.56871 + 98j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    bytes_0 = b"<\x8a\xe2\xa2\x0etr\xf8\xfb?lh\xb6\x8d\x8f\x95\xb8 \xf6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    bytes_0 = b"\xa2\x88\x16\x15\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    str_0 = "\\jpD=?&T$;4)"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    str_0 = "XR,'v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    int_0 = -731
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    int_0 = -2238
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    float_0 = -435.119
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    str_0 = "\ro@.d\tajQ33Lc9"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    bytes_0 = b"\xb5P-I\xc0\xac}\xab\x1c\xad\xf3\x95\x10\xa9\xad"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    bytes_0 = b"\x13a\x80X\x9e\xa40\xe0C\x8eab\xb5F*\xa6q\xd3U"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    bytes_0 = b"\xef\x917\xd6tG\t\x7f\xb8\x00\n5\x9f"
    module_0.match(bytes_0, bytes_0)


def test_case_2700():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2701():
    float_0 = 490.95
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    bytes_0 = b"\xe9wW,\x117_\x91>\xce]\xaav"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    int_0 = 3641
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    int_0 = 523
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    str_0 = "We!7!Fs3LT+DF,,"
    module_0.get_new_command(str_0, str_0)


def test_case_2710():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2711():
    float_0 = 315.8
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    bytes_0 = b"c*\xdb)*E*\xdc\xcf\xea\x03Po\xb2\x8bC"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2714():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2715():
    str_0 = "`bh!(GI~.g=8\x0bi["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    float_0 = 1467.539
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    int_0 = 1916
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    str_0 = "?t1-4 !Ncgv<9)wd"
    set_0 = {str_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    int_0 = 1958
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    bytes_0 = b"\xf9\x11\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    bytes_0 = b"\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    bytes_0 = b"\xe26\x90"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    bool_0 = True
    str_0 = "7q {"
    float_0 = -843.1785
    list_0 = []
    dict_0 = {float_0: list_0, float_0: float_0}
    tuple_0 = (float_0, dict_0)
    tuple_1 = (bool_0, str_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    str_0 = "I\\x-q8X4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    bytes_0 = b"\xdc\x1e>\xd5\xb2\x10\xe4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    bool_0 = True
    str_0 = "*!k9I=0.4tP~"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    str_0 = "*YG@K.!NX9"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    complex_0 = 2493.751 - 3884.851j
    set_0 = {complex_0, complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    int_0 = -1824
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    none_type_0 = None
    str_0 = "fbYjC"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    int_0 = -389
    module_0.get_new_command(int_0, int_0)


def test_case_2733():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2734():
    str_0 = "Jhk]"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    int_0 = -493
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    bytes_0 = b"\xb1t\xbcS\xa6/\xcc\x91\xb4#\x95\xc3\x0f\xd0\x8b\xe2\xe4\xd2S"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    int_0 = -2032
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    int_0 = 895
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    int_0 = 1641
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


def test_case_2742():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2743():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    list_0 = [set_0, set_0, tuple_0, set_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    str_0 = "$HX/t[hB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    int_0 = 946
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, bool_0: bool_0}
    tuple_0 = (int_0, dict_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    int_0 = 1388
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    none_type_0 = None
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    int_0 = 1109
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    bytes_0 = b"C\xfa\x12\r\xf2\xaaS\x92\x96\x8a\xe8\xf2\xf5>\xe6\x1cZ\x87`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    bytes_0 = b"\x8a\xee\xbd\xb1\xe9E\xbc\xe2\xa9\x01\x14\xf6L"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    int_0 = 2103
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    int_0 = -1033
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    set_0 = set()
    bytes_0 = b"\x9d\xc7\xfc\xa3\x80t2\xef\xf1\xd5"
    tuple_0 = (set_0, set_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    bytes_0 = b"\xea\xe7\xa0\x8c\xa2\xc7\xde\x16\xe3\\\x1f\r\xd40\xf3"
    int_0 = -324
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    complex_0 = -2512.795591 + 2589.622145j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    bytes_0 = b"\xc4]_A\x7f\xf0Kt"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    int_0 = -962
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    complex_0 = 290.28 - 772j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    bytes_0 = b"Y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    float_0 = -817.106
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    int_0 = -3741
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    bytes_0 = b'J?\xbc\xd4S\xee\xc2"t\xb0'
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    bytes_0 = b"\xe9$f,L\x9b|\xf49\x01eT\x1e\x06o$\xbeG\x80c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    int_0 = 1295
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    bytes_0 = b"t\xf6\x85\xea\xc2\xd7B\x04\xa3\x03\xec\x10"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    list_0 = []
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    str_0 = "]2NP{l-x\x0b/"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    int_0 = 1792
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    bytes_0 = b"oI\x804\xe9\xdap\x83&&\xf4\x14\x7f\tBr"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    float_0 = 1489.681
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    str_0 = "(O4\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    str_0 = 's,".6:ylh2k|,6'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    complex_0 = -2093 - 844.85087j
    bool_0 = False
    str_0 = ">_''+(y-/#.l,3JX"
    tuple_0 = (complex_0, bool_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    bytes_0 = b"\xd9=(\xa4\xb4WV\xe1\xfbPR]6\xfb\xc1\xd3*\xcf\x9e"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: bytes_0, bytes_0: tuple_0, tuple_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    complex_0 = 1570.05 + 1536.41j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    bytes_0 = b"\x99\xb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    complex_0 = -1586.1 - 264.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    int_0 = 995
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    bool_0 = True
    bytes_0 = b"\xfd_\xc9\xc9\x9a\xd2~)l\x15[\xf6\xf0R\x80\x900"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    float_0 = 1897.258
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    str_0 = "%"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    tuple_0 = (dict_0, str_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    bytes_0 = b"+\x91\xd0\xf9\x1d\x08\x0bZ\x04\x9a=-\x10H~\xcb\x13my"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    float_0 = 1116.589333
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    int_0 = 511
    bytes_0 = b"\xb8$(=6\x83\x14\x9d\xda\x8eyh\xd4\xc9\x8a"
    bytes_1 = b'\x98m*\x91"\xbeR'
    tuple_0 = (int_0, bytes_0, bytes_1, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    int_0 = -772
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    complex_0 = -1539.0622 - 1242.5j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    str_0 = '<~\r-"j_L['
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    int_0 = 2655
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    bytes_0 = b"\x9d\x0b\x10\xccK\x86\xba\xf4\x1f\xc8\xcc\x1b\x12\xeed\n\xb6\xcc7\x9e"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = "8"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    int_0 = 1151
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    bool_0 = False
    bytes_0 = b"\x12V\xe0g\xc5w\xdc\xb4"
    dict_0 = {bool_0: bytes_0, bytes_0: bool_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    float_0 = -1930.022
    list_0 = []
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    float_0 = -1303.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    float_0 = 1006.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    float_0 = -1674.9
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    str_0 = "7C?*aIw:x$\n#vorts!"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    int_0 = -2964
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    float_0 = 3047.474746
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    str_0 = ".?a`RX'RvT~GOty4,L;"
    str_1 = "R5\"1_'B$)rUsn4UWb3y"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    complex_0 = 2275.6 + 747.684j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    str_0 = "mcm=beW,8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    int_0 = 1205
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    complex_0 = -2647.98601 - 2788j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    bytes_0 = b"\x1b\xf8uW\x92\xa6\x9a6{7r\x1f\xbeZ\xfcE{k["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    str_0 = "\nBEUz1gLgJ\\g\x0bzpg"
    bool_0 = False
    set_0 = {str_0, str_0, bool_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    bytes_0 = b"D\xf379\x94\n"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    float_0 = 1723.0
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    float_0 = -2995.771
    module_0.get_new_command(float_0, float_0)


def test_case_2827():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2828():
    bytes_0 = b"\xf7)$9f6Z\xc9r\x13h"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    bool_0 = False
    int_0 = -474
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    str_0 = "u!mtiI(sJcK 0_6\ng"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    int_0 = -2447
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    int_0 = 2041
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    int_0 = -3180
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    int_0 = -768
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    int_0 = 3986
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bytes_0 = b"\x7f+w"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    dict_0 = {}
    bytes_0 = b'\xc7\xe2\xa0\xef)\xf5\x19i\x90"\x10\xb0\xb2\x84\x80\x9c'
    str_0 = "tmDg]"
    bool_0 = True
    tuple_0 = (dict_0, bytes_0, str_0, bool_0)
    tuple_1 = (dict_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    dict_0 = {}
    set_0 = set()
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (dict_0, set_0, tuple_0, dict_0)
    module_0.get_new_command(tuple_1, dict_0)


def test_case_2840():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2841():
    str_0 = '\\cm#wk"M*1)'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    str_0 = "g~e]BNn2e_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    str_0 = "\rI\\r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    str_0 = "Rc'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    int_0 = -940
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    complex_0 = -1056.9135 - 2406.82j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    str_0 = ")g!=mS=|?<^\n>W"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    bytes_0 = b"\xaf^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    str_0 = "x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    str_0 = "LSklO6Gj9,v2o4\x0cN`zJ6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, bool_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bytes_0 = b"\x1a\xacy6\xe0\xd0\xb1dE\r\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    int_0 = -3985
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    bytes_0 = b"\xb2>'\xd3\"P"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    int_0 = 1639
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    complex_0 = -2961.461379 + 2313.100035j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    float_0 = 962.0867
    list_0 = [float_0, float_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    str_0 = "4MOdRI|X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    float_0 = -1237.757
    list_0 = [float_0, float_0, float_0]
    bool_0 = False
    int_0 = 1363
    tuple_0 = (list_0, bool_0, int_0)
    tuple_1 = (tuple_0, list_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_2862():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2863():
    float_0 = -729.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    float_0 = -5796.898
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    str_0 = "ca:5Mwthy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    float_0 = -2323.78115
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    int_0 = 1355
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    bytes_0 = b"C\x8b\x8e\x95\xb1\x9d\xf8\xb0V\xf8\xadL"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    str_0 = "GqB1\x0b!N$[1E-Up^d.]bT"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    bytes_0 = b"\xc2A\xa0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    str_0 = "),H8Ay{EyM~WbpG.>v I"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    str_0 = "b\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    int_0 = 2612
    tuple_0 = (int_0,)
    bytes_0 = b"\xc2?\xe6\xa5G\x98"
    tuple_1 = (tuple_0, bytes_0)
    list_0 = [tuple_1, tuple_1]
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    int_0 = -1791
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    str_0 = "~9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    str_0 = "0<E<6w"
    module_1.object(**str_0)


def test_case_2877():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2878():
    float_0 = -765.0
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    float_0 = -2242.246427
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    str_0 = "f:pM?9mKSAul\x0bp~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    float_0 = 934.8
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    bytes_0 = b"\x05\x7f\xcd` 0\x80\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    bytes_0 = b'@x\xa9\x98\xbf\xf9"\x97\xa1\xde'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    int_0 = 1813
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    int_0 = 1870
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    bytes_0 = b"\x93\xa6\r\xe1\x94\xfaT9\xd6Ag\x17\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    int_0 = 1638
    set_0 = {int_0, int_0}
    bytes_0 = b"\xdeBN\xeb\x9f\xa0r\x8d\x87\x04\x8d\xa3\x94]6"
    tuple_0 = (set_0, bytes_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    bytes_0 = b't8@6\xc8dX\x0e6zW\xdc\x81x"\x8a\xe1\x96'
    int_0 = -1013
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: int_0, bytes_0: bytes_0}
    int_1 = 89
    module_0.get_new_command(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    bytes_0 = b"\xe1\xb5\x88p\x08\xb75"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    complex_0 = 3118.89468 + 2175.55206j
    list_0 = [complex_0]
    none_type_0 = None
    int_0 = 288
    dict_0 = {
        complex_0: complex_0,
        complex_0: none_type_0,
        int_0: complex_0,
        complex_0: list_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    str_0 = "#\x0b+{U}q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    str_0 = "3e\x0c`.<yO"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    float_0 = 1161.07279
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    bytes_0 = b"v7.\x83\xa7u\xb7\xaa\xcb9n\xa3\x12"
    float_0 = 1756.48
    float_1 = -2709.0
    tuple_0 = (bytes_0, float_0, float_0, float_1)
    module_0.get_new_command(tuple_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    int_0 = 1862
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    str_0 = "y]2c\\jp|in"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    str_0 = "U\x0b"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    bytes_0 = b"$\x1c\xfe\xc5&\xa3X}\xbb"
    str_0 = "vx\\1R\x0crt<RE3("
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (bytes_0, str_0, tuple_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    str_0 = "%V'sJ$_r)scs`%q=y/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    float_0 = -3158.5774
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


def test_case_2907():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2908():
    str_0 = ",yVW{\x0cv\rnP?o!ylIV73X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    str_0 = "y\\"
    str_1 = "e#Nl%Vc'z)B#"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: str_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    int_0 = 1182
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    complex_0 = -1821.97 + 1161.39j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bytes_0 = b'x>"\xf6\xefF\xe0\x83IXIZwZ\xda@\xc78\x89\x0b'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    int_0 = 99
    module_0.match(int_0, int_0)


def test_case_2916():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2917():
    str_0 = "|}@\x0bz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    float_0 = 2098.5
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    float_0 = -2680.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    int_0 = 1063
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    str_0 = "JW#Q76@=B^xt8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    int_0 = 69
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    int_0 = -1363
    module_0.get_new_command(int_0, int_0)


def test_case_2927():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2928():
    int_0 = 2077
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    bytes_0 = b"\x02"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2930():
    pass


def test_case_2931():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2932():
    int_0 = 1743
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    int_0 = -2155
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    complex_0 = 1013.5177 + 2452j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    int_0 = 1098
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    int_0 = 1248
    list_0 = []
    tuple_0 = (int_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    complex_0 = 249.41607 + 465.2425j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    int_0 = 633
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bytes_0 = b"\x19MA\x1f,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    bytes_0 = b"<v\x1dBha1C"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    int_0 = 1580
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    bytes_0 = b"\xcd\xe0(\x8d\x18\xc3\x0e\x9cuO[4Y\x8b\x98"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    int_0 = -995
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    str_0 = ";Q| pi2p"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    int_0 = -201
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    float_0 = -105.48
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    bytes_0 = b"\x9c\xb0j\xa3\xb2\xfe\x1b\xd6\xa7kZ\x16\xc5n\xeb\xc1Ge\xacx"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    list_0 = [dict_0, bool_1, bool_0]
    list_1 = [list_0, dict_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "AS_TOJV=Cy_GY\x0cdo"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    bool_0 = False
    bytes_0 = b"w\xa0\x01"
    tuple_0 = (bool_0, bytes_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    str_0 = "\tZY?-"
    bool_0 = False
    str_1 = "Aw:<]c6[5"
    dict_0 = {str_0: str_0, str_0: bool_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    int_0 = -185
    dict_0 = {}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bytes_0 = b"VO\x8e\xca_"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    int_0 = -2498
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    bool_0 = False
    bytes_0 = b"\xb3\xa3\xf4\x1c\x1d\xf4\xa2\x059"
    list_0 = [bool_0, bytes_0, bool_0]
    str_0 = "\x0c1~SAF!1<[K!:RdkXnY"
    tuple_0 = (list_0, list_0, str_0, list_0)
    list_1 = [tuple_0, tuple_0, bytes_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    str_0 = "`[U(d"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    int_0 = 3747
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    str_0 = "exBIetbzH}d"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, bool_0: tuple_0, bool_0: bool_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    bytes_0 = b"\xee\xe2&+&\xc4c2\x10\xe6z\xcd\x8a\xb1\xda\xa0\x8e\x14/"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    bytes_0 = b"\xa8\xb7\x7f+!\xe0\x1a\x02"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    complex_0 = 3361.15 - 829.535j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    str_0 = "XrbB|!h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    complex_0 = 147.79538 - 1528.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    int_0 = 2654
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    str_0 = "7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    bytes_0 = b"\x0e\xa0\xf5\xa2\ny\xca\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    str_0 = ":8<,ZA9S"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    int_0 = -1939
    module_0.match(int_0, int_0)


def test_case_2975():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2976():
    str_0 = "?gI,y40O3BH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    bool_0 = True
    int_0 = -782
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0, int_0: bool_1}
    list_0 = [dict_0]
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    int_0 = -72
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    int_0 = -904
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    str_0 = "=\n&5\tAi!3B\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    float_0 = -639.556
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    int_0 = -1898
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    list_0 = [set_0, none_type_0, int_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    int_0 = 2668
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    float_0 = -1440.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    complex_0 = -806.4509 + 1472.784j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    int_0 = -53
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    float_0 = 2676.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    float_0 = 344.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    str_0 = 'e\t}"P\\4m`<Z>BcOU9gk'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    int_0 = 1458
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    str_0 = ":TO*>\r\x0b!ChJ1x6)<&}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    str_0 = "wfL'HO'nCqA\x0c&^VpwFdu"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    bool_0 = True
    int_0 = 2185
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    tuple_0 = (bool_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    str_0 = "3+Ot!(\nsH@(|\tmc/\r?"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    set_0 = set()
    int_0 = 349
    tuple_0 = (set_0, int_0)
    list_0 = [tuple_0, int_0, set_0]
    bytes_0 = b"~"
    tuple_1 = (int_0, set_0, int_0, bytes_0)
    tuple_2 = (list_0, tuple_1, tuple_0)
    module_0.match(tuple_2, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    none_type_0 = None
    list_0 = [none_type_0]
    bool_0 = False
    tuple_0 = (list_0, list_0, bool_0, bool_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    float_0 = -2515.0
    tuple_0 = (set_0, set_0, float_0)
    bool_1 = False
    tuple_1 = (bool_0, tuple_0, set_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    int_0 = -554
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    bytes_0 = b"<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    int_0 = 596
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    bytes_0 = b"-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    bytes_0 = b"$f<\xf58\x96$\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    bytes_0 = b"$\xc4@\xd7\xf37\xd5"
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0, tuple_0, tuple_0]
    bytes_1 = b"1\x11\xda\xb3\xfd\xd0Sh\x92\xfa$&l\x18\xeb"
    tuple_1 = (bytes_0, tuple_0, list_0, bytes_1)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    int_0 = 1505
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    int_0 = -845
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "w\x0b+f"
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    bytes_0 = b"\xc1\xa8!\xe9\xe5LTkj\x89"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    str_0 = "IN9d'RE="
    dict_0 = {str_0: str_0, str_0: str_0}
    complex_0 = 1616 + 2604.763j
    tuple_0 = (str_0, str_0, dict_0, complex_0)
    list_0 = [tuple_0, complex_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    int_0 = 889
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    bool_0 = False
    str_0 = ""
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    bytes_0 = b"\x15\x19@Ic"
    bytes_1 = b"\xae\x84\xdc\x95P\xd7\xb2q\xd4\\"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    int_0 = 645
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    str_0 = "IGqDc-Y\t'\\MCRfH\rJk9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    int_0 = 830
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    complex_0 = -740.7312 - 57.32j
    bytes_0 = b">\x88\xbep\x14\x06\x13\x87\xe1\xc6\xaa1\x99\xd6\xe4"
    module_0.match(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    int_0 = -393
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    bytes_0 = b"\xfbn\x1c\x82\xf3K\x9d\xfd\xa2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    float_0 = 3229.43219
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    str_0 = '+\rd*<D%uKkt]@|"{[G'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    str_0 = "UU7Uc "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    str_0 = "<G%H#wD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    str_0 = ')91"\x0c\x0bU}W'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    int_0 = -2671
    tuple_0 = (int_0, int_0)
    set_0 = {tuple_0, tuple_0, tuple_0}
    tuple_1 = (tuple_0, tuple_0, set_0, set_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    bytes_0 = b"?\x19\x904]/\x1c\xe4*\xdf\xf2\t\x0f\xe5l"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    int_0 = 2524
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    int_0 = 1825
    int_1 = 421
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    bytes_0 = b"\x11\x15\x92\x0c\x08>\r\x18g\xcb\xf8\xaa\x89\xd4F\r\x12\xd4"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    int_0 = 20
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    list_0 = [tuple_0, bool_0, tuple_0, tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    bytes_0 = b"\x12\xb2:\x0b\xcf\xccW4\x11\xeax\xa2\xd9"
    int_0 = 243
    set_0 = {bytes_0, bytes_0, bytes_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    str_0 = ":FF>L}]oM*k\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bytes_0 = b"\xc7\x91W\x87\xe1*\xbd}<"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    bytes_0 = b"\xf8\x16\x89\x88\xf3R"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    int_0 = -1261
    bool_0 = True
    tuple_0 = (int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    list_0 = []
    str_0 = "EfPD.~!["
    str_1 = "x/=L(X]1LY@)%G;B%h"
    str_2 = 'i!uQMP\rz?nc%"5L;Aet='
    dict_0 = {str_0: list_0, str_1: str_1, str_0: str_0, str_2: str_2}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    bytes_0 = b"Z\x15\xaf\xa0\xe4\x8d\xb8HWj\\\x00\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    bytes_0 = b"\xe4\x99H\xb4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    int_0 = 1777
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    bool_0 = False
    bytes_0 = b"\xf0&\xe5\\\x8fH\xeb"
    dict_0 = {bool_0: bytes_0, bytes_0: bool_0, bytes_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    bool_0 = True
    bytes_0 = b"\x08,\x88\x99\x17\x18\x8c"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    bytes_0 = b"\xed\xe9\xeb\xaa\xc81\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    bytes_0 = b"\xcf\x0bV\xf6\xaaA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    str_0 = "?>p1'/bNb"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    str_0 = 'aT8(R!tM0"&3yx'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    bytes_0 = b"\x7f0\x0c"
    list_0 = [bytes_0]
    list_1 = [bytes_0, list_0]
    module_0.match(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    str_0 = "lSLcx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    bytes_0 = b"\x8c\xf1\x93\xef\xcfb\xf5\xca\xc8q:f\x1c\xebV\x19\xb6B\xd8\xa9"
    set_0 = set()
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    int_0 = -1675
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    bytes_0 = b"\x9b\xdd\x84\xc1\xbaV\xf3\xcc\xb0\xbe\xe5k^\xf8\x827\x15"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    float_0 = 4527.662
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    int_0 = -4723
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    list_0 = [set_0, set_0, set_0, set_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    int_0 = 343
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    int_0 = 4629
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    str_0 = "4 /ex9\\w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    bool_0 = True
    bool_1 = True
    bool_2 = True
    tuple_0 = (bool_0, bool_1, bool_2)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    bytes_0 = b"\xf9M\x07\xaez\x97\xbd\xe1:N\xf6as"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    float_0 = -11.772
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    bool_0 = False
    int_0 = 1452
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    int_0 = 795
    set_0 = {int_0, int_0, int_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    int_0 = 1457
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    str_0 = "\rR9#D(,>XiaIR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    float_0 = -248.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    bytes_0 = b"c\x83l|\xea|\x0c\xe4\xec'M\xa3\r)C"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    str_0 = "~\n>ORW1W\\ PXc`U1Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    str_0 = "Q"
    tuple_0 = ()
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    int_0 = 243
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    float_0 = 3417.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    str_0 = "hOa)B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    bytes_0 = b"\xc0\x97\x0c\x143\xa6\x12\xc2\x14\xa0\xe5\x89\x11\xb4\x1b\x8am\xc8\xc2j"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    str_0 = "`VfoRuDwW"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    float_0 = 665.036
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    bytes_0 = b"\x93\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    str_0 = 'b~Or"]b'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    bytes_0 = b"c"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3080():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3081():
    float_0 = 484.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    int_0 = -782
    tuple_0 = (int_0,)
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    int_0 = 56
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    dict_0 = {}
    object_0 = module_1.object(*dict_0, **dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    float_0 = 2217.52
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    bytes_0 = b"l\xfaS\x1d\xae\xaa\x97\\\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3087():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3088():
    int_0 = 439
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    bytes_0 = b"\xe5\xc9\xcd\xda8\xfa"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    complex_0 = 2983.19 - 684.3494j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    int_0 = -3256
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    tuple_0 = (list_1,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    bool_0 = False
    complex_0 = -1122.859 - 257.87142j
    set_0 = {bool_0, bool_0, bool_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    str_0 = "d*~^?\x0bVS3RS\t`\t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    str_0 = "J_@)/_U0i5o>)"
    bytes_0 = b"\xd4<J:\xb4E\xca\xea"
    dict_0 = {str_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


def test_case_3096():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3097():
    object_0 = module_1.object()
    str_0 = "\r"
    float_0 = -87.5
    tuple_0 = (object_0, str_0, float_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    str_0 = "\x0bJ)o!B\x0b<:\txz5VwDE"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    bytes_0 = b"\xcen\x9c\xf6\xab +Q~\xd4OX\xb0\x0c\x85\xcf\x83\xeb\xc8"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    bytes_0 = b"`\xe7{\x15p\x99\xb5\xfc\xf01\xc6\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    str_0 = "O{|?(nID5\x0cx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    float_0 = -480.8107
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    str_0 = "X&"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    int_0 = 1048
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    str_0 = "MuD"
    module_0.get_new_command(str_0, str_0)


def test_case_3108():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3109():
    float_0 = -245.702
    int_0 = 112
    set_0 = {float_0, int_0}
    module_0.match(float_0, set_0)


def test_case_3110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3111():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    str_0 = "=i&-{[Fsy%"
    tuple_0 = (str_0, str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    str_0 = "\t@\\cSy}tNUL$4H}tF#"
    module_0.match(str_0, str_0)


def test_case_3114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3115():
    bytes_0 = b"\xad~\xfe<T\xf4\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    float_0 = 655.842165
    str_0 = 'm`@ceBO\nd.s"'
    list_0 = [float_0, float_0, float_0, str_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    int_0 = -2972
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    int_0 = -737
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    int_0 = -303
    bytes_0 = b"\xfb^\xac,\xeb\x82A\xc3e\xbdY\xc3\x8f-\x15\xc4\xbe\xd0\xda"
    tuple_0 = (int_0, bytes_0, int_0)
    module_1.object(*tuple_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    str_0 = "R,\rv.nJB/Y\\X\x0bT]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    complex_0 = -1913.78 - 76j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    int_0 = -602
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    str_0 = 'd(F;"9+kpo-?+'
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    str_0 = ")A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    str_0 = ",K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    int_0 = -2533
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    str_0 = "&'"
    bytes_0 = b"}\xda\xd8\xd5\xb2\xfdH\x9d\x84"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    int_0 = -1812
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bytes_0 = b"\x8f\xfb(\x8f]I\x1cA\xe3w[\xb0q\x8f\xc9\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    int_0 = -2216
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    str_0 = "aYafl\n/B6*h&LP|Y]~q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    str_0 = 's`t".I"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    float_0 = 847.4176
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    bytes_0 = b"\xcf\\\xfb(A\xaa\xe5\x00\xb0\xb3.\x81>\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    bytes_0 = b"\xbc|y\x8c\xb3f\x1e\xfeE\x99\xd4\xd8\xf6r"
    str_0 = "b,EIlfnvt"
    set_0 = {bytes_0, bytes_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    bytes_0 = b"\xffK\x81\x06\xb1\x92\xe3\xad\xc8"
    tuple_0 = ()
    tuple_1 = (bytes_0, tuple_0)
    tuple_2 = (tuple_1,)
    tuple_3 = (tuple_2,)
    module_0.get_new_command(tuple_3, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    bytes_0 = b"\x98\x9e6\xb7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    str_0 = "AJ$RBZ4x9"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    str_0 = "T6-GP9B\nc~adG3FdM#{"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    bytes_0 = b"\xae]p\xf58\x1cM1\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    int_0 = -3001
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    bool_0 = True
    int_0 = -4452
    bool_1 = True
    tuple_0 = (bool_0, int_0, bool_1)
    bool_2 = False
    tuple_1 = (tuple_0, int_0, bool_2, bool_1)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    float_0 = -188.006
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    str_0 = "DFMQ1nrc43&b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    bytes_0 = b"\x0e\xd2\xce\xc7\tWo\x98\nu,\x9b\xbdK\xc9"
    int_0 = 446
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    bytes_0 = b"\xc9\x82\xe4"
    tuple_0 = (bytes_0,)
    set_0 = {bytes_0}
    tuple_1 = (tuple_0, set_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    float_0 = 3680.1979
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    float_0 = -1234.49953
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    str_0 = "7iHhTZrKIG"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    bytes_0 = b"5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    float_0 = -3993.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    bytes_0 = b"4\x8eF#x]\x0e|,\xb5\x89\xcfQ\xc1@\x08\xb1\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    str_0 = "CacZ(=Af+LmN.\t,ys-d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    int_0 = -1972
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    str_0 = "nY(xb'>IH\r#"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    bytes_0 = b"ZQ\xe6^"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    str_0 = "1Wb}WO\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    bytes_0 = b'\t\x92\xaeV"K'
    bool_0 = True
    list_0 = [bool_0, bytes_0, bool_0]
    str_0 = "btJc.\t/6(X1"
    tuple_0 = (bytes_0, bool_0, list_0, str_0)
    tuple_1 = (tuple_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    complex_0 = -2268.66068 - 173.9161j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    str_0 = '>HE^6j9P@E\tLV\\|"='
    str_1 = ".xcEV^uFt~q\rU}\tV?"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    str_0 = ",mShFsZSpO@X>"
    bytes_0 = b"\xe8\xa82\xc3"
    tuple_0 = (str_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    bytes_0 = b"^\x97[v\x18\x9a\xfb\x8c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    complex_0 = 1201.614474 + 453.264j
    list_0 = []
    bool_0 = True
    int_0 = 561
    tuple_0 = (complex_0, list_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    complex_0 = 757.32 + 491.496j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    int_0 = -1401
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    float_0 = -1566.7981
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    bytes_0 = b"\x87n.\xe3\xf4\xdf\x87\x01\x0f\x84}b\x94"
    bool_0 = False
    bytes_1 = b"=\xd2\\Ont\xad\xfa\x9bn\x82\xaa"
    tuple_0 = (bytes_0, bool_0, bytes_1)
    tuple_1 = (bytes_0, bool_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    int_0 = 353
    module_0.match(int_0, int_0)


def test_case_3175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3176():
    complex_0 = -346.7765 - 1328.418898j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    list_0 = []
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    bool_0 = True
    float_0 = 10.56
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    float_0 = 2966.8524
    int_0 = -5676
    list_0 = [float_0, int_0, float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    str_0 = "R"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    tuple_0 = ()
    bool_0 = False
    set_0 = {tuple_0, tuple_0, bool_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    bytes_0 = b"\xf2\x9c\x8d\x15\x89\x7fL\xe2\xed\xe1\x91\xcc2\x07d\xa5\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    complex_0 = 1183.80543 - 3000.42j
    str_0 = "*Ou0\x0b0K!"
    str_1 = '+k05"T__^k0.w*}Hb'
    str_2 = ".\\6:b4Jf0\rPRbz%0"
    dict_0 = {str_0: complex_0, str_1: complex_0, str_2: str_0}
    module_1.object(*complex_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    complex_0 = -2813.998 + 2340.0794j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    str_0 = ">u~7SEBA't1M~~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    str_0 = "4Kc~moq;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    float_0 = 3719.89
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    str_0 = "Tg{\\,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    int_0 = -1915
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    float_0 = -1342.52
    dict_0 = {}
    tuple_0 = (float_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    bytes_0 = b'rr\xe0\x84;\xbaFG\x03\x93\x99"\x92\xb4.B@\xe1'
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    int_0 = 2299
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    str_0 = "CA@u b;W\\H\n @3"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    int_0 = 235
    dict_0 = {int_0: int_0}
    list_0 = []
    tuple_0 = (dict_0, list_0)
    tuple_1 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    float_0 = -623.182
    set_0 = {float_0, float_0, float_0}
    tuple_0 = (set_0,)
    int_0 = -1315
    list_0 = [float_0, float_0, tuple_0, int_0]
    list_1 = [set_0, set_0, set_0, list_0]
    module_0.get_new_command(list_1, set_0)


def test_case_3197():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3198():
    bytes_0 = b"?\xe8\xae,\xf3d\xac\x18|\x0e\x083\x1e\xbc\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    float_0 = -1344.748804
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    float_0 = 311.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    int_0 = -2896
    module_0.match(int_0, int_0)


def test_case_3202():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3203():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    str_0 = 'PEz{TGY]S%$\rq"\t'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    str_0 = 'ubj"a|YWWfgMqu'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    int_0 = -2600
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    bool_0 = False
    int_0 = 910
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: int_0, bool_1: bool_0, bool_0: int_0}
    int_1 = 2186
    tuple_0 = (bool_0, dict_0, int_1)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    bytes_0 = b"O\xbb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    int_0 = 4294
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    float_0 = -1496.52
    module_0.get_new_command(float_0, float_0)


def test_case_3212():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3213():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    int_0 = -1440
    tuple_0 = (int_0,)
    bytes_0 = b"\xaaw\xf2'\xee\xe2\xe1\x9bK"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    bytes_0 = b"i\x88R\x0f"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_3216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3217():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    float_0 = -412.0
    module_0.get_new_command(float_0, float_0)


def test_case_3219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3220():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    str_0 = "]FGO@"
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(str_0, tuple_0)


def test_case_3222():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3223():
    bytes_0 = b"6\xe68"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    bool_0 = False
    tuple_0 = (bool_0,)
    str_0 = "~Z);p0!\r5{E68/!o:v+G"
    bool_1 = True
    dict_0 = {}
    tuple_1 = (tuple_0, str_0, bool_1, dict_0)
    module_0.get_new_command(bool_0, tuple_1)


def test_case_3225():
    pass


def test_case_3226():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3227():
    float_0 = -498.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    str_0 = "FKNF:**pwCz?\\z\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    float_0 = 1780.15215
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    str_0 = "d?h/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    bytes_0 = b"\x97L\xd8\x98!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    str_0 = "wbTe"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    complex_0 = 319 - 4689.056j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    bytes_0 = b"\x9d\xe61K\x98 \xf7\xc8\xc8*\x07\x02\xd8D\xeb\xd3D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    str_0 = "~Y|LjJ@\t\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    str_0 = "PeT5Xe)&Iy2sx`VPY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    str_0 = "0%kL=0@m,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    float_0 = -1310.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    int_0 = 1487
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    bytes_0 = b"\xedW\xe8v\xcd\xd1\xa0f.\x88\xe1\xbd\t\xf8\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    bytes_0 = b"\x96N"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    int_0 = 1467
    list_0 = [set_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    bytes_0 = b"\xf8\x0b\x18"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    str_0 = 'X@f&G",~5\tF%j'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    bytes_0 = b"]\xac\x1a\x0c\xb5-"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3247():
    pass


def test_case_3248():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3249():
    bool_0 = True
    list_0 = [bool_0]
    str_0 = ".B7YF0*;U)#."
    str_1 = "#e$/~SYjX7"
    bool_1 = True
    str_2 = "V&w]kJ|`"
    dict_0 = {str_0: list_0, str_1: bool_1, str_2: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    str_0 = ";C`NC="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    float_0 = 1863.5787
    set_0 = {float_0, float_0, float_0, float_0}
    str_0 = 'mbt%-+;{RTK47"-'
    int_0 = 3489
    tuple_0 = (float_0, set_0, str_0, int_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    int_0 = 415
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    str_0 = "T?A@yL&68:"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    float_0 = 4126.7813
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    str_0 = "\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    str_0 = "v2!UF^6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    float_0 = 74.0
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (float_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    int_0 = -1325
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    str_0 = "j\tgI:fI(`/\x0cUI<4=$=V"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    int_0 = 3180
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    bool_0 = True
    str_0 = "vPm"
    tuple_0 = (bool_0, bool_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    bytes_0 = b"\\%\xd7\xdfU\x83\xd8v\xea\x12\x93\xdeV\xd4"
    module_0.match(bytes_0, bytes_0)


def test_case_3264():
    pass


def test_case_3265():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3266():
    bytes_0 = b"\xa5\x88*\xab\xca\x03+\x04\xbd\xd6\xdb\xb3\x08\xe5\x7f#\xa2"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    bool_0 = True
    str_0 = "\x0c \n4M"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    str_0 = "@]-It<YTQ;>4$L#e'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    dict_0 = {}
    int_0 = 3416
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    complex_0 = 2492.9554 - 1957.982j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_3271():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3272():
    bytes_0 = b"t\x9a\x19\xbc\xf9\x18\x1c\x94!\xa6>\xed-\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    int_0 = -823
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    int_0 = 1518
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    complex_0 = -289.30257 - 2149.122j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    int_0 = 268
    int_1 = 3800
    int_2 = 487
    set_0 = {int_2, int_2}
    dict_0 = {}
    tuple_0 = (int_1, int_2, set_0, dict_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    bytes_0 = b"m\xceX\x8bl!\x107\x0e\xa5G\x88\xe9\x0e\xcf\xb1\xaa\xf5\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    bool_0 = False
    str_0 = "g]I bI&"
    dict_0 = {bool_0: str_0, str_0: str_0, str_0: bool_0, bool_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    complex_0 = 4641.606 - 1068.71454j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    int_0 = -1576
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    bool_0 = False
    bytes_0 = b"\\\x9b\xb3\nti"
    module_0.get_new_command(bool_0, bytes_0)


def test_case_3283():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3284():
    int_0 = -1413
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    float_0 = -2289.528532
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    bytes_0 = b"vZ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bytes_0 = b"f\xe8Y"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    bool_0 = False
    bytes_0 = b"\x1eL8T=\x83Y3\x11<\xe4s\xf4\xf3Jz\x8e\x93\xaae"
    complex_0 = -134.6 - 2086j
    set_0 = {complex_0, bool_0}
    tuple_0 = (bytes_0, bool_0, set_0, bytes_0)
    tuple_1 = (bool_0, tuple_0, bool_0)
    bool_1 = False
    tuple_2 = (bool_0, tuple_1, bytes_0, bool_1)
    bool_2 = True
    module_0.get_new_command(tuple_2, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    float_0 = -760.214
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    int_0 = 1923
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    str_0 = ".\r<E+~x_7"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, dict_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    str_0 = "8"
    bytes_0 = b"\x89z\xa8'w"
    set_0 = {str_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    str_0 = "n\tu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    bytes_0 = b"o\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    int_0 = 1123
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    set_0 = set()
    int_0 = -1002
    bool_0 = True
    bytes_0 = b"\x98\xb1\xb3DG18VMz\x9bpW\x96\xa4\xcc\x80\x084\xf4"
    dict_0 = {}
    tuple_0 = (int_0, bool_0, bytes_0, dict_0)
    tuple_1 = (set_0, tuple_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    int_0 = 69
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    str_0 = "ld\x0bxai"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    str_0 = "MP\t'>4fRY#y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    float_0 = -3761.38
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    str_0 = "#fm|u\\._\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    str_0 = "tZxG\t\tL=gX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    int_0 = -1547
    str_0 = "LAQtM?HP/ml\x0b^EUn"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: str_0, int_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    complex_0 = -161.6 + 3952.9415j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    int_0 = -177
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    str_0 = "e_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    float_0 = 4006.251
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    int_0 = -2541
    int_1 = -474
    dict_0 = {int_1: int_1}
    set_0 = set()
    bytes_0 = b"n;\xa0\x07\xca\xd7Y\xcb\xa9)\x13"
    tuple_0 = (int_0, bytes_0, set_0)
    tuple_1 = (dict_0, tuple_0)
    tuple_2 = (int_0, dict_0, set_0, tuple_1)
    module_0.match(tuple_2, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    int_0 = 245
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    complex_0 = 1683.201199 - 564.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    str_0 = 'v="K\x0c'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    int_0 = -1692
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    float_0 = 182.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    int_0 = -2710
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    float_0 = 2802.905
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bytes_0 = b"\xd8g\xae\xa6B\x95\xd6\xd0\x82`#\xcd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    str_0 = "PNv/ [K/,EB7sHKrA"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (str_0, list_0, str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    bytes_0 = b"\xf0'8wR\xb08\x90mjl\xe9"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    bytes_0 = b"\xc0K\x9f\x93"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    str_0 = 'a"$_I)-8aG'
    module_0.match(str_0, str_0)


def test_case_3334():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3335():
    none_type_0 = None
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    bytes_0 = b"\xbf\xbcd\x17\xea\xb4(\x91\x8cT\xfe\xd0\xcby\xd5$R"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    int_0 = 1124
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    complex_0 = -41.9326 - 582j
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    bool_0 = True
    int_0 = 3409
    int_1 = -3855
    bool_1 = True
    tuple_0 = (int_0, int_1, bool_1)
    tuple_1 = (int_0, int_1)
    tuple_2 = ()
    dict_0 = {bool_0: tuple_0, tuple_1: int_0, bool_0: tuple_2, int_0: tuple_1}
    module_0.get_new_command(dict_0, tuple_0)


def test_case_3340():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3341():
    complex_0 = -1009.7 + 5468.0131j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    str_0 = "N0FF&w\rjY=Vxj"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    int_0 = -1251
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_3344():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3345():
    complex_0 = 540.2105 - 3082.72153j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    float_0 = -934.747
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    int_0 = 1405
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [int_0, int_0, list_0, int_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    dict_0 = {bool_0: tuple_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    none_type_0 = None
    int_0 = -1098
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    str_0 = "<g~MZt&fO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    float_0 = 1709.24395
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    complex_0 = 2106.15279 + 5.8009j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    str_0 = "\t_0bpZ\nRnA!r0L@QP?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    str_0 = "}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    object_0 = module_1.object()
    bytes_0 = b"SZ\xc7?\x80\xdc\xb2\xe0\xa0\xef\x98\xf6O\x9f\xe2\xc3\xb3\x1dl"
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bytes_0 = b"2-\x93\xd4a\xa8\xe5\xa4\xb9g\xdb8&\x96\x95"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    complex_0 = -1845.7 - 2043.74j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    int_0 = 1832
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    bytes_0 = b"\xa3Z\xb3\x0c[:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    bytes_0 = b"\xe9-\x97\xa9~\xe1\xffs\xbb\r\x88\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    float_0 = 1872.4
    module_0.match(float_0, float_0)


def test_case_3363():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3364():
    float_0 = -3257.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    int_0 = -515
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    int_0 = 625
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    str_0 = "Q \rj L|?P)B9P "
    str_1 = "oQ1&|E;iZFE=iugn"
    str_2 = ""
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    str_0 = "B}KPR++9&CSD~tKlKPd"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    none_type_0 = None
    bytes_0 = b"~\x1a\xd0#"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    float_0 = -1349.00431
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    str_0 = "n)`z"
    tuple_0 = ()
    str_1 = "#zZ4"
    dict_0 = {str_0: tuple_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    float_0 = -1098.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    bytes_0 = b"\x83\xad\xf0\xd7\x04\x10|"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    bytes_0 = b'\xe6"{A\x7f'
    bytes_1 = b'\xf3o<)\x08\xe1\x10\xb0"\xd5\xde\xa2\x18|\xa8\x84\xdb\x7f\xf0'
    list_0 = [bytes_0, bytes_0, bytes_1, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    int_0 = -549
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    int_0 = 3027
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    int_0 = 2188
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    bytes_0 = b"\xb4\n\x18\xf8\x06\xb7Y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    bytes_0 = b"\xe8\xa7bG\xd7#Z\xe6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3383():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3384():
    bytes_0 = b""
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    str_0 = "GqB."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    bytes_0 = b'\xa6\xf1\xf0J)\xea\xbf9\xf3\xfe\xcc\x80\xb1l\xc7%"1\x15\xf8'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    int_0 = -1800
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    bytes_0 = b"\xb1:\xfe\x9f!\n\xb9u\x06\xb9M\xb4j9\x03]"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    int_0 = -1053
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    bytes_0 = b"\x82\\\xc9O\xa9V\xce\xe1^\xe5\xb7\x9b\x98\x04}\xd8\xda\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    str_0 = "3P"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    str_0 = 'Hd"Na'
    str_1 = "o(aP&k3`rEV'e}~"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    float_0 = -619.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    bytes_0 = b"sdW\x03`\xe23\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    float_0 = 1122.078
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    int_0 = 221
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    bytes_0 = b".\xeb-\x96\x0b5}\xa6\xfb\xe4\x8f\xf9M\xdc'\xaf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    float_0 = -2744.31322
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    int_0 = -31
    str_0 = ""
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (dict_0, dict_0, dict_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    str_0 = "eZ\t_4tO)!kS/B>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    int_0 = -901
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    float_0 = 3035.3135
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_3408():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3409():
    int_0 = 1869
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    str_0 = "0[WXvjk6YX'\"\\vzb/"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    bytes_0 = b"\xe3Q\x12c\x17\xdd\x93\x03\x0f>\x1204\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bytes_0 = b'\xcd?\x12\x93r\xda/s\xe5<\t\xeb\x8b%\x03\xa5\t"\xea\xb0'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    str_0 = "lCp`c;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    bytes_0 = b']\xa2"\xe55\x83'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    int_0 = 359
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    bytes_0 = b"'R\xfc\x08\xd3{H\x1e\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


def test_case_3418():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3419():
    str_0 = "x~rhD\\K"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    complex_0 = 797.94733 - 931.2j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3421():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3422():
    complex_0 = -725.1999 - 755.7917j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    complex_0 = -1952 - 1755.937774j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


def test_case_3425():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3426():
    bytes_0 = b"\x8c\xe6\xb0u/"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    str_0 = ";IdNb\x0b"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    int_0 = -1337
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    int_0 = -475
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    str_0 = "mr/FoY:Tc:"
    none_type_0 = None
    str_1 = "sx0id9\\"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    bytes_0 = b"8\xbae.\x95M\x14\x01\xfb\x0bW1\x192\x8al7\x124m"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    bytes_0 = b"\xc1\x08\xce\x83\x16\xd5>\x7f\xc7\xbay\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    int_0 = -803
    float_0 = 1692.432
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    float_0 = -87.8237
    int_0 = -2212
    tuple_0 = (float_0, float_0, float_0, int_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    str_0 = ":"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    int_0 = -1091
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    str_0 = "^#|&1|!34"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    float_0 = -1816.513
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    str_0 = "PY/>\"7\tko7(B\n@'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    complex_0 = -1616 - 1759.1j
    set_0 = {complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    complex_0 = -775.18 + 853.762933j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    int_0 = -1401
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    int_0 = 206
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    int_0 = -266
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    str_0 = "jZX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    float_0 = 1752.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    str_0 = "'i9`5=w~%OPg"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    str_0 = "^n;D8_\x0c'Vx+;q0pM~6y0"
    str_1 = "bGq"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: str_1, str_0: bool_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    str_0 = "QI}~g>cYK&\t.3"
    str_1 = "G)S\n"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    bool_0 = False
    int_0 = 437
    set_0 = {bool_0, bool_0, int_0, bool_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    bytes_0 = b"da_\x98\x03\x16"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    int_0 = 437
    int_1 = 190
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    str_0 = "elSM=9yFN ."
    bool_0 = True
    set_0 = {str_0, str_0, str_0, bool_0}
    dict_0 = {str_0: set_0}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    str_0 = "Mi"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    bytes_0 = b"\xb6\xb9P\xe9\t\x81\xd1{\xe1\x06\xf5{\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    complex_0 = -76 + 484.19j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    int_0 = -2196
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    bool_0 = False
    list_0 = [bool_0]
    float_0 = -1918.28031
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    str_0 = "8V\x0ckjke~T!(PwTrwF6\\"
    int_0 = 1822
    tuple_0 = (str_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    bytes_0 = b"\xd5y\xc5\xe7\x93_\x87\x16A%3\xafo\x1e\xde\x9a\x13"
    int_0 = -3162
    int_1 = -2836
    dict_0 = {bytes_0: bytes_0, bytes_0: int_0, int_1: int_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    int_0 = -1318
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    bytes_0 = b"@\r]\xf5\xf1\x98\xdfHD\xbdS\x8d\x11>)\xe8"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    int_0 = 1475
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    bytes_0 = b"\xb0\xd2rO\xaf0\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    complex_0 = 392.53409 + 1693j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    float_0 = 2360.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bytes_0 = b"ZU\xb9\x92\x0e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    bool_0 = False
    float_0 = 796.78
    tuple_0 = (bool_0, float_0, float_0)
    list_0 = [tuple_0, tuple_0, bool_0, tuple_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    str_0 = "UT/n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    int_0 = 516
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    str_0 = "P\n|^\n&M1W%V1S&3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    float_0 = -720.2421
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0]
    bool_1 = True
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    int_0 = -2843
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    complex_0 = -565 + 196.979j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    complex_0 = -1041.1 - 1157.642j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_3481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3482():
    str_0 = "fYIuGP,DBdG,eq"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    int_0 = -839
    list_0 = [int_0, int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    int_0 = 1311
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    bool_0 = True
    bytes_0 = b'"#\xe4\x9d\x18w2\x95E:+\x86\xba\xed^%J\x06e'
    bool_1 = False
    tuple_0 = (bool_0, bytes_0, bool_1)
    list_0 = [tuple_0, tuple_0, tuple_0]
    list_1 = [list_0, tuple_0, bool_1, list_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    str_0 = "X i[T/:5_"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    int_0 = -3100
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3488():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3489():
    int_0 = 1689
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    bytes_0 = b"`\xb6\xc0\xf2\x84\xbd\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    str_0 = ":C=K\t'wB%s7"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    bytes_0 = b"\xc46\xf4\x94}\xde\xab\xb1\xc7\xd1\x1b\x17"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    int_0 = -895
    set_0 = {int_0}
    tuple_0 = (set_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    bytes_0 = b"\x9c\xb6N/\xb4+\xdb8\xed\x85\xec\x82\x91\xe3\xaf\x80\xbe\x90\x06-"
    tuple_0 = (bytes_0, bytes_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    str_0 = "%NO0Y3Ux6_j"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    str_0 = "9Bws\r5"
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (str_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    str_0 = "m2qw*Iup,Ntr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    bytes_0 = b"\x8e\xb4\xb8\x9d\xebO\\\x80\xae\x94f\xa3\t;\xd4{5\x89&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    bytes_0 = b"pCl\xebAA]\x99\xe1\xcf&\xec\x8f\xa0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    int_0 = -4315
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    int_0 = -578
    list_0 = [int_0]
    list_1 = [list_0, list_0, int_0, list_0]
    module_1.object(*list_1, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    float_0 = 1326.855687
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    str_0 = "7U;+eb8o_"
    module_0.get_new_command(str_0, str_0)


def test_case_3507():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3508():
    bytes_0 = b"=\x89\x0fU\xac"
    dict_0 = {bytes_0: bytes_0}
    str_0 = '3_CT\r"pDpr\t.S"?NM4yq'
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    str_0 = "jo_c03f]rwx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    int_0 = -1036
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    str_0 = "w{7!R8 S7K2jnU"
    module_0.get_new_command(str_0, str_0)


def test_case_3512():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3513():
    bytes_0 = b"\xcb\xb5\x86z\xdcsU"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    complex_0 = 2652.2 - 522.686j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    float_0 = -780.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    str_0 = "^$!~V/O=p2|gXv|N<lb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    int_0 = -1021
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    int_0 = -3785
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    bytes_0 = b"d\xe8T\x15=\x03\xcf_\xc7H"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bool_0 = True
    bytes_0 = b"\xd07\xf5\xfa>"
    bool_1 = False
    tuple_0 = (bool_0, bytes_0, bool_1, bool_1)
    tuple_1 = ()
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    int_0 = 2838
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0]
    list_1 = [list_0, bool_0, set_0, bool_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    int_0 = -3968
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    complex_0 = -1651.15498 + 351j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    str_0 = "\r{wd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    str_0 = '`{$ngh>!0)qB-D"~<bM'
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    float_0 = -1900.357051
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    int_0 = -2388
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    float_0 = -1423.38
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    int_0 = -917
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    str_0 = "<}KkA\\0uX~"
    bool_0 = False
    list_0 = []
    tuple_0 = (str_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    str_0 = "<fDc>|61\tP\x0cgTj>\n*J"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    float_0 = -1884.446453
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    int_0 = 454
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    int_0 = 2552
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    bool_0 = True
    str_0 = "!{kao=q]:"
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, str_0, dict_0, bool_0)
    list_0 = [tuple_0, bool_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    bytes_0 = b"\x0f\xa0\x93@"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    bytes_0 = b"\xe5\x0c\xd7\x83A]\x80\x07\x99\xc8\x8e\x9b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    list_0 = []
    module_0.match(list_0, list_0)


def test_case_3544():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3545():
    bytes_0 = b"\xe7\n\x93{\xf3\x90D\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    int_0 = 2311
    module_0.match(int_0, int_0)


def test_case_3547():
    pass


def test_case_3548():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3549():
    str_0 = "{ ~~r`gtz--Ih"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    bytes_0 = b"c~"
    bytes_1 = b"\xac3\x02"
    float_0 = 3969.031239
    bool_0 = False
    tuple_0 = (bytes_0, bytes_1, float_0, bool_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    str_0 = "m7:\rI5JujC4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    int_0 = -1281
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    float_0 = 302.117831
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    str_0 = "~2sI:t"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    str_0 = "L&inWOxS8*/VD"
    int_0 = -1113
    dict_0 = {str_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    str_0 = "X/4+J\\\rN6"
    complex_0 = 2826 - 369j
    tuple_0 = (complex_0, complex_0, str_0)
    list_0 = [str_0, str_0, tuple_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    str_0 = '"G971Ma'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    complex_0 = -2304 - 642.9806j
    str_0 = "Iey9'.*GU7V2p"
    module_0.match(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    str_0 = ".w@Cy"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    int_0 = -1092
    module_0.get_new_command(int_0, int_0)


def test_case_3564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3565():
    str_0 = "D0L, ;\tpeY,H-y\x0b5H"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    float_0 = -1406.12092
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    list_1 = [list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    int_0 = 1321
    set_0 = {int_0, int_0, int_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    str_0 = "{1,P%kb"
    bytes_0 = b"hG|\x14L\x9d\x11\xfb\xb5"
    dict_0 = {bytes_0: str_0, str_0: bytes_0, str_0: bytes_0, str_0: str_0}
    int_0 = -1989
    bool_0 = False
    tuple_0 = (bytes_0, dict_0, int_0, bool_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    int_0 = -1496
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    object_0 = module_1.object()
    bytes_0 = b'\x0c\xc9"\xa6\\\xcf\x9b{\xcf\x9eLp\x1b\xd3w\xa9'
    tuple_0 = (bytes_0,)
    int_0 = 3250
    tuple_1 = (tuple_0, int_0)
    tuple_2 = (bytes_0, tuple_1)
    set_0 = {object_0, tuple_2, tuple_2}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    bytes_0 = b"J\x90\xf0\x96\x93i\x86\xa0\xce@.\xb6v~Q\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    bytes_0 = b"j\xff\x0f=\xb7\xf9\x88\x8cY\xf2\x91\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    complex_0 = -63 + 3929.364j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    float_0 = 107.80742
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    int_0 = 994
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    int_0 = 2164
    module_0.get_new_command(int_0, int_0)


def test_case_3578():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3579():
    int_0 = -2208
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    list_0 = []
    int_0 = 525
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    int_0 = -430
    module_0.match(int_0, int_0)


def test_case_3582():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3583():
    str_0 = "K?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    none_type_0 = None
    float_0 = 1111.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    bytes_0 = b"\x1f\xc6\x9b\x08`\xe4\x7fL\xb7t\x8e2\xb2\xed\xb5o$\xb6\xbbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    complex_0 = 20.88228 - 3037.746j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    bytes_0 = b"\\u\x07\xa9\x91o\xe4\x8b\x86\xdc\xb1[\xb5n]U\xf9"
    set_0 = {bytes_0, bytes_0}
    bool_0 = True
    list_0 = [set_0, bool_0, bytes_0, set_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    str_0 = "D64V_D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    str_0 = "\x0c\r(gN-D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    bytes_0 = b"\xbf(\xa3\xc8?\xed\xf0\x0b\x9eu\xca\xb2h\xe91"
    bytes_1 = b"\xd2\x0e\x8c\x99\xa3\xcc\xac\xac"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_1}
    tuple_0 = (dict_0, bytes_1)
    bool_0 = False
    str_0 = "@)0wq"
    tuple_1 = (tuple_0, bool_0, str_0, bool_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    int_0 = 3053
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    int_0 = 2866
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    bool_0 = False
    bytes_0 = b"\x17\xe5\xc9\x99\xbb\x94\"u\xb6\x0bk'\xfb"
    tuple_0 = (bool_0, bool_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    none_type_0 = None
    bytes_0 = b"\xfa"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    bytes_0 = b"\xbc=\xa0\x0b^\x02\xc7\x9a"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    float_0 = 2765.073032
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    bytes_0 = b"\xc0\xdc\x96\xf0M9g"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    int_0 = -402
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    bytes_0 = b"\xb7IZ\xd3\xab\x01\xa3\xdca\x87So\xb7\x15\x83"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bytes_0 = b"\xa6\x7f\xb5\xd2\n@\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    object_0 = module_1.object()
    set_0 = {object_0}
    list_0 = [set_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    str_0 = "Az%cc]}K`M^<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    int_0 = -551
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    bytes_0 = b"~\x00\xac\xefN\x12\x87\xc1I\xe5\xaf\xdb\x12\xbd3\xbf\xe0"
    bytes_1 = b"\xa2\xb5\xf6\xc5d\x84\x18\x9f\x90\xa4\x84\x8c%\xfd\xc6\x9aY"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_1: bytes_1, bytes_1: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    float_0 = -1488.3
    tuple_0 = (float_0,)
    dict_0 = {tuple_0: float_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    str_0 = "txPh3a"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    int_0 = 1865
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    complex_0 = 1007.4005 - 2252.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    bool_0 = True
    tuple_0 = ()
    bool_1 = False
    tuple_1 = (tuple_0, bool_0, bool_1)
    tuple_2 = (bool_0, tuple_1)
    module_0.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    int_0 = 2364
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    str_0 = "i\rZ\x0cd?ee\\%?F(mE"
    int_0 = 2088
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    int_0 = 12
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    bytes_0 = b"c\xb7\x96\xf4\x04\xfd2&\x87\xf5\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    str_0 = "@u@r},"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    int_0 = -5465
    int_1 = -3909
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    float_0 = 1995.318202
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    int_0 = 1729
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0, int_0, int_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, list_0, list_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


def test_case_3623():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3624():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    str_0 = "S4~['P}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    float_0 = 3299.07647
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    bytes_0 = b"\xc1p+"
    float_0 = -3384.1051
    tuple_0 = (bytes_0, float_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    str_0 = "+}}4uU"
    complex_0 = -1348.07 - 2007.68293j
    dict_0 = {str_0: str_0, complex_0: complex_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    int_0 = -936
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = True
    tuple_0 = (int_0, dict_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    bytes_0 = b"~|E\xe2t}C\x81\x11"
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = "2B;pUjrpSodF>jx},WK["
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    int_0 = 1836
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    bytes_0 = b"\xf3\xba\x92\x0e\xe1/\x0f\xdd"
    module_0.match(bytes_0, bytes_0)


def test_case_3635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3636():
    bytes_0 = b'\x8e\xd5\xa8"Y\xb8W\xe1\xd5\x9f \x9f\xaf*'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    int_0 = 2336
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    int_0 = -1524
    module_0.match(int_0, int_0)


def test_case_3639():
    set_0 = set()
    object_0 = module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    bytes_0 = b"\xf7\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    bytes_0 = b"Z\xcb2\x82\x88\xa1\r\xda\x830"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    int_0 = -1691
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    bytes_0 = b"\x13\xd5b\x0e\x912\xfc\xee\xbe\x000\xcfi_\xf2ZN\xfc\xc7\x98"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


def test_case_3644():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3645():
    int_0 = 1434
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    int_0 = -1053
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    float_0 = 2480.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    str_0 = "zD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    bytes_0 = b"B_\x96t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    bytes_0 = b",O>Ip\xc7\xf0?r\x90o\xbb,([\x86U\xdb\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    int_0 = 4284
    module_0.match(int_0, int_0)


def test_case_3654():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3655():
    str_0 = "\x0b(>~v$Y\t\noi&|\x0bD!"
    float_0 = -718.68563
    bool_0 = True
    tuple_0 = (str_0, float_0, bool_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    str_0 = "p4}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    int_0 = 1159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    bytes_0 = b"\\&V\xe8\x0f\xack\xe1o~\x1b\xb6\x8f,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    int_0 = -1694
    bool_0 = True
    str_0 = "t(Kb\x0c^P6:M%)]#R$m%r"
    bytes_0 = b"\xc7\xf2\x15"
    tuple_0 = (bool_0, bool_0, str_0, bytes_0)
    int_1 = 5006
    tuple_1 = (bool_0, tuple_0, int_1)
    bool_1 = False
    tuple_2 = (int_0, tuple_1, tuple_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_2, none_type_0)


def test_case_3660():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3661():
    int_0 = 1009
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    bytes_0 = b"\x93\xf4V\xb3\xc9\x1b&"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    int_0 = 275
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    str_0 = "Q;3E(6I!G\\u Yjhq"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    set_0 = {str_0}
    list_0 = [tuple_0, set_0, set_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    int_0 = -2863
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    int_0 = -3186
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3669():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3670():
    bool_0 = False
    str_0 = "1gc\x0cFnGs+\x0b}2R"
    str_1 = '\n[P}Yvl2"\x0b'
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    int_0 = 3317
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    bytes_0 = b"xO\xbfED0#\xad\xe9\xd3e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    int_0 = -573
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    str_0 = "qd22p4fe"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    int_0 = -1210
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    int_0 = 1304
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    str_0 = "k:|9$.#qg!rmEcA9\x0bmh\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    int_0 = -2509
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    complex_0 = -2775.86 - 839.01397j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    str_0 = "If%\x0bZ$lq^j_]"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    complex_0 = -1759.234 - 2548.98956j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3684():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3685():
    bytes_0 = b"%|\x8a"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


def test_case_3686():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3687():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, bool_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    int_0 = 5366
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    int_0 = 1054
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    complex_0 = -875.52 - 196.79341j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    list_0 = []
    str_0 = "%KP`QC"
    str_1 = "kNwR\\=.\x0bO^EM@(9"
    dict_0 = {str_0: str_0, str_1: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    bool_0 = True
    int_0 = -37
    set_0 = {bool_0, int_0, int_0, bool_0}
    list_0 = [set_0, bool_0, set_0, set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    float_0 = -2486.094
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_3696():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3697():
    int_0 = -2588
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    str_0 = "J\x0b7Yv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    float_0 = 1075.727312
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    bytes_0 = b"HLZ\x9a\x88"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    dict_0 = {}
    int_0 = 823
    bytes_0 = b"\x85^\xf6u\x8e\x9d\xb0\xe3dt\xf6\x94D"
    tuple_0 = (dict_0, int_0, bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    none_type_0 = None
    complex_0 = -1828 - 604.5j
    module_0.get_new_command(none_type_0, complex_0)


def test_case_3703():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3704():
    bytes_0 = b"\x93;PY\x99\x0f\x95\xd6\x0f"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_3706():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3707():
    str_0 = "pFqvSJ&8LvML#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    int_0 = 3203
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    float_0 = -291.6861
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    tuple_0 = ()
    str_0 = "3ynX=+Q5#,7E"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    str_0 = ".-RCZP|0g~P_gp\\ZJ5*'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    float_0 = -625.29696
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    complex_0 = 802.255656 - 3137.07j
    list_0 = [complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    int_0 = 2542
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    float_0 = -2402.2603
    str_0 = "]l&CWE/Z]i_1BI"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    bytes_0 = b"b\xb2\xc56\xf7\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    int_0 = 1587
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    bytes_0 = b"\xdc\x95\x03\xbd\xf2R\xb9\x98'\xa6\x1d\x18\xe8\x8c2\x060O\xe4\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    bytes_0 = b"$\xa1a\xc1!B\x7f\xfe\xd69\xb3.\x1fC\x80\xe7%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    str_0 = "DQi%Rf'9bxHLJ4Td`"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    int_0 = 2832
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    bytes_0 = b"{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    object_0 = module_1.object()
    list_0 = []
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (list_0, list_0, tuple_0)
    tuple_2 = (object_0, tuple_1)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    str_0 = "oe$tI\x0brFM!"
    float_0 = -4520.67685
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    int_0 = 3684
    list_0 = [int_0, int_0, int_0]
    bytes_0 = b"\xb2\x90"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    int_0 = -829
    tuple_0 = (int_0,)
    bool_0 = True
    list_0 = [tuple_0, tuple_0, bool_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    complex_0 = -1842.63 + 4869.69j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    float_0 = 1758.138
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    bytes_0 = b"\xa2\x9f\x8bKj\xd8\xb7sL7\xa5O\xdc\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    float_0 = -1562.16575
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    bytes_0 = b"\xf9:I\xd3\xdeC\xa9\xfc\xbe:\xd4\xb8\xe0\x02\xde?\x95\xa6"
    module_1.object(*bytes_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    int_0 = -1158
    set_0 = {int_0, int_0, int_0}
    bool_0 = True
    str_0 = "-AwdiY\t"
    tuple_0 = (set_0, bool_0, str_0, bool_0)
    list_0 = []
    tuple_1 = (tuple_0, bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    bytes_0 = b"\xeb\xb2I\x03"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_3737():
    object_0 = module_1.object()


def test_case_3738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3739():
    int_0 = -2866
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    bytes_0 = b"\xdbsf\x1a\xca3m\x1c\x02\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    int_0 = -2205
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    none_type_0 = None
    str_0 = "AuJX!"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    int_0 = -1822
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    bytes_0 = b"\x1d\x02\n\xd77\xcc\xf0w"
    module_0.match(bytes_0, bytes_0)


def test_case_3747():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3748():
    int_0 = 765
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    str_0 = ">b5g]j8H#QI%x?"
    str_1 = "wj^!{G#&T}S'mE^&"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    str_0 = "$=x!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    str_0 = ")r\tUB\x0cB*[7y\x0cy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    int_0 = -1028
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3753():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3754():
    bytes_0 = b"1\x89\xf3\xfeVS\x8d\xf2l\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    bytes_0 = b"\xee]\xf8\xe8\xe3]\xcf\xd9V\xce"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    bytes_0 = b"%\xbd\x06\x19?\xb8u\xff\x1a\xe5"
    module_0.match(bytes_0, bytes_0)


def test_case_3757():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3758():
    bool_0 = True
    str_0 = "L(S"
    set_0 = {bool_0, str_0}
    dict_0 = {bool_0: set_0}
    module_0.get_new_command(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    bytes_0 = b'\x8an"Xn\xd9\xc5\x0cJ\x93\xd6\xda\xf5~\xd8\x81\xc0\xbe\x11'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    complex_0 = 65 + 486.4181j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    float_0 = -505.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    int_0 = 406
    module_0.get_new_command(int_0, int_0)


def test_case_3764():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3765():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    str_0 = "tCG&r\rE0$TG"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    bytes_0 = b"X\xf5sFhv\x9aQy4|\xec4\xa2c\xd7L\x08\xbe\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    int_0 = -159
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, int_0, dict_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    bytes_0 = b"z\x94\nR\xedv\x99\xaf\xd9]\xe0\xbd\xdex\xceQ+ "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


def test_case_3774():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3775():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    str_0 = "@AZ;r|;H[FjlhK6K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    int_0 = 1544
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    int_0 = 209
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    str_0 = "J^)+"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


def test_case_3780():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3781():
    int_0 = 6831
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    str_0 = '\rb:o+\r"[L'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    int_0 = 165
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    float_0 = -1152.0085
    dict_0 = {}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    str_0 = '?[Q&5":f2'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    int_0 = 751
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    str_0 = "a$wxfH{\x0bqE7eb>hTg*@5"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    str_0 = ")/vl"
    bytes_0 = b"\x1a"
    bool_0 = False
    str_1 = "5dBJ.?\"H'4CnK.eS"
    tuple_0 = (str_0, bytes_0, bool_0, str_1)
    module_0.match(tuple_0, bool_0)


def test_case_3789():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3790():
    str_0 = "~tXf'zmRjR+x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    str_0 = "-E"
    set_0 = {str_0}
    tuple_0 = (str_0, set_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    complex_0 = -117.74 - 2767.551j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    int_0 = -3020
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    int_0 = -1778
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3795():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3796():
    int_0 = -1041
    list_0 = [int_0, int_0, int_0, int_0]
    bytes_0 = b"\\\x90"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    str_0 = 'B3"Sy6d"H_Y4sug<3L'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    bool_0 = False
    str_0 = "Q|oXry\r\n._5O!H*xZd"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    bytes_0 = b'S\xd5\x117n\xd1\xd8\xdeq7g\xa16T".\x90/'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    bytes_0 = b"g\t\x12\n\x9c\xad\xd1G4\xdc\xf0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    bytes_0 = b"\xc7\x06\xab\xbe\xe5\x87%\xa1E\xae\xc9\x8f"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    float_0 = 719.4399
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    str_0 = "to19b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    int_0 = -1118
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0, bool_0)
    dict_0 = {}
    tuple_1 = (list_0, tuple_0, dict_0, bool_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    bytes_0 = b'\x94\xbf\x1a+\xfb:\xda\xe5\xaa\x9a\xf6GT\n\x9eR\xa6\x9e"'
    int_0 = 168
    set_0 = {bytes_0, bytes_0, bytes_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3812():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3813():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    bytes_0 = b"M\xbc\xe4\xd5\x01\x19\xa4\x98#\xfe\xf5\xde\x81Foq\xc5\x85y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    float_0 = 72.4119
    module_0.match(float_0, float_0)


def test_case_3817():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3818():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    bytes_0 = b"\xc8\xb1"
    bytes_1 = b"\xce4\xf7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_1}
    list_0 = [dict_0, bytes_1, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    int_0 = -452
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    bytes_0 = b"\x12k\xd4\xa3\xa5/6W\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    float_0 = -1129.17
    list_0 = [float_0]
    tuple_0 = (float_0, float_0, list_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    float_0 = 1849.94214
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    int_0 = -2854
    complex_0 = -1704.025036 - 2805.3401j
    tuple_0 = (int_0, complex_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    str_0 = "Nu\t7z=i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    str_0 = "D/"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    str_0 = "*^l\tB>+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    bytes_0 = b"\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    str_0 = "ZJ}!4r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    str_0 = "~~{HJ\n&{"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    str_0 = "*i,wM"
    complex_0 = 597.4 + 1222.3j
    set_0 = {complex_0}
    dict_0 = {complex_0: complex_0, complex_0: set_0}
    bool_0 = True
    tuple_0 = (dict_0, bool_0)
    str_1 = "XK7"
    complex_1 = -3594 + 721.6344j
    tuple_1 = (complex_0, tuple_0, str_1, complex_1)
    list_0 = [complex_0, tuple_0]
    tuple_2 = (str_0, tuple_1, list_0, bool_0)
    module_0.get_new_command(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    complex_0 = 1717.3 - 61j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    int_0 = 319
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    str_0 = "|(y05\x0b"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_3839():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3840():
    float_0 = -1088.4359
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    bytes_0 = b"l\xc0\xdc\x05\nT8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    bytes_0 = b"\xeb\x02S\xa7\x1d\xd04i\x15\xdc\xf5A\x0e'S"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    str_0 = "sh\r[oq,w~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    int_0 = 1786
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3845():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3846():
    float_0 = 799.02
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    bool_0 = False
    bytes_0 = b"\xa7ZB\xbc;:)_\xc7\x98\xe5\xca"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    int_0 = -636
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    float_0 = 1038.569902
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    str_0 = " DLJJti:WI|ADm\r&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    dict_0 = {tuple_0: set_0}
    list_0 = [dict_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    bytes_0 = b"S*\xc6\xaa5\xc3\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    str_0 = "C=Uzp\nix9z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    none_type_0 = None
    bytes_0 = b"\xad\x7f\x1a\xaew\xfd\tk\x1d\xcb+"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    int_0 = -2022
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, object_0)


def test_case_3857():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3858():
    int_0 = -2861
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    bytes_0 = b"3\x1e\x18\xf0\x94\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    bytes_0 = b"\xf8\xe0|"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    bytes_0 = b"\xb8\x00i'1\xc1\x0c/\x16\xb3\xae\x8b\x9b\xec\x85\xad\xc5Q5\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    int_0 = 61
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    int_0 = -3288
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    bytes_0 = b"\xd4\xccDS\x8f?(\x88\x86V\x9a\x8d]qf\x0b%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    int_0 = -3547
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    bytes_0 = b"\xc0C\x9eG\xa1"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    bytes_0 = b"\x07\xc3\xa0\x01\x1d\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    float_0 = -4237.86181
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    bytes_0 = b""
    float_0 = 3261.7
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    int_0 = 4380
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    complex_0 = 514.03 - 1302.61878j
    none_type_0 = None
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    int_0 = 733
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    float_0 = -688.377
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    float_0 = -4869.8798
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    str_0 = "wH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    bytes_0 = b"\xaaK\x19cO\xd0\xca4\x0b\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    str_0 = "LT2'tSjh>$DU`v&z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    complex_0 = -893.438916 - 361j
    list_0 = [complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    bytes_0 = b"\xe6\xaf_u\x9f\xd9\xaf\xfa\xaf\xbf\xf7?\xb9\xb8\xe2\xdc\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    bytes_0 = b"\xb8B\xc2\x8c^H\xa5zt\x94\x031\xb3\xb7\xb9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    int_0 = 2734
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    bytes_0 = b"\x86\xd8\xef\xf3\x16\xe8c\x91Dg\x90\x15\x86\xe6A\xdc)\x9aqj"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    complex_0 = -1299.5 - 1667.29j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    int_0 = 1110
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    int_0 = 1711
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    bytes_0 = b"\x8f\x1b\x82}~\x8b\x00\xc9\xb55l.\x0bq\x08\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    bytes_0 = b"\xbc\xd7\x98\xac\\eh7K\x96\xa5wv!\xdc1\xbe\x976H"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    int_0 = -952
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    int_0 = 3008
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    str_0 = "xtZVH=H~]\\nKh0cX!"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    bytes_0 = b"\xea7zU\xc3}\xe3\xc5\xefg\x95\xca\x16`\x08\xf4\x85\xb9\x89\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    bytes_0 = b"\xe1\xcd\xc9\xeb\xd5\x98\xb2\x07\xca\x83\x1b(\x85F\x1b\xfb\xc5"
    module_0.match(bytes_0, bytes_0)


def test_case_3900():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3901():
    float_0 = -37.34242
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    str_0 = "l(#qzWg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    str_0 = "pA"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    str_0 = ">>ElNKuz\x0c"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    tuple_0 = ()
    float_0 = 1332.7
    bytes_0 = b"d]O|\xf2j\xf3bM)-h\xa1"
    tuple_1 = (float_0, bytes_0)
    set_0 = {tuple_0, tuple_1}
    module_0.get_new_command(set_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    float_0 = -618.878156
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    int_0 = 136
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    complex_0 = -1306.155727 - 600.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    str_0 = "{5fBA\x0cqI\x0b1P&+&q]\r6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    none_type_0 = None
    int_0 = -2883
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    str_0 = "0?Oy\x0cg!=!8h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    bytes_0 = b'\t\x1c\xa3/\xec\xde \xbd\xef\xaf\xe5\x1a\x80\xdd\xc6"\xb6'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    bytes_0 = b"\x8e\xe0vZV\xf5\x97\xc8(\x98\xb8\x82;\xffU?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    str_0 = "qsq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    bytes_0 = b"\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    int_0 = -2199
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    bytes_0 = b"\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    float_0 = 412.2597
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    object_0 = module_1.object()
    int_0 = 120
    set_0 = {object_0, int_0, object_0, int_0}
    tuple_0 = (object_0, object_0, set_0, set_0)
    str_0 = "m}3=r{#fwiDt\rV}s"
    tuple_1 = (object_0, int_0, tuple_0, str_0)
    bool_0 = False
    tuple_2 = (tuple_1, bool_0)
    module_0.get_new_command(tuple_2, tuple_1)


def test_case_3922():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3923():
    bytes_0 = b"\xb6\xd3e"
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bytes_0, bool_0, tuple_0, bool_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    complex_0 = 1722.5 - 1426.4795j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    str_0 = "6?K**^O:qo7a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    bytes_0 = b"r;\xe44\xec\x0e\xbd\xad\x15\x18\x1a\xd0L\xc9\t-\x10\x16"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    complex_0 = 1856.5 + 1712.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, object_0, dict_0]
    float_0 = 56.46
    tuple_0 = (list_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    float_0 = -204.2224
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    str_0 = "dU/OG>H"
    module_0.get_new_command(str_0, str_0)


def test_case_3932():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3933():
    int_0 = -2425
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    str_0 = "\rFA\n1NN$DkVswQ\\8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    str_0 = "8Qe$5O?-A%V:R"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    bytes_0 = b"\xf2\x91\x8ba\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    bytes_0 = b"\xd5\xd3\x1al~v\xb6\x8f<\xbc"
    str_0 = "7JKJ'l4s`SJ\rv/"
    list_0 = [bytes_0, bytes_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    str_0 = "`\x0b>8:"
    dict_0 = {str_0: str_0}
    bytes_0 = b"\xf5\xbaG\xad\x8d\xa7\xf2\x9f\xa5\x83^\x9d"
    tuple_0 = (dict_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    float_0 = 1663.40209
    module_0.match(float_0, float_0)


def test_case_3940():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3941():
    str_0 = "M6f"
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    str_0 = "iPIlQPt#v?VQVV2"
    str_1 = "I9y$Ol\nUu(}\r\nM}"
    str_2 = "!EEG'"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    float_0 = -2357.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    bytes_0 = b"\x19`"
    bool_0 = True
    int_0 = 569
    tuple_0 = (bool_0, bool_0, bytes_0, int_0)
    module_0.get_new_command(bytes_0, tuple_0)


def test_case_3945():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3946():
    int_0 = -1175
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    int_0 = -1765
    module_0.match(int_0, int_0)


def test_case_3948():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3949():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    complex_0 = -174.026 + 975.318915j
    module_0.match(complex_0, complex_0)


def test_case_3951():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3952():
    bytes_0 = b"\x0fc\xaeX\xc7\xf6\xb3\xfb\x9adh\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    str_0 = "/ZA}@.^lMw2{V\x0c1d\x0bh{y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    float_0 = -2825.126
    module_0.get_new_command(float_0, float_0)


def test_case_3955():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3956():
    bytes_0 = b"B"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    bytes_0 = b"wq\x07i\xac\x15w\x11\x122\xee\xef\xbb\xef$\\\\"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    bytes_0 = b"\x83\x0f\xb1\xaf\xc8\xba\xe5\x98\xb2"
    int_0 = -3399
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    int_0 = 1226
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    bytes_0 = b"\\\xdd=\xe7\x08\xaf\x1a\xb3\xf4\xd2\xcb\xa2\xe8;\x01\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    int_0 = 1396
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    list_1 = [list_0, tuple_0]
    list_2 = [list_1, bool_0, list_1]
    none_type_0 = None
    module_0.get_new_command(list_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    bytes_0 = b"\xfe7\x90"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    str_0 = '\rk"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    str_0 = "r2;Gxfg<ze*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    int_0 = -2881
    int_1 = 2740
    str_0 = "m\n"
    list_0 = [int_1, int_0, int_1, int_0]
    tuple_0 = (int_0, int_1, str_0, list_0)
    list_1 = [tuple_0, int_0, tuple_0, int_0]
    list_2 = [list_0, int_0, str_0]
    tuple_1 = (list_1, list_2)
    list_3 = [tuple_1]
    module_0.get_new_command(list_3, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    bytes_0 = b"wZ.\t\xa8\xdb\x91+\xc06\xad@\xc0\xf5\x06\x9a\x83j\x99;"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3969():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3970():
    none_type_0 = None
    int_0 = -1576
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    int_0 = 4178
    module_0.get_new_command(int_0, int_0)


def test_case_3972():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3973():
    int_0 = -2463
    module_0.get_new_command(int_0, int_0)


def test_case_3974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3975():
    float_0 = 6491.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    bytes_0 = b"\x13\xbb\xd3\xa4\xd0\x01!\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    bytes_0 = b"-\xb9\xe1W\x06\x8f+/5\x8ax\xa4\x9b\x98\xcb\x04\xdb"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    bytes_0 = b"\xf7p\x00\x05\xca\xe2\x84\xda\xac\x1a\xbd\xeb\x03\x88b:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    int_0 = 134
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    float_0 = 1506.22
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    int_0 = 4004
    object_0 = module_1.object()
    module_0.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    str_0 = "["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    complex_0 = 461.56094 - 924.6943j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    int_0 = -2061
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    float_0 = -3128.82774
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    str_0 = "_+"
    module_0.match(str_0, str_0)


def test_case_3988():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3989():
    dict_0 = {}
    float_0 = -846.0
    bool_0 = True
    bool_1 = False
    tuple_0 = (dict_0, float_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    float_0 = -2006.00044
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    str_0 = "ih!Qp0Z, \x0b_TJ"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    bytes_0 = b"\x1c\xe8\xd6rcE\xe7&\xc4K\x94\xee\xfb\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    int_0 = 2902
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    complex_0 = -1571.018394 - 655.516873j
    list_0 = [complex_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    int_0 = -2195
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3999():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4000():
    int_0 = -879
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    bytes_0 = b"h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    str_0 = '8ps JZ"U'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    int_0 = -559
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    int_0 = 3058
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    bytes_0 = b"G\xf7\x19\x86\x0e\xac\t>C\xfd\xad2'I\xbbc\x7fS<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    float_0 = -4496.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    str_0 = "$@+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    str_0 = "{"
    tuple_1 = (tuple_0, str_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    str_0 = "*gP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    str_0 = '\t\\\t#"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    bytes_0 = b"\x1b\x07\\V\x8a\xa3\xf7*\x8b\xfb\xfe\xe3\\\xc0Z\x1dv[{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    bytes_0 = b"\xc0FB\xe4\xcd+ePwU\xef"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    int_0 = -852
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    bytes_0 = b"\rm\x9apB\xa6\xd3\xe0}h\x04\xd2\rU<\x05i\x90\xcd"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    str_0 = "2][*Z?1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    int_0 = -1969
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    str_0 = ";\\("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    bool_0 = True
    bytes_0 = b"\x89}\x8dI'\xc1\xe6\x9f\x00\x9e\x1b\x98\x03\x05\x86\x08"
    tuple_0 = (bool_0, bytes_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    str_0 = 'Ux[Dv[WN8o\x0csb=~F"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    str_0 = ""
    str_1 = ">t$6NRk"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    int_0 = -860
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    int_0 = -839
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    str_0 = "bfBmGJ0(h=I|\t3UiB8nx"
    list_0 = [str_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    str_0 = "8dOjv`%\rHJ "
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    bytes_0 = b":\xf0\x1d\xdaZ\xb6-\x7f\xd60"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    str_0 = "87o\tL+&"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    str_0 = '\\II<0g/FNeu!"]2/"U'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    str_0 = "3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    bytes_0 = b"eW\x87\x1b\xb0 \xd5\x11\xb2\x00\x9a\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    str_0 = "ScN8svJ}Q:0ypg<"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    bytes_0 = b".i\x1f\xa0\xf7'\x1evX\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    bool_0 = True
    set_0 = {bool_0}
    str_0 = "\x0c50{092h>#L"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    int_0 = 295
    str_0 = "m"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    int_0 = -3420
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    str_0 = "M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    float_0 = 498.587
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    bytes_0 = b"\xc1\x93\xb5\xe34\xaa\xc1\xfc\xb3BQ \xaf\x81\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    float_0 = -3416.98397
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    str_0 = "u+|bEKH,1DtcC\x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    float_0 = 130.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    str_0 = "LNO'_V>w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    bytes_0 = b"\xbd\xc3\x89{\xadD\x93\xb0\xa9\x98"
    bool_0 = True
    bool_1 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0, bytes_0: bool_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    str_0 = "v"
    set_0 = {str_0, str_0}
    float_0 = -1575.360895
    tuple_0 = (set_0, str_0, float_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    int_0 = -2038
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    bytes_0 = b"\xa2y"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    int_0 = 112
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    str_0 = ",4Y2QT/-]lO\tpJRt\rF?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    bool_0 = False
    bytes_0 = b"b"
    tuple_0 = (bool_0, bytes_0)
    set_0 = {tuple_0, bytes_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    int_0 = 1252
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    bytes_0 = b"\x18\x8cCs\xebbr\x14\x90E@\xa3\x8d\x99\xce\x89h\x93"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    str_0 = "l5U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    tuple_0 = ()
    set_0 = {tuple_0}
    str_0 = "j"
    tuple_1 = (tuple_0, set_0, str_0, str_0)
    module_0.match(tuple_1, tuple_1)


def test_case_4062():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4063():
    str_0 = '4,}"mDx&%Fv2&V'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    int_0 = 465
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    tuple_0 = ()
    int_0 = -1801
    module_0.match(tuple_0, int_0)


def test_case_4066():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4067():
    bool_0 = False
    list_0 = []
    tuple_0 = (bool_0, bool_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    int_0 = 697
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    float_0 = -3145.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    str_0 = "0-r8@{ej+\x0bUL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    str_0 = 'P`*E"C\x0c2'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    bytes_0 = b"\x1e\xc0\xee\xb1BC\xfa\n\xcaF\n\xb6\x1fAQ"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    bytes_0 = b"}\xf7\xa8\x84"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    complex_0 = -672.038 + 741.8j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    int_0 = 3657
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    bytes_0 = b"\x07\x1f\xe6\xe3\xde\x1d\x1d\xf7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    str_0 = "c1:`Ikj/"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    bytes_0 = b"]Gn\xd3\xb7\xf4\xb7<0\x00\xef\x96\xc5\xea)p)\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    str_0 = "i=\x0cx\ntQt%#'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    str_0 = ";GR4[nS"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    int_0 = 610
    str_0 = "J~`]%Q wHbL+OCDL^y"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_4087():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4088():
    set_0 = set()
    tuple_0 = (set_0,)
    list_0 = [tuple_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    str_0 = "+-~&4J_p~(9EqD^z'<D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    complex_0 = 1031.218683 + 695.441366j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    int_0 = 541
    int_1 = 1215
    dict_0 = {int_0: int_1}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    bytes_0 = b"\x03J\x00dqa\xc1\xce\x050"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    int_0 = 436
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    bytes_0 = b"!\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    str_0 = "fz8\tNp"
    str_1 = "&h%hL"
    str_2 = "N0uKOx%(uo~w0up?\n"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4098():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4099():
    dict_0 = {}
    int_0 = 678
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    float_0 = 895.83
    tuple_0 = (float_0,)
    set_0 = {tuple_0, tuple_0, float_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    str_0 = "^O8v-KY@DC`.b\x0bhY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    str_0 = "aBKRay|N<gORx"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    str_0 = "n`E=,7T*G=b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    bytes_0 = b"\x90\xb1\x06CR9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    bool_0 = True
    float_0 = -749.50789
    dict_0 = {bool_0: bool_0, bool_0: bool_0, float_0: bool_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    str_0 = "!c\r+PJANl*:3&eE!C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    complex_0 = -562.872455 - 3199.18j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    str_0 = "2HhA6l,mpW<\r5>b,7"
    module_0.get_new_command(str_0, str_0)


def test_case_4110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4111():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    str_0 = "_-\"-IO`\x0b1dUeAp'>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    int_0 = 2495
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    bytes_0 = b"^*\x85sC^\xd3\x19\xec\x97z\xf5\x87"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    str_0 = "E;P:wv+.m.(j7xH%L\x0b[}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    bytes_0 = b"zP\x04\xc8'\xb7\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    str_0 = "jP&:"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    complex_0 = -175.302688 - 671.10537j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    bytes_0 = b"\xec\xdc\xbb"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bool_0: bool_0, bytes_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_4120():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4121():
    float_0 = 1056.63
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    float_0 = -323.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    object_0 = module_1.object()
    bool_0 = False
    tuple_0 = (object_0, bool_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    int_0 = 2354
    str_0 = 'yc"qc_'
    bool_0 = True
    tuple_0 = (int_0, str_0, bool_0, int_0)
    bool_1 = True
    tuple_1 = (int_0, tuple_0, str_0, bool_1)
    module_0.get_new_command(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    bool_0 = False
    float_0 = -1164.13
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    float_0 = 514.7615
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    float_0 = -2512.61
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    str_0 = "!gMr.p8qTda/BR#gj"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    float_0 = -2135.519772
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    int_0 = -366
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    bytes_0 = b'\x98C\xdd\xa0\x87"\xf5\xe0\xeb\xc0\xd1\xbe\xb5\x0c[\x96'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    int_0 = -3709
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    bytes_0 = b"\x99lw\xb9\x02k\xc2@\x9c\x947\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    bool_0 = False
    bytes_0 = b"Qn\xf2\xc2\xfeP\xccs\x06\xc5\xa9Y"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    str_0 = "~M#m_x:i&Z%0\t?.DByY_"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    str_0 = "zX5V?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    float_0 = 470.4
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


def test_case_4142():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4143():
    float_0 = -258.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    bytes_0 = b"\x92o\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    str_0 = "!d?FCx]Y^FS{w}mUlf_"
    bytes_0 = b"\x1c\xe9P\x88\xf6\xf3"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    str_0 = "z\rfb5)~Z0\nZ/>Y'+19"
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, object_0: str_0, object_0: str_0}
    list_0 = []
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    bytes_0 = b"\xfb\x8d\xb1\xaa\xfa\xe8\xae\x88\x0e\x06!e\xc7\xba\x06\xf1\xf5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    int_0 = -523
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    bytes_0 = b"\x82\xc8\x19\x0fw\xff\xe1\xab~%L\xc9\x06\xfb\x1a\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    int_0 = 2455
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    int_0 = 956
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    object_0 = module_1.object()
    int_0 = 1198
    bytes_0 = b"\xed\x88n|\x00+* \xc3\x94\xdfg+*"
    tuple_0 = (object_0, int_0, int_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    bytes_0 = b"\xf9\xe3\xd1"
    float_0 = 2054.0
    list_0 = [bytes_0, float_0, float_0, float_0]
    tuple_0 = (list_0, list_0, list_0, list_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    str_0 = "ZZ\rHsp:|kw6Lk}cvoee"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    int_0 = -540
    module_0.get_new_command(int_0, int_0)


def test_case_4159():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4160():
    bool_0 = True
    float_0 = 2745.98
    list_0 = [bool_0, float_0, float_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    int_0 = -5097
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    str_0 = "}=KU7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    bytes_0 = b"\xab$\xaa\xbb+C"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    str_0 = '}/167^T*L"^L;Io^BQ'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    float_0 = 1696.0
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    list_1 = [list_0, list_0, object_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    str_0 = "E"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    bytes_0 = b"\x11~\x86\xb6\xdcV"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    str_0 = 'c%8"2>cT]bScR1'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    bytes_0 = b"S\xbb\x13p\xda \x06G\xa0\xc2j"
    list_0 = []
    tuple_0 = (dict_0, bytes_0, list_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    complex_0 = 932 + 27j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bytes_0 = b'\x84]\xc6\x0b"\xcb]\xa6\xeb\x87D'
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    bytes_0 = b"\xe1#"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    int_0 = -403
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    complex_0 = 1682.124065 + 39.88j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    bytes_0 = b"@\xe0\x99\xa3\x86\x8a1\x94\xbc\xf6\xd8"
    str_0 = "u}F3\x0cd\tk\r"
    dict_0 = {str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    bytes_0 = b"\x0b2\xa5\xff\xa9`\x11\xe5C\xa7\xc1f\x86\xe6\xfe"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    str_0 = "_P."
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    bytes_0 = b".\xe9\xe4\xee\x96L\xb6p)m9`\xe6K\xf7\xea\xe3h\x8am"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    str_0 = "b@BJ"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    tuple_0 = (dict_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    int_0 = -1357
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    bytes_0 = b"\x95\xf4\x98B\xa9@\xb9\x8b\xb7\xac \xd2\x1c+ \xce"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    float_0 = 4418.27
    float_1 = 2696.6827
    set_0 = {float_0, float_1, float_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4187():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4188():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    str_0 = "|^H<aIB=q<2^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    str_0 = " 4$)Yy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    str_0 = "I!|a5<tS"
    bytes_0 = b"\xe9\xd5A;W"
    tuple_0 = (str_0, str_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    str_0 = "@BZqG&u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    float_0 = -1538.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    int_0 = 2446
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    bytes_0 = b"\xf5\x7f\x18\xb5\xce|\x014S;\xba\xe0\xf1\r"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    complex_0 = 1052 - 876.2736j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    int_0 = 855
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    str_0 = "&$\nxt:)v#\\UC\x0cMW3Cc"
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    int_0 = 510
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4202():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4203():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    int_0 = 3448
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    bool_0 = True
    str_0 = "n))Z{(c"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    bytes_0 = b"^y\x05x\xaf\x1a\x8d\xbbC"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    int_0 = 1040
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    bytes_0 = b"\xf3\xa5\x92\xc0\xb8\xb8\xd3Ko]{\xe5\xd9\xf8j\x93"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    int_0 = -2942
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    int_0 = -1546
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    int_0 = 1209
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (list_0, list_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    bool_0 = True
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    int_0 = -1052
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [bool_0, list_0, list_0, bool_0]
    str_0 = "2"
    tuple_0 = (list_0, list_1, str_0)
    module_0.get_new_command(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    bytes_0 = b"PS+25\xbf\xed\x03\n1\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    object_0 = module_1.object()
    bool_0 = False
    complex_0 = -552.35662 + 1846.339j
    list_0 = [object_0, bool_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    str_0 = "+JhE6&NKL0/"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


def test_case_4222():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4223():
    bytes_0 = b"\xea(`p\x0b1\x04m\xf6\xb6\x07N\xe4^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    float_0 = -1786.0
    set_0 = {float_0, float_0, float_0}
    list_0 = [set_0, float_0, set_0, float_0]
    complex_0 = -744.0577 + 1739.59j
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    float_0 = -3515.5396
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    list_0 = [tuple_0, tuple_0, tuple_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    str_0 = "z-uZnrVM-mXK\n2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    int_0 = 931
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    str_0 = "I,z3k2Vw>i-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    str_0 = ":P\t2u]\nAQTB/eUsA^fu\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    str_0 = "\n=P"
    set_0 = {str_0, str_0}
    list_0 = [str_0, str_0, set_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    str_0 = "lv\\\r%edj"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    str_0 = "`eb;L<"
    int_0 = 1949
    int_1 = 2800
    bool_0 = True
    tuple_0 = (str_0, int_0, int_1, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    int_0 = 522
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    float_0 = 1920.9647
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    str_0 = "Hv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    float_0 = -39.0
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    float_0 = -2355.3913
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    bytes_0 = b"\xd3\xf9r\xc9\xe3q\xfe|\x9f\x8f\xe8m$TD"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    float_0 = -671.648899
    module_0.match(float_0, float_0)


def test_case_4242():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4243():
    int_0 = -2905
    tuple_0 = (int_0,)
    list_0 = [tuple_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    bytes_0 = b"8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    int_0 = 2819
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    int_0 = 11
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    str_0 = '4@X"3<_'
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    float_0 = 1687.12
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    int_0 = 588
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    int_0 = -1312
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    int_0 = 1581
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    str_0 = "gHl:\r#/f\tu5!~wQKQ6rD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    float_0 = 1362.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    list_0 = []
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    str_0 = "z!E"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    str_0 = "&kDJGV}Q\x0b5\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    none_type_0 = None
    complex_0 = -2379.8 - 1317.3983j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    str_0 = "qlIoHZY6Y4/6,kx=\\G"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    bool_0 = True
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    str_0 = "T2?r\t)A\nJ7w"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    float_0 = 2670.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    complex_0 = 592.6 + 1727.88797j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    int_0 = -4123
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    int_0 = -933
    module_0.match(int_0, int_0)


def test_case_4266():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4267():
    complex_0 = -2366 + 1707.309j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4269():
    str_0 = "5$ds39PtR<6\\}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    complex_0 = -1198.624 + 1073.873932j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    float_0 = 64.7795
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    bytes_0 = b"\xbc\x10\xc5\x05\xff\xe7\x99\x1az\xce\x01\xa3"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    bytes_0 = b"\x81\xba\x9d\tpHL\xdcc\xa8V\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    str_0 = "Z^_]"
    module_0.get_new_command(str_0, str_0)


def test_case_4275():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4276():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    str_0 = "K"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    float_0 = -4044.730522
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [list_0]
    module_0.match(list_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    str_0 = 'R""om +sqVhM"\'tV'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    bytes_0 = b"\xa7\xb2\xa30,\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    str_0 = "5un{^;o-0VWC@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    int_0 = 2421
    bool_0 = True
    set_0 = {int_0, int_0, bool_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4287():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4288():
    bytes_0 = b"\xc6u\xda\xf3N\x9d\x92M\x07"
    str_0 = "lGB}]*Y'}"
    bool_0 = False
    tuple_0 = (bytes_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4289():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4290():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4292():
    str_0 = "}@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    bytes_0 = b")\x1b\x03\xec\xe9u9\x95V\xd5\x08\xc6\x80\x07\x87\xe3\xbb(\xfa\x15"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    str_0 = 'nkc3D1:jt [2"fc8'
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    object_0 = module_1.object()
    bool_0 = False
    dict_0 = {}
    tuple_0 = (object_0, bool_0, dict_0)
    list_0 = [tuple_0, dict_0, dict_0]
    module_1.object(*list_0, **object_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    str_0 = "+yB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    int_0 = -1318
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    bytes_0 = b"*KhT"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    int_0 = 1968
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    complex_0 = -577.352564 - 1346.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    str_0 = "%*G=5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    list_0 = []
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    bytes_0 = b"\xc75\xfb1\x0be\x1d\xfc\x0f\xdc\xaf\xf9\x17U\xf5\xceN\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    bytes_0 = b"U\xf0\xbf\x81"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    str_0 = "/zr99Y;(\\r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    bool_0 = True
    str_0 = "Z.S(WMR\x0b)VDsESBY6"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    int_0 = -990
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    float_0 = -2344.7
    module_0.match(float_0, float_0)


def test_case_4313():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4314():
    int_0 = 1690
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    str_0 = "tTIng"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    complex_0 = -394.5 + 1782.734j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    float_0 = -1993.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    float_0 = 1170.659
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    none_type_0 = None
    float_0 = -2255.82
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    bytes_0 = b"$\xb7\xcb\x18\x9d\x83\x9d\x87k1#d\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    bytes_0 = b"\xd1\xdfs\xaf\xa8\x80\x12u\x8f\xeb\x1a\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    int_0 = -2134
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    str_0 = "$\t 0~5Sb'fs_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    float_0 = 1858.675
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    str_0 = "Sjux&A(.)%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    complex_0 = 2035.47418 - 12.23653j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    bytes_0 = b"7\x94\x06\x18?\xa8"
    int_0 = 786
    bytes_1 = b"\xd0rj\x93\x83\xa5"
    tuple_0 = (bytes_0, int_0, bytes_1)
    module_0.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    complex_0 = -1223.164836 - 1739.977092j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    tuple_0 = ()
    str_0 = ""
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    str_0 = 'a*2\x0b4.m="N{cz0\n2'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    bool_0 = True
    tuple_0 = ()
    set_0 = {bool_0, tuple_0, bool_0, tuple_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    float_0 = 686.0
    module_0.match(float_0, float_0)


def test_case_4338():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4339():
    int_0 = 1821
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    bytes_0 = b"Oh+\x11\x9c\xfd\xba\xf1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    int_0 = -2517
    float_0 = -731.285
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    str_0 = "%eEJ\\0Y\r$Vjy[)C!-mR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    complex_0 = -3910.31158 - 2246.72618j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    float_0 = 1819.814815
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bytes_0 = b"\x92|\xfb\x1d&r\xa3K\x10\xe9\x18mn\x14\xe5<"
    tuple_0 = (list_0, bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    dict_1 = {object_0: dict_0, object_0: dict_0}
    module_0.match(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    complex_0 = 318 - 167j
    bool_0 = False
    int_0 = 1208
    list_0 = [bool_0, complex_0]
    bool_1 = False
    tuple_0 = (bool_0, int_0, list_0, bool_1)
    module_0.get_new_command(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    int_0 = 2195
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    float_0 = -2393.647643
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    int_0 = 1452
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    str_0 = "[nRoWM'#h{RT*"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    bytes_0 = b"\x9a\x1fE\x1b\xd7\x97\xd8.\xb4\xdb\xf9\xb0?;"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    complex_0 = 3078.3 - 1057.77543j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4355():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4356():
    complex_0 = 2354.71 + 2569.294j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    bytes_0 = b"U\xba\x82.\x13h\x80;H"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    complex_0 = 1721.8016 - 2502.48239j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    int_0 = 1100
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    int_0 = -1567
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    str_0 = "3uuTP>_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, bool_0, bool_0, dict_0]
    str_0 = "d:k6XM{Ga=\nk-l"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    bytes_0 = b"\xd9\xf4\xb9\x84\x1dG\xf6\xc3u\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    float_0 = 536.4922
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    float_0 = 932.438
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    str_0 = "pR9(1!"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    none_type_0 = None
    str_0 = "4~ U\rxs"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    str_0 = "'Ou]>=tPN\x0cXk\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    bytes_0 = b"\xd9D\xc4\xc7\xdc\\\xdd\x8dFWw\xea\x1b1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    bytes_0 = b""
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


def test_case_4371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4372():
    bool_0 = False
    complex_0 = 3538.042289 + 1422.913j
    str_0 = ""
    bytes_0 = b"\x99\x9c\xe2q\x99\x83\x9f\xcb\xdb\r\xaf\x83\\\xa0,"
    str_1 = "(gFR"
    tuple_0 = (bytes_0, str_1)
    set_0 = {bool_0, complex_0, str_0, tuple_0}
    bool_1 = True
    module_0.match(bool_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    float_0 = 1101.754578
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    object_0 = module_1.object()
    float_0 = 1807.9
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1, float_0)
    dict_0 = {object_0: object_0, float_0: float_0, tuple_0: tuple_0, float_0: object_0}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    str_0 = "E\tZUb2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    bytes_0 = b"q\x083"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    int_0 = 2687
    dict_0 = {int_0: int_0}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    list_1 = [list_0]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bool_0 = False
    set_0 = {object_0, object_0, bool_0, bool_0}
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    bytes_0 = b"\x8f\xc7A5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    complex_0 = -2624.323 + 2624.8527j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    object_0 = module_1.object()
    object_1 = module_1.object()
    dict_0 = {object_0: object_1}
    bytes_0 = b"}\xc0i\x06\xa9gJC\xf7"
    list_0 = [object_0, dict_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    int_0 = -1785
    bytes_0 = b"2\x8fN\xd2-\x04?\xef\xadc\x1e\xf4\x8b \xbf\x8e\n\x1f"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    int_0 = -3036
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4388():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4389():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    str_0 = "k>,Vg"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    int_0 = 1836
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    str_0 = ".BA"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    int_0 = 1852
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    int_0 = 1723
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    complex_0 = 1544.1 + 2348.3352j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    bytes_0 = b"g\xa7\xca\xc7\xc3\xde\x8bC"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    bytes_0 = b"7\xa5\xfd\xb0\x01s\x9b\xeb\x15\x9f\xb5\xbf;\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    float_0 = -2004.5
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    str_0 = "i~njT\x0bF5tNj7"
    str_1 = "q'R5j`"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    bytes_0 = b"\xcc\x96+\xa4bJ\x81N\xba\xe1#cs"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    bytes_0 = b"E\xf0\xcc\xfa\xee\x1a"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    bool_0 = True
    list_0 = []
    bool_1 = False
    float_0 = -1535.5298
    tuple_0 = (bool_0, list_0, bool_1, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    str_0 = "N~\x0b~v.iT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    int_0 = -1771
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    int_0 = 799
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    str_0 = "4"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    str_0 = "-i5F)Mb`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    str_0 = " /|@)NP7+*"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    int_0 = -1052
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    str_0 = "IBc_jVH7"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    none_type_0 = None
    int_0 = -2177
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    int_0 = 910
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    int_0 = 1954
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    float_0 = -146.6
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    bool_0 = False
    float_0 = 1701.785733
    dict_0 = {bool_0: bool_0, bool_0: bool_0, float_0: float_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    bytes_0 = b"\x81^%1\xc5\x85\xa3\xe7\xf3\xe3I"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    str_0 = "C=_rne>m2 1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    str_0 = "iu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    int_0 = 197
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    int_0 = -2261
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    int_0 = 1407
    bool_0 = False
    set_0 = {int_0, int_0, int_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    float_0 = -268.51
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    set_0 = set()
    list_0 = [set_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    str_0 = "%9zVA<\x0c\x0bK?abJZaC"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    int_0 = 2598
    module_0.get_new_command(int_0, int_0)


def test_case_4428():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4429():
    float_0 = 3789.66444
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    int_0 = -1775
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    float_0 = -3369.253024
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    int_0 = 185
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    str_0 = 'nYzjw6|"44\x0cr5oD+I""'
    module_0.match(str_0, str_0)


def test_case_4436():
    pass


def test_case_4437():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4438():
    float_0 = -1957.244551
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    complex_0 = 1109.34952 - 1795.67j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    list_0 = []
    module_0.match(list_0, list_0)


def test_case_4441():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4442():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    float_0 = -1283.157
    module_0.match(float_0, float_0)


def test_case_4444():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4445():
    int_0 = 2753
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    str_0 = 'f"6M<2q\n]FzCz\r42~~k'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    bytes_0 = b"}B\xf9\xd0\x00\x96d\xc6"
    complex_0 = 245.4 - 3309.6473j
    module_0.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    int_0 = 45
    complex_0 = -289 - 1679.295451j
    dict_0 = {int_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    int_0 = -683
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    float_0 = -664.5
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    float_0 = -1056.99
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0, set_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    dict_0 = {}
    str_0 = "xtH\nH"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    int_0 = 1285
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    bool_0 = False
    object_0 = module_1.object()
    dict_0 = {bool_0: bool_0, bool_0: object_0, bool_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    int_0 = -3329
    module_0.match(int_0, int_0)


def test_case_4458():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4459():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    int_0 = 918
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    bytes_0 = b"\x80\x86\x8a\x9f\xcf\xea\xf4\xd3\x02"
    bool_0 = True
    list_0 = [bytes_0, bool_0, bool_0, bool_0]
    tuple_0 = (bytes_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    bytes_0 = b"\x86S]ZQP\xc1\x8b\x95\x18>\x18D\xfe\x17L"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    int_0 = 2868
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    float_0 = -1886.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    int_0 = -1702
    bool_0 = False
    set_0 = {int_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    bool_0 = False
    object_0 = module_1.object()
    tuple_0 = (bool_0, object_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_4468():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4469():
    str_0 = "RLNVE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    float_0 = -4289.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    str_0 = "F$oN7Tn5X|"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    bool_0 = True
    float_0 = -1103.73624
    tuple_0 = (bool_0, bool_0, float_0)
    str_0 = "iH$D\t&Y=S;"
    dict_0 = {tuple_0: bool_0, str_0: bool_0}
    module_0.get_new_command(dict_0, float_0)


def test_case_4473():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4474():
    str_0 = "pk68'\tAM\x0c_f?."
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    str_0 = ";*UX7{AxOs0+^Q"
    int_0 = 3421
    dict_0 = {str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    str_0 = "I*CD"
    str_1 = "@#KLYJD("
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    bytes_0 = b"\xacem'\xb8\x98\x1b\xaf6\xbd3)\xeb#"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    int_0 = -3472
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    str_0 = '"<7F\rAb <|FNdTO'
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    str_0 = "7^q[l.~Bg_"
    dict_0 = {str_0: str_0}
    dict_1 = {str_0: str_0, str_0: dict_0, str_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    int_0 = 2276
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1, bool_1: bool_0}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    int_0 = -1196
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    bytes_0 = b"\x89\xc0\xa4j\xce\x9b\x91\x07\xc6P\x05\xd7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    int_0 = 309
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    int_0 = -70
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    complex_0 = -1127.69 + 1114.351j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    float_0 = -1208.39
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    int_0 = -1235
    float_0 = 1698.6356
    list_0 = [int_0, int_0, float_0, int_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    float_0 = -262.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bytes_0 = b"m\x05\x8c\xbc\xf8\xbc\xbc\x0fS\xa1sD.S\xceI\\\xe8\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    str_0 = "ONaR4!A4,W;"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    int_0 = 2515
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    str_0 = "pZk.4 w,#Y==`vlC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    bytes_0 = b"\x04\xedP\x87\xaf\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    str_0 = "Qz\x0bs@)F&J+j]0Vyin"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    complex_0 = 3525.03 + 2620.68929j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    bytes_0 = b"\xc2\xb3F\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    bool_0 = True
    str_0 = '4_W@5vXZ"xpE$z`'
    list_0 = [bool_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    str_0 = "; Y'Z\t}eyMq4Y/\x0bj.5&"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    bytes_0 = b"\x02\xba\xd4\x1a\xf9\xea\xa5\xe2\x03"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4504():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4505():
    bytes_0 = b"\xd7f\xb2{\x16\xf5\x1d\r\x92\xb9#\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    int_0 = -2576
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    float_0 = 3406.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    int_0 = -943
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    int_0 = 840
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    str_0 = "ilR+T O$\x0b#HVz/3$"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    int_0 = -61
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    int_0 = -973
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    int_0 = 1439
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    int_0 = 929
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    bytes_0 = b"\x1f\xa0bI\xee\x14\x14\x9a\xb5\x0f\x85\xa8\x0e\x85\xb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    float_0 = 1150.0
    int_0 = 547
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    str_0 = '"1q:>#>fuy'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    str_0 = ":B:$if#zKKW^4 \r2x"
    bytes_0 = b"\xcc\xe2'\xc7$\x861\xfaO\x84T;jI\xf9\x1d"
    str_1 = "nzjnV{"
    list_0 = []
    set_0 = set()
    tuple_0 = (bytes_0, str_1, list_0, set_0)
    tuple_1 = (str_0, tuple_0, set_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_4521():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4522():
    complex_0 = -2115 + 1837j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    float_0 = -30.38
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    bytes_0 = b'\xda"XX\xe3\x8d\xc7\xb7\xb9\xd0I\xcb\xd4J5=\xa7\xa0\xa0n'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    str_0 = " b(O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    int_0 = -344
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    float_0 = -2010.65
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    bytes_0 = b"\xe6O\x00\x83\xf52\xb0`V\x1c\xcc"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    bytes_0 = b"\xa0\x1a\x80Y\x97\xe3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    complex_0 = -2934.21 - 27.08j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    str_0 = ",dS#'?\"SYG\\dgo]0}"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    int_0 = 376
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    bytes_0 = b"\xa6\x99\x95#\xde"
    module_0.match(bytes_0, bytes_0)


def test_case_4535():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4536():
    bytes_0 = b"|\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    float_0 = -1658.27206
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    int_0 = -1169
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    float_0 = -1023.8904
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    int_0 = -2708
    module_0.get_new_command(int_0, int_0)


def test_case_4541():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4542():
    float_0 = 2764.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    bytes_0 = b"\x8d"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    str_0 = "im-r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_4548():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4549():
    bytes_0 = b"\xd6l\x1c\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    int_0 = -747
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    str_0 = "d}S$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    bool_0 = False
    str_0 = "Q>2#jJ8 nl"
    dict_0 = {bool_0: str_0, bool_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    complex_0 = -966.7275 + 1172j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    bytes_0 = b"\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    complex_0 = -889 + 2535.57j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    bytes_0 = b"\xde\x1f\x13"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    bytes_0 = b"\xec~\xeep\xabN"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    str_0 = "|0iN7Zj3LVM2CXB>"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    bytes_0 = b'o;j\xde0\xbc\xc2\xb0x\xb0y\x1b\xb8\x16\x15"\xaf\xf2\xad\xc1'
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    str_0 = "ZL|!a%`L'R;&4iW;!V=h"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    str_0 = "0j- \x0b)Py\n^=Z\x0c!kW#z-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    str_0 = "u5WhflSP&;+j~/"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    float_0 = -258.66141
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    int_0 = 312
    module_0.match(int_0, int_0)


def test_case_4566():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4567():
    bool_0 = True
    list_0 = [bool_0]
    bytes_0 = b"\x00\x0f\xb1\x04r"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    bytes_0 = b"kf\xa8\xf1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4569():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4570():
    int_0 = -1780
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    bytes_0 = b"\xad\xc0\\b-@"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    float_0 = -2565.3
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    int_0 = 1345
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    int_0 = -606
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bytes_0 = b"\xc4X\x18?"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    str_0 = "cfjNpa_g1>S"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    int_0 = -1075
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    int_0 = -1094
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    str_0 = "qeEkL"
    module_0.get_new_command(str_0, str_0)


def test_case_4581():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4582():
    int_0 = -367
    module_0.get_new_command(int_0, int_0)


def test_case_4583():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4584():
    bytes_0 = b"y&\x80\xa2&\xd33\x969S9\xa3S\xef0"
    str_0 = "0"
    bool_0 = True
    tuple_0 = (bytes_0, str_0, bool_0)
    set_0 = {str_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    int_0 = -2371
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    int_0 = -1296
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    str_0 = "T00I=57v~a/<!eP,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    object_0 = module_1.object()
    dict_0 = {}
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    bytes_0 = b"\x00\xab"
    set_0 = set()
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    float_0 = -2231.6
    tuple_0 = (float_0,)
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (list_0,)
    tuple_2 = (tuple_1,)
    module_0.get_new_command(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    int_0 = -6188
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    str_0 = "`\r#ct\nH(QQf\rEuvXuw|\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    str_0 = "H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    int_0 = 1023
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    float_0 = -2009.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    bytes_0 = b"\x7fsA\x1f\xd0\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    int_0 = -951
    bool_0 = True
    set_0 = {int_0}
    list_0 = [int_0, bool_0, bool_0, set_0]
    bool_1 = True
    bytes_0 = b"\xa3\xa1\xb1"
    tuple_0 = (set_0, bool_1, bytes_0)
    module_0.match(list_0, tuple_0)


def test_case_4599():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4600():
    int_0 = -2916
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    int_0 = -1507
    list_0 = [int_0, int_0, int_0]
    str_0 = ":FTSN"
    str_1 = "wSoH#dJ!o?vT"
    list_1 = []
    str_2 = "\x0c$~N(5V}C>@1a.6"
    dict_0 = {str_0: str_0, str_1: list_1, str_2: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    float_0 = 3335.15
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    str_0 = "P-W[3$C]b7C"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    int_0 = -2480
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    str_0 = 'p\r Jln-"}T}v'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    bytes_0 = b"\x0bRLF"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    bytes_0 = b"\x18\xd5\x95ES\xab\x03\xfd\xbb\xb07\xba\xcd\xb5\x07H\x18\xaeE\x04"
    int_0 = 2910
    set_0 = {bytes_0, bytes_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    str_0 = "_?9VO;-&n?Rin_0"
    bool_0 = False
    set_0 = {str_0}
    tuple_0 = (str_0, bool_0, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    tuple_0 = (object_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    float_0 = 1408.68991
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    bool_0 = False
    str_0 = "s<"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    float_0 = -4090.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    int_0 = -14
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    int_0 = -2093
    int_1 = -460
    list_0 = [int_0, int_1, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    bytes_0 = b"\xdb\x88\t\xe9\x8c^f\x9f\xdfE\xfe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    str_0 = "[X#\n$Vzwnn!gP<l<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    float_0 = 3714.8
    bytes_0 = b"-\xe1#E\xfd\xd3\xa7M\x0b}"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    str_0 = "[m\\~YbZZpC3@_4Sg"
    str_1 = "&M_YIej!:AzQ%II}X0"
    str_2 = "\x0bDfp6AyF=}*\x0cNl;"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    int_0 = 2761
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    bytes_0 = b"\xef\xd0\x8e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_4629():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4630():
    str_0 = "8O/3Pw3NM9\t3W#!L3\x0c^"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    int_0 = -6192
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    bytes_0 = b"\xa6\x1c)\xd2t\xe4\xef\xb6\xa1\xdfg\xda\x8a\xc9\x92\x00"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    int_0 = 22
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    int_0 = 1154
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    int_0 = -743
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    float_0 = 1196.9
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    bool_0 = True
    str_0 = ""
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    float_0 = -1164.0
    float_1 = 2211.042907
    dict_0 = {float_0: float_0, float_0: float_0, float_1: float_1, float_1: float_1}
    tuple_0 = (float_1, dict_0)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    none_type_0 = None
    list_0 = [none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    int_0 = -3400
    str_0 = "-"
    str_1 = "}}3:&zE\x0b\t"
    tuple_0 = (int_0, str_0, str_1)
    dict_0 = {tuple_0: tuple_0, str_1: tuple_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    complex_0 = 3130.899538 + 1792.87j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_4642():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4643():
    bool_0 = True
    str_0 = "h~{ri9.#jyfc{o"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    str_0 = "h0r#M+}')uh"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    str_0 = "\\Yv@S4 "
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    str_0 = "(w08M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    float_0 = -2394.03
    tuple_0 = (float_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    tuple_0 = (list_0, object_0)
    tuple_1 = (object_0, list_0, tuple_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    str_0 = "`$M\\N"
    int_0 = -2118
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0]
    list_2 = [list_1]
    module_0.match(list_2, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    str_0 = "I09W#87.R"
    list_0 = [str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    int_0 = -960
    module_0.get_new_command(int_0, int_0)


def test_case_4654():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4655():
    bytes_0 = b")\x0bL\xdb\xa2C \x04\xe1\x91\xf4\xeej\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    str_0 = "e&O0yvP~;kuds1W4 O"
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    str_0 = "u/'q\"Kz\\"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    int_0 = -3008
    module_0.match(int_0, int_0)


def test_case_4659():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4660():
    int_0 = -455
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    complex_0 = 567.44524 + 1558j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    float_0 = 2942.1889
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    str_0 = "K\x0beA"
    str_1 = "/!yBcMAz=,]EWSy&y|9>"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    bytes_0 = b"\xbb\xb0\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4666():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4667():
    bytes_0 = b"!/."
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, bytes_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    int_0 = -268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    bytes_0 = b"4\xdd\x8f\x9b\x85lu!\xbb=\x01\xcc\xe4\x00\xb9\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    float_0 = -3197.94492
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    float_0 = 425.29
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    bytes_0 = b"\xccmA\x11\x16\xbb\xcd!8\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    str_0 = "t=z\t7D1aiKd0UN\x0cy}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    float_0 = 2064.15
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    int_0 = -1309
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    float_0 = 110.481033
    tuple_0 = (float_0,)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    str_0 = "zJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    str_0 = "E"
    complex_0 = -812.26 - 1235j
    list_0 = [str_0, complex_0, str_0, complex_0]
    tuple_0 = (complex_0, list_0)
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    int_0 = -823
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    float_0 = -1823.0684
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    float_0 = 275.1894
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    str_0 = '"FroV;S6V F8|kY^\n'
    list_0 = [str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    float_0 = -114.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    bool_0 = False
    bytes_0 = b"X\x03\xf6\xd5\xd7\xd8\xd4"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    int_0 = -3299
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    int_0 = 15
    int_1 = 2605
    tuple_0 = (int_0, int_1)
    bytes_0 = b"_U"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    bytes_0 = b"\xdd\xe7\x9bA\x16\x95_\xd3\x1c|K\x06\xd6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    bytes_0 = b""
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    str_0 = "_t\tunb'8FeV%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    str_0 = "e0J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    str_0 = "{2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    set_0 = {tuple_1}
    bytes_0 = b"S\xbd\x11\x96xp\xdd"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    int_0 = 811
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    str_0 = "E6iYeD~Gy"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    int_0 = 1509
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    bool_0 = True
    float_0 = -2438.560645
    set_0 = {bool_0, bool_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = ""
    dict_0 = {str_0: list_0, str_0: list_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    complex_0 = 2033.34 - 216.1809j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    bytes_0 = b"\xd8\xff\xd3*\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    str_0 = "H}_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    str_0 = "'T*a}clrYQHl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    str_0 = "8SR4g?M=>jswxpN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    float_0 = 1167.4491
    bytes_0 = b"{\xd1`\x8c7m?"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    float_0 = -3450.29706
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    float_0 = 2826.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    str_0 = "n1\r #"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    bytes_0 = b"\xbcb\x0f\xaeH\xdb\x1b|\x87\xeec\xab\x92\xf30D\xa9\xd2\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    complex_0 = -282.334 - 2481.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    str_0 = "2In.U 2-KF8^`="
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    str_0 = "^4,tf5MV U|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    none_type_0 = None
    float_0 = -2511.36
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    int_0 = -33
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    bytes_0 = b"Z0\xe4\x15\xfa\xeap\xd4\xeew"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    str_0 = "r]GO^\tRug'Q[BX"
    dict_0 = {str_0: bytes_0}
    module_1.object(*list_0, **dict_0)


def test_case_4721():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4722():
    bool_0 = True
    bytes_0 = b"\x04\xfd\xda\xd3\x00\x87]"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    float_0 = 1269.10602
    list_0 = [float_0, float_0]
    tuple_0 = (list_0,)
    str_0 = ")<\txm h.4,5GON\nHBwaJ"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    int_0 = -1512
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    str_0 = '?Ld\x0c\t ti+"'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    int_0 = -65
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    str_0 = "m-a"
    tuple_0 = (set_0, str_0, str_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    float_0 = 1500.94
    set_0 = {float_0}
    list_0 = [set_0]
    tuple_0 = (float_0, set_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0]
    complex_0 = -1390.839 + 537.2385j
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    int_0 = -275
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    str_0 = "_rr"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    bytes_0 = b"\x16\xf8\xfcb\x92\xa3\xff\x8fl\x1es\xe1\xf3\xd3R\xcbQ\x86;\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    bytes_0 = b"\x13H\xc7a"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    int_0 = 1142
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    bytes_0 = b"\xed{x\x81\xbe\xf2\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    bytes_0 = b")\xae\xf0\xbd\xda\xdf\xa0\x8d5\xea\\\x7f\xd7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    bytes_0 = b"\x7ff\xe4p"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    int_0 = -2674
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    str_0 = "%q9#kS%:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    bytes_0 = b"\r\xf0\x8a\xf8\x8d\x10\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    bytes_0 = b"\xeed\xd4w\x11\xc2\xf7\x17\x83[\x17\xb7U\xf7\x00S"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    str_0 = "i\x0bA>,t3kBT6 "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    str_0 = "cbeR\nBUAR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    bytes_0 = b"\xd2\xe4\xb0\xd6\x8e \xa5W\xcf\xe8\x0f\xe0\xfa\xe1\xb5\xd0\xca\xc5A\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    complex_0 = 523.7201 - 1847.854j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    str_0 = "%'YsQG|+I(kiqeA]SNOP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    bytes_0 = b"A]@\xa1\xd7\x14;\x9c\xc8#&\xd3\xd3\x12\xb9br=\xfc"
    bool_0 = True
    set_0 = {bytes_0, bool_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    str_0 = "Sd>pH5H\\\n\x0b6!]_6x_[E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    int_0 = 50
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    complex_0 = -1574.148 + 693.646j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_4755():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4756():
    int_0 = -2108
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    str_0 = ">/?w+)5*|PX#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    bool_0 = False
    module_1.object(*bool_0)


def test_case_4759():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4760():
    int_0 = -2686
    list_0 = [int_0, int_0]
    str_0 = "<\x0c"
    dict_0 = {str_0: str_0, str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    int_0 = 188
    module_0.match(int_0, int_0)


def test_case_4762():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4763():
    str_0 = "P$qM,Un;x%3}!BW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    float_0 = 255.0156
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    float_0 = -724.521498
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    float_0 = -1322.41
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    int_0 = -653
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    int_0 = 677
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    str_0 = "\x0b\nH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    float_0 = 367.746
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    str_0 = "%JoFjKJ.f$Kb$_x~9zX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    int_0 = -1240
    module_0.match(int_0, int_0)


def test_case_4773():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4774():
    bytes_0 = b"I\x9e/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    int_0 = -2819
    bool_0 = True
    bytes_0 = b""
    tuple_0 = (int_0, bool_0, bytes_0)
    bytes_1 = b"\xbf\xa6\x05\x13\xcb\x88\xe2"
    module_0.match(tuple_0, bytes_1)


def test_case_4776():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4777():
    float_0 = -1135.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    bytes_0 = b"\xa1\x87\x9b!\x8fq$\xf6>J\xd0\x99\xdb\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    str_0 = "(?3sbVER\x0b5{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    int_0 = 227
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    str_0 = "rRYz9b\ne=d$*+vb$oSl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    int_0 = -1025
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    int_0 = 3409
    bool_0 = True
    tuple_0 = (int_0, bool_0, int_0, int_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    bool_0 = False
    str_0 = "t_kl\r6*#jzYaG"
    list_0 = [str_0]
    tuple_0 = ()
    tuple_1 = (bool_0, bool_0, list_0, tuple_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    str_0 = "4Lq.jzxP-9:F;="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    int_0 = -43
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    int_0 = 784
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_4791():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4792():
    float_0 = -112.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    float_0 = -1733.433694
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    none_type_0 = None
    float_0 = 1788.6
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    bytes_0 = b"\x1e\x0b\xf6Aj"
    set_0 = {bytes_0, bytes_0, bytes_0}
    str_0 = " d=9{jY1I)1.="
    bool_0 = False
    tuple_0 = (set_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    str_0 = "$-]bT`P)z6XhuW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    float_0 = 2208.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    bytes_0 = b"\xb4*\x9d\xa2\xfca@\xfa_,\xfa\xaa\x7f"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    bytes_0 = b",\x1b\x99\x0cd\n|\xeep\xa1\xd7\x8e#R\xa5\xa4[t\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    complex_0 = 2271.41 - 1055.4683j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    bytes_0 = b"\x1c\x180\x06\xb8wF\xd2\xe1\x02a\x96A\x8b6\xf2\xdc\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    float_0 = 3496.4459
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    int_0 = 583
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    bool_0 = False
    complex_0 = 596 + 2964.515j
    tuple_0 = (complex_0, complex_0)
    tuple_1 = (bool_0, bool_0, tuple_0, complex_0)
    set_0 = {tuple_1, tuple_1, tuple_1}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    str_0 = "(rl}*yA_4]O6JkrF{XO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    bytes_0 = b"@\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    bytes_0 = b"w>\xd8\xf5\x01o\xd7\x82\xfff\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    str_0 = "eo\t+`*u8@,p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    str_0 = "imcJ|zr)*P`j1K"
    module_0.get_new_command(str_0, str_0)


def test_case_4811():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4812():
    int_0 = 2080
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    bytes_0 = b"\x7f\xd9\xe1q^\xe4\x93)\x12\xc5\xfc:(\xa8\xa5\xdf\xcc{5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    str_0 = "2E>#Ts%L?\nDtTQmi_:1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    complex_0 = 1670.92898 - 40.21667j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    int_0 = -793
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    bytes_0 = b"\xec\x91\xb3\xf3]\x9fS\xa0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    bytes_0 = b"\xcc*\x07\x01\xa7\xa7\xdf\xd6;\x08\xdf\xb93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    bytes_0 = b"\xbd\xfdVG*\xe1\xbc\x85m\xf9\xad\xd3\xa6\x8f%~\xc6Z"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    int_0 = 2443
    tuple_0 = ()
    tuple_1 = (int_0, int_0, tuple_0)
    bool_0 = True
    list_0 = [tuple_1, tuple_0, bool_0]
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    int_0 = -2378
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    str_0 = "RG!Wyg,b'V</<5o["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    int_0 = 36
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    int_0 = -1739
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    int_0 = 366
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4831():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4832():
    str_0 = "@kka"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    str_0 = "K,5IA&n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    str_0 = "7e\nG4:w+{TY?'p^("
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    str_0 = "tR/20mxbS~_9\r="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    bytes_0 = b"<\x90>\x1aAY\xe5[\x0e\xfe\xf1\x19"
    tuple_0 = (bytes_0,)
    complex_0 = 902.5 - 1962.6275j
    module_0.get_new_command(tuple_0, complex_0)


def test_case_4838():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4839():
    str_0 = "yE?{A_~$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    int_0 = -2350
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    int_0 = -1381
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    bytes_0 = b"\xb5\x16\xad-, \x1a\xccx"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    str_0 = "nlzp'4*60IJf=5g\x0bAFy"
    module_0.match(str_0, str_0)


def test_case_4847():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4848():
    bool_0 = True
    set_0 = {bool_0}
    complex_0 = -2600.1 + 4203.62611j
    tuple_0 = (bool_0, set_0, complex_0)
    list_0 = [tuple_0, set_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    list_0 = []
    bytes_0 = b"\xb59\x01\x8dX"
    str_0 = '66v"sz`hR|uW\\H !:Id\n'
    bool_0 = True
    tuple_0 = (list_0, bytes_0, str_0, bool_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    int_0 = 2086
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    complex_0 = -1729.5 + 1387j
    list_0 = [complex_0]
    list_1 = [list_0, complex_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    bytes_0 = b'\xd6\x08]]Mk\x9f0F\xe9\xae\xd5\xd2n"w'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    float_0 = 2106.662
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    bytes_0 = b"[1\xea\xe1\xcf\xe0k\x8d!\xbe\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    str_0 = "! .U,<(:G\x0bxicK\x0b0S8^^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bytes_0 = b"L\xc1\xe8x\xc4\x04\xf9\x86\xf7\x11r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    float_0 = 558.0
    float_1 = 3560.0
    set_0 = {float_0, float_1, float_1, float_1}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    int_0 = -488
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    int_0 = -1299
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    bytes_0 = b"\xd3\xf0\xbf}\x80\xc1\xb0\xe4X\xb1"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    object_0 = module_1.object()
    str_0 = "&W^v@2w\\b\\lD"
    list_0 = [object_0, str_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    int_0 = 265
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    float_0 = 2417.28
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    int_0 = 1652
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    complex_0 = -771.093085 + 1771.990674j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    str_0 = '?(woE(4^K9\r;\tt"P4\\'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    str_0 = "xtP\t* \x0bI\n#gepx>3|*]"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    int_0 = 455
    complex_0 = -2592.709 - 1522.57j
    set_0 = {int_0, complex_0, int_0, complex_0}
    tuple_0 = (set_0, set_0, int_0, set_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    complex_0 = 595.2604 - 3672.4j
    dict_0 = {complex_0: complex_0}
    complex_1 = 532 - 820.19j
    tuple_0 = (complex_0, complex_0, dict_0, complex_1)
    str_0 = "@`OB;/k"
    bool_0 = False
    tuple_1 = (tuple_0, str_0, bool_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    float_0 = -1974.1445
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    str_0 = "]xIbS.s!26}G9C#_\x0c;*j"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    str_0 = "jVX>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    bytes_0 = b"\xf0\xa5;ew\xbe\xf9v\xe5\x1cHtS\x04t\xaa\xe4\x83|\x99"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    float_0 = -2672.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_4879():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4880():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    bool_1 = False
    tuple_1 = (tuple_0, tuple_0, bool_1)
    float_0 = -1016.240804
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    float_0 = -1862.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    int_0 = -391
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    bytes_0 = b"\xc4$\xec\xb0\x85\xfdx\\\x1fV"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: set_0, bool_0: bool_0}
    list_0 = [dict_0, set_0, bool_0, set_0]
    int_0 = 3423
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    str_0 = "B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    bytes_0 = b"SV\xfe\x105\xff7\x89\xd3\xfb\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    str_0 = "qz"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    str_0 = "6Rt."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    none_type_0 = None
    int_0 = -2766
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4891():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4892():
    int_0 = 382
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = []
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    str_0 = "F^pGQ$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    int_0 = 395
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    bool_0 = True
    int_0 = -2341
    set_0 = {bool_0, bool_0, bool_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    bytes_0 = b"\xad9\x07\xbb=~\xfa\xc3\x97\x8c\xb6\xc1\xa8\x80\x1c\xa0"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    float_0 = 4812.891
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    str_0 = "#~\rvEiF%k\r3r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    float_0 = -2737.699212
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    int_0 = -405
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    float_0 = 2491.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    float_0 = -502.8833
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    str_0 = '/nH-?VO80MJoy(`"qL<'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    str_0 = "}z_Oo;Ico"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    int_0 = -3022
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    complex_0 = 2257.414 - 549.02807j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    bytes_0 = b"~\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    str_0 = '="\x0bKCZX'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    str_0 = "UB`R7b:/:F\n!S\rS},"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    bytes_0 = b"<A"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    int_0 = 1138
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    str_0 = "mEPoSDr;'0?\tpPgJm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    str_0 = "J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    str_0 = "/:!.d\x0b &"
    float_0 = 441.349738
    tuple_0 = (str_0, str_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    none_type_0 = None
    bytes_0 = b""
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    int_0 = 993
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    int_0 = -1350
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    str_0 = "0YCR#kx"
    set_0 = {str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    int_0 = 4
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_4929():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4930():
    int_0 = 8
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    bytes_0 = b"R\xc4W\xa6\xb6\xfa\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    bytes_0 = b"5_\x15\x17\xfd\xc5\xb8X\xd4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    object_0 = module_1.object()
    bytes_0 = b"P2L\xfa\xbb\xe6\x8c\x1d"
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    int_0 = -3555
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    float_0 = 387.88795
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    str_0 = "([~`$"
    tuple_0 = (str_0,)
    str_1 = "fYf|\x0c<#OmyH[TZ\x0bA"
    module_0.match(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    int_0 = 810
    bytes_0 = b"1\x9e\xc9G\xaez\x95\xd6\xa4\xc0]\x7f\xc7\x90\x9b\xb0\x8a/"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    int_0 = 989
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    bytes_0 = b"9\x19s"
    list_0 = [bytes_0]
    list_1 = [bytes_0, bytes_0, list_0]
    str_0 = "[bKI]NT0$;!O2T!"
    tuple_0 = (list_1, str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    bytes_0 = b"\xa7\x88\x01n\xc2\xac\xb8\xfef\x83\xa7\t\t'5\xfc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    int_0 = -3307
    bool_0 = True
    module_0.match(int_0, bool_0)


def test_case_4943():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4944():
    bytes_0 = b"\x93\x06"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4945():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4946():
    int_0 = -2327
    bytes_0 = b"h2\x88"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    str_0 = "/Jpr-h&"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    str_0 = "e nH"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


def test_case_4949():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4950():
    float_0 = -1922.94
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0, bool_0]
    str_0 = "JsH9l\x0b^{$"
    dict_0 = {str_0: list_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    float_0 = 4085.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    str_0 = "C'=wVM\\LY%Q;3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    bool_0 = False
    complex_0 = 1339.793 - 1019.923j
    list_0 = [bool_0, bool_0, complex_0, bool_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    none_type_0 = None
    complex_0 = -1004.456662 + 952.2j
    set_0 = {complex_0, complex_0}
    tuple_0 = (complex_0, set_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    str_0 = "\t]b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    int_0 = 331
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    int_0 = 1593
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    int_0 = 2503
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    str_0 = "`mk\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    int_0 = -2318
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    int_0 = -2191
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    dict_0 = {}
    bool_0 = True
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    int_0 = 13
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    bytes_0 = b"@\xcbG+~\n\xa5\xc4\x02Y\x1d"
    int_0 = 31
    dict_0 = {bytes_0: bytes_0, int_0: int_0, bytes_0: int_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    complex_0 = 1245 + 358.910036j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    bytes_0 = b"\x17&\xa1\xb3\xf1\x02\xaa\xa38\xb3iO]\n\x15a\xb4\xb0."
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    bytes_0 = b"\xaa\x85\x00\xa7\xe3n9h\xd1\xab\xab\x93ns\x07\xd0\xfdkf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    bytes_0 = b'S}.\xc6T\xdc\xdf\xe2\xb5"\x01\x89'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    float_0 = 1176.053467
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    bytes_0 = b"!c\xfd\xeb\xd5\xad"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    bytes_0 = b"K\xe9\x90$\xc5\xaf<\xe1W\xd5\xe4\xc8\xfa9\xc9*:\xd21\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    bytes_0 = b"\xce\xd5\xc9\x05\xe6a\xba\x94\xda\xb2\xab;;\xad\xcd_\x03\xa0[\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    bool_0 = False
    bytes_0 = b"\xf0\xf1\xac\x91\x8cTw\xe5\x15"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    str_0 = "8ar!_d[A8@BK"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    complex_0 = 1100.57 - 229j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    set_0 = set()
    bool_0 = True
    tuple_0 = (bool_0, set_0)
    bytes_0 = b"C\xa0\xf9\xf1\x1b\x9f\xfd{A\x92\x08tB\xe3\xaf]\xe9\xb7\xdf\xd4"
    tuple_1 = (set_0, tuple_0, bytes_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    bytes_0 = b"q\xdc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    float_0 = 594.1
    set_0 = {float_0, float_0}
    bytes_0 = b"A\x95\x061L\x98\x94\x00\xb3q\xd7\\Q\x0cx\xb9;\xe5"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (set_0, bytes_0, set_0, list_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    int_0 = 820
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    float_0 = 526.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    str_0 = "n[_(?+#}LK3{V:\n"
    set_0 = {str_0, str_0, str_0, str_0}
    str_1 = ">;\\\\&n~E"
    complex_0 = -511 + 1345.9752j
    int_0 = 114
    tuple_0 = (set_0, str_1, complex_0, int_0)
    module_0.match(tuple_0, tuple_0)


def test_case_4988():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4989():
    str_0 = "%x "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    str_0 = "-"
    int_0 = 2295
    tuple_0 = ()
    tuple_1 = (str_0, int_0, int_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    str_0 = "\rAU"
    float_0 = -283.18815
    str_1 = "Vd\n4sIxDs'.Ij5=z'E5"
    str_2 = "wG+mu"
    dict_0 = {str_0: float_0, str_0: float_0, str_1: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    int_0 = -384
    set_0 = {int_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


def test_case_4993():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4994():
    int_0 = 1473
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, bool_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    set_0 = set()
    str_0 = "\r(["
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: str_0, bool_0: set_0}
    tuple_0 = (str_0, bool_0, dict_0, dict_0)
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    float_0 = 1907.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    int_0 = -1029
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    str_0 = "Qai"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    float_0 = 2478.23453
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    float_0 = -2263.953584
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    int_0 = 2555
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    int_0 = 3206
    float_0 = -406.7
    dict_0 = {int_0: float_0, int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_5005():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5006():
    bytes_0 = b"\xd9\x0fA\xf3g\xa1*\xb5\xdc\x1fh"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    float_0 = -455.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    int_0 = 1774
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    str_0 = "wx+QnOwf\no:$[J3f3B~"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    str_0 = "i9q!D4fr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    bytes_0 = b"l}ty\xc2\x91"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    int_0 = -877
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    float_0 = 738.835
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    bytes_0 = b"\x0e\x92\x93#g\xe0\x94\xbf\x18\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    str_0 = "`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    complex_0 = -3249.29 - 187j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    int_0 = 3454
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    complex_0 = 2454.307 + 3556.449012j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    float_0 = 5088.85233
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    complex_0 = -3663.845016 - 44.839j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    bytes_0 = b"\x1f|Z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    str_0 = "BzaosTYK(;Tk9vq7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    bytes_0 = b"P\xed\x0f\x1c34s\x99k?\xf0{m\x01\xe50"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    int_0 = 2245
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    bytes_0 = b"poo\xbfs\x02\x8d\xdb\xbf\xf8_xi<s]"
    module_0.match(bytes_0, bytes_0)


def test_case_5029():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5030():
    int_0 = 884
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    str_0 = "Vn'r5;"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    float_0 = -3129.336499
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    int_0 = 475
    str_0 = "!R&Ts17/!,bK"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    str_0 = "Yuu&/N"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    int_0 = -395
    str_0 = "'"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    float_0 = -1881.96174
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    int_0 = 1707
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    int_0 = -488
    set_0 = {int_0, int_0}
    str_0 = "&eYv\r~db"
    list_0 = [str_0, set_0, int_0, int_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    int_0 = 1579
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    bytes_0 = b"k\x94"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    bool_0 = True
    complex_0 = 398.2786 - 1657.1j
    dict_0 = {bool_0: complex_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    bytes_0 = b"iT"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    bytes_0 = b"\x16\x1c\x8b/\x08\xe2\xf16\x17\x87\x97\xc4"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    bytes_0 = b"\x07l>\xc040\x7f"
    int_0 = 1567
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    str_0 = "WB?c"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    bytes_0 = b"\x93\x03\\K\x88\xc4\xa3]\xceb\r\x00\xdb-\x8fb(\x0e\xcaL"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    str_0 = "]|p'SBamx"
    module_0.match(str_0, str_0)


def test_case_5050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5051():
    str_0 = "HryJ(Daw1A/c<-P`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    str_0 = "B=B:MLJt"
    str_1 = "Oq[^*7w@}X8R"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    bytes_0 = b"g\x94w?\x05\x8d\x1d\x92(\x14v\x17\xe0\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    str_0 = "2/X$*+l?'b1V\\j"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    bytes_0 = b"\xe8\x82\xb2\xde.\x15\x11R\xe1L\x0f}\xf8\xbd\x92\x95\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    str_0 = "1K)Yb\r"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    int_0 = 2374
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_5063():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5064():
    bytes_0 = b"w\r\xf7\x9c3U"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    str_0 = "qXpDI8$xY|!O!jKgw9\to"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    int_0 = 699
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    int_0 = 2364
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    bytes_0 = b")5\x90R\x80\xab\xe77\xce\x86\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    bytes_0 = b">"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    bytes_0 = b'\xc54q\x00;\xe3\x9c"\xc1\xbe\r?F\xfb\xa4\xc0\xbd\x1f'
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0]
    module_0.match(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    int_0 = 1857
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    str_0 = "\tY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    int_0 = 134
    str_0 = "_UX"
    float_0 = -586.252
    tuple_0 = (int_0, str_0, float_0, int_0)
    module_0.get_new_command(tuple_0, float_0)


def test_case_5076():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5077():
    complex_0 = -3137.81004 + 2399.31j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    str_0 = "\x0c7Ar0$`F7Ig{l"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    bytes_0 = b"\xf0\xc5\x8b@\x91Q\xa9\xc4\xea\xdd\x18"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    int_0 = -246
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    bool_0 = False
    int_0 = -1845
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [bool_0, bool_0, dict_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    str_0 = "2^!*FHm+ix\t~Dz\t`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    bytes_0 = b"\xd2\x04\xa57f>s\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    float_0 = 82.54
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    str_0 = "nlHojn='cGp~:r:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    bytes_0 = b"`HV\xb9\xd0?\x81%C]\xdfL\xefi\xc1\x90\x05"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    float_0 = 1964.82
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    str_0 = "VvIc/;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    list_0 = []
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    complex_0 = -2171 + 318.297226j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    int_0 = 465
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    int_0 = -2822
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    str_0 = 'b\t7Y$"3CF-I_QI7a)hU!'
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


def test_case_5095():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5096():
    complex_0 = -2402.086428 + 814.001348j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    float_0 = -1592.74
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    int_0 = 1369
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    int_0 = 3595
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    object_1 = module_1.object()
    dict_1 = {object_0: dict_0, object_1: dict_0, object_0: object_0}
    module_0.get_new_command(dict_1, dict_1)


def test_case_5101():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5102():
    int_0 = 1700
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    float_0 = -1571.32298
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    str_0 = "K+56\x0c%u*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    complex_0 = -751 - 4125.33087j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    bytes_0 = b"$\x8aQ\x12\x91*\xef\x88\xa3g\x93P\xbcHa!\x07\xc1O\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    str_0 = "?hnASxjQwrL^L9,?W^9B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    complex_0 = -1575.55 - 1590j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    str_0 = "c_43g[[0Ks9T-BcS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    float_0 = -2532.28
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    bytes_0 = b"\x9dBE\xc8\xe5oT\xb7+\xdb?)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    float_0 = 1839.1
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    float_0 = 282.622
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = False
    float_0 = 3151.0
    tuple_0 = (bool_1, list_0, float_0, list_0)
    bytes_0 = b"\x83\n2\x05\xd9\x7fc\xf2\xb4k\xd9"
    list_1 = [list_0, tuple_0, float_0, bytes_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    str_0 = "9?qZr>]ne^N\x0b1b(l5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    int_0 = 302
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    float_0 = 37.635652
    module_0.get_new_command(float_0, float_0)


def test_case_5119():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5120():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    str_0 = "?rnIEj%"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    bytes_0 = b"\x81\x81vM\x01\xf0\xe0\xaa\x16\xbc\x1c\xd6\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    int_0 = 2468
    bool_0 = False
    dict_0 = {int_0: int_0, bool_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    int_0 = -715
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    float_0 = 1431.306
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    bytes_0 = b"\xcb\xa5\xbc\xc9\\\xffqwQ!\xb3\x1b\xfa8?D\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    int_0 = -2130
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    int_0 = -653
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    int_0 = -1914
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    int_0 = -1690
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    bool_0 = False
    bytes_0 = b"\x91\x91R**{\xfe\xb8\xbas\xcdA=\xfd\x9e\xb4"
    dict_0 = {bool_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0, bool_0: bytes_0}
    tuple_0 = (bool_0, bytes_0, bytes_0, dict_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    complex_0 = 3132.71021 - 583j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    bytes_0 = b"\xf8\xbaXs\x9c\xc3\x82KI\xa9\xf1\x1f\xee\xb7$|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    int_0 = 2428
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    set_0 = set()
    int_0 = -3723
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b"\xa1\xb9\xb3.\xde\xb7\xc9\xf9v,Y\xe4U%"
    str_0 = 'bTq_>RuH"`'
    list_0 = []
    tuple_1 = (tuple_0, bytes_0, str_0, list_0)
    tuple_2 = (int_0, tuple_1)
    module_0.get_new_command(set_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    complex_0 = 450 - 5113.538702j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    str_0 = "[%J+Afpx\x0bM7d\tfE"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    int_0 = -3793
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    complex_0 = 1793.09552 + 38.998861j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    str_0 = "gR3qvx(unXR7"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    str_0 = "Z5_R =o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    int_0 = 869
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    float_0 = -2261.46
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    int_0 = -1707
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    str_0 = " i<bYyk8\tx[A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_0: bool_1}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    str_0 = 'lnV3E@A~ |e!"Tt \r/cs'
    str_1 = "{"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


def test_case_5150():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5151():
    int_0 = -1309
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    int_0 = 769
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    float_0 = 360.1467
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    bytes_0 = b"\xe3(\x8dz\xab\xe8x\xa2\x0e2\xf5y\x8069\xd0\xc2\x8c\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    bool_0 = False
    none_type_0 = None
    set_0 = {bool_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    float_0 = 770.38
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    bytes_0 = b"\xfb\xe1\xb1\xf7\x1c|0J#\xda\xb9\x15\xd1\x8f/\x93y\xc5\xdb\xdf"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    bytes_0 = b"\xe1S\xcc"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    int_0 = 5342
    module_0.get_new_command(int_0, int_0)


def test_case_5160():
    pass


def test_case_5161():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5162():
    str_0 = "v<<p6<CG<$"
    bytes_0 = b"\xa2\x81"
    bool_0 = False
    tuple_0 = (str_0, bytes_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    str_0 = "Hnx\\),NU8(I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    int_0 = 1603
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    float_0 = -1440.73641
    list_0 = [float_0, float_0, float_0]
    tuple_0 = (float_0, list_0, list_0, list_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    complex_0 = 2361.556321 + 527j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    int_0 = 616
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


def test_case_5170():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5171():
    bytes_0 = b"\xc1(\xeb\xef\xa4:<h~\xf6\xbcm\xaa"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    str_0 = "UEU3GKIJ2Q%+J~Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    complex_0 = -168 - 322.97537j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    bool_0 = False
    complex_0 = -686.15 - 404.17j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    complex_0 = 76.7472 - 198.466j
    module_0.get_new_command(complex_0, complex_0)


def test_case_5176():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5177():
    str_0 = "\n|rh\n7x1O%?>F@cnWR"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


def test_case_5178():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5179():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    str_0 = "\x0bBS\nM8\nV3uy\t$.L9i^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    int_0 = -36
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    tuple_0 = ()
    int_0 = 1311
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    str_0 = "FU7Xsyw{GV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    float_0 = 1579.2
    module_0.match(float_0, float_0)


def test_case_5186():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5187():
    str_0 = '0R=X[ E>f"K4W'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    int_0 = -96
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    float_0 = 1584.3
    complex_0 = -1068 + 1002.973523j
    module_0.get_new_command(float_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    int_0 = -3503
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    str_0 = "w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    str_0 = "8K$m}X`)e"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    bytes_0 = b">\xceN\x7f<!a\xc8\xa688\x9aS\x8c\xb2a\xfaA"
    list_0 = [bytes_0]
    object_0 = module_1.object()
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    float_0 = 367.55
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    str_0 = "s{=$RFa"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    int_0 = 429
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    float_0 = -889.928451
    list_0 = []
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    bytes_0 = b"\x81\xdd=\xb0\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    int_0 = 65
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    int_0 = -1312
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    str_0 = "cu.?G}:-uA\x0bPvM_w"
    str_1 = "g@yy`R!Ox"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    float_0 = -3046.24
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    int_0 = -2048
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    bytes_0 = b"\xf0\xffn \xb2\xfd\x83\xddZ\xc6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    int_0 = 2382
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    float_0 = -3784.3324
    module_0.match(float_0, float_0)


def test_case_5208():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5209():
    bytes_0 = b"\xa3\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    bool_0 = False
    str_0 = "&"
    module_0.match(bool_0, str_0)


def test_case_5211():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5212():
    float_0 = -420.687055
    tuple_0 = ()
    str_0 = ""
    dict_0 = {float_0: float_0, float_0: tuple_0, str_0: str_0}
    int_0 = -83
    tuple_1 = (float_0, tuple_0, dict_0, int_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    str_0 = "<\x0b[]!F#Rd>I2nr:LUzL>"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    bytes_0 = b"\xe4%G\x12\xaf\x177\xfb\xa3\x0e\xc9D`\xd2j\xa91\xa4\xda\xb2"
    int_0 = -1287
    dict_0 = {}
    tuple_0 = (bytes_0, int_0, dict_0, bytes_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    complex_0 = 2968.7593 + 2220.8795j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    int_0 = 1387
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    int_0 = -2975
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    int_0 = -1497
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    int_0 = 3819
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    int_0 = -3116
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    int_0 = 3154
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    str_0 = "qA$}BA<*Lq3Jx zSb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    str_0 = "d&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    str_0 = "bD\nu\nC&_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    bytes_0 = b"\x1e\x1e?\xb7\xcf#J\xcc\xadS\xea\xe8X\xaf\x83"
    complex_0 = -2264 + 1624.5j
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: complex_0, bytes_0: bytes_0}
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (complex_0,)
    tuple_1 = (dict_0, set_0, dict_0, tuple_0)
    module_0.match(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    float_0 = 2273.2
    str_0 = "uV"
    bool_0 = False
    tuple_0 = (float_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    int_0 = -2981
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    bytes_0 = b"\x97<"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    complex_0 = 4378 - 3813.74521j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    complex_0 = 520.53 - 2887.698j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    bool_0 = True
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


def test_case_5232():
    pass


def test_case_5233():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5234():
    str_0 = "QRo=W%C}\\t${( j"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    int_0 = -2181
    bool_0 = False
    str_0 = "?w1/R5?%"
    tuple_0 = (int_0, bool_0, bool_0, str_0)
    list_0 = [tuple_0, tuple_0, int_0, bool_0]
    bool_1 = False
    list_1 = [list_0, tuple_0, bool_1, tuple_0]
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    complex_0 = -18.255232 + 894.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    int_0 = -3744
    int_1 = 2663
    tuple_0 = (int_0, int_1)
    module_0.match(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    bytes_0 = b"\xd4\x93\xbfO\xb0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    bytes_0 = b'\tK\x1a\\\xc9x\xe3\xbc*\xce\x84Je\xe0\xf9\x1e\xfa"o\xb9'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    int_0 = 608
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    bytes_0 = b"\xf7\xc8\xf9"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    list_0 = [tuple_0, bool_0, tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    int_0 = -1509
    bytes_0 = b""
    bool_0 = True
    bool_1 = True
    tuple_0 = (bytes_0, int_0, bool_0, bool_1)
    dict_0 = {int_0: tuple_0}
    int_1 = -783
    bool_2 = True
    int_2 = 2149
    tuple_1 = (dict_0, int_1, bool_2, int_2)
    list_0 = [tuple_1, dict_0]
    module_0.get_new_command(list_0, int_2)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    str_0 = "wd\x0c3XyVY^-K}]_<?N1%A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    str_0 = "T"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    float_0 = 463.45
    set_0 = {float_0}
    float_1 = -4148.0
    tuple_0 = (set_0, float_1, set_0)
    module_0.match(tuple_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    complex_0 = -924 - 2248.854j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    str_0 = "\rvQGL!2Zs"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    bytes_0 = b"i\xf5\xb5f(4r\x01\x92\xa6\x87}[\x12\xc9\xf2\x91\x90@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    int_0 = -1264
    bytes_0 = b"\xeb\x98"
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    str_0 = "#Ti%[\x0cq~],$>j?$"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    str_0 = "_nfZQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    bytes_0 = b"4\xa8\xad\x88\xbf5{\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    str_0 = "|\x0bW\\z|'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    str_0 = "v[5)mkHD-'y=S"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    bool_0 = False
    str_0 = "v'\tg8`'J lo7Kr6E4&"
    list_0 = [bool_0, bool_0, bool_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    bytes_0 = b"\xb65\xf4\xc5\xccEL\x1f!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    float_0 = -21.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, set_0, bool_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    none_type_0 = None
    str_0 = "T"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    bytes_0 = b"\xc9},\xe3\xed\xd9\xd5"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


def test_case_5262():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5263():
    float_0 = -2851.0
    str_0 = "#su/B9\r\x0cMuUS"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    bool_0 = True
    list_0 = [bool_0]
    bytes_0 = b"\x86\x05\x12\xbc\n\xef\x100*\x8b\xb5\x19"
    tuple_0 = (bool_0, list_0, bytes_0)
    list_1 = [tuple_0, bytes_0, bytes_0]
    str_0 = "UL\r)@.tK+.\t]{,OM[["
    dict_0 = {str_0: list_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    str_0 = "MS(B\x0bY"
    int_0 = 2006
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    int_0 = 649
    module_0.get_new_command(int_0, int_0)


def test_case_5268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5269():
    bytes_0 = b"\xc5\xb7Gx\xd6J\xa0:\xd2\xeb\x8c\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    int_0 = -406
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    float_0 = 2574.619
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    bytes_0 = b"\x08\x8e\x08s\xe0;\xcaE\x83|\x99\xef\xe2\x99"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    int_0 = 3752
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    int_0 = 2746
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    bytes_0 = b'\x98\r\xab"\xf7\x9d\x88\x91\x8a\xf4\x12\x90\xb5\x8e'
    tuple_0 = (bytes_0,)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


def test_case_5276():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5277():
    bytes_0 = b"\x82\xe5\xd3\xe9:\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    bytes_0 = b"\xfc\xa8l\x18\xcc"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    int_0 = 2940
    object_0 = module_1.object()
    module_0.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    int_0 = -297
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    object_0 = module_1.object()
    set_0 = set()
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    bytes_0 = b"\x16;\xfdIa\xcd\xd5\x0c@\xa9\x0eHBj=\x1aA"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5284():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5285():
    dict_0 = {}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    int_0 = 199
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    bytes_0 = b"\xedr]\xdf\xa9\xf4[Z$\xd0\x7f\x8a\x888Y\x1d\x89-\xb4"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    str_0 = "&b')=c<Vkm~Mcj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    object_0 = module_1.object()
    bool_0 = False
    bytes_0 = b"\xd5\x05"
    tuple_0 = (object_0, bool_0, bool_0, bytes_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    str_0 = "m"
    dict_0 = {str_0: tuple_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    int_0 = -2806
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    bool_0 = True
    int_0 = -2351
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    str_0 = "O[+T`V`Ld,a+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    float_0 = -690.9409
    module_0.get_new_command(float_0, float_0)


def test_case_5296():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5297():
    str_0 = "qBiB\t6*)~s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    complex_0 = 1528.021496 + 1827.6j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    bytes_0 = b",\xd08%HO\xb7\xc4\xd4\xe0\x06\xc9\x9b56\xa7"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    str_0 = "\t<|2x$[Lag.wKyOjA"
    str_1 = "]&^U"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


def test_case_5301():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5302():
    bytes_0 = b"\x00r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    complex_0 = -2657 + 2145j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    str_0 = "l^Yi\tEugc\"4pxIc'FU:x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    bytes_0 = b""
    object_0 = module_1.object(*bytes_0)
    module_0.get_new_command(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    float_0 = -3247.62509
    module_0.match(float_0, float_0)


def test_case_5307():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5308():
    float_0 = -1372.4801
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    str_0 = "x\rY/0cB$^y_d{U#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    bytes_0 = b"\xf7\x15\xd6x$\x12D"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    complex_0 = -3937.6367 - 114.63j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    int_0 = 2368
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    int_0 = 3825
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    float_0 = -4534.31268
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    int_0 = 3870
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    str_0 = "54N\x0bkD)x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    str_0 = "*v["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    int_0 = -1546
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    complex_0 = -55.0044 + 2912.4j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    bytes_0 = b"\x9f8\xc4\xef\x05iK\xc9t"
    set_0 = set()
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    str_0 = '|"w[@cdE|\x0c\t"l)4~'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    str_0 = "oF=YNUkfv]\x0b&K>CX"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    none_type_0 = None
    int_0 = 3141
    bytes_0 = b"\x81\x8d\xa0\xd3\xd5\xaa\x13\x14\xbb\x15\xc7\xc1"
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: int_0,
        bytes_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    float_0 = -4064.317037
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    bytes_0 = b"\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    int_0 = 26
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    int_0 = 403
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    str_0 = "5n}78h_KZ-$&tj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    str_0 = "s'bx5;>="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    bytes_0 = b"\xee\nW\x96\xdb'O8\xee\x07\xf1\x97"
    str_0 = "2j$C["
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    bytes_0 = b"\x08\xc6\x91\x85D\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    dict_0 = {}
    tuple_0 = (dict_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    bool_0 = False
    str_0 = "C"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    int_0 = -2826
    list_0 = [int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    none_type_0 = None
    str_0 = "!\\ \t$ '81]^`a\rZil,"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    str_0 = "?{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    str_0 = "{r(nd[3JV^~]j1\t(]EWq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    bytes_0 = b"\xd1\x85\xf6\xb1\xc0\x9e"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    complex_0 = -2246.491408 - 1338.4j
    module_0.match(complex_0, complex_0)


def test_case_5345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5346():
    float_0 = -2089.54
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    str_0 = "qfaoks\x0b.\r,;k"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    float_0 = -2518.155499
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    float_0 = 2539.30393
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    str_0 = "Z)h%)_Zty/HY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    float_0 = 2087.92143
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    int_0 = -1166
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    dict_1 = {bool_0: bool_0, bool_0: dict_0, bool_0: bool_0}
    module_0.get_new_command(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    none_type_0 = None
    bytes_0 = b"\xc2?)\x01\xc7L"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    bytes_0 = b"\xa0{\x0b\xceR\xa5}\xe9~\x88Pj\x82\x1a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    bytes_0 = b";\xc4?u\xf2\x93db"
    bytes_1 = b"\x05\xbbN"
    module_0.get_new_command(bytes_0, bytes_1)


def test_case_5358():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5359():
    float_0 = -620.16288
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    float_0 = 2462.7132
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    int_0 = -1779
    module_0.get_new_command(int_0, int_0)


def test_case_5362():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5363():
    int_0 = -4432
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    float_0 = -1906.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    complex_0 = -1183.68 + 1869.74872j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    str_0 = "\x0bN;/Y/80bA0\tsQ9\tJc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    int_0 = 1742
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    int_0 = 31
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    bytes_0 = b"\xf8\xd4\xf7\x89\xc8x\x18\xe5%Z\x158^\x05\x03\x05k"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    int_0 = -1850
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    float_0 = -2277.842039
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    list_0 = []
    module_1.object(*list_0, **list_0)


def test_case_5374():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5375():
    float_0 = 1115.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    object_0 = module_1.object()
    str_0 = "XF"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    complex_0 = 1749.4 - 1859.614j
    bool_0 = False
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    str_0 = ",:mZ\re<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    float_0 = 1846.6865
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    int_0 = 1350
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    int_0 = -1493
    bool_0 = True
    dict_0 = {int_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    int_0 = -2328
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    str_0 = "DqL^U8YC?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    bool_0 = False
    int_0 = -1061
    set_0 = {bool_0, int_0, int_0, int_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1, bool_1: bool_1, bool_1: bool_1}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    bool_0 = True
    int_0 = 4203
    dict_0 = {bool_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    float_0 = 1040.09483
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    str_0 = "K q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    float_0 = -3688.79
    module_0.get_new_command(float_0, float_0)


def test_case_5393():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5394():
    bytes_0 = b"9p\x19\x88f\x8b\x82Dul}u\xcb|6\xbcdlF\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    str_0 = ""
    bytes_0 = b"\xc1\xa5Q\x90\x19\xbc\xb6r\x07?\xc2\x7f\\\xdb"
    bool_1 = True
    tuple_1 = (tuple_0, str_0, bytes_0, bool_1)
    tuple_2 = (bool_0, tuple_1, tuple_1)
    module_0.match(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    str_0 = "%rAnJv:s/6!l;2%A'o2s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    str_0 = "2bbP,y:@L04@u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    float_0 = -1298.61104
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    int_0 = -1247
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    complex_0 = -2213 + 4257.76925j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    complex_0 = 74.528385 - 2598.3j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    str_0 = "TPZ4M.\x0c}BKoRA; w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    int_0 = -477
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    int_0 = -92
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    bytes_0 = b"\xb4Y9\x0b\xf9\xe4\x14\ra\xdc~\xa0\x8a!"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    str_0 = "_S%"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    bytes_0 = b"\xe0\x99\x14\x06\xda3bM>\xc1\x02\xf0"
    float_0 = -1083.5
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    none_type_0 = None
    str_0 = "*orf= A-."
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    str_0 = ">:CyyC_3yqY"
    list_0 = []
    list_1 = [str_0, list_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_5412():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5413():
    int_0 = 2638
    module_0.match(int_0, int_0)


def test_case_5414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5415():
    float_0 = 1362.787
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    float_0 = 773.966479
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    int_0 = 4845
    module_0.get_new_command(int_0, int_0)


def test_case_5419():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5420():
    int_0 = -182
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_5422():
    pass


def test_case_5423():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5424():
    bytes_0 = b"\xfb\x16\xccs\xb5x\xcb\xb8\x16\x94#\x015"
    bool_0 = True
    int_0 = -1225
    tuple_0 = (bytes_0, bool_0, bytes_0, int_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


def test_case_5426():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5427():
    int_0 = -4105
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    bytes_0 = b"I\xe7u\xd6\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    int_0 = 499
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    float_0 = 2086.06243
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    str_0 = "V;biuU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    int_0 = -1001
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    float_0 = -2100.343
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    str_0 = "\t4ZQ;\tFn|S+["
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    float_0 = 1340.0
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    int_0 = -1406
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    int_0 = -926
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    list_0 = []
    str_0 = "l7)ypz)2"
    bool_0 = False
    dict_0 = {str_0: list_0, str_0: str_0, str_0: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    float_0 = -4888.65331
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    int_0 = -2262
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    bytes_0 = b"9\x1b\x19,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    str_0 = "=S\x0cp!T8"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    float_0 = 1362.065383
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    str_0 = 'FW%"\ty\rx\rjH<Uzr'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    float_0 = 1776.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    int_0 = 1255
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    str_0 = ")n)i1M0Qg:a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    bytes_0 = b"\xe4(8wa\xbd\x8b\xe2\xd4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    bytes_0 = b"8\xdf\x15\xba\x17jx\xbc/"
    str_0 = "#\\:JJ}E:\x0b"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    float_0 = 1481.12
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    str_0 = "?,-c"
    str_1 = "4kLub1*"
    str_2 = "+r"
    str_3 = "U2;SS-+x_8z_Dt2D-E"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_3: str_3}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    float_0 = -1391.329
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    str_0 = ">@O0"
    module_0.match(str_0, str_0)


def test_case_5457():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5458():
    str_0 = "Vt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    float_0 = 2937.49
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    str_0 = "tl;"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    str_0 = "FD`qGc~|Fwe3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    int_0 = 2008
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    bytes_0 = b"\xca\x11\x8c"
    bytes_1 = b"L\x11"
    bytes_2 = b"\xed\x0e\t\xd5\xed5:\xb6\x8b\xde\x97\x93"
    dict_0 = {bytes_0: bytes_1, bytes_0: bytes_0, bytes_1: bytes_0, bytes_2: bytes_1}
    module_0.get_new_command(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    bytes_0 = b"\x00\x88\xa8\xd4\x12R71#\xedQ\xe4V~\xa9\xff\x9f^\xe9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    float_0 = 620.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    int_0 = -2044
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    bytes_0 = b"\xe6Y\x1d1T\xed\xfc\x02\xfc\xb1\xb6"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    set_0 = {bytes_0}
    tuple_0 = (list_0, list_0, set_0, bytes_0)
    tuple_1 = (tuple_0, bytes_0, bytes_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    bytes_0 = b"\x85\xe1\x1ea\xe0\xf4?\x06\\\xfd\xfe\xf3\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    str_0 = ";Tt$_82"
    list_0 = []
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    bytes_0 = b"7\xfc\xd6"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: bytes_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    int_0 = -5636
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    str_0 = ":q#TzN)v\\$ul.X\t"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    bool_0 = True
    str_0 = "V"
    tuple_0 = (bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    float_0 = 1403.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    float_0 = 3573.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    complex_0 = 454.666699 + 155.83j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)
