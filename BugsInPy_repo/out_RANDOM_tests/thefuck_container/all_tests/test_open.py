# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import open as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = 746.83 + 3101.8238j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -1028.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1575
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_6():
    pass


@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = 241.2111
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x93t3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    float_0 = -977.13
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b"\x81\xef\x970"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    tuple_0 = ()
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


def test_case_23():
    pass


def test_case_24():
    pass


@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b'K\xc5\xdd7"\xe2\xdb\xdc\x17='
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    int_0 = -3147
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = "I*xU\rL*RHi\\zFj$$"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    int_0 = -4
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bytes_0 = b"Z\xb5\xc9\xfc\xe5\x9d9\xbd\xfc\xe7\xed\xd4\xea:~O\xeb\xd2(x"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    bytes_0 = b'\x8f\xfc"\xbc\xce\xc2'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    bytes_0 = b"}\xe9\xcdlQ\xf6S\xb8y\xf5pT[\xf3\x92\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = ""
    list_0 = [str_0, str_0]
    list_1 = [str_0, str_0, list_0, str_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    float_0 = 3654.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    bytes_0 = b"\xa5an/\xff\x19\x0e_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = "s>K%Aj_/a>C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = "1Q0Q%p7s`CXN}uB:\tg@g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    bytes_0 = b"O-~\x08"
    object_0 = module_1.object()
    module_0.get_new_command(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    complex_0 = 2672.7721 - 1877.53j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    float_0 = -50.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    int_0 = -62
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    int_0 = -593
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    int_0 = 1585
    module_0.get_new_command(int_0, int_0)


def test_case_48():
    pass


@pytest.mark.xfail(strict=True)
def test_case_49():
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    bool_0 = False
    str_0 = "N\x0bp:_7"
    str_1 = "w_BzD"
    dict_0 = {bool_0: bool_0, str_0: str_1}
    tuple_0 = (dict_0, bool_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    int_0 = 3142
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    complex_0 = 76.888 + 844.9j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    float_0 = -1448.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    float_0 = 3210.716
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = "qI6]P9Y"
    set_0 = {str_0, str_0}
    list_0 = []
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    str_0 = "&6B69['*KB#ESf9M!!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    complex_0 = -3833.8 - 593.203j
    list_0 = [complex_0, complex_0]
    module_1.object(*list_0)


def test_case_62():
    pass


@pytest.mark.xfail(strict=True)
def test_case_63():
    int_0 = 2113
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    int_0 = 270
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    bytes_0 = b"\xaf\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    str_0 = "\rFuC>~YW!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    bytes_0 = b"\xbf\xef6_\x96s"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    bytes_0 = b'"@\xbb\x81\x15\xe8\xeb\xd7\x9f'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    complex_0 = -4184 - 1076.5082j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    int_0 = -384
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    str_0 = "6+QYt]5{E<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    none_type_0 = None
    complex_0 = 1091.9 - 2144.4665j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    str_0 = "1R\rq0r;zcR.P483&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    bytes_0 = b"\x08"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    bytes_0 = b"\xd6\xd7\xa6\xe0\x1c!\xe06\x90\xd7\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    str_0 = "$vhG`Y"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    float_0 = 2055.1799
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    int_0 = 1378
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    bytes_0 = b"\xe0\xd4\x91\xfc\xb4\x94h\xae\xf4\xd0\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    int_0 = -1524
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    float_0 = 449.31232
    module_0.match(float_0, float_0)


def test_case_88():
    pass


@pytest.mark.xfail(strict=True)
def test_case_89():
    bytes_0 = b"\xf1\x91\x1e\xfe\x7f\xf6u"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    bytes_0 = b"6EL\xb2\x14\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    int_0 = 1614
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    int_0 = 1806
    str_0 = "=m$@4=SRz@Z"
    none_type_0 = None
    str_1 = '\nB1.V[BDhb6rX"'
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*int_0, **dict_0)


def test_case_94():
    pass


@pytest.mark.xfail(strict=True)
def test_case_95():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    int_0 = -1699
    module_0.get_new_command(int_0, int_0)


def test_case_97():
    pass


@pytest.mark.xfail(strict=True)
def test_case_98():
    str_0 = "RspW)]N)l'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    str_0 = "#^Bnh}_<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    bytes_0 = b"NZ\xbd>\xc3X\xb0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    bytes_0 = b"\xf8\x1eY\xd1b\n%((s>`t\x96\xda\x95\x1b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    int_0 = -627
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    str_0 = "b$"
    str_1 = "_U\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    int_0 = -988
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    int_0 = -97
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    float_0 = 159.39104
    list_0 = [float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    int_0 = -1957
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    bool_0 = False
    str_0 = "OyKD%Er"
    str_1 = "Lw~_?_`LGQ[3l]Fh"
    dict_0 = {str_0: str_0, str_1: bool_0}
    module_1.object(**dict_0)


def test_case_113():
    pass


@pytest.mark.xfail(strict=True)
def test_case_114():
    bytes_0 = b"\xd5\xbd\x8dO\xd4\xeb\xb8w\xfd\x10\xca\xea=?n\xf4G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    set_0 = set()
    object_0 = module_1.object(*set_0)
    module_0.get_new_command(object_0, object_0)


def test_case_116():
    pass


@pytest.mark.xfail(strict=True)
def test_case_117():
    bytes_0 = b"\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    bool_0 = False
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    complex_0 = 4060 + 638.13j
    int_0 = 288
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: int_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    float_0 = 813.3371
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    complex_0 = 1749.0396 - 1838.5745j
    bool_0 = False
    set_0 = {complex_0, complex_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    bytes_0 = b'ci\xd5\x86\x9a\xa6\xcc\xa2{"i\xe2\xc7\x80\xff\xe6?'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_1, bool_1: bool_1, bool_1: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    float_0 = -1020.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    int_0 = 405
    module_0.get_new_command(int_0, int_0)


def test_case_132():
    pass


@pytest.mark.xfail(strict=True)
def test_case_133():
    bytes_0 = b"c\xacJ\x0f\xdf\x93u"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    int_0 = 499
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    bytes_0 = b".9\xa7A\xa8\xc9%u\x96\xe8:"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    int_0 = -3155
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    float_0 = 1568.08
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: bool_0, tuple_0: tuple_0}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    bytes_0 = b"/k\xd2\x91\xc6\xe14\x1e\x0c\xbb\xa5\xbd_r\xfe\xb7\x97\xebw\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    str_0 = "-X*yEoR&sT"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    int_0 = 1823
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_148():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    object_0 = module_1.object()
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b"kqu\xd8PX"
    tuple_1 = (object_0, tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    float_0 = 4335.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    bytes_0 = b"\x04\x18\xf6\xfe\xc2`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    str_0 = "Q"
    dict_0 = {str_0: object_0, str_0: list_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    bytes_0 = b"zl\x85\x83\xddN\x90\x94\x06Q\x0bi]\x92\x9e"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    float_0 = -2558.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    str_0 = "IVY*l6nr(v#{:E>)W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    int_0 = 2872
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    float_0 = 1828.339
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    bytes_0 = b"\xc6\xb1@g=?1\xd2tQ/\x1d\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    str_0 = "\n"
    float_0 = -862.0
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    float_0 = 121.0
    list_0 = [float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    bytes_0 = b"\xfc\xfd\x01\xae\x97("
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    str_0 = "'<wr5/"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    bytes_0 = b"\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    int_0 = -263
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    int_0 = -3362
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    none_type_0 = None
    str_0 = "Q\x0cA5!["
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    bytes_0 = b"\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    bytes_0 = b"9\xb7z\xbb\x06X\xd6w"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    str_0 = "54jGrYC2`g-N#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    str_0 = "Y\n,/gr@ 2*;B/\n5YN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    str_0 = "$s[-Wq#M3Fj@L)'p\"9O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    bytes_0 = b"\xb1~"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    str_0 = "Uw0E"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    bool_0 = True
    int_0 = 1921
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    float_0 = -2044.3
    list_0 = [float_0, float_0]
    bytes_0 = b"\xe9\x81\x8a\xd7\x13\x0c\xa6W\xac*\x97\xd2\x83\xc8\xc4"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    str_0 = "%5K(;|"
    str_1 = ",\x0cm<spbD?urTk?&q+N^P"
    str_2 = "-/KcT"
    int_0 = 560
    dict_0 = {str_0: str_0, str_1: str_1, str_2: int_0}
    module_1.object(**dict_0)


def test_case_186():
    pass


@pytest.mark.xfail(strict=True)
def test_case_187():
    str_0 = "x9Pr8$n\x0b[TRO\tM@*(#"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_189():
    pass


@pytest.mark.xfail(strict=True)
def test_case_190():
    str_0 = "9x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    float_0 = 24.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    str_0 = "4@7&XK};2%0-v,p"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    str_0 = "#)Lmj\x0c\\:JaV&n8}*U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    bytes_0 = b'"8\xc38\xee\xc35\x88\xdc\xd5>\x1a'
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    str_0 = "ov0p\rm"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    bytes_0 = b"\x11\xedth^G\x92\xd5-\xdeQ\xde\x16\xf4\x94\xa0\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    str_0 = 'G"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    str_0 = "w\nrwOPhzt?L6$^5y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    float_0 = -192.080345
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    float_0 = 1904.0
    int_0 = -693
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    bytes_0 = b"\x84\xb3\xab<\x11\x91"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    int_0 = 203
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    bytes_0 = b"\xdb\x06\xa8\xe58\xedpV\x8d(\xc25\xbc\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    bytes_0 = b"\xee]\xb9=Om"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    float_0 = -1147.832
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    bytes_0 = b"^"
    str_0 = "0fh6f#"
    dict_0 = {bytes_0: bytes_0, bytes_0: str_0, str_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    bytes_0 = b"\xf8\xcd\xe5{\xc26Y\x86\xa2\xe3\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    object_0 = module_1.object()
    complex_0 = -1890.08955 - 4163.6j
    list_0 = [object_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    int_0 = -37
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    int_0 = -1493
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    int_0 = 3084
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    int_0 = -3025
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    str_0 = "<W5!8|L\ru5!"
    bytes_0 = b":^!"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    int_0 = 1639
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    str_0 = "u+gWsw\rVa\t:9]`R+\tl"
    module_0.get_new_command(str_0, str_0)


def test_case_222():
    pass


@pytest.mark.xfail(strict=True)
def test_case_223():
    str_0 = "X\x0cdXv?636A{73n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    bytes_0 = b"\xd3\xf1\xcd\xe7\xeb\r\x02\xed\xa7f\xf98\x01\xb0\xeb\xd7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [bytes_0, dict_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, dict_0)


def test_case_225():
    pass


@pytest.mark.xfail(strict=True)
def test_case_226():
    bytes_0 = b"V\x1b\xc8\x9c\xf5\r,m\xf5_\x071\xc4\x02\xfa\xf5\x84n\x1fW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    bytes_0 = b"\xf1wI\xeb`\xe3\xb9i\x90\xdd\x05\x9a^\xdc\xf8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    bytes_0 = b"\xe4#\x99%\x9ak\x9d\xfe"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    complex_0 = 499.00388 + 814j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    complex_0 = 1561.1408 + 1489j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    int_0 = -1349
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    int_0 = -3259
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    float_0 = -2353.0
    object_0 = module_1.object()
    dict_0 = {float_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    int_0 = -375
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    bytes_0 = b"y\xd0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    str_0 = "(<CZsdZ>|P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    str_0 = "@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    float_0 = 1005.5786
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    bytes_0 = b"*\xa5;\xad\x18uX@\x90\xa6{\xf0\x11d\xc4o"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_241():
    pass


@pytest.mark.xfail(strict=True)
def test_case_242():
    bytes_0 = b"\xf4E\x8f\xf3\x0c\x18\xa0/T\x95\x00\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    bytes_0 = b"\x98\xd3\r\x11\x84\x17=N"
    bytes_1 = b"\x95A\xb2\xa6\xe6\xcc\xf8\xf0\xa1s7cy\x0e\xc8\t"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_1}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    int_0 = 1150
    list_0 = [int_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    str_0 = "K\r3ip\t#z5"
    str_1 = "J;;#kavPbTZ=.]"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    bytes_0 = b"\xf2\t\x97CW[\x85{"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    int_0 = 1723
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    bytes_0 = b"\x8d2\x19\x94K_\x7fn"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    bytes_0 = b";\xae\xec\xc3e\tu\xac<\xb4\xdex"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [bool_0]
    tuple_0 = (set_0, list_0)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    none_type_0 = None
    float_0 = -946.58
    str_0 = "zm*'v!\t0"
    list_0 = [float_0, float_0, str_0]
    bool_0 = True
    tuple_0 = (float_0, list_0, bool_0)
    tuple_1 = (none_type_0, float_0, str_0, tuple_0)
    module_0.match(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_253():
    str_0 = "]K-\tl\\X/V7XzX0["
    str_1 = " Y\\:+]#[KN"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    str_0 = "^N?`w]]_\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    bytes_0 = b"\xcd\x83\xf2\x18:\xda=c0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    bytes_0 = b"j\x1aM\x15\xac\xbaR"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    float_0 = -262.06
    list_0 = [float_0]
    module_1.object(*list_0, **float_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    bool_0 = True
    float_0 = -2239.526
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    str_0 = "J):K}j}'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    bytes_0 = b"4a\xe2n\r,\xd0\x0f:"
    set_0 = set()
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_263():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_265():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    int_0 = -4496
    int_1 = -1488
    tuple_0 = (dict_0, int_0, bool_0, int_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    float_0 = -1698.2655
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    int_0 = 852
    bool_0 = True
    set_0 = {int_0, int_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    str_0 = "Hb\t%z.z}QGbVl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    str_0 = "[+;_@+?gJ%_RA^^^c?v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    str_0 = ">"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    str_0 = "5\t)nP -3<#RI'bw0~Jb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    float_0 = -1911.56
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    float_0 = 778.8166
    int_0 = 159
    tuple_0 = (float_0, float_0, float_0, int_0)
    list_0 = [tuple_0]
    str_0 = "h]T;! s.C"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    complex_0 = 917.24008 + 1036.98371j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    str_0 = "+]nZxU^fw"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    bytes_0 = b"\xb7\xcc%\xa0\x11\t\xfe\xfd\x98\x91`>K"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    int_0 = -3719
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    int_0 = 1298
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bool_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    int_0 = 2079
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    bool_0 = True
    int_0 = -2035
    int_1 = -10
    tuple_0 = (bool_0, int_0, int_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    str_0 = "W-lbj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    bytes_0 = b"T\xa3\x87Y\xbe\xb2\x11\x04\xddi\x92"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    int_0 = 1799
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    int_0 = -2902
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bytes_0 = b"\xc4T\xf3\xa1\xb8\x9a"
    list_0 = []
    tuple_0 = (dict_0, bytes_0, list_0, int_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    bytes_0 = b"\xb5\xe2\x95s"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    bool_0 = False
    str_0 = "f(u(i1D@k\x0b"
    bool_1 = True
    tuple_0 = (bool_0, str_0, bool_1)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_291():
    bytes_0 = b"\xe2\x87;\xf5v\\\x88\xb2{\xb3S\xeb\xd6\xc2\x98enI"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    bytes_0 = b"\xd7\xbd\x0e\xa2\xd2\xceH"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    str_0 = 'KiryI0Ju["'
    bool_0 = True
    int_0 = 867
    float_0 = -109.4
    tuple_0 = (bool_0, int_0, float_0)
    tuple_1 = (str_0, tuple_0, float_0, bool_0)
    set_0 = {tuple_1, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    str_0 = "[E0*ot"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    int_0 = -740
    float_0 = 658.0
    set_0 = {int_0}
    tuple_0 = (float_0, int_0, set_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    str_0 = "]H:e"
    bytes_0 = b"\xa8,lnC\xd5\x8b\t"
    tuple_0 = (str_0, bytes_0, str_0)
    dict_0 = {str_0: str_0, str_0: tuple_0, tuple_0: bytes_0}
    tuple_1 = (str_0, dict_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    str_0 = "b\r_e"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    int_0 = 2071
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    bytes_0 = b"H+\xd7-\xb6\x98<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    str_0 = "$PI>-Rz5:(W75"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    float_0 = -450.369187
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    float_0 = -1903.1256
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    bytes_0 = b"\x13\x18+"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    bytes_0 = b"\x9aK"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    bytes_0 = b"k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    str_0 = "qjO:!}e''!Dc)]=pj7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    none_type_0 = None
    str_0 = "oP29\nY&Cl"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    bytes_0 = b"\x1a\xd6\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_312():
    bool_0 = False
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    int_0 = -1547
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    object_0 = module_1.object()
    set_0 = {object_0}
    int_0 = 3349
    tuple_0 = (set_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    bytes_0 = b"s\x85\x98\xb0\xfe(\x87\xe0\xc71K"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    str_0 = "_f\\Zt4v,2zxm|0"
    module_0.get_new_command(str_0, str_0)


def test_case_317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_318():
    bytes_0 = b"9\xb4\xe9"
    list_0 = [bytes_0]
    bool_0 = True
    list_1 = [list_0, bool_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    int_0 = -152
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    int_0 = -2212
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    bytes_0 = b'\xf0\xcd\x81*g\xe4B\x89"\xf4{G:'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    int_0 = -1827
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    bool_0 = False
    bytes_0 = b"\xbb-\x13\x00\xce+$\xcd\x0c\xf1_}\xf3e"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    str_0 = "M-["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    str_0 = "\\A0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    float_0 = -1181.0458
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    float_0 = -4702.7726
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    bool_0 = False
    set_0 = {bool_0}
    set_1 = {bool_0}
    module_0.get_new_command(set_0, set_1)


def test_case_331():
    pass


@pytest.mark.xfail(strict=True)
def test_case_332():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    int_0 = 942
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    bool_0 = False
    bytes_0 = b"\xd7,*O\xb6,g"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    float_0 = -553.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    int_0 = -2063
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    bytes_0 = b"\x87\xc1\x1c_\xec\xb1\x81\xf0\x13~\x98&"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    int_0 = -2535
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    float_0 = -214.73425
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    int_0 = 1700
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    dict_1 = {object_0: dict_0}
    bytes_0 = b"O\x98W\x99"
    module_0.match(dict_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    set_0 = set()
    bytes_0 = b"\xc2\xf8\xa6\x12\xf6\x1b\x0bv"
    list_0 = [set_0]
    list_1 = [set_0, bytes_0, set_0, list_0]
    tuple_0 = (set_0, bytes_0, set_0, list_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_344():
    pass


@pytest.mark.xfail(strict=True)
def test_case_345():
    bytes_0 = b'\x0c\xf1"\xad\xdb\xe6\x9d'
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    int_0 = 2801
    module_0.match(int_0, int_0)


def test_case_347():
    pass


@pytest.mark.xfail(strict=True)
def test_case_348():
    bytes_0 = b"\x9a\xcf\x18\x99\xde\xc4#\xc0"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    int_0 = -1456
    module_0.get_new_command(int_0, int_0)


def test_case_350():
    pass


@pytest.mark.xfail(strict=True)
def test_case_351():
    str_0 = "z`\nMIE`K,v]c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    float_0 = 477.2964
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    float_0 = 570.562
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    int_0 = -326
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    complex_0 = -1462.1 - 491.93j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    list_1 = [list_0, complex_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_356():
    bytes_0 = b"3\xe7\xd7\x9c-\xaa\x0e\x8e0\x1al$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    set_0 = set()
    str_0 = "<[W;slt`[oul$Y"
    module_0.match(set_0, str_0)


def test_case_358():
    pass


@pytest.mark.xfail(strict=True)
def test_case_359():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    bytes_0 = b'~\x0b\x02z"\xe4\x05\x03\xa0\xdd\xb7\x9e \x15\r8'
    int_0 = 828
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    str_0 = "-\x0b4Z+N(x_twi[;"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_363():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    int_0 = -607
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    int_0 = -1625
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    int_0 = -1311
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    int_0 = -3358
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    tuple_0 = ()
    set_0 = {tuple_0}
    bool_0 = False
    tuple_1 = (set_0, tuple_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_1)


def test_case_370():
    pass


@pytest.mark.xfail(strict=True)
def test_case_371():
    none_type_0 = None
    bytes_0 = b"\x9d|m\xe1"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    float_0 = -939.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    float_0 = 2504.958225
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    complex_0 = -653.56085 - 2460.7734j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    bytes_0 = b"\xf2\xc8\x12\xf2#G\xb6v\x05lqMW"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    bytes_0 = b"\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    complex_0 = -1421 - 406.2578j
    set_0 = {complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    str_0 = "5J#JJJyj\x0cv\x0cUKR/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    str_0 = 'GJ8;-8]q\\n2P"f9@)N'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    bytes_0 = b"\xbb\xbd\xa2m\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_382():
    pass


@pytest.mark.xfail(strict=True)
def test_case_383():
    int_0 = 896
    bool_0 = True
    list_0 = [int_0, bool_0, int_0, bool_0]
    bytes_0 = b'\xe6\x8d"\x19kd\x11W\xf5\xb76\xd4V\xe1i\n\x97E\x01'
    tuple_0 = (int_0, bool_0, list_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    int_0 = 1224
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: tuple_0, int_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (int_0, tuple_0, dict_0)
    list_0 = [tuple_1, int_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    float_0 = 909.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    str_0 = "?\r&S"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    float_0 = 1757.57
    object_0 = module_1.object()
    tuple_0 = (float_0, float_0, object_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


def test_case_391():
    pass


@pytest.mark.xfail(strict=True)
def test_case_392():
    str_0 = ")$@+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    str_0 = "'R`d^p*Vt6IKDP?n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    float_0 = -253.742064
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    str_0 = "[omj*gv)%c=EUASpzd?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    complex_0 = -2195 - 2050.5j
    tuple_0 = (complex_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_397():
    pass


@pytest.mark.xfail(strict=True)
def test_case_398():
    int_0 = -1903
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    int_0 = -1132
    str_0 = "_xQ?~Z/^I,S,UdGl#\x0c\t"
    tuple_0 = (int_0, str_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    int_0 = -2021
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, dict_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    float_0 = -1349.61795
    set_0 = {float_0, float_0, float_0, float_0}
    list_0 = [set_0, float_0, float_0]
    int_0 = -508
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    bytes_0 = b"U2\x115\x11'\xd3\xfbd\xb85\xd4i\xbbm\xb9g\x03\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    bytes_0 = b"\x1b(\xfb\xea]\xec\xe3\x1a\x97S\xea\x13\xa5\x90"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    str_0 = ":-wJ\r<3_D*gz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    int_0 = -2155
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    float_0 = 1819.841896
    str_0 = "+SlR"
    tuple_0 = (str_0,)
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    bytes_0 = b"`\xa9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    none_type_0 = None
    int_0 = 2914
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    str_0 = "\tRI,O"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    tuple_0 = (dict_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    float_0 = -2228.73
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    float_0 = -189.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    int_0 = 4336
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    str_0 = "o}uETDw#ty:f@76~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    float_0 = 939.0443
    int_0 = -2314
    set_0 = {float_0, float_0, int_0}
    complex_0 = -2201.066668 - 894j
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    int_0 = -2452
    module_0.match(int_0, int_0)


def test_case_424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_425():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0)
    module_0.match(tuple_0, tuple_0)


def test_case_426():
    pass


@pytest.mark.xfail(strict=True)
def test_case_427():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    int_0 = -1613
    bytes_0 = b""
    tuple_0 = (int_0, bytes_0, int_0)
    list_0 = [tuple_0, int_0, bytes_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    float_0 = -927.0441
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    float_0 = 438.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    complex_0 = -2495.378 - 1638.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    str_0 = "suSiA"
    str_1 = "i-o*=6} \rp,A/4~8Fes&"
    complex_0 = -4263 + 339.8j
    tuple_0 = (str_0, str_1, complex_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_1, bool_0]
    bytes_0 = b"\xce\xc8\xb3\x96\xd8<H\x80\t\xf3\x10\xa3C\xbf\xee4\xfeA"
    tuple_0 = (bool_0, bool_1, list_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_435():
    pass


@pytest.mark.xfail(strict=True)
def test_case_436():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    bytes_0 = b"\xdc\xbe\x10*\xe4\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    int_0 = 5007
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    int_0 = 4054
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    bytes_0 = b"L%\xbc\xd8\xcd\xca{\x1ar\xc0\x1b\xa6\xccsb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    str_0 = "a9NCK%UidSjSSluz,yr"
    int_0 = 2089
    list_0 = [str_0, str_0, str_0, int_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    str_0 = "U\x0b p`B!c,9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    str_0 = "Nbd"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    float_0 = 192.455
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    complex_0 = -593.4 - 333j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    bytes_0 = b"\x8d\xaaW\xf6\xb2\x19\x96\xd1\xf3\x00\xfd\x86\xce\x1d;\x7f\xea\x88\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    bytes_0 = b"\xc5\xdd\xc1ee\xee\xabMZ\x87 (\xca\x83\x9b\xe2\xc4\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_450():
    pass


@pytest.mark.xfail(strict=True)
def test_case_451():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    bytes_0 = b"\xcc8\xcf\xe4g\x9d\xb8"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    bool_0 = True
    module_1.object(**bool_0)


def test_case_454():
    pass


@pytest.mark.xfail(strict=True)
def test_case_455():
    bytes_0 = b"\x8d\xe04\x19`y\xe4\\j\x0b\xce\xe5\xb1\x85\xf3\xe5\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    float_0 = -1336.807245
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    bytes_0 = b"BW\xf5\t\x072\xd5Z\xf8\x868\xab%\x87\x8c\xa2YK\x03Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    bytes_0 = b"\x88\x08\x81)\x9a"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    complex_0 = 1688.46676 + 4117.8914j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    str_0 = "Qi0l9-!8mMKq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    bytes_0 = b"9-E\x8a\xe1~ph\xeb\xbc\x1e\x8f\xdb\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    int_0 = -1011
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    str_0 = "Q:[D?`\n$q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    bytes_0 = b"\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    bytes_0 = b"\t\x9b? @\xd1\xf0O\xe8<\xb5`\xb8"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    bytes_0 = b"\x9f\xd9\xa4"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    int_0 = 955
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    float_0 = -5087.1058
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    int_0 = 218
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    str_0 = "&i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    int_0 = 2957
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    int_0 = -1733
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    bytes_0 = b"\x01#\xbb\x1b\xa0*-\x9aW+?\xc1."
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


def test_case_484():
    pass


@pytest.mark.xfail(strict=True)
def test_case_485():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    float_0 = -618.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    complex_0 = 2252.177016 - 4687j
    int_0 = 4185
    dict_0 = {complex_0: int_0}
    bytes_0 = b"\xc0\xb7i\xa3\x8a\x0f]\xfen\xc2FP"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    str_0 = "_};Gs&7ICAu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    float_0 = -1320.59446
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    bytes_0 = b"f\xd5d\x058\xf1_\xe1hJ\xf8\x92G8\x1b\xe7\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    int_0 = -4420
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    float_0 = 742.95741
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    str_0 = "~?Kr;$%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    complex_0 = -2488.538477 + 1191.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    int_0 = -2228
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    int_0 = 194
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    complex_0 = 869 + 504j
    module_0.match(complex_0, complex_0)


def test_case_501():
    pass


@pytest.mark.xfail(strict=True)
def test_case_502():
    str_0 = "H.=LJ?\\|^,$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    bytes_0 = b"Aq\xc6\x8fIJ\xa9."
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    bytes_0 = b"'g\x18M\x04\xca$\xd3\xd8\\e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    str_0 = 'JD^|0I/&c;m^"xg*?V?B'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    float_0 = 4252.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    complex_0 = 871.85288 + 2015.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    str_0 = "C.NjuS7N"
    str_1 = "$g"
    module_0.match(str_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    bool_0 = False
    str_0 = '7+"ZzXe\nE'
    dict_0 = {bool_0: bool_0, bool_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    str_0 = "4)r+oW81$u'\x0c!8l1xC{4"
    str_1 = "H\roH101]WPb-"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    float_0 = 3630.9641
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    int_0 = 2349
    module_0.get_new_command(int_0, int_0)


def test_case_517():
    pass


@pytest.mark.xfail(strict=True)
def test_case_518():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    complex_0 = 1835.06 - 1745.622102j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    bytes_0 = b"\x83$\xe5\x88\xf9\x9c\\"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    int_0 = -688
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    int_0 = 1775
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    bytes_0 = b"<^e\x8d\x9en\x1b\xb7\xac;\x91\xf6K"
    tuple_0 = (bytes_0,)
    bytes_1 = b"\xf1\xf2>\xde\x8f7\x19"
    list_0 = [tuple_0, tuple_0, bytes_0, bytes_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    none_type_0 = None
    float_0 = -3092.9
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    str_0 = "S"
    module_0.get_new_command(str_0, str_0)


def test_case_528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_529():
    str_0 = "9Ct\r&Vo"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    str_0 = ":YUofX]i'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    bool_0 = True
    str_0 = "Z"
    tuple_0 = (bool_0, str_0, bool_0)
    bytes_0 = b""
    tuple_1 = (tuple_0, bytes_0)
    tuple_2 = (tuple_1,)
    module_0.get_new_command(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    str_0 = "XKR9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    str_0 = "U)ms@_'X)\x0c \x0c\x0cl\""
    str_1 = "T6SzP\n-7C37.PHOgq"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    int_0 = -2412
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_536():
    pass


@pytest.mark.xfail(strict=True)
def test_case_537():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    str_0 = "EFvih-02D$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    str_0 = ":SnBBw}aJYc~\\5km@2-"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    int_0 = -202
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    int_0 = -1037
    bytes_0 = b"-\x05"
    set_0 = {int_0, int_0, bytes_0}
    dict_0 = {int_0: int_0, int_0: int_0, int_0: set_0}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    str_0 = "Sf&-O*"
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    str_0 = "nS\\!"
    module_0.get_new_command(str_0, str_0)


def test_case_545():
    pass


@pytest.mark.xfail(strict=True)
def test_case_546():
    int_0 = 948
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    bytes_0 = b"Xx\x88\xac\xc5OG~\xef\xe2\xb4\xd8\x85t.\x13\x04N"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    str_0 = "Z:\x0c<Bx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.get_new_command(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_551():
    str_0 = "^-U^:bVU4"
    bytes_0 = b"\xe3\x9a0\xc9\x90"
    module_0.match(str_0, bytes_0)


def test_case_552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_553():
    none_type_0 = None
    str_0 = "GgZ\x0c}5|:|!"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    int_0 = 401
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    bytes_0 = b"\x02\x80\x12R1\xd3}\xcd\x96\xeaU\x01\xf8\x9a\xd7\xebA\xf5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    bytes_0 = b"\xe5b\x99\xe2T"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    complex_0 = 381 - 162.490305j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    bytes_0 = b"\x1fX\xde\xce\xcaY\xe4]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    float_0 = -316.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    complex_0 = -3142.12853 - 3409.88732j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    int_0 = -4595
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    int_0 = -295
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    float_0 = 1393.8668
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    int_0 = 620
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    int_0 = 1822
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    str_0 = "\t9'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    str_0 = "?\x0cj\\gv@|@b<Bvi\x0c-A[zg"
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (set_0, str_0)
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    int_0 = -441
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    bytes_0 = b"\t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    bytes_0 = b"U1*^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    int_0 = -1013
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    bytes_0 = b"\xda\xd3\x80\xa3\xac\x00(\x95*@"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    int_0 = -359
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    int_0 = -33
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    int_0 = -429
    int_1 = -1570
    tuple_0 = (int_0, int_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    bytes_0 = b"\x87\x17"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    str_0 = "1E}BZ*T?="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    float_0 = -1880.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    bytes_0 = b"I\x8a\xd3\xe7\x07\x06\x9f\x13\x1cR3\xdf\xf0PX\x8c\xf8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    str_0 = "*Obi&>D\x0c`\nTD3>>sh"
    module_0.match(str_0, str_0)


def test_case_585():
    pass


@pytest.mark.xfail(strict=True)
def test_case_586():
    int_0 = -1128
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    complex_0 = 44.8296 + 637.45j
    module_1.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0]
    module_0.match(list_0, list_0)


def test_case_591():
    pass


def test_case_592():
    pass


@pytest.mark.xfail(strict=True)
def test_case_593():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = True
    tuple_0 = (list_0, bool_1)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_596():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_597():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_598():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    str_0 = "k(qYN^s'7sj\r05y,BS"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    bytes_0 = b"\xed\x022\xe3\r\x0c/\x9b\xb7\xd0\xe6\x91R"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_601():
    pass


@pytest.mark.xfail(strict=True)
def test_case_602():
    bytes_0 = b"\xd4\xdc\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    int_0 = -1349
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    str_0 = '}\\I O(rh"l*X\t$Zy'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    str_0 = "E"
    list_0 = [str_0]
    list_1 = [list_0, str_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    bytes_0 = b"\xeeA\xd1\x93\xad\xfc\xe5\xed\x81\x1eaA\x87'\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    int_0 = 810
    module_0.match(int_0, int_0)


def test_case_611():
    pass


@pytest.mark.xfail(strict=True)
def test_case_612():
    float_0 = 10.2
    set_0 = {float_0}
    dict_0 = {}
    bytes_0 = b"\xd8X\xf4\x7f3\x93{d\xed\x11\xae"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    tuple_1 = (set_0, dict_0, tuple_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    float_0 = -2318.625
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    float_0 = -2889.625
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    complex_0 = 1398.5447 - 1685.171658j
    int_0 = -1011
    module_0.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    int_0 = 673
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    complex_0 = -503.8449 + 2956.937j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    bytes_0 = b"\x85\xe5[\x01j%.\xfaY%\xca"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    bytes_0 = b"\xb00\xab\x1a\xd2'\x1d\xee\xdbD\x0ecG^\x0fH"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    float_0 = -1856.443
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    int_0 = 2521
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    int_0 = -744
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    str_0 = "kq}gFv\x0bHiDBc{s>\x0bK&T"
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    float_0 = -958.329
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    int_0 = 2587
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    str_0 = '\x0cNp<"&'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_629():
    pass


@pytest.mark.xfail(strict=True)
def test_case_630():
    tuple_0 = ()
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    str_0 = "gZa]ZX7[a"
    set_0 = {str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    str_0 = "wpt6\\TtHTZ#"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    str_0 = '7fW07"MA3J2}6n^*'
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    bytes_0 = b"[\x014 \x07\x0f|\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    int_0 = -41
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    bool_0 = False
    set_0 = set()
    bool_1 = True
    tuple_0 = (bool_0, set_0, bool_1)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    int_0 = -1918
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    bytes_0 = b"\x8b\r\x85\xa1\xbe\xee\x8c\xb5\xa2\xd4\xe4\x17\xac\xeb\x9bD"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    complex_0 = -277.766 - 420.91654j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    bytes_0 = b"N\xf65\x9a\xe1\x0b\x0e\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    float_0 = -2617.1612
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    str_0 = "=J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    bool_0 = True
    int_0 = 244
    dict_0 = {bool_0: bool_0, bool_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    int_0 = 3485
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    float_0 = -1250.86045
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    int_0 = 859
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    str_0 = "HvrF(l"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    complex_0 = -138 + 1290.422j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    tuple_0 = ()
    complex_0 = -710.1813 - 1245j
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    int_0 = -521
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    bool_0 = False
    object_0 = module_1.object()
    set_0 = {bool_0, object_0, object_0, bool_0}
    list_0 = [set_0, object_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    float_0 = 1577.03162
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    str_0 = "h7\x0b/*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    bytes_0 = b"\xd8\x14\xc5\x96\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    bytes_0 = b"\xae\xf0.\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    bytes_0 = b"\xedi\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    str_0 = "I7(1a%xt"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    str_0 = "1@h;yCWM"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    int_0 = -580
    module_0.match(int_0, int_0)


def test_case_664():
    pass


@pytest.mark.xfail(strict=True)
def test_case_665():
    float_0 = -1386.623
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    int_0 = -1288
    dict_0 = {int_0: int_0}
    tuple_0 = ()
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    bytes_0 = b"?\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    complex_0 = 1775 - 745.556j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    bool_0 = True
    bytes_0 = b"\x08\t"
    complex_0 = -2591.3883 - 2636.41j
    tuple_0 = (bool_0, bytes_0, complex_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    str_0 = "sM2sbjj33"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    bytes_0 = b"}[\x1f\xba\xe7t\x1e\x99\x01\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    str_0 = "OS"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    bytes_0 = b"\xcb_\xd1\xb5\xf5\xb8\xb9\xe0\xf9\x05w\n\xaf\xbb"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    bytes_0 = b"\x96\x85:\x0e\xd8\xc8\xecaO\xfd%"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    int_0 = 3586
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    str_0 = "XU=x8Zwaaq:K%Ss>"
    bool_0 = True
    set_0 = {str_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    str_0 = "p"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    bytes_0 = b"\xa2\xea\xe4P\x80\x9d\x1f\xadGM\xb4\xd9eiv\xb6h\xd4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_682():
    pass


@pytest.mark.xfail(strict=True)
def test_case_683():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    bytes_0 = b"U\xdc\x07M\xa5\xdd\xc0\x1b\xed:\xa0?`\x03\x1c\x06"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    bytes_0 = b'B\xf5\xdc\xb4\x15\xc0"Z\x9c-"\xc96*\xdd'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    bool_0 = True
    str_0 = "\r"
    list_0 = [bool_0, bool_0, bool_0, str_0]
    tuple_0 = (list_0, bool_0)
    tuple_1 = (bool_0, list_0, str_0, tuple_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    float_0 = -2132.75048
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    complex_0 = -2623.412658 - 708.66j
    module_0.match(complex_0, complex_0)


def test_case_690():
    pass


@pytest.mark.xfail(strict=True)
def test_case_691():
    str_0 = "'HQ\x0bJ,=^b%G^\x0c96"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    str_0 = ";6\t<[1UTVJ,l.M%PMA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    str_0 = "8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    bytes_0 = b"\xdd:\x99\xff"
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    bytes_0 = b"6\xfa\xc7\x8b\xf7\xfbT\xde`\xc4\xc2\x02m+\xb5\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    int_0 = -781
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    int_0 = -4349
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    bytes_0 = b"\x97\xdbIc\xf6\x08\x9bD\xa4\x1ft\xfe\x87\xb8\xdd\xcb\xb3\x0e\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    str_0 = 'mizP+Gu7vf}m3"5>]M*'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    bool_0 = False
    tuple_0 = (bool_0,)
    int_0 = 3020
    tuple_1 = (tuple_0, bool_0, int_0, bool_0)
    int_1 = 2030
    tuple_2 = (bool_0, tuple_1, int_1)
    str_0 = "|$\t3$#<"
    list_0 = [tuple_2, int_1, str_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    int_0 = 2869
    tuple_0 = (int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_703():
    pass


@pytest.mark.xfail(strict=True)
def test_case_704():
    bytes_0 = b"\xb7Jz\x87\x85#\x9e\xd7\xfa\xb4p"
    set_0 = set()
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    float_0 = -1190.3581
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    str_0 = "a'nC@m]"
    float_0 = 2547.27
    int_0 = -251
    dict_0 = {}
    bool_0 = True
    str_1 = "tcM[4U"
    tuple_0 = (int_0, dict_0, bool_0, str_1)
    tuple_1 = (float_0, tuple_0, float_0, str_0)
    int_1 = -4791
    str_2 = "~9U;'8\x0br6-\x0b7\x0b]j?-s)7"
    tuple_2 = (tuple_1, int_1, str_2)
    list_0 = [str_0, str_0, str_0, tuple_2]
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_707():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


def test_case_708():
    pass


@pytest.mark.xfail(strict=True)
def test_case_709():
    int_0 = -817
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    complex_0 = -1567.02019 + 3063.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    str_0 = 'i:x"_'
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    bytes_0 = b"\xceC\xb6\\\x82\x06\x80\x86u\x82,i_O\xde?\xb0\xe1\xba\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    str_0 = "\x0c6rzz:#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    str_0 = "[U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    str_0 = "6wv)"
    bytes_0 = b"\xd6,\x0e\xd47\xe8}\xdd\xb2u\xbc\x05\xae\x7f\xfd"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    int_0 = -1413
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    complex_0 = 319.9 + 68.665093j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    int_0 = -1050
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    bytes_0 = b"\x0f/y\xe0+3+h\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    float_0 = 981.94786
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    bytes_0 = b"\xc9+h/\x04T\xda\xbe\xcd"
    dict_0 = {bytes_0: bytes_0}
    bytes_1 = b"\xb85?\x9f"
    list_0 = [dict_0, bytes_1, dict_0, bytes_0]
    module_0.match(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_726():
    str_0 = "yp!x\tpswt*\r8nwX/>h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    int_0 = 2279
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    complex_0 = -1108.24443 + 900.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    bytes_0 = b"b\x9d\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    int_0 = -497
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    bytes_0 = b"\xf0\xb1\xbf\x11O\xbc\xf9c\x8d_\x8c\xfd;\xeb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    float_0 = -5682.13809
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    float_0 = -1484.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    int_0 = 1410
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    int_0 = -3261
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    int_0 = -2678
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    dict_0 = {}
    int_0 = 1258
    tuple_0 = (int_0,)
    bool_0 = True
    tuple_1 = (dict_0, tuple_0, int_0, bool_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    str_0 = "UJU!)D7"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    int_0 = 187
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    int_0 = -328
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    bytes_0 = b"\xb5|\xddZ\x0fF@W-\x84\x8a\xd3T3\t"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    bytes_0 = b"\xe9("
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    complex_0 = 1299.5 - 423.43j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    str_0 = "V]+b&9\x0bx"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [str_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    bytes_0 = b"t\xa6\xfd\xb9D\x96\x04\xfa\xcc\x94\xb1\x98t\xed\xbc\xd2t\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    str_0 = "1T,d+CpY#0-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    bytes_0 = b"\x7f\x1fk\t^\x99j\x96\x0b\x86\xdd\x9f\xbeP\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    bytes_0 = b"\x9cO\x19`#\x12\x1e\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    bytes_0 = b"d2lM\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    str_0 = "'2_$nq~rQ|e/.4kT\"^^"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    float_0 = -983.08
    module_0.match(float_0, float_0)


def test_case_760():
    pass


@pytest.mark.xfail(strict=True)
def test_case_761():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = False
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_763():
    int_0 = -2180
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    str_0 = "JA>:),P=%_\nP\x0c"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_766():
    pass


@pytest.mark.xfail(strict=True)
def test_case_767():
    bytes_0 = b"\xf3\x80\x16p6\xbb\x10Yn\x8ew\xec\xc4\xa0b:-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    bytes_0 = b"\xe8\xdb\xa0\xbb\xa5?^=\xf4\xe7\xe2\xdf"
    float_0 = -4096.270472
    str_0 = "#["
    tuple_0 = (bytes_0, float_0, str_0)
    tuple_1 = (tuple_0, tuple_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    bytes_0 = b"\xc1e\xc5\xafeb[\x82J\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    int_0 = 847
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    complex_0 = 2940.834 - 1983.74j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    int_0 = -1853
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    bool_0 = False
    float_0 = -2000.6
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    str_0 = 'xbV"2IXn"FBR_<>$'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    float_0 = -2317.83894
    list_0 = [float_0, float_0, float_0]
    int_0 = 4064
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    int_0 = -454
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    float_0 = 2861.996474
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    bytes_0 = b"\x14\x88\xd8c\x1aw\xf6\x1a\xd6\xb1Y\xbe\xe0\x06/"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_785():
    pass


@pytest.mark.xfail(strict=True)
def test_case_786():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    str_0 = "jvK.9!=3'."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    str_0 = "G7JtU\rUJK@SKHRRX"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    int_0 = 13
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    float_0 = -1091.575125
    set_0 = {float_0}
    list_0 = [float_0, float_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    bool_0 = True
    set_0 = {bool_0}
    bool_1 = False
    set_1 = {bool_0, bool_0, bool_0, bool_1}
    module_0.match(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_795():
    str_0 = "r_UQ:HZA#!Xk3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    bytes_0 = b"\x9c\xfa\x04\x96\xa2L\xb2\xfctTJ\x8c-\x88A\x86\x92\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    str_0 = "EX8GL"
    float_0 = 1939.94
    tuple_0 = (set_0, bool_0, str_0, float_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    bool_0 = True
    int_0 = 1365
    module_0.get_new_command(bool_0, int_0)


def test_case_800():
    pass


@pytest.mark.xfail(strict=True)
def test_case_801():
    tuple_0 = ()
    list_0 = []
    list_1 = [tuple_0, list_0, tuple_0]
    bool_0 = False
    str_0 = "?`/:N*(>Q1\nOCWkPa"
    tuple_1 = (list_1, bool_0, str_0)
    module_0.match(tuple_1, str_0)


def test_case_802():
    pass


@pytest.mark.xfail(strict=True)
def test_case_803():
    int_0 = -1400
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    str_0 = "jPG?.O1/1G?\tA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    str_0 = "!JlQD,:\x0cwh41QwD~"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    int_0 = 4458
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    bytes_0 = b"\xb4\xfd\xfb}\xdd\xe1R\x9d\x8d)\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    int_0 = -4306
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    int_0 = -733
    set_0 = {int_0}
    bool_0 = True
    tuple_0 = (int_0, set_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    float_0 = 1472.2
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: float_0, bool_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    bool_0 = True
    float_0 = 2162.8942
    tuple_0 = (bool_0, float_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    float_0 = -96.513
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    none_type_0 = None
    int_0 = 471
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    str_0 = "RZlCO"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    float_0 = 262.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    str_0 = 'kV6%N"!|8frZ)v2:F'
    module_0.get_new_command(str_0, str_0)


def test_case_819():
    pass


@pytest.mark.xfail(strict=True)
def test_case_820():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    int_0 = -62
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    float_0 = 1606.50978
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    bytes_0 = b"\x7f\xa5\x80UX\xe7\x92k%e\xb4\x1d\xb8\xb5|\x14=\x96f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    bytes_0 = b"P\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    str_0 = "*UmyTv,,Z2(!{5)\n8O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    bool_1 = True
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_827():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    complex_0 = 370.87 - 2260.41j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    bool_0 = False
    int_0 = -2433
    bool_1 = True
    int_1 = -3325
    set_0 = {bool_1, int_0, int_1}
    tuple_0 = (bool_0, int_0, bool_1, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    str_0 = "Md[c&,heC H0Pjj3*Zr"
    complex_0 = 2455.3143 + 2958.99692j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    str_0 = "Haheq`o~+|-(bPfg."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    str_0 = "?~("
    complex_0 = 2883.1 - 1810.463j
    str_1 = '>Q\rN0^"x)<+Qp+\x0bB'
    tuple_0 = (complex_0, complex_0, str_1)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    dict_0 = {complex_0: complex_0, complex_0: str_0, str_0: tuple_1}
    tuple_2 = (str_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    int_0 = -567
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    str_0 = 'S"a)_ZyQSMnK'
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    bytes_0 = b"_\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    str_0 = "\x0b\x0c]"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    int_0 = 3199
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    str_0 = "-#z+\tgRPOMK;\x0c!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bool_0 = True
    set_0 = set()
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    str_0 = 'F@=)E.R>7)5\n5-9Z\n_"P'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    bytes_0 = b"uB\xe1\x13\x99\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    bytes_0 = b"\xdfK\xb4(\xb5\xe2\xe8\x8fn\x90n.\xd7w\xd8\x0b\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    str_0 = "5*`\\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = []
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    str_0 = "U-S2\n.Jlm!qk~Y"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    int_0 = -764
    tuple_0 = (int_0,)
    set_0 = {tuple_0, tuple_0, tuple_0}
    list_0 = [set_0, int_0, tuple_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    bytes_0 = b"Y\xf5\xa2~b\xfd`\xfe\x03\x9bg\xf9\x9dW"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    str_0 = 'p5c{@eExYQYN"4\r$#'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    int_0 = 2542
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    int_0 = 285
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    int_0 = -3181
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    str_0 = '`(YU!-"aa$YEszl"z='
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    bytes_0 = b"\xe7\x11\xe4H"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    str_0 = "J:p\\oUaR(;SNHF`r8"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    bytes_0 = b'\xdc\xc7\xbe5\xef\x08"\xc9+\x03\x8e^\x93L\xbc\xa2\xea\xe4\x926'
    tuple_0 = ()
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    str_0 = 'R"zb2jPGDl~Ns~'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    str_0 = "e\tJ`"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    int_0 = -2634
    module_0.match(int_0, int_0)


def test_case_864():
    pass


@pytest.mark.xfail(strict=True)
def test_case_865():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    str_0 = 'cL/i97"p3a-6"5R9'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    str_0 = "F2/z?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    float_0 = 5769.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    int_0 = -3756
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_872():
    pass


@pytest.mark.xfail(strict=True)
def test_case_873():
    bytes_0 = b"\x01\x10\x1b_T\x14"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    bytes_0 = b"\xe7\x90\xa0\xf5\xa4\xdf\xe4\xceDT\xe3X\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    float_0 = -2289.0
    bool_0 = True
    list_0 = [float_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    bytes_0 = b"\xe8\xec\r{\x11\xdc\x94\\\xef\xa4w@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    bytes_0 = b"\xea\x8b\x0b\xd6\x8f\xaa.\x858\xee\xf4\x96b"
    bool_0 = False
    dict_0 = {}
    bytes_1 = b"\x8f\xeb\xe2\x12\x02\x02\xd3B\xfb"
    tuple_0 = (dict_0, bytes_1)
    tuple_1 = (bytes_0, bool_0, tuple_0, tuple_0)
    tuple_2 = (bytes_0, tuple_1)
    tuple_3 = (bool_0,)
    module_0.match(tuple_2, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_879():
    bool_0 = True
    bool_1 = True
    int_0 = 536
    list_0 = []
    tuple_0 = (int_0, list_0)
    tuple_1 = (bool_0, bool_1, bool_1, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    str_0 = "g.u^*|ZK&>K2dG\n?tq#A"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    int_0 = -1113
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    float_0 = 1418.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    str_0 = "tYw;\rX2\x0c,<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    bytes_0 = b"\xb7\xd2\xc1\xc6\x0b"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    bytes_0 = b"\x01}c\xee\xf3\xf5\x8f\xac2\x0b\xa6u\xe9v\xca\xa5\xb0\xe3r"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    float_0 = 268.539
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    float_0 = 446.65
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    str_0 = "O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    str_0 = "I\x0cc8(^ir\r1Uz\x0c~Z="
    tuple_0 = ()
    dict_0 = {str_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    bytes_0 = b"\x15\xfa\xb4\x08F\xc7\xedQ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    set_0 = set()
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (set_0, bool_0, set_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_894():
    int_0 = 1814
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    str_0 = "a}:yxaKf}61DJm4$#j^"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    int_0 = 4150
    module_0.match(int_0, int_0)


def test_case_898():
    pass


@pytest.mark.xfail(strict=True)
def test_case_899():
    float_0 = -245.989213
    bool_0 = False
    list_0 = [float_0, float_0, bool_0]
    list_1 = [list_0, float_0, bool_0, float_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = True
    bool_2 = False
    str_0 = "F4o"
    bytes_0 = b'/x"\xcd\x91\x9dV\x06\xb1\xa2r\xd5<\xa6x'
    tuple_0 = (str_0, bytes_0)
    tuple_1 = (bool_1, bool_2, tuple_0, tuple_0)
    int_0 = 133
    tuple_2 = (list_0, tuple_1, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    set_0 = set()
    list_0 = [set_0]
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_902():
    int_0 = 1222
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    int_0 = -2418
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    bytes_0 = b"\xbdZ\xf5\xb1'\xba\xa4\x8aw\xb2s \x91"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    bytes_0 = b"a\xd5\n9\x16\xe3\x08T\xd5kU\xe7\x11\x0e\xc3\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    int_0 = -1914
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    str_0 = "cq-rmI!U(<\x0cn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    float_0 = -67.8285
    tuple_0 = (float_0,)
    str_0 = "^ln\x0bkEieU{Xy@W\\g"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_912():
    pass


@pytest.mark.xfail(strict=True)
def test_case_913():
    bytes_0 = b'\xe0\xbc\xfb"GR\x0f\xd2\xfaCF\xb4t'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    float_0 = -417.321
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    int_0 = -1384
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    str_0 = "-e0+'?wP$Bd"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    str_0 = "Of-W%OJJL4$5o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    int_0 = 920
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    bytes_0 = b"\x9b\xae\xbc\x0e\xe1\xc0\xf0\xcd\x91D\xc6"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, dict_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    int_0 = 239
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    bytes_0 = b'{\xb3\x94\xd69\xeb\xae\xa5"z\x0c\x87'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    str_0 = ":l~Xz@y.N00pN'>xC?Z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = ""
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


def test_case_930():
    pass


@pytest.mark.xfail(strict=True)
def test_case_931():
    bytes_0 = b"\xfb\xc5"
    float_0 = 2257.41
    list_0 = [float_0, bytes_0, float_0, float_0]
    tuple_0 = (bytes_0, float_0, list_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    int_0 = 359
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    bytes_0 = b"\xd5\x86\xa0\x8e\xd9\\\x16z\x1f\xb0\x8c\xc2I"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    complex_0 = 293.75997 - 1197.8j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    str_0 = "T7t\x0b.,rRp(527"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    int_0 = -408
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    int_0 = 477
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    float_0 = -1057.17
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    int_0 = -1533
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    float_0 = -587.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    bool_0 = True
    bytes_0 = b'+\x9f\xe2\xd8\xb3\x0f\xf1e"~m\x8a\xd6'
    dict_0 = {bool_0: bool_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    str_0 = "c\x0b%kkB\x0cXmh1+*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    bytes_0 = b"\xef^\xdb"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    bytes_0 = b"\xd9\x156Y^>S\xf5I\xe4a'c\xbe\xb1S\xec\xcb\xd3\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    int_0 = 1185
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    bytes_0 = b'%p\xcdU\x17\xaa\xbd?g\x88"\x99\xd8m\x063'
    bool_0 = True
    dict_0 = {bool_0: bytes_0}
    str_0 = ":(>\\@T%tATQ,%P|e"
    bytes_1 = b"\x94Mgvo\x93~H\x0c\xa5\x1d\x91\xb0#\x13)r\xed\x80"
    tuple_0 = (bytes_0, dict_0, str_0, bytes_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    str_0 = "KAJ+boZ^ 5DSW\x0cx?oL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    none_type_0 = None
    int_0 = -549
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    str_0 = "tRk\n$Wen"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    int_0 = -1468
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    bytes_0 = b"\x83\xecQ\xae\x04O\xe9\x1eaj\xd1\x10(u\xaf\x93f\x99\xea"
    set_0 = {bytes_0}
    int_0 = 789
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    int_0 = -1894
    module_0.match(int_0, int_0)


def test_case_958():
    pass


@pytest.mark.xfail(strict=True)
def test_case_959():
    str_0 = "L;yb}'F6.Wb"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    str_0 = "a:Hc[%U06g|-3U\r"
    int_0 = 3644
    bool_0 = False
    tuple_0 = (str_0, int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    dict_0 = {}
    str_0 = "u"
    module_0.match(dict_0, str_0)


def test_case_962():
    pass


@pytest.mark.xfail(strict=True)
def test_case_963():
    float_0 = -1345.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    float_0 = -1009.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    bytes_0 = b"\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    int_0 = -110
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    str_0 = "~`W"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    complex_0 = 3514.804 + 1324.7618j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    bytes_0 = b"w\xbby}gx\xa1\xb1]F\xc7;\xc2vSd\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    str_0 = "K`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    int_0 = 1901
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    bytes_0 = b"\xf8wyK>\xc8"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    str_0 = "T$r4\tH6p69bC5#J }YZ"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    bool_1 = False
    bool_2 = True
    tuple_2 = (bool_0, tuple_1, bool_1, bool_2)
    module_0.get_new_command(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    float_0 = -537.88769
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    int_0 = -1767
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    bytes_0 = b"\x8a :\xb5\r\x9ce\xdb\xe5\xbc\x84\x1cu\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1, bool_1: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    complex_0 = -919.6 - 319.9j
    tuple_0 = (set_0, complex_0)
    list_0 = [bool_0, tuple_0]
    float_0 = 70.8
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    str_0 = "x>rX 6\x0b#f)"
    str_1 = "\x0cPQ}k9g5,|\t.v-wnh g"
    dict_0 = {str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    bytes_0 = b'\xba\xaaK\xe9\x0f\xf8GG\xfa\xe4\xef\x81e"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    str_0 = "\\yg%,YPiejiX^"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    str_0 = "u"
    module_0.get_new_command(str_0, str_0)


def test_case_986():
    pass


@pytest.mark.xfail(strict=True)
def test_case_987():
    str_0 = "mmIWb\t=q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    bytes_0 = b"}JFG-\xee\xa7:\xdaq\x0f2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    int_0 = 603
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    bytes_0 = b"\xfb\xa1\xce\x8dt\x7f\xeb\xf1\xf6mA\xaa\xd3\x10"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


def test_case_993():
    pass


@pytest.mark.xfail(strict=True)
def test_case_994():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    object_0 = module_1.object()
    list_0 = [object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    bytes_0 = b"\xa4\x1c\x17t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    none_type_0 = None
    int_0 = 398
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    str_0 = "R_@(lh{URrQ5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    str_0 = "S"
    list_0 = [str_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0, list_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    complex_0 = 909.4 - 1205.290943j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    int_0 = -2055
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    str_0 = "RNFw^|)u"
    str_1 = "'t3ahI9`"
    bool_0 = False
    tuple_0 = (str_0, str_1, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    bytes_0 = b"\xd5\x85\xf0J\xe9Bb\xbdZ`tOb\xfa\xba\xcaZ\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    int_0 = 733
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    int_0 = -4393
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    str_0 = "tj`;]#.*\x0c#"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    str_0 = "B< fTU"
    str_1 = "}=YVv\x0cNa,p^\tg\tfTdie"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    int_0 = -45
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    str_0 = "144YHFl(:.x-;.\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    int_0 = 530
    int_1 = -183
    list_0 = [int_0, int_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    str_0 = "#o5\x0b7K=,tf&"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    bytes_0 = b"\x8cq\x11\xb9\n3\x1f5=#\x1d\x81"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    int_0 = 2483
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    str_0 = ",`=xNm\tKu\x0bX\t`*O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    float_0 = 90.547
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    int_0 = 2836
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    bytes_0 = b"\xa4\x1b\xdc\xfb\x14\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    bytes_0 = b"|\xb1"
    str_0 = "n"
    int_0 = -2805
    tuple_0 = (bytes_0, bytes_0, str_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    str_0 = "\x0cwMv`HK,TvAw#ulpcML"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    int_0 = -700
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    bytes_0 = b"\xe7<\xe3(\x92\x1c3\xb7V\xa3\x9bN\xe0\xf1\t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    none_type_0 = None
    int_0 = -4386
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    bytes_0 = b"\xc3\xb1,e\xf3\xb9\xefb\xe9\x105\xe5\x86\xb4\x03"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    int_0 = 769
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    bytes_0 = b"\x9ak\x14\xe6t\x17\xd6\xb7xwQ\xcf\r\x7f\xc7\xa5\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bytes_0 = b"i\xb5\xe0\x8d\xde\xf2\xe2\xe0\x169^\xe4\x02)Qw\xbc\xe9A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    bytes_0 = b"\xe4O\x18\x81\x16\xb6\xe3\x84\x87\xc3\x1f\xba\xa8\xc7\x0bsV"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    bytes_0 = b"0\xcf\x99\xda\x07\xe0"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    int_0 = -1268
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    set_0 = set()
    str_0 = "hSw}_\r7Gn"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    int_0 = -967
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_1040():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1041():
    float_0 = -1670.639
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    bytes_0 = b"5\x05\xd2\x0c\x8e\x90\x03\rN{\xf0\xc4H\xe2\x8bhHUt"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    complex_0 = 1447 + 935.52933j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    float_0 = 351.1997
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = "1RfD!%9\x0cO:tW"
    str_1 = "9Fn{-*1"
    dict_0 = {str_0: none_type_0, str_0: str_0, str_1: str_1, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    int_0 = 886
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    str_0 = "3CuZZekk\rz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    int_0 = 1782
    module_0.match(int_0, int_0)


def test_case_1051():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1052():
    int_0 = 1677
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1054():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1055():
    str_0 = "8ge^%r:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    complex_0 = -492.875 + 1208.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    str_0 = "oL+\r"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    float_0 = 2400.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    int_0 = -654
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    float_0 = 1265.4
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


def test_case_1062():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1063():
    list_0 = []
    bytes_0 = b"\xd5a\x9a\x1d\xa4\x84\xbc\x89f\xb9l)^\xd9"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    float_0 = -4695.657
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    str_0 = "aD0;I0JL"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    str_0 = "h.b\tP\x0cA(\\YR>k-oLX?)"
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    int_0 = -1154
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    int_0 = -1978
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    bytes_0 = b">\xbf\xa6#\x98\xf8\x1f\x18S\xec\xa6\x81\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    bytes_0 = b"\xa2Ex\xcb\xbb\x18\xc2\x91\x85Z\xee\xa6l/~r\xcc\x08\xcd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    int_0 = -823
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    float_0 = -4295.27
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    bytes_0 = b"M\xb5P\x15\x1d0\xf3%\xe9@\xaf\xd5\xa39gf<\xf1>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    bytes_0 = b"\x15\xc6\x9f\xd8\x8f\xe7\x11"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    bytes_0 = b"\xd7\x8bL\x19!\xa8\x0ct\xbe\x94>\xabW\xc8y\x08"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    int_0 = 541
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    bytes_0 = b"\xd5\xa3\x1a"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    bytes_0 = b"\xe1\x8a\xb3\xe7\xb4'\xbaaJ\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    str_0 = "%C"
    module_0.match(str_0, str_0)


def test_case_1085():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1086():
    bytes_0 = b"\xf0\x84\x15\x08h\x8d\x82\xee\xba"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    str_0 = ";%l2"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    int_0 = 389
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    int_0 = -401
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    int_0 = -477
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    float_0 = -15.2
    set_0 = {float_0, float_0, float_0, float_0}
    bytes_0 = b"M#c\xf4\x1av&\xd4\x086\xee"
    tuple_0 = (set_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    bytes_0 = b"\x97\xc1\x19\t4\xfa\x86"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bytes_0)
    list_0 = [bytes_0, bytes_0, tuple_0]
    dict_0 = {bytes_0: list_0, bool_0: list_0, bool_0: list_0, bytes_0: bool_0}
    tuple_1 = (dict_0,)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    str_0 = "aL@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    float_0 = -929.05
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    int_0 = -2132
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    float_0 = 1646.9
    bool_0 = True
    set_0 = {float_0, bool_0, float_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    str_0 = "[@@mCe9o5tudh(1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    str_0 = "CN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    complex_0 = 682.63 - 1373.37j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    int_0 = 667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    str_0 = "^X\t"
    list_0 = [str_0, str_0, str_0, str_0]
    float_0 = 3242.0
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    int_0 = -3653
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    int_0 = -1690
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    int_0 = 1670
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    bytes_0 = b"\x80\xd5R\xbaST\x16\x80\xb7\xa5\x16\x86\x9f\xf9\xce\xd1L\x94\x81\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    bytes_0 = b"\xa1\xf8\x95\x88\x85\xb2\xab\xccy\x9c\xf5x\xf4\x87\x04I\xdb"
    dict_0 = {}
    bytes_1 = b"!"
    bool_0 = True
    tuple_0 = (bytes_0, dict_0, bytes_1, bool_0)
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    bytes_0 = b"\x94\xf5\xcda\x92\x95\xeb\x01\x16q\x0fo\x1a\x986H\x8d"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    int_0 = -1369
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    float_0 = 4339.24035
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0, set_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    int_0 = 3290
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    bytes_0 = b"\xab\xb1\x8es"
    bytes_1 = b"\xf1\x8cp\x99\xaeI\x8a\xd6j[\xa8\rQZ\x87\x87"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_1, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    bytes_0 = b"S\x80n\x0e#"
    float_0 = 2925.74
    list_0 = [bytes_0, bytes_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    str_0 = " m"
    bytes_0 = b"\x87\x8a\xd7\xa6\x86\xc0\xdd%\xad\xcb\xc3K&\xad\x86/O"
    bytes_1 = b"\xf6\xb8\x82<\x85"
    bool_0 = False
    tuple_0 = (bytes_1, bool_0, bytes_1)
    tuple_1 = (bytes_0, tuple_0, str_0)
    bool_1 = True
    list_0 = [str_0, tuple_1, bool_1]
    tuple_2 = (str_0, list_0)
    tuple_3 = (str_0, tuple_2, bytes_0)
    dict_0 = {}
    module_0.get_new_command(tuple_3, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    bool_0 = False
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    complex_0 = -4238.9 - 1545.257j
    float_0 = 746.0
    module_0.get_new_command(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    float_0 = 754.737
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    int_0 = 1250
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    bytes_0 = b"\xb6\xf2E+\xb1\xf9\xddj@\xb3\x95\x8c\xbb\xde\xb3\x06:X7B"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    str_0 = "ahI'~!!o<S#<7\r"
    str_1 = "&wfQ\r);4a5H>$\rzQ|:3"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    bytes_0 = b"YU\x8f\x83\x98\x8co"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    int_0 = -238
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    str_0 = "~/O^%9tqy{=Van/Y?I"
    list_0 = [str_0]
    list_1 = [list_0, str_0, list_0]
    tuple_0 = (str_0, str_0, list_0, list_1)
    module_0.match(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    complex_0 = -1997.915 - 2220.67175j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    str_0 = "q~&\x0b"
    dict_0 = {str_0: str_0}
    module_0.match(str_0, dict_0)


def test_case_1138():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1139():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, set_0, bool_0, set_0]
    bool_1 = False
    tuple_0 = (bool_0, set_0, list_0, bool_1)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    int_0 = 659
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    int_0 = 3264
    list_0 = [int_0]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    bytes_0 = b"$\xa1c\xab/\x99\xef!\xf3\xc0\x90\xf0c\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    bytes_0 = b"V\xcc\xcfC\xf3\xb0\x9a\x8e"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    int_0 = -1372
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    dict_0 = {}
    str_0 = "(|9$B)9 EN\n;A4Z;"
    bool_0 = False
    tuple_0 = (str_0,)
    tuple_1 = (dict_0, str_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    str_0 = "ra`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    float_0 = 4099.03
    str_0 = ";"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    str_0 = "_+T\rE\t:lQ\t\\#;\x0c3C2>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    bytes_0 = b"-1\xb7L\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    int_0 = -594
    tuple_0 = (int_0,)
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_1155():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1156():
    int_0 = -545
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    bytes_0 = b"F\x1a\xf6r\xb2\xc6\xfc\xed\xa9\xda-"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    none_type_0 = None
    int_0 = -582
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    complex_0 = -733 - 3695.98j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    float_0 = -497.4
    int_0 = 49
    set_0 = {float_0, float_0, int_0, float_0}
    tuple_0 = (float_0, float_0, int_0, int_0)
    tuple_1 = (float_0, set_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    bytes_0 = b'"\xe0VK\xee;>\x8a\x91'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    float_0 = -4033.135984
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    float_0 = 1177.655
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    str_0 = "4"
    str_1 = "!~ZA/&m(\n\\d(}/`u"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    int_0 = 3169
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    float_0 = 1000.1224
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    str_0 = "z+7uUU"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    int_0 = -4141
    bytes_0 = b""
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    set_0 = set()
    str_0 = "Z!<u<#&$z"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    bytes_0 = b"\x10\xe4\x15\xdb\xd7\x1a>\xe2G1]|)\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    bool_0 = False
    tuple_0 = ()
    list_0 = [bool_0, tuple_0, tuple_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    bytes_0 = b"\xd8\xbe3\xa0\xe0\xe0\xa4\xf5\xda\xdf\x0c\x1b8\xc7\xfdk\xd7\x8e\xf9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    int_0 = 1844
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    bytes_0 = b'\x1c\xc0\xb17\x97\xb7/\xeaB\x10.tD\xac".\x83\xf6\xfa\x12'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    int_0 = 2611
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    int_0 = -746
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    bytes_0 = b"\x0fP\\"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    str_0 = '&Ijq",R6'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    int_0 = 3227
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    bytes_0 = b"A\xaeH\xfd\xa7Jv06\xbe\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    str_0 = "exbxrcZ;q$m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_1184():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1185():
    str_0 = "2rJm)9[>=~_Kl"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    complex_0 = -57.981825 - 3137.24017j
    set_0 = {complex_0, complex_0}
    none_type_0 = None
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    str_0 = ">b6:y<L\x0b\x0c"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    str_0 = ",j"
    set_0 = {str_0, str_0, str_0}
    int_0 = 370
    tuple_0 = (set_0, str_0, int_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b"\xab\x11G\xfd\x1e\xea\xae\xedl\\\xc9,\xecgk3\xe8\xd4\x0b\xcb"
    tuple_1 = (tuple_0, bytes_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    float_0 = -33.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    int_0 = 2021
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    complex_0 = -12.7 + 2346.3793j
    int_0 = 2237
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    bytes_0 = b"IP\xee\x8b\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    int_0 = 370
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    int_0 = 4618
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    bytes_0 = b"T\xdb~\xa3\x13o\x0e\xe0\x0eQ\xa0\xf2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    str_0 = "_H2tOa\\cJU+ 7^&%'D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    int_0 = -1285
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    int_0 = -996
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    bytes_0 = b"\x0eg\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    str_0 = '(=t\rmC\x0b"cbiPDNl34'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    bytes_0 = b"\x91"
    float_0 = 21.861
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, float_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    int_0 = 4163
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    complex_0 = 4164 - 90.175j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    bytes_0 = b"!;\xa6Q\xf4keB\xaaS\xa9\x1d~\x19\xf1\xb2\xf8kC\xc1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    int_0 = 4578
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    bytes_0 = b"\x19"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    str_0 = "<x9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    float_0 = -644.31
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    int_0 = 1097
    list_0 = [int_0, int_0]
    bytes_0 = b""
    tuple_0 = (list_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


def test_case_1216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1217():
    str_0 = "6\rcN'Y3li+8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    bytes_0 = b"h\x90\x16\xc9p \x03\x8cz\xd1\x0c\xd6\xb6C<\xa1\xa8\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    bytes_0 = b"\xad\xb1\x19(\xcf{^Z\xd5\xc9\xef\x10"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    int_0 = -994
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    bytes_0 = b"\xb8i%\xd3${\xfc\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    str_0 = "x@+yWXC#GUkO\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    str_0 = "B#7 i9S&8f8t"
    str_1 = "$!"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


def test_case_1225():
    pass


def test_case_1226():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1227():
    int_0 = -2049
    bytes_0 = b"\xcf~\xa3"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    float_0 = 1770.04
    module_0.match(float_0, float_0)


def test_case_1229():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1230():
    str_0 = "I\nh1Pw6e#"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    float_0 = 511.0
    module_0.get_new_command(float_0, float_0)


def test_case_1232():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1233():
    int_0 = 134
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    int_0 = 1522
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    bool_0 = False
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    int_0 = 3917
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    bytes_0 = b""
    float_0 = 2335.45
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bytes_0 = b"\xc4\xc9Rd\x9d\nFl\x99\xbe\xf2\xffJ\xc2<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_1241():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1242():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    int_0 = -2625
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    bytes_0 = b"\x15\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    set_0 = set()
    bytes_0 = b"O49x>"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    float_0 = 2834.65
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    str_0 = "P,^,-s\n"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    bool_0 = False
    float_0 = 2234.919
    bool_1 = False
    set_0 = {bool_0, float_0, bool_1, float_0}
    list_0 = [set_0, float_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    int_0 = 1611
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    float_0 = 1785.0
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    tuple_0 = ()
    bool_0 = True
    list_0 = [tuple_0, tuple_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    int_0 = 1126
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    list_0 = []
    tuple_0 = (list_0,)
    list_1 = [tuple_0, tuple_0, list_0, tuple_0]
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bytes_0 = b'\x1a\xb5\xb9t"s\xcd\x9c'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bytes_0 = b""
    set_0 = set()
    tuple_0 = (bytes_0, set_0, bytes_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    int_0 = 3130
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bool_1 = True
    str_0 = "XT&By 7jTD#m!NHXsJkf"
    bytes_0 = b"\t\x1d\x11a#n\xe1\xf0l\x9e\xbe\x9f"
    tuple_0 = (str_0, str_0, bytes_0, bool_0)
    tuple_1 = (bool_0, list_0, bool_1, tuple_0)
    module_0.match(tuple_1, tuple_0)


def test_case_1263():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1264():
    float_0 = 1643.11082
    bool_0 = True
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    tuple_0 = (float_0, bool_0, dict_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    bool_0 = False
    str_0 = '[Ep"3L)8bEXd"@'
    set_0 = {bool_0, bool_0, bool_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    str_0 = 'cFZR6"=I'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    float_0 = 2648.311
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    bytes_0 = b"Q\x02R\xd4\xda\xc4\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    int_0 = -3513
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    str_0 = "~UF\tn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    float_0 = -2325.382618
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    complex_0 = -1429 - 1610j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    int_0 = 1848
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    int_0 = 1450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    bytes_0 = b"\xfdx\xa1(\xceu\xd0\xbaV\x0e\xd6\xdb\x97@\xa30Z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    float_0 = -47.171
    str_0 = "v{r$VW!_hn"
    dict_0 = {str_0: str_0, str_0: float_0, str_0: str_0}
    module_1.object(*float_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    int_0 = -2270
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    str_0 = "}6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    bytes_0 = b"\x1d}\xe7\xf2\xf9)\x01\xf6?P+\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    str_0 = "G_fW\x0bEJ\\t/.C1\r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    float_0 = 170.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    bytes_0 = b"1C\xaf\xf0\xb5\x08\xab\x18"
    list_1 = [tuple_0, list_0, tuple_0, bytes_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    bytes_0 = b"93\xb4\xe1\xb3a\xa2y\x050\xab\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    bytes_0 = b"\xbb\xfa\x8a\tZi\xdd|\xe3\xedt\x82\x81\xad\xa3]e\xe9"
    str_0 = "-Y2[D:]mW}TiL\x0bSHx<D"
    set_0 = {bytes_0}
    tuple_0 = (str_0, set_0)
    module_0.get_new_command(bytes_0, tuple_0)


def test_case_1286():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1287():
    int_0 = 1846
    set_0 = {int_0, int_0, int_0, int_0}
    int_1 = 1858
    tuple_0 = (int_0, set_0, int_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    str_0 = "?C\\h-b/rN.6S)U#[j"
    dict_0 = {str_0: str_0}
    list_0 = [str_0, str_0, str_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b"\xc4\x89p6\x83N\xfd\xee>\xf2\x0e\xa3:\xc8_\xcf\xbb\xa2M\xad"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    str_0 = '/_{Q\x0boEBw06""+'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    str_0 = "59"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    bytes_0 = b"\xde\xc8e"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    str_0 = "\r?yjQ^Jm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    int_0 = -2104
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    bytes_0 = b"j?\xc8~\xe2\xbd$\x81\x91m\xf6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    str_0 = ".CKp2\n"
    int_0 = 1908
    list_0 = [str_0, int_0, int_0, str_0]
    dict_0 = {str_0: str_0, str_0: list_0, int_0: int_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    bytes_0 = b"\xa0\xc1[0\x1e\xa1+o\x1cKA"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    int_0 = 246
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    float_0 = -664.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    str_0 = "\n:SLl)-C"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    bytes_0 = b"Y\x8c\xe8\xe3\x84\x87\xb1\xb8\xb0\xec\xe3\x00\xd0\xdc[\xe3\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    int_0 = 2690
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    bytes_0 = b"\x92\x94\x1fL;\xb9C=z&\xd66\xfcR"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = True
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    int_0 = 1758
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    str_0 = "D!MNEzM92AGo"
    set_0 = {str_0, str_0, str_0}
    bool_0 = False
    list_0 = [set_0, bool_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    float_0 = -585.1761
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_1311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1312():
    float_0 = 2766.05
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    str_0 = "J[Rm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    bytes_0 = b"\xf7\xf8m\xf5`A\x1a\xef\xb9\n"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    str_0 = "2F![.Fm"
    list_0 = [str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    int_0 = -1315
    tuple_0 = (int_0,)
    set_0 = {int_0, int_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    str_0 = "pCb\nZ>("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    bytes_0 = b"\x009m\x7f\xea\x98-r"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bytes_0 = b"\x04\xae\xa6\xb3\xee\xe0\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    int_0 = 1708
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    str_0 = ")l])~N;\tVSj"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    str_0 = "`xD\x0cF[h*`"
    module_0.match(str_0, str_0)


def test_case_1324():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1325():
    bytes_0 = b"I\x1c\x99-\xf2\xcc\xcc\x8b9L"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    int_0 = 2409
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    int_0 = -757
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    float_0 = 25.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    none_type_0 = None
    float_0 = 735.114603
    module_0.get_new_command(none_type_0, float_0)


def test_case_1331():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1332():
    str_0 = "\x0b`Z|m@]"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    float_0 = 1277.047
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    complex_0 = -3716.7554 + 1588.0287j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    int_0 = -1735
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    int_0 = -1101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    int_0 = 2437
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    complex_0 = 1250.7127 + 2238.4j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1340():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1341():
    int_0 = -775
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    int_0 = -1229
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    int_0 = 2430
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    complex_0 = 740.339257 - 2492.8731j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    int_0 = 1903
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    int_0 = 1925
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    complex_0 = 2317.23 - 35.87j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    str_0 = "z4B~TEN\\K\nmF7Ex):x"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    bytes_0 = b"\x89K}\xa2\xa3\x17\x83R\xe2\xaf\x95\x1bEYl\x86"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    str_0 = "G4@`~vEi{$;0x}g.58"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    bytes_0 = b"\xfe\xe8x\xbcZ\xa1f\xebd\t\xc7\xc0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    bytes_0 = b"\x0b\xe2\x8c\xcf\x007C\xa4\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    complex_0 = 1469.5 - 1306.1699j
    tuple_0 = ()
    list_0 = [complex_0, tuple_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    complex_0 = -2474.0066 - 797.42j
    module_0.match(complex_0, complex_0)


def test_case_1358():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1359():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    float_0 = -1577.60752
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    bytes_0 = b'\xdbz\xf9"Oq\xf1'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    object_0 = module_1.object()
    float_0 = 2213.44841
    dict_0 = {object_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bytes_0 = b"\xd2\x90\xd1]v=\xd5<!w\x0b\xaau6{o\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    float_0 = 1951.927
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    bytes_0 = b"\x98a"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    bytes_0 = b"t\xfe7`\xd6\rb\xbd'f-p\xd3\x90\xfcz\xb2u\x87\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    bytes_0 = b"\x8ag\xea\x88l"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bytes_0 = b"\xfc\xa6\xba\xe8C"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    str_0 = "@s/|P`=@;\n^6!*-[nfy%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    str_0 = 'c.m"+4;7q,6V\x0b[_l'
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    int_0 = -435
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    float_0 = 396.9607
    str_0 = "DT!xp>p7utHfE;@"
    int_0 = 2995
    bytes_0 = b"\xf7"
    tuple_0 = (float_0, bytes_0)
    tuple_1 = (float_0, str_0, int_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    int_0 = -4939
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    object_0 = module_1.object()
    dict_0 = {}
    tuple_0 = (object_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    bytes_0 = b"\xe9\xd9\xb0#*\x1a\xc6\t^ <\x0c:\x19\xf2W\xbe\xd2\x84"
    set_0 = set()
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    bytes_0 = b'\xe6"r\xdf:\xef\xf9$\xd5\xbd\xd2\x89\r\x8c '
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    str_0 = "~\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    float_0 = -764.95823
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    str_0 = ">M|2z-,o5D[}l.T`qO[a"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    str_0 = '=}}}2h9m%dP34Y^"\rf'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    bytes_0 = b"\x12"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    int_0 = -1624
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    int_0 = -1047
    float_0 = -3192.04
    bytes_0 = b"bJ1a\x13("
    tuple_0 = (int_0, float_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    none_type_0 = None
    int_0 = -4650
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        int_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    str_0 = "DBQt#SE"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    int_0 = -5688
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    bytes_0 = b"\x19&\xcc\xc4\xfd\xff*\xca\x8en\xa1M\x9bgz\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    bytes_0 = b"\x91\x05]|X\xfb*\x9e\xee\x19\xcd\xecRY\x87\x0f\x85"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    str_0 = 'Yspy"OL]r;8\t'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    bytes_0 = b"\xce\x94\xc0\x14\x80\xb2&\x07E\x18\x93S\n\x9f?\x003\xba\xde\x0c"
    bool_0 = False
    dict_0 = {bytes_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bytes_0 = b"\xb5\xd2\xed"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    str_0 = "(\x0ccUFugR;qjjyl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    str_0 = ")\x0bX\r8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    float_0 = -3079.1626
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    float_0 = -1694.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    int_0 = -3239
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    int_0 = 787
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    int_0 = -1531
    str_0 = "cp:4;7kyd[WB/`r#"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    object_0 = module_1.object()
    int_0 = -3987
    list_0 = [object_0, object_0, int_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    str_0 = "uU,\\7ADDLo$.<{7i.C,"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    str_0 = "3v4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    str_0 = "D%:\\fMR%GhY!g^8ts"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1415():
    int_0 = 1103
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    bytes_0 = b"\xd8\x978t.\xffj\xff\xado\xf9\xc2\x11\xe7)\xe0V"
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    bytes_0 = b'\xbb\xd7\xa4\x18\xd5\xad\x1e\x02\xd4\xc2\x19s\xfa\xfd"A\xbe\xac7\xe3'
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    int_0 = -1230
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_1: bool_1, bool_0: bool_1}
    module_0.get_new_command(bool_0, dict_0)


def test_case_1421():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1422():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    int_0 = -1779
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    str_0 = "t[?.-rwS3Aq0LX%*E!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    bytes_0 = b'"\xe9p\xad=\x9d\xfd=\x9c\xe7D\xb2E\x1f\x9c\xb5\xaf\x1c\x84'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    none_type_0 = None
    int_0 = -3169
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    bytes_0 = b"\x15\xf2\x97\x80\xbe`&:\xc4\x88\xd2pg\xff\x1d]d\xf2\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    bool_0 = False
    float_0 = -261.0
    dict_0 = {bool_0: float_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    str_0 = '9!$&"u'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1431():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1432():
    float_0 = 2099.0
    module_0.match(float_0, float_0)


def test_case_1433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1434():
    str_0 = "+ZW/4QQI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    float_0 = 1707.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    int_0 = 994
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    bytes_0 = b"\xcf\x14%B\n\x1f\xc9^\xbe%\x1d\x89\xc4\xdd\x8b\x0eg\xc5\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    str_0 = "5?t("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    int_0 = 1741
    bytes_0 = b"="
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    bytes_0 = b"\xf3\xca?\xf4\x05s\x82\x95\xd0+GT\x03\xd4^\xe6V"
    int_0 = -3042
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    str_0 = "b0(g#sh!qHtU!y\tR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    str_0 = "^\nFwpcB}"
    list_0 = [str_0, str_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    str_0 = "\x0cRjkOBsz/c"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    bytes_0 = b'\xaam\xfa"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    str_0 = 'ZRR6Hzx+ko":Mck'
    module_0.match(str_0, str_0)


def test_case_1450():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1451():
    complex_0 = -1715.12 + 2733.34174j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    complex_0 = 923.25 + 1265.406j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    complex_0 = -1159.81 + 3151.29338j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    str_0 = "A&>|skN__"
    dict_0 = {str_0: str_0, str_0: str_0}
    float_0 = -136.0
    tuple_0 = (dict_0, float_0)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    int_0 = -1784
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    int_0 = -26
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    int_0 = -1126
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


def test_case_1460():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1461():
    float_0 = 1700.48408
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    str_0 = "~\n6\\MUk1j<sA5-nY"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    float_0 = 685.0773
    set_0 = set()
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    int_0 = 849
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    str_0 = "FfNjcOz\x0b<|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    bytes_0 = b"\x05\xb8)S\xd6\xf0M\x0b\xa2\x84\x9c\x0f\xaf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    complex_0 = -1597.9 + 1291.3555j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    float_0 = -1256.9
    int_0 = 1400
    dict_0 = {float_0: float_0, float_0: float_0, float_0: int_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    bool_0 = False
    int_0 = -98
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    complex_0 = 1654.01 + 920.25596j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    int_0 = 410
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = False
    tuple_0 = (dict_0, int_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    float_0 = -90.346
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    float_0 = 881.73974
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    float_0 = 2284.55
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    bytes_0 = b"\xe8\x07Q/\xa0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    bytes_0 = b"\x9e\x8cD\x1dE\xd7\x0fS\xd4\xcd\xa1\x8e\xbe\\i\xcf"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    float_0 = -1305.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    int_0 = 3873
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    bool_0 = True
    int_0 = 1353
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    float_0 = -2678.7688
    int_0 = -2306
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    complex_0 = -1280.3 - 3771.12j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    int_0 = 226
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    int_0 = -2202
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    str_0 = "\t}^eH\x0c'RPe;\x0bk#X<rh"
    module_0.get_new_command(str_0, str_0)


def test_case_1489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1490():
    float_0 = -2174.568
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    int_0 = -79
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    bytes_0 = b"\xca\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bytes_0 = b"\xba\xc9)\xc2\xc9\x9fi\xb0]\xc7\x9c\xe9\xf7v/\xc5\xec\xbdN"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    str_0 = "5X\tB<N=R/qtdB~"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1498():
    int_0 = -940
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    int_0 = 926
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0, int_0, int_0]
    module_0.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    str_0 = "jpd"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    str_0 = "{8uykR<vxYEy'`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    float_0 = -1526.475
    module_0.match(float_0, float_0)


def test_case_1504():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1505():
    bytes_0 = b"\xe2Y\xd5\x16T\x8e\x96U"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    int_0 = 2067
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    float_0 = 1416.0
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    int_0 = 1945
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    str_0 = 'qqMU(**Z"]#;A@|h'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


def test_case_1511():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1512():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    str_0 = "l^;I!Bxa3="
    int_0 = -49
    list_0 = [str_0, int_0]
    tuple_0 = (str_0, int_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    int_0 = -1963
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    bytes_0 = b"*\x91U\xae;P\x15\x06j"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    bytes_0 = b"\xd9\xe1!\\\xa4\x1e\xf8z\xd9\xa5\x9c\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    int_0 = -367
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    float_0 = 2318.822
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    int_0 = -645
    tuple_0 = ()
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    int_0 = -2016
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_1524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1525():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_1}
    tuple_0 = (bool_0, set_0, bool_0)
    tuple_1 = (bool_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    bytes_0 = b"*\xa6\x87\x1a\xdf\xb7\xb9\x94\xe9"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    complex_0 = 1873 - 2370.634j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    float_0 = -851.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    bytes_0 = b"\xb9\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1531():
    pass


def test_case_1532():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1533():
    bytes_0 = b"\xe1\xe7\xd6;\xa8\xcd\xba\xdd\xfd"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    none_type_0 = None
    bytes_0 = b"[\xd2\x92\xbe\xa9\rH\x8a\xf5\xcbl`\xc15"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    bytes_0 = b",v\xee\x8b\xe4\x95%v\xf3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    float_0 = -6121.33
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    float_0 = -586.051
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


def test_case_1541():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1542():
    float_0 = 2178.270932
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_1543():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1544():
    int_0 = 1268
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    int_0 = -1071
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    complex_0 = 2174 - 1063.8j
    str_0 = " j,DSH@{;R'6.L49[27"
    int_0 = -353
    tuple_0 = (complex_0, str_0, complex_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    bytes_0 = b"d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    bytes_0 = b"\xba\x9a\xad\xab\x197)\xd2K\xca\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    int_0 = -1401
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    str_0 = '4fecr0Wgr%a"\x0b'
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    complex_0 = -1900.989048 - 928.273963j
    bool_0 = False
    tuple_0 = (complex_0, bool_0, bool_0)
    bytes_0 = b"\xb8\xb6\x03\x97`\xf3 \xa6\xec\xf9\xb0\xb4"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    str_0 = "DU"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    float_0 = -1345.1771
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    str_0 = "\n?]!MJQqW8T"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    int_0 = 516
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    str_0 = "!?~'^E=V* [QEs=\n|"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


def test_case_1557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1558():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    complex_0 = -5116.8969 + 775.85261j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    str_0 = "HLvf4Yj%U\rj_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    bytes_0 = b"x\xf5l\xee5\xac\xc3r\x1f\xad{!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    float_0 = -708.620227
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    complex_0 = 2259.063561 + 1062.57j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    str_0 = "1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    str_0 = "{Bpq920gl,;E7aQ-"
    int_0 = -2587
    tuple_0 = (str_0, int_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    str_0 = "3%\x0bI="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    int_0 = -28
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    int_0 = -1546
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    bytes_0 = b"\x13\xab\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    int_0 = 2231
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    complex_0 = 2966 - 1592.9472j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    str_0 = "IU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    bytes_0 = b"\t\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    bytes_0 = b"9"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    float_0 = -4923.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_1579():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1580():
    float_0 = -594.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    int_0 = -3526
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_1582():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1583():
    float_0 = -222.5192
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    bytes_0 = b"\x85I;\x83\xd8\xe2\x8c\x1d\x9e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    str_0 = "\x0cd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    dict_0 = {}
    bytes_0 = b"\xfe"
    int_0 = 388
    bytes_1 = b"*$C\xb0\x1bv|\x99S\xa82\xb5\x14\x00*,\xb2z"
    tuple_0 = (dict_0, bytes_0, int_0, bytes_1)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    str_0 = "L*Cy?h-P?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    complex_0 = 803.12319 + 1050.4998j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    dict_1 = {object_0: list_0, object_0: dict_0}
    list_1 = [dict_1, dict_0, list_0]
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    int_0 = -3675
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    int_0 = 1317
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    str_0 = "ZA~C-HJ0YvJ{VA2c&]kW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    str_0 = "> Z4T"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    bytes_0 = b"\xf3`\xc6\xc3J\xc7\xc1\x00P\xcfg\xd4\xe78\xe9+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    int_0 = -50
    float_0 = 102.1841
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    complex_0 = -72.8 - 242.5726j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    bool_0 = True
    tuple_0 = (bool_0,)
    float_0 = 2193.9
    set_0 = {tuple_0, tuple_0, tuple_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    int_0 = -2733
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    int_0 = -1785
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    int_0 = 4925
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0]
    tuple_0 = (list_1,)
    complex_0 = 155 + 91.4j
    bool_0 = False
    tuple_1 = (tuple_0, complex_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    float_0 = -1298.301483
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    float_0 = -143.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    float_0 = -652.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    int_0 = -2999
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    str_0 = "Sq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    str_0 = "E&U;TA;-&v&!=7V\x0b9\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    bool_0 = False
    list_0 = []
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    bool_0 = False
    str_0 = "y:QxP"
    none_type_0 = None
    str_1 = '*91@8[z F"EoP<U?Zc'
    str_2 = '"#glf*=%)8To\x0c'
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    int_0 = 174
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    str_0 = "q~?.|nCt4v\n^"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    int_0 = -219
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    bytes_0 = b"1\x87\xa5\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    str_0 = "Rdy{r8~Zk \r%!h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    int_0 = -1301
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    str_0 = "FhP5_lE]A\n0HJc\rg,"
    list_0 = [str_0]
    list_1 = [list_0]
    list_2 = [list_1, list_0, list_1, list_0]
    none_type_0 = None
    module_0.match(list_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    int_0 = -1892
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    float_0 = -1220.969
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    float_0 = -1429.0
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    bytes_0 = b"\t\x84\xcd\xe6\x1d\xd3\xa2\x1f%\xee\x89\x0b\x17t\xc4|\x87(1\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "L2,+5=Dh,qP2@'"
    tuple_0 = (list_0, str_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    bytes_0 = b"\x1c\xbf%\xbe\xce\xe3\xa1\xa3\x94L\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    int_0 = -2287
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    int_0 = 123
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    str_0 = "K\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    str_0 = "v7-x}w|Dr[x:br\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    bytes_0 = b"~\xc3\xa9#\x02L;\x85\xa7K\x97\xac\x05\xa8\xbf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    bytes_0 = b"u=\xe4pI\xb4\x0eP8\xe6\x80l\x86\xf4\xa8M"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    float_0 = 208.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    str_0 = ":h9#Lio'+R\\DTvt\x0bR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    str_0 = "td)!rCt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    bool_0 = False
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    float_0 = 114.1
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    str_0 = "SX[fHwrA/`s[K"
    str_1 = "J"
    str_2 = "IQ"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    complex_0 = 1442.828494 - 3085.76j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    int_0 = 359
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    str_0 = "SD7IZWF\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    float_0 = 186.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    int_0 = 1309
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    list_0 = []
    list_1 = [list_0]
    bool_0 = True
    list_2 = [list_1, bool_0]
    module_1.object(*list_2)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    int_0 = 292
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    str_0 = "$:l$W'\rO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    bytes_0 = b")"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    bool_0 = True
    complex_0 = 3639.52823 + 1030.766j
    int_0 = 2219
    str_0 = ""
    tuple_0 = (bool_0, int_0, complex_0, str_0)
    dict_0 = {bool_0: bool_0, bool_0: complex_0, bool_0: bool_0, complex_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    int_0 = 10
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    complex_0 = -3254 + 2588.5766j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    str_0 = "c"
    tuple_0 = (complex_0, dict_0, dict_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    bytes_0 = b'_\xcd\x8b"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1657():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1658():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    bytes_0 = b"\xfd\x13o\x98yq\xae\xd2\xb0\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    list_0 = []
    str_0 = 'HYiw8`-H(% FTd19{G3"'
    tuple_0 = (list_0, str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bytes_0 = b"\xe5=y\x10\x7f\xc7\x01\xad\x89\x873\xba\xc8\n"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    bytes_0 = b"\x8b\xe5\xe8>\x02\xbc\x13E\x8c\xbc\x98"
    module_0.match(bytes_0, bytes_0)


def test_case_1663():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1664():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


def test_case_1665():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1666():
    int_0 = -1158
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    str_0 = "7ucG6Fzax>HXdU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    str_0 = 't\t\n"XGo5ZoHk'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    none_type_0 = None
    int_0 = -1963
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    bytes_0 = b"\x85U&\xb7\xe6\x0e\x9d9HA\xcaV\x0c\x06l"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    int_0 = -734
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    int_0 = -2020
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    int_0 = 3594
    bool_0 = False
    dict_0 = {int_0: bool_0, bool_0: int_0, bool_0: bool_0, int_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    float_0 = 238.0
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    bytes_0 = b"\x9c\x00'C\xcf\xc8\x0cU\xb1\xab\xa9\xdc\xec\xd5K\xc8\xf2\x9d\xc7<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    bytes_0 = b"\x16W\xc2\xbcX\x10\x1f^"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    str_0 = "9JJ(O\x0by"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    bytes_0 = b"v'$\xb7\x1ca\xa1\xb3\xa1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    str_0 = "jS#\x0b\x0bz4_Ri',r|D"
    bool_0 = False
    bytes_0 = b"\x8fnx\xff\xe5&\xf6\x08_t\xae\xfe"
    tuple_0 = ()
    tuple_1 = (str_0, bool_0, bytes_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    bytes_0 = b"7\x1dp\xc4\xd6/\\\xde\xa0 \xcd\x01\x14\xa8`\x1c\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    float_0 = 2968.30896
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    bytes_0 = b"C\xfbt"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    int_0 = -945
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    list_1 = [list_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    bytes_0 = b"\x9e\xc0\xa2\xc4\x86R4a\xb3\x07\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    int_0 = -3381
    bytes_0 = b"\xe5Z\x8e\x9ef\x93j\x14l"
    set_0 = {int_0, bytes_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    bytes_0 = b'"\\\xe25\xef\x13~d\xf0'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    str_0 = "U=L^G a4"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    str_0 = "ZC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    int_0 = 8
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    bytes_0 = b"\xdc\xf0\x9aJ\xdb\x88\xe0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    str_0 = "aOH7[3S"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_1697():
    pass


def test_case_1698():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1699():
    complex_0 = 895.12943 - 3180.02j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    bytes_0 = b"X\xa4\xfd|$\xf03\xd8S^"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    int_0 = 2683
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_1702():
    pass


def test_case_1703():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1704():
    float_0 = 1526.448668
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    str_0 = "TS\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    str_0 = '\'v\x0b\x0c$. "[N"'
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    bytes_0 = b"\xfb\t\xa7y"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    int_0 = 1053
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    str_0 = 'uH\nZg*@4"`?rKm_1^H'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    str_0 = 'g-"9Gfy"=K?rh(j=f#'
    set_0 = {str_0}
    bytes_0 = b"\xb4"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    bytes_0 = b"QC}\xf8\x06\x16\x08\xe7\x81Z\xdbr\xf1/\xb4K\x1b\xf4\x03"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    float_0 = -774.354
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    float_0 = -934.0736
    float_1 = 691.9
    str_0 = "o/h,"
    dict_0 = {float_0: float_1, float_0: float_1, float_0: str_0}
    tuple_0 = (dict_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    bool_0 = False
    int_0 = -5
    dict_0 = {bool_0: bool_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    str_0 = "ApJ3. Hm_/(J`1:2"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    bytes_0 = b"&\xe8\\\xa5,\x17L\x94u_\xbd)t\x95L\x82D,"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    int_0 = 1441
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    float_0 = 230.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    bytes_0 = b"\xee\xca\xf9"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    int_0 = 1332
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    str_0 = 'aQL\x0cm<WA9P"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    str_0 = "p"
    str_1 = "OyD+)`I)SJZv\x0cS$*U$\x0b"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    complex_0 = -372.907 + 1176.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    list_0 = []
    list_1 = [list_0]
    bytes_0 = b"\x1bB\x8d\x8bvY\x99\x80\xcc\xbf\xef\x06,\xbb\xbei."
    float_0 = 226.52
    tuple_0 = (list_1, bytes_0, list_0, float_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    int_0 = -1761
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    int_0 = -3015
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    int_0 = 1197
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    str_0 = 'e<b"c#Up'
    str_1 = "|j'"
    list_0 = [str_0]
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    str_0 = ","
    set_0 = {str_0}
    list_0 = [set_0, set_0, str_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    int_0 = -1402
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    float_0 = 83.63
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    int_0 = 4886
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_0}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    str_0 = "sLBuzCNjp'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    str_0 = "Xws.0\x0cQ~d3"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    str_0 = "3f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = False
    tuple_0 = (bool_0, bool_0, list_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


def test_case_1750():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1751():
    int_0 = -2077
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    float_0 = -2934.4456
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1753():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    float_0 = -543.081
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bytes_0 = b"\xa9\xfe3\xc0G\xa8\x93\xf9"
    tuple_0 = ()
    tuple_1 = (bytes_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    float_0 = 2029.16
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    none_type_0 = None
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    complex_0 = -353 - 102.6j
    module_0.match(complex_0, complex_0)


def test_case_1759():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1760():
    bytes_0 = b"\xd9ZN?Y5\x8c\xb85\xda\x8e\xbb\xb8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1761():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1762():
    float_0 = 2224.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    bytes_0 = b"O\xce\xbdT\x05\x8d\xc0\xc9\xfaV!\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    int_0 = -533
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    bytes_0 = b"\xc4\n\xaa\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    bytes_0 = b'\xa2\xfc\xa3\x01.\xd3"N\x0e\x88\x1f\x85\xda\xd6Nq'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    float_0 = 2277.0
    bool_0 = True
    set_0 = {float_0, float_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, float_0)


def test_case_1769():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1770():
    bytes_0 = b"\xd4\xff\xa9\xc1K\x02\xea\xd6"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    bytes_0 = b"\xe7\xc5\xb1\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    int_0 = 975
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    float_0 = -2296.59
    module_0.get_new_command(float_0, float_0)


def test_case_1774():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1775():
    int_0 = -415
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    int_0 = 720
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    int_0 = -4911
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    float_0 = -2008.1
    bytes_0 = b"~\xca\xb0\xacX\x00!\xe3\xa5\xa4\xa3K"
    tuple_0 = ()
    tuple_1 = (float_0, bytes_0, tuple_0)
    set_0 = {tuple_1}
    list_0 = [set_0]
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    str_0 = "j=<xl-6t`gJy`j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = ()
    tuple_1 = (bool_0, dict_0, tuple_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    str_0 = "d yk\tz*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    bytes_0 = b">'\x1f\xca?\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    bytes_0 = b"\x04\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    str_0 = "\x0b*8"
    bool_0 = False
    module_0.match(str_0, bool_0)


def test_case_1785():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1786():
    int_0 = 376
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    float_0 = -534.4
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    float_0 = 439.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    int_0 = -4714
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    complex_0 = 2944.1 - 2247.150716j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    none_type_0 = None
    float_0 = 1225.94426
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


def test_case_1793():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1794():
    bytes_0 = b"\xd8\x157g\x89$\xc2"
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    int_0 = -1298
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    bytes_0 = b"|"
    bytes_1 = b"\x03\xc7\x7f\xad"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    str_0 = "m),avL<Ov&\rdWeadG"
    str_1 = ",DW Q;n3aFJ%)\x0bPG5"
    tuple_0 = (str_0, str_1)
    set_0 = {tuple_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    str_0 = "s1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    str_0 = "\x0bEmx1qVh;"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1803():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1804():
    int_0 = -1221
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    int_0 = -111
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bytes_0 = b"\xa9\x1f\xf5\x8e$\x19K8\x80\xaf\x02!\xb1\xdb\x87\xef\xea"
    module_0.match(bytes_0, bytes_0)


def test_case_1807():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1808():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    str_0 = "w"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, set_0, set_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    str_0 = "CR"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    float_0 = -839.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    bytes_0 = b"\x06\x95\xb9\x10\xab\xd9\x97u\xef\x85gU"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    bytes_0 = b"@ML"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    complex_0 = 351.12 + 14.0614j
    bool_0 = True
    set_0 = {complex_0, complex_0, complex_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


def test_case_1816():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1817():
    bytes_0 = b"?\xd34\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    float_0 = -2076.9
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    str_0 = "^r }\r[>C"
    str_1 = "r)N6"
    str_2 = "9mS a`"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    int_0 = 698
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    complex_0 = 2981.87 + 2502.7093j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    object_0 = module_1.object()
    bytes_0 = b"\xc7\xd3g"
    complex_0 = -889.31812 - 1385.338j
    set_0 = {complex_0, complex_0}
    tuple_0 = (bytes_0, set_0)
    bytes_1 = b"\x0b\xdb\xb8I7\x88\xa7\xa1\xcd\xa2\x19\xb8\xeaK\xc1\x80"
    tuple_1 = (object_0, tuple_0, bytes_1)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    int_0 = 1354
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    bytes_0 = b"\xffD\xe8\xfdu\x0e\xa321'\x83\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    str_0 = "*.-J5GpSUt?+Ec@&B+I\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    float_0 = 963.66
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    float_0 = 1903.0
    float_1 = 158.8
    set_0 = {float_0}
    tuple_0 = (float_0, float_1, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    bytes_0 = b"[\xe0sx\x9fB\xdaU\xb9R\xfb\xf4\x1b\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    bytes_0 = b"1/\x0f\xfe\xbd+X\xe2\xd0\x10j\xdaVC"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    bytes_0 = b"\xfe\x1aV$\xca}\x01\x8b\xd4\xd5\x1f\x0e\x82\xa4\x15UF\xca\xd3\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    int_0 = -2615
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    float_0 = 2114.0
    module_0.get_new_command(float_0, float_0)


def test_case_1835():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1836():
    int_0 = -592
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    float_0 = 1199.43
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    str_0 = "rP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    int_0 = -2131
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    bool_0 = False
    complex_0 = -3157.4579 + 61.2j
    tuple_0 = (complex_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    bytes_0 = b"m\xb0\x81&\xe2g\xaa\\2U\xcc\xbbC\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    complex_0 = -1519.49 + 1258.195j
    set_0 = {complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    bytes_0 = b"|\xf4\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    complex_0 = -644.833 - 3715.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    str_0 = "VV=cG;xX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    str_0 = "ui-@M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    list_0 = []
    float_0 = -1767.7876
    bool_0 = True
    tuple_0 = (list_0, list_0, float_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    float_0 = 446.0
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    str_0 = 'oku5ZDln"DXPA'
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_1851():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1852():
    str_0 = 'ay/~;6nH%u_>x"%rEV'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    complex_0 = -2591.4 - 2593.4222j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    bytes_0 = b"\x9d\xc0'\xe4\xceS"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    str_0 = "@0(s0gR@wy0P)q"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    float_0 = -92.61625
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    str_0 = "lH"
    bool_0 = False
    bool_1 = False
    tuple_0 = (str_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    float_0 = -3228.5924
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    none_type_0 = None
    str_0 = "oHy[ts>#3 <pmN"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    str_0 = "2.@&\\'W_\x0b\t8d`_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    str_0 = "X\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    float_0 = 1303.405673
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    complex_0 = -1812.3 - 1620.06j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    str_0 = "jGEz"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    bytes_0 = b"W94Sl|\x1f\xc7,Q"
    int_0 = 571
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    int_0 = -1747
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    float_0 = -722.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    int_0 = -1334
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    str_0 = "GKA\rs)\x0cH\x0c!rp86/LS1"
    str_1 = "'A@%d("
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    int_0 = -352
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    int_0 = -4769
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    float_0 = 917.85
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    str_0 = "A,7hC\n"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    float_0 = 2154.09
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0, list_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    bytes_0 = b"\xbbW#\x8fN\xefi\x8d=@\x1c\xe5U\xc7\x0e\x9d\x117\xd4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    int_0 = -1854
    module_0.match(int_0, int_0)


def test_case_1882():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1883():
    str_0 = 'hg"8F9'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    bytes_0 = b"\xbed\x00\xbdU\x9f\x8aF\x9c\xcf6H\xc0\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    bytes_0 = b"Y\x8a\xa9\xd9C\x8c;\x97\xb5\x11Q\xfa"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    str_0 = "kf}Re$^)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    int_0 = 969
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    bytes_0 = b"\xe0\x9cW\xcc\xb65\n\x8e\xbb\x1c\xef\xf7\xb4\x06vb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    str_0 = "@3(s!\nMr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    bytes_0 = b"N\x17A\xf6K\x7f\x9b/\xc4R\xfd\x00\x8b\xbdE2\x0b\x02N\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    bool_0 = True
    int_0 = -487
    list_0 = [bool_0, int_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    float_0 = 1201.0
    list_0 = [float_0, float_0, float_0]
    tuple_0 = (float_0, float_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    str_0 = "us0hn"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    bool_0 = True
    float_0 = 296.272183
    dict_0 = {bool_0: bool_0, bool_0: bool_0, float_0: bool_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    float_0 = 1258.151
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    float_0 = 2040.4737
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    complex_0 = -23 - 436.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    float_0 = -1617.612
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    int_0 = 1015
    float_0 = -1061.639264
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    str_0 = "#+SC"
    str_1 = "uyuK\nz\t\\Y_*C8Y\\S"
    dict_0 = {str_0: str_1, str_1: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    int_0 = -1519
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    float_0 = 1045.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    bytes_0 = b"\x9a?A\x11\xec\xa9\xf5)\xb9\xda6\x16"
    list_0 = []
    tuple_0 = (bytes_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    str_0 = "#F/,i/"
    float_0 = -1909.92375
    tuple_0 = (float_0,)
    bool_0 = False
    set_0 = {str_0}
    tuple_1 = (str_0, tuple_0, bool_0, set_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    float_0 = -3142.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    bool_0 = False
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    str_0 = 'g?E|\\Vq<V^P"7SU+~a0'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    float_0 = -1044.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    bytes_0 = b""
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    int_0 = -1161
    tuple_1 = (int_0,)
    list_0 = [bool_0, bool_0, tuple_1, tuple_0]
    list_1 = [list_0, tuple_1, list_0, list_0]
    list_2 = [list_1, bool_0, int_0, tuple_0]
    module_1.object(*list_2)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    str_0 = ""
    list_0 = [str_0, str_0]
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    float_0 = -1173.413553
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    bytes_0 = b"\xd2b\xe72h\x90\xe1\x98\xc2P\x1eR\x7fW\xd8\xbc\xdc\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    dict_0 = {}
    float_0 = -441.9
    list_0 = [float_0]
    tuple_0 = (dict_0, float_0, list_0, dict_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    int_0 = 117
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    float_0 = -1201.0
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    int_0 = 3192
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


def test_case_1933():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1934():
    bytes_0 = b'\x1a)\x08\x80\x1b\x1f\xef\x16\xfb\xec8\xa7O\xdcV)"\xa3)'
    int_0 = -374
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    float_0 = -1560.67
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    object_0 = module_1.object()
    set_0 = {object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    list_0 = []
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    float_0 = 1526.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    bytes_0 = b"Z=;\x04\xe2x\xa5c\xcf\xbf"
    set_0 = {bytes_0}
    list_0 = [bytes_0, bytes_0, set_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    float_0 = 4.47
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    complex_0 = 1377.09 - 2195.8105j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    bool_0 = False
    float_0 = 1593.832591
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    float_0 = -1596.8135
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    none_type_0 = None
    int_0 = 2682
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    str_0 = "[MN^ek[|Fn6s\rOb`F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    str_0 = "\r,_-^d`$n#"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1951():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1952():
    bytes_0 = b"9\xa8MHVL\x9b\x9c\x1c\x92\xe1\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    bytes_0 = b"\xc6\xecty\x0c\nD"
    module_0.match(bytes_0, bytes_0)


def test_case_1954():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1955():
    int_0 = -1452
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    bool_0 = False
    complex_0 = -3722.856 + 1220.78137j
    tuple_0 = (bool_0, complex_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1959():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    int_0 = -706
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    int_0 = -1455
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    str_0 = "?'\\pCuD>GQx4k3#"
    str_1 = "ZG1?(@"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    float_0 = 2983.07
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    int_0 = 2379
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    int_0 = -678
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    str_0 = "s!var?gM^_)FJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    int_0 = -1103
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    str_0 = "1 "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    float_0 = -345.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    bytes_0 = b"\x98%\x11J33\xdb\xf2@\xaa\x985<\xf0t"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bytes_1 = b""
    module_0.match(set_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    int_0 = -1628
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    str_0 = "1=yh:[4mrOM?70cK."
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    complex_0 = -47.70608 + 1153j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    int_0 = -943
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    bytes_0 = b""
    int_0 = -1532
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    bytes_0 = b"\x07\x1a\xc1 \x9a|\xcd_\x9b\x17\x1a[Kk\x85"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1984():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1985():
    int_0 = 134
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    str_0 = "\\>N?? `/LV1l\n'"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    int_0 = -1740
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    bytes_0 = b"[.\xe6\xf3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    int_0 = 2984
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    float_0 = 1491.350533
    bool_0 = False
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    bytes_0 = b"`{\x9c\xb3\xd2\xf2\xcb\xce\xb4<<\xa1\x8c\xb4\xeb"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    float_0 = -2270.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    bytes_0 = b"G\xc2\xc8\x19\x91\x8d\x06G1\x1b\x1c\xc4G\xdb4'"
    complex_0 = 2328.0438 + 2039.855197j
    tuple_0 = (bytes_0, complex_0, complex_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    float_0 = -1467.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    int_0 = -2667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    complex_0 = 1357.776 + 912.65j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    int_0 = -3104
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    bytes_0 = b"\x8b\x00\xae\xbe\x9fp~/\xf1\xadi])\xeds"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    bytes_0 = b"\xe2\x9e\xc8\xa9\x9e&x\x06\xee\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    int_0 = -2552
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    str_0 = "qL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = []
    tuple_0 = (dict_0, list_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    bytes_0 = b"\xb7\x8f\xb2\xdb\xf5\xdc\x1e\x02\n_\x03\xcf`\xdd\x9a\x9c\xbd\x88\r("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    str_0 = "pYOy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    float_0 = -3599.969511
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    str_0 = "Y@P;\n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    bytes_0 = b"\xf0\xddl<\x03\x84\xbd\xe8\x82\x14%\x08\xcfW\xed\xb5\xc9"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    set_0 = set()
    str_0 = "sicz\x0c"
    list_0 = [set_0, set_0, str_0, set_0]
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    str_0 = "v_C1&s=-<:Ea"
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    object_0 = module_1.object()
    bool_0 = False
    list_0 = [object_0, bool_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    object_0 = module_1.object()
    bytes_0 = b"\x7f\x1a\xf83\xb9%\xb1\xf3\x92-f\x1b\xf8Y\xa5"
    tuple_0 = (object_0, object_0, object_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    bytes_0 = b"\x05\x12"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2023():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2024():
    bytes_0 = b"(O\x1aS\x81\xee\x0e\x9e\xae\x0eRX\x8e\x02$?\x96\x00"
    module_0.match(bytes_0, bytes_0)


def test_case_2025():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2026():
    int_0 = 985
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    str_0 = "(D2m:-]u@#b0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    complex_0 = 1124.4472 + 1195.0429j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    float_0 = -269.23
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    bool_0 = True
    str_0 = "c+D.F:&VawFtX3!%4\n"
    tuple_0 = (bool_0, str_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    float_0 = 187.219693
    int_0 = 2630
    bytes_0 = b'\x98\x8c\x9c\x0bH\x0eyoW\xee%\xf6"\x03\x8c\xea\xad\xf7'
    dict_0 = {int_0: float_0, float_0: float_0, bytes_0: bytes_0, float_0: float_0}
    tuple_0 = (float_0, int_0, dict_0)
    list_0 = [tuple_0, tuple_0, dict_0, bytes_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    str_0 = "em4@?8,&~)Dh~@M|'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    float_0 = -2522.96
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    complex_0 = 2822.7266 - 434.93j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2036():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2037():
    float_0 = 792.858802
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    int_0 = -375
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    float_0 = 4135.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    int_0 = -213
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    set_0 = set()
    str_0 = '\x0bm\n"LUV<v3aU^KQt'
    bytes_0 = b"\xbe\xf4\xfcc\xb5\xd8^\x1f"
    tuple_0 = (set_0, str_0, bytes_0, bytes_0)
    list_0 = [set_0, tuple_0, set_0, set_0]
    tuple_1 = (tuple_0, tuple_0, list_0, set_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    bytes_0 = b"\xde\xa6h\xf4\x82\x08<\xe7\xe4\x9a)T"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    float_0 = -502.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    int_0 = -195
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    float_0 = 928.816476
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    bytes_0 = b"\x8e\xc5\xba\x16h\x9dT\xf4\xd5y\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    float_0 = -1972.12
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    int_0 = 663
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    str_0 = '^:"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    float_0 = 707.9765
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    str_0 = "A"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    bytes_0 = b"\x19R\xefm\xc2\xf4X\xcf\xeb\x996\xa7]A\x82m"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    bytes_0 = b"\xc0\x9d\xa4\xda"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    int_0 = 215
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    bytes_0 = b"tp\xb8k*\x1b\xcb\xf2P\x0c\x01\xb0^\xaf\xe7O\xe7:"
    module_0.match(bytes_0, bytes_0)


def test_case_2057():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2058():
    bytes_0 = b":[2|\x14@JH\x96\x81\x94D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    float_0 = -1150.61
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    str_0 = "ph*(Qy+#t9nEZl>?#g"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    str_0 = "Q# /xIQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    int_0 = -562
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    int_0 = 432
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    str_0 = ""
    str_1 = "1Sb6YjA"
    tuple_0 = (str_1, str_0)
    float_0 = 2794.3
    tuple_1 = (str_0, tuple_0, float_0)
    dict_0 = {tuple_0: tuple_1, float_0: float_0, str_1: tuple_0, tuple_1: tuple_0}
    tuple_2 = (str_0, tuple_1, dict_0)
    module_0.get_new_command(tuple_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    str_0 = "%4D\x0cup$?j#^nV+> f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    str_0 = '5?.D\x0c`\tbn"R[P\x0c2V'
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    list_0 = []
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    int_0 = 2296
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    float_0 = 1729.348008
    module_0.get_new_command(float_0, float_0)


def test_case_2069():
    pass


def test_case_2070():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2071():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    float_0 = 2349.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    complex_0 = 841.413 + 2043j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    int_0 = -949
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    bytes_0 = b"\x18\xd5w\xb2_\x89O\xdd{HV!\xe0H"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    float_0 = -1889.2298
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    int_0 = -2248
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    bool_0 = True
    str_0 = "Sy^!/8@|.cHVn$"
    list_0 = [bool_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    str_0 = "ez9]Punzf tp#=i?:ck"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    bytes_0 = b"`N\xc3_\xe4\x8f;\xee7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    str_0 = "#c{y6Rm?BJ&&\tomrptw9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    int_0 = -263
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, dict_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    bytes_0 = b",\x89\x8bu\xd5Z\xf2\xbeu\x92\xf4\xd9\xbe\x1a\xe0\xb2\xdf\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    int_0 = -2118
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    bytes_0 = b"\xc8S\xd7\x03\xa7\x1c[\x0e\xab\xb0\xad\xc39\x8bV"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    complex_0 = -1006.26 - 525.19j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    float_0 = 735.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    int_0 = -3006
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    int_0 = 1324
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    complex_0 = -3611.063 - 412.11348j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    str_0 = "9N+X"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    str_0 = "K`>A|"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    str_0 = 'l3U\r)AJG"8zA\\8W_<%j}'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    int_0 = -2778
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    bool_0 = False
    bytes_0 = b"\xe7\x19\xa9\xfeo\xd2\xec\x93\xf3\xe4\xc4Q\r13"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    bytes_0 = b'\x8d\xb4\xca"J\x8cS\x7fWw\xec\x1fP\x86\x8a\x81\xde#'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "QdA&9;`j@K{"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    bool_0 = False
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    int_0 = 1604
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    int_0 = 2522
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    bytes_0 = b"\x12\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    bytes_0 = b"h\x1a\xbd\x8f\xa0\xd7\xc9\xe6\xe2\x977FD"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    str_0 = "\\Y7DA="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    str_0 = "%u)6\\_R{:SM+]AiT"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    int_0 = -2118
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    str_0 = "TSU<:sx^{]w`m\x0bh"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    int_0 = -379
    module_0.get_new_command(int_0, int_0)


def test_case_2110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2111():
    bytes_0 = b"W\x8a\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    int_0 = -1122
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


def test_case_2115():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2116():
    bool_0 = False
    list_0 = []
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    int_0 = -1152
    module_0.match(int_0, int_0)


def test_case_2118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2119():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    bytes_0 = b"\x024@R\x99b\xd0[\xa3.\t\xd5=\xd2\tv\xe2\xba\x82\xca"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    float_0 = -1531.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    str_0 = "yXmO!?A~z1>\np"
    object_0 = module_1.object()
    str_1 = "{1t*xS/s5"
    dict_0 = {str_0: object_0, str_0: object_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    bytes_0 = b'r\x12\xe5"&\xe9L\xb9@\xfd\x01\xd2\xeagk'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    int_0 = -3610
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    int_0 = -4442
    list_0 = [int_0, int_0]
    str_0 = "W\x0cWh5?,"
    tuple_0 = (int_0, list_0, str_0)
    int_1 = -439
    module_0.match(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    int_0 = -3454
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    float_0 = 2762.34
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    none_type_0 = None
    complex_0 = -1163.08697 + 985.71392j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    str_0 = "4QC]f<r[PG>NLA]QSZV"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


def test_case_2133():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2134():
    str_0 = ".+\n%.]AH2X6"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    str_0 = '{"N4~_N@_mm'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    str_0 = "+zzBJO?xgkaTV*~'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    bool_0 = False
    complex_0 = -1581.28 - 4743.308j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    int_0 = 2336
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = "{O7y7'E;9KV%&><\t"
    str_1 = "\\YI!x,V3x,*9H."
    dict_0 = {str_0: list_0, str_1: list_0}
    module_1.object(*list_0, **dict_0)


def test_case_2141():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2142():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


def test_case_2143():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2144():
    complex_0 = 3172.51 - 1092.499756j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    str_0 = "57 }lB6xx(knZ[R:"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    str_0 = "tW$jg3'\rqmrN*-c\"7lZv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    str_0 = "~RJ<v;045bUjtuy<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    int_0 = 88
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    str_0 = "NL"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    str_0 = "$9t|$n/DD%0]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    int_0 = -2451
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    str_0 = "QLwH?`SiLx>&)?WW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    int_0 = -1137
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    bytes_0 = b"Z\x881"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    str_0 = "O\ruST:aFLzfe"
    module_0.match(str_0, str_0)


def test_case_2156():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2157():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    int_0 = 1532
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    object_0 = module_1.object()
    list_0 = [object_0]
    list_1 = [list_0, object_0, object_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    str_0 = "?t)K(LS"
    bool_0 = True
    str_1 = ">\tgf"
    int_0 = 2483
    tuple_0 = (str_0, bool_0, str_1, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    bytes_0 = b"\xe5\xf6\x18\xca,W\xdb\xc7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    none_type_0 = None
    module_1.object(*none_type_0)


def test_case_2164():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2165():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    int_0 = 1826
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_1,)
    list_0 = [bool_0, tuple_0, bool_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    float_0 = 1876.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    bytes_0 = b"\xceA\xf3R\xc42\r\xc3m\x89@\x0f\x97\x8d2+\xf1\xbb\x1a6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    int_0 = -2225
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    float_0 = 3198.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    str_0 = "\x0cZMq=c!"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    float_0 = -1615.7781
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    int_0 = 2010
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    float_0 = 1709.75
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    int_0 = 151
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    int_0 = -2174
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    complex_0 = -1344.0814 - 1247.8j
    str_0 = "s[xivP8,"
    none_type_0 = None
    str_1 = "\t|-T<"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*complex_0, **dict_0)


def test_case_2179():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2180():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    int_0 = -1367
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    bool_0 = True
    int_0 = 2428
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    float_0 = 2206.24266
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    int_0 = -2
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    str_0 = "$Su22f4J.gWu(}l#r"
    tuple_0 = ()
    float_0 = -2764.53695
    tuple_1 = (str_0, tuple_0, float_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


def test_case_2190():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2191():
    int_0 = 368
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    str_0 = "10`,EV13k)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, dict_0, object_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    bytes_0 = b"2\xf3\xfc.\x13\xaa\xb5\x12l"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    bool_0 = False
    int_0 = 1202
    str_0 = "]Dl\nB_]TxQ\x0c*T+SBT=!"
    tuple_0 = (bool_0, int_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    bytes_0 = b"\xc8\x19\x9c \xcbD"
    str_0 = "f'&"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = ()
    dict_0 = {bool_0: list_0, bool_0: list_0, bool_0: bool_0, tuple_0: bool_0}
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    int_0 = 6499
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2202():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2203():
    float_0 = -442.0536
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    str_0 = "JhQ|DKc#BT\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    str_0 = "(D]m{H;t=C%miePWS=A"
    tuple_0 = ()
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    bytes_0 = b";\xd6\x96?&EY,4{R!\x8a\x93h"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    float_0 = -223.1
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    bytes_0 = b"I\x11sN\xea\x87\xaf\xc0rTQ\xa1?,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    int_0 = 1538
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    int_0 = 1643
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    str_0 = "j+f\\!ds(t,f+~JoW<R"
    str_1 = ""
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    bool_0 = True
    float_0 = -555.2606
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    float_0 = -925.53
    float_1 = 618.714319
    module_0.match(float_0, float_1)


def test_case_2215():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2216():
    complex_0 = 3777.7 - 3614j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    bytes_0 = b"j\t\xe4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2220():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    int_0 = 3673
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


def test_case_2222():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2223():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    list_0 = [dict_0, object_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    bytes_0 = b"\x002,\x13\x91\x86\xb1\x0f\xa7\xb3\x0eX\xfc\x81\xb6\xaeq+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    bytes_0 = b"\xa4\xd8\xbek\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    int_0 = 899
    module_0.match(int_0, int_0)


def test_case_2228():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2229():
    int_0 = -1831
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    str_0 = "A'\x0bK]gSe$hvTBJR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    complex_0 = 1350.67161 + 2964.802155j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2232():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2233():
    str_0 = "JXc,v("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    float_0 = 1024.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    bytes_0 = b"\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    int_0 = -3546
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    str_0 = "&-wR\n)/d8|`&M\tZ2P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    str_0 = "12\t\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    float_0 = -1675.24828
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    int_0 = 4694
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    int_0 = 850
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    bytes_0 = b"8\xc4\n"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    float_0 = 3615.839399
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    int_0 = 719
    module_0.get_new_command(int_0, int_0)


def test_case_2247():
    pass


def test_case_2248():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2249():
    bytes_0 = b"\x8e^7\xbc\x15\xb6A\xcd\xeb\xec\xea\xa8\x1d\x06}\x80\xe6V%"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    float_0 = 1784.7
    bytes_0 = b"jG"
    tuple_0 = (float_0, bytes_0)
    dict_0 = {tuple_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    object_0 = module_1.object()
    int_0 = -1128
    list_0 = [object_0, int_0, int_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    str_0 = ")5]_YR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    str_0 = "g{CJ ci,:Mk"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    int_0 = 1829
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    str_0 = "-EofLGYuA$4"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    int_0 = -2360
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_2261():
    pass


def test_case_2262():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2263():
    int_0 = 5061
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    str_0 = "oCBaH|\\'DE}yE"
    int_0 = 3996
    dict_0 = {str_0: str_0, int_0: int_0}
    tuple_0 = (str_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    int_0 = -1062
    list_0 = []
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    int_0 = -274
    module_0.match(int_0, int_0)


def test_case_2267():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2268():
    float_0 = -1852.318
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    bool_0 = False
    bytes_0 = b"\x05\x978\x89\x02}\xd6\x9d"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    float_0 = -468.427
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    int_0 = 287
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    float_0 = -3478.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    str_0 = "foL%l7"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


def test_case_2277():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2278():
    str_0 = "ejV\x0bh&[W^\nf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    complex_0 = -2773 - 515.0201j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    int_0 = 4812
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    int_0 = -1733
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    float_0 = 2357.577931
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    complex_0 = -2028.04 + 210.64j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    float_0 = 2311.93
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    float_0 = 1494.348
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    int_0 = 642
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    int_0 = -5328
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    complex_0 = 4690.0701 + 3271.315j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    bytes_0 = b"Y\xdc\xd0*\xc4"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    bytes_0 = b"\xa1\xbc!\xac'F\xf7\xc5\xfd\xdd?R*\x1a<\x15\x1e\x0b\"\xd4"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    str_0 = "lxL]sD~0"
    str_1 = "S)#cDzpuuX;Q\x0bU+Xb"
    str_2 = "9D*:C6n^i;w9k"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    bool_0 = True
    complex_0 = -547.68 - 384j
    bool_1 = False
    set_0 = {bool_0, bool_0, complex_0, bool_1}
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    int_0 = 3172
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    int_0 = -2484
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    bytes_0 = b"Xys\x0f\x87\x1e\x9ej\xf1\x7f}\xdb\x8b\x1a\xd3"
    float_0 = 2225.188
    set_0 = {bytes_0, float_0, bytes_0}
    tuple_0 = (set_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    complex_0 = -3487.417 - 803.008302j
    list_0 = [complex_0]
    module_0.match(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    str_0 = "\\j(=n=\x0cwnO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    str_0 = ":nMs@\n\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    str_0 = ")[%&|Dh\\du}['\x0b}~h\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bool_0 = False
    int_0 = 2423
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    str_0 = "L>bCusq*Am"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    float_0 = -352.56
    tuple_0 = (float_0, float_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    bytes_0 = b"\xfb$t\xe1\x10B\x91\x94\x01\xf4=\x90>\xb98H\x17"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    int_0 = 2138
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    bytes_0 = b"\xc6Q\x80\xd7\x87\x15ia"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    complex_0 = 1436.36 + 1573.71279j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    bytes_0 = b"\xd4\x8c\x90&)\xdd_\xb2\x7f\xb0\x90\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    int_0 = -2734
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    str_0 = "cTcq`z-7kW}"
    bytes_0 = b"\xc8\xdc\xac\x8f\xbb(\xed\xb1_\xf2\xff"
    dict_0 = {str_0: bytes_0}
    module_1.object(**dict_0)


def test_case_2317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2318():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    str_0 = ".\t3>/Ksg8lqX1<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    str_0 = "Rk<~\x0b$G)g@RlB/tN`#T"
    module_0.get_new_command(str_0, str_0)


def test_case_2321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2322():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    bytes_0 = b">\xc4\xdf\xda\x16\x91\x87\x9d\x9du\xde\x13\x9a\x88\xbcL"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    int_0 = -1703
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    bytes_0 = b'r\x0fZ\x9b\xad\xb1\\\xf6\x95\x8e\xe1\xa8c\xa2\x8a\xfe\x7f"\xf7\xa5'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    str_0 = "jL\nH0IM%FidFhUS%"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    bytes_0 = b"\xb7^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    int_0 = 1601
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    str_0 = "Bil6,h%`M$Xm"
    str_1 = "!.!,-\\{&)k^;+eC\x0cZ\\"
    str_2 = "i~!y_>y>81"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    str_0 = "_P\tL"
    str_1 = "T<Zi#7gF s\rF:*yL4"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    int_0 = -1166
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    bytes_0 = b"O4\xce6&*z\xc6r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    bytes_0 = b"+(3\x9fR"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    none_type_0 = None
    str_0 = "tX'A%y*[U"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    int_0 = 1175
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    bytes_0 = b"(Q\x0b\xca\x98\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    bytes_0 = b"nGS\xff \xb2\xb6\x84\xebBz|\x86\xc8\x88,]\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    float_0 = -468.45649
    set_0 = {float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    bytes_0 = b"\xbbm\xb5\xb3\xaa2n\xba[\xab\xf1\n~\x9e^\xe1\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    int_0 = -2859
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    str_0 = "f<V0c"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    str_0 = "~wfQ6S BqSYEJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    none_type_0 = None
    str_0 = "A%"
    module_0.match(none_type_0, str_0)


def test_case_2346():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2347():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    bytes_0 = b"\x8e\xef\x11\x94G\xbb/7\xf2\x87\xf5\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    bytes_0 = b"\xe3K\x88\x8d\x97\x81\xe9\x84wj$)"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    bytes_0 = b"\xfb\xd6\xbb\xf5Y"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2351():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2352():
    float_0 = 3356.044378
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    int_0 = 1420
    module_0.get_new_command(int_0, int_0)


def test_case_2354():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2355():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    int_0 = -295
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    bytes_0 = b"S\xdb\r\x03\xd4"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    float_0 = 647.25395
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    complex_0 = -4154.2 - 3979.1j
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    none_type_0 = None
    module_1.object(*none_type_0)


def test_case_2363():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2364():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    float_0 = 2602.48453
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    int_0 = -2264
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    int_0 = -1075
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    str_0 = "@\nJ b*):c}&<LUE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    bytes_0 = b"$$\xf0]\x8f#>0\x7fa\xad\x14\x1d=\x16g\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    bytes_0 = b"\x0c\x91\xd4]\x85u\x12\xf1\x1b\x9c\xd9\xfb\xa0}!\xc2z\x15y\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    bool_0 = False
    float_0 = -456.287102
    tuple_0 = (bool_0, float_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    bool_0 = False
    int_0 = -3254
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    bytes_0 = b"\xb5GmfC"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    float_0 = 1189.2
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    str_0 = "xSMP\\ZAe@6eYv"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    int_0 = -221
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    int_0 = 3067
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    int_0 = -751
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    list_0 = []
    str_0 = '~p^UPH(a"ez|S\n%3-u'
    dict_0 = {str_0: str_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    bytes_0 = b"\xfe|\x8c2O\xc1\xc3\xe0J}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    str_0 = ";)$}UF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    int_0 = -254
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    bytes_0 = b"bKQ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    int_0 = 318
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    int_0 = 816
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    complex_0 = 2982.11958 - 1729.76018j
    int_0 = 1248
    dict_0 = {complex_0: complex_0, int_0: complex_0, int_0: int_0, int_0: complex_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    list_0 = []
    int_0 = -979
    tuple_0 = (list_0, dict_0, int_0, list_0)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    bytes_0 = b"\xe5\xe4c\td\xc4\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    bytes_0 = b"\x8f\xc8\x0b>\x10\x8f(\xac\x9c\xc4\x03,\xd4\x8f\xbcMXtX"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0, set_0, set_0]
    int_0 = 373
    tuple_0 = (list_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    int_0 = 1896
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    int_0 = -3734
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    str_0 = "~%s/"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    float_0 = -324.193536
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    bytes_0 = b"\x9c\xd5\xf6"
    str_0 = "(\t"
    bool_0 = False
    tuple_0 = (bytes_0, str_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    object_0 = module_1.object()
    int_0 = -414
    tuple_0 = (object_0, int_0)
    tuple_1 = (tuple_0, int_0, tuple_0, tuple_0)
    dict_0 = {tuple_1: tuple_1}
    module_0.match(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    dict_0 = {}
    bytes_0 = b"\xb1\xec1\x82\xb6z%\x11H\xe7\xcf\x8e\xf4\xd4"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    str_0 = "1,QuaU6`Nhc7G\x0bt4\x0c\\^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    bytes_0 = b"\x19~%S\x18\x88^\xc01\xb1\xff`\xf20"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    bytes_0 = b"nS&I\x8b\x9b"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    int_0 = 1569
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    str_0 = ":>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    bytes_0 = b"\x07<0\xc1=\xef\xbe\xec8\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    str_0 = "P"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    str_0 = "R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    str_0 = "<%<>*x1-8tW,+E_,v&\x0bF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    str_0 = "y*w\rd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    int_0 = 758
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    bytes_0 = b"iI$\xbb]\xa0\xcf\xce\x07\xb3\xb3\xfa\xdbvy\xc1y\x89\x9a\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    bytes_0 = b"p\xcf\xdf{%Y\xfb\xa2[h\x88"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    str_0 = "FNzc["
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_1.object(*set_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    complex_0 = 74.6 - 1146.61454j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    str_0 = "NE`[3'V#Q_|]ytkW"
    str_1 = "\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    bytes_0 = b"w\xb3W\x95\xceK3LQ\xeft\xba\xaa\x1e&\xedb,}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    complex_0 = -424.387 + 2629.7j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    str_0 = "@:8w"
    module_0.match(str_0, str_0)


def test_case_2422():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2423():
    bytes_0 = b"\x83\xf6#\xd6V\x17n\x06?i\xad\x80\xe8"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    set_0 = set()
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    int_0 = -4137
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    complex_0 = -3050.69623 - 1080.836j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    str_0 = "JVN\x0b_;H\x0c<E"
    bool_0 = False
    bytes_0 = b"\xef]w\x19\x17W!\x978"
    bytes_1 = b"\xbe\xf3m\xbc\xd1\xbd2\x1e\x11\x81\x10)\xb1e"
    tuple_0 = (str_0, bool_0, bytes_0, bytes_1)
    tuple_1 = (tuple_0,)
    complex_0 = -2626.623558 - 4214.48j
    module_0.match(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    float_0 = -176.57
    bool_0 = False
    dict_0 = {float_0: bool_0, float_0: float_0, float_0: bool_0}
    str_0 = "5{`=gSTm1G['8~"
    tuple_0 = (dict_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    bool_0 = True
    str_0 = "-B"
    bool_1 = False
    tuple_0 = (str_0, bool_1)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    bytes_0 = b"o\x18Ip\xa5\xf6\xb2[\x8b8nj\xa7\xa5m8\x12\xads\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    float_0 = -3375.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    str_0 = "pJHc"
    str_1 = "ZJh"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    str_0 = ".PZ2Q\x0cJVq&arG`"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    complex_0 = 3764.3 + 563.134328j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    str_0 = "~n\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    bool_0 = True
    int_0 = 723
    module_0.match(bool_0, int_0)


def test_case_2438():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2439():
    str_0 = "bOd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    bytes_0 = b"\xf9\xda\x11\n\xcf\xaeL\xadB\xfe.\xfa\xce\x80Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    str_0 = '=g\\lkuL\x0c"XdTp)>O+P'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    int_0 = -3623
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    float_0 = -932.68278
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    complex_0 = 2717.08265 - 528j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    str_0 = "ErxAh>vepbO.c\no{X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    str_0 = "l-RT|!LA;aNfP\t_'%E|6"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    float_0 = 1251.34
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    dict_1 = {float_0: float_0, object_0: dict_0, float_0: dict_0, object_0: float_0}
    none_type_0 = None
    module_0.match(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    int_0 = 1521
    str_0 = "^7$B3N5(S]{5dgPO"
    tuple_0 = (str_0,)
    dict_0 = {int_0: tuple_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    int_0 = 111
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    int_0 = 1307
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    float_0 = 551.4
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    float_0 = -1945.765
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    int_0 = 2050
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    bytes_0 = b"\xf5\xfa\xe0\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    int_0 = 580
    dict_0 = {int_0: int_0}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    bytes_0 = b"\xad\xb2\xd7z\xc9\xf3\xa8[aQ\xbc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    float_0 = -1398.685744
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    str_0 = "!-V"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    str_0 = "m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    str_0 = "T6%L1"
    float_0 = -386.66
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    int_0 = -1897
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    list_0 = []
    bool_0 = False
    list_1 = [list_0, bool_0, bool_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    bytes_0 = b"\xb9\xb9\xe8\xe4O"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    float_0 = 1561.582
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    float_0 = 1623.407
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    bytes_0 = b"\x93Z\xbe\xe0\xeb\x96\x08\xa8D\x08\xe3x\x8c\xba\x12\xc3\x19\x94\xf9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    str_0 = "*6/\\meZ ds*"
    module_0.match(str_0, str_0)


def test_case_2474():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2475():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    int_0 = 606
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    int_0 = -2985
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    float_0 = 474.798
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    int_0 = -5287
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2480():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2481():
    str_0 = "CJ0*\nrgiY%)IJ\x0c1;{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    str_0 = "/@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    int_0 = -1323
    module_0.match(int_0, int_0)


def test_case_2486():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2487():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    float_0 = -1610.73
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    int_0 = 1676
    bytes_0 = b"9\xd4\xec\xf4"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    str_0 = "pz8CNa"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    bytes_0 = b"\xbfc\xce\xcbb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    str_0 = "dSUS]C'\x0c$f4qp6=hjH*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    str_0 = "Vgw$S\rZ.qme"
    module_0.match(str_0, str_0)


def test_case_2494():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2495():
    float_0 = 2938.188
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    int_0 = -2115
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    bytes_0 = b"\xe1u\xc93\xccI^\xb3\x00\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    str_0 = "~XtbY^E,,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    str_0 = "X"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    complex_0 = 334.79 - 2299j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2501():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2502():
    float_0 = 3284.56
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    float_0 = 808.9
    str_0 = "\x0bK\n\x0bT![NE"
    set_0 = {float_0, str_0, str_0, float_0}
    tuple_0 = (float_0, set_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    bytes_0 = b"\xb6\x9a\xe6\xffZGjT\xa3|\xd5\xb1\r\xcf\x0c \x04\x88"
    list_0 = [bytes_0, bytes_0, bytes_0]
    int_0 = 678
    tuple_0 = (list_0, int_0)
    tuple_1 = ()
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    str_0 = "x\x0c#k9HEJ]uH'N*z?c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    str_0 = "Tf2Z'Crc{nz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    tuple_0 = ()
    int_0 = -3388
    dict_0 = {tuple_0: int_0}
    tuple_1 = (dict_0, dict_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    bool_0 = False
    bytes_0 = b"\xe3\xa2r\xdb\x11\xea\xeaB\x94"
    set_0 = {bool_0, bool_0, bytes_0, bytes_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    bytes_0 = b"\xf0\xff\x04\x87DI\xce\xe6\xe0kN\xd8\x10E\xce\xb9\x08!\xca\xeb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    bytes_0 = b"\xc3mze\x01\xa6\xc84\x91\xb9\xff\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    bool_0 = True
    float_0 = 1189.36
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    int_0 = -1971
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    bytes_0 = b"\x00\xe2Z\x1e}\xb6!i\xe0\xda=\xa3\x86\xfb\xd9\x1c\x17$\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    bytes_0 = b"\xd4n\xe5o"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    complex_0 = -1495.34016 + 242.63j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    float_0 = 1620.8878
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    str_0 = 'coH"a(H'
    module_0.get_new_command(str_0, str_0)


def test_case_2519():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2520():
    str_0 = "NV+Tmww^P\rMP#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    int_0 = -3202
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    str_0 = "EW"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    str_0 = "BP68<_`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    bytes_0 = b"}\xecR^P\x12\xd8m\x13dr\x1a<\xaf\xe5\xa2\xf1\x0cy\xe2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    float_0 = 2217.0212
    set_0 = {float_0, float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    str_0 = ";]tAoc,xD[a(md#JR&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    float_0 = 1900.460361
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    float_0 = 3136.3
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    bytes_0 = b":\x0b\xdb\xf0\xcf\xfb,\xbb\xfb=\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    int_0 = -661
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    int_0 = 662
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, int_0, int_0, int_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    bytes_0 = b"\x1f\xe2\xfb\x8c\x11*\x94\x9d*\xfc\xd0\x10\x94\x8d"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    int_0 = 1713
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    complex_0 = 235.076 + 116.754657j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_1.object(*complex_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    complex_0 = -1932.8 + 1612.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    str_0 = ";n\nW<z(5Wm^,23K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    int_0 = -4223
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0, list_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    bool_0 = True
    int_0 = 2210
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    int_0 = 1910
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    bytes_0 = b""
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    str_0 = "Ng"
    set_0 = {str_0, str_0}
    bytes_0 = b"\xf0\x9b\x08\xc2\x02\xe9"
    float_0 = -1516.87
    int_0 = -951
    int_1 = -1840
    tuple_0 = (set_0, int_0, int_1, set_0)
    tuple_1 = (tuple_0,)
    tuple_2 = (set_0, bytes_0, float_0, tuple_1)
    tuple_3 = (str_0, set_0, tuple_2)
    module_0.match(tuple_3, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    str_0 = "OAfT}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    bytes_0 = b"6\xa7\x15\xa9\x16\xa3\xc5\x04\xe23\xea\n\xf2X$"
    module_0.match(bytes_0, bytes_0)


def test_case_2550():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2551():
    str_0 = "\n}sAI\x0cg`h4%H`L4$d"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    int_0 = -2494
    object_0 = module_1.object()
    int_1 = -1072
    list_0 = [int_0, object_0, int_1, int_1]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    bytes_0 = b"\x16^+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    list_0 = []
    bytes_0 = b"\xe9$&\x1e"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    int_0 = -1947
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    str_0 = "<vz8;)i*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    str_0 = "`QhoO"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    bytes_0 = b"\x9apwWYH\x90\rI\x0e9\xe8\x0b;\xa4<G\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    float_0 = 368.75943
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    bytes_0 = b"\x92\xe2\xbe\xc6g\xc6d!\x10\xea\xea\xeb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    int_0 = 2069
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    int_0 = -160
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    int_0 = -2327
    bool_0 = False
    bool_1 = False
    tuple_0 = ()
    tuple_1 = (bool_0, bool_1, tuple_0)
    tuple_2 = (int_0, tuple_1, bool_0)
    tuple_3 = (tuple_2, int_0)
    dict_0 = {tuple_3: tuple_2, bool_0: tuple_2}
    module_0.match(dict_0, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    str_0 = "s3d}CSS?PdFHWK{;8AAd"
    str_1 = "3g{0I.3F@%"
    str_2 = "MP;$.;a&GW+Y$6L"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    set_0 = set()
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    bytes_0 = b"\xeco\x1eGBQ\x89\xc2\xf7~\xe8\x15B\xc2\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    str_0 = "q#e*}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    none_type_0 = None
    str_0 = "1"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    str_0 = "U\x0b)\x0bN@<IZ~$VdZ\\}qV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    bytes_0 = b"\x8fZ"
    str_0 = '^-\x0b<1-EHdS"jUx!qm~@*'
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, str_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bytes_0 = b"9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    int_0 = 988
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    bool_0 = False
    tuple_0 = ()
    dict_0 = {bool_0: tuple_0}
    str_0 = "sgdgopg\x0buNI `7O0,ATE"
    tuple_1 = (bool_0, tuple_0, dict_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    bytes_0 = b"1+\xf9\xedO\x0c\xd91\x0c\xaf\x96q\x8cJg\x03\xbe\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    str_0 = "4%AY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    int_0 = -3666
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    int_0 = -5114
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: set_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_2584():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2585():
    bytes_0 = b"\xbbB|\xb9\xcdbU\x91\xb4\xe4\x83\x81\xaa\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    str_0 = "ed&tbX7*\t?tdl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    none_type_0 = None
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, bool_0: none_type_0}
    dict_1 = {none_type_0: bool_0, none_type_0: none_type_0, bool_0: dict_0}
    module_0.match(none_type_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0]
    list_2 = [list_1, list_0]
    module_0.get_new_command(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    float_0 = 4057.54385
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    float_0 = -3740.2098
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    bytes_0 = b"\n\x9d\xff\xb3\xefM\xab!\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    bytes_0 = b"\xc7\xd3\xee\xb8\x95\x8c\xad\xee\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    int_0 = 2234
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    str_0 = "@\n;f]C#\n10!`%"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [bool_0, tuple_0]
    module_0.match(bool_0, list_0)


def test_case_2597():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2598():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    object_0 = module_1.object()
    complex_0 = -1590.417433 + 2577.55j
    list_0 = [object_0, object_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    str_0 = "\t|JN`c43c\t9BKLb\t5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    int_0 = 2108
    dict_0 = {int_0: int_0}
    bytes_0 = b""
    tuple_0 = (int_0, dict_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    float_0 = 2919.49915
    bytes_0 = b"\x90\xd0"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (float_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    bool_0 = True
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    str_0 = "y5:.qye\x0b&.\\5"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    str_0 = "G\x0c6v;b|R #N^e<62P^"
    bool_0 = False
    dict_0 = {str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    int_0 = -160
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    complex_0 = 1900.2 - 2668.92j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    str_0 = "~\x0b\x0b@QZ\nez"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    float_0 = -2862.7
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    int_0 = -2586
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    bytes_0 = b"\xf4\xed\xba\xf2K8n\xac\xe4\x830\xbdJ\xbb"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    int_0 = 4091
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    str_0 = "Fu"
    bytes_0 = b"\xcfL\x07\xab\xe7F(\x91\xb9\xb8I\xf0"
    bool_0 = False
    int_0 = -2452
    bool_1 = False
    tuple_0 = (bytes_0, bool_1)
    list_0 = [int_0, int_0, bool_1]
    tuple_1 = (bool_0, int_0, tuple_0, list_0)
    bytes_1 = b"\xea%\x90d\x99\t\x84\xb2 \xebr\xdd,\xe3\x9e/\x01\x90\xa0"
    tuple_2 = (bytes_0, tuple_1, list_0, bytes_1)
    dict_0 = {str_0: tuple_2, str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    int_0 = 1368
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    int_0 = -1858
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    list_0 = []
    bool_0 = True
    list_1 = [list_0, list_0, bool_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    float_0 = 463.42665
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    bytes_0 = b"\x8e\xd1\xaa\x8c"
    float_0 = 1072.134314
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    str_0 = "?y"
    list_0 = [str_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_2624():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2625():
    bytes_0 = b"\xc6\x96;\x1ad\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    int_0 = 24
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    int_0 = 2566
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    bool_0 = True
    bool_1 = True
    dict_0 = {}
    list_0 = []
    tuple_0 = (bool_0, bool_1, dict_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    bytes_0 = b"u\xb3\xf6\xa0\xac\xf7L\x8f\x95\x0f\x95'\x13'? 8\xee"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    str_0 = "=U\x0b&vD`FL\\vC-}"
    list_0 = [str_0, str_0, str_0, str_0]
    float_0 = -1773.86479
    tuple_0 = (list_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    int_0 = 1277
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2637():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2638():
    bytes_0 = b":\x0b\x06\xddA\xe9\xf7l\xaa"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    bytes_0 = b"\xf3"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_2641():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2642():
    int_0 = 2920
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    float_0 = -1544.313
    str_0 = "U["
    str_1 = "!-,[d~pD{6c4="
    dict_0 = {str_0: float_0, str_0: float_0, str_1: float_0, str_0: float_0}
    module_1.object(*float_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    int_0 = 1388
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    float_0 = -2585.17
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    int_0 = 915
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    bytes_0 = b"\xeb\x82cf\xfb\xacJ\x16P\xa9"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    str_0 = "-q\reY7%7"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    complex_0 = -2123.206 - 1563.770427j
    bytes_0 = b""
    tuple_0 = (complex_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [bool_0, set_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bytes_0 = b"\x10IV\xf4)'RW\xab\xad\xfc"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    int_0 = -1333
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    bytes_0 = b")va)\xe62\xf1\x9a\x1dqm"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = False
    tuple_0 = (bytes_0, set_0, bool_0, bool_0)
    list_0 = []
    tuple_1 = (tuple_0, list_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    str_0 = "\x0b%dIZx5&o.#\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2658():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2659():
    bool_0 = False
    str_0 = "&b|E+F"
    set_0 = {str_0, bool_0, str_0, bool_0}
    tuple_0 = (bool_0, str_0, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    int_0 = 2553
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    str_0 = "3"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2662():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2663():
    str_0 = '\\/YtL_wz1es5.(M9"7J7'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    str_0 = "'L2\n[u\r@$)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    complex_0 = -425.933 - 600.084664j
    bool_0 = False
    dict_0 = {bool_0: complex_0}
    tuple_0 = (complex_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    float_0 = 2502.207217
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    int_0 = -754
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    int_0 = 2662
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    int_0 = -1730
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    str_0 = "QcrZuF5Uq1;"
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {str_0: list_0, str_0: list_0, str_0: str_0}
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    str_0 = "G`0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    str_0 = "{6x\x0c:dni5z"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    int_0 = 2464
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    str_0 = "EN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    int_0 = -952
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    bytes_0 = b"\xdf\xedJ\x0c\x81i\x85c\xa7\x18`\x88_A'!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    bytes_0 = b"\xc2V6\xa7l\xb1\xcf,\xac\xeaL\x90\xc6"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    bytes_0 = b"\xf4\xcah\x02\x1b\x93\xbb]\x19\xd43\xa0\x93bF\xac\xeb^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    str_0 = "6FEn5WeyM9]]] )\t\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    int_0 = 2993
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_2686():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2687():
    str_0 = "]cW5k8g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    bytes_0 = b"\xc9\xb0\xa7\x8b\x03yk\xacDR\x89"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    str_0 = "nOk#I]]O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    float_0 = -2795.0
    int_0 = -1839
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    int_0 = 273
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    float_0 = -3606.742
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    str_0 = "l},"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    bytes_0 = b"\x9a%6\x16.\xe9:a\xa4X"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2696():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2697():
    float_0 = -368.877945
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    bytes_0 = b"F\xb5\xb2\"\x0c\xe3\x85\x12E'\xd6\x12\xae\xeb\x85"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2699():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2700():
    bytes_0 = b"uL\xc943"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    complex_0 = 4906.13 - 1537.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    bytes_0 = b"\x0e\xb1\xddy\x84"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    bytes_0 = b"\x94g\xb2\x8d\xc7\x8a\x08Gq\x93\x97\xdf#\x7f\xddY\xd2M"
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    bytes_0 = b"\x0e\xd6\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    str_0 = "}C=w.!!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    str_0 = "/!%q}y!POz"
    float_0 = -1938.8395
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    int_0 = -1884
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    bytes_0 = b"p9\x01\xa9>:\xa5\x89\xf7\xc7}\x9b\x19e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    str_0 = "Q=a)nbPE7OJ|\r3R5z4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    str_0 = '[w->kr\x0c;l\x0b8(e"1'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    float_0 = -2698.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    float_0 = 682.0
    bytes_0 = b"\xbb\x9b\xf8\xf9\\\x17\xdaj\xc5(\xe7\xe0\x80gm\xde\x8c"
    list_0 = []
    tuple_0 = (float_0, float_0, bytes_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    bool_0 = True
    str_0 = "qocCeGOeqv-1$jN;\x0cw,"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    str_0 = "I-Mu~O+z3-~E.U}9fOU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    int_0 = 347
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    bytes_0 = b"\xab\xd1\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    int_0 = 811
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    float_0 = 978.5987
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    int_0 = 160
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    float_0 = -2230.882
    bool_0 = True
    dict_0 = {float_0: float_0, bool_0: float_0}
    module_0.get_new_command(dict_0, float_0)


def test_case_2722():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2723():
    str_0 = 'MYz /u"yF!:i'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    bytes_0 = b"\xc4$O\xba\x81\x8a`\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2725():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2726():
    bytes_0 = b"\x1c-\xab=\x04\x1a@\xa8\xa5\xc4Y}\xe0'\xfe\xb6\xa7\xc8\x18"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    str_0 = "FpRwj"
    str_1 = "diQl1YR=LlV\x0bZlei"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    str_0 = '@#);"g@\n-.PExJ}Og{`'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    bytes_0 = b"\xff\x85"
    set_0 = {bytes_0, bytes_0}
    set_1 = {bytes_0}
    module_0.match(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    int_0 = 1931
    str_0 = "."
    list_0 = []
    tuple_0 = (int_0, str_0, list_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    bytes_0 = b"\xec\x84/R%\x8dI\xbd\xce\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    int_0 = 3708
    str_0 = "$jM'#4*y\x0c7nR=p"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    int_0 = 896
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    bytes_0 = b"\xca\x18dT\xfao`\xe3\xb0\xc6\xa7\x1d\x87\xc8\xf2\x06\xc5ao"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    object_0 = module_1.object()
    str_0 = "|5Ly/\\H5cz1;#=X"
    tuple_0 = (object_0, str_0)
    module_0.get_new_command(tuple_0, object_0)


def test_case_2737():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2738():
    int_0 = -672
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    bytes_0 = b"\xe7\x0c6\xd3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    tuple_0 = ()
    str_0 = ":~"
    dict_0 = {tuple_0: tuple_0, tuple_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {object_0: object_0, bool_0: bool_0, bool_0: object_0, object_0: object_0}
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    int_0 = -1359
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {object_0: object_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    str_0 = "|>u,qA+l3[x2<q6!j*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    complex_0 = -1534.376 + 2702.774277j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    complex_0 = 2017.1519 + 436.7466j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    int_0 = -4658
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    float_0 = -3469.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    bool_0 = False
    complex_0 = -6322.3 - 532.06j
    str_0 = "*H^YPFDN&iPtX0"
    set_0 = {str_0, complex_0}
    tuple_0 = (str_0, complex_0, complex_0, set_0)
    bool_1 = False
    tuple_1 = (bool_0, complex_0, tuple_0, bool_1)
    module_0.get_new_command(tuple_1, tuple_1)


def test_case_2752():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2753():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    bool_0 = True
    int_0 = 3249
    bytes_0 = b"\xdd\xf8"
    tuple_0 = (bool_0, int_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    bytes_0 = b"\x06\x9a1\xd4\xce\x9c\xfb}"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    int_0 = -2116
    object_0 = module_1.object()
    module_0.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    str_0 = "s3/'NT^;.<Cus =\x0cOx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    int_0 = 2165
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    int_0 = -845
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    str_0 = "m(F+3H(}\\K*Xfu_dR4o+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    bytes_0 = b"c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    bytes_0 = b"\ra\x160\x91\xdeH"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    complex_0 = 744.608 + 922.517j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    str_0 = "D#"
    bool_0 = True
    tuple_0 = ()
    bool_1 = True
    dict_0 = {str_0: bool_0, tuple_0: bool_1, str_0: tuple_0, bool_0: bool_1}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    float_0 = 688.200133
    module_0.match(float_0, float_0)


def test_case_2769():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2770():
    int_0 = 3666
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    str_0 = 'mF(RB"Q:HFZ'
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, str_0, dict_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    float_0 = -787.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    float_0 = 2030.635975
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    bytes_0 = b"\xae\xe9,\x98"
    str_0 = "eG:F"
    str_1 = "Z-t"
    str_2 = "MOJ"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    int_0 = -505
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    int_0 = 1566
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    bytes_0 = b"\x02\xc2\xd11p\x9a\x0f\xedjqs\xc9\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    bool_0 = False
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    float_0 = -356.604
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    set_0 = set()
    float_0 = 3527.9295
    tuple_0 = (set_0, float_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    bytes_0 = b"P"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    int_0 = 4131
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    str_0 = '3o`\n-P?Tk"}<Lm[+2L'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    str_0 = "/{XA"
    set_0 = set()
    tuple_0 = (set_0,)
    complex_0 = 1557.935909 - 815.9737j
    tuple_1 = (str_0, tuple_0, str_0, complex_0)
    module_1.object(**tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    float_0 = -1966.575
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    str_0 = "K:Qx<5[?ac.76d)=r*"
    str_1 = ",&!%w71jd\tdH&Atf"
    list_0 = [str_0, str_1, str_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    str_0 = "{G\rX\t)fb.u\\d8Lab'1A]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    str_0 = "]''}T<yu7ou`7k"
    int_0 = 2563
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    float_0 = -626.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_2792():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2793():
    int_0 = 2394
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    int_0 = -4445
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    tuple_0 = (int_0, dict_0, dict_0, bool_0)
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    float_0 = 578.81894
    set_0 = {float_0}
    tuple_0 = (float_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    str_0 = "fxqZd^CY@N3QL$r"
    bytes_0 = b"\xafE\x01m{\xed"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {object_0: object_0, object_0: object_0, object_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    int_0 = 712
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    bytes_0 = b"\xe6\x96\xf6lv\xc2\xe3Nx*\x14\x03vD\x8bU\x99\xb03\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    none_type_0 = None
    str_0 = "K-?!l\x0cWG.A0A)=d>"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    int_0 = -2752
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bytes_0 = b"v\x9d\\[\xc7\xa2\xa9\xe4i\xe4\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2804():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2805():
    complex_0 = 2904.1727 - 1612.01826j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    complex_0 = -455.9798 - 2952j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2807():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2808():
    bool_0 = True
    int_0 = -2892
    tuple_0 = (bool_0, int_0, bool_0, bool_0)
    set_0 = {bool_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    bool_0 = False
    int_0 = -320
    bool_1 = True
    float_0 = 483.8
    tuple_0 = (bool_0, int_0, bool_1, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    int_0 = -2251
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    str_0 = ""
    str_1 = "n"
    bool_0 = True
    bytes_0 = b"\xf9\x84\xe28\tm\xa7U\xd7p\xf4L"
    tuple_0 = (bytes_0, bool_0)
    tuple_1 = (str_1, bool_0, tuple_0)
    module_0.get_new_command(str_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    bytes_0 = b"\x02\xcc\xb76\xe7\x1b\x88\xc14\xa5\xb1\xeb\xe3\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    bytes_0 = b"S\xcfQk\x17o\x135\x11M\xda\xdf\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    float_0 = -2914.54136
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2819():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2820():
    str_0 = "%Vx}X\tQ1Q\r8^GsqU)"
    set_0 = {str_0, str_0, str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    str_0 = '\r"5qs7]}:#A\t'
    bytes_0 = b"\x1b\xa4\x018\xdd\xca\x85\x90\xba"
    tuple_0 = (str_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_2822():
    pass


def test_case_2823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2824():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    int_0 = 278
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    int_0 = 919
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    str_0 = "rCUE'\n(\n_q-zVw<"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    float_0 = 854.43
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    float_0 = 5315.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    tuple_0 = ()
    int_0 = -1305
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    str_0 = "R74|>..2\ra/7`>,"
    str_1 = '-km<z+T/"'
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    str_0 = "W=;g u/A="
    bool_0 = False
    bytes_0 = b"#9\xb9L\x89\xe1\x8b\xa3\xa3\xcb\x08\xdbD\rF"
    tuple_0 = (str_0, bool_0, bool_0, bytes_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    str_0 = "\x0b]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    str_0 = ":jHC\n{"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    float_0 = 2152.7404
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    bytes_0 = b"\xfc\xda\xc2bs\x98P\x83\xa3\x9e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    bytes_0 = b"E\x0c\x90n\xc5\xe9q\xa9\xcb6\xf1bg4\x98\xee "
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    bytes_0 = b"p[\xda\x05r&"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    int_0 = 857
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    int_0 = -989
    bytes_0 = b""
    module_0.match(int_0, bytes_0)


def test_case_2844():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2845():
    str_0 = "`GclF$b!YDW0@+O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    bytes_0 = b"\xe7j"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    int_0 = -3614
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    str_0 = "HBlmwW3GdE\nMg~ "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    int_0 = -222
    bytes_0 = b"K\xb8\x00\x8d\xd8T5\xcb\xc5\xb6\xebo\x81\x00i"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    float_0 = 1010.63
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bytes_0 = b"*\xd0\xe1)\x97\x04\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    bytes_0 = b"\xa2i\x8f\xdc\xea\x1a\x13\xa2\x9fA\x07\xe1)\x97\xc9\xc2\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    int_0 = 2077
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    str_0 = ",iZ.oC62="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    str_0 = "ar%,_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    float_0 = -148.7774
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    str_0 = "~ChKcYPLy<`dLnpzC\r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    str_0 = "@$NB\n`%)#%[Hu-yK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    int_0 = 3202
    set_0 = {int_0, int_0}
    bytes_0 = b"b\xcdV\x0e\xa2vo\xa2\xc1AI\x81C"
    tuple_0 = (set_0, bytes_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    str_0 = "g\t="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    str_0 = "<)qG&VIi[QoA-bwC!u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    float_0 = -827.91989
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


def test_case_2866():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2867():
    str_0 = "^+VoV,vQeZI7.<"
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0, tuple_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    int_0 = 295
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    complex_0 = 1456.44 - 555.07j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    str_0 = "W}MtSsBEzSzn\r5=j{s~"
    dict_0 = {str_0: str_0}
    dict_1 = {}
    module_0.get_new_command(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    float_0 = 145.65167
    dict_0 = {float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    bytes_0 = b"\xb9\xba\xe0/}\xf7{\x9b\xa0\xbb>\xceJ\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    float_0 = 4229.91507
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    int_0 = 2731
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    int_0 = 419
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    list_0 = []
    str_0 = "<NK%\t=H@v:*)c"
    tuple_0 = (list_0, str_0, str_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    int_0 = -2111
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    str_0 = '"C|P`hd\'LDo"<3'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    bool_0 = False
    int_0 = -4287
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    bytes_0 = b"\xd6\xe7\xb32~\xdf\x9a\xd28\xb3y\xd0\x82l"
    int_0 = 603
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    float_0 = 2029.27771
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    bytes_0 = b"n-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    float_0 = -3478.61414
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    none_type_0 = None
    float_0 = 218.26
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    float_0 = -2196.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    str_0 = "O`n8V>\nIn1Q5T2J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    float_0 = 3751.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    object_1 = module_1.object(**dict_0)
    list_0 = [object_0, dict_0, object_1, object_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    int_0 = 768
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    int_0 = -959
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    str_0 = 'c/3li=\\*E~"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    str_0 = "HB;OQ!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    bytes_0 = b"\x9e`\xd9;E#O\x06=K\xd76\x83{"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    float_0 = -1588.0
    set_0 = {float_0}
    bytes_0 = b"\xa5\x91$\x1dm\xf6\x01*\xc5\x08l\x99-YD\xbd?I"
    tuple_0 = (float_0, set_0, set_0, bytes_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    str_0 = "s66R#t}<Y!$)"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    bytes_0 = b"\x94_O\xcd\x14\xec\xcf\xff="
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    str_0 = "5cFKU_ia"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    float_0 = -1835.87
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    int_0 = 2656
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    str_0 = ""
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    int_0 = -3382
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    str_0 = "LFZ>1vCOPk%M\n/Vo\nee,"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    bytes_0 = b"\x87\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bytes_0 = b"\x1bv\xe0P\xfa\xb1\xbb\xf3\x84\xb8n\x8f4R\xc4\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    str_0 = "uo&bEK>zIx5\\{itd?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bytes_0 = b"HM\xcc\x7fD\x85|\xe5d\xe4\xf6(\xfco"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    int_0 = 474
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "u;36ILMM?Wm8Vr"
    dict_0 = {str_0: list_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    bytes_0 = b"\xa8E|(\x86\x81\x07\xd4\xaciN*\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    int_0 = -609
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    bytes_0 = b"\x8e\xbe\xd6"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    none_type_0 = None
    bytes_0 = b"\xdd\x020<c!1"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    bytes_0 = b";m\x88"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    str_0 = "}+,W_awNVh\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    str_0 = 'q64y+BT"E\tBt$ny>'
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    complex_0 = 5116 + 5704.371j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    complex_0 = -626.09174 - 1807.46j
    list_0 = [complex_0, complex_0]
    list_1 = [complex_0, complex_0, complex_0, list_0]
    module_1.object(*list_1)


def test_case_2928():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2929():
    bytes_0 = b"\x83\x05u:\xa17\x89\xf2\xae\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    float_0 = 558.176
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    str_0 = "Hg4;cg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    int_0 = -1714
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    int_0 = 6
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    complex_0 = 5229.525 + 935.55119j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    int_0 = -1939
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    str_0 = 'G6GlyG"fN'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    str_0 = "sD,}j}9y=iZ>"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    str_0 = "y%QoXr4i)lJw,T"
    module_0.get_new_command(str_0, str_0)


def test_case_2939():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2940():
    float_0 = 675.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    int_0 = 367
    int_1 = -1755
    bool_0 = False
    tuple_0 = (int_0, int_1, bool_0)
    set_0 = {tuple_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    str_0 = "x\\Krxq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    str_0 = "Hs1&RoUq\t"
    complex_0 = 1326.1171 + 2491j
    tuple_1 = (set_0, str_0, complex_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    float_0 = -1788.981
    bytes_0 = b""
    tuple_0 = (float_0, bytes_0)
    list_0 = [tuple_0, float_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    str_0 = "w8`x!}z2w`~\nHcz?y22u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    float_0 = -4138.6099
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    int_0 = -1649
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    int_0 = 1474
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    str_0 = "A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    dict_0 = {}
    str_0 = '^\tz\\\tH")'
    tuple_0 = (dict_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    int_0 = -807
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    str_0 = "&K/TG}78Y%d!d&eP\x0b"
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    int_0 = -2148
    str_0 = "98(8T\x0c B_c4"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    str_0 = "Q$cf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    str_0 = "EeE\t"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    bytes_0 = b"$\xf3<\x1f\xb5\x16\xa7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    str_0 = "eUd"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    bytes_0 = b"\xc2\xa2'\xde\xa6\x93\xe2\x83\xb6k[\xad6\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    none_type_0 = None
    float_0 = 4459.16
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    complex_0 = 1753.4433 - 3081.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    bytes_0 = b"\xc0p\x8b=ZT=E\xfc\x0c\x02\x16\xfcW<EY\xee"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    str_0 = "8Q3SS=Dl\\ud`O\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    int_0 = -4163
    module_0.match(int_0, int_0)


def test_case_2968():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2969():
    str_0 = "Tm1~aZJ6qV\x0bCy!"
    tuple_0 = ()
    dict_0 = {str_0: tuple_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    int_0 = 2474
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    complex_0 = 964.214 + 2762.268466j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    float_0 = -474.1821
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    bytes_0 = b"\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    complex_0 = -605 - 12.09663j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    str_0 = "bu-Qa!t\\\x0cQ.mS$@y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    str_0 = "J\\=YY\n+Y8R"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    str_0 = "p|>c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    bytes_0 = b"=\x9c"
    int_0 = -307
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    bytes_0 = b"\x80\x03\xf8\xd1F_\xd6m\x04\xbe\xdc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    bytes_0 = b"6j"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    int_0 = 613
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    str_0 = "'y\nd,\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    str_0 = "Ey)_4c11PW"
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {}
    tuple_0 = (list_0, str_0, dict_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    bytes_0 = b"\xbe\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    float_0 = -1590.95
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    bytes_0 = b"\xee\xe4\x1a"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    str_0 = "6"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    str_0 = ',,a wcvo>tXSPNY@?6W"'
    bool_0 = True
    tuple_0 = (str_0, bool_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    complex_0 = 554.683254 + 1859.26j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    int_0 = -3536
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    float_0 = 1036.0
    module_0.get_new_command(float_0, float_0)


def test_case_2997():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2998():
    str_0 = "U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    complex_0 = 1746.067244 - 1793.7003j
    list_0 = [complex_0]
    module_0.get_new_command(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    str_0 = "Q]R+U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    str_0 = 'd"k7dm<5'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    tuple_0 = ()
    str_0 = '"1\x0cD4"'
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: tuple_0}
    module_1.object(**dict_0)


def test_case_3003():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3004():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    str_0 = "\x0cFvJ|5/Axbjgr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    str_0 = "ZXK~Eaeey1mn5o=/u3"
    module_0.match(str_0, str_0)


def test_case_3008():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3009():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    object_0 = module_1.object()
    tuple_0 = ()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: tuple_0,
        tuple_0: object_0,
    }
    float_0 = 271.935
    bool_0 = True
    tuple_1 = (object_0, dict_0, float_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    str_0 = "=&Bwj"
    module_0.match(str_0, str_0)


def test_case_3012():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3013():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    int_0 = -421
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    bytes_0 = b"\xab\xc6\x12\xa3\x08\x95\xb0\xe0"
    list_0 = [dict_0, bool_0, bytes_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    bool_0 = False
    float_0 = -256.323576
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, float_0, bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    bool_0 = False
    bytes_0 = b"~\xed\x87"
    dict_0 = {bool_0: bool_0, bytes_0: bool_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    bytes_0 = b"j\xf9\xe6\x89w-\x8d"
    set_0 = set()
    bytes_1 = b"\x02\xcc\x94`]\x1el\r\xd5=\x10"
    str_0 = "K%s+|CE"
    tuple_0 = (bytes_1, set_0, str_0)
    int_0 = 4324
    tuple_1 = (bytes_0, set_0, tuple_0, int_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    int_0 = 5105
    str_0 = "w\x0cNiv!"
    set_0 = {int_0, int_0, int_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    int_0 = 3241
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    int_0 = 1659
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    complex_0 = 2215.91579 - 817.9359j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    int_0 = -2203
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    int_0 = 1959
    tuple_0 = ()
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    bytes_0 = b"Y\xcbNi\\\xf7\x94M\xb1\xbec\xc5\xd0\x84\xdc\xe8\xc4X\x0f\xbc"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_3028():
    pass


def test_case_3029():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3030():
    str_0 = "*]q(OO+Nd%\x0b'jevwA^|i"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    str_0 = "~kC\rFnKJuvn3:|$"
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, str_0, str_0, list_0]
    list_2 = [list_1]
    list_3 = [list_2, list_2]
    module_0.get_new_command(list_3, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    str_0 = "Nw,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    int_0 = 1448
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    float_0 = 636.744
    set_0 = {float_0, float_0, float_0}
    dict_0 = {float_0: set_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    int_0 = -1008
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    float_0 = 449.593
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    float_0 = 23.82
    int_0 = -904
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    str_0 = "=HQnt"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    int_0 = 1639
    bytes_0 = b"'\x9c^\x02D\x1921\x80\x1ehv\xe7"
    list_0 = [int_0, int_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    bytes_0 = b"M\xbfyt\xc44\xa7\xa5\xbbN\x06*\x82\xafyt\xda\xec\x93\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    bytes_0 = b"G\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\xffAK`\x03{\x8f\xe6\xe2\xc6\xefb\xe9\x15d\rq"
    tuple_0 = (bool_0, set_0, bytes_0, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    int_0 = -1948
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    none_type_0 = None
    str_0 = '4fZREG+ws7X|{UePm "B'
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    complex_0 = -2133.84499 + 1346.92j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    float_0 = 1039.570424
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    none_type_0 = None
    str_0 = "\x0bSn2pSB*dOT"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    int_0 = -204
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    bytes_0 = b"(\x06\xb4\x8eS<\xdf\x97\xa6r\xce\xb8h\xfd(P\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    int_0 = -405
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    str_0 = ")c}~b.R#cB@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    float_0 = -1402.21334
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    int_0 = -1299
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    str_0 = "\"fUy,\\d?ttF0z'-gqYc\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    str_0 = "=B]}JT&"
    float_0 = -881.62
    tuple_0 = (str_0, float_0, float_0, float_0)
    int_0 = 3945
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    bytes_0 = b"\x19\xe6p\xc5d\xf2\x94\x13\xd3"
    module_0.match(bytes_0, bytes_0)


def test_case_3058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3059():
    bytes_0 = b"\xbd\xd3\x83\xef\xc6DW\xb3\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    str_0 = "B1#"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    int_0 = -1018
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    int_0 = -1258
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    bytes_0 = b"t\xf7\xf7,T\x9d1\xda[\xa6\x88\xff\xb9\xfdi:\xb8"
    int_0 = -1478
    int_1 = 269
    tuple_0 = (bytes_0, int_0, int_1, int_0)
    module_0.match(tuple_0, int_1)


def test_case_3064():
    pass


def test_case_3065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3066():
    int_0 = 1558
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    bytes_0 = b"\xc3O\x9b\xb0\x91\x14"
    list_0 = [bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    int_0 = -1040
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    bytes_0 = b"7\xd0\xe2x\xd0!\xc5\xbc\xa1\x93\xba\x04^4\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    str_0 = "E]MOu1}woK>"
    str_1 = "'<1B)pOmM<72n"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    float_0 = 644.673959
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    str_0 = ",8OP:"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_3073():
    pass


def test_case_3074():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3075():
    str_0 = "Nl^ CtlnICO}3a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    bytes_0 = b"\xcc\r\x86\x80\tJ\xf54X\xde\x029I\xd1\xbf(\xac\x99V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    str_0 = "guhF6''Ff8m2EA3_"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    bytes_0 = b"\xf0f\xe2\x10\xb2z\x86\x91/#\x98\xfb>~K\x9an?\x81"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


def test_case_3079():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3080():
    bytes_0 = b"=\xa9\x91\xab\x8dqos\xde\x17c\x9b?o\xb7\xa3\x90"
    int_0 = 4956
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    str_0 = "pQ;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    str_0 = "GI+yF7@@`b*O9N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    str_0 = "bZP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    float_0 = -2679.2161
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    str_0 = "nS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    int_0 = 123
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    int_0 = 1697
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    str_0 = "D9?b}!qHCgPbs!"
    complex_0 = -1551 + 3162.7557j
    set_0 = {str_0, complex_0, str_0, complex_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    int_0 = 2463
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    bool_0 = True
    int_0 = -750
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    complex_0 = 2627.7135 - 432.635081j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    int_0 = 2099
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    int_0 = -829
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    str_0 = ";*Zuv'2uOZV+KY1+s*D"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_3097():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3098():
    bytes_0 = b"\x1b\x96\xdf\x9c^\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    int_0 = 652
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    str_0 = ":{.r'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    none_type_0 = None
    complex_0 = 717 + 2811.904723j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    str_0 = "rU)'[pYx(79y~#ie]#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    str_0 = "=aQ_PU\x0cuZ[#Hl)G~*^]J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    bytes_0 = b"\xaa\xf3~\xf7j+&\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    float_0 = -536.47
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    int_0 = 3311
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    str_0 = "83*dBLTj0"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    float_0 = -3267.0
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    complex_0 = 238.007 - 1434.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    bytes_0 = b"J\rb\xd5\x1d\xf6\x03a\x86\\\xd0\xe5n\xf9Z\x93"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    str_0 = "3dAb*ttsy"
    module_0.get_new_command(str_0, str_0)


def test_case_3114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3115():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    bytes_0 = b"\x89\x0f\xd8\xfeYq\x0f\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    int_0 = -2386
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    float_0 = -780.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    int_0 = 724
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    int_0 = -1584
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    float_0 = 344.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    bytes_0 = b"{d {Au\xdb\x82\x90\xe9$\xcb/\xceN\xb9o"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    str_0 = "zyMx"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    bytes_0 = b"I\x95"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    str_0 = "\r%HCv_OeI!}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    str_0 = "X5=FU"
    dict_0 = {}
    tuple_0 = (set_0, str_0, dict_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    int_0 = 627
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    bytes_0 = b"\x7f>\t\x87u\xdekp\r\x8a\xbf{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    str_0 = "lqf(S:.!,OD"
    list_0 = [str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    str_0 = ")3CRd\nf5}AexS90p.\x0cG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bytes_0 = b"\x99b?\x9a\x13"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    bytes_0 = b"\xf2\xeeq\xacN\t\xfc\xc0\xae9\xe9\xb8T<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    str_0 = '\x0c)1t$Kqk"_;B3M'
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    complex_0 = 2105.81139 + 80.823994j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    int_0 = 4658
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    int_0 = -1873
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    str_0 = "+erf&`2@\r`"
    none_type_0 = None
    module_0.match(none_type_0, str_0)


def test_case_3140():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3141():
    str_0 = "_/y\n-QUtxc.b'ObEVu"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    complex_0 = -2660.9 - 702.204251j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    bytes_0 = b"\x88\x19}\xb9m\xe7\xb1\xd3^\xf7\x12)\x05\xdcl\xd3Us"
    int_0 = -6484
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    int_0 = 1039
    str_0 = "(8l|cKCMVC"
    tuple_0 = (int_0, str_0, int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    float_0 = 637.8535
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    int_0 = 1311
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    int_0 = -3215
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3149():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3150():
    int_0 = -2732
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    int_0 = 2003
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    int_1 = 1256
    module_0.get_new_command(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    bytes_0 = b"\x8cB\xd9\x95\xd7\xd0\x16=\x11\x96\xc56'\xe0."
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    str_0 = "k3"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    str_0 = "ajv,U*5E{/J>\\!Dr\\N"
    module_0.match(str_0, str_0)


def test_case_3155():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3156():
    str_0 = ""
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    int_0 = -3666
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    bytes_0 = b"c\x05\xa5\xd0$\xd7\xcdSg\x147\\\xe6\xe4\xca\xca\xfd"
    bool_0 = True
    bool_1 = True
    dict_0 = {bytes_0: bytes_0, bool_0: bool_0, bytes_0: bool_0, bool_0: bool_1}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    bytes_0 = b"\xaa\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    int_0 = 168
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    int_0 = -2777
    module_0.match(int_0, int_0)


def test_case_3162():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3163():
    bytes_0 = b"G\x9e\x8b\xb0\xf3\xe25\x89\xf8\xea\x82\xe6\x94\x82o>"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    int_0 = 2405
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    int_0 = -702
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    bytes_0 = b"\x8c82\xb5\x96\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    float_0 = 4422.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    int_0 = 1728
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


def test_case_3170():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3171():
    bytes_0 = b"\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    bytes_0 = b"\x89\xb9\x90+\x0b\xf8\xc7\xd5d\x99m1\x07J\xd0_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "DrF0OfQ#\x0bu"
    str_1 = "b^{'"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    tuple_1 = (dict_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


def test_case_3176():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3177():
    int_0 = 2439
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    int_0 = 723
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    str_0 = "~9\x0bqL83d"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    int_0 = -239
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    float_0 = -2310.792
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    bytes_0 = b"\xcc-\x10\xee"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    float_0 = 78.2739
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    str_0 = ".*_}\tn/p?>m*/F"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    float_0 = 1085.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    float_0 = 2517.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    int_0 = 1227
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    str_0 = "pPv!P!W%`Gk#KJ\x0crZ\r7\x0b"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    str_0 = "C\x0bw"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    complex_0 = 2256.726167 + 522j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    bool_0 = False
    str_0 = "R2f;"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    int_0 = 3303
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    int_0 = -2485
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    set_0 = set()
    float_0 = 1505.0764
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    tuple_0 = ()
    str_0 = "gf/G1n1NJV"
    list_0 = [tuple_0, str_0]
    bool_0 = False
    bytes_0 = b"\xc7qMi;\xad\xb51"
    tuple_1 = (list_0, str_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    int_0 = -449
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    float_0 = -4998.2
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    int_0 = -1065
    tuple_0 = (int_0, list_0)
    tuple_1 = (list_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


def test_case_3201():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3202():
    complex_0 = 250.397956 - 1368.8821j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    list_0 = []
    str_0 = "Mzm"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    float_0 = 1708.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    complex_0 = -2029.844 - 1214.1j
    dict_0 = {complex_0: complex_0}
    list_0 = [dict_0, complex_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    int_0 = -1933
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    bytes_0 = b"m9\xd1W\x98\xbc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    str_0 = "u./km/A:zou_Nw=h"
    str_1 = "H"
    str_2 = "pD\nnp~"
    int_0 = -1167
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    bytes_0 = b"Y{\x06\x9c\x01\xf4v\xde\xdc\xe3N\xe0\xe1 \x84KO\x9e\xe4R"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3210():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3211():
    bytes_0 = b"n\xbbd\x83g*\xe7\xf7E\xc4yju\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    int_0 = -265
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    str_0 = "\x0c9cx)%GJ^o+`y'3`3w`z"
    int_0 = 1352
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    tuple_0 = ()
    bytes_0 = b"AVbm\xda\xf8Gi\x05%"
    bool_0 = True
    tuple_1 = (tuple_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    int_0 = 513
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    complex_0 = -2695.984 - 406.20621j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    str_0 = "cn\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    str_0 = "L<nc`I&us]"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    bytes_0 = b"?\x83\xcb#0\x03Y"
    bytes_1 = b"\xc0\xaf3\x96\xabb\x93"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    int_0 = -879
    set_0 = {int_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    str_0 = "T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    none_type_0 = None
    complex_0 = 153.18468 - 4459.031023j
    list_0 = [complex_0, complex_0]
    bool_0 = True
    tuple_0 = (complex_0, complex_0, list_0, bool_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    list_1 = [object_0, object_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    str_0 = "@Pt\\D*4g."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    str_0 = "18kl2{45spp.\\{U0cn67"
    module_1.object(**str_0)


def test_case_3227():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3228():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_3229():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3230():
    int_0 = 124
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    float_0 = -1265.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    str_0 = "\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    str_0 = "}w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    int_0 = 3148
    module_0.get_new_command(int_0, int_0)


def test_case_3235():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3236():
    bool_0 = False
    str_0 = "OA)"
    dict_0 = {str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    bytes_0 = b"\x06\x80\x07c\xb2\x8e"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    str_0 = "q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    float_0 = 292.684549
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    bytes_0 = b"\xd2\xa0\xa5\x18-6\xb2\x04\xb9]\xdf\n\x08W\xc8\x84\xbb\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    int_0 = 734
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    bytes_0 = b"\x05\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    str_0 = "\tkmCJ]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    float_0 = -221.29
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    str_0 = "_-?!):b!N\rc!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    str_0 = 'TMNY"]G\\>(7TFbqBV('
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    bytes_0 = b"\xfcj\x05\x8a\x0c{\xb7?\xef\xb0\xb0h"
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (bytes_0, bytes_0, tuple_0)
    dict_0 = {tuple_1: bool_0, bool_0: tuple_0, bytes_0: tuple_1, tuple_1: tuple_1}
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    bytes_0 = b"\xf3PB"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    int_0 = 1134
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    bytes_0 = b"\xacR6\x08\xa7\xf7O\xfc\xac\xf3\x9b\x14\x1e\x1cbj\\"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


def test_case_3253():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3254():
    int_0 = -202
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    bool_0 = False
    bytes_0 = b"&\x9d6\x008U\xcc3\xb9\x1c\xde\x0e\xd9\xd5RD\x99\x89\x17\x99"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    str_0 = "5b\nc,;T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    bool_0 = True
    int_0 = -1363
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    int_0 = 270
    module_0.get_new_command(int_0, int_0)


def test_case_3259():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3260():
    str_0 = "?De^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    float_0 = 273.8468
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    int_0 = -650
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    int_0 = 383
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "X>zo7L6F+9fJ)NuD$[c"
    str_1 = "e3)+H*`T"
    dict_0 = {str_0: list_0, str_0: list_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    bytes_0 = b"\xe6\xc8\xa9P\xd9\xf8`\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    float_0 = 2911.727444
    list_0 = [float_0, float_0]
    str_0 = "|f)Wrg 2)elvUY]UAucu"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    str_0 = "t.C8w?7HJ;;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    str_0 = "\x0b#!@#>8nK"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    str_0 = "Vhd\x0c<(B%b=s3faq0/mi"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    str_0 = "7wg\\8!.3aNi"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    bytes_0 = b'l~"\x13\x98\xce\xda\xc0\xc5\x9b'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    bool_0 = True
    int_0 = 3021
    module_0.get_new_command(bool_0, int_0)


def test_case_3274():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3275():
    complex_0 = 1352 - 1110j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    bytes_0 = b"y%\t&\xa7_P4x\x98/\xc9W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    complex_0 = -2498.2 - 1192.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    bool_0 = True
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    str_0 = "A1uh*ff<^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    str_0 = "G3Wj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    bytes_0 = b"Z\x8ec\xfe\xb5\x8c\xcbi\xf2\xdb\xa5\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    int_0 = -1886
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    str_0 = "^u|jz\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    float_0 = 91.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    int_0 = -2897
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    str_0 = "j/h6laAs5+n"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    str_0 = "'\x0cw^[/tHE()(.n=\x0b9"
    str_1 = "?LQqU\x0by\rF\n9FQ#Sz"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    none_type_0 = None
    module_1.object(*none_type_0)


def test_case_3289():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3290():
    bytes_0 = b"*\xff\xe6\xa5S\x031M\x136\x8c\xb5\xa4\xecz\xb9"
    tuple_0 = (bytes_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_3291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3292():
    bytes_0 = b"+\xff\xba"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    bytes_0 = b"\x12\xc1d_A?\xd5<o\xd0\x18\x1d\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    str_0 = ""
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    str_0 = "rdt2f]7q\tj$YtEmexcLy"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    int_0 = -3922
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    str_0 = "&h@\nF8h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    none_type_0 = None
    float_0 = -390.4295
    bytes_0 = b"\xa4\x05V\x82\xef\x9e\x0f\x8f\x10\x80\x8a\x7f\xfb"
    list_0 = [none_type_0, float_0, bytes_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    int_0 = -135
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    str_0 = "eDqGn'c\tE+|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    str_0 = "&4W\rL_h@L"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    bytes_0 = b"@y\xde\xba\xcdr ,\xac\xfd"
    float_0 = -659.69
    dict_0 = {bytes_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    bytes_0 = b"\xa9Et\xd3\\\xcbC\xe0#{\xb1\xee\x18"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    bytes_0 = b"\x8b\xdc\x93\xa5(\xa1\xa2"
    set_0 = {bytes_0}
    module_0.match(bytes_0, set_0)


def test_case_3308():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3309():
    str_0 = "Al.+%R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    list_0 = []
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    int_0 = -1038
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    int_0 = 41
    str_0 = "GMgN+n,"
    bool_0 = True
    tuple_0 = (int_0, int_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    int_0 = 1763
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    str_0 = "N*vr:S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    int_0 = 1698
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    str_0 = "tKt(bj_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    str_0 = "8z.Mf^>P"
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    tuple_1 = (str_0, bool_0, tuple_0)
    str_1 = "^"
    dict_0 = {tuple_1: str_0, tuple_0: bool_1, tuple_0: bool_1, bool_1: str_1}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    none_type_0 = None
    complex_0 = -2992.8 - 1292.38j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    int_0 = -2895
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    int_0 = -2891
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3323():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3324():
    bytes_0 = b"#\x18\xf0\x91\x18Vv\x1a\x8dy"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    float_0 = 4122.82
    bytes_0 = b"\xf2\xcc\xacWpx\xb6\x17:*\xc5"
    list_0 = [float_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    complex_0 = -1100.938 + 1146.5j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.match(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bool_1 = False
    list_0 = [set_0, bool_1, bool_0, bool_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    bytes_0 = b""
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_3330():
    object_0 = module_1.object()


def test_case_3331():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3332():
    str_0 = "U8Ahs^g7Ih{&v]<#"
    none_type_0 = None
    str_1 = "s+BR"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_3334():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3335():
    int_0 = 2177
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [dict_0, list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    bytes_0 = b"\xe3}\xb8\xfd\x86\xccd\xe0\xa0 m\xa6\xb7&\xc6\x01\x10"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    float_0 = 177.58884
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    str_0 = ",$8>^P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    str_0 = "a`6d\x0c"
    dict_0 = {}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    complex_0 = 5685.65 - 518.7j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    int_0 = 3166
    list_0 = [int_0, int_0, int_0]
    str_0 = "LU2bVgB\n:6|ex"
    str_1 = "<"
    str_2 = "^Q,QzZHHQa(#"
    dict_0 = {str_0: int_0, str_0: str_0, str_1: list_0, str_2: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    int_0 = -1123
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0, tuple_0: tuple_0, bool_0: bool_0, bool_0: tuple_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    str_0 = "pf+^Gv2v-(mV*/0pKkH2"
    module_0.match(str_0, str_0)


def test_case_3347():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3348():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    int_0 = 524
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    complex_0 = -743.24714 + 454.11102j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    str_0 = "\x0b"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    float_0 = 1742.31
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    str_0 = "|SP(A"
    module_0.get_new_command(str_0, str_0)


def test_case_3355():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3356():
    bytes_0 = b"Az\x80\xe6\xd1\xc60\xcfY/-\xf9M\xcf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    float_0 = 53.2216
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    str_0 = "~G\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    float_0 = 1447.2468
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    int_0 = 3262
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    bool_0 = True
    str_0 = "JogK{}HD"
    tuple_0 = (bool_0, str_0)
    dict_0 = {str_0: bool_0, str_0: bool_0}
    tuple_1 = (tuple_0, dict_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    int_0 = 1889
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    float_0 = -3680.8205
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    str_0 = "8WHcyD\x0bjA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    str_0 = 'SD8HK*l"2bIjj?'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    list_0 = []
    bool_0 = False
    bool_1 = False
    tuple_0 = (list_0, bool_0, bool_1, bool_0)
    list_1 = [tuple_0, bool_0, tuple_0, bool_0]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    str_0 = "Vs)<:SM"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3370():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3371():
    int_0 = 3010
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    bytes_0 = b"\xe0 \x82F\xd1\xedB\xb0_\xfb\x7f\x98\xffZ_\xc93q\xaf^"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = ()
    tuple_1 = (bytes_0, list_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    bytes_0 = b"\xda\xa5\x0b\x12\xf9Q\x07\x1a[\xc3\xce\xbe/5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    bool_0 = False
    str_0 = "dY&4^FP"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    float_0 = -2007.396171
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    str_0 = "t)n$BK#fQ\nQB&5u8|3v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    str_0 = "u;-.\ny==_hgD=r\n=c\x0bPY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    int_0 = 3368
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    int_0 = 1016
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    int_0 = -389
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


def test_case_3381():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3382():
    bytes_0 = b"\xc1\x8e1>\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    complex_0 = 1098 - 1518.15058j
    module_1.object(**complex_0)


def test_case_3384():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3385():
    complex_0 = 1825.7 - 3582j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    float_0 = 453.402708
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_3387():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3388():
    int_0 = 724
    module_0.get_new_command(int_0, int_0)


def test_case_3389():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    complex_0 = -4059.25175 - 665.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    str_0 = 'VC/7"<#Sc\x0bc\x0b)'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    bytes_0 = b"\xe8\xd59\xd7\xb2\xafFU\xfb\xce"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3394():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3395():
    str_0 = "4d>1OPq"
    module_0.match(str_0, str_0)


def test_case_3396():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3397():
    int_0 = -1583
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    str_0 = "y\x0b,Ibl@ap5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    float_0 = -1524.040113
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    float_0 = 843.5494
    list_0 = [float_0, float_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    int_0 = -148
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    bytes_0 = b"\xa1\x16\xb9\xe5h\x06\x820x\r\x00YmH\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    str_0 = "EU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    str_0 = '95`"S\\NQ_p\x0b6gGCG0e'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    int_0 = -2096
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    complex_0 = 1920.77495 - 645.06348j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    str_0 = "Hc,RMiX_tp\\WX,U"
    module_0.match(str_0, str_0)


def test_case_3410():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3411():
    bytes_0 = b"V\x97\nx\x056\xf8\xb5h/\xeb\xb7\xf7FR<Rt\x0b\xe9"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    str_0 = '"P\nxbF-4\t^$Zs@$yNl'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    int_0 = 1223
    float_0 = 1696.42
    set_0 = {int_0, float_0, int_0, float_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    str_0 = "xf_x|l*'^\nr>|Ug]*tS"
    list_0 = []
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    float_0 = 2142.3409
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    int_0 = -593
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    dict_0 = {object_0: tuple_0, tuple_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    int_0 = 2157
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3420():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3421():
    str_0 = "56l\t<\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    complex_0 = -792.414 + 383.9j
    object_0 = module_1.object()
    module_0.match(complex_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    bytes_0 = b"`\xb4\xa5=\x80M)Z\xc9oL\xc0\xba>>V"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3425():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    set_0 = set()
    tuple_0 = (set_0, set_0, set_0, set_0)
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1, set_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    str_0 = '9H|~&"N--]=15,~/ !'
    str_1 = "LLXm%E/hOX\nL"
    list_0 = [str_0, str_1, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    list_0 = []
    bytes_0 = b"\x1e_\xda\x98:\xcb"
    bool_0 = False
    set_0 = set()
    tuple_0 = (list_0, bytes_0, bool_0, set_0)
    complex_0 = 497.814 - 1753.3356j
    module_0.match(tuple_0, complex_0)


def test_case_3429():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3430():
    str_0 = "/&'k@uH)|T@6J4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    int_0 = 944
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    str_0 = "N?1W32L\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    bytes_0 = b"2\xe2\n\xb7(\xf6H\xadx\xb5,\xcf\xae\xe1\xda\x07\xd5"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    int_0 = -1623
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    float_0 = 1272.803573
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    str_0 = "-2AeU\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    str_0 = '\n\n$?G"D'
    bytes_0 = b'\xb7"G8\xc5\xb4\xc7\xc9M\x92'
    str_1 = "vOpL"
    tuple_0 = (str_0, str_0, bytes_0, str_1)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    str_0 = "\rYJ=IkAD_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    int_0 = -172
    module_0.match(int_0, int_0)


def test_case_3442():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3443():
    int_0 = 1024
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    str_0 = "&.5Am\nkWC#.wN3MF||L"
    str_1 = "O\x0bQjUt|/k%Dib\\|"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    str_0 = "ql>h^=Qh[uz^lC&Yt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    str_0 = '2^"0=|MwvIXEN<%'
    str_1 = "DuyRJ?"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    str_0 = 'j("xYOn'
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    str_0 = "\x0b*!;RzCV="
    module_0.get_new_command(str_0, str_0)


def test_case_3449():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3450():
    bytes_0 = b"8Hp\x04\xceX\x1d\xe0\x1cM\xaa\x06Zt\xb8\xd6R"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    bytes_0 = b"\xcb\x824RN\x11rB"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3452():
    pass


def test_case_3453():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3454():
    bytes_0 = b"a\xd2\xcd\r4\xda\x96"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    bytes_0 = b"\xa2\xba\x85\xcaM\xb6 \xf3\x08'\xfd\""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    str_0 = "=\n\n=@*~AsV-x&O>X;6ZV"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    bytes_0 = b"\x13\x03\x9c\x97e\x14k\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    float_0 = -276.58564
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    complex_0 = 1384.402715 + 141.324794j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    str_0 = "v\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    dict_0 = {}
    str_0 = "He8Vu"
    bool_0 = True
    tuple_0 = (dict_0, str_0, str_0, bool_0)
    list_0 = [tuple_0, bool_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    float_0 = 402.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    str_0 = "mLpoT/q-K1[mpk1"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    str_0 = "G?a`\tKa>\x0b2aL"
    tuple_0 = (str_0, str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    complex_0 = -3584.7864 - 652.06j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    bytes_0 = b"\xce\x99\xe1\x87q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    int_0 = -535
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    int_0 = 478
    str_0 = ""
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    bytes_0 = b"\xd2\x84.\x1bz\xd5d"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


def test_case_3473():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3474():
    float_0 = -245.2946
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    str_0 = "5I%SdT"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3476():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3477():
    bytes_0 = b"Y\\Z\xcd\x8d\x8e\x086\xc7\x98\xa4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    int_0 = 439
    dict_0 = {}
    tuple_0 = (int_0, int_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    complex_0 = 1864.194317 - 1208.9j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    bytes_0 = b"\xef\xaf\x8e\x8c\xe131\xc9\xed>\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    int_0 = -4976
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    str_0 = "{[ZvU+XHKr;\n\nC w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    float_0 = 2204.37727
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    complex_0 = -100.698 + 1555.929529j
    bytes_0 = b"\xff\xb8\xc4l\xf7\xcfl"
    tuple_0 = (list_0, list_0, complex_0, bytes_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0]
    dict_0 = {bool_0: list_0}
    tuple_0 = (set_0, set_0, list_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    bytes_0 = b"M\xa4\x9fW\x9f\xc1gc\xc9q_EI\xf5\xcbgo\x1b|"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0}
    tuple_0 = (dict_0, bool_0, bool_0)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    str_0 = "u:RRX9[y$q"
    module_0.match(str_0, str_0)


def test_case_3488():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3489():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    bytes_0 = b'\xd4q\xd6\x8a"\xf1\xdcg\xd5'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    str_0 = 'L yGH5\x0c!"{Uz'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    int_0 = -2752
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    complex_0 = 1810.0802 - 412.875306j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    bytes_0 = b"\\\xd6\xd43 =\xfa\xb8w\x02[\xe9M\xeec\xa8\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    bytes_0 = b"+\x8f\x9c\xefB\xba\x81\x9ax\x1b\xd7L"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3499():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3500():
    bytes_0 = b"h\x8di\xe7x\xdc\x89y4P\x0c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    str_0 = "\x0b;,Eg`a[Ned"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    complex_0 = -337.94 - 3848.6067j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    str_0 = "\x0c%;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    str_0 = "^\n ESi >m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    str_0 = ",~GD)GWJ4(SHF{"
    str_1 = "X"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    str_0 = 'l#LRl{\\+?Yc+"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    int_0 = -4743
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    str_0 = "87j7@g=|WXye("
    list_0 = [str_0, str_0, str_0]
    object_0 = module_1.object()
    dict_0 = {str_0: list_0, object_0: str_0, object_0: list_0}
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    str_0 = "&&7"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    str_0 = ' G?O;+mfBL;xd-"F\tL'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    str_0 = ":nto|00Zp201{NA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    float_0 = -63.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    bool_0 = True
    str_0 = "fN"
    tuple_0 = (bool_0, bool_0, str_0)
    bool_1 = False
    tuple_1 = (bool_1,)
    set_0 = {tuple_0, tuple_0, bool_0, tuple_1}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    str_0 = "YWE?FY}ecm"
    bool_0 = False
    str_1 = "9F"
    tuple_0 = (str_0, bool_0, str_1, str_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    int_0 = 3572
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    bytes_0 = b"\xdd\xeb\xc6m'Y\xf6\xb1\xdb\x1c\xb3h\xf2]"
    module_0.match(bytes_0, bytes_0)


def test_case_3520():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3521():
    bytes_0 = b"\xab0\xee:\xa3\xb7m\x90\xc1\xf5\xe45\xee\xfb\xc4\r\xa13"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    str_0 = "YY=CE\x0bZs%x=XVEb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    bytes_0 = b"z"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    bytes_0 = b"\xb3\xcb`M\x1f%\x02\xe8\xf5\xbc\x7fR\xc8C"
    set_0 = {bytes_0, bytes_0}
    dict_0 = {bytes_0: bytes_0, bytes_0: set_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    int_0 = 28
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    int_0 = 3445
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    float_0 = 2706.33382
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    float_0 = 314.11217
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    str_0 = "#;;MJ9x63"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    str_0 = ":cGHJpyr"
    str_1 = 'lJ#"L >iI)_wE5'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    bytes_0 = b"\xbb)\xc5\xbc\x81\xc4\xbdu\x14\xff<\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    str_0 = "'B Fr\x0cYC,QvA,H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    complex_0 = 1042.8927 + 996j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    str_0 = "g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    int_0 = 1069
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    int_0 = -590
    bytes_0 = b""
    bool_0 = False
    dict_0 = {}
    tuple_0 = (int_0, bytes_0, bool_0, dict_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    bytes_0 = b"\xa6\x13NZ\xa8\x03X5\xb1\xac\xc9\xe0Wm\x95\xf3U?\xc4"
    module_0.match(bytes_0, bytes_0)


def test_case_3539():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3540():
    int_0 = -716
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    bytes_0 = b"j\xb0\x98\x04\xf58\x8d\x807B"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    bytes_0 = b"\xa4\x11\xa5\x18\xcd\x9aJ\x94\x97\xce~^\x9d"
    float_0 = -3106.6533
    tuple_0 = (float_0,)
    tuple_1 = (bytes_0, tuple_0)
    dict_0 = {tuple_1: tuple_1, float_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    bytes_0 = b"\x11\x97\x81\xea\xb3\xfd\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    bool_0 = False
    tuple_0 = (bool_0,)
    int_0 = 628
    dict_0 = {tuple_0: int_0, bool_0: int_0, tuple_0: bool_0}
    bool_1 = False
    tuple_1 = (dict_0, tuple_0, bool_1, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    str_0 = "S{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    complex_0 = -1315.124548 + 431.488j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    bytes_0 = b"\xfa\xfb\x1b.\x8c\x1c\xb0\xfb\xa9\x824'\xa5$"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bytes_0 = b"\xa7V\xc2\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    float_0 = -4191.0
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    none_type_0 = None
    module_1.object(**none_type_0)


def test_case_3551():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3552():
    str_0 = "9}=Qq\t?0ld"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    complex_0 = 79.4412 - 2309.97079j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    bytes_0 = b"d!\xbb\xf5y\xe5\xac\xf6\xca\x84\x8a'\x1a\xe4 "
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    bytes_0 = b"+\xcc\xdb"
    float_0 = -1506.204748
    bool_0 = False
    tuple_0 = (bytes_0, float_0, float_0, bool_0)
    dict_0 = {tuple_0: bytes_0, float_0: bytes_0, bool_0: bool_0}
    tuple_1 = (dict_0,)
    module_0.get_new_command(tuple_1, tuple_0)


def test_case_3556():
    pass


def test_case_3557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3558():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    str_0 = ")xN5/\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    int_0 = -705
    bool_0 = True
    list_0 = [int_0, int_0, int_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    str_0 = "KV6RP\\Be-~X(96/n"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    int_0 = 4572
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    str_0 = "\r["
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    bytes_0 = b"\xb9\xa1[3\xb7\x12\xd7\xbb\xf0\x82@\x0fa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    int_0 = 59
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    int_0 = -682
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    bytes_0 = b"\x1aR\xb9L9\xf9\xa4"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    str_0 = "^M\\\\z2Rg0{LWa032N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    bytes_0 = b"\x9fw\xe5\xa1 <"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0]
    bytes_1 = b"V\xcc\xde\x1c\x0b\xdbw\x9dF=\x86u"
    tuple_0 = ()
    tuple_1 = (list_1, bytes_1, tuple_0)
    module_0.match(tuple_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_0: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    int_0 = -754
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    complex_0 = 1314.748 + 2827.294792j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    str_0 = "$IF\x0c@dM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    str_0 = "kw.\x0b!r/U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    float_0 = -766.196701
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    bytes_0 = b"\xc0\x12\x99\xbcP"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    bytes_0 = b"\x92X\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    complex_0 = -1821.9 - 2656.529j
    tuple_0 = ()
    module_0.match(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    bytes_0 = b"\xe7\xd4\xb1\xda*\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    bytes_0 = b'\x9c]"\xccJ\xfa\x016\xd8/M\xa9\x1e\xacc\x89\x95\x83\xc2'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    float_0 = -309.97
    set_0 = set()
    str_0 = "&)Tp!C1IN"
    tuple_0 = (float_0, set_0, float_0, str_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    str_0 = "H.F0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    bytes_0 = b"|\x18D\xe8\x19\x8c\xe1S\xd99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    str_0 = "@!36#'R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    float_0 = -989.00883
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    float_0 = -4046.249
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    str_0 = "OoAX`\rD\x0bj]H\x0cFZ&]gb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    int_0 = -1627
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    str_0 = ">F}gI,U6y#;Q7\\?ml"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    int_0 = -163
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    float_0 = -1869.586804
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    complex_0 = -635 + 643.5193j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    int_0 = 2013
    tuple_0 = ()
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    str_0 = "0_rL=dWogZi:`+rw9v*"
    complex_0 = -3346 + 2371.914j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    int_0 = 92
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    bytes_0 = b"-\x97.\x96R\xb6\xeb\xf7\xfb\x1d\xcd8\xf1\x96\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    complex_0 = -2285.233171 - 796.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    int_0 = 4348
    bytes_0 = b"\x94Xph5Sv\xcf\xe3"
    tuple_0 = (int_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    tuple_0 = ()
    int_0 = -737
    bool_0 = False
    tuple_1 = (int_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    complex_0 = 25.03 - 1498.275j
    bool_0 = False
    tuple_0 = (complex_0, complex_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    float_0 = -2179.21778
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    bytes_0 = b"}*\xd9z\xea\x8c\x1c\x15\xd8\x05\x93\x8e\xec\xc0."
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    bytes_0 = b"\xa7(\x0b\xe4\xbc_\xbe\xf8\x86y\xa9\x8a\xfcm"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    int_0 = -1685
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    int_0 = 1955
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    bytes_0 = b"4,(\xc3;\xe4\x12\x1b("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    int_0 = 226
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    complex_0 = -2066.65 + 2017.641262j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    float_0 = 963.1597
    module_0.get_new_command(float_0, float_0)


def test_case_3615():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"8\x16\r\xf3!p"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    float_0 = 1382.0
    complex_0 = -201.7064 - 2497.3j
    bytes_0 = b"\x956"
    tuple_0 = (float_0, complex_0, bytes_0)
    list_0 = [tuple_0, bytes_0, bytes_0, complex_0]
    list_1 = [list_0]
    module_1.object(*list_1)


def test_case_3619():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    bytes_0 = b"\xc0h\xb7\x1cmE\x93\xb8V\x142\xed`L\xd4\x18\x02\xff"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    int_0 = -2920
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    str_0 = "\t)lxK"
    module_0.match(str_0, str_0)


def test_case_3623():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3624():
    complex_0 = -1586.12869 - 2806.54041j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bytes_0 = b" \xc6\xc1\xa3\xb9pq\x05G_\xb0/\xd5\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    int_0 = -796
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    bool_0 = False
    bytes_0 = b";V\xb2k<\xea\x13<"
    tuple_0 = (bool_0, bool_0, bytes_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    float_0 = 1134.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    str_0 = "m"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    int_0 = -1778
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    int_0 = 367
    bool_0 = True
    tuple_0 = (int_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    int_0 = -350
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    float_0 = 360.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    list_0 = [dict_0, dict_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_3637():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3638():
    str_0 = '${9ZCx^"w_0jDLXnl'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


def test_case_3640():
    pass


def test_case_3641():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3642():
    int_0 = 1079
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    str_0 = "Y;qU?`CVx4{wC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    bytes_0 = b"l#qX\xea.\xd4\xae\n\xa4\xcbV"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    bytes_0 = b"\x14\xf1\xbaD\x1eU\x1a\xc8v|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "m&XE:e4F.sf@v"
    dict_0 = {str_0: str_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    str_0 = "eI)[V!69n,$<OZ"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    complex_0 = -1678 + 3573.5945j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_3649():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3650():
    str_0 = "*.\n+Tzw"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    str_0 = "2ox-'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    str_0 = "x1'#pGm/)&qCx\\;f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    bytes_0 = b"~\x87J\x05\x1d\xc0\x01\xbd\x94\x8aPX\x8f\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    float_0 = 54.3272
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    str_0 = "n|OujKh;M0\tVRDf|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    str_0 = "flFGb/PJm&/Tu"
    module_0.match(str_0, str_0)


def test_case_3660():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3661():
    str_0 = "/))m[o6dB@Gpz}b\r@:Z#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    str_0 = "I@hUaN?XfU\x0brJ9R [K"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    bool_0 = False
    float_0 = 1686.0
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    int_0 = 61
    str_0 = "{$G-q0QF/"
    tuple_0 = (int_0, str_0)
    bytes_0 = b"!\xb5\x11"
    list_0 = [tuple_0, bytes_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    str_0 = "#1FV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    str_0 = "zd+3eQ\n{q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    bytes_0 = b""
    float_0 = 1566.10892
    bytes_1 = b"@*\x80B\xbb\x88\x19"
    bool_0 = False
    tuple_0 = (bytes_0, float_0, bytes_1, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    bytes_0 = b"F\xa8\x19\x16\x98\xf5Y\xe8\xa6\xa5\xb0\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    bytes_0 = b"\xba\xe4\xe2\xf0\xf5\xd3\x8e=V\x0f\xa3'U\x0c\xff.\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    int_0 = -1478
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    int_0 = 2270
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    bytes_0 = b"\xd5\xcc\xc3\r.O\xdf\xa7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    int_0 = -3386
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    str_0 = "3$"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    float_0 = 1076.24798
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    int_0 = 2874
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    complex_0 = -529 - 593.516j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    str_0 = "T=`A4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    int_0 = 3404
    bytes_0 = b"\x01\xce\xbb6h\x01\x03\xa7\xf6\x95\x0f\x0f\x86\xe9\x1afu=\x06"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    float_0 = -3681.60359
    int_0 = -762
    dict_0 = {float_0: int_0, int_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    int_0 = 56
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    float_0 = -996.18
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    bytes_0 = b""
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    bytes_0 = b"\x91\x7f\x92\xa3\x98\xe2!\xa2"
    bytes_1 = b"\xb2\xe0"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_1, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    bytes_0 = b"`\x8c\x95\xedW\x07\xf6yF="
    module_0.match(bytes_0, bytes_0)


def test_case_3688():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3689():
    float_0 = -865.4874
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    bytes_0 = b"\xcc\xd7\xc0\xb6,B'T\xe0)\x8b\xa3\xde\xe2\xe0H\xbe"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    int_0 = -1842
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    str_0 = "^yZ[(?NRZX\x0c5cH "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    float_0 = -1477.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    bytes_0 = b"t\xfd\x9a\x8e\x917ZS4\xf4:I\xb8\xa0\xe5\xe6u1\xfe"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    int_0 = 183
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    float_0 = -402.3785
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    set_0 = set()
    bool_0 = False
    list_0 = [bool_0, bool_0, set_0, set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    str_0 = "'O3'/I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    float_0 = 2235.730566
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    str_0 = "432o)=?*v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    str_0 = "`MWOed9&]S 3N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    int_0 = 1304
    module_0.match(int_0, int_0)


def test_case_3705():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3706():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_1.object(*list_1, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    int_0 = 753
    module_0.get_new_command(int_0, int_0)


def test_case_3708():
    pass


def test_case_3709():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3710():
    float_0 = 2494.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    str_0 = "35"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    float_0 = -678.98791
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    bytes_0 = b"\xd7\x8c\xc3\xa5\xc3\x00\xb30\x07\x9ey\xe0N\xb6\xa2\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    int_0 = -592
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    int_0 = 1460
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    int_0 = 2145
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    bytes_0 = b"\xc5\xd2\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    int_0 = -1589
    module_0.get_new_command(int_0, int_0)


def test_case_3720():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3721():
    int_0 = -1352
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    complex_0 = -615.4 - 1718j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    str_0 = "yzviDPa"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    bytes_0 = b"6,\xaeM\x94\x17\xcam-\x86\xad\xf2d\xe2"
    module_0.match(bytes_0, bytes_0)


def test_case_3725():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3726():
    float_0 = 348.866
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    int_0 = 906
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    int_0 = -2723
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    int_0 = 4219
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    int_0 = -2609
    complex_0 = 607.965 - 1198.03j
    tuple_0 = (int_0, int_0, complex_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    int_0 = 1692
    list_0 = []
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    str_0 = "b5\rkBO|F7h)p\x0c4IJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    complex_0 = 773.8693 + 1384.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    bytes_0 = b"q,\xc5\xd9\x07T"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    bytes_0 = b"+\xac~>\xe9L\x89\x04`\xb05`F\xf7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    str_0 = "P\nl.Ox4|?cz-op"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    bool_0 = False
    int_0 = -620
    str_0 = "]>I!aOO8GEaN+y"
    tuple_0 = (bool_0, int_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    int_0 = 2022
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    int_0 = 608
    module_0.get_new_command(int_0, int_0)


def test_case_3741():
    pass


def test_case_3742():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3743():
    str_0 = "ZA(|W!dZO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    str_0 = "Gvjq*Y"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    float_0 = -984.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    str_0 = "k.I)w.Z^B0NKS"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    complex_0 = -2111.928 + 885.47j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    int_0 = -683
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    float_0 = -727.84
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    int_0 = -3007
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    str_0 = "h*Pe2sP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    str_0 = "VzP8\n}"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    bytes_0 = b"Fc\x14\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    complex_0 = -3916.01846 + 4145.581849j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    str_0 = "P"
    bytes_0 = b"\x05HW\x97\xba\xc1\xa1W5a\xd9\x10\xa5\xbe\xf3\x9c\t"
    dict_0 = {str_0: bytes_0, str_0: bytes_0}
    module_1.object(**dict_0)


def test_case_3758():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3759():
    float_0 = -3609.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    float_0 = 4198.0
    module_0.get_new_command(float_0, float_0)


def test_case_3761():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3762():
    str_0 = "-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    bytes_0 = b"\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    str_0 = "M@'V}8\rIJq%WJS6.Q '"
    set_0 = {str_0, str_0}
    bytes_0 = b"\xa4"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    str_0 = "5\riMAkSW[&LRe^"
    set_0 = {str_0, str_0}
    bool_0 = True
    str_1 = "FK\r<j51\r6rj'mk%3)h1"
    dict_0 = {str_0: set_0, str_0: bool_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    str_0 = "F9&V"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    str_0 = "**0=_@\x0bl.w"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    none_type_0 = None
    float_0 = 2937.0
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    bytes_0 = b"\x0ccvfxu\xcaR\xdb3\t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    int_0 = 2597
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    int_0 = -550
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    bool_0 = False
    str_0 = "s|mK*|Ee!"
    tuple_0 = (str_0,)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    bytes_0 = b"\xbe\x8b1\xee\xa7\xbal\x1d\x06&#\x0c\xdf\xd2\x02_'\x11N\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    int_0 = 1834
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    bytes_0 = b"\x9e\xe7\x08"
    module_0.match(bytes_0, bytes_0)


def test_case_3779():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3780():
    str_0 = "u\n1ns&-h?ZBkk#vVpe3x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    int_0 = -2154
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    str_0 = "s~p{s!vB"
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    bytes_0 = b"\xcd/\x91\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_3788():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3789():
    bytes_0 = b"}1-\xfe\x8e]"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    bytes_0 = b"\xff\x1d\xd6"
    bool_0 = False
    list_0 = [bool_0, bool_0]
    str_0 = ""
    bool_1 = False
    dict_0 = {str_0: list_0, bool_0: bool_1}
    tuple_0 = (list_0, str_0, bytes_0, dict_0)
    int_0 = 129
    tuple_1 = (bool_0, tuple_0, int_0)
    bytes_1 = b"\t\x9e\x91Q\xa8\x80\xd8u?c\xd51\xad\x10f\xd6\x96\xdf]\xc9"
    set_0 = {bytes_1, int_0, bytes_1, bytes_1}
    tuple_2 = (tuple_1, set_0)
    tuple_3 = (bytes_0, tuple_2, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_3, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    complex_0 = 1276.8161 - 1613.712j
    bytes_0 = b'\xd7\xca\xdb\x96"'
    set_0 = {complex_0, bytes_0, bytes_0, complex_0}
    float_0 = -300.465
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    str_0 = "7_~q06WqmX"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    bool_0 = True
    bytes_0 = b"\xbd`\x13\x8d}!\x98J\xef\xaa\x93\xf4\xbd\xfd\xbc\xea\xe6"
    bytes_1 = b"H\xb6\xe5\xa5>\xfe\xdc\x17i\x01"
    tuple_0 = (bool_0, bytes_0, bool_0, bytes_1)
    module_0.match(tuple_0, bool_0)


def test_case_3794():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3795():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    int_0 = -3037
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    str_0 = "fV!w1#J\neg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    float_0 = 134.0
    module_0.get_new_command(float_0, float_0)


def test_case_3800():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3801():
    int_0 = -2153
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    str_0 = "U3$N26JgXO\x0bgG{ao"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    int_0 = 3075
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    complex_0 = -1432 + 5257.81j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    str_0 = "f(Z]Q+0}\x0b,q\\m"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    int_0 = -6300
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    float_0 = 339.6952
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    float_0 = 2251.67
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    int_0 = -1081
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


def test_case_3813():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3814():
    int_0 = 377
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    float_0 = -571.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    int_0 = -1278
    bytes_0 = b""
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bytes_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    int_0 = -2235
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    int_0 = -1552
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    complex_0 = -2019.252212 + 357j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    float_0 = 2553.653
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    complex_0 = -2900.1 + 481.048j
    str_0 = '_"tiP3=jvpOwq("v<>L'
    module_0.match(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    int_0 = -315
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = ()
    module_0.match(list_0, tuple_0)


def test_case_3825():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3826():
    bytes_0 = b"\xd3\x80&\xc2\xe3\x95\xc5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bytes_0 = b"\xe3\x00X\x84\xf7\xd4\xed\xbe\xc64H\x15/n\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    str_0 = "H>bU\td,D%\\.V"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    bytes_0 = b"X=\x97\xaf\x16"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    int_0 = -2299
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    str_0 = ".qBp+XsJ1_o|t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    bytes_0 = b"R:\xedm\xa2+1|zye"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    str_0 = "XYfN|]}[VYFB,p5v:L`t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    float_0 = -431.92
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    bytes_0 = b'\x8c>"\x82\xc1\n\x06\xdf\x8b\xd0\xad\xa6\x18o\xbe"$\xdc\xd2`'
    bool_0 = False
    list_0 = [bytes_0, bytes_0, bool_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    str_0 = "b64zg,s6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    str_0 = 'W`p39l."$L;()?UZ~'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    bytes_0 = b"u\xc3\xd3\xf2T7\xe6\xb2X\xf0B\x06\xcdDf\x8de\xbd\x18\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3839():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3840():
    int_0 = 618
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    bytes_0 = b"\x04\x9b\xca\t\xf9(\x18-\x18\xa8\xa5\xd5\x06\xa7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    bytes_0 = b"\xa3\x8c="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    float_0 = -1109.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    str_0 = "?/"
    set_0 = {str_0, str_0, str_0}
    bool_0 = False
    tuple_0 = (str_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    bytes_0 = b"u*\x83\xcc\xf8B\xd3$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    object_0 = module_1.object()
    str_0 = "e@nG"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    complex_0 = -1791.59358 - 1506j
    module_0.match(complex_0, complex_0)


def test_case_3848():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3849():
    float_0 = 1690.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    str_0 = "'3RQ62A7h2 r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    int_0 = -2784
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    str_0 = "}lm3ys:U<c{p..Q rb};"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    bytes_0 = b"\x12\x94\xfb\x175(\x00\x8a \x81r\xc4\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    bool_0 = False
    str_0 = "tMPS5^+-!VC@L3w?`"
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    int_0 = -70
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    bytes_0 = b"fVB\xff\xcb\xfe\x9fz\x1e\xa8_\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    str_0 = "-EbjGhB)>?Y1VpKE;"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    str_0 = "&Y,X_Wke~ Q}0-WPh EH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    bytes_0 = b"\xc4\xb4\x82~:\x04\xb8\x9a\xb4\xa8\x9a\x07\xa6J*"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    bytes_0 = b"\x86G\xdf\xe5D\x1f\xf8\xc6!\x04\xfa+)r\xac=\xbej"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    str_0 = "VT^{@ANoEm|N{l7"
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    bytes_0 = b"\\\x0c\xe5\xa2$"
    int_0 = 3208
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    float_0 = 1084.7
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    int_0 = -2519
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    str_0 = "\r>Q>_J{68c u8zPw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    str_0 = "HhYnlv,?r[8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    complex_0 = -560.6 + 1629j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    bytes_0 = b"\x96.#\xe1\x12\x8dlR\x15\x9as\x9c[\x85\xee\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    int_0 = 2736
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    float_0 = 2170.624
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    int_0 = 2679
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    bytes_0 = b"N\xe6\xc4\xb6\xfdG"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0, bytes_0)
    dict_0 = {bool_0: bytes_0, bytes_0: bool_0, tuple_0: bool_0}
    tuple_1 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_1)


def test_case_3880():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3881():
    float_0 = -4136.0
    tuple_0 = (float_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    complex_0 = 1023.38482 - 1784.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    int_0 = 1449
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    int_0 = -1505
    str_0 = ">o<#q')=F_oj%"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    int_0 = -2055
    int_1 = 1287
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_1}
    module_0.get_new_command(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    bytes_0 = b"\x15^\xd4\xeb\xe9\xc0k\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    str_0 = '\x0bXE9#\n#h}pc"\x0c\x0cmvxuY'
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "AB_R<|*U[9)TdE\nA&"
    none_type_0 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    int_0 = 482
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    str_0 = ',u"FXoe^Rs%B.cHR_`8'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    bytes_0 = b"\xf3\xe6\xac\xcbLp\x84"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    bytes_0 = b"\xe7|\xf2coa}\x9e\x91Zx\xc6\xbc\xe0J"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    bytes_0 = b"\xa9\x16\xbc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    bytes_0 = b"i\x1d4\x16\x9f\x11\xd3\x7f\x90\x88\x19\xb8=\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_3900():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3901():
    str_0 = "Y"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    int_0 = -2084
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    int_0 = 4291
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    str_0 = ':-A.NfF\n"U,'
    module_0.get_new_command(str_0, str_0)


def test_case_3905():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3906():
    bytes_0 = b"9d\x9c\x96\xe2\xcf\xd4m\x07(r\xb8a\x18"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    bytes_0 = b"\x98\xf1Z\xc1\xc17\x9a\x82b\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    int_0 = -477
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    int_0 = 462
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    complex_0 = 3545 + 427.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    list_0 = []
    tuple_0 = (list_0,)
    str_0 = ')"PRkd)&{zi${@zh7qp'
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    int_0 = 859
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    float_0 = 1758.6073
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    str_0 = "=;g=~\\OO9kRffgi\t"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    str_0 = "}t/}tEVov& ;_^&Oth^"
    module_0.get_new_command(str_0, str_0)


def test_case_3919():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3920():
    str_0 = 'EVd7O/Zw!)&&&"-!+'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    complex_0 = 27.31465 + 1893.211546j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    bytes_0 = b"\xa5\xea@\x7f"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


def test_case_3924():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3925():
    bytes_0 = b"qc)\x84\xa9\x89\xaf\xb8V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    bytes_0 = b"\x95"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    bytes_0 = b"\x15\x04C\xf0\x9bt\xdd"
    int_0 = 2919
    tuple_0 = (bytes_0, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    float_0 = 354.9536
    module_0.match(float_0, float_0)


def test_case_3929():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3930():
    bytes_0 = b"\xfeL\xc9\x14,\\\xf4\xa0\x07\x17\x8c\x8e\xf5W\xb3\x90\xce\xcf\xd2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    int_0 = -1767
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    complex_0 = 732.413 + 1414.4382j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    int_0 = -1295
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3934():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3935():
    float_0 = -2626.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    str_0 = "09S'1zg:9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    int_0 = 3695
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    none_type_0 = None
    str_0 = "f:\x0bsPc&1imRY@]io\x0cU5%"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


def test_case_3941():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3942():
    int_0 = -2395
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0, set_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    bytes_0 = b"\xd3s\x9dE"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    str_0 = "y}o\rg|j\\C2a\x0bX.J&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    int_0 = 1125
    str_0 = ".=/S]z!3h!3"
    float_0 = -2558.8
    tuple_0 = (int_0, str_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    int_0 = -1968
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    bytes_0 = b"z\x17\xe2\x95\xf5G\xb5\xe0\xee&j>\xb7\xf7\xd7\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bool_0 = False
    tuple_0 = (bool_0,)
    int_0 = -1949
    bytes_0 = b"\x8f"
    list_0 = [tuple_0]
    dict_0 = {bool_0: int_0, tuple_0: bytes_0, int_0: list_0}
    bool_1 = True
    tuple_1 = (int_0, bytes_0, dict_0, bool_1)
    int_1 = -698
    tuple_2 = (tuple_0, tuple_1, int_1)
    module_0.match(tuple_2, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    float_0 = 424.501979
    module_0.match(float_0, float_0)


def test_case_3951():
    pass


def test_case_3952():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3953():
    complex_0 = 86.249 - 3543j
    dict_0 = {complex_0: complex_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    complex_0 = -1670.2712 + 3017j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    int_0 = 4277
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    bytes_0 = b"sl\x84@]\xf8\xa9\xb7\xf8B\xc0"
    bool_0 = False
    str_0 = "S#]Wo2}{"
    set_0 = {bytes_0, str_0}
    tuple_0 = (bytes_0, bool_0, set_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    bytes_0 = b"A\xedp\x889D4\x9dsv-\xda$\x0c\xf8"
    str_0 = ":oa#3qrKpS"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    complex_0 = 1389.61 + 1529.962947j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    dict_1 = {object_0: dict_0, object_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    int_0 = 393
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    complex_0 = 1876 - 1002.30563j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    str_0 = "'$!(.-IyW\t.lh#)`y^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    float_0 = -959.16
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    bool_0 = False
    module_1.object(*bool_0, **bool_0)


def test_case_3965():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3966():
    float_0 = -2420.602
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    bytes_0 = b"\tj$\xf3OJ\xa6t{\xcf\xf4\x08&\x87;\x06\x17\x9a\xcc{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    bytes_0 = b"\xed\x1bn\xc9(l\xe5\x82I\xe2\xa4\xeb}\xd4\x80\xd5\xedW"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    str_0 = "@ <JdD's{2S\x0c3\\c&Q_`"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    str_0 = "R.}I3/L`LtUX"
    int_0 = -602
    set_0 = {str_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    int_0 = 469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    float_0 = -1002.5458
    float_1 = 2506.418576
    module_0.get_new_command(float_0, float_1)


def test_case_3975():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3976():
    bool_0 = False
    float_0 = 2284.242806
    list_0 = [bool_0, bool_0, float_0]
    list_1 = [list_0]
    module_0.match(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    bytes_0 = b"\xdf\xa1\x07n\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    int_0 = 169
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    int_0 = 1081
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    float_0 = 2021.7989
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_3982():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3983():
    complex_0 = 28.681 - 1525.308j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    int_0 = -1027
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    float_0 = -1023.5031
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    bytes_0 = b"n\xe91\x9b\xf6\t\xe1A\xdc\x16\xb3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    set_0 = set()
    bytes_0 = b"\xc1\xa3\xfd_:\x91t\xa9\x8c\xe4\xf8\xd3\x90\xe9\xee!"
    tuple_0 = (set_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    float_0 = -2707.1328
    module_0.match(float_0, float_0)


def test_case_3989():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3990():
    bytes_0 = b"\xdc\xe7\xae&\xed\xae\xf3\xc5]\xd1\x05"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    str_0 = "'\tw9u#~FY/ ;v\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    int_0 = 3690
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    int_0 = 182
    set_0 = {int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    bytes_0 = b"X\x83R"
    object_0 = module_1.object()
    module_0.get_new_command(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    str_0 = "{d+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    int_0 = -2013
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    complex_0 = 2725.5 + 65.03697j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    str_0 = ">$?^Poj5"
    list_0 = [str_0]
    str_1 = ".M>{\x0cC(1"
    dict_0 = {str_0: list_0, str_1: list_0}
    module_1.object(*list_0, **dict_0)


def test_case_4000():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4001():
    int_0 = 38
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    bytes_0 = b"\xb0\x93"
    float_0 = -2683.92642
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    bytes_0 = b"\xcab\xca\xb7']\x16\xb0L\" \xeb\xdb"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    str_0 = "J\x0bS{Oi5u"
    set_0 = set()
    dict_0 = {str_0: set_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    int_0 = -3218
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    float_0 = -139.15
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    complex_0 = 640.1916 + 1018.043839j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    int_0 = -2800
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    int_0 = 3012
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: tuple_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    bytes_0 = b"\xe6\xe5]\x92\x80b\xb5\x8d\x8e\xfe$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    str_0 = "3V\x0cONI`z9;K"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    bytes_0 = b"\xa1g\x16|\x83\x90G"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    str_0 = "[Kk@%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    bytes_0 = b"\xa2\xe89\xa1a\xe7n"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    int_0 = 1023
    module_0.get_new_command(int_0, int_0)


def test_case_4016():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4017():
    bytes_0 = b"\xd2z\xbes!\x1b\xba{7\xb1/\xf0\x16"
    bool_0 = False
    tuple_0 = (bool_0, bytes_0, bytes_0)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    int_0 = 1484
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    int_0 = -271
    set_0 = {int_0, int_0}
    tuple_0 = (list_0, int_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    int_0 = -2794
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    str_0 = "n/K-5ep&\x0c;.-rw\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    bytes_0 = b"\xc1\xf8\xf4e\xf4\xef\xfa\x08\x02ng\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    int_0 = -2666
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    int_0 = -2219
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    object_0 = module_1.object()
    int_0 = -2686
    set_0 = {object_0, object_0, object_0, int_0}
    module_0.get_new_command(set_0, object_0)


def test_case_4027():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4028():
    int_0 = -2842
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    float_0 = 1010.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    str_0 = "Zc0Yyd1Xo"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    bytes_0 = b"$\x95~9\xcd\x15\x19Q<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    int_0 = 1564
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    bytes_0 = b"\x8d\x16\x95\xef\xc8"
    bool_0 = False
    int_0 = -1018
    tuple_0 = (bytes_0, bool_0, int_0)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    str_0 = '9u&%N;s;Db"A'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    bytes_0 = b"n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    int_0 = 795
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    bytes_0 = b"\n\x03\xf2\xeaH\x11S\xf2\x0b\xef\xe2\xb2\xf56\x00\n~\x83:X"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    bytes_0 = b"\xb5^\xb5\x8c\xd7\x12l\xdd20}\xcf"
    float_0 = 789.5
    list_0 = [bytes_0, bytes_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    int_0 = 5251
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    float_0 = -1645.377
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    object_0 = module_1.object()
    tuple_0 = ()
    set_0 = {object_0, tuple_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    int_0 = -2387
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    bytes_0 = b"\xb5f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    bool_0 = False
    set_0 = {bool_0}
    bytes_0 = b"K2\xd3\xeeF\xc3@Nx\xb0!o\x15\x916\x11\xa1\xef\x89"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    int_0 = 2581
    complex_0 = -1011.79999 + 1223.19j
    module_0.get_new_command(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    str_0 = "#<Fv+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    int_0 = 703
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    int_0 = 3217
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    int_0 = 803
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    bytes_0 = b"v\xdb\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    complex_0 = 2545 + 1655.534j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4052():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4053():
    complex_0 = -642.539077 - 781.93j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    bytes_0 = b"8\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    str_0 = "u>Pj"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


def test_case_4057():
    pass


def test_case_4058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4059():
    bytes_0 = b"\xdb\xe4\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    str_0 = 'y>`=mKKfr=m5~S?b<c"/'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    str_0 = "Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    int_0 = -2626
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    int_0 = -1143
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    list_0 = []
    object_0 = module_1.object(*list_0)
    dict_0 = {}
    module_0.get_new_command(object_0, dict_0)


def test_case_4065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4066():
    none_type_0 = None
    str_0 = 'gBO"v'
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    int_0 = 2717
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    int_0 = 1398
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    int_0 = 3806
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    float_0 = 1419.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    str_0 = "JcW,W"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    str_0 = "\x0bHLUT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    float_0 = -787.75
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


def test_case_4077():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4078():
    float_0 = -2831.22315
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    str_0 = "w7hz\x0cTK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    float_0 = -1062.598
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    bytes_0 = b"\xdc*\xf3\xb6\xfe\xc6I\xc8\xf5"
    bytes_1 = b"\xa4\x9d\x13iU"
    dict_0 = {bytes_0: bytes_1, bytes_1: bytes_1, bytes_0: bytes_1, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_4082():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4083():
    complex_0 = 937.58 + 2372.7034j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    bytes_0 = b"r\xca\x8e\x0c!\x01j4nd\xf6\x80\xa9S1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    str_0 = '!"S|xYuD1R!$\n='
    str_1 = "zj"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    bool_0 = False
    bytes_0 = b"u\x81\xfe\x08\xc7\xae\xa2[\xb9;"
    list_0 = [bool_0, bytes_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    float_0 = 2870.4346
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    str_0 = "DZ 9qqJ4Txaf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    bytes_0 = b'\xac\xbd"U6\xd5\x8f\xc4\x1b\x08\xbc4\xd6w'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    bytes_0 = b"\xacg\xaeI\x05\xad)\xeb\xbb{\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    str_0 = "a>+4e3BJJ,$j!_KROx6%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    str_0 = "tADmpjYYiXn8\rZu*[>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    bytes_0 = b"\x12G6g6p\xacKW\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    int_0 = 990
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4098():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4099():
    str_0 = "Kd'q/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    tuple_0 = ()
    tuple_1 = (list_0, tuple_0)
    tuple_2 = (object_0, tuple_1)
    list_1 = [tuple_2]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    complex_0 = -842.16592 + 918.56j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    bytes_0 = b"&\xf1\xdeH%\x13f\x86\\"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    float_0 = 1882.5571
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (set_0, bool_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    str_0 = "OAJM7Vvy('"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    int_0 = -1560
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    int_0 = 2118
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    bool_0 = True
    int_0 = -975
    tuple_0 = (bool_0, bool_0, int_0, bool_0)
    int_1 = 607
    list_0 = [tuple_0, int_1, tuple_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    complex_0 = 858.025023 + 1941.78011j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    int_0 = -142
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    str_0 = "?\x0c:#P}%Al4Q*0y"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    bytes_0 = b"\xa0\x02V\xe8\x12\xdb\x82^"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    bytes_0 = b"\xce}\xa5m\x9bZ"
    module_0.match(bytes_0, bytes_0)


def test_case_4114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4115():
    complex_0 = -2011.2218 - 3060.52573j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    int_0 = -154
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    int_0 = 3584
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    bytes_0 = b"\xecx\\8<%"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    bytes_0 = b"\x0fp\xef\x00z\x83\xaej"
    bytes_1 = b"\xf82\xdbiB\x8f9p\xa4Rd8\x19"
    tuple_0 = (bytes_0, bytes_1)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    bytes_0 = b"\xf8%\xac\xed\xfdGM\x94H@\xc4\xe9\x96\xa4\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    str_0 = "cvJdf_d7DHhONV[."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    int_0 = -954
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    bytes_0 = b"]JO\xf6m\x17\xdcR\xe9\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4127():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4128():
    int_0 = 519
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    float_0 = 2130.3286
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    int_0 = 474
    bytes_0 = b"\x91\x17\x03i\xc3-\xea\xec\xa2S"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    float_0 = -713.0
    module_0.get_new_command(float_0, float_0)


def test_case_4133():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4134():
    float_0 = 1661.41906
    list_0 = [float_0, float_0]
    list_1 = [list_0, list_0, float_0]
    list_2 = [list_1]
    module_0.match(list_2, list_0)


def test_case_4135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4136():
    bytes_0 = b"\xedS\x83p\x17q8\x1cu,\xf2/\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    int_0 = 2860
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    complex_0 = -65 + 4739.86312j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    none_type_0 = None
    str_0 = "I4"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    str_0 = "-Z{-Z"
    int_0 = -711
    set_0 = {str_0, str_0, str_0, int_0}
    tuple_0 = (int_0, set_0)
    list_0 = [str_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    bytes_0 = b"@\xf50J\xed\x03\xa7N\xb9a\x1f|\x83 \xc4"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    float_0 = 1410.41008
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    str_0 = "fOR8_$[=Pxsg@nps)2L"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    complex_0 = -59.96 - 827.4568j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    str_0 = "UrQc@EFLJFZ,..AaSH"
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    int_0 = 2012
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    str_0 = "1x5iu$}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    int_0 = -194
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    float_0 = -1549.59928
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    str_0 = "F[`g%@N3aK)f"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    int_0 = -1477
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    str_0 = "\t"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    bytes_0 = b"\x10\x86n:K\x84^\x8f\x8f\x8aR\x9e\xff\xef\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    str_0 = 'Rg~36hh"z=F:NJ0*G%]3'
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    str_0 = "#6\reHalMvJMIV$Niq;"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    complex_0 = -2382.06 - 1944j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    int_0 = -377
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    int_0 = 1590
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    bytes_0 = b"\x12\xe2\x0fK\xc7`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    str_0 = "8o"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    none_type_0 = None
    bytes_0 = b"GM\x83\xf8Y\xce\xdc\xaa\xbez(\xc6J\xf8!\xe1"
    bool_0 = False
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, bytes_0, bool_0, set_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    int_0 = 274
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    float_0 = -1981.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_4169():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4170():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0, bool_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    float_0 = 856.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    float_0 = 2230.184
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bool_0 = True
    float_0 = 2634.6
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    int_0 = 2081
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    float_0 = 2220.62
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    int_0 = 144
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    int_0 = -2345
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    bytes_0 = b"lMUG\x03\x02"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    str_0 = "f\x0b\\k$z.;"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_1]
    tuple_0 = (bool_0, bool_1, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    bytes_0 = b"\x7fC"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    int_0 = -4591
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    str_0 = "\r"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, str_0, tuple_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    complex_0 = -1444.352 + 3475.777225j
    set_0 = {complex_0}
    tuple_0 = ()
    tuple_1 = (set_0, tuple_0, set_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    bytes_0 = b"\xe9]\xe4"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    bool_0 = True
    float_0 = 2049.2
    tuple_0 = (bool_0, float_0, bool_0, bool_0)
    str_0 = ";fq"
    dict_0 = {tuple_0: str_0, float_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    str_0 = "eFWm$e_pUl\\C,\tJ>qa#;"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    str_0 = "&*mK)F6 n2G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    complex_0 = 3798.352 - 76.5818j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    float_0 = -1160.36
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    bytes_0 = b"\xcb\x9cIM"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    bytes_0 = b"\x08\xc1:\xe9>\xaa/\xef/\x91\x85\x10\x80IE\xf5Y\x11\xcc"
    int_0 = 818
    tuple_0 = (object_0, list_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    int_0 = 1519
    tuple_0 = ()
    dict_0 = {int_0: int_0, int_0: int_0, tuple_0: tuple_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    str_0 = "b\nlT=\tR\njuXVdIL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    str_0 = "WiWIg)o.f\x0b4j`:x"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    str_0 = "0@lCTy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    int_0 = 2131
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    bytes_0 = b"\xe48\x12\xdd\x9e\x02\x93\xf0\xc8z\xectp\x12\x87\xe5w\xa5\x07"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    int_0 = -109
    module_0.get_new_command(int_0, int_0)


def test_case_4206():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4207():
    int_0 = 2218
    module_1.object(*int_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    float_0 = -1779.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    list_0 = []
    str_0 = '?5,z.N(E"6D#nr\r5'
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    bytes_0 = b" \xd1!\xb9\xaf_\x9d_\xecT\x89\xdb\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    str_0 = "z+#tE0D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    int_0 = -4835
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    int_0 = 831
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    bytes_0 = b"\xa2dG0\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    str_0 = "Srq9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    float_0 = -278.99
    list_0 = [float_0, float_0, float_0, float_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    str_0 = "\r]pzHElB20Kg/$s\t^+*"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    bool_0 = True
    int_0 = -658
    tuple_0 = (bool_0, int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    bytes_0 = b"I\x8f\x93\xd9\xea\x01\xe2Lj^sw\xef/\xaf\x8a'\xd31"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    int_0 = -450
    bytes_0 = b"6\xcf\xf7\x1f/k\xdd\x04\xb64\ris~\x18\x98"
    str_0 = "-(#fS"
    dict_0 = {str_0: bytes_0, str_0: bytes_0, int_0: int_0, bytes_0: bytes_0}
    tuple_0 = (int_0, bytes_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bytes_0 = b"\\\x00\xaf\x02%\xbb\xe9\xde@3\x9d\xcc\x92\x82n\xbc"
    tuple_0 = (object_0, bytes_0, bytes_0, object_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    int_0 = -1503
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    bytes_0 = b"\xb8\xe9\xa3\xbd\x9e\x1dU\xd9\x04\x11\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    bytes_0 = b"Fe(\xfc\x84\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    float_0 = -5874.529478
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    int_0 = 1444
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    int_0 = -154
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    str_0 = 'HjY\x0c\r9(c[j" '
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    int_0 = 854
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    str_0 = ")vC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    str_0 = "H{\x0ce\\;^6b(O`AN@(*IG"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    str_0 = "}WAGze2L(9G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    float_0 = 916.34
    int_0 = -106
    list_0 = [float_0, int_0, float_0]
    tuple_0 = (list_0,)
    bytes_0 = b"\xec\x1ey\x1c<\x89C/\x8d~\xc2\x08"
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    int_0 = 4430
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    none_type_0 = None
    int_0 = 906
    dict_0 = {}
    tuple_0 = (none_type_0, int_0, dict_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    int_0 = -78
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    int_0 = 1066
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    str_0 = "\x0cg0dJ"
    list_0 = [str_0]
    int_0 = -6409
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    str_0 = ".UehTIf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    int_0 = -3048
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    bytes_0 = b"\x18\xdc\xd2^\xb9\xe1\xc0\x05\xad\x08\x03e\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    bytes_0 = b" U\xde\xb4\x8f\xb3{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    int_0 = 1355
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    complex_0 = 1059.244 - 28.1j
    dict_0 = {}
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, set_0)
    object_0 = module_1.object()
    list_0 = [complex_0, dict_0, tuple_0, object_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    complex_0 = -3285.7373 - 3174.931j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    complex_0 = -455.23 + 1036.64j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    bytes_0 = b"?^ap\xa5\xcd\x17g\x02\xd3\x90I\x13\x9b"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    float_0 = 2825.870193
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    bool_0 = False
    float_0 = -4608.0
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    str_0 = "]A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    int_0 = 2254
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    int_0 = 1958
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    str_0 = 'lkPp2f");t|~.'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    tuple_0 = ()
    bool_0 = False
    str_0 = "p2N@_rc8S_F"
    tuple_1 = (tuple_0, bool_0, str_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    str_0 = "}kd$<"
    list_0 = [str_0]
    tuple_0 = (str_0, list_0, list_0)
    list_1 = [tuple_0]
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    float_0 = 570.44075
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    none_type_0 = None
    int_0 = -1293
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    float_0 = 644.8659
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    bytes_0 = b"\xa5\xa1\x0e\xba\xedy<\xc8c\\\xbd$\xc5\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    bool_1 = False
    str_0 = ""
    tuple_0 = (bool_0, dict_0, bool_1, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    str_0 = "l3ah(N<=VNcVguP5A\\ f"
    int_0 = 900
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    int_0 = 1346
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    int_0 = 226
    tuple_0 = (bool_0, set_0, int_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    str_0 = "=Med;@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    bytes_0 = b"\xc4\\\x07XF\x90O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    float_0 = 2953.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    list_0 = []
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    int_0 = -1527
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    none_type_0 = None
    int_0 = 4298
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    int_0 = 179
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    int_0 = -722
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    int_0 = -396
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    int_0 = 1184
    list_0 = [set_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    float_0 = -785.0
    module_0.match(float_0, float_0)


def test_case_4280():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4281():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    bytes_0 = b"\x01\xa7n\x0c\x81\xb7\xb86\x9f\xdc\xf8`\x8f3\xd7\xb6O"
    bool_0 = True
    float_0 = -152.03352
    tuple_1 = (list_0, bytes_0, bool_0, float_0)
    module_0.match(tuple_0, tuple_1)


def test_case_4282():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4283():
    float_0 = 3833.783
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    str_0 = "oP\x0cZe,0_bT\x0c"
    str_1 = '\x0c{CMwV:H" jhg\rN=huI'
    str_2 = "b0\rE&n\\zQTO~"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    int_0 = -2877
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    int_0 = 1849
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    int_0 = 2869
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    str_0 = ""
    float_0 = -417.64256
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    int_0 = 2133
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    complex_0 = -1824.60754 + 310.828j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    str_0 = "p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    float_0 = -687.4257
    list_0 = [float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    float_0 = 824.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    int_0 = -3234
    str_0 = "%-Nx]:\x0b"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    bool_2 = False
    module_0.match(dict_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    int_0 = -3609
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    str_0 = '\x0c* 6"l%Wa~jI'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    int_0 = -554
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    str_0 = "L|5.7O0BvFO#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    bytes_0 = b"iN\x802nq\xf7\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    bool_0 = False
    str_0 = "t6\n|+/T}]\n8[e9lM0B'V"
    bytes_0 = b"\xc6E\xfd"
    dict_0 = {str_0: bytes_0}
    tuple_0 = (bool_0, str_0, bytes_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    str_0 = "r7yt)n/{[yBD,"
    str_1 = "qs?Fi;2<</\x0c"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    str_0 = "Z7JXv;w-tRJ/_w@8q``]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    int_0 = -1269
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    int_0 = 2980
    str_0 = "2O8u,*U)axv'/WdKM(n"
    dict_0 = {str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    bytes_0 = b"\xd2\xd5\xab\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    str_0 = "sr:k~VYq<v3s/@]"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_4311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4312():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    bytes_0 = b"\xc6\xed"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    int_0 = 5519
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    str_0 = "-epD%#*yM\n^\x0c3WrGgV"
    str_1 = "{"
    bytes_0 = b"Oo!\x9fu"
    bool_0 = True
    tuple_0 = (str_0, str_1, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    float_0 = -399.669
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    str_0 = "5\trW5W\\{l&a5Ye$>-ufP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    complex_0 = -3501.9 + 2743.8j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_4319():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4320():
    str_0 = " u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    int_0 = 1227
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    bytes_0 = b"ph\x17\x11"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    int_0 = -2620
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    str_0 = "1:ao"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    bytes_0 = b"\xa5\xdc\x9a\xdb\x85\xb4H\x83\xe6+\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    bytes_0 = b"\xaf\x87\xd4\xc0\xbd\xff\x14\xde\xd5\xb4\x82>l\x9bf\xc7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    str_0 = "e2CW8~\"HHb69J!!o'z<:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    int_0 = -684
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    complex_0 = -529.3236 + 981.2915j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    int_0 = 1360
    list_0 = [int_0, int_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    int_0 = -485
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    str_0 = "o;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    int_0 = -32
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    float_0 = 108.5242
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    str_0 = "Q!E+Q(d&cfg{d>;"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    bytes_0 = b'\x98\xba\x01\x91WS\xe4M\xf2"t'
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    bytes_0 = b"6\xbf\xa37H\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    int_0 = -750
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    bool_1 = True
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    bytes_0 = b"g\x98 z\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    int_0 = -1457
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    str_0 = "$vs"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    bytes_0 = b"1\xc364\xbdEP\\\xb8\xbb\xc1\xe0)\x02\xb6\xca\xef"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [bytes_0, set_0, set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    int_0 = -3312
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    bytes_0 = b'"\x87\xc0\x98\xf1\xf2g\xfb \x8b\x15n)'
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    int_0 = -1025
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    str_0 = "6)r|c^QILU4+="
    module_0.get_new_command(str_0, str_0)


def test_case_4350():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4351():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    dict_0 = {}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    bytes_0 = b"x"
    module_0.match(bytes_0, bytes_0)


def test_case_4355():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4356():
    str_0 = '$IR/ 4hcV%Z"'
    complex_0 = -2098.9 - 638j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    str_0 = "3:p'FZlXQG{Wax"
    set_0 = {str_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    str_0 = 'D<"\\\n|Y\x0c\x0bT HZujxY\\'
    module_0.match(str_0, str_0)


def test_case_4359():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4360():
    complex_0 = -1603.192 + 1888.364j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    bytes_0 = b'G\x18\x1d\xb8\xbe"U&F\x18\xe32V\xf3G\xbf\x0e\x1a\xe8'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    str_0 = "\x0bXwRbXh!+"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    bytes_0 = b"\x95\xbdqk\xb8\xafH\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    bool_0 = True
    bytes_0 = b"\xd8\xe5\t\nm5\xbf\xb5\xfd\xe5\x9e~\xbe\xdaP\xdf!\x9d"
    tuple_0 = (bool_0, bytes_0, bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    int_0 = 3491
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    bytes_0 = b"um\xd3f\x1c8\x8b1o^\xa1D\\\x1d\x1b\x92\xb3"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    float_0 = 1540.3402
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    int_0 = -411
    tuple_0 = (int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    float_0 = 560.838
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    int_0 = 3203
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    str_0 = "sr$]Ba'wv{6\"JVp"
    int_0 = -839
    list_0 = [str_0, int_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    none_type_0 = None
    int_0 = -1789
    list_0 = [int_0, int_0, int_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    bytes_0 = b"TN\xa21\xe3\xdb\x1d\x90\xb7\x9aN*"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    int_0 = -1759
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    bytes_0 = b"\xef\xb9C\x948\xdd[\xb9\xf9Y<;\x8afY\x17\x95\x99\xeb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    int_0 = -2651
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    str_0 = 'K"^2'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    int_0 = 2283
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    bytes_0 = b"V\xff\xd5\xa9g\x907o~P}do\xb6\xf3\x87\xe9\xf9\xf8\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    float_0 = 4172.3
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    int_0 = 1358
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    str_0 = "SDq4\x0boLRo DcZ"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    bytes_0 = b"Y"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    float_0 = 3893.0
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    int_0 = 1640
    module_0.match(int_0, int_0)


def test_case_4389():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4390():
    list_0 = []
    tuple_0 = ()
    tuple_1 = (list_0, list_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    bytes_0 = b"\x8e\tE\xa9\xcb\x1cf#\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    complex_0 = -1566.7756 - 660.61224j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    int_0 = 1432
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    complex_0 = -2331.666 + 2302.6637j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    complex_0 = 1064.94 + 1370.211067j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    int_0 = -2197
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    str_0 = "n,dN"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    bytes_0 = b"\xb3\xd1\x8b{\xf8\x93\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    int_0 = -1210
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4402():
    str_0 = 'kMn$Q_$J"O'
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    int_0 = 3985
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    str_0 = "Y5'b|em]v"
    float_0 = -2051.291
    dict_0 = {str_0: str_0, str_0: str_0, str_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    float_0 = -1459.33878
    tuple_0 = ()
    bytes_0 = b"\x17\xac>\xcb\xc8"
    tuple_1 = (float_0, tuple_0, float_0, bytes_0)
    module_0.match(float_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    float_0 = -1100.07354
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    bytes_0 = b"]u(\xce\x8e\xbec\x9e\xd6\x9c\x0bt\xfb\xe5A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    str_0 = "$AH+b\t@Wn$aN]{"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0, str_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    int_0 = 1476
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    str_0 = 'j[slh3p/"foMv]+x/'
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    bool_0 = False
    bytes_0 = b"\x0e\x96\x05Y/\xe8pH+~\xa6\xea\x13"
    set_0 = set()
    tuple_0 = (bool_0, bytes_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    str_0 = "qY=xR:DJ\x0b@X/,t<9>B7"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    int_0 = -1473
    set_0 = {int_0, int_0, int_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    float_0 = -2591.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    int_0 = 4301
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    float_0 = 1112.3871
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    float_0 = 1082.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    int_0 = -462
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    float_0 = 1285.477
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    str_0 = 'u(%rBN\x0ciiP"LZiq'
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    float_0 = 2580.89
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    bytes_0 = b"EL.xXZ\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    bytes_0 = b",X\xdb\xf4\x85\x01'j\x9b\x0e\x85\x18\x00\x11\xc3\xe2\x97\x1f\xb8\x01"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


def test_case_4427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4428():
    bytes_0 = b";\xee\x8a \x8c\x817bgy,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    int_0 = -1005
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    str_0 = "(]50MAqg\rqP+f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    bytes_0 = b"Q\xfe2<\x85B\x91\xaeH\xcaS"
    bytes_1 = b"\xd7\xac\xf5\xa6\x93"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    str_0 = "u+*1kKuGhb*"
    str_1 = "e60T3L\x0cJ1*kw`75UJ-"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    float_0 = 915.0446
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    str_0 = "P\\0kV$nv}C\t&KIw`Hbn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    str_0 = "fu%-|-~2n'Jl>OjWx."
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    bytes_0 = b"\x9a\xda#k\x99\xae\x9a\xc9\x13x\xd59\x1a\x9c\xcaj"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    float_0 = 281.83819
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    str_0 = "(E0[Y\r{\x0b\n3fn%9t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    bool_0 = False
    int_0 = -2139
    dict_0 = {bool_0: int_0, int_0: bool_0, int_0: bool_0}
    set_0 = set()
    module_0.match(dict_0, set_0)


def test_case_4442():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    float_0 = 3103.691
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    object_0 = module_1.object()
    float_0 = 1627.779
    module_0.get_new_command(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    str_0 = "2t71I7UT]A|E^nV\\1B"
    module_0.get_new_command(str_0, str_0)


def test_case_4446():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4447():
    float_0 = 563.52
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    int_0 = -4524
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    bytes_0 = b"\xca28\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    tuple_0 = ()
    int_0 = -678
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    float_0 = -1028.23115
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    bytes_0 = b"\x88f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4453():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4454():
    int_0 = -2333
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    int_0 = 4797
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    list_0 = []
    tuple_0 = (list_0,)
    str_0 = "2ZRj.!H{"
    tuple_1 = (tuple_0, tuple_0, str_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    int_0 = -733
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    int_0 = -1075
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    bool_0 = False
    float_0 = 168.493
    list_0 = [bool_0, bool_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    complex_0 = -986.45 + 1783.6j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    bytes_0 = b"+#1\x8aC\xa4l\xdc"
    int_0 = -1182
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    int_0 = -893
    set_0 = {int_0, int_0, int_0}
    dict_0 = {int_0: set_0}
    int_1 = -527
    bytes_0 = b"\x1d's\xed\xb9\xa5\x01\x00]MzDa\x82\xb5\x1a"
    str_0 = '2E\x0c X["NBl*JJw'
    tuple_0 = (bytes_0, int_1, str_0)
    tuple_1 = (int_0, dict_0, int_1, tuple_0)
    list_0 = [tuple_1, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    bool_0 = False
    str_0 = "l!"
    list_0 = [bool_0, str_0, bool_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    int_0 = 166
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    int_0 = 1893
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4467():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4468():
    bytes_0 = b"'\xe1\xa5\xcb_|\xe8\xe7\x7f@\xe4\x8e\xcc\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    bytes_0 = b"\xf9~\xf4~\x9e\x07\xd4=\x1c\x18E$PM]s"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    int_0 = 2890
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    bytes_0 = b"D<\xac%n\xba\x1a\x80\x9b"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    bytes_0 = b"!\xeano\x9e\xe1Z\xffO\x04\x80"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    complex_0 = -1537.339607 + 486.50427j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    int_0 = -2137
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    str_0 = ",%Q[2%K"
    list_0 = [str_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    int_0 = 1045
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    int_0 = 558
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_4478():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4479():
    int_0 = 392
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    module_0.match(list_0, bool_1)


def test_case_4481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4482():
    str_0 = "#pc=XM Y&D#5-/lA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    float_0 = -1017.93
    set_0 = {float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    float_0 = 2021.6
    set_0 = {float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    complex_0 = -1151.77 - 3544.75j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    int_0 = -1377
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    bool_0 = True
    complex_0 = 849.6 - 1300.7187j
    tuple_0 = (bool_0, bool_0, complex_0)
    dict_0 = {}
    tuple_1 = (tuple_0, bool_0, dict_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    str_0 = "kMB?]:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    float_0 = -111.661528
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bytes_0 = b"E\x0b\x97\x8f\xbbo\x8a\x9d\x93\rn"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    str_0 = ">}-fo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    str_0 = "v\t$.#b\r1!2-,kj(G"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    str_0 = "-?'rBe&btF( .kWdw\"f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    str_0 = "AT<XN "
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


def test_case_4496():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4497():
    bytes_0 = b"\xe3?\xce\xa3"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    str_0 = "\\aipSkT2 z{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    int_0 = -120
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    int_0 = 1031
    module_0.get_new_command(int_0, int_0)


def test_case_4501():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4502():
    int_0 = 5209
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    float_0 = -1696.72876
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bool_0, bool_0, dict_0)
    object_0 = module_1.object()
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    bool_0 = False
    int_0 = 1342
    bool_1 = False
    bool_2 = True
    tuple_0 = ()
    tuple_1 = (int_0, bool_1, bool_2, tuple_0)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    str_0 = "RTIWsVc"
    str_1 = "@jp8P]0.h\n0>."
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    str_0 = "@:sfiFWhO)d"
    bool_0 = False
    bytes_0 = b"\xd3\xac\x04\xb7\xae\x93\xe4"
    tuple_0 = (bool_0, bytes_0)
    bytes_1 = b"'\xceX"
    dict_0 = {bytes_1: bytes_0, str_0: bytes_0}
    complex_0 = 708.3009 + 392.3491j
    tuple_1 = (str_0, tuple_0, dict_0, complex_0)
    set_0 = {bytes_0}
    tuple_2 = (tuple_1, set_0)
    bool_1 = False
    module_0.get_new_command(tuple_2, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    str_0 = "3Rs-*_g5i,o+.C0 Mr6"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    tuple_0 = ()
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    bytes_0 = b"\x95C.R"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    bytes_0 = b"\xa88\xa8V\xf6\xe9c\x85]dq\x1c1qE"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    int_0 = -922
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    int_0 = -2074
    bytes_0 = b'\xfb\x11$"\xfd\xc1\x07\xb0g\xb6\xeaQ\x88'
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    int_0 = 1276
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    str_0 = ".\n%2D`< jky[1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    int_0 = -439
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    float_0 = 193.1502
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    bytes_0 = b"\xf8\x17\x88\xbb+\xbbe\x9a\xac\x8c\xd0\xf4"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_4522():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4523():
    float_0 = 1328.4126
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    bytes_0 = b":\xb8X\xbe\xa8\\\x83gD\xa0\x9e'\x07\xed\x83"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    str_0 = "86U)_|Ww"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    str_0 = "J&x^[?)}dM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    int_0 = -178
    module_0.match(int_0, int_0)


def test_case_4528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4529():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, dict_0)


def test_case_4530():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4531():
    bytes_0 = b"B\xb9\xe6]\x90\xe4\xdd4\x16[u\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    none_type_0 = None
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    list_0 = []
    bool_0 = True
    list_1 = [list_0, list_0, bool_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    float_0 = 3772.25154
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    int_0 = -1106
    tuple_0 = (int_0,)
    str_0 = "6dwkXnz,f878TN"
    set_0 = {tuple_0, int_0, int_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    str_0 = "KQ(;}.WK+3n*^ G>5+%w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    float_0 = 1247.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    set_0 = set()
    tuple_0 = (set_0,)
    dict_0 = {}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    str_0 = "v\x0cZ"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    int_0 = -1130
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    str_0 = "=p],YK+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    int_0 = -598
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bytes_0 = b"\x12\x85\xa9\x8e\x91\x9c&\xec\x99\x7f"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    str_0 = "c21|5oOq!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    dict_0 = {}
    bool_0 = False
    str_0 = "VS?"
    tuple_0 = (dict_0, bool_0, bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    bytes_0 = b"\x12/"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    float_0 = -818.4212
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    bytes_0 = b"\x1bi\xc2\xa4\xd1*\xf3"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    bytes_0 = b"\xd0\x97+\x87\xec\xd1kl\x94\x12\xbe\xa7B\xb6\xc3\x19\xf8\xf9"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = True
    tuple_0 = (set_0, set_0, bool_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    str_0 = "f_Q$>;X"
    str_1 = ""
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    float_0 = -1269.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    dict_0 = {bool_0: set_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    int_0 = -1178
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    int_0 = 148
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    int_0 = 2330
    bool_0 = False
    bytes_0 = b"\x8f\xcebFZlXEB"
    str_0 = "&d\\gG@\\SQVN!g"
    bytes_1 = b"]\xf4fk\xd4D1"
    tuple_0 = (str_0, bytes_1)
    tuple_1 = (bool_0, int_0, bytes_0, tuple_0)
    list_0 = [int_0, int_0, int_0, tuple_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    str_0 = "Yr}028%KU@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    str_0 = "T\toT2M1<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    object_0 = module_1.object()
    list_0 = [object_0]
    bool_0 = True
    tuple_0 = (list_0, object_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    bytes_0 = b"8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    str_0 = "8'o.-Ao2LQ,(_qx=D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    complex_0 = 3080.4466 - 114j
    float_0 = -1146.274
    bytes_0 = b"\x0e"
    tuple_0 = (complex_0, float_0, bytes_0, float_0)
    tuple_1 = (complex_0, tuple_0)
    set_0 = {tuple_1}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    int_0 = -2786
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, int_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    int_0 = 377
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    str_0 = "H^~ !\tV|2,P<*W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    float_0 = 4389.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_4569():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4570():
    str_0 = "g}~g"
    float_0 = 273.0
    dict_0 = {str_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    bytes_0 = b"\xab"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    float_0 = -237.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    int_0 = 392
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    float_0 = 2969.0
    int_0 = 496
    list_0 = [float_0, int_0, int_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bytes_0 = b"\x1aV*\t\xc5WP"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    float_0 = 366.7348
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    int_0 = -1210
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    int_0 = 5056
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_4581():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4582():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    int_0 = 194
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    str_0 = " 5I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    bytes_0 = b"\x03\xe8\t\xeb\xc9\x8a\xbb\xa1\xd8\xb0\xe9\x86"
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    bytes_0 = b"\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    bytes_0 = b"\x91\x11\xc4\xf8\x0b\x8b\x87\xf7\xff9\x82\xab=DQ\xf4m\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    bytes_0 = b"\x9a\xb1\xf0\xb6\xaf\xfe\xf1\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    bool_0 = True
    int_0 = 288
    list_0 = [bool_0, bool_0, bool_0, int_0]
    bytes_0 = b"\x14D"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    bytes_0 = b"\xaa0U\x8d\x8bm\x86\xed\xe8L\xa2\xa5\x7f\x0fk\xe4\x95\x8b`X"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    int_0 = -3566
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    complex_0 = 2893.943 + 2907.407992j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    bytes_0 = b"\xf4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    bytes_0 = b"\x10\xa3\x0c\xb4\x03\x8e\xe2"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    complex_0 = 3697.747643 - 832.887143j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    bool_0 = False
    float_0 = -2070.2
    tuple_0 = (bool_0, bool_0, float_0)
    int_0 = -1465
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    bytes_0 = b"\xb3\xee|\xf4\xb5A\x1b{\xe0"
    module_0.match(bytes_0, bytes_0)


def test_case_4600():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4601():
    bytes_0 = b"{gl<\xa0\x05"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4602():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4603():
    int_0 = 1530
    complex_0 = -1646 + 28.21j
    module_0.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    int_0 = -3715
    module_0.match(int_0, int_0)


def test_case_4605():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4606():
    bytes_0 = b"w\xeb\xf8\x90\xb3\xb0\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    int_0 = 614
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    bytes_0 = b'\xd1\xcb \xaf\x9f\xe1\xe1\xb6\xacp\xac\xae\xdd\xa1\xd3"\x13\xc3:'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    complex_0 = -2283.272 - 580.481775j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    int_0 = 1831
    module_0.get_new_command(int_0, int_0)


def test_case_4612():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4613():
    bytes_0 = b"\x9b\x98\xd0"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    complex_0 = 2632.128 - 11.72j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    float_0 = 684.06
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    int_0 = 1257
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    str_0 = "JD1Q1!"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    str_0 = "?L=vo5JK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    bytes_0 = b"\x98pA\xa7\xc2\x13B;\xe30+\xedn\xe5\x18\xf2'(\x84"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    str_0 = "#p\nS-M.S:QBR"
    set_0 = {str_0}
    tuple_0 = (str_0, set_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    bytes_0 = b"\x86\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    bool_0 = True
    object_0 = module_1.object()
    dict_0 = {bool_0: bool_0, object_0: object_0, bool_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    str_0 = "/[ $b'_k:V0R$aq^[Z"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    float_0 = 935.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    int_0 = -4201
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    complex_0 = -19.41 - 904.562054j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    int_0 = -2566
    module_0.get_new_command(int_0, int_0)


def test_case_4632():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4633():
    str_0 = 'Acf%e>tRqJ2<g#"6yP2'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    str_0 = "A=p3A\rrr$-6<r"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    bytes_0 = b"t\xc1\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    complex_0 = -962 - 930.9069j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    set_0 = set()
    int_0 = -618
    bool_0 = True
    tuple_0 = (set_0, set_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    complex_0 = 1558 + 1354.62939j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    str_0 = "B[7T+~t>@>X@,P"
    str_1 = ",[Hs"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    int_0 = -2206
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    int_0 = -1257
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    int_0 = -126
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    str_0 = "\nu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    bytes_0 = b"\xe1`\xd7vGq\xe7\xcf\x96\x9f\xf1\xd9\xbe\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    str_0 = "?D~"
    module_0.match(str_0, str_0)


def test_case_4646():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4647():
    str_0 = "G;{8HMl,!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    bytes_0 = b"\x8e\x84\xe1\xfc\xd1\xa0\xb8UB\xee\xb5$\xe7rh\xb8\xb2\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    bytes_0 = b"\xbb\x83\xe6\x1dC\xca5\xbb7z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    str_0 = "[iDOui"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    complex_0 = 1654.37 + 471.41931j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    complex_0 = -1494.537423 - 2185.842j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    int_0 = -1568
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    int_0 = -1421
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    bytes_0 = b"\x02\x8b\xbc6\xb6*\xf5\xb4\x1cn\xed"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    bytes_0 = b"z\xff\xfa\xba\xe0\xb4\x08\xd0uUq\xa2\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    object_0 = module_1.object()
    bytes_0 = b"\x1d\x18\xb72e\x91\x93\xa2\\\x1f\x8b\xe0"
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    int_0 = -1909
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    bytes_0 = b"\xdd\xe7\xf0;\xff\xe9\x1e\xb4\x0b\xc5I\xe5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    float_0 = -2630.8507
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    bytes_0 = b"i\x08\xbe\x88\xcf{\x19tO\x91\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    list_0 = []
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    str_0 = "&-]\t>ox!\rZE(J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    bytes_0 = b'\xdb<X\xce\x8f@\xd1\xf4\xfe\xb3\x99\x9c\xdc{"Mte\x8ev'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    complex_0 = 1056.5 + 1945.88978j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    bytes_0 = b"z"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    int_0 = 2352
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    int_0 = -1270
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    complex_0 = -2575.67927 + 493.529364j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    complex_0 = -768.7079 - 78.58j
    int_0 = 1143
    module_0.match(int_0, complex_0)


def test_case_4674():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4675():
    str_0 = "_{t 58jC^g3vkC^c0S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    float_0 = 1638.88
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    int_0 = -4333
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    int_0 = -977
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    str_0 = "#G:a7j%\r)`/T~`GNC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    complex_0 = -2334.4 - 3652.4j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    none_type_0 = None
    int_0 = 2836
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    bytes_0 = b"]\x82\xe5!1\xb9u\x00\x01\x99"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    bytes_0 = b"\xb2?\xa8\xe8\xd1\x05\xbb\x83q\xd7IR\xab"
    bytes_1 = b"\x9b\xa2B\x97er\xec*\x14\x10\x89{\n\x03*-[\x84"
    set_0 = {bytes_0, bytes_0, bytes_1, bytes_1}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    float_0 = 558.887387
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    bytes_0 = b"\xd5\xc72\xd1\\\xc9\xf9\xef@n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    str_0 = "h\t63rs\r'/-a<07C"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    bytes_0 = b"\xd91\xa4\x1b\xb4\x08\xda\x16\xec/\x1c\xeasU"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    int_0 = -1618
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0, list_0, object_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    bytes_0 = b"av\x82?\xad\x82\xe0\x13E\t\xd7\xdc\x97\xef\xe3r\x10\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    float_0 = -1987.8351
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    complex_0 = 2381 - 890j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    float_0 = 3015.472
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    float_0 = 812.832
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, bool_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (tuple_0, bool_0, dict_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    complex_0 = 2016.85 + 1419.34j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    int_0 = -3119
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    int_0 = -259
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    float_0 = 5480.619
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    complex_0 = -279.69 + 1409.00087j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    object_0 = module_1.object()
    list_0 = [object_0]
    tuple_0 = (complex_0, dict_0, dict_0, list_0)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0, dict_0)
    int_0 = 2689
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    complex_0 = -283 - 4229.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    int_0 = -2802
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    float_0 = -3496.34
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    int_0 = 41
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    str_0 = "[pN\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    bytes_0 = b"\x88\xa0p"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    bytes_0 = b"=\xb9\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    float_0 = -2743.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    int_0 = -1142
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    bytes_0 = b"\xb2\xf3\xb1\xd3\xac\xa0\x87\x86J\xf0\x15vA"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    set_0 = set()
    list_0 = [set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    bytes_0 = b"\xc3\xfb\x00\xab\xb1|\xfd\x14p"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    bytes_0 = b"S\xe6\x1a\xd1}1\xf6\x94\xb8,}O"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    bytes_0 = b".\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    float_0 = 1324.656952
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    int_0 = 429
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    int_0 = 1920
    module_0.match(int_0, int_0)


def test_case_4722():
    pass


def test_case_4723():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4724():
    bytes_0 = b"D\xa9}\xed$\x01 w\xd9\xdc\x88\xf0\x91\xeb:\xb4P\x84\xc0\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    none_type_0 = None
    complex_0 = 431 + 1467.4j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    int_0 = -1760
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    bool_0 = False
    complex_0 = 1977.16 - 7.35j
    tuple_0 = (complex_0, bool_0)
    tuple_1 = (bool_0, tuple_0, bool_0)
    list_0 = [tuple_1]
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    str_0 = "iL&mb]r%cBM"
    module_0.match(str_0, str_0)


def test_case_4731():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4732():
    str_0 = "z$>pI"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    bytes_0 = b"\x10u!\x15\x06rg~\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    str_0 = "0~6EQ7DDU\x0b9\nXE,Gz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    str_0 = "O.p,A:-!>Frm$d"
    int_0 = -703
    tuple_0 = (str_0, int_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    float_0 = -1580.67746
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    bytes_0 = b"\x95\x08Y"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    bytes_0 = b"x\xe5Ria\x82\xf7\xae\xe2\xc5"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    int_0 = -4072
    module_0.match(int_0, int_0)


def test_case_4742():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4743():
    int_0 = -4420
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    str_0 = "q$23Qn@[wQ|N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    bytes_0 = b"@\x19\xd5*R\xff6H8\x0eh"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    int_0 = -1136
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    str_0 = "?$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    int_0 = -1010
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    int_0 = 23
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    bytes_0 = b"\xea\xe0u\x031\xf2Y\xe7Hx@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    int_0 = -290
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    object_0 = module_1.object()
    float_0 = 1290.2202
    dict_0 = {object_0: object_0, object_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    float_0 = -472.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    bytes_0 = b"\xb5\xb20Q?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    bytes_0 = b"\x83a\xee/\x84\xb6,uR\xa26\xba\x8a?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    str_0 = "D\x0cpG3V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    str_0 = ""
    set_0 = {str_0, str_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    float_0 = -81.0
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    str_0 = "}&(u\x0cr8$Z#'7R2poD+\""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    bytes_0 = b"\xea\x9c\x01\x15\xbd"
    float_0 = -1395.6962
    set_0 = {bytes_0, bytes_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    bytes_0 = b"\xd5"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_4764():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4765():
    int_0 = -2748
    tuple_0 = (int_0,)
    set_0 = {tuple_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    float_0 = 1202.66875
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_4767():
    pass


def test_case_4768():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4769():
    bool_0 = False
    bytes_0 = b"\xc5\x06D\x81\xea\xd3\\{\xd0\xf3z\xc4\xc3\xa1\x90,\xee\xc9C\x00"
    dict_0 = {bool_0: bytes_0, bool_0: bytes_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    bytes_0 = b"\x0e\xa9\xf1\xf5s\xfaC\xe8>"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4772():
    str_0 = "A~B,R*)g"
    list_0 = [str_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    bytes_0 = b"m7\x05k\xcb\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    str_0 = '<_}i`."#cep5LC6kx3n"'
    bool_0 = False
    int_0 = -83
    bool_1 = False
    dict_0 = {str_0: int_0, bool_1: bool_0, bool_0: str_0, int_0: str_0}
    tuple_0 = (str_0, bool_0, bool_0, dict_0)
    module_0.match(tuple_0, bool_0)


def test_case_4775():
    pass


def test_case_4776():
    pass


def test_case_4777():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4778():
    int_0 = -2727
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    none_type_0 = None
    float_0 = -2683.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    int_0 = -675
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    str_0 = "8ZP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    bytes_0 = b"\xf6\xc9W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    complex_0 = 1764.2 + 902.57j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    bytes_0 = b"\x05\x06\xdf"
    str_0 = "9"
    tuple_0 = (bytes_0, str_0, str_0)
    set_0 = {tuple_0, str_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    int_0 = -81
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    none_type_0 = None
    float_0 = -742.8
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bytes_0 = b"~\xb6\x901\x85\x08\xdb\xa2\x01\xfd\xa6\x93\xe0$\x15|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    str_0 = "B]^fwaZ?PWc{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    float_0 = 1548.2339
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    dict_0 = {}
    set_0 = set()
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    str_0 = "\rt/9lGh@EM?P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    float_0 = -1970.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    str_0 = "MM"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    int_0 = -281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    bool_0 = False
    set_0 = {bool_0}
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: set_0}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    bytes_0 = b"\xd7e\xbd\xf9{\xcb\xea\xe2\xd7\xfd"
    module_0.match(bytes_0, bytes_0)


def test_case_4803():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4804():
    str_0 = "dK3dVe#L5l{R\t<Eb`"
    module_0.match(str_0, str_0)


def test_case_4805():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4806():
    float_0 = -145.7439
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    bytes_0 = b"2\xfbT\xc7\xe9\x06\xd2A"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    str_0 = "khJ#V}j#'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    bool_0 = False
    str_0 = "ZKUF"
    tuple_0 = (bool_0, str_0)
    list_0 = [tuple_0, str_0, str_0, str_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    float_0 = 456.741335
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    none_type_0 = None
    bytes_0 = b"N`\xfb\xe2\xbb#95\xb0?"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    str_0 = "$K0;x(,e3"
    set_0 = {str_0}
    list_0 = [set_0, set_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    int_0 = 877
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    int_0 = 75
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    float_0 = 1175.095587
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    str_0 = "9DNsY:"
    tuple_1 = (tuple_0, list_0, str_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    bytes_0 = b"\xfa\xa7W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    str_0 = "CK;"
    bytes_0 = b"^\x8as a\xe5\xd0{"
    dict_0 = {bytes_0: str_0, str_0: str_0, bytes_0: bytes_0, str_0: bytes_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    complex_0 = 1798.8 + 1988.135j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    bytes_0 = b"\x83\x99\xa0\xce\xf23\x95;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    int_0 = 4438
    tuple_0 = (int_0, int_0)
    float_0 = 1780.18293
    tuple_1 = (tuple_0, float_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    int_0 = -646
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    bytes_0 = b"\x10_\xe5\xaf\xc7Q\xb4\x7f"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    int_0 = -970
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    int_0 = -231
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    bool_0 = False
    int_0 = 1801
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0, int_0: int_0}
    list_0 = []
    complex_0 = 1178.5229 + 776j
    tuple_0 = (dict_0, dict_0, list_0, complex_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    float_0 = -779.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    str_0 = "zym%F|QB>0"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    str_0 = "d#o O8JUduFP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    float_0 = 566.4
    module_0.match(float_0, float_0)


def test_case_4836():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4837():
    int_0 = 1180
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    int_0 = 1628
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    bytes_0 = b"\xca"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    int_0 = -1446
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    bytes_0 = b"w\xf6\xa1"
    module_0.match(bytes_0, bytes_0)


def test_case_4842():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4843():
    str_0 = "_av>@gE\t]\x0b]\\d"
    set_0 = {str_0, str_0}
    tuple_0 = (set_0, set_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    int_0 = -756
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    int_0 = -1999
    bool_0 = True
    dict_0 = {bool_0: bool_0, int_0: int_0}
    tuple_0 = (int_0, int_0, bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


def test_case_4848():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4849():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    str_0 = "YASW9])l"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    bytes_0 = b"\xfa\x96\xe4\xe4\xb1H\xe9\xb1ML\xadV\xd5v#\xc0"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    bytes_0 = b"VK\xd0<[\xf0\xa83\xa5E>\x07\xeb\x80{\xdc\xbc_\xdc\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    bytes_0 = b"\xa1\xfe\xfdm\x02$D("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    int_0 = 1334
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    float_0 = 634.2453
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    str_0 = "-8`=noljC9p<$\x0bQ\nZLur"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    complex_0 = 423.3637 + 5767.7953j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    int_0 = -1363
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bytes_0 = b"\x8e\xe6}\xb2n\x8e\x18ZW\xa4\xd9\xd6rL2\xf9M"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    int_0 = -1100
    module_0.match(int_0, int_0)


def test_case_4862():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4863():
    str_0 = ".=DnaW[\x0cs_|$\x0b\tt7M`"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    bytes_0 = b"\x11\xee\xdc\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bytes_0 = b"W"
    float_0 = -84.04045
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, float_0, list_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    int_0 = -434
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    str_0 = "Q rz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    bytes_0 = b"\xda\xb5\xfc\x17+\x98!l\xa4\x11\x80\xfeB\xad\xf16$R\xfb\xca"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    str_0 = "?~o8Sy}H7UW@cW"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    int_0 = -3880
    tuple_0 = (int_0,)
    bool_0 = True
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: bool_0, int_0: bool_0}
    str_0 = "wHPV1"
    tuple_1 = (dict_0, dict_0, str_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    int_0 = 838
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    int_0 = 2409
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    bytes_0 = b"\xa9\xf68\xc9\xc0\xbc4\xab\xf0\xb5\x97\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    bytes_0 = b"\tw\x0ej\xf3\xfc\xa3\xeb\xe7\xed"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    complex_0 = 723.53591 - 2718.95j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    bool_0 = True
    str_0 = "oZUIo."
    tuple_0 = (bool_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    bool_0 = False
    str_0 = "?#xISOo$oDa6[hj6#"
    bytes_0 = b"k\xa7\xc4q\xcb\xe2I"
    tuple_0 = (bool_0, str_0, bytes_0)
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    dict_0 = {}
    str_0 = "+"
    module_0.match(dict_0, str_0)


def test_case_4880():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4881():
    list_0 = []
    tuple_0 = (list_0,)
    list_1 = [tuple_0]
    str_0 = "Pd[u'^1m"
    str_1 = "Qj2"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    complex_0 = 26.05 - 3777.90763j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    complex_0 = 599.5328 - 148.488j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    int_0 = 1415
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    bytes_0 = b"\xdbH\x94\x0e]\x1d&\xbe\xa8\x07\xa0\xc5Y\xb3\xbc]V@9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    bool_0 = False
    int_0 = -1321
    list_0 = [bool_0, bool_0, int_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    str_0 = "2#W$fb:qA =8}vz2U"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_4888():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4889():
    float_0 = 127.2
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    complex_0 = 206.8 + 424.49758j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    int_0 = 1516
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    str_0 = "zV@*e\nfzHl*5g"
    bool_0 = True
    str_1 = "K3<Xl"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_1: str_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    complex_0 = -405.9743 - 1339.94j
    float_0 = -2267.0
    tuple_0 = (float_0,)
    bool_0 = True
    tuple_1 = (complex_0, complex_0, tuple_0, bool_0)
    int_0 = -268
    set_0 = {tuple_1, tuple_1, int_0, tuple_1}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    float_0 = 3634.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = True
    list_0 = [tuple_0, tuple_0, bool_1, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    int_0 = 2161
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    str_0 = "d("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    str_0 = "["
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    str_0 = "GfG8{/e/nSAR%\rei{"
    str_1 = "2=<j. K5k"
    tuple_0 = (str_0, str_1, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    str_0 = "4\\x?nT=s <.?kRZNqp8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    bytes_0 = b"\xeea\xca\xe1\x96\xcdq2\xb5ey\xb4=\xaam\x87\x0e\xdd%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    complex_0 = 2080.57306 - 2369.44j
    tuple_0 = (complex_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    bytes_0 = b"\xf8\xe0\x8e\xfa\xab\xe0!\x14"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    bytes_0 = b"C\xff!W\xea\xe9rW\xab\x9e\xa2\x89[\x18Ku\x19E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    bytes_0 = b"\xe8\xc5\t\x16*\x9c\x15Bo\x1d\x1b\x8fe\xab"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    bool_0 = False
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    tuple_0 = (bool_0, list_0, list_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    float_0 = -739.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    int_0 = -2524
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    str_0 = "L"
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    str_0 = "G}LMsrfFr>=\x0c=B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    int_0 = -3316
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    float_0 = 300.2553
    tuple_0 = (float_0,)
    str_0 = '#jc%ae`"u'
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_0: bool_0, bool_0: bool_1, bool_1: bool_0}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    int_0 = 1526
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    complex_0 = 1056.202 + 2526.9143j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4919():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4920():
    str_0 = "NjA43%U"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    int_0 = -3443
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    int_0 = 1035
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    int_0 = -2316
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    float_0 = 384.48
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


def test_case_4925():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4926():
    str_0 = "\rz8r<QV\t=PZhv=r-b|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    float_0 = 6.08
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    int_0 = -1225
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    int_0 = 3148
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    str_0 = "k;, "
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    complex_0 = 942.5191 + 2133.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    str_0 = "N=F_A$tBn'|uLJ[\"&Gy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    bool_0 = False
    dict_0 = {}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    bytes_0 = b"o\x83\x04\xd3\xc1q\x8d\xd1\xfej\\UtA\xa9\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    str_0 = "M}EXhe`"
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    str_0 = "Fz!_1W,\x0bo0BnJkk\ns?\x0b"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    int_0 = 2310
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    bytes_0 = b";e\xfd=\x08\xa1g\xab?G\xb0RZw\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    bool_0 = True
    float_0 = 1078.72826
    dict_0 = {bool_0: bool_0, bool_0: float_0, float_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0, bool_0: tuple_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    int_0 = 1734
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    str_0 = "k$QAK4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    tuple_0 = ()
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    float_0 = 3464.482288
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    str_0 = ",<fI^?C^mo?C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    str_0 = "r[W.i-O_/;s{&Dbt6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    str_0 = "h)F|p@2<Is~$M<RiWa={"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    str_0 = "'1@"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4952():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4953():
    bytes_0 = b"\xa1\xcf\xc3r]j\xd3\xf4\x07\x08C\xa2\x1b\xf6,K2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    bool_0 = False
    set_0 = {bool_0}
    int_0 = 2465
    tuple_0 = (set_0, int_0)
    bool_1 = True
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    float_0 = 3223.1013
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    int_0 = 1028
    str_0 = ""
    dict_0 = {int_0: int_0, str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = {int_0: int_0, int_0: dict_0}
    module_0.get_new_command(dict_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    str_0 = "0\tT\\B2>fR]8OMz#YBu2C"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    float_0 = -1668.6343
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    str_0 = "'eKjP)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    str_0 = 'P?Rq"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    list_0 = []
    str_0 = "7eI{_Ry\x0cQ5YiDDy~"
    none_type_0 = None
    str_1 = "g+SGQOiW\tJy\n>o"
    str_2 = "\t{Xde"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    str_0 = "_]ds;25n5;bJgICq"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    float_0 = -983.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    bytes_0 = b"\x81\xa7Q\xe3\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    tuple_0 = ()
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    bytes_0 = b"!h\xc7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    str_0 = "38F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    float_0 = -314.98
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    int_0 = -718
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    object_0 = module_1.object()
    str_0 = "&S&M'sc))W&7G"
    module_0.get_new_command(object_0, str_0)


def test_case_4973():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4974():
    int_0 = -1667
    module_0.get_new_command(int_0, int_0)


def test_case_4975():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4976():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    bytes_0 = b"\xa7\xbaS\xe8n\x9b\xe7W\x0fN\x17^~\x80Q7\x88\x8a2"
    str_0 = 'Zams\r5[v+2\r"cTI`5'
    module_0.match(bytes_0, str_0)


def test_case_4978():
    pass


def test_case_4979():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4980():
    bytes_0 = b"\xe2\x8c{\xb1\xc4Y\xb4\xea\x00gl\xf6\xab\x81\x02\xa2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    float_0 = -1104.54386
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0]
    module_0.get_new_command(list_1, list_1)


def test_case_4983():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4984():
    str_0 = "x3O?"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    bytes_0 = b"\x9ba>e~pV{\x0fQ6\x8d;L\xdb\xe1\x9c["
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    str_0 = "7^CidS"
    str_1 = "&tSF'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    str_0 = '\rY"Xh_@*1A[5#)xOW@f<'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    bytes_0 = b"\xfd\xbd\t\xb9\xd1\xbc*\xcd\n\x16\xcew\x80T"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    float_0 = -2988.58
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    int_0 = 696
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    bytes_0 = b"\x10A',\xf7\x80;p\xb8/\x06%\x03\xc3\x95\xc5\x8b\x996r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    str_0 = ":82Xc0A"
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    set_0 = {tuple_0, bool_1, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    str_0 = "<D-K1MGMVd*\rjd+Pp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    bytes_0 = b"\xc9\xed\x05~D\xf5{\xd1\xad\xb1\t\xc3\xe5\xdbsi&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    int_0 = -6576
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    bytes_0 = b"\x9b\xa7\xc3\xa8~\x813\xb5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    str_0 = "VzOiA| Crew"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    str_0 = "pAz>Xj)`cV82Q]C=?{|,"
    dict_0 = {str_0: str_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    str_0 = "8',)x6[Q&`s+(}n#lD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    int_0 = 96
    str_0 = "#@"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    none_type_0 = None
    int_0 = -1403
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    bytes_0 = b"\xa9"
    module_1.object(*bytes_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    bytes_0 = b"\xcb\x16,"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    int_0 = 317
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    int_0 = -2380
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    int_0 = 1654
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    str_0 = "NKf|'j+h^O%\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    bytes_0 = b"\xaa\xc1\xe5\xdb\xb1}\xc8"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    bytes_0 = b"\xf5r\t(\xcd3\xc3o\x8d\x01\x82&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    bytes_0 = b"\xc6\xfe\x80\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    int_0 = 1206
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    bytes_0 = b"\xa9\xc4\x10=T\xaek\n\xcc\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    float_0 = 2124.00703
    module_0.get_new_command(float_0, float_0)


def test_case_5018():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5019():
    complex_0 = -1221.1008 - 1014j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    int_0 = 2565
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    dict_0 = {}
    set_0 = set()
    int_0 = 249
    tuple_0 = (dict_0, set_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_5024():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5025():
    object_0 = module_1.object()
    float_0 = -729.2895
    dict_0 = {object_0: object_0, object_0: float_0, float_0: object_0}
    module_0.get_new_command(dict_0, float_0)


def test_case_5026():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5027():
    bytes_0 = b"\x84\xf6\xdd\xf2\xa3\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    bytes_0 = b"\xaeox\xfe\xd9q\xc1"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    float_0 = -3882.703
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    float_0 = -1113.88913
    tuple_0 = ()
    tuple_1 = (float_0, tuple_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    int_0 = -1425
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    object_0 = module_1.object()
    set_0 = {object_0}
    bytes_0 = b"=/\x97\xbe\xb0),\xd3B|\x9b\xa2\xaf"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    bool_0 = False
    int_0 = -835
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    str_0 = "l8`#jVX3?Ih3\x0c)l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    bool_0 = True
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    int_0 = 4253
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    bytes_0 = b"'\xd0A\xf8\x9b\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    float_0 = 2608.8645
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    float_0 = -919.8947
    module_0.match(float_0, float_0)


def test_case_5042():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5043():
    str_0 = "T|AFB>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    bytes_0 = b"\xddx\xbc.\xdcu\xcb\xa51\x06\xc3\xaa:`\xfe\xf1\xe3\xae<["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    float_0 = 314.6417
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    complex_0 = -2833 - 1093j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    dict_0 = {}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    int_0 = -289
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_5049():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5050():
    int_0 = 1030
    set_0 = set()
    tuple_0 = (int_0, set_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    str_0 = "!`|?|:@o~arBo)4Z.\nu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    bytes_0 = b"\xa6w"
    int_0 = 5773
    list_0 = [bytes_0, int_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    float_0 = 205.51325
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    str_0 = '\t2X/_j"*.wXAnx<'
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    int_0 = 1891
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    str_0 = "myuFHyE)\nS_1N\t|E'fQ#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    str_0 = "\x0c('|_:u,#2yY"
    tuple_0 = (str_0, str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    str_0 = "]mp/`O4~ALZm:$"
    module_0.match(str_0, str_0)


def test_case_5060():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5061():
    bytes_0 = b"\xaea\xad0hLR\x1c\x93W%\x90\xbe\xba"
    bool_0 = True
    list_0 = [bytes_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    str_0 = "Us?*f'F?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    int_0 = 291
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    bytes_0 = b"\xb8\x1c\xa3\xa4\x85\x13\xca\x89_\xbe~\xde\xc6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    int_0 = 915
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    str_0 = "GP=pCv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    int_0 = -2522
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    int_0 = 1883
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    bytes_0 = b"\x80\x10\xaa.\xed\xb5 \x06\x9d\x18+\xb8U\x86F\xf8\xca,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    bytes_0 = b"\xfc\xd3\xcc\x94\xd4\xa6\x1e*\x1f3%\x9c\xe7\xb8,S\x0ct\xcf"
    module_0.match(bytes_0, bytes_0)


def test_case_5071():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5072():
    bool_0 = True
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    int_0 = 654
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    str_0 = "$bWQyS"
    list_0 = []
    list_1 = [str_0, str_0, list_0, str_0]
    dict_0 = {str_0: list_0, str_0: list_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    none_type_0 = None
    list_0 = []
    set_0 = set()
    bool_0 = False
    tuple_0 = (bool_0, set_0)
    tuple_1 = (list_0, set_0, tuple_0)
    module_0.get_new_command(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    bytes_0 = b"\xb1\xa2\x00h\x03\x07Pc]t\x8d?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    bytes_0 = b"4 \n\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    str_0 = "l.M<Of27.0]aij\r*!8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    complex_0 = 1192.8937 + 2900.024j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    bytes_0 = b"9\xa0\x05\\\x82\xb9\xf0\x92\xb3\x86\x9ag\xd4U6\x86\xca\x17\xd8%"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    bytes_0 = b"\xc5:\xf4\x07i\x1dS\xd7\x8duRN\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    str_0 = "_&m"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    str_0 = "I!}6#Vi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    str_0 = "i=75rJtJDJ!Rrg"
    module_0.match(str_0, str_0)


def test_case_5087():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5088():
    int_0 = 168
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    str_0 = "o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    bytes_0 = b"B\xb9d#z\xb9\x81\xbch:d)\xf9M\x8b\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    str_0 = "|=+:\r_^o\x0cGS\n=Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bytes_0 = b"-\xc0\x95 i[S\x99\xba\x85\x05\x9c\xb4\xaa\x1dQ\xae\xef"
    bool_0 = True
    set_0 = {bool_0}
    float_0 = -2663.271
    bool_1 = True
    list_0 = [float_0, bool_1, bool_1, bool_1]
    bool_2 = True
    tuple_0 = (list_0, set_0, bool_2, bytes_0)
    tuple_1 = (bool_0, set_0, float_0, tuple_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: tuple_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    complex_0 = 329.20535 - 480.62j
    bytes_0 = b"O("
    tuple_0 = (complex_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    bytes_0 = b"\x1cL^\x1fh\xa4\x9cn\x93\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    complex_0 = 2599.795647 + 2362.1211j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    float_0 = -165.5
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    bytes_0 = b"\r]3a\xec\x89\xeej\xb2/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    bytes_0 = b"\xf3HA\xfd\xe1\xd9\xed\xea\x0c\x17\xbd\xd5a\xe4U"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5101():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5102():
    int_0 = 2762
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    object_0 = module_1.object()
    list_0 = [object_0]
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    int_0 = -618
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0, int_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    str_0 = "{a\nuNx77G"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    complex_0 = 2582.399 - 1763.501495j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    str_0 = "UPCB6]by0M/O=/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    bytes_0 = b"fS5\x99$"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    str_0 = ">7'|Yi\\>!{kdZr"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    int_0 = -1544
    dict_0 = {int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


def test_case_5114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5115():
    float_0 = 15.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    bytes_0 = b"\xa7+\xcd\x8c\xfc-*\xc1\xa8Az\xf7 R+\x06iy\x04\xa7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_5117():
    pass


def test_case_5118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5119():
    complex_0 = 757.88 + 3523.7308j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    float_0 = -2162.0381
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    int_0 = 648
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    int_0 = 43
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    int_0 = -1831
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    str_0 = "Z\n}D|YV^^?"
    module_0.match(str_0, str_0)


def test_case_5127():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5128():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    float_0 = -602.050626
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    complex_0 = -424 - 2529.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


def test_case_5132():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5133():
    float_0 = -239.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    complex_0 = -2671.07526 + 5087.21j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    bytes_0 = b"\xabv"
    set_0 = {bytes_0, bytes_0, bytes_0}
    bool_0 = True
    tuple_0 = (bytes_0, set_0, bool_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    int_0 = -4173
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    int_0 = -968
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    bytes_0 = b"O~G\xfe\x17(\xae\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    int_0 = -709
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    float_0 = 637.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    complex_0 = 980.7184 + 259.9571j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    complex_0 = 3193.72 + 720.78j
    tuple_0 = (complex_0, complex_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    float_0 = 2506.550206
    module_0.match(float_0, float_0)


def test_case_5148():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5149():
    int_0 = -1404
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    int_0 = 548
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0, list_0]
    module_1.object(*list_1, **list_1)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    bytes_0 = b"\xc7\xf6Aio\x11\xc9\x11s\xdeR\xc3\x08\x8d\xf3"
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, list_0)
    tuple_1 = (bytes_0, bool_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_5152():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5153():
    str_0 = "]$1\x0cr0?sig/vk-G"
    set_0 = set()
    bytes_0 = b"g'q\xddG+\x05\x95X\x159\xc8\xe2\xdd"
    dict_0 = {}
    tuple_0 = (str_0, set_0, bytes_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    int_0 = 2764
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    bool_0 = True
    float_0 = -123.084586
    tuple_0 = (float_0, bool_0)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, tuple_0: tuple_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    str_0 = "_\r6Pa?{|)[~L`j"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    int_0 = -2654
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    str_0 = "kFiix2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    none_type_0 = None
    bytes_0 = b"\xa0\xf6E\x8eM\xe9\xe5\xfb\xbc\x89\x14\xa1\x18"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    str_0 = ",zcfszt~;KP-&T4\n "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    complex_0 = 2139.046531 - 3172.8j
    module_0.get_new_command(complex_0, complex_0)


def test_case_5162():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5163():
    int_0 = 1045
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    float_0 = 1038.3937
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    int_0 = 386
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    str_0 = "3I#V!}Z}P7bd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    complex_0 = 695.800674 + 2066.4412j
    bytes_0 = b"\xb1\xb3o3\xf3\x9a\xca\x1a"
    module_0.match(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    int_0 = -1206
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    bytes_0 = b"\xee:{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    bool_0 = False
    str_0 = 'cZ#gfq\n1#-W"ltSB'
    tuple_0 = (bool_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    str_0 = "Oah,;Rj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    set_0 = set()
    int_0 = 1987
    tuple_0 = (set_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_5174():
    pass


def test_case_5175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5176():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    str_0 = "?r,0b]4;&|4/"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    str_0 = "O1whaNA\x0bR8qLG"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


def test_case_5180():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5181():
    int_0 = -2135
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    bytes_0 = b"Tk\xac%{\xa7#\xe8\x11"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = ()
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    float_0 = -1556.64385
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    int_0 = 1431
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    int_0 = -2175
    int_1 = -101
    tuple_0 = (int_0, int_1)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    bytes_0 = b"\xc3z\xcf\xac\x89\x05\xa8\xe3\xae\xb1\n\xbc\x19\x1dc\xfdr\x92i"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    bytes_0 = b"\xe7l \xdd\xf8\x1d\x0b\xefs\x1aeF\x04\xc8\xe9"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    int_0 = 2721
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    float_0 = 3661.4227
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    float_0 = 2066.946805
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    int_0 = 2834
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    bytes_0 = b"\xd0X\xdb\xb8\x99\x11\x8e\xbco\xe1\x19"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_5193():
    pass


def test_case_5194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5195():
    str_0 = "!8o,^Emo@i7Bc<!("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    int_0 = 2171
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    bool_0 = False
    int_0 = -506
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    complex_0 = 3078.753 + 578j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    int_0 = 2775
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    float_0 = -2279.1329
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    float_0 = -2653.49496
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    bytes_0 = b"\xcc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    bytes_0 = b"\x9c\xa2\xafN\x88\xa1\xf2\x91\x18\xd6"
    bytes_1 = b"\x99\xe0\xea\x15\x9f\xd62\x81.T\xb3\xb3\x82\x18\x0c\xd7>w"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    bytes_0 = b"\xe0A\xdb\x96\x14\xfbP\xb4\x84W\x08\xff\x06G\xc4\xae\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    int_0 = 4450
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    int_0 = 909
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0, list_0)
    list_1 = [tuple_0, bool_0, tuple_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    str_0 = "z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    int_0 = -1669
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    bool_0 = False
    float_0 = 907.277
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    complex_0 = -3180 - 6585.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    int_0 = 1204
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    float_0 = 1483.37184
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    complex_0 = -140.9 - 99.179j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    str_0 = "#g=+dm#jcL/V\x0cEpO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    str_0 = "J3QA{{"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    bytes_0 = b"\xdfl\xb5\xb3\x85\x1b\xa9s~"
    dict_0 = {bytes_0: bytes_0}
    int_0 = 264
    bytes_1 = b"\xaa"
    list_0 = [bytes_0, dict_0]
    tuple_0 = (bytes_0, int_0, bytes_1, list_0)
    tuple_1 = (bytes_0, dict_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    bool_0 = True
    str_0 = "O*$m}J15u8\n"
    tuple_0 = (bool_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    int_0 = -2446
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    float_0 = -2561.81
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    str_0 = "+cgp"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    bytes_0 = b"\x0f<o\xb4\x04\x04\xdbmy\xe2U\xb1x\x7f^"
    dict_0 = {}
    tuple_0 = (dict_0, bytes_0)
    tuple_1 = (bytes_0, tuple_0, dict_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    int_0 = -686
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    int_0 = -4065
    bool_0 = False
    tuple_0 = (int_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    float_0 = -987.0
    str_0 = "\nMO6'z"
    bool_0 = True
    tuple_0 = (float_0, float_0, str_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    complex_0 = 2285.27999 + 1246.3023j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    bytes_0 = b"\x1a\x15\xd3%\x13\x9a>\x9e[3QGUO\xd3\x08\xb4\x05"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_5231():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5232():
    int_0 = 1212
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_5234():
    pass


def test_case_5235():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5236():
    complex_0 = 1194.1622 - 2156.9775j
    tuple_0 = (complex_0,)
    str_0 = "GlXk"
    dict_0 = {
        complex_0: complex_0,
        str_0: tuple_0,
        complex_0: complex_0,
        complex_0: str_0,
    }
    bool_0 = False
    tuple_1 = (tuple_0, dict_0, bool_0)
    bool_1 = True
    tuple_2 = (tuple_1, bool_1)
    list_0 = [tuple_2, bool_1]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    int_0 = 61
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    str_0 = "`ALI_Nx*a*^D#,0+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    int_0 = -883
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    int_0 = -81
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    int_0 = -456
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    int_0 = -1101
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    bool_0 = True
    float_0 = -1121.114445
    float_1 = 722.232
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: float_0, float_1: bool_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    object_0 = module_1.object()
    object_1 = module_1.object()
    dict_0 = {object_0: object_1, object_0: object_0}
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    str_0 = "Yu\x0b(D!"
    none_type_0 = None
    str_1 = "\\Ck~GyW]%4,LV."
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    str_0 = "FV#)wQ(2{"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    float_0 = 2555.46477
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    int_0 = 3060
    dict_0 = {}
    dict_1 = {int_0: dict_0, int_0: dict_0}
    module_0.match(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    int_0 = -3883
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    int_0 = 2703
    complex_0 = 1033.6513 - 585.5j
    module_0.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    bytes_0 = b"\x16?"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    bytes_0 = b"/1\xec"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    list_0 = []
    bool_0 = True
    str_0 = "]"
    tuple_0 = (list_0, list_0, bool_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    complex_0 = 635.8034 + 313.6835j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    bytes_0 = b"\xd5\x99"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5260():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5261():
    str_0 = "j0$%_'iy{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    int_0 = 2981
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    int_0 = 2608
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    str_0 = "*\"A'JD\niN\\_hOY"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    float_0 = -2110.0042
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    complex_0 = -1852.253 + 470.769j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    int_0 = 390
    object_0 = module_1.object()
    set_0 = {int_0, int_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    str_0 = '"p'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    int_0 = -94
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    str_0 = "t/]62ZNnqQJL:,`d y`p"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    str_0 = '"Ws\\U~yy]I'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    int_0 = 2977
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    float_0 = 2011.89188
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    str_0 = ",M{o"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    object_0 = module_1.object()
    module_1.object(**object_0)


def test_case_5276():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5277():
    bytes_0 = b"\x14o \xeb*\x1d\xa4\xdb\xef\xe8\xf2\x86X\xfb\xd8u\x9a\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    int_0 = -830
    tuple_0 = ()
    set_0 = {int_0, tuple_0, int_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    float_0 = -166.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    bytes_0 = b"\x981qI\xb5M\x9c\xdb\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    int_0 = -297
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    int_0 = 2278
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    float_0 = -2759.581678
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    float_0 = -570.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    int_0 = 1586
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    bytes_0 = b'\xc9+\x00"\xa8I6\x97Bn\t'
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    int_0 = -3285
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    int_0 = 400
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    list_0 = []
    complex_0 = -1659 - 1434j
    list_1 = [list_0, complex_0]
    module_0.get_new_command(list_1, complex_0)


def test_case_5294():
    pass


def test_case_5295():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5296():
    int_0 = -4450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    str_0 = 'x^<*,t"`n*\\%3r=N'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    bytes_0 = b"m&\xfc\xedN\xd0\xc0H\xea~%1IN\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    float_0 = 2793.0
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


def test_case_5302():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5303():
    bytes_0 = b"/\xd2W\xb3\x1e\xa9\\\x1fnF\x9c\x98\xda;K\x1c;Y\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [list_0, list_0, dict_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    int_0 = 1651
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    str_0 = "8);K\\\n"
    int_0 = 1750
    tuple_0 = (str_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    complex_0 = -781.01 + 179.77628j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    str_0 = "p_KAKzLM8_C/8(a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    str_0 = "#]tM4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    float_0 = 495.314
    module_0.match(float_0, float_0)


def test_case_5311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5312():
    str_0 = "?C^8+|Qh05g8r$z"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    str_0 = "$"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    str_0 = "n+Z0$5X#Syw'\r[rZ0vjJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    list_0 = []
    dict_0 = {}
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    bytes_0 = b"{\xb1\xfd\x01Z\n\xeeo\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    bytes_0 = b"\x17{\xcb\x12\x08\xc6\xc3\xb8\x8c\xf6\xa6\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    int_0 = 2722
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    int_0 = 1881
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    bytes_0 = b"\x1f\x96\xa5j\xcd%\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    int_0 = -1681
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    int_0 = 3244
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    int_0 = 878
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    complex_0 = 2401 + 1319.3352j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    int_0 = -1719
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    none_type_0 = None
    int_0 = 588
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    int_0 = 491
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    bytes_0 = b"^\x13PaG2\xbd\xc3\x91<\xee\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    bytes_0 = b"\xc3^U"
    set_0 = {bytes_0, bytes_0}
    dict_0 = {bytes_0: bytes_0, bytes_0: set_0}
    list_0 = [set_0, bytes_0, set_0, dict_0]
    list_1 = [list_0, dict_0, bytes_0, dict_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    str_0 = "i\tC,@\x0c,z\t<-j2[6\t%"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    int_0 = -958
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: tuple_0, int_0: int_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    int_0 = -1462
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    float_0 = -810.0
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    bytes_0 = b"\t\xb7\xb2\xe6w\xf8[\xfd\x9e\x9c\xda"
    module_0.match(bytes_0, bytes_0)


def test_case_5339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5340():
    int_0 = -1717
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    bytes_0 = b"u)\x13\x98\x0c(\xbbx^\xce\x06b\xad*`\x8e"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    float_0 = 1229.002301
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    bytes_0 = b"\xddrMTfY\xfa"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, bytes_0, set_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    str_0 = "Vvq92\tGZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    bytes_0 = b"\xdb\xc7K\x7f7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    str_0 = "aLyYk}-q_Z]'\nf\x0c?PF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    int_0 = 6601
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    str_0 = ",\x0bFq{nO"
    module_0.match(str_0, str_0)


def test_case_5351():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5352():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    int_0 = 3848
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    int_0 = 381
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    dict_0 = {}
    float_0 = 2669.7
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    str_0 = "N-MHD6mvNjy6)_O)[5"
    module_0.match(str_0, str_0)


def test_case_5358():
    dict_0 = {}
    list_0 = []
    object_0 = module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    float_0 = 1091.0
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (float_0, list_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    float_0 = 3292.09435
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    int_0 = 380
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    int_0 = -4756
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    bytes_0 = b"\xb1\x96\xf6\xca\t\x8c\x04\x15\x01@\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    float_0 = -5671.26745
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    int_0 = 1659
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    str_0 = "0:T^`~EpL\r"
    module_0.match(str_0, str_0)


def test_case_5367():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5368():
    float_0 = 1425.66017
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    bytes_0 = b"\xc6R4\xa9o\xb1"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0]
    tuple_0 = (bytes_0, list_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    str_0 = " ff2F`pJ~-C6U0R~dx(t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    complex_0 = 369.3716 + 49.859722j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    float_0 = 289.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    bytes_0 = b"\x96\xca\xa7\xc2\t&\xc7Z\x03\xa9\x9f.>"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    bytes_0 = b'"ZI5\xa6Q\x9e\xe5\x0e\x1a\xddJ#\xc3'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    int_0 = -1750
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    int_0 = 2540
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    float_0 = 2690.726
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    bytes_0 = b"Cft\xd9\xc9F"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    float_0 = -1198.321
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    int_0 = 390
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    int_0 = -547
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    bytes_0 = b"\xd1\x14(\x94\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    bytes_0 = b"~\xe4\x19\xa6\xa9\xfd\x95\x97\x8ep\x86Q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    bytes_0 = b"\n\x84*\x99z\xc8\xdb{"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    bytes_0 = b"\xfe\xbd\xbd\x1c\x1d\xfekc/\xae\x19"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = 3527
    list_0 = [dict_0, bytes_0, bytes_0, int_0]
    tuple_0 = (list_0, dict_0)
    list_1 = [tuple_0, bytes_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    float_0 = -808.014
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    int_0 = 1894
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    int_0 = 1977
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    float_0 = -2609.5526
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    bytes_0 = b"\xceL%>sh$"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    list_0 = []
    str_0 = "@'.N}s"
    dict_0 = {str_0: list_0, str_0: list_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    object_0 = module_1.object()
    bool_0 = True
    list_0 = [object_0, bool_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    bytes_0 = b"\xd05\xd6:\xcfE"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    float_0 = -4292.17089
    list_0 = [float_0]
    float_1 = -1799.0
    tuple_0 = (list_0, float_0, float_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    int_0 = -1591
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    complex_0 = -1966.52258 - 2021.354483j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    bytes_0 = b'\x8dMH\\v"M\x17'
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    object_0 = module_1.object()
    tuple_0 = ()
    list_0 = [object_0, object_0, object_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    bytes_0 = b"\x8bA\xc4\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    int_0 = 3005
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    str_0 = ""
    list_0 = [str_0, str_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    bytes_0 = b"v\xee\xfe\xf3\x97\x01"
    str_0 = "a[]V"
    bool_0 = False
    tuple_0 = (bytes_0, str_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    int_0 = 858
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    int_0 = 387
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    bytes_0 = b"^x\x05`\xd2K!;\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5409():
    pass


def test_case_5410():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5411():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    int_0 = 112
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    float_0 = 595.35069
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_5415():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5416():
    bool_0 = False
    str_0 = "I5u%?E1jRq$|W"
    str_1 = "_D4q}\\x;'"
    tuple_0 = (str_0, str_1, str_1)
    tuple_1 = (tuple_0,)
    tuple_2 = (bool_0, tuple_1)
    module_0.get_new_command(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    float_0 = 33.343
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: list_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    int_0 = 2192
    str_0 = "adh(z/dyXi"
    dict_0 = {int_0: int_0, int_0: int_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    int_0 = -2833
    str_0 = "4d\rJ@t(mk,(?)$@'\x0ctv"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    int_0 = -3620
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    int_0 = 1284
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    float_0 = -3897.958747
    list_0 = [float_0, float_0, float_0, float_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    int_0 = -5287
    bytes_0 = b"\x8arZy\xa9\x18\x83C\xc8\x85\x1a\xd1\xd8*)\x87Z\xbb7"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    float_0 = 823.32119
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    bytes_0 = b"\x17N\x16\r\x94\xc2\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5430():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5431():
    float_0 = 1480.970851
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    str_0 = 'H"vQ\tP_e'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    tuple_0 = ()
    bool_0 = True
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, bool_0: tuple_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    complex_0 = -2127.84004 + 462.0507j
    module_0.get_new_command(complex_0, complex_0)


def test_case_5435():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5436():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = " X0g5"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    bytes_0 = b"[??}v&^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    int_0 = 1511
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    float_0 = -603.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [bool_0]
    tuple_0 = (set_0, bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    bool_0 = True
    complex_0 = 1610.063 - 81.8j
    list_0 = [bool_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    bytes_0 = b"\xed\xa6\x1b\x850\xe1-H_\xbfw@VM"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: tuple_0}
    str_0 = "\t3 "
    tuple_1 = (dict_0, str_0)
    list_0 = [tuple_0, bool_0, tuple_1, tuple_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    bytes_0 = b"\xca\x0f.\x0b\xea|\xcf\xf8\xae\x1dN="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    float_0 = -10.3
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    float_0 = -636.18546
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    object_0 = module_1.object()
    set_0 = set()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: set_0}
    bool_0 = True
    str_0 = "%"
    tuple_0 = (dict_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    int_0 = -584
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    float_0 = -1209.23606
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    complex_0 = 908.31 + 1802j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    int_0 = 1888
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    float_0 = -2934.06
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    str_0 = "tP'dFXS%yHgH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    int_0 = -1381
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    int_0 = -1995
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    str_0 = "'"
    bytes_0 = b"\x9d\xe1\xc9\x8bDg"
    dict_0 = {str_0: bytes_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    str_0 = "P+/7"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    str_0 = "D;a^&6$H3!x{b\\lli"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    int_0 = 578
    module_0.match(int_0, int_0)


def test_case_5463():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5464():
    set_0 = set()
    list_0 = [set_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_5467():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5468():
    str_0 = "$p D\r"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    float_0 = 3188.507913
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    str_0 = "_vuue7l4=^"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    str_0 = "]03/I]Ba%0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    float_0 = 395.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    float_0 = -1734.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    int_0 = 4494
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    str_0 = ";HR"
    list_0 = [str_0, str_0, str_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    int_0 = 4612
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    bytes_0 = b"\x15/\x1f\x03\x81?\xc5\xcc\x98\xc4\xc1o\t"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


def test_case_5478():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5479():
    str_0 = "QmIA{\\X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    bytes_0 = b"\x98\x9e\xcaVK\xc9\x8b\xc3\xf9\xea\xf6m\xce\xccI\xebi\xd3\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


def test_case_5483():
    pass


def test_case_5484():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5485():
    int_0 = -950
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    str_0 = "nK^+j)1Qo9E7s."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    str_0 = "~V{Y+D\t?ybZw=w"
    set_0 = {str_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    bytes_0 = b"\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    int_0 = 349
    module_0.match(int_0, int_0)


def test_case_5491():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5492():
    str_0 = ""
    list_0 = [str_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    none_type_0 = None
    str_0 = "o2#Wu,l\r'YNdP4QCQ=L"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    int_0 = 212
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    str_0 = '"ubM'
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = '&")KDqVs\\\r7c\r2'
    str_1 = ""
    bytes_0 = b"\xf7\x99G\xb8&BY}\xf8 8g|\xeeb\xbaV\x18\xa1"
    bytes_1 = b'\xae^\xcf\xce\n\xd2\x01\x18\x13.n\xe3\xf7"\xb2i4\x96\xc1'
    dict_0 = {str_0: str_1, bytes_0: bytes_1, str_0: bool_0}
    tuple_0 = (list_0, str_0, dict_0, list_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    float_0 = -429.0633
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    float_0 = 1681.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    str_0 = " 87Ei`F~"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    float_0 = 958.75233
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    bytes_0 = b"|\x15-\x99\xf1\xb1\xca\xcb\xa1\x02iW\xdfu_&\xe6.\xd6P"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    float_0 = -5299.814506
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    float_0 = 2324.447
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    str_0 = "gT!5tR1\x0cU+^Wt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    float_0 = -828.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    bytes_0 = b'"U\xb99+\xf6\x83m\x10\x0fZ'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    int_0 = 4173
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    int_0 = -85
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


def test_case_5509():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5510():
    bytes_0 = b"\xa4\xa0\x82\xd8\x13\x8d\xc0]\x00\x15\x00\xbf\x7f\xe6\xce\x15"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_5511():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5512():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    bytes_0 = b"T\xaf/\x0e\xb8"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    str_0 = "9(\x0cCB?bIEQ,Cc\x0b?8"
    set_0 = {str_0, str_0}
    list_0 = []
    list_1 = [set_0, str_0, list_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    tuple_0 = ()
    int_0 = 29
    bytes_0 = b"\x00\xbeMZ\x10\x84\x07\xedM\xdd_\xda\xf7\x80\x92"
    int_1 = 2293
    tuple_1 = (tuple_0, int_0, bytes_0, int_1)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    bytes_0 = b" \xf3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    str_0 = "c?EXu=Ys\rKrJoeH"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    bytes_0 = b"\x10>\xe7"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    str_0 = "r!/n\t( 9O{4B_=c'-"
    set_0 = {str_0, str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    str_0 = "b-=}!}\nk-\r7{H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    float_0 = 2774.377601
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    float_0 = -765.413
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    list_0 = []
    complex_0 = 837 - 311.2j
    list_1 = [list_0, complex_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    bool_0 = True
    bytes_0 = b"B\xfe\xd9\x89\x83\xdb\xfc\xbc\x8d8>\xe6\xeb"
    set_0 = {bool_0, bool_0, bytes_0, bool_0}
    list_0 = [set_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    bytes_0 = b"}EX\xdc"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    bytes_0 = b"\xbaL\x12\x08\x04\xc1\x0bJ\x0c\xc1\xafN"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    bytes_0 = b"x\xf3\n:S\x10\xe5\x1446\x87\xb5\xec\x16\xa3"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    int_0 = -3262
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    int_0 = 2235
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    complex_0 = 1623.1484 + 3291j
    module_0.match(complex_0, complex_0)


def test_case_5533():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5534():
    str_0 = "LHGSN[h~0Y90"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    int_0 = -22
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_1: int_0, int_0: bool_0, bool_0: bool_0}
    tuple_0 = (int_0, bool_0, dict_0)
    tuple_1 = ()
    module_0.get_new_command(tuple_0, tuple_1)


def test_case_5536():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5537():
    tuple_0 = ()
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    int_0 = -2837
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    int_0 = 1119
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    str_0 = "W\\l'BYC=gU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    str_0 = "B\\PZ{vTw/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    int_0 = 1716
    bool_0 = True
    tuple_0 = (int_0, int_0, bool_0, bool_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    bytes_0 = b"\xd0Q\x87\xa8\x81\xc0\xab?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    str_0 = "dqNA=R^0MItyY\r"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    float_0 = 676.293879
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    str_0 = "_(pJYYXPB\\i?qPLmtB("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    bytes_0 = b"\x1a|\xab\x102_k\xd6X?\x04\x8a$\xfd\xc4:e\xeb"
    complex_0 = -1577.7067 + 1352.44421j
    module_0.get_new_command(bytes_0, complex_0)


def test_case_5548():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5549():
    bytes_0 = b"aMD%\xd0r\xb8\x05\xb45\xfe.\xc1\x10\x806\xa1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    str_0 = '[IH]v1"$K,GawPRS'
    tuple_0 = (set_0, str_0, set_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    bytes_0 = b"\x9fT\x132\x9e\x9e\xb1\xe3\xaa2\x145\x96\x8f\xe9z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    int_0 = -1879
    set_0 = {int_0, int_0, int_0, int_0}
    str_0 = 'vNZ]">['
    tuple_0 = (int_0, str_0)
    list_0 = []
    tuple_1 = (set_0, tuple_0, list_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    bytes_0 = b"^\xde>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    str_0 = "e #u'C>\\c&gO)UB`H"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    bytes_0 = b"\xb2\xc9\xa2\x1a\x9a\xd5!\xcf]\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    bytes_0 = b"\x1f\x96\x89\xee\xe9\xb1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    bytes_0 = b'g\xd7f\xfdM\xa0\xed\xb9"VI'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    int_0 = -1060
    set_0 = {int_0, int_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    bool_0 = True
    bytes_0 = b"R\xc5/\x0c*\xdf\x95\xc0\n*\t\xfcly|\x06\xfb"
    list_0 = [bytes_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    bool_0 = False
    bytes_0 = b"\xcb\xd3:+S\xe1l\xdeq\x18\xbdn"
    tuple_0 = (bool_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    str_0 = "q4I:GA`xR)Wdp3,IBA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    float_0 = -1598.0
    tuple_0 = (float_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    int_0 = -2573
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    int_0 = -1650
    list_0 = [int_0]
    str_0 = " ]4Vh&7l-,nxTqq:|M8]"
    tuple_0 = (list_0, str_0, list_0)
    bytes_0 = b"\xab\x81\xa9\xcf[\xf1T\x80\xcaXtF=\xe2\xa9\xbc\x00\xbd"
    bool_0 = False
    tuple_1 = (tuple_0, bytes_0, bool_0)
    list_1 = []
    bytes_1 = b"\xd3\xf9E\x88D\n\xecr"
    tuple_2 = (tuple_1, list_1, bytes_1)
    module_0.match(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    str_0 = "o3OHd`\rbPC`Pmx1\tdP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    complex_0 = -2363 + 271.744j
    bool_0 = True
    set_0 = {complex_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    str_0 = "H\r(c}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    str_0 = "y0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    str_0 = "?J<uS0=GU=5qhIK?Fglq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    str_0 = "/:KUF4\x0b}$"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    tuple_0 = ()
    object_0 = module_1.object()
    dict_0 = {
        tuple_0: object_0,
        object_0: object_0,
        tuple_0: tuple_0,
        object_0: object_0,
    }
    set_0 = {object_0, object_0}
    bool_0 = False
    tuple_1 = (dict_0, set_0, bool_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    bytes_0 = b"GH\xe3\xcd\xe5\x8d \x800 \xfa\x1d\x9a0\xb1\xce\xb1"
    bytes_1 = b"\xcb\xc2X\xd9z\xef\xde\x92\xa8\xb5J\xd3\xf4x\xd5\xdd\xdd"
    dict_0 = {bytes_0: bytes_1, bytes_1: bytes_0}
    bool_0 = False
    tuple_0 = (bytes_0, bytes_1, dict_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    bytes_0 = b"\xa3g\x03`\xc8\xa2F6\xcc"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    complex_0 = 3211 - 3395.324802j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    float_0 = 2682.39
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    bytes_0 = b"\xb6\xd9\x038}"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5582():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5583():
    str_0 = "WI`7CB!T/a5\n%<,;8J\r~"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5584():
    complex_0 = 311 + 1166.46j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    int_0 = 426
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    bytes_0 = b"\x8fS\xacx4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    bytes_0 = b"\x88\x8f~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    float_0 = 1657.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5590():
    float_0 = 2476.0
    object_0 = module_1.object()
    module_0.match(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5591():
    int_0 = -2124
    module_0.match(int_0, int_0)


def test_case_5592():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5593():
    bytes_0 = b"\xe4\xe6\xe8\xf8\x03\xbd\x8eh\xbb\xad\xc3\x0b\xcf\x1eNI\x1c\xc7\x87Y"
    int_0 = -2268
    tuple_0 = (bytes_0, int_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    str_0 = ">ypPTO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    bytes_0 = b"\xda\x11\xe9\xe9s\xe1\xef1\xeaC0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    str_0 = "_g{Rrx\ttq4/a\nq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    str_0 = "#{(KM:!D8(T6$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    float_0 = -2939.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    int_0 = -3835
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    float_0 = 1719.933
    module_0.get_new_command(float_0, float_0)


def test_case_5601():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5602():
    int_0 = -93
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    float_0 = 1562.485
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    bytes_0 = b"f\xffL\x86\x81\t \xc7\xc7Ns\x9b\x02\xeb\t\xe8\xe7\x13\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    float_0 = -2293.10867
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    int_0 = -1169
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    str_0 = "1WvspCX"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    bytes_0 = b'"\xbfy1W\xa3p\x1b'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5609():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5610():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_5611():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5612():
    float_0 = -16.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5613():
    bytes_0 = b"\x19\tf\r_\xec\xae\xc5\xdf6\xd3\xb8\x9f\xddd\xd3"
    str_0 = "C6O'+2_94iBV3Scr"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    str_0 = "|](gA[`xq 1*]\nui*5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    bytes_0 = b"\x02=\x9a\x14\x97)\x88$\x81}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    float_0 = 1495.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    str_0 = "uq0UZXXv1f\r'7)"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5619():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5620():
    str_0 = "$-Y|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    bytes_0 = b"&|\xdd\x18\xc4\xa8\x17\xc8\xb3\x84>,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    str_0 = "MH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    bytes_0 = b"\x10ykx(\x91\xb8J\xbc\x88\x15E,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    int_0 = -510
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    str_0 = "_ai\\F,cm*u<e1v}&~Pd"
    tuple_0 = ()
    tuple_1 = (str_0, str_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    int_0 = -5573
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5627():
    complex_0 = 3123.072 - 925.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    float_0 = 2156.839
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_5629():
    pass


def test_case_5630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5631():
    bool_0 = False
    str_0 = "J"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5632():
    int_0 = 421
    module_0.get_new_command(int_0, int_0)


def test_case_5633():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5634():
    int_0 = 2423
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


def test_case_5635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5636():
    str_0 = ". 2y5"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    bytes_0 = b"\x14\x98j]p\xea\x06\xc4.\x1b\xe8!|<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    int_0 = 2705
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5639():
    bytes_0 = b"\x7f1 \xdccxS\xf8+v\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5640():
    str_0 = "*>[Sxh5"
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5641():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5642():
    bytes_0 = b"\xb2=ar"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5643():
    bytes_0 = b"\x8b"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5644():
    float_0 = 2142.1
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5645():
    int_0 = -4495
    object_0 = module_1.object()
    set_0 = {int_0, object_0, int_0}
    list_0 = [object_0, set_0, set_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5646():
    int_0 = -2109
    module_0.get_new_command(int_0, int_0)


def test_case_5647():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5648():
    str_0 = "2P]e0FJ<zp"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5649():
    float_0 = 1832.96
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5650():
    int_0 = -622
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5651():
    bytes_0 = b"\xdc'\xe9\x0f\xdbj|V:\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5652():
    int_0 = -170
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5653():
    str_0 = "xjzg`62\r$:8:RoH'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5654():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5655():
    float_0 = -1733.6844
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5656():
    bool_0 = False
    str_0 = "AM"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5657():
    str_0 = "@;v&o[1*:697TG)x"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5658():
    bytes_0 = b""
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bool_0, bool_0}
    list_0 = [bytes_0, bytes_0, bool_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5659():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5660():
    str_0 = "8=;2#jI]*[,)RGc0"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5661():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5662():
    str_0 = "Wb2f0b\x0c>>;f0A"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_5663():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5664():
    bytes_0 = b"5\xdc>\x9fZ\xa6"
    int_0 = 1051
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5665():
    float_0 = -1761.584648
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5666():
    int_0 = 3496
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5667():
    str_0 = ";Ca33qaHx,q-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5668():
    bytes_0 = b"\xc3V\xc77N\xcf\xa0U\x04\xc9WP1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5669():
    int_0 = 792
    set_0 = {int_0, int_0}
    tuple_0 = (int_0, int_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5670():
    int_0 = -1820
    module_0.match(int_0, int_0)


def test_case_5671():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5672():
    bool_0 = True
    bytes_0 = b">j4QQ\x8d*\xb8L\xb1\xb5\x8e\x82e\xac\xa5\xf6\x8bL"
    float_0 = 1385.8935
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bytes_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5673():
    int_0 = -577
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5674():
    bytes_0 = b"\x9bG\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5675():
    bytes_0 = b"\xf5X\xaf\xdf\xc6\xa8T\x14av\x1c\xcd\x9e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bytes_1 = b"\xa0<#\xd3U\xe2\xd3\xcaS"
    module_0.get_new_command(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5676():
    bool_0 = True
    int_0 = -734
    tuple_0 = ()
    float_0 = 3740.262791
    tuple_1 = (bool_0, int_0, tuple_0, float_0)
    set_0 = {tuple_1, tuple_0}
    list_0 = [set_0, int_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5677():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5678():
    bytes_0 = b"\xf8\xe3\x19\xf2\x10\xcd\xf5\xfdd\x99u\x02m\x9a\xb5\xb6"
    complex_0 = 460.1305 + 5617.27j
    str_0 = "zZ>i\n Tfy"
    tuple_0 = (complex_0, complex_0, str_0)
    list_0 = [bytes_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5679():
    bytes_0 = b"L\xb0\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5680():
    bytes_0 = b"\xa48"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5681():
    bytes_0 = b"\xc0X\xda\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5682():
    str_0 = 'x`"%BY{.c"vN\n:m_Nr%V'
    module_0.get_new_command(str_0, str_0)


def test_case_5683():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5684():
    bytes_0 = b"\x929m\xe5\xa7O\xb9d\xc9\xd0\xbdi5\x00\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5685():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5686():
    int_0 = -1807
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5687():
    float_0 = -1452.725774
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5688():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5689():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5690():
    bool_0 = False
    str_0 = "iN&_J.iEP"
    tuple_0 = (bool_0, str_0)
    int_0 = -1423
    tuple_1 = (tuple_0, int_0, tuple_0, bool_0)
    module_0.get_new_command(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5691():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5692():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5693():
    bytes_0 = b";)\x94z\xad%\xa6\xae\xf4\x94\x95\xd9\xba\xc79,\x97\xaa\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5694():
    int_0 = -1118
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5695():
    str_0 = "\x0cEJVB35\n\\;`Z"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5696():
    bool_0 = True
    float_0 = -1388.95
    tuple_0 = (bool_0, float_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5697():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, bool_0)


def test_case_5698():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5699():
    bytes_0 = b"\x01\x12\x989\xe1^(\xe1tV\xa6)"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5700():
    str_0 = "jFA.\rc,0ga$"
    bool_0 = True
    list_0 = [str_0, str_0, str_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5701():
    float_0 = -991.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5702():
    int_0 = -1504
    int_1 = 712
    tuple_0 = (int_0, int_1, int_1)
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (list_0,)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5703():
    bytes_0 = b"jcHS\x1a\x19"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5704():
    str_0 = 'mJ8.+"\x0cbo'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5705():
    float_0 = -127.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5706():
    str_0 = "!a'C\x0bw+="
    none_type_0 = None
    module_0.match(none_type_0, str_0)


def test_case_5707():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5708():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5709():
    bool_0 = False
    str_0 = "'s>[],2"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5710():
    str_0 = "S "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5711():
    bytes_0 = b"g\x0c\x0bK\x17\x1f\x05\xff;\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5712():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5713():
    int_0 = -1600
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5714():
    bytes_0 = b"\x99\xba\x87t'\x81\x80m\xd1\x1e\x97@\x92\xeb\x8c\x0e\xb3\x12\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5715():
    int_0 = -1808
    list_0 = [int_0, int_0, int_0]
    list_1 = [int_0, list_0]
    tuple_0 = (list_1, int_0)
    list_2 = [tuple_0, list_0]
    module_0.get_new_command(list_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5716():
    str_0 = "X^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5717():
    int_0 = 270
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5718():
    float_0 = 2649.375785
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5719():
    str_0 = "=FZs'uR@P$ .zc?kt_"
    bytes_0 = b"S\xc6\xc0\xdc\x11\x10,0T\xb1\x8a0v\x07\xa1\xf1\xe1"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5720():
    bytes_0 = b"z\xfd\xa7'\x8a\xfaG\xbfR\xa1\x05\x01H\xf5\x80^`\xe1\x99\x05"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5721():
    str_0 = "Zm-`bxcbx};$B"
    str_1 = "7k_g.nr|7?pwVT"
    str_2 = "I&nEQ(\x0c"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5722():
    int_0 = -147
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5723():
    str_0 = "U\t<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5724():
    str_0 = 'iqQzk[4C&"v'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5725():
    str_0 = "Cw<J4aiy&Xq)H~jO<@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5726():
    str_0 = "\x0cf-a4P;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5727():
    str_0 = "u6PSn*Y}\x0b\r\n"
    int_0 = 805
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5728():
    bytes_0 = b"BPtj\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5729():
    str_0 = '\t3Y#,em"N\nq \\'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5730():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5731():
    int_0 = -2269
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5732():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    bytes_0 = b"6\x85*\xb2\xaa"
    tuple_1 = (tuple_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5733():
    float_0 = 2974.088143
    module_0.match(float_0, float_0)


def test_case_5734():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5735():
    str_0 = "@nVbmqx1dElF@Xw;d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5736():
    str_0 = "&l9QFV~[-\tG%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5737():
    bytes_0 = b"\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5738():
    str_0 = "*I8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5739():
    float_0 = -3794.5448
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5740():
    int_0 = -41
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5741():
    bool_0 = True
    str_0 = "e"
    tuple_0 = (bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5742():
    none_type_0 = None
    float_0 = -4444.3
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5743():
    str_0 = "*RExP\n+f"
    set_0 = set()
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5744():
    bytes_0 = b"\xf8\x859\x9c\xd8\xef\xcca=l\xb6\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5745():
    int_0 = 2532
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5746():
    str_0 = "cfm<\niSY;2NO4sY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5747():
    int_0 = 4946
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5748():
    int_0 = -3080
    int_1 = 1135
    set_0 = {int_0, int_0, int_1, int_1}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5749():
    int_0 = -3574
    bool_0 = False
    list_0 = [int_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5750():
    int_0 = -1450
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5751():
    bytes_0 = b"}\xd3\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5752():
    bytes_0 = b"wVMB\x04\xb1\xd6=\x91\x97F\x82.6\xb1\x0b\xc1\x0b \xe2"
    int_0 = -1575
    tuple_0 = (int_0, bytes_0)
    module_0.match(bytes_0, tuple_0)


def test_case_5753():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5754():
    int_0 = -667
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5755():
    int_0 = 3277
    list_0 = []
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5756():
    int_0 = 3429
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5757():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5758():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5759():
    bytes_0 = b"\xa2\x91/t\x04\xd19K`\x87\xa5>]\x01\xa0K\xf5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5760():
    str_0 = "M;B\n6Sn?-Ms\rHw"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5761():
    list_0 = []
    set_0 = set()
    list_1 = [list_0, set_0, list_0, set_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5762():
    list_0 = []
    list_1 = []
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5763():
    complex_0 = 85.35 - 312.1j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5764():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5765():
    str_0 = "P%jE;\x0c8lT%MT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5766():
    bool_0 = False
    str_0 = "(~"
    bool_1 = False
    tuple_0 = (str_0, bool_1, str_0)
    list_0 = [bool_0, tuple_0]
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5767():
    bytes_0 = b"\x9aB\xdf\x13\x83\x7fK\x97&\r\xd6_=E\xe2Ma\xfb\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5768():
    int_0 = 1693
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5769():
    complex_0 = 1531.66 + 2375.05j
    list_0 = [complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5770():
    bool_0 = True
    int_0 = 1045
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5771():
    float_0 = 2401.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5772():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5773():
    int_0 = 2281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5774():
    bytes_0 = b"\xd1\t\xfb\xc6D:\xfd\xce\x1f\x8e\xf0\x1d5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5775():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5776():
    float_0 = -10.59777
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5777():
    bytes_0 = b"\x1aV-i"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5778():
    int_0 = -696
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5779():
    int_0 = -2396
    tuple_0 = (int_0,)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5780():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5781():
    float_0 = 1708.5267
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5782():
    int_0 = -514
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5783():
    str_0 = "zf>1't6Mm2"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5784():
    float_0 = 1254.195649
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5785():
    int_0 = 923
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5786():
    bool_0 = False
    int_0 = 1741
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5787():
    str_0 = "b*k%K~Ht"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5788():
    bytes_0 = b"z\xb1M\x00\xdaS&\x03\n\xdf\x82o\x00I\xd2Y"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_5789():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5790():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5791():
    bytes_0 = b"]d\xee\x8d4\xd7b\x1c\x03DQ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5792():
    object_0 = module_1.object()
    complex_0 = 289.99103 + 57.479j
    tuple_0 = (object_0, complex_0)
    bytes_0 = b"g\xcc\xa8\x87\x05\xfb\xd7\x0e\xeb\xae\xa7\xe6H"
    set_0 = {tuple_0, bytes_0, complex_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5793():
    int_0 = -3655
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5794():
    bytes_0 = b"\x8f\x88CY;\x97n\x8e\x12\xa0o\xa6\xfb\x82\x00x"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5795():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5796():
    str_0 = "q7C"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5797():
    bytes_0 = b"V\xd6\x97"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5798():
    float_0 = 1311.0
    set_0 = {float_0, float_0, float_0, float_0}
    bytes_0 = b"?\xd0\x88\xf1\x1e\xb2m|`\xdc\xc6(\x93;\x04\xa6O\x86\xbc"
    bool_0 = True
    tuple_0 = (set_0, bytes_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5799():
    str_0 = " X Dx>h$YEO\nl3V"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5800():
    str_0 = "k(^_l*d4<=..L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5801():
    bytes_0 = b"\xaa\xdbd\xd0X"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5802():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5803():
    float_0 = -5090.86258
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5804():
    float_0 = -408.3
    list_0 = [float_0, float_0]
    str_0 = " WuAQPVyI&SQ@H\r'"
    dict_0 = {str_0: list_0, str_0: float_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5805():
    int_0 = -1831
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5806():
    str_0 = "B7M\\dI>?H` As07."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5807():
    bytes_0 = b"H\xf6\x99\x9eq\xfd\xc7\x19\xf96\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5808():
    str_0 = "Gi9.K!xB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5809():
    str_0 = "?0&;t+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5810():
    int_0 = 713
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5811():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    list_1 = [object_0, dict_0, dict_0]
    module_0.get_new_command(list_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5812():
    bytes_0 = b"\x1fs"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5813():
    complex_0 = 1987.5991 + 1892j
    list_0 = [complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5814():
    float_0 = 783.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5815():
    float_0 = 4339.3576
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5816():
    str_0 = "3v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5817():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5818():
    bytes_0 = b"\x1b\xa8\xfc O_\xc2\xdc\xff\x8d\xd4\xf8\x1a\xcf\xd5%\x99iFJ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5819():
    str_0 = "'f*\x0b~par;l=\\;6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5820():
    float_0 = 1201.28828
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


def test_case_5821():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5822():
    int_0 = -3546
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5823():
    int_0 = 58
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5824():
    str_0 = "P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5825():
    float_0 = 4540.2123
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5826():
    bytes_0 = b"m\xdf\xb1\xc7\xadu\xf4'\xdc\x96\xda9g"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5827():
    str_0 = "|hC*gwO<$oz`#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5828():
    str_0 = "sgCEbUpG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5829():
    float_0 = 678.688
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_5830():
    bytes_0 = b"\x16\xce\x826\xa3?\x9aJ\xf6\xc0"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5831():
    complex_0 = 2101.24 - 2395.46372j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5832():
    int_0 = -5
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5833():
    bytes_0 = b"q\x1bR\x91\x97\xee\xdc3\x8e\xdb\x85\xe6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5834():
    float_0 = -3136.21
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5835():
    int_0 = 726
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5836():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5837():
    float_0 = -650.846846
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5838():
    bytes_0 = b"\x7f\xfe\xb8-\xa8\x93\x9f\x87\n\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5839():
    bytes_0 = b"\x04[\xde\xa6\xe5\xc3i\xf4\x14\xb9\xa5\x08\x81\r\xf0a\t\x86\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5840():
    bytes_0 = b"\x83\x84\xc0Ir\xac\x8b\xf5km\x14I-^p-\x04\xc7\t:"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5841():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5842():
    bytes_0 = b"\x87S\x902\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5843():
    bytes_0 = b"\xe0\xf9\x98\xcb\xefP"
    module_0.match(bytes_0, bytes_0)


def test_case_5844():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5845():
    int_0 = -381
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5846():
    float_0 = -3699.048048
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5847():
    str_0 = 'kr5KTl.;\\=Ndw_\x0cz"'
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5848():
    bytes_0 = b">\x1d\x80\x9f]m9\x9b\x87\x0c\xc1\x9e[5;c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5849():
    float_0 = 3628.645
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5850():
    int_0 = -1376
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5851():
    float_0 = 3417.185543
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5852():
    float_0 = -643.968106
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5853():
    complex_0 = -1489.592 + 1133.9911j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5854():
    list_0 = []
    str_0 = '[|l["'
    tuple_0 = (list_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5855():
    bytes_0 = b"O\xe5y"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5856():
    str_0 = "fh \x0b7%>S&2nei"
    module_0.get_new_command(str_0, str_0)


def test_case_5857():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5858():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5859():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5860():
    complex_0 = -3489.7 + 2996.191j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5861():
    str_0 = "=1;TC{ <J$j\r]1t$F[qr"
    bool_0 = True
    float_0 = 1688.78032
    set_0 = {str_0, str_0, str_0, float_0}
    tuple_0 = (str_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5862():
    str_0 = ">vH^\\ E"
    module_0.get_new_command(str_0, str_0)


def test_case_5863():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5864():
    bytes_0 = b"'.2\xc4\x88\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5865():
    float_0 = -852.0528
    float_1 = 287.622921
    dict_0 = {float_0: float_0, float_1: float_1}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5866():
    int_0 = 1215
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5867():
    str_0 = "\\Zu*S|C3>j^]q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5868():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0, bool_0, bool_0)
    str_0 = "VB-|B62"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5869():
    complex_0 = 2267 + 652.027167j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5870():
    bytes_0 = b"\xcf\x89;^\xea\xec(\x05\x90h'&=\x1e\xc615\x8e\xb2~"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5871():
    float_0 = 2210.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5872():
    int_0 = -1479
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5873():
    int_0 = 457
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5874():
    float_0 = 1839.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5875():
    bytes_0 = b"\xa9\x1a\x8dp%zr\xa5\xe88\x0f\x14T\xc4d"
    bool_0 = False
    bool_1 = False
    list_0 = [bool_1]
    tuple_0 = (bytes_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5876():
    float_0 = -4688.66
    str_0 = "HN,p<Uo"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5877():
    bytes_0 = b"U\x17\xe7\x9d=\xedg\x99\x93\xb2\x7fM"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5878():
    bytes_0 = b"\xc1\rt\tI'#\xc3\xeaK\xf3o\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5879():
    int_0 = 1990
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5880():
    bytes_0 = b"\x05\xb0\xaf\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5881():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5882():
    str_0 = '%n&("{\x0c_BdD?\nlEYvKW'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5883():
    str_0 = "S"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5884():
    int_0 = -1859
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5885():
    int_0 = -3945
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5886():
    str_0 = "a&!b"
    str_1 = "A$^"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


def test_case_5887():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5888():
    str_0 = "=+|:SK$^@7h\n}AxX"
    module_0.get_new_command(str_0, str_0)


def test_case_5889():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5890():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5891():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5892():
    str_0 = "YhG,rF"
    bytes_0 = b"k\x88"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5893():
    str_0 = "dY@2<MN#VZ+:eYxjO]U"
    module_0.match(str_0, str_0)


def test_case_5894():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5895():
    str_0 = "R^@Lt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5896():
    int_0 = 254
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5897():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5898():
    bytes_0 = b"}\xa34G~\xf1\xa36\xbd\x9fjd?K"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5899():
    int_0 = -225
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5900():
    bytes_0 = b"h\xd7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5901():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5902():
    int_0 = 4101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5903():
    int_0 = -983
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5904():
    bytes_0 = b"+\x82?\xee\xc2\x89\xa5\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5905():
    float_0 = 140.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5906():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, object_0)


def test_case_5907():
    pass


def test_case_5908():
    pass


def test_case_5909():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5910():
    int_0 = -746
    float_0 = 2139.0
    str_0 = ")hp67N{Fd*"
    tuple_0 = (int_0, str_0)
    tuple_1 = (float_0, float_0, str_0, tuple_0)
    module_0.get_new_command(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5911():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5912():
    none_type_0 = None
    bool_0 = False
    int_0 = -4391
    tuple_0 = (bool_0, int_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5913():
    str_0 = "{Mysr>Og%W>HB#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5914():
    bytes_0 = b"\xb4W(\x85\xeb\xf2\xae\xed\x85\xe8}\xe9,\x9a\xf7\xb0o+\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5915():
    float_0 = 2117.027
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5916():
    int_0 = 4836
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5917():
    int_0 = 1068
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5918():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5919():
    bool_0 = False
    str_0 = ",S+&"
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5920():
    bytes_0 = b"?\t\n\xb6Qki4\x7f\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5921():
    int_0 = 960
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5922():
    float_0 = -960.0
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5923():
    bytes_0 = b"l\x84\xd1\xe8\x9d&\x83\xce\x85"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5924():
    int_0 = 887
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5925():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5926():
    int_0 = 1946
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5927():
    float_0 = 100.826047
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5928():
    str_0 = "r|cl80F4\t;"
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5929():
    complex_0 = -1620.4151 + 2739.876j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5930():
    int_0 = 2209
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5931():
    str_0 = "0Ey\x0ct>\rWo&"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


def test_case_5932():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5933():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5934():
    bytes_0 = b"\x08\x19\xaf\x18\xa4\xad\x96\xd3_*d\x0f"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5935():
    float_0 = 1397.9
    module_0.get_new_command(float_0, float_0)


def test_case_5936():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5937():
    str_0 = "NE\n.2s"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5938():
    str_0 = "5KkA_'}Z6e8BpI$h!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5939():
    list_0 = []
    list_1 = [list_0, list_0]
    int_0 = -745
    module_0.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5940():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5941():
    int_0 = -61
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5942():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5943():
    float_0 = 251.67
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5944():
    str_0 = "BW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5945():
    str_0 = "%\x0baOOu|KtGWoxu>eb7f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5946():
    str_0 = "#dojU_d\rz4hZ#J)#Ok"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5947():
    int_0 = -2191
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5948():
    int_0 = -314
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5949():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5950():
    int_0 = 1588
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5951():
    float_0 = 1968.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_5952():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5953():
    complex_0 = 432.16439 - 2955j
    int_0 = 1068
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5954():
    bytes_0 = b"at\xb9\x87"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5955():
    float_0 = 1471.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5956():
    bool_0 = True
    int_0 = 1512
    set_0 = {bool_0, int_0, int_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5957():
    str_0 = "N;:HL&Y\tmHYhXiH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5958():
    int_0 = -243
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5959():
    str_0 = "eQO13c/xOUVG5t2#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5960():
    int_0 = -2432
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5961():
    float_0 = -2725.372
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5962():
    int_0 = 216
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5963():
    bytes_0 = b"\xd55\xb4\xef\x07i8\xa9`\x14\x14\xac"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5964():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    int_0 = 1324
    tuple_0 = (object_0, dict_0, dict_0, int_0)
    list_0 = [tuple_0, int_0, int_0]
    bool_0 = False
    tuple_1 = (list_0, tuple_0, tuple_0, bool_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5965():
    int_0 = 1667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5966():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_5967():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5968():
    str_0 = "?qet]<g+<*3O?_|^"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5969():
    dict_0 = {}
    int_0 = -2240
    tuple_0 = (dict_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5970():
    int_0 = 2524
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5971():
    int_0 = 2961
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5972():
    int_0 = -316
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5973():
    int_0 = -603
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_5974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5975():
    float_0 = 6043.284143
    module_0.get_new_command(float_0, float_0)
