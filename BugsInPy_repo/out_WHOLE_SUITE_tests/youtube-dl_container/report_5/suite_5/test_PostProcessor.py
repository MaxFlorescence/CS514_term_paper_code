# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import PostProcessor as module_0
import utils as module_1


def test_case_0():
    str_0 = "l7WLCr!cV5) "
    f_fmpeg_post_processor_0 = module_0.FFmpegPostProcessor()
    assert (
        f"{type(f_fmpeg_post_processor_0).__module__}.{type(f_fmpeg_post_processor_0).__qualname__}"
        == "PostProcessor.FFmpegPostProcessor"
    )
    f_fmpeg_extract_audio_p_p_0 = module_0.FFmpegExtractAudioPP(nopostoverwrites=str_0)
    assert (
        f"{type(f_fmpeg_extract_audio_p_p_0).__module__}.{type(f_fmpeg_extract_audio_p_p_0).__qualname__}"
        == "PostProcessor.FFmpegExtractAudioPP"
    )
    var_0 = f_fmpeg_extract_audio_p_p_0.detect_executables()
    f_fmpeg_embed_subtitle_p_p_0 = module_0.FFmpegEmbedSubtitlePP(var_0)
    bool_0 = False
    with pytest.raises(module_0.AudioConversionError):
        f_fmpeg_extract_audio_p_p_0.run_ffmpeg(
            f_fmpeg_post_processor_0, bool_0, bool_0, f_fmpeg_extract_audio_p_p_0
        )


def test_case_1():
    str_0 = "<7\x0bw_$^s\\C\tH/a_"
    f_fmpeg_extract_audio_p_p_0 = module_0.FFmpegExtractAudioPP(preferredcodec=str_0)
    assert (
        f"{type(f_fmpeg_extract_audio_p_p_0).__module__}.{type(f_fmpeg_extract_audio_p_p_0).__qualname__}"
        == "PostProcessor.FFmpegExtractAudioPP"
    )
    f_fmpeg_extract_audio_p_p_1 = module_0.FFmpegExtractAudioPP(
        preferredquality=f_fmpeg_extract_audio_p_p_0
    )
    var_0 = f_fmpeg_extract_audio_p_p_0.set_downloader(f_fmpeg_extract_audio_p_p_1)
    f_fmpeg_metadata_p_p_0 = module_0.FFmpegMetadataPP()
    with pytest.raises(module_0.AudioConversionError):
        f_fmpeg_extract_audio_p_p_1.run_ffmpeg(
            f_fmpeg_extract_audio_p_p_1,
            f_fmpeg_extract_audio_p_p_0,
            str_0,
            f_fmpeg_metadata_p_p_0,
        )


def test_case_2():
    f_fmpeg_video_convertor_0 = module_0.FFmpegVideoConvertor()
    assert (
        f"{type(f_fmpeg_video_convertor_0).__module__}.{type(f_fmpeg_video_convertor_0).__qualname__}"
        == "PostProcessor.FFmpegVideoConvertor"
    )
    none_type_0 = None
    f_fmpeg_post_processor_error_0 = module_0.FFmpegPostProcessorError(none_type_0)
    f_fmpeg_extract_audio_p_p_0 = module_0.FFmpegExtractAudioPP(
        preferredcodec=none_type_0
    )
    assert (
        f"{type(f_fmpeg_extract_audio_p_p_0).__module__}.{type(f_fmpeg_extract_audio_p_p_0).__qualname__}"
        == "PostProcessor.FFmpegExtractAudioPP"
    )
    with pytest.raises(module_1.PostProcessingError):
        f_fmpeg_extract_audio_p_p_0.get_audio_codec(f_fmpeg_extract_audio_p_p_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    f_fmpeg_embed_subtitle_p_p_0 = module_0.FFmpegEmbedSubtitlePP()
    assert (
        f"{type(f_fmpeg_embed_subtitle_p_p_0).__module__}.{type(f_fmpeg_embed_subtitle_p_p_0).__qualname__}"
        == "PostProcessor.FFmpegEmbedSubtitlePP"
    )
    f_fmpeg_embed_subtitle_p_p_0.run_ffmpeg(
        f_fmpeg_embed_subtitle_p_p_0,
        f_fmpeg_embed_subtitle_p_p_0,
        f_fmpeg_embed_subtitle_p_p_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    f_fmpeg_metadata_p_p_0 = module_0.FFmpegMetadataPP()
    assert (
        f"{type(f_fmpeg_metadata_p_p_0).__module__}.{type(f_fmpeg_metadata_p_p_0).__qualname__}"
        == "PostProcessor.FFmpegMetadataPP"
    )
    f_fmpeg_metadata_p_p_0.run_ffmpeg(
        f_fmpeg_metadata_p_p_0, f_fmpeg_metadata_p_p_0, f_fmpeg_metadata_p_p_0
    )


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = -179.22624742959303
    f_fmpeg_post_processor_0 = module_0.FFmpegPostProcessor()
    assert (
        f"{type(f_fmpeg_post_processor_0).__module__}.{type(f_fmpeg_post_processor_0).__qualname__}"
        == "PostProcessor.FFmpegPostProcessor"
    )
    var_0 = f_fmpeg_post_processor_0.run(float_0)
    f_fmpeg_extract_audio_p_p_0 = module_0.FFmpegExtractAudioPP(
        preferredcodec=f_fmpeg_post_processor_0, preferredquality=var_0
    )
    assert (
        f"{type(f_fmpeg_extract_audio_p_p_0).__module__}.{type(f_fmpeg_extract_audio_p_p_0).__qualname__}"
        == "PostProcessor.FFmpegExtractAudioPP"
    )
    var_0.run(f_fmpeg_extract_audio_p_p_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    f_fmpeg_metadata_p_p_0 = module_0.FFmpegMetadataPP()
    assert (
        f"{type(f_fmpeg_metadata_p_p_0).__module__}.{type(f_fmpeg_metadata_p_p_0).__qualname__}"
        == "PostProcessor.FFmpegMetadataPP"
    )
    dict_0 = {
        f_fmpeg_metadata_p_p_0: f_fmpeg_metadata_p_p_0,
        f_fmpeg_metadata_p_p_0: f_fmpeg_metadata_p_p_0,
        f_fmpeg_metadata_p_p_0: f_fmpeg_metadata_p_p_0,
        f_fmpeg_metadata_p_p_0: f_fmpeg_metadata_p_p_0,
    }
    f_fmpeg_metadata_p_p_0.run(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    f_fmpeg_metadata_p_p_0 = module_0.FFmpegMetadataPP()
    assert (
        f"{type(f_fmpeg_metadata_p_p_0).__module__}.{type(f_fmpeg_metadata_p_p_0).__qualname__}"
        == "PostProcessor.FFmpegMetadataPP"
    )
    dict_0 = {
        f_fmpeg_metadata_p_p_0: f_fmpeg_metadata_p_p_0,
        f_fmpeg_metadata_p_p_0: f_fmpeg_metadata_p_p_0,
        f_fmpeg_metadata_p_p_0: f_fmpeg_metadata_p_p_0,
        f_fmpeg_metadata_p_p_0: f_fmpeg_metadata_p_p_0,
    }
    f_fmpeg_metadata_p_p_0.run(dict_0)


def test_case_8():
    none_type_0 = None
    f_fmpeg_extract_audio_p_p_0 = module_0.FFmpegExtractAudioPP(
        nopostoverwrites=none_type_0
    )
    assert (
        f"{type(f_fmpeg_extract_audio_p_p_0).__module__}.{type(f_fmpeg_extract_audio_p_p_0).__qualname__}"
        == "PostProcessor.FFmpegExtractAudioPP"
    )
    f_fmpeg_post_processor_0 = module_0.FFmpegPostProcessor()
    var_0 = f_fmpeg_extract_audio_p_p_0.set_downloader(f_fmpeg_extract_audio_p_p_0)
    with pytest.raises(module_1.PostProcessingError):
        f_fmpeg_extract_audio_p_p_0.get_audio_codec(f_fmpeg_post_processor_0)
