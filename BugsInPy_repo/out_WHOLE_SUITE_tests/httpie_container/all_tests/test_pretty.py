# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import pretty as module_0
import codecs as module_1
import pygments.filters as module_2
import pygments.plugin as module_3
import pygments.util as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    h_t_t_p_lexer_0 = module_0.HTTPLexer()
    assert (
        f"{type(h_t_t_p_lexer_0).__module__}.{type(h_t_t_p_lexer_0).__qualname__}"
        == "pretty.HTTPLexer"
    )
    assert h_t_t_p_lexer_0.options == {}
    assert h_t_t_p_lexer_0.stripnl is True
    assert h_t_t_p_lexer_0.stripall is False
    assert h_t_t_p_lexer_0.ensurenl is True
    assert h_t_t_p_lexer_0.tabsize == 0
    assert h_t_t_p_lexer_0.encoding == "guess"
    assert h_t_t_p_lexer_0.filters == []
    assert module_0.DEFAULT_STYLE == "solarized"
    assert module_0.AVAILABLE_STYLES == [
        "solarized",
        "abap",
        "algol",
        "algol_nu",
        "arduino",
        "autumn",
        "bw",
        "borland",
        "coffee",
        "colorful",
        "default",
        "dracula",
        "emacs",
        "friendly_grayscale",
        "friendly",
        "fruity",
        "github-dark",
        "gruvbox-dark",
        "gruvbox-light",
        "igor",
        "inkpot",
        "lightbulb",
        "lilypond",
        "lovelace",
        "manni",
        "material",
        "monokai",
        "murphy",
        "native",
        "nord-darker",
        "nord",
        "one-dark",
        "paraiso-dark",
        "paraiso-light",
        "pastie",
        "perldoc",
        "rainbow_dash",
        "rrt",
        "sas",
        "solarized-dark",
        "solarized-light",
        "staroffice",
        "stata-dark",
        "stata-light",
        "tango",
        "trac",
        "vim",
        "vs",
        "xcode",
        "zenburn",
    ]
    assert module_0.HTTPLexer.name == "HTTP"
    assert module_0.HTTPLexer.aliases == ["http"]
    assert module_0.HTTPLexer.filenames == ["*.http"]
    assert len(module_0.HTTPLexer.tokens) == 1
    module_1.getwriter(h_t_t_p_lexer_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_2.get_all_filters()
    var_0.fstring_rules(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_3.find_plugin_lexers()
    var_0.get_background_style_defs()


@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_3.find_plugin_filters()
    var_1 = module_4.docstring_headline(var_0)
    module_0.PrettyHttp(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_3.find_plugin_lexers()
    h_t_t_p_lexer_0 = module_0.HTTPLexer()
    assert (
        f"{type(h_t_t_p_lexer_0).__module__}.{type(h_t_t_p_lexer_0).__qualname__}"
        == "pretty.HTTPLexer"
    )
    assert h_t_t_p_lexer_0.options == {}
    assert h_t_t_p_lexer_0.stripnl is True
    assert h_t_t_p_lexer_0.stripall is False
    assert h_t_t_p_lexer_0.ensurenl is True
    assert h_t_t_p_lexer_0.tabsize == 0
    assert h_t_t_p_lexer_0.encoding == "guess"
    assert h_t_t_p_lexer_0.filters == []
    assert module_0.DEFAULT_STYLE == "solarized"
    assert module_0.AVAILABLE_STYLES == [
        "solarized",
        "abap",
        "algol",
        "algol_nu",
        "arduino",
        "autumn",
        "bw",
        "borland",
        "coffee",
        "colorful",
        "default",
        "dracula",
        "emacs",
        "friendly_grayscale",
        "friendly",
        "fruity",
        "github-dark",
        "gruvbox-dark",
        "gruvbox-light",
        "igor",
        "inkpot",
        "lightbulb",
        "lilypond",
        "lovelace",
        "manni",
        "material",
        "monokai",
        "murphy",
        "native",
        "nord-darker",
        "nord",
        "one-dark",
        "paraiso-dark",
        "paraiso-light",
        "pastie",
        "perldoc",
        "rainbow_dash",
        "rrt",
        "sas",
        "solarized-dark",
        "solarized-light",
        "staroffice",
        "stata-dark",
        "stata-light",
        "tango",
        "trac",
        "vim",
        "vs",
        "xcode",
        "zenburn",
    ]
    assert module_0.HTTPLexer.name == "HTTP"
    assert module_0.HTTPLexer.aliases == ["http"]
    assert module_0.HTTPLexer.filenames == ["*.http"]
    assert len(module_0.HTTPLexer.tokens) == 1
    var_0.get()


@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_3.find_plugin_filters()
    h_t_t_p_lexer_0 = module_0.HTTPLexer()
    assert (
        f"{type(h_t_t_p_lexer_0).__module__}.{type(h_t_t_p_lexer_0).__qualname__}"
        == "pretty.HTTPLexer"
    )
    assert h_t_t_p_lexer_0.options == {}
    assert h_t_t_p_lexer_0.stripnl is True
    assert h_t_t_p_lexer_0.stripall is False
    assert h_t_t_p_lexer_0.ensurenl is True
    assert h_t_t_p_lexer_0.tabsize == 0
    assert h_t_t_p_lexer_0.encoding == "guess"
    assert h_t_t_p_lexer_0.filters == []
    assert module_0.DEFAULT_STYLE == "solarized"
    assert module_0.AVAILABLE_STYLES == [
        "solarized",
        "abap",
        "algol",
        "algol_nu",
        "arduino",
        "autumn",
        "bw",
        "borland",
        "coffee",
        "colorful",
        "default",
        "dracula",
        "emacs",
        "friendly_grayscale",
        "friendly",
        "fruity",
        "github-dark",
        "gruvbox-dark",
        "gruvbox-light",
        "igor",
        "inkpot",
        "lightbulb",
        "lilypond",
        "lovelace",
        "manni",
        "material",
        "monokai",
        "murphy",
        "native",
        "nord-darker",
        "nord",
        "one-dark",
        "paraiso-dark",
        "paraiso-light",
        "pastie",
        "perldoc",
        "rainbow_dash",
        "rrt",
        "sas",
        "solarized-dark",
        "solarized-light",
        "staroffice",
        "stata-dark",
        "stata-light",
        "tango",
        "trac",
        "vim",
        "vs",
        "xcode",
        "zenburn",
    ]
    assert module_0.HTTPLexer.name == "HTTP"
    assert module_0.HTTPLexer.aliases == ["http"]
    assert module_0.HTTPLexer.filenames == ["*.http"]
    assert len(module_0.HTTPLexer.tokens) == 1
    var_0.headers(var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.PrettyHttp(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "solarized"
    none_type_0 = None
    pretty_http_0 = module_0.PrettyHttp(str_0)
    assert (
        f"{type(pretty_http_0).__module__}.{type(pretty_http_0).__qualname__}"
        == "pretty.PrettyHttp"
    )
    assert (
        f"{type(pretty_http_0.formatter).__module__}.{type(pretty_http_0.formatter).__qualname__}"
        == "pygments.formatters.terminal.TerminalFormatter"
    )
    assert module_0.DEFAULT_STYLE == "solarized"
    assert module_0.AVAILABLE_STYLES == [
        "solarized",
        "abap",
        "algol",
        "algol_nu",
        "arduino",
        "autumn",
        "bw",
        "borland",
        "coffee",
        "colorful",
        "default",
        "dracula",
        "emacs",
        "friendly_grayscale",
        "friendly",
        "fruity",
        "github-dark",
        "gruvbox-dark",
        "gruvbox-light",
        "igor",
        "inkpot",
        "lightbulb",
        "lilypond",
        "lovelace",
        "manni",
        "material",
        "monokai",
        "murphy",
        "native",
        "nord-darker",
        "nord",
        "one-dark",
        "paraiso-dark",
        "paraiso-light",
        "pastie",
        "perldoc",
        "rainbow_dash",
        "rrt",
        "sas",
        "solarized-dark",
        "solarized-light",
        "staroffice",
        "stata-dark",
        "stata-light",
        "tango",
        "trac",
        "vim",
        "vs",
        "xcode",
        "zenburn",
    ]
    var_0 = pretty_http_0.body(none_type_0, str_0)
    var_1 = pretty_http_0.body(str_0, str_0)
    var_2 = pretty_http_0.headers(str_0)
    assert (
        var_2
        == "\x1b[04m\x1b[91ms\x1b[39;49;00m\x1b[04m\x1b[91mo\x1b[39;49;00m\x1b[04m\x1b[91ml\x1b[39;49;00m\x1b[04m\x1b[91ma\x1b[39;49;00m\x1b[04m\x1b[91mr\x1b[39;49;00m\x1b[04m\x1b[91mi\x1b[39;49;00m\x1b[04m\x1b[91mz\x1b[39;49;00m\x1b[04m\x1b[91me\x1b[39;49;00m\x1b[04m\x1b[91md\x1b[39;49;00m\n"
    )
    module_1.make_encoding_map(none_type_0)
