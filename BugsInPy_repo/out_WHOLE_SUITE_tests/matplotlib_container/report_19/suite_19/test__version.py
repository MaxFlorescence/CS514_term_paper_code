# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import _version as module_0
import enum as module_1


def test_case_0():
    var_0 = module_0.get_config()
    assert var_0.VCS == "git"
    assert var_0.style == "pep440-post"
    assert var_0.tag_prefix == "v"
    assert var_0.parentdir_prefix == "matplotlib-"
    assert var_0.versionfile_source == "lib/matplotlib/_version.py"
    assert len(module_0.HANDLERS) == 1
    str_0 = ""
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(str_0, str_0, str_0, var_0)


def test_case_1():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -2092
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.git_versions_from_keywords(set_0, set_0, set_0)


def test_case_3():
    bytes_0 = b"\xe3\xc0\xd3\xabt$\xd6\xe8lz&\xf5\xdf\xc4l"
    var_0 = module_0.versions_from_parentdir(bytes_0, bytes_0, bytes_0)
    assert len(module_0.HANDLERS) == 1
    str_0 = "giA-describe"
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(bytes_0, str_0, str_0)


def test_case_4():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(ValueError):
        module_0.render(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    var_0 = module_0.git_get_keywords(bool_0)
    assert len(module_0.HANDLERS) == 1
    module_0.render(var_0, var_0)


def test_case_6():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(AssertionError):
        module_0.run_command(var_0, var_0, verbose=var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    none_type_0 = None
    module_0.render(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.git_get_keywords(none_type_0)


def test_case_9():
    none_type_0 = None
    var_0 = module_0.get_config()
    assert var_0.VCS == "git"
    assert var_0.style == "pep440-post"
    assert var_0.tag_prefix == "v"
    assert var_0.parentdir_prefix == "matplotlib-"
    assert var_0.versionfile_source == "lib/matplotlib/_version.py"
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    module_1.unique(none_type_0)


def test_case_11():
    bytes_0 = b"\xa5~\xeb\xe9\xccv\x91\xd2n\xe5\xd1\xe6Mx"
    bytes_1 = b"\xb5u\xb33T\xc3f"
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(bytes_0, bytes_1, bytes_0)


def test_case_12():
    bytes_0 = b'\xe2\x03\x13\xf1\xe1\xbe"\x03X\x13,\x18k'
    bytes_1 = b"\xb5=\xd3u\xb33T\xc3f8"
    none_type_0 = None
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(bytes_0, bytes_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = var_0.__dir__()
    module_0.run_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = var_0.__dir__()
    module_0.run_command(var_1, var_0)


def test_case_15():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(var_0, var_0, var_0)
