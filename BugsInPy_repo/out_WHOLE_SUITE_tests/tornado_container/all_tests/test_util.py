# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import ast as module_0
import inspect as module_1
import util as module_2
import re as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    precedence_0 = module_0._Precedence.FACTOR
    var_0 = module_1.formatannotation(precedence_0)
    module_2.import_object(var_0)


def test_case_1():
    precedence_0 = module_0._Precedence.OR
    with pytest.raises(TypeError):
        module_1.get_annotations(
            precedence_0, globals=precedence_0, locals=precedence_0
        )


@pytest.mark.xfail(strict=True)
def test_case_2():
    gzip_decompressor_0 = module_2.GzipDecompressor()
    assert (
        f"{type(gzip_decompressor_0).__module__}.{type(gzip_decompressor_0).__qualname__}"
        == "util.GzipDecompressor"
    )
    assert (
        f"{type(gzip_decompressor_0.decompressobj).__module__}.{type(gzip_decompressor_0.decompressobj).__qualname__}"
        == "zlib.Decompress"
    )
    assert (
        f"{type(module_2.GzipDecompressor.unconsumed_tail).__module__}.{type(module_2.GzipDecompressor.unconsumed_tail).__qualname__}"
        == "builtins.property"
    )
    object_dict_0 = module_2.ObjectDict()
    module_2.import_object(object_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    object_dict_0 = module_2.ObjectDict()
    var_0 = module_2.doctests()
    str_0 = "eJTCAFqX"
    dict_0 = {str_0: str_0}
    object_dict_1 = module_2.ObjectDict(**dict_0)
    var_1 = object_dict_0.__setattr__(str_0, dict_0)
    assert len(object_dict_0) == 1
    complex_0 = 1496.74 + 2811.0321j
    dict_0.tokeneater(var_0, dict_0, dict_0, dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    object_dict_0 = module_2.ObjectDict()
    object_dict_0.__getattr__(object_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    gzip_decompressor_0 = module_2.GzipDecompressor()
    assert (
        f"{type(gzip_decompressor_0).__module__}.{type(gzip_decompressor_0).__qualname__}"
        == "util.GzipDecompressor"
    )
    assert (
        f"{type(gzip_decompressor_0.decompressobj).__module__}.{type(gzip_decompressor_0.decompressobj).__qualname__}"
        == "zlib.Decompress"
    )
    assert (
        f"{type(module_2.GzipDecompressor.unconsumed_tail).__module__}.{type(module_2.GzipDecompressor.unconsumed_tail).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_2.doctests()
    gzip_decompressor_0.decompress(gzip_decompressor_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_2.ArgReplacer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_1.stack()
    var_1 = var_0.__gt__(var_0)
    str_0 = "ro\x0cTD&rzV05MkDE%Rq"
    dict_0 = {str_0: str_0}
    module_2.Configurable(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 50
    module_2.errno_from_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    var_0 = module_3.purge()
    module_2.errno_from_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    gzip_decompressor_0 = module_2.GzipDecompressor()
    assert (
        f"{type(gzip_decompressor_0).__module__}.{type(gzip_decompressor_0).__qualname__}"
        == "util.GzipDecompressor"
    )
    assert (
        f"{type(gzip_decompressor_0.decompressobj).__module__}.{type(gzip_decompressor_0.decompressobj).__qualname__}"
        == "zlib.Decompress"
    )
    assert (
        f"{type(module_2.GzipDecompressor.unconsumed_tail).__module__}.{type(module_2.GzipDecompressor.unconsumed_tail).__qualname__}"
        == "builtins.property"
    )
    gzip_decompressor_0.block(extra=gzip_decompressor_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    gzip_decompressor_0 = module_2.GzipDecompressor()
    assert (
        f"{type(gzip_decompressor_0).__module__}.{type(gzip_decompressor_0).__qualname__}"
        == "util.GzipDecompressor"
    )
    assert (
        f"{type(gzip_decompressor_0.decompressobj).__module__}.{type(gzip_decompressor_0.decompressobj).__qualname__}"
        == "zlib.Decompress"
    )
    assert (
        f"{type(module_2.GzipDecompressor.unconsumed_tail).__module__}.{type(module_2.GzipDecompressor.unconsumed_tail).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = gzip_decompressor_0.flush()
    module_2.timedelta_to_seconds(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_2.doctests()
    var_1 = module_2.u(var_0)
    module_2.import_object(var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "^(>YjV[\\]H~ rx$PqZ"
    module_2.import_object(str_0)


def test_case_14():
    object_dict_0 = module_2.ObjectDict()


@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_2.doctests()
    arg_replacer_0 = module_2.ArgReplacer(var_0, var_0)
    assert (
        f"{type(arg_replacer_0).__module__}.{type(arg_replacer_0).__qualname__}"
        == "util.ArgReplacer"
    )
    assert arg_replacer_0.arg_pos is None
    arg_replacer_0.get_old_value(arg_replacer_0, arg_replacer_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    var_0 = module_2.doctests()
    arg_replacer_0 = module_2.ArgReplacer(var_0, var_0)
    assert (
        f"{type(arg_replacer_0).__module__}.{type(arg_replacer_0).__qualname__}"
        == "util.ArgReplacer"
    )
    assert arg_replacer_0.arg_pos is None
    arg_replacer_0.get_old_value(arg_replacer_0, arg_replacer_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_2.doctests()
    arg_replacer_0 = module_2.ArgReplacer(var_0, var_0)
    assert (
        f"{type(arg_replacer_0).__module__}.{type(arg_replacer_0).__qualname__}"
        == "util.ArgReplacer"
    )
    assert arg_replacer_0.arg_pos is None
    arg_replacer_0.replace(var_0, arg_replacer_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    var_0 = module_2.doctests()
    arg_replacer_0 = module_2.ArgReplacer(var_0, var_0)
    assert (
        f"{type(arg_replacer_0).__module__}.{type(arg_replacer_0).__qualname__}"
        == "util.ArgReplacer"
    )
    assert arg_replacer_0.arg_pos is None
    arg_replacer_0.replace(var_0, arg_replacer_0, var_0)
