# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import cargo_no_command as module_0
import re as module_1
import enum as module_2
import locale as module_3
import builtins as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -19
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -7
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 4976.464
    module_1.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    float_0 = 27.797705
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = -1835
    float_0 = 776.81
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"uFy\xcaU\xf2\xb7\xa0\xc4"
    set_0 = {bytes_0, bytes_0}
    module_1.fullmatch(bytes_0, bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = "l'"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    float_0 = -2123.9
    module_1.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    var_0 = module_1.purge()
    module_1.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = False
    var_0 = module_1.purge()
    module_0.match(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    int_0 = 1819
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b"\xcfk\xe3\xe6\x97\x0fT\x18*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "\tC8S=Ifp?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    float_0 = -2837.18931
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bytes_0 = b"h\x94\xf5\x8cy"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = "$JFTW;]^y\nj{t%"
    error_0 = module_1.error(str_0, str_0)
    module_0.match(error_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = "}|9\x0bM\\<L?d,~%lyy"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    int_0 = -1712
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    int_0 = 1481
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    bytes_0 = b" \xec2.]\xa5m\xea\xd5\x0b"
    module_1.finditer(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = False
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_42():
    float_0 = 2065.333
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_44():
    dict_0 = {}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    complex_0 = -613.165 + 821.173j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    str_0 = "#@\rH_V:i\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = "'sv%tq2N<w{r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = "'s(XB3kX"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    bool_0 = False
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    float_0 = 154.39
    bytes_0 = b"\xdd?H\xcd\x07"
    set_0 = {float_0, bytes_0, bytes_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    set_0 = set()
    module_1.compile(set_0)


def test_case_55():
    bytes_0 = b"\xf1\xe5"
    str_0 = "; IK(D |TJi}\x0bcf\x0cp("
    var_0 = module_1.escape(str_0)
    with pytest.raises(TypeError):
        var_0.__contains__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    int_0 = 1135
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    list_0 = []
    none_type_0 = None
    module_1.finditer(list_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    int_0 = 756
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    bool_0 = True
    none_type_0 = None
    module_1.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    bytes_0 = b"3\xdfU\xb3c\x15Uy\xe6\x1fs"
    var_0 = module_1.findall(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    module_0.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_68():
    str_0 = "+V_0\r;G;e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    error_0 = module_3.Error()
    none_type_0 = None
    module_1.fullmatch(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    bool_0 = False
    none_type_0 = None
    module_1.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    bytes_0 = b"\xa9\x14"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    set_0 = set()
    module_1.fullmatch(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__call__(tuple_0, none_type_0, module=none_type_0, qualname=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    int_0 = 3260
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    bytes_0 = b"\x0e\x8at\xd6"
    module_1.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    none_type_0 = None
    float_0 = 358.4865
    module_1.fullmatch(none_type_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    str_0 = "\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    bytes_0 = b"g\t\xab\r|\x973,b71*\xfd"
    var_0 = module_1.compile(bytes_0)
    module_4.object(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


def test_case_89():
    pass


@pytest.mark.xfail(strict=True)
def test_case_90():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    float_0 = -914.865162
    error_0 = module_1.error(float_0)
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    bytes_0 = b"\x8f\x1f1\xeb\xca\xf3\xc8\\R"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    base_exception_0 = module_4.BaseException()
    module_0.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.search(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    str_0 = "_Wuq83a(\nj`\naf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    bytes_0 = b"\x91\x0f3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    list_0 = []
    module_1.findall(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    str_0 = "W]m:mN^.A`u;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    bool_0 = False
    none_type_0 = None
    module_1.split(bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    str_0 = "Ou)qBK=Y6,V"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    float_0 = -779.369
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    bytes_0 = b"\xd9\xc9^|\xe5"
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    bytes_0 = b"y\x02\xee)u\x10\xf8R7E\xee\xf6\xf5\xf1\x9c\xf4\xc1?'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    regex_flag_0 = module_1.RegexFlag.TEMPLATE
    set_0 = {regex_flag_0, regex_flag_0}
    module_1.sub(set_0, regex_flag_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    error_0 = module_3.Error()
    none_type_0 = None
    module_1.fullmatch(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    int_0 = -118
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    str_0 = "a'Xb=Q)W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    bytes_0 = b"\x8e9\xf1i\xee\xd6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    none_type_0 = None
    str_0 = "q.KN\rg?eBtS-S,'Wm}"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    str_0 = "x5~)("
    var_0 = module_1.escape(str_0)
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    str_0 = '>$8/]?O.dL:B.j"*Pp'
    var_0 = module_1.fullmatch(str_0, str_0)
    var_0.__call__(str_0, str_0, start=str_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    bytes_0 = b"\\\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    str_0 = "8U~kyS\\p!!ZId)_cG1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    int_0 = 1174
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.template(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    bytes_0 = b"5\xd2\xc7\x90\xb4\xcd\x16\x1d\xc9Hc\xd0\xed\nX\x9c'"
    var_0 = module_1.escape(bytes_0)
    var_1 = module_1.compile(var_0)
    module_0.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    str_0 = "5j<L&,3uz\r\x0cZ"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_132():
    var_0 = module_1.purge()
    none_type_0 = None
    module_0.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    module_1.fullmatch(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    complex_0 = 1198.1 + 1201.98j
    none_type_0 = None
    module_1.sub(complex_0, none_type_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    float_0 = -3394.1
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    int_0 = -1642
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    tuple_0 = ()
    dict_0 = {}
    list_0 = [tuple_0, dict_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    bool_0 = True
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    str_0 = 'M8"(X_\x0cC&2\x0bqaHF\x0c9'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    int_0 = -480
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    int_0 = -3549
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    bool_0 = False
    var_0 = module_1.purge()
    module_1.search(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_148():
    str_0 = ":4$A1)K+h?qcQJ^aa{"
    bytes_0 = b",Z\xeb\x9b\xbd\x88\xdd\x0c\xc6"
    dict_0 = {str_0: bytes_0, str_0: str_0, str_0: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    str_0 = "[kXxvbtD\r"
    none_type_0 = None
    str_1 = ",\rEF"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    bool_0 = False
    module_2.EnumMeta(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    var_0 = module_1.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    complex_0 = -686.1 + 3855.49804j
    module_1.subn(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    float_0 = -722.0
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    complex_0 = 3017.936258 - 1331.9j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


def test_case_155():
    bool_0 = False
    set_0 = {bool_0}
    dict_0 = {}
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(bool_0, bool_0, set_0, set_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    bytes_0 = b"S\xbf\xb3U\xb5\xcb\xc2l\x11\x99g\xe8x\x1b]\xe8\xb2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    bytes_0 = b"\xddU\xb8Dy\x8e\x9a\x9f}\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    bytes_0 = b"t\x17\x7f;\xc7'\x8e\xdf\xd9}\xe8\x01\xb0\xa1\x89\x86\x1f\xe25"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    complex_0 = 2222.305021 - 1878j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    int_0 = 1917
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


def test_case_164():
    pass


@pytest.mark.xfail(strict=True)
def test_case_165():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    str_0 = "\x0byPY b^R;0pHDO"
    var_0 = module_1.sub(str_0, str_0, str_0)
    var_0.__repr__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    int_0 = -956
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    str_0 = '+SGb""g~y(;0h\x0bO[k'
    module_1.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    str_0 = "\nn5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    set_0 = set()
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    complex_0 = 523.26 - 1746.876254j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    dict_0 = {}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    int_0 = -2062
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    float_0 = -4503.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    enum_dict_0 = module_2._EnumDict()
    module_0.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    int_0 = -810
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    str_0 = "CJ85GW5)p:_nB3\x0c^O"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    int_0 = -806
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    int_0 = -2590
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    float_0 = 5799.5
    none_type_0 = None
    module_1.findall(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    float_0 = -789.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    bytes_0 = b"Q\xf5\x08\xfdc\x91\x0c\xfb ["
    str_0 = "u\t&f"
    module_1.subn(bytes_0, bytes_0, str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    complex_0 = -4003.66 - 592.10859j
    error_0 = module_1.error(complex_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    none_type_0 = None
    int_0 = -939
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    str_0 = "O"
    var_0 = module_1.findall(str_0, str_0)
    module_1.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    int_0 = 3314
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    str_0 = ""
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    int_0 = -1313
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    int_0 = -868
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    str_0 = "\\>d/\nEC7}'ts\r)H<C"
    none_type_0 = None
    module_1.search(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    str_0 = "B#o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    tuple_0 = ()
    module_1.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    bytes_0 = b"\x19\xdbfE\xde\xea\x12"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    var_0 = module_1.purge()
    module_1.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    str_0 = "~~?\tOg:PzbWu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    int_0 = 1309
    bool_0 = True
    module_1.search(int_0, int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    str_0 = "uu4n{\x0c<\\-&O<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    complex_0 = -700.7 + 1209.87j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    list_0 = []
    none_type_0 = None
    module_1.search(list_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    float_0 = -2148.3673
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    float_0 = -1010.38387
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    str_0 = "7@V"
    none_type_0 = None
    module_1.finditer(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_230():
    pass


@pytest.mark.xfail(strict=True)
def test_case_231():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    module_0.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    float_0 = -251.0
    module_1.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    bool_0 = True
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    int_0 = -1693
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    var_0 = module_1.purge()
    module_2.auto(*var_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    set_0 = set()
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    var_0 = module_1.purge()
    tuple_0 = (var_0,)
    module_1.fullmatch(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    bool_0 = True
    module_4.BaseException(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    enum_dict_0 = module_2._EnumDict()
    list_0 = [enum_dict_0, enum_dict_0, enum_dict_0, enum_dict_0]
    module_0.match(list_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    int_0 = -1408
    none_type_0 = None
    module_1.sub(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    str_0 = "f<>g\x0c1a{qoX82s"
    none_type_0 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    var_0 = module_1.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    complex_0 = 1203.0905 - 1979.02j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    str_0 = "(C=p=\x0c69r"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    bytes_0 = b"\xa0t|:\xee\xc5q)D\x89\x97\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    none_type_0 = None
    module_0.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    str_0 = "J#tG*D.{)e\x0bd8Z2\\I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    str_0 = "' z+HQWn2o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    str_0 = "\\>!"
    tuple_0 = ()
    module_1.search(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    bool_0 = True
    bytes_0 = b"\n\xd8\x1e\x06.\xd7v\xab\xb7t\x1fc\xfd"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_256():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    module_1.escape(regex_flag_0)


def test_case_257():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    with pytest.raises(TypeError):
        var_0.__new__(var_0, var_0, var_1, var_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    bytes_0 = b"\x11j\x9e]\x8e"
    var_0 = module_1.search(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    none_type_0 = None
    module_0.match(var_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    auto_0 = module_2.auto()
    list_0 = [auto_0, auto_0, auto_0]
    exception_0 = module_4.Exception(*list_0)
    none_type_0 = None
    module_0.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    int_0 = 1367
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    int_0 = -22
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    bytes_0 = b"\x89\x02\x13V\x94@\xf0\xc9\x9b\xc4\xc8\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    float_0 = 266.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    exception_0 = module_4.Exception()
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    var_1.__len__(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    bytes_0 = b"$\xcf!\xbd\xd7\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    int_0 = -1139
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    none_type_0 = None
    module_1.compile(none_type_0)


def test_case_274():
    pass


@pytest.mark.xfail(strict=True)
def test_case_275():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_276():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.Match(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    tuple_0 = ()
    module_1.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    int_0 = -13
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    var_0 = module_1.purge()
    var_0.__repr__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    str_0 = "RX?p<b&WMY~c#9qI5\x0bc$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    str_0 = "tY\x0c}IUQRo:'En"
    enum_dict_0 = module_2._EnumDict()
    module_0.get_new_command(str_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    int_0 = -3769
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    str_0 = "1E{=kX9lXu,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    str_0 = '"/\tVS\\'
    str_1 = "\x0c"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_4.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    str_0 = "+h5\x0b~|PqW~\x0cL2BpPB^6L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    int_0 = -605
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    float_0 = 1380.99
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


def test_case_295():
    pass


@pytest.mark.xfail(strict=True)
def test_case_296():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    bytes_0 = b"\xe5\x0c\x0f\xba\x8eBrg\xf7\xb9\xaf"
    var_0 = module_1.escape(bytes_0)
    set_0 = {var_0}
    module_0.get_new_command(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    float_0 = 2833.72
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    str_0 = '?9t"FGn4wO Nm6\x0c>h?'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    list_0 = []
    module_1.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    int_0 = 1961
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    auto_0 = module_2.auto()
    module_1.split(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    int_0 = 605
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    bytes_0 = b"Q\xe9E\x88\x8e$FH;{\x87O\x97\xcb\x16\x1d"
    var_0 = module_1.escape(bytes_0)
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    float_0 = -2452.419321
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    str_0 = "l/\\"
    var_0 = module_1.purge()
    tuple_0 = (str_0, var_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    bytes_0 = b"j\xdf\x82\xba7\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_314():
    bytes_0 = b"{_$\\"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    float_0 = -569.5
    list_0 = [float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    str_0 = "2-)47Er7P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    int_0 = -1312
    none_type_0 = None
    module_1.template(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    int_0 = 2230
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    complex_0 = -1289.02464 - 1315.962j
    module_1.sub(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    int_0 = 231
    module_1.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    int_0 = -1605
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    bytes_0 = b"J0\xb1\x93\x86N\xe3F\x04\x92rK\xd3\xad"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    int_0 = 560
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    float_0 = -251.519
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    object_0 = module_4.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    var_0 = module_1.purge()
    list_0 = [var_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.split(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    int_0 = -1415
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    float_0 = -156.79652
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    str_0 = "w8=yzJ?U^X#^(D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    float_0 = 233.0
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    int_0 = -439
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    bytes_0 = b"\xbb\xaf\x99\x12\xf2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    str_0 = "l0[p\rs3s"
    str_1 = "rw|X-qqKg1"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_4.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    float_0 = 1937.0877
    bytes_0 = b"\xb6z\x99\x06g\x19$\xcc\xebB\x1e\xa2?L"
    var_0 = module_1.search(bytes_0, bytes_0)
    var_0.__len__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    int_0 = -1093
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    bytes_0 = b"\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    str_0 = "h{t~{]K(-WHxqu\\%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_355():
    str_0 = "'DXDp@Q2O^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    bytes_0 = b"8\xda8\xf2\xf3\xa9}\xc3aH\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    int_0 = -3208
    module_0.match(int_0, int_0)


def test_case_359():
    pass


@pytest.mark.xfail(strict=True)
def test_case_360():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    str_0 = "Fu3d~qA+2!"
    var_0 = module_1.search(str_0, str_0)
    var_1 = var_0.__dir__()
    module_0.match(var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    bytes_0 = b"\xdbG"
    set_0 = {bytes_0}
    none_type_0 = None
    module_1.sub(set_0, bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    str_0 = "!|+V2b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    int_0 = -53
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    bytes_0 = b",\x0f\xc0H|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    str_0 = "` x}&\x0b\tJ!;\\whD[y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    str_0 = "I0;FFF~Xn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_372():
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    bytes_0 = b"\x85\x16\x11"
    var_0 = module_1.escape(bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    bytes_0 = b"\xa6\xaa_\x8a.\xb4@\xb9\x86D\xa4A\xc6\x17]"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    tuple_0 = (bytes_0, var_0)
    module_0.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    int_0 = 242
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    int_0 = 888
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    bytes_0 = b"\xe6\x0bB\xc4k>"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    bool_0 = True
    int_0 = 2916
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    int_0 = 447
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    str_0 = "H>cj9g"
    none_type_0 = None
    module_1.split(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    float_0 = -2011.623666
    none_type_0 = None
    module_1.sub(float_0, float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = "O%u2N,A8>3_Sk"
    module_1.findall(tuple_0, bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    int_0 = 2922
    list_0 = [int_0, int_0]
    exception_0 = module_4.Exception(*list_0)
    module_1.escape(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    float_0 = 475.95325
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    set_0 = set()
    module_4.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    int_0 = -310
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    bool_0 = False
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    bytes_0 = b"\x12\x16q\x9b\xb9\xa0\xfe-\xbc\x96\x04\xec1#\xb70m\xf6c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    str_0 = "0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    int_0 = 1532
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    set_0 = set()
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    int_0 = 2676
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    float_0 = 920.4807
    module_1.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    dict_0 = {}
    module_1.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    bytes_0 = b"B\xd7\xad\xf9b+\xc3\x93E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    str_0 = "Tr#K"
    none_type_0 = None
    module_1.sub(str_0, str_0, none_type_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    str_0 = "LB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    bytes_0 = b"\xcbbl\x05\x07U\xa0F\xaa\xe9"
    module_1.sub(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    str_0 = "y"
    var_0 = module_1.escape(str_0)
    var_1 = module_1.compile(var_0)
    var_2 = var_1.__dir__()
    module_1.template(var_2)


@pytest.mark.xfail(strict=True)
def test_case_411():
    float_0 = 2932.9419
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_413():
    str_0 = "BB2c5I%hj-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    none_type_0 = None
    module_0.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    bytes_0 = b"\xed\xffe\xd8Xc\x93;iRuN\xc4\x84\xc0K\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    exception_0 = module_4.Exception()
    module_0.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    str_0 = "H"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    int_0 = 1876
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    int_0 = 172
    module_1.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    str_0 = "E;nj,|'3;*o!ZK[xC&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    str_0 = ""
    none_type_0 = None
    module_1.split(str_0, str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    str_0 = '`2*.w+7<j|cBqX;{z"o/'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    bytes_0 = b"\xc1\xf2"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.compile(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    str_0 = "#T)Ijt@L8q$s"
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    var_0 = module_1.purge()
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_430():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.Match(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    str_0 = "28oqHM!9~C\nt.HBL{"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.finditer(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    int_0 = 165
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    float_0 = -3653.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    str_0 = "6e v;y2"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    complex_0 = 2482.09918 - 2073.566j
    module_1.finditer(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    enum_dict_0 = module_2._EnumDict()
    tuple_0 = ()
    module_1.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    str_0 = "iUiRlPM@(z2nt\nQ?"
    str_1 = ":+"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_2.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    bytes_0 = b"QJ:\xaeC<\x13\xf3"
    list_0 = [bytes_0]
    module_1.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0, var_0)
    int_0 = 1217
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


def test_case_448():
    pass


@pytest.mark.xfail(strict=True)
def test_case_449():
    error_0 = module_3.Error()
    bytes_0 = b"\xd4\xfbp\xfeAs\x89\xb4QL\x9e8%&qo"
    none_type_0 = None
    module_1.subn(bytes_0, bytes_0, none_type_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    none_type_0 = None
    module_1.finditer(exception_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    str_0 = "\x0b?|Da=w-ylLT"
    none_type_0 = None
    module_1.sub(str_0, str_0, none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    str_0 = "i2W@w=gW&j\x0bTS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    float_0 = -1688.99
    var_0 = module_1.purge()
    var_0.__len__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    str_0 = "\\MBcGd\r\\\t^\r<<6'YyT_"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    float_0 = -841.221
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    str_0 = "LsMX#n.S8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    float_0 = -613.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    float_0 = -3682.4518
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    exception_0 = module_4.Exception()
    module_1.split(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    none_type_0 = None
    str_0 = "_*]:\x0bygGoQ6j6\n`o"
    module_1.subn(none_type_0, none_type_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    int_0 = -2593
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    bytes_0 = b"L\x1c\x93\xbaX\xedqT\x91\x0f\xcc\xabY\x10\x0e\xd8\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    var_0 = module_1.purge()
    set_0 = {var_0, var_0, var_0}
    module_0.match(var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0]
    module_2.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_1.subn(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    bytes_0 = b"\xd4"
    none_type_0 = None
    module_1.findall(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    float_0 = 1945.33
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    regex_flag_0 = module_1.RegexFlag.TEMPLATE
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    float_0 = -441.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    str_0 = "`x4qU[/f^4c|Uf^"
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    bool_0 = False
    list_0 = [bool_0]
    bool_1 = False
    tuple_0 = (bool_0, list_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    int_0 = -2067
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    str_0 = "jH\\i-U>hEXC/q) "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    bytes_0 = b"k\xb7\x07\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    int_0 = -545
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bytes_0 = b"\xaa\x8f\xbb(\xfe$;\xd6."
    module_1.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    bool_0 = False
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    set_0 = set()
    module_1.Scanner(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    str_0 = "uKQ\x0b^zJy\t"
    none_type_0 = None
    module_1.sub(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    int_0 = -2956
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    bytes_0 = b"5h\xfb5\x01\xe2\xbb\xba \xd4j"
    module_0.match(bytes_0, bytes_0)


def test_case_495():
    pass


@pytest.mark.xfail(strict=True)
def test_case_496():
    str_0 = "A[ic\x0cEM2lh{"
    module_1.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    float_0 = -987.0
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    int_0 = 661
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    int_0 = 690
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    str_0 = "T)v !yz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_503():
    str_0 = "w=.7#I2G I*f+i]"
    tuple_0 = (str_0,)
    module_1.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    bytes_0 = b"m\x068/\xe6w\xee;\xca\xae\xc8~q\xccH\x04\xc0\xfe\xb5"
    error_0 = module_1.error(bytes_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    var_0 = module_1.purge()
    module_1.split(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    complex_0 = -3369.377 - 693.7j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    bytes_0 = b"\xf6k\xe6\x96x"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    set_0 = set()
    module_1.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    str_0 = "_lP993P"
    none_type_0 = None
    module_1.subn(str_0, str_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.fullmatch(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    int_0 = -3382
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    str_0 = "X "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    bytes_0 = b"\xe3\xec\x03z\x9f\x97\xb0\xdeiG\x96\xd5=\xdf4rz"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    bytes_0 = b"HSPi\xb7)^\xd3\xa4\xd3\x1b"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_520():
    int_0 = -1673
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    int_0 = -3333
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    int_0 = -2556
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    object_0 = module_4.object()
    complex_0 = -1253.752 - 1447.85087j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    set_0 = set()
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    str_0 = "S\x0cBGUd7"
    list_0 = [str_0]
    error_0 = module_3.Error(*list_0)
    module_1.subn(error_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    int_0 = 393
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    int_0 = -3104
    none_type_0 = None
    module_1.split(none_type_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    float_0 = 1248.6
    module_1.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    bytes_0 = b"\x84\xa3|\xbb\xca\xc8e\xc9,\x16\xfe\xa1\xc6"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    str_0 = "RM'LE,"
    bytes_0 = b"\x976C\x1f\x01|\xb3\x86\x1e\xe0\xef~#{\xa0"
    var_0 = module_1.template(bytes_0)
    dict_0 = {str_0: str_0, bytes_0: bytes_0, bytes_0: bytes_0, var_0: var_0}
    module_0.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    object_0 = module_4.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    enum_dict_0 = module_2._EnumDict()
    module_0.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    float_0 = 1203.77049
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    bytes_0 = b"\x13\x8e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    int_0 = -3539
    set_0 = {int_0, int_0}
    int_1 = 1819
    module_0.get_new_command(set_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_543():
    bool_0 = False
    none_type_0 = None
    module_1.compile(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    auto_0 = module_2.auto()
    module_0.get_new_command(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    int_0 = -551
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    float_0 = 607.575
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


def test_case_551():
    complex_0 = -1030.31258 - 749.32j
    str_0 = 'w"'
    var_0 = module_1.search(str_0, str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    float_0 = -2616.402
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    var_0 = module_1.purge()
    tuple_0 = (var_0,)
    module_1.sub(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    bool_0 = False
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    float_0 = 1940.6
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    int_0 = -787
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    bytes_0 = b"\xe0\xd9=\xcc\xa8\x92\\\x12\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    var_0 = module_1.purge()
    module_1.search(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    int_0 = 2491
    none_type_0 = None
    module_1.match(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    bytes_0 = b"\xfdi\x19\x11\x0f\t\xb73\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    str_0 = "ub^`O"
    var_0 = module_1.escape(str_0)
    var_1 = module_1.finditer(var_0, str_0)
    bool_0 = True
    module_0.get_new_command(var_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    str_0 = "\\L6:cX'5>\""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    str_0 = 'L\x0b_E2\x0c\n_yF8@"TTEtl),'
    tuple_0 = (str_0,)
    module_1.fullmatch(tuple_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    bytes_0 = b'\x00\xc5l\xbc\x92\xf9Bk\x14"9'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    bytes_0 = b"\x8d\xfb\x8axL+\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    int_0 = 3075
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    auto_0 = module_2.auto()
    none_type_0 = None
    module_1.subn(auto_0, auto_0, auto_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    complex_0 = 89.8687 - 4098.6177j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    dict_0 = {}
    module_1.escape(dict_0)


def test_case_575():
    pass


@pytest.mark.xfail(strict=True)
def test_case_576():
    bytes_0 = b"\x18\xde\xbd"
    module_1.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    str_0 = 'LP #63Po*"5`'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_581():
    str_0 = "W5nP!p|o\x0bf&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, pos=none_type_0)
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    str_0 = " oUR59\r'"
    tuple_0 = (str_0,)
    module_1.match(tuple_0, str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    str_0 = "9?,\\EfKZ<Q|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    int_0 = -1835
    none_type_0 = None
    module_1.findall(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    int_0 = -1041
    list_0 = [int_0]
    str_0 = ")\r*"
    dict_0 = {str_0: str_0}
    module_1.Match(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_1.fullmatch(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    str_0 = ';i8g\x0bB"Nn'
    module_1.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    bytes_0 = b"\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    error_0 = module_3.Error()
    module_1.subn(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    int_0 = -2561
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    str_0 = "Saoy?$gK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    regex_flag_0 = module_1.RegexFlag.DOTALL
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    int_0 = -2384
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    bytes_0 = b"\x90\xd8>\x134FE"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    str_0 = "}$+kX"
    module_1.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    bytes_0 = b'\xd2\x8d\x9d\x1e\xc9\xe5\x11"\xc3\xdad\x9bU'
    var_0 = module_1.split(bytes_0, bytes_0)
    float_0 = -1057.546
    module_1.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    int_0 = -1743
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    bytes_0 = b"VO{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    float_0 = -353.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    float_0 = 1854.530121
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    float_0 = -3355.405662
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    dict_0 = {}
    module_2.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    int_0 = 41
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_613():
    int_0 = -1044
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    tuple_0 = ()
    float_0 = -1380.3
    list_0 = [tuple_0, tuple_0, float_0, float_0]
    bytes_0 = b"\x137\x9a\x82"
    error_0 = module_1.error(list_0, pos=bytes_0)
    list_1 = [error_0, tuple_0, tuple_0, error_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    bytes_0 = b"\xdb\xd4s\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    bytes_0 = b'\x9a\xd1\x99FS\x97" {8\x92'
    var_0 = module_1.split(bytes_0, bytes_0)
    module_0.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    str_0 = "ZpBt"
    var_0 = module_1.search(str_0, str_0)
    str_1 = 'U2x7."RX)CW6\x0cj'
    dict_0 = {str_0: var_0, str_1: str_1}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    str_0 = "'6PvJoCA\n&$'xorU RR>"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    bytes_0 = b"\xec\xb2\xdb\xc9l\xeej\x83\x88\xffp\x9b|i\xfcW\xab\xf7\xa5<"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_623():
    int_0 = 1640
    var_0 = module_1.purge()
    list_0 = [int_0, int_0, var_0]
    module_0.get_new_command(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    none_type_0 = None
    module_1.Pattern(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_1.search(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    str_0 = "l5k\nk,AK/G\\yt@)1"
    module_1.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_628():
    pass


@pytest.mark.xfail(strict=True)
def test_case_629():
    bytes_0 = b"\x9b\xc2o\xcb\xbbB\xeb#j"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    str_0 = ""
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    str_0 = '@y\x0c2Q"MOH'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    int_0 = -1001
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    str_0 = "}08b]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    float_0 = -1569.18345
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    bool_0 = True
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_638():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    str_0 = '^H"7tG0QV6w'
    var_0 = module_1.findall(str_0, str_0)
    var_0.__repr__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    float_0 = 985.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    enum_dict_0 = module_2._EnumDict()
    set_0 = set()
    module_1.search(enum_dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    str_0 = "T\x0b16rB(In\x0bi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    module_2.EnumMeta()


def test_case_644():
    pass


@pytest.mark.xfail(strict=True)
def test_case_645():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    str_0 = "B4X:>q{\x0bcU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    str_0 = "BU?\rk/zw"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_650():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.Pattern(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    complex_0 = 428.89794 + 3618.821j
    module_1.sub(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    int_0 = 1870
    module_0.get_new_command(int_0, int_0)


def test_case_653():
    pass


@pytest.mark.xfail(strict=True)
def test_case_654():
    int_0 = -1018
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    var_0 = module_1.purge()
    module_1.search(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_658():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_660():
    str_0 = "63=]\x0bv<6Asb-D(4QLl"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    str_0 = "$v"
    module_1.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    error_0 = module_3.Error(*list_0)
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    str_0 = "FY%"
    str_1 = "\t"
    str_2 = "%\rms!)3"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    float_0 = 2736.722984
    module_2.EnumMeta(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    str_0 = "ag.N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    dict_0 = {}
    module_1.subn(dict_0, dict_0, dict_0)


def test_case_667():
    pass


@pytest.mark.xfail(strict=True)
def test_case_668():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    none_type_0 = None
    module_1.Match(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    tuple_0 = ()
    none_type_0 = None
    module_1.split(tuple_0, none_type_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    str_0 = "ghyX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    str_0 = "Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    float_0 = 152.34
    none_type_0 = None
    module_1.sub(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    int_0 = -2851
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    int_0 = 293
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    int_0 = -342
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    float_0 = -2764.745
    list_0 = [float_0]
    exception_0 = module_4.Exception(*list_0)
    module_1.findall(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    tuple_0 = ()
    none_type_0 = None
    module_1.compile(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    str_0 = "Rs;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    bytes_0 = b"\x93q\xbc[9"
    module_1.finditer(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    bytes_0 = b"5}*\xb7\x9a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    complex_0 = -2548.3 + 741.376j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    int_0 = -3634
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    str_0 = "#\tp\reIW\naa"
    dict_0 = {str_0: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    bytes_0 = b"V\xae"
    var_0 = module_1.match(bytes_0, bytes_0)
    bool_0 = True
    module_0.match(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    int_0 = -1828
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    bool_0 = True
    float_0 = 1021.7
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    int_0 = 602
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    int_0 = 475
    module_1.Scanner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    str_0 = 'z=T$w"In@BPR2^Br.(V'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_706():
    dict_0 = {}
    complex_0 = -2308 + 2598.01j
    tuple_0 = (dict_0, complex_0, dict_0, complex_0)
    module_1.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    int_0 = 129
    none_type_0 = None
    module_1.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    float_0 = -2776.715
    module_1.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    str_0 = "&m5J0\t\\N,|~GS~p0J "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    int_0 = 887
    list_0 = [int_0]
    list_1 = [list_0, int_0, int_0]
    module_1.split(list_1, int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    bool_0 = True
    base_exception_0 = module_4.BaseException()
    module_0.get_new_command(bool_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    int_0 = 2160
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    float_0 = 838.71
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    bytes_0 = b"\xe1\xfb"
    none_type_0 = None
    var_0 = module_1.search(bytes_0, bytes_0)
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    dict_0 = {}
    module_1.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    str_0 = "T%aOnCbd#\x0b~e6nfB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    int_0 = 93
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    set_0 = set()
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    complex_0 = 2354.19 + 92.824j
    var_0 = module_1.purge()
    var_0.scan(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    str_0 = ",}`k`J'Sw8"
    str_1 = "4 =GA]"
    module_1.split(str_0, str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_729():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    int_0 = -1497
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    int_0 = 1439
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    bytes_0 = b""
    var_0 = module_1.search(bytes_0, bytes_0)
    tuple_0 = (var_0, var_0, var_0)
    module_0.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    int_0 = 521
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_739():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    int_0 = -288
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    int_0 = -977
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    float_0 = -504.09795
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    bytes_0 = b"\xd1\xb8D\xbd\xb3T\x9b\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    str_0 = "K&zOrD1~b l9t{[;':z]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    tuple_0 = ()
    module_1.split(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    int_0 = 3119
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    complex_0 = 1868.1 - 900.796j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__iter__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    int_0 = -4318
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    bytes_0 = b"\xac\x83M"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    exception_0 = module_4.Exception()
    bytes_0 = b"D\x08\n\xa7\xc5\xe0-\x0b\xa8ok\x04"
    module_0.get_new_command(exception_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    str_0 = "m"
    none_type_0 = None
    module_1.sub(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    str_0 = "\tq('|AwJpsAir;}H."
    dict_0 = {str_0: str_0, str_0: str_0}
    module_4.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    tuple_0 = ()
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    bytes_0 = b'OK\xd3\xe2\xd3b\x9c\x84\x8e\xa7\xb2\xfc"\x88'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    bytes_0 = b"2\xfb\xb6\x928\xa59\x16k\x84k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    bytes_0 = b"N\xd68\x97\xc2W"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    bytes_0 = b"\xefJ\x11\xeb"
    var_0 = module_1.match(bytes_0, bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    bool_0 = False
    none_type_0 = None
    module_1.findall(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    int_0 = 423
    module_1.sub(int_0, int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    int_0 = 710
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    str_0 = "\x0c1p8S\n#"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    int_0 = -3239
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    bytes_0 = b"\xf7\x00\xa3O\xb1\x8a55\xdb\xcb\x87m\xa3\xb1p\xd4\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    list_0 = []
    module_1.subn(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    complex_0 = 2542.65 + 407.4251j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    float_0 = 3395.09183
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    bool_0 = True
    complex_0 = -2400.604 + 616j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    str_0 = "{\\rb"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    str_0 = "M<.tY,g.-q("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    int_0 = 1780
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    bytes_0 = b"o(\x02\x81!]\x91L"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    str_0 = "(x#D&3&/4!@y6?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    bytes_0 = b"\xf8"
    var_0 = module_1.sub(bytes_0, bytes_0, bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    float_0 = -444.0
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    str_0 = " 3;bGIo<&{)ygF 2"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    dict_0 = {}
    auto_0 = module_2.auto(**dict_0)
    none_type_0 = None
    module_0.match(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    bytes_0 = b"\xf4\xf9\x1f\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    none_type_0 = None
    var_0 = module_1.purge()
    module_0.match(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    int_0 = -1381
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    var_0 = module_1.purge()
    var_1 = module_1.purge()
    var_1.__contains__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    float_0 = 404.55035
    module_1.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    int_0 = -2448
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    str_0 = 'C9$O-Y(P"'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    bool_0 = False
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    int_0 = 2172
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    bool_0 = True
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    int_0 = 1474
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    int_0 = -3940
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [int_0, int_0, set_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    str_0 = "\rd\\qDzdjHkz)b[~{&1E'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    str_0 = "G#\x0b0B)dF<yc"
    dict_0 = {str_0: str_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    complex_0 = 1435.0712 - 4095.4j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    int_0 = 2728
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    int_0 = -2061
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    bytes_0 = b"\x1bM\x0b\x11\x8d\x9cm\\\x93X\x9b\xc0\xe7\xaf[w_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    bytes_0 = b'\xc2\x1b"=\x9e\xe2\x8e\x8f'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_828():
    int_0 = 1816
    var_0 = module_1.purge()
    var_0.__len__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    int_0 = 437
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_1.finditer(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    int_0 = -937
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    object_0 = module_4.object()
    module_1.findall(object_0, object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    str_0 = "7m^#MaC-3o2=x\x0bg}E\\&\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    str_0 = "|-Ki2lTW YjZDT[7="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    auto_0 = module_2.auto()
    module_0.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    int_0 = -338
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    str_0 = "5s_^^EUNsiHX%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    int_0 = -1248
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    bool_0 = False
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    set_0 = set()
    module_1.split(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    bytes_0 = b"\x12\xc4H\xfc\xd6\x83%\xddV{\x1f\x02l\xd6\xe1\xaf\xfc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    bool_0 = True
    int_0 = -355
    module_1.findall(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    int_0 = 1911
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    float_0 = -791.86
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, bool_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    bytes_0 = b"!\x80(\xcb\xacX"
    module_1.fullmatch(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    bool_0 = True
    none_type_0 = None
    module_1.findall(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    bytes_0 = b"\xae\x9e\xadw\xa1\x14~\xd6\xa8\xb85\xbb"
    base_exception_0 = module_4.BaseException(*bytes_0)
    module_0.match(base_exception_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    int_0 = 1328
    var_0 = module_1.purge()
    var_0.__getitem__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    bytes_0 = b"\x89\x95\x8f:e\xa6i;\xed\x7fm\x1br\x9d\x16\xd0\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    float_0 = 1717.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    bytes_0 = b"\xe3\xb5\x06\x1e\xc0\x10\xd1\xaa\x1b\xf2\xc6\xe1"
    none_type_0 = None
    module_1.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    int_0 = 3881
    none_type_0 = None
    module_1.subn(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    bytes_0 = b"\xc2\xc5\xb8\xc9A\xf1\xf9\xf1\xefR7\xc2\xc6\xd1\x04\xfe\x93\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    bytes_0 = b"\xef\x1cgG"
    var_0 = module_1.compile(bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_866():
    int_0 = -1660
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    tuple_0 = ()
    error_0 = module_1.error(tuple_0)
    none_type_0 = None
    module_1.finditer(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    float_0 = -1611.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_872():
    complex_0 = -649.78 - 2438.982842j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    str_0 = "~U$k(9\\_-PTOfw:sII%_"
    var_0 = module_1.escape(str_0)
    tuple_0 = (str_0, var_0, var_0)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    int_0 = 3418
    none_type_0 = None
    module_1.sub(int_0, int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    bool_0 = True
    int_0 = 2931
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    bytes_0 = b"\xce\x8b\xe5\xd9\x8dKs\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    bytes_0 = b""
    var_0 = module_1.search(bytes_0, bytes_0)
    str_0 = "<\r}<S\x0bnV;"
    module_1.sub(var_0, var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    int_0 = -717
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    int_0 = -161
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    int_0 = -885
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    var_0 = module_1.purge()
    var_0.__len__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    dict_0 = {}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    int_0 = -3272
    list_0 = []
    module_1.subn(int_0, list_0, list_0, int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    bytes_0 = b"\xb8\x1c\x13\xcb+3cD)2x\xa9\xe7\xdb\xa2\x9b"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    bytes_0 = b"\xd6\xf69\xea,\x90P\x0e\x9b\x87\x08"
    none_type_0 = None
    module_1.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    bytes_0 = b"\x02F\\\x87\xc3\xf8\xa5\x08\x90"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_896():
    pass


@pytest.mark.xfail(strict=True)
def test_case_897():
    str_0 = "#1V0"
    dict_0 = {str_0: str_0}
    module_2.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    float_0 = -158.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    bytes_0 = b"\x7f\xd0\x8aLI0\x8d\x80\xe7\x97\x9b_\n\xf0\x8a\xe1\xcd\xf0\xe8\x17"
    none_type_0 = None
    module_1.subn(bytes_0, bytes_0, none_type_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    int_0 = -28
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    float_0 = -3484.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    float_0 = -2501.822915
    module_1.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    float_0 = 2336.8764
    module_1.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    int_0 = -1417
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    bytes_0 = b"\x80$/\x8e"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    str_0 = "Jdl3|Sy)w5}_\x0cl)V"
    module_1.search(str_0, str_0)


def test_case_909():
    pass


@pytest.mark.xfail(strict=True)
def test_case_910():
    str_0 = "4t)+S84"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    complex_0 = -1859.178 + 1260.329105j
    str_0 = "|`:?DQ+;?yl&}3Qn"
    set_0 = {complex_0, str_0, complex_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_914():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    set_0 = set()
    list_0 = []
    module_1.split(set_0, list_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0, var_0: var_0}
    list_0 = [dict_0, var_0, var_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    var_0 = module_1.purge()
    bytes_0 = b'\x92\xc3\x0c\xe0/\xd4%"'
    module_1.subn(var_0, var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    float_0 = -531.8811
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    complex_0 = -2027 - 2023.91j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    int_0 = -187
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    float_0 = 1220.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    auto_0 = module_2.auto()
    module_1.escape(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    int_0 = 379
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    error_0 = module_3.Error()
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = "O@&Q/hc~TyztX|aO^KU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    int_0 = -1151
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    str_0 = "Y26ih0$qPRae "
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    int_0 = 3069
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    float_0 = 2393.667
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    bool_0 = True
    module_1.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    str_0 = "d:+V9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    bytes_0 = b"\xd54\xcf\x8c\xf4\x90\x11\xaa\x80H\xeaq\x08\xf7>\xef\xc9\x1a\xad"
    bool_0 = False
    int_0 = 1567
    str_0 = "au!u/ P@98#"
    tuple_0 = (bytes_0, bool_0, int_0, str_0)
    module_1.split(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    str_0 = "+2a"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.findall(list_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    object_0 = module_4.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    tuple_0 = ()
    module_1.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    str_0 = "YMG`^;nPaC~`M^4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    float_0 = -1266.3451
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    bytes_0 = b":\x01t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    bytes_0 = b"\xa6\xeb\xd8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__call__(bool_0, bool_0, none_type_0, module=none_type_0, type=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    float_0 = 2675.90977
    module_1.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    float_0 = -1300.6991
    module_1.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    complex_0 = 1693.2 + 795.57j
    module_1.subn(complex_0, complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    str_0 = '$onGvKU%HWCrVK" s'
    str_1 = "EUax$ER]7>xfz"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    exception_0 = module_4.Exception()
    module_1.finditer(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    str_0 = "Mgg"
    bytes_0 = b"\xf0\xa5\x0e\xb9\x9e\xd0})'\xaa_\xbc\x17\xfb\xa4y"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    enum_dict_0 = module_2._EnumDict()
    module_1.escape(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    str_0 = "ao]G??6P\x0c\n>'[4p{c"
    none_type_0 = None
    module_1.fullmatch(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    none_type_0 = None
    module_1.template(none_type_0)


def test_case_964():
    pass


@pytest.mark.xfail(strict=True)
def test_case_965():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    int_0 = -1776
    module_1.Match(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    int_0 = -227
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    complex_0 = 563 - 4045.2j
    module_1.subn(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    float_0 = -382.932471
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    bytes_0 = b"\x816\xd3:.*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    dict_0 = {}
    module_1.findall(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    str_0 = ":~i'&~\x0bamCnCgL"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_975():
    bool_0 = False
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.match(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    int_0 = 230
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    bytes_0 = b"\xf1e\x89\xdd\xd9@\xa1\xca\xf3p"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    str_0 = "aOb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    list_0 = []
    base_exception_0 = module_4.BaseException(*list_0)
    list_1 = [base_exception_0, base_exception_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_982():
    int_0 = 2
    str_0 = "a0{Y"
    dict_0 = {int_0: int_0, int_0: int_0, str_0: int_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    none_type_0 = None
    module_1.Pattern(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    int_0 = 5723
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    complex_0 = 106.5758 + 1974.06j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    int_0 = 1371
    dict_0 = {int_0: int_0, int_0: int_0}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bytes_0 = b"\x12\x875V\xa0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    bytes_0 = b"A\xefg\x1c\xe0"
    error_0 = module_1.error(bytes_0)
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    int_0 = -71
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    float_0 = 3576.786
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0, float_0, dict_0]
    module_2.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    bytes_0 = b"uJ~-:\xdb\xd6Y\xad\xd2\xe1\\\x03"
    var_0 = module_1.split(bytes_0, bytes_0)
    module_1.match(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    bytes_0 = b"\x16\xcax\xc8\x14<\xc1\xa12"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    none_type_0 = None
    module_0.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    module_1.match(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    bytes_0 = b"\xe2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    str_0 = "&"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_1001():
    enum_dict_0 = module_2._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_1002():
    str_0 = "Z=VV4CHt|;)AJ>%M#z$"
    none_type_0 = None
    module_1.findall(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    none_type_0 = None
    dict_0 = {}
    module_1.split(none_type_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    int_0 = 1719
    module_1.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    bytes_0 = b"\xc3\x99gr{\x06/_\x1d\xf3\xd8\x8c\xb0\xa6\x0b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    bytes_0 = b"\x0fs\xdc\xc6!Q\x9fK%Zj\xc5N{\xdb\x0cM"
    none_type_0 = None
    module_1.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    int_0 = 171
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1014():
    str_0 = " &F"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    int_0 = -2290
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    bytes_0 = b"\x9d`\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    tuple_0 = ()
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    bytes_0 = b"\x9eR\x80I\xd8\t\xe3"
    var_0 = module_1.template(bytes_0)
    module_1.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    float_0 = 244.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    bytes_0 = b"\xd1\xbc\x8d\xa4\x10\x93H2\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    str_0 = "hJ<~v\rz0dnt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {bool_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = 'v+}4j|(!\x0c9"xXbAl'
    dict_0 = {str_0: none_type_0}
    module_4.BaseException(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    int_0 = 569
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    float_0 = -2143.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    float_0 = -2648.763997
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    enum_dict_0 = module_2._EnumDict()
    module_1.subn(enum_dict_0, enum_dict_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    str_0 = "qH|%IaHL5+5*@Z;(d\r:}"
    module_1.fullmatch(str_0, str_0)


def test_case_1037():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1038():
    var_0 = module_1.purge()
    bool_0 = False
    module_0.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0}
    module_0.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    float_0 = -1880.705
    module_1.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    int_0 = 2106
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    str_0 = "pa"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    str_0 = '<\x0cEtB^)Ey c^Pm":t'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    int_0 = 659
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    error_0 = module_3.Error()
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    str_0 = "p> lJ{@c%(mKw=PEO"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    str_0 = "u7*.oT3Qp5\t}V:~"
    int_0 = -17
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    var_0 = module_1.purge()
    module_1.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    bytes_0 = b"`\x0e\xac\xbc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\xbc\xdd=\x9dy4\xe0 \xfd\x11\xf3\x91\x07\xf6\x81FeWy\xbe"
    tuple_0 = (dict_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    module_1.search(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    error_0 = module_3.Error()
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_1064():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0]
    module_0.get_new_command(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    bytes_0 = b"2\xc7\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    none_type_0 = None
    list_0 = [none_type_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    str_0 = "XHt\r3y j%`\x0c}0H"
    none_type_0 = None
    module_1.subn(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    bytes_0 = b"im\xa4\xb6\x89\x95i\xf7M\xa0\xfcA\xdc')U\x91\x0c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    bytes_0 = b"\xb0}\x895\x98\xaf\x1a"
    str_0 = "[7"
    tuple_0 = (bytes_0, bytes_0, str_0)
    str_1 = '\rJJ}9"B_wu'
    module_0.match(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    int_0 = 1519
    var_0 = module_1.purge()
    tuple_0 = (int_0, var_0, var_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    float_0 = 2124.084892
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    bytes_0 = b"M\xf5Rf\x11\x84$\xc4_\x0e\x95=OHG\xbe("
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    str_0 = "p|I+1<8a9y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    bytes_0 = b"K\x98\x90\x83\x85\t$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    bytes_0 = b"zrT"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    float_0 = 1977.187273
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    var_0 = module_1.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    int_0 = -801
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    bytes_0 = b"\xaa\x01^nmr\x83\x92BI\xc6\x88K\xee3\xdff\xd38\xc4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    str_0 = "IrmX`l\\sp%?\\BFkc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1089():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    int_0 = -248
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    int_0 = 2194
    none_type_0 = None
    module_1.sub(none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    float_0 = 1072.11
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    var_0 = module_1.purge()
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    bytes_0 = b"\xd2\xcb\xb5ba\x8d\xcf\xb7\xef\x9bL>\xe0\x8f\xaf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    float_0 = 1075.4081
    bytes_0 = b"\xeb\x94\x96V\xdc\xda\xf1"
    dict_0 = {float_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    str_0 = ""
    set_0 = {str_0, str_0, str_0, str_0}
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_1101():
    bytes_0 = b"\x13\xd8\xe9N\x8e\xdbK\xd8\xc3\x97\xb4\xce\x15\xf9@R\xda1$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    dict_0 = {}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    int_0 = -964
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    int_0 = 2495
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    int_0 = 1547
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    int_0 = 2725
    none_type_0 = None
    module_1.finditer(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    bool_0 = False
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bytes_0 = b"\xc0\xcac\x9cm\xbb\xca\xf1&\xf68\xd1\xfc\x9eO\xa9e\x8b"
    module_1.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    bytes_0 = b"\x95n\x18\x8dV\x8b\x80\xdb\xd0\xd0"
    list_0 = [bytes_0, bytes_0, bytes_0]
    dict_0 = {bytes_0: list_0}
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    bytes_0 = b"\xdb\x1b\x19B3"
    str_0 = "GAd:p6Jx!(\x0cru-}"
    none_type_0 = None
    var_0 = module_1.template(bytes_0)
    var_0.__contains__(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    str_0 = "Cz.Y!"
    module_1.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    str_0 = '`q5"?A5|D'
    error_0 = module_1.error(str_0, str_0)
    module_0.get_new_command(error_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    int_0 = -1513
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    int_0 = -1720
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    int_0 = -152
    module_1.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    bool_0 = False
    none_type_0 = None
    module_1.split(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    str_0 = "@Kl)Fe\nemzJ]P~Mt6^"
    bytes_0 = b"\xb4\xa4\x17\xc74{\xc8\xe05?\x91"
    module_1.match(str_0, str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    str_0 = "}aG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    int_0 = -317
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    str_0 = "gSY?wG|htv<e}|`Ry"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    error_0 = module_3.Error()
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    bytes_0 = b"\x0e\x1d\x1f\x10\xa6\x13\xc2#\x15\x14\x15\xdc\xb9\xedz"
    var_0 = module_1.match(bytes_0, bytes_0)
    module_1.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    float_0 = 280.71631
    module_1.subn(float_0, float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    float_0 = -4638.896583
    list_0 = [float_0]
    module_1.finditer(float_0, list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    bytes_0 = b"<<\xa2\x804\xe5\xd5\xe9\t\x0c\xd2"
    var_0 = module_1.search(bytes_0, bytes_0)
    module_0.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_1.finditer(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    dict_0 = {}
    none_type_0 = None
    module_1.fullmatch(dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    bytes_0 = b"\xae\x16\xf7N\xd2\xb3c/T\xd6\xcc\xde\x85(\x1cv\xdc\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    int_0 = 838
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    float_0 = 466.039
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    bool_0 = False
    module_1.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    complex_0 = 1395.879746 - 7133.572j
    module_1.findall(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    float_0 = -1079.64502
    int_0 = -896
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    bool_0 = False
    module_1.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    bytes_0 = b"\xc8"
    module_2.EnumMeta(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    none_type_0 = None
    str_0 = "EE"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    bytes_0 = b"\xed^$p\xa1V\xa5\xdf&\\Z\xa3\x9e\x8e\xd1\xfb$\xd2f"
    module_1.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    int_0 = -1713
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    str_0 = "`BG\x0c51@Q7cBtl"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1162():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1163():
    bytes_0 = b"\xb6\xed\x93\x80]\xce\x9a\xbe\x93m\x03xy\xab4\x85ENs"
    module_1.sub(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    str_0 = "d:CE33EL A*"
    module_1.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    str_0 = "+i<"
    tuple_0 = ()
    module_1.fullmatch(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    float_0 = 1220.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    int_0 = -3482
    module_1.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    str_0 = "G_rZvBrP0xI$u5P:\nz"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    none_type_0 = None
    module_1.compile(none_type_0)


def test_case_1170():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1171():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    int_0 = 3657
    var_0 = module_1.purge()
    tuple_0 = (int_0, var_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    bytes_0 = b"\xbc\x81Q_\xad\xef\xe5;z\xd4\x9d\x17\xa9\xfa\xfa7\xff1\xd4\x82"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    int_0 = 2333
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    dict_0 = {}
    base_exception_0 = module_4.BaseException(**dict_0)
    none_type_0 = None
    module_0.get_new_command(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    int_0 = 1773
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    dict_0 = {}
    auto_0 = module_2.auto(**dict_0)
    module_0.match(auto_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    str_0 = "2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    int_0 = -917
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    str_0 = "%8WT&))_ZDh={\\znK"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    int_0 = -1716
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    complex_0 = -407.056491 + 3924j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    str_0 = "~*Q!#l\\^v@4ON&`"
    str_1 = "_=Mi:W;M]^G/5nL"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_1}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    int_0 = -220
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    int_0 = -214
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1193():
    var_0 = module_1.purge()
    set_0 = {var_0}
    module_0.get_new_command(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    var_0 = module_1.purge()
    int_0 = -1919
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    str_0 = ") f\x0bHP7Ny!4,\x0b((\r2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    bool_0 = False
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    int_0 = 1475
    module_1.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "e="
    str_1 = "mUd0LZ9[1<DR?^(fQts"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_2.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    bytes_0 = b"\x9b\x04\xa7\xcb\xe6\xfd\x05lW\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_0.get_new_command(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    str_0 = "I_1#;:czDb8=<f\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    set_0 = set()
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_0.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    int_0 = 237
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    bytes_0 = b"\x86\xbc\x13"
    none_type_0 = None
    module_1.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    bytes_0 = b"X\x93\xea$\xb1\xd22\xf6\xf6\x0fgpa"
    var_0 = module_1.split(bytes_0, bytes_0)
    float_0 = -145.1
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    set_0 = set()
    none_type_0 = None
    module_1.finditer(none_type_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    bytes_0 = b"\x8dv\xdd\xf8\xc2/<~\xe8\xf5\x0fD\x87b\xa2F\x8b\xcc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    float_0 = -107.84
    none_type_0 = None
    module_1.subn(float_0, float_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    int_0 = 820
    int_1 = 6
    set_0 = {int_0, int_1, int_0, int_1}
    module_1.findall(set_0, set_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    bytes_0 = b"g\xc3|i\x91I"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    float_0 = -4661.054
    module_4.BaseException(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    complex_0 = -3204.017852 - 76.982j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    int_0 = -2263
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    int_0 = -3065
    none_type_0 = None
    module_1.split(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    int_0 = 1738
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    none_type_0 = None
    module_4.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    int_0 = 52
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    str_0 = "$.0jWI^f$JCx5T6"
    module_0.match(str_0, str_0)


def test_case_1233():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bytes_0 = b"d\xe1\x05\xf6\xf8\x12\xdc"
    var_0 = module_1.subn(bytes_0, bytes_0, bytes_0)
    with pytest.raises(TypeError):
        var_0.__new__(list_0, bool_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    float_0 = -2390.3
    module_1.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    str_0 = "fJ~\n7.\x0bm&S62)' 3R"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    int_0 = -1615
    module_1.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    none_type_0 = None
    complex_0 = 1167.167 - 3310.647j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bytes_0 = b"\x1e\xa0\xfd\x06n\x1b\x116\x80\xb3"
    var_0 = module_1.escape(bytes_0)
    var_1 = module_1.template(var_0)
    module_0.match(var_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    bool_0 = True
    none_type_0 = None
    str_0 = "KGTU_z5DVwi"
    var_0 = module_1.compile(str_0)
    var_0.__setattr__(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    bytes_0 = b"\x1b\xfd\x81\xb5\xefg\xc0\xc0\xd5\xb0"
    module_1.finditer(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    list_0 = []
    error_0 = module_3.Error(*list_0)
    set_0 = {error_0}
    module_1.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    list_0 = [regex_flag_0, regex_flag_0, regex_flag_0, regex_flag_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    exception_0 = module_4.Exception(*list_0)
    module_0.get_new_command(exception_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    str_0 = "HO\t< \x0bpsUc};V "
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    bytes_0 = b"\xb8\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    int_0 = -131
    module_1.sub(int_0, int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    int_0 = 1731
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    int_0 = 6
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_1.sub(dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    str_0 = "&rS\\\rn:i]"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    str_0 = "jR/pB kcSu#k;b{"
    var_0 = module_1.fullmatch(str_0, str_0)
    module_0.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bool_0 = True
    module_1.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    tuple_0 = ()
    module_1.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    str_0 = "1lbO7>W\\\x0b0U@=KI"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    str_0 = "KS\\D+Iex)C("
    var_0 = module_1.escape(str_0)
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    error_0 = module_3.Error()
    none_type_0 = None
    module_0.get_new_command(error_0, none_type_0)


def test_case_1265():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1266():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    int_0 = -1367
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    str_0 = ";38<AgHZjRHn%Gj7fr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    bool_0 = True
    module_1.match(bool_0, bool_0)


def test_case_1271():
    int_0 = 2316
    none_type_0 = None
    dict_0 = {}
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(int_0, int_0, int_0, none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    base_exception_0 = module_4.BaseException()
    module_0.get_new_command(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    str_0 = "KX0 `p.s\x0ct3}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    float_0 = -272.2433
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    float_0 = 2731.617
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    list_0 = []
    error_0 = module_3.Error(*list_0)
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    int_0 = 240
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    bytes_0 = b"-\x13@\xa0\xec;\x12T\x13lo\xa9\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    bool_0 = False
    none_type_0 = None
    module_1.findall(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    str_0 = "p:>#X<kl4"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    module_1.finditer(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    dict_0 = {}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    int_0 = -486
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    float_0 = -1632.0
    list_0 = [float_0, float_0, float_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    bool_0 = False
    module_1.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    enum_dict_0 = module_2._EnumDict()
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    list_0 = []
    module_1.subn(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    bytes_0 = b"\xb7"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    bytes_0 = b"\x95\xd5.\x05\xff\xe2\x16\x19\xa64\xdbnw\x91\x06F\xae\x81"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    bytes_0 = b"\xe9\xc4"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    dict_0 = {var_0: bytes_0}
    module_1.fullmatch(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    str_0 = "30\\GKS_v450,}Ci4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    str_0 = "]\t"
    none_type_0 = None
    module_1.subn(str_0, none_type_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    int_0 = 1417
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    none_type_0 = None
    str_0 = " :Mc?xs9jBp#!n"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    float_0 = 4321.0
    module_1.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0]
    tuple_1 = (list_0,)
    list_1 = [tuple_1, list_0]
    module_1.fullmatch(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    int_0 = -2043
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    int_0 = 834
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    int_0 = -2767
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    float_0 = 1718.93919
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1310():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    int_0 = -1983
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    complex_0 = -984.4 + 1893j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    bytes_0 = b"\x86\x0e\xd1M\x9e\xb48\x1f\x86:ADY\x9d\x02\x1f9PT"
    none_type_0 = None
    module_1.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    str_0 = "Q#K&}B3"
    module_1.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    str_0 = "\x0b$8^~aU<L}'H>A|"
    set_0 = {str_0, str_0}
    module_1.findall(set_0, set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    float_0 = -4371.776462
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    int_0 = 142
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    var_0 = module_1.purge()
    bool_0 = False
    none_type_0 = None
    module_1.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    bool_0 = True
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_1.findall(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    dict_0 = {}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    none_type_0 = None
    enum_dict_0 = module_2._EnumDict()
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    str_0 = "(|`!"
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    none_type_0 = None
    list_0 = [none_type_0]
    module_2.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    str_0 = "2"
    none_type_0 = None
    module_1.findall(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    list_0 = []
    base_exception_0 = module_4.BaseException(*list_0)
    bytes_0 = b"t'#\x98D\xb4[\xa8\xc6\x85\x19\x02\xbfc\t3\xe1\xd0"
    module_0.get_new_command(base_exception_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    complex_0 = -958.703057 + 1654.1j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    int_0 = 987
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    error_0 = module_3.Error()
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    module_2.unique(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    int_0 = -2964
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    str_0 = ' pW9"9FmbC=?WpEZzT>'
    var_0 = module_1.escape(str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    bytes_0 = b"\x9e\xbdP2S\x1c$C\x7f\xa1\x14)yN4"
    module_1.compile(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    bytes_0 = b"\x0f\xeb\xd4a=\xe1\xfd\xfdg\xc0"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    int_0 = -1786
    module_1.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    exception_0 = module_4.Exception()
    dict_0 = {
        exception_0: exception_0,
        exception_0: exception_0,
        exception_0: exception_0,
    }
    module_0.match(dict_0, exception_0)


def test_case_1351():
    int_0 = 1065
    var_0 = module_1.purge()
    dict_0 = {int_0: int_0, var_0: int_0, var_0: int_0}
    bytes_0 = b"\x00f"
    var_1 = module_1.template(bytes_0)
    with pytest.raises(AttributeError):
        var_1.__getattr__(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    int_0 = -362
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    set_0 = set()
    module_1.split(set_0, set_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    str_0 = "\\e6MS4 \tcg1xlc"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    auto_0 = module_2.auto()
    none_type_0 = None
    module_0.get_new_command(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    str_0 = "`{@@\tMG"
    var_0 = module_1.purge()
    var_0.scan(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    float_0 = -5509.593323
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    int_0 = 2198
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    str_0 = "Mfe#}:YIvSYW9mT"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    complex_0 = -838.13764 - 4221j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.scan(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


def test_case_1365():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1366():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setattr__(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    object_0 = module_4.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    str_0 = "5\\>F.R"
    var_0 = module_1.escape(str_0)
    var_1 = var_0.__dir__()
    module_0.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    bytes_0 = b"\x0c\x08\xbd\x04H\xa9\xd0i#\xefNw\xac"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_1.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bytes_0 = b"l"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    tuple_0 = ()
    var_0 = module_1.purge()
    var_0.__delattr__(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    int_0 = 2444
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    int_0 = -5199
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    float_0 = 3082.920633
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    str_0 = "ZdBKQ(Cvu!a$"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    bool_0 = False
    none_type_0 = None
    module_1.subn(bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    bytes_0 = b"\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    int_0 = 1468
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    bytes_0 = b"\x87t\xf9\xfe("
    error_0 = module_1.error(bytes_0)
    module_1.split(error_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    int_0 = -2016
    none_type_0 = None
    module_1.search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    float_0 = -1482.669
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    bytes_0 = b"\x8fG\xab\xa3\x92\x9c:OL\xd3\xd0\xa3i\xd7\xfc\xc9\x9c;\x80M"
    bytes_1 = b"\xef\xc9\x9f\x14Y.un"
    bytes_2 = b"U\xc2\xf6\x8d;\xe3\x13\x1c\x9a\xa4\x91R3=\x90]\xe9\x83\x92"
    list_0 = [bytes_0, bytes_1, bytes_2, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    int_0 = -2824
    list_0 = [int_0, int_0]
    str_0 = "5q&vC"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_2.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    bytes_0 = b"~\x03~\x88\xf6V\xecw\xdc@\x19\xdf\x07\xa8\r\x12\xce\xaa\x0b\xdc"
    none_type_0 = None
    module_1.sub(none_type_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    str_0 = "g?0v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    int_0 = 1513
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    bytes_0 = b""
    none_type_0 = None
    module_1.split(bytes_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    var_0 = module_1.purge()
    module_1.split(var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    bytes_0 = b""
    module_1.finditer(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    str_0 = "$~6u;fi'\x0c|{"
    var_0 = module_1.escape(str_0)
    module_0.match(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    int_0 = 163
    list_0 = [int_0, int_0, int_0]
    module_2.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    str_0 = "ul%k,f*`V"
    module_1.Pattern(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    none_type_0 = None
    int_0 = 1462
    module_1.fullmatch(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    int_0 = 2406
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bool_0 = True
    bool_1 = True
    module_1.split(bool_1, bool_0, flags=bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    bytes_0 = b"\x9a"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1401():
    bytes_0 = b"\x18\x16\xdf\x9c\xa5\x80nl\xa6A\x99\xde\xb6\xb0\xea\x89"
    var_0 = module_1.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    bytes_0 = b"\x98\xbcl(\x1fP|\x9c*\x98;\xc4"
    module_1.fullmatch(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    tuple_0 = ()
    list_0 = [tuple_0]
    bytes_0 = b"z\x89"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1405():
    list_0 = []
    auto_0 = module_2.auto(*list_0)
    module_3.Error(*auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    base_exception_0 = module_4.BaseException()
    module_0.get_new_command(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    int_0 = 234
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    int_0 = -287
    module_1.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    float_0 = 459.207
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    float_0 = -3430.63603
    module_1.split(float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    int_0 = -3115
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    int_0 = 2514
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    complex_0 = 2127.846 + 1052.1285j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    var_0 = module_1.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    complex_0 = -3558.0121 - 226.69j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    object_0 = module_4.object()
    module_1.split(object_0, object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    bool_0 = False
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_1429():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, pos=none_type_0)
    module_0.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    int_0 = -2098
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    bytes_0 = b"*G\xc5\xc3p\x9a\x1e\xe8,\xb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1440():
    bytes_0 = b"\xe8\x9e[D\xa0\xe1SS\x84u\xdc\x8b\xe6kR\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    tuple_0 = ()
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    int_0 = -753
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    int_0 = 5387
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    bytes_0 = b';%\x80t\xac \xafY"F\xd8\xc53K\x95\x9a\x18\xab\x0b\xc4'
    module_0.match(bytes_0, bytes_0)


def test_case_1446():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1447():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    none_type_1 = None
    module_2.unique(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    int_0 = -3877
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    str_0 = "-"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    bool_0 = False
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    float_0 = -838.2328
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    int_0 = 1415
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    bytes_0 = b"\x98\xb4\x11\xb0n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    str_0 = "-38?*Pwm;z"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0, none_type_0)
    module_1.Scanner(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    str_0 = "7]1K<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    none_type_0 = None
    str_0 = "W\x0cP7Jp"
    var_0 = module_1.escape(str_0)
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    none_type_0 = None
    enum_dict_0 = module_2._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    int_0 = 202
    none_type_0 = None
    module_1.sub(int_0, none_type_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_0.get_new_command(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    int_0 = 357
    list_0 = [int_0, int_0]
    tuple_0 = (int_0, list_0, int_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    int_0 = -233
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    bytes_0 = b"\x08\xebr\x86\x13^\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    tuple_0 = ()
    none_type_0 = None
    module_1.fullmatch(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    bytes_0 = b"T\x16{\xb4\x12\xc5\xdfuZN3"
    var_0 = module_1.compile(bytes_0)
    module_0.get_new_command(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    bytes_0 = b"3M\xb6AdB\xe2=\x08\xad\xb4\xd6\xcf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    int_0 = 913
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    str_0 = "AG5*Pb2Vg=FD*mNK}>G,"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    bytes_0 = b",Z\xcc<\x9e\xb4(\xd3K\xca\xf5\xd2\x1c\xbe{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    float_0 = 517.453955
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    dict_0 = {}
    error_0 = module_3.Error(**dict_0)
    module_1.finditer(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    float_0 = 1468.51
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    none_type_0 = None
    var_0 = module_1.purge()
    module_1.findall(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    int_0 = -2886
    var_0 = module_1.purge()
    var_0.__iter__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    dict_0 = {}
    module_1.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.findall(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    str_0 = ">_&~2\x0c5na}D"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    tuple_0 = ()
    dict_0 = {}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    int_0 = 1833
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    list_0 = []
    str_0 = "$"
    none_type_0 = None
    str_1 = "`L"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
    }
    module_2.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    str_0 = "\x0cQQu"
    dict_0 = {str_0: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    bytes_0 = b"v\x8b2\x080\xb5\r\x08\xa4\xa6\x12_\xa03"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    bytes_0 = b"s\x06Z5Q\x13\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    str_0 = "9bSMs"
    none_type_0 = None
    module_1.fullmatch(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    list_0 = []
    module_1.subn(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    float_0 = -1374.677
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    str_0 = "X\x0cg>fH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    int_0 = -1575
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    bytes_0 = b"\x0c\xf6\xcf?\xcf?};?.\xeb=D\x91"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1498():
    bytes_0 = b"\x12Jp<\xb1\xd9\xa5\xddL\x1c]\x103/\xc6\xec\xb7 "
    error_0 = module_1.error(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    bytes_0 = b"\x1b=\xf8)H\x82\xab\x99\x02\xdf~\xe0Kpc\x0e\x8d"
    float_0 = 506.0
    module_1.subn(bytes_0, bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    regex_flag_0 = module_1.RegexFlag.ASCII
    set_0 = {regex_flag_0, regex_flag_0, regex_flag_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


def test_case_1503():
    bytes_0 = b"\xbe\x05\xd6"
    var_0 = module_1.escape(bytes_0)
    list_0 = [var_0, bytes_0]
    str_0 = " &@\\~d#?@Fk"
    var_1 = module_1.escape(str_0)
    with pytest.raises(TypeError):
        var_1.__new__(list_0, var_0, list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    float_0 = -1086.226
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    list_0 = []
    module_1.subn(list_0, list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    float_0 = 489.722
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    float_0 = -807.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    str_0 = "dI]n7 O>``7C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1512():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    complex_0 = 1450.32 + 778j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_1514():
    str_0 = "E734<r."
    str_1 = "\\g D{T\t]Skl\\X\x0c("
    var_0 = module_1.match(str_0, str_1)
    with pytest.raises(AttributeError):
        var_0.__getattr__(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    str_0 = "fQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


def test_case_1520():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1521():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1524():
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    list_0 = [regex_flag_0, regex_flag_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    bytes_0 = b"\xf9\xd73\xd8/CE\xa05\x96.\xa2\x02s"
    module_1.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_1.fullmatch(none_type_0, exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    str_0 = "+I?L.(O>,&7\tR"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__delattr__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1531():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    int_0 = -2778
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    int_0 = -2233
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    none_type_0 = None
    str_0 = "q)]F9Kr"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    float_0 = 1528.009
    bool_0 = True
    module_1.template(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_1538():
    dict_0 = {}
    none_type_0 = None
    module_1.sub(dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    int_0 = 1573
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    bytes_0 = b"S\xcftr\x0f\xd4"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_1.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    float_0 = 742.478247
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    bytes_0 = b"\xb7\xaf\x19\xbb\xea\x11"
    var_0 = module_1.purge()
    module_0.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    int_0 = 1363
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_1547():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    base_exception_0 = module_4.BaseException()
    set_0 = {base_exception_0, base_exception_0, base_exception_0, base_exception_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    float_0 = -2036.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    int_0 = 1122
    none_type_0 = None
    module_1.finditer(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    int_0 = -925
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    int_0 = 902
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    bool_0 = False
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    int_0 = 487
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1555():
    var_0 = module_1.purge()


@pytest.mark.xfail(strict=True)
def test_case_1556():
    str_0 = "u}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    int_0 = -1485
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    str_0 = "0;*dmAa_c%\n="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    str_0 = " wuo6;PhBoh|{?Lpv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    str_0 = "BK\x0cc22JezPj)|=72"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    str_0 = '~hA}jM6AT_"%6ld<'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    int_0 = -2837
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    int_0 = -2411
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1573():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    str_0 = "Z]%C\n"
    module_1.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    bytes_0 = b"u\xd0\xef\x88\x90\x9e\x8d;"
    str_0 = "rP'w;@MlnkHzikE1+VR-"
    none_type_0 = None
    module_1.match(bytes_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    int_0 = 2520
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    bytes_0 = b"T\xa3\xb3\x16\x0f\x81\xaf\xae[\xa5\x12\xb2^aP\xb0\xdd#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    var_0 = module_1.purge()
    int_0 = 2562
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    int_0 = 169
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0}
    module_0.get_new_command(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    str_0 = "X`:Qv:|l6Y\t"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    str_0 = "(THUdH@L\x0b6uq[k;)0`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    list_0 = []
    module_1.findall(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    bytes_0 = b"_\xcd\xa76\xa8\xfc\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    int_0 = -1352
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    str_0 = "lChqrSX(94_F%bB\t\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    int_0 = -1700
    list_0 = [int_0, int_0, int_0]
    var_0 = module_1.purge()
    module_0.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    complex_0 = 1558.01 - 3689j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    complex_0 = 711.754 + 160j
    str_0 = "DeY{S|$9/MF"
    dict_0 = {str_0: complex_0}
    module_1.Match(*complex_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1604():
    int_0 = 677
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    float_0 = 554.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    bytes_0 = b"\x8d)\xb3]Vx&\xcb\x9c\\F\xbb\x9fG\xa1B\xfaL&"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    int_0 = 1075
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    int_0 = 362
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    bytes_0 = b"\xd0y\x93\x84n"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1610():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1611():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    none_type_0 = None
    int_0 = 281
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0]
    module_1.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    str_0 = "oT@yD<\nS_]:7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    bytes_0 = b"Q\x9f\x02z\x1f7U-\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    str_0 = "`sc/S&=\x0b]N*p)#)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    int_0 = 93
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    float_0 = 632.2
    var_0 = module_1.purge()
    var_0.scan(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    bytes_0 = b"\xd4$"
    none_type_0 = None
    module_1.template(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    float_0 = 816.0
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    bytes_0 = b"\xbcQN/\x810"
    var_0 = module_1.split(bytes_0, bytes_0)
    module_0.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    bytes_0 = b"\xe3"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_3.Error(**list_0)


def test_case_1625():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1626():
    str_0 = "3g]B\t3mYO62]i"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    bytes_0 = b"u\xf7\xf7\x0c\xcbL\xe0\x14\x92V}s\x96_F\xe2j^"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    int_0 = -683
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    list_0 = []
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    str_0 = "#WQpJd\rM31"
    none_type_0 = None
    module_1.match(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    int_0 = -271
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    str_0 = "(tj@l\x0cj,-w"
    module_1.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    object_0 = module_4.object()
    none_type_0 = None
    module_1.sub(object_0, object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    str_0 = "LG4\x0b<v"
    dict_0 = {str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    int_0 = -1910
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    float_0 = -5971.226
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    str_0 = "IoKd!Lg"
    bool_0 = False
    module_1.finditer(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    int_0 = 264
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    bytes_0 = b"\x05\x06\x87y*\t\xa9\x86q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    auto_0 = module_2.auto()
    module_1.template(auto_0)


def test_case_1649():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1650():
    list_0 = []
    module_1.findall(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    str_0 = "kETxm#"
    var_0 = module_1.purge()
    var_0.scan(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.sub(list_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    var_0 = module_1.purge()
    list_0 = [var_0]
    module_4.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    bytes_0 = b"E\xcc\xa62\x94y\x07\x9eIg:\xea\xfb\xe7"
    none_type_0 = None
    module_1.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    str_0 = '"H\x0bNt~To4IK'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    int_0 = -1336
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    str_0 = 'gvk>"jB'
    str_1 = "EU"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    module_2.EnumMeta()


def test_case_1663():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1664():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    none_type_0 = None
    module_2.EnumMeta(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    bool_0 = False
    module_2.auto(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    bytes_0 = b"\xa0"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    bytes_0 = b"\xb3\x1aC\xbc\xe3)\xdf&=^s\x05'\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    module_1.match(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    int_0 = -267
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    int_0 = -1981
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    float_0 = -966.439
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    int_0 = -4412
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    str_0 = "`|!:I*p\x0b+\n}@\tp@&7*x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    float_0 = 4144.30534
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    int_0 = 1216
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    float_0 = -893.533904
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    int_0 = -1112
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    str_0 = "$suTo./%PLa??+1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


def test_case_1688():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1689():
    float_0 = -4126.561096
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    str_0 = 'Y*/I"+Bm"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    float_0 = 1821.5324
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    none_type_0 = None
    bytes_0 = b"\x14l,xI\x1c\xd6A\xaaM\xbe?\x1d+\xed"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    str_0 = ">)Lf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0, none_type_0)
    module_0.get_new_command(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    int_0 = -955
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    int_0 = 787
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    int_0 = 1973
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.search(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    float_0 = -3464.29106
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    var_0 = module_1.purge()
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    int_0 = -2085
    none_type_0 = None
    module_1.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1705():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    int_0 = -2245
    list_0 = [int_0]
    tuple_0 = (int_0, list_0, int_0, int_0)
    list_1 = [tuple_0]
    error_0 = module_3.Error(*list_1)
    module_1.findall(error_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    bytes_0 = b"G\x13\t\x07@\x19ir`!3ULk\xcfwU"
    none_type_0 = None
    module_1.findall(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1709():
    var_0 = module_1.purge()
    complex_0 = -2087.05 + 307.5751j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bytes_0 = b"\xae\x98\x8f+B\xb2\x90$F\x0bw\xf7v\xeb\xb5\x8b\xd1\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    bytes_0 = b"\x12\x9fU\x12\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    float_0 = 1993.101
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    var_0 = module_1.purge()
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bool_0 = True
    module_1.split(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    bytes_0 = b"W_l"
    module_1.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    bytes_0 = b"\xdb\xdd\x7f\xdf\x8a\xe3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1723():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1724():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    none_type_0 = None
    bool_0 = False
    module_1.subn(none_type_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    int_0 = 1279
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    bytes_0 = b"\x0c\xaad\xc7\xab\xe87?B\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    str_0 = "\x0b@)tC.U,xqx.u$Z0on;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    bytes_0 = b"\x06]d\xbf\xb1SrN\nH\xef\x1d\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    bytes_0 = b"\xc4\xc0\xd9\t\xdd\x84\xd5\x86\\\xe9s\xee\xba\x92\x91>\xfd\x10"
    bool_0 = True
    module_1.subn(bytes_0, bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    int_0 = -1290
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    float_0 = 3215.644
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    float_0 = 2246.015728
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    bytes_0 = b"\x0e\xdf\x87\xc6\x1c`\x8b\xba:\xd0\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    str_0 = "(ac\x0bD\n}+KY]"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bytes_0 = b"\xdc\x92\x16\xb2\x00\xd2"
    none_type_0 = None
    module_1.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    bytes_0 = b"\xc4f\xe0\x04LeC\xab1\x0e\x05\xc7S\xa5m"
    module_1.split(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    int_0 = 2070
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    int_0 = 2067
    set_0 = {int_0, int_0}
    module_1.search(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    float_0 = 1934.877428
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    module_0.match(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    int_0 = 932
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    int_0 = -1420
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    bytes_0 = b"X\nlq"
    var_0 = module_1.compile(bytes_0)
    set_0 = {var_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    str_0 = "rR[R6%"
    module_1.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    str_0 = "t\x0cUwwTwWHP/Z(_k0UR"
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    str_0 = ""
    var_0 = module_1.compile(str_0)
    module_0.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    str_0 = "HXlJFS"
    bytes_0 = b"\xeat5\xa1"
    var_0 = module_1.compile(bytes_0)
    var_0.__repr__(str_0)


def test_case_1761():
    none_type_0 = None
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    with pytest.raises(TypeError):
        var_1.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    str_0 = "\\ H'oz`]Q^5"
    dict_0 = {str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    var_0 = module_1.purge()
    str_0 = ")>]m%'/h\\\rMt!&"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    int_0 = -3420
    var_0 = module_1.purge()
    tuple_0 = (int_0, var_0, var_0, var_0)
    module_2.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    list_0 = []
    list_1 = [list_0, list_0]
    module_1.fullmatch(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    int_0 = -1996
    module_1.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    str_0 = "kw7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    var_0 = module_1.purge()
    set_0 = {var_0, var_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    str_0 = ":I*R)7m%(9J("
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    float_0 = -1438.6
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    int_0 = 390
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    str_0 = "9El=qvj!bJR\x0cz{+0I"
    set_0 = {str_0}
    list_0 = [set_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_1777():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1778():
    int_0 = 1962
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    str_0 = "YcUbj4ZZ\t<ebV$3Ru]\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bytes_0 = b"\xb5\x0e9\x0b\x10\x14\x80\x83\x83~"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    complex_0 = -259 - 2329j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    complex_0 = 409.29134 + 1750.998j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    set_0 = set()
    module_1.sub(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    int_0 = 699
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    int_0 = -374
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    bytes_0 = b"\xf05\xf8\x00 \x84\x87\x05\xe3\xf4T'\xabEb\x92\xc9"
    bytes_1 = b"\x1d-d\xf8\x99\x8b\x82*i+"
    list_0 = [bytes_0, bytes_1, bytes_1]
    module_0.get_new_command(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    tuple_0 = ()
    none_type_0 = None
    module_1.fullmatch(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    int_0 = 1072
    module_1.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    bytes_0 = b"`J\xa4Wc\x025~\x84\xbd\xa9\xcc\xe4"
    var_0 = module_1.escape(bytes_0)
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1794():
    bool_0 = False
    module_1.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    float_0 = -1140.3
    module_1.escape(float_0)


def test_case_1796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1797():
    complex_0 = 1873.86 - 2178j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    int_0 = -3298
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    var_0 = module_1.purge()
    var_0.__getitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    complex_0 = 2006.34 + 2824.10874j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    none_type_0 = None
    int_0 = 5
    module_1.split(none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    dict_0 = {}
    list_0 = []
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    float_0 = 486.08
    module_1.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    none_type_0 = None
    str_0 = '}ZriKB>"$V$?]+k+ATn('
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    int_0 = 1222
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    float_0 = 1152.367627
    str_0 = 'Ei{e-"S\x0cD "CQt\ru|e2'
    list_0 = [float_0, str_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    float_0 = 802.9348
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    exception_0 = module_4.Exception()
    module_0.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_1815():
    float_0 = -1359.1152
    set_0 = {float_0, float_0}
    module_1.findall(set_0, set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, bool_0}
    module_1.search(set_0, set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_2.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    module_1.finditer(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    str_0 = "OgT@,]z5!O9P"
    module_1.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    tuple_0 = ()
    none_type_0 = None
    module_1.sub(none_type_0, tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    str_0 = "g3\\y+*Ydw\x0cX~PHnF"
    none_type_0 = None
    str_1 = '("Bi$/hGx,$<'
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_2.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    bool_0 = True
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    str_0 = ":];Z&t(1Kw=wX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    str_0 = "AmC(\n\\V[i#8r2M\x0b+X:P"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    str_0 = "uvTU>f3,NeG@EOV`"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_1.sub(tuple_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    complex_0 = -1418 - 1700j
    bool_0 = False
    dict_0 = {complex_0: bool_0, complex_0: complex_0, bool_0: bool_0}
    module_1.subn(dict_0, dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    bool_0 = True
    none_type_0 = None
    module_3.Error(*bool_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    list_0 = []
    module_1.subn(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    tuple_1 = (tuple_0, bool_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    str_0 = "akz#S2z='WguI7Xd,2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    str_0 = "d$= y*9kY\nlw/28CCt2"
    var_0 = module_1.match(str_0, str_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    complex_0 = -1175.570168 + 2713.2533j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    int_0 = -1676
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    float_0 = -2306.52192
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    bool_0 = True
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    int_0 = 491
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    int_0 = 271
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    bytes_0 = b"W\x81\xa1\x10\xa5V\xfe\xb2\xc1*\xbf\x92|\xac\x1d\xf5"
    list_0 = [bytes_0]
    module_1.sub(list_0, bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    str_0 = "4\t;9=*9"
    var_0 = module_1.subn(str_0, str_0, str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    str_0 = ",Z3x9\\/jk:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    bytes_0 = b"\xaaQ\xda\xb7\x93\xb4A7,\x11\xe6\x80i\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    list_0 = []
    list_1 = [list_0, list_0]
    error_0 = module_3.Error(*list_1)
    module_0.match(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    bytes_0 = b"\xdc\xb5\xfc"
    none_type_0 = None
    module_1.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    int_0 = -212
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    int_0 = -3017
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    int_0 = 412
    error_0 = module_1.error(int_0, pos=int_0)
    module_0.get_new_command(int_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    complex_0 = -855.904 - 2361j
    none_type_0 = None
    module_1.finditer(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    bytes_0 = b"L\xad\x98\xb6\xba\xad\xf4R+\x17\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    list_0 = []
    module_1.search(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    bool_0 = False
    module_1.compile(bool_0)


def test_case_1863():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1864():
    bytes_0 = b"\xae"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    bool_0 = True
    str_0 = "D6y6z,|"
    module_1.split(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    complex_0 = -1144.3 + 3869.50644j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    float_0 = 2978.1365
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    bytes_0 = b"\xc0\xcd\xb8\xd1\x02\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1872():
    int_0 = -154
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    bytes_0 = b"'IR\xafE\xad"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    str_0 = "vU]'u:K\x0cIKmBF-rP-"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    str_0 = " ua\n*UB,P<5idV2r9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    error_0 = module_3.Error()
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    int_0 = -122
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    str_0 = "-_8}cdY(1]~w"
    module_1.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    int_0 = -1576
    none_type_0 = None
    module_1.finditer(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    float_0 = 2976.6719
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__reversed__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    str_0 = "N!j`Y"
    none_type_0 = None
    module_1.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    dict_0 = {}
    module_1.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    bytes_0 = b"\xd15\xef\x95\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    bool_0 = False
    none_type_0 = None
    module_1.split(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    none_type_0 = None
    base_exception_0 = module_4.BaseException()
    error_0 = module_1.error(none_type_0, base_exception_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    int_0 = 1912
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    str_0 = "WOqG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    bytes_0 = b"4\xaa\x7f\xc6\\\xc7D\x01\xdfn\x19\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    float_0 = -604.7337
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    float_0 = -1350.6
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    int_0 = 1580
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    bytes_0 = b"\xb5\x1arTF\xc7\x8e\xbd\xad\x03~\xbc\xe4"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    float_0 = 406.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    bytes_0 = b"\xc1\xa6\x16\x9a\x15\x06\xd5=\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    complex_0 = 548.4 - 1486.2348j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    bytes_0 = b"\xb1\xe5\xc1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    float_0 = 1455.59
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    int_0 = -2049
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    int_0 = 853
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    var_0 = module_1.purge()
    var_1 = module_1.purge()
    var_1.__contains__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_1.subn(none_type_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    bytes_0 = b"pRI\xbex\x16\xa7B-iD$\x0e\xa8\x15.\x95\xaa\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_1.sub(none_type_0, dict_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    bool_0 = True
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    str_0 = "crbg}]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    str_0 = "<V|UR$#\rf_4LhYec^Ij"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    bool_0 = True
    module_1.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1923():
    bytes_0 = b"\xdc\xec\xf0"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    int_0 = 2323
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    bytes_0 = b"A\x17\xb9\xfes\xfd|\xe0\x02"
    var_0 = module_1.search(bytes_0, bytes_0)
    module_1.subn(var_0, var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    int_0 = 2901
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    str_0 = "u2dQ]1GW[n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    set_0 = set()
    list_0 = [set_0]
    module_0.get_new_command(list_0, set_0)


def test_case_1930():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1931():
    str_0 = "ZS\"x5'\r)ZUfr&>VM"
    var_0 = module_1.escape(str_0)
    none_type_0 = None
    module_0.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


def test_case_1933():
    var_0 = module_1.purge()


@pytest.mark.xfail(strict=True)
def test_case_1934():
    str_0 = '"'
    dict_0 = {str_0: str_0}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    str_0 = "\\5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    str_0 = "/\t5H<.A"
    list_0 = [str_0]
    str_1 = "9"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: list_0, str_1: list_0}
    module_3.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    str_0 = "+hrU{\rU0gNUJ-?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    bytes_0 = b"]xR6\xd1\xfd\xfdf|\xe7\xec\xe9m\x93"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_1.template(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    str_0 = ")S%IX\x0c;r e4"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    bool_0 = True
    str_0 = '8\x0c=R\\$I0\x0bo"zUA`bcy'
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    bool_0 = False
    bool_1 = False
    module_1.search(bool_0, bool_1)


def test_case_1945():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1946():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    int_0 = 667
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1951():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    bytes_0 = b"\xac"
    none_type_0 = None
    module_1.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    int_0 = 3556
    str_0 = "Kr+\\#E/$Y>#yj-["
    dict_0 = {int_0: int_0, str_0: str_0, str_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_1955():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1956():
    complex_0 = -3915.38 - 3194.034928j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    str_0 = "w|j{M2b;"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    bytes_0 = b"\x8cck\x9c\x82\x02\xc3\xd9Q\x1d\xc2\xec\x89xX\x00V\xb4}\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    var_0 = module_1.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    float_0 = -2290.55
    bool_0 = False
    module_1.match(float_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    list_0 = [regex_flag_0, regex_flag_0]
    module_1.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    bytes_0 = b"\x19\xedEO9\x12\x96\n\x8ej\x01\xc9\xd5\xa2n\xd0\rz"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    bool_0 = False
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    int_0 = -2955
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.finditer(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    float_0 = 1061.426
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    str_0 = "F*BTTrR-"
    complex_0 = 2703.538 - 2010j
    dict_0 = {str_0: str_0, str_0: str_0, str_0: complex_0, str_0: complex_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    bytes_0 = b"S\xdc\xc1\xad$\xda0\x81\xe1#\x01\xb5M\x19+\xb9\xca}"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    int_0 = -1198
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    int_0 = -458
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    complex_0 = 2529.11 + 2180.6438j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1978():
    bytes_0 = b"\xe4+y"
    module_1.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    str_0 = 'M="~n+9'
    var_0 = module_1.escape(str_0)
    module_2.EnumMeta(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    bytes_0 = b"\xa3QO\x868:\xdf\x7f?\x90"
    module_2.unique(bytes_0)


def test_case_1981():
    base_exception_0 = module_4.BaseException()


@pytest.mark.xfail(strict=True)
def test_case_1982():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    int_0 = -96
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    int_0 = 1118
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    bytes_0 = b"\x89;\xfd\xcf\xe9\xee\x98|\xa4\xe0\xe1\x93\x11\xab\r\xaf\x9c\x01L"
    var_0 = module_1.purge()
    module_0.get_new_command(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    str_0 = "l#g@Z9#\x0cJLy!/\nu]T"
    var_0 = module_1.escape(str_0)
    list_0 = [var_0, var_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    bytes_0 = b"G\xdc\xb5\xecQ\xaf$\x15z\x8d\xab\x93\x82H!\xb4"
    module_1.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    bool_0 = False
    int_0 = -2571
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    str_0 = '"Ag>7[z +KH\\>x@'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    bool_0 = False
    error_0 = module_1.error(bool_0, bool_0)
    module_0.match(error_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_1.Scanner(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    str_0 = "UQXXES%R"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    dict_0 = {}
    module_1.split(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    none_type_0 = None
    bytes_0 = b"\x15\xdc\x10a<\xf7\xf7{)\xa2>a\x99M"
    var_0 = module_1.purge()
    var_0.__getitem__(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    object_0 = module_4.object()
    module_1.search(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    float_0 = 564.2764
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    str_0 = "Y*]E~8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_0.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    float_0 = 107.409
    none_type_0 = None
    module_1.split(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    none_type_0 = None
    float_0 = -1732.0
    module_1.sub(none_type_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    bytes_0 = b"9C\x85\xb8\x81\xe0-\x9dy\xcf\x12{\x1d\xb2\x18^\xa9 u"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    bytes_0 = b'\x91QB\x97"\xa9X\xaeS\xc7\x05\x92'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2006():
    bool_0 = True
    list_0 = [bool_0]
    module_1.sub(bool_0, list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.subn(dict_0, dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    str_0 = '0YC:bHVxZUb2y|t#X"'
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    int_0 = -1215
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    str_0 = "Ivt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    int_0 = 1893
    none_type_0 = None
    module_1.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    var_0 = module_1.purge()
    module_1.match(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    str_0 = ".J4_e;&Y|2?_TTNG!5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    str_0 = ".v \\\t;\\UDZo\njKy`/"
    module_1.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    str_0 = "l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    str_0 = 'QJ5{{#;B]v";]&'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    complex_0 = -1456.4 + 3825.82j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    int_0 = 831
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    dict_0 = {}
    module_1.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    bytes_0 = b'Mg~\xa1\xa8\x06"\xc5$\xffH\x83\x9d'
    set_0 = {bytes_0}
    module_1.search(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    int_0 = 160
    module_4.Exception(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    int_0 = 177
    bytes_0 = b"\xdd_\x1c\xb4r\xe2"
    dict_0 = {int_0: int_0, int_0: bytes_0, int_0: bytes_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    str_0 = "7cUL\x0b ="
    dict_0 = {str_0: str_0}
    module_2.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    complex_0 = 3106.1487 - 2290.557j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    bytes_0 = b"\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    str_0 = "w8:%6 "
    var_0 = module_1.escape(str_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    str_0 = '+0oU\r\t""[1\x0b6Q}\rKs/'
    module_1.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    str_0 = "<5Kt\r{"
    module_1.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    int_0 = 750
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    int_0 = -390
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    bool_0 = False
    list_0 = [bool_0]
    module_1.finditer(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    bool_0 = True
    none_type_0 = None
    int_0 = -216
    module_1.findall(bool_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    float_0 = 314.19665
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    str_0 = ">"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    float_0 = -3001.005
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    str_0 = "S,UFUrcb+1[].8PB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    none_type_0 = None
    str_0 = '>8-Z>%8Wl"NVh'
    str_1 = "Qk[_.an"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_3.Error(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    none_type_0 = None
    bytes_0 = b"\xd5\xef\xff?"
    module_1.fullmatch(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    str_0 = "QI<D5s_feE*[l%Z"
    str_1 = '.6">|D\x0bSFbO97)\tULMH'
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    int_0 = 3361
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2052():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    str_0 = "\n#k[Ea&-!9%:E\x0bu"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    error_0 = module_3.Error()
    str_0 = '"mm7sF#IRK?J26'
    str_1 = "H(s;cwA3`XF;&%l$?"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    int_0 = -1074
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    str_0 = '^4_By&"q'
    none_type_0 = None
    module_1.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    str_0 = "'F[p<Cyh@<=aVD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    float_0 = -1984.63379
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    bytes_0 = b"\x1a"
    module_1.split(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    bytes_0 = b"\x12\xcd;\xc5\xb6\xbe\xb4\xce\x07\x00\x04j\xe4z\t"
    none_type_0 = None
    module_1.findall(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_1.finditer(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    int_0 = 58
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    var_0 = module_1.purge()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    float_0 = -4305.7306
    none_type_0 = None
    module_1.findall(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_1.fullmatch(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    bytes_0 = b"\x9c$\xca\xf2\xde\xbe\x92\xc8\x18\xf5YXy\x1d?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_1.split(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    str_0 = '5@5=.\nzSx"QE\rG\x0c,S)'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    bytes_0 = b';\x0f\xd9\xc3z\xf8\xd8=\xa8/l\x10\xd1|"r'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    str_0 = '?^"e{S'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    float_0 = 1718.6
    module_1.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    none_type_0 = None
    module_1.escape(none_type_0)


def test_case_2080():
    none_type_0 = None
    var_0 = module_1.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    bool_0 = False
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    bytes_0 = b"\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    int_0 = 271
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    int_0 = -2861
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    int_0 = -2484
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    str_0 = "vbX?#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    bytes_0 = b"\x8b\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    int_0 = 55
    list_0 = [int_0]
    module_1.finditer(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    int_0 = -3472
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    str_0 = "84y0RoRQ\ttK3]4dYh<lx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    int_0 = 2076
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    dict_0 = {}
    var_0 = module_1.purge()
    var_0.__repr__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    str_0 = "m@m~<gx1%A{A$&8"
    module_1.split(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    bool_0 = True
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    str_0 = "%C-0M1gl?=-fzebj\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    complex_0 = -2508.37 - 658j
    none_type_0 = None
    module_1.fullmatch(complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    bytes_0 = b""
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    str_0 = "G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


def test_case_2117():
    str_0 = "r<"
    var_0 = module_1.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    float_0 = 1844.325261
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    str_0 = "n$FYBWT?]v\\"
    module_1.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    float_0 = -0.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.template(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    int_0 = -1682
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    int_0 = -273
    none_type_0 = None
    module_1.findall(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    str_0 = "j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_0.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    bytes_0 = b"\xc8q\xd8\xb8\x95p\x8c\xd4V\xf5\xf7\x8d\xccZn+\x00 \xdc\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_2.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    bytes_0 = b"UV\x9dC\xc5\xf2:\x81b\xa9\x97\x18b\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    list_0 = []
    module_1.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    bytes_0 = b"\x89X\x03\x8f\x07u\xd4$9m\xbb"
    module_4.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    int_0 = -1447
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    bool_0 = True
    str_0 = "l'% "
    var_0 = module_1.compile(str_0)
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    tuple_0 = ()
    module_1.template(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    int_0 = 933
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    int_0 = -691
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    none_type_0 = None
    bytes_0 = b"j\x14$\x89PtD"
    module_1.split(none_type_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    dict_0 = {}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    int_0 = 3462
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    bytes_0 = b"\xdd^"
    var_0 = module_1.purge()
    var_0.__repr__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    int_0 = -1411
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    str_0 = "@=vF"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, tuple_0}
    module_1.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    str_0 = "s~N_L#FfL'+mmE2\x0cV)n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    bytes_0 = b"V+L\xe9f\x98\x90\xc2j\x8b\xea\xee\xa5\xce"
    module_0.match(bytes_0, bytes_0)


def test_case_2151():
    var_0 = module_1.purge()


@pytest.mark.xfail(strict=True)
def test_case_2152():
    float_0 = 1067.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    none_type_0 = None
    set_0 = {none_type_0}
    module_1.fullmatch(none_type_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    str_0 = ">0Iik"
    var_0 = module_1.match(str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    set_0 = set()
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    bool_0 = True
    module_1.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    int_0 = 2744
    none_type_0 = None
    module_1.sub(int_0, int_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    bytes_0 = b"\x8f\xe2I\xac\x82\x81\xf7"
    none_type_0 = None
    module_1.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    bytes_0 = b'\x145\xd3\x10\x15\x9e^\xa1$\xd3\x10\x99u"\xa4\x0e\x9f\x01\xae'
    none_type_0 = None
    var_0 = module_1.subn(bytes_0, bytes_0, bytes_0)
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    str_0 = ";h(lKC&_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    str_0 = '8\\{yP;{"SF@ZNRDx`'
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    str_0 = "8BVP\\S"
    none_type_0 = None
    module_1.subn(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    bytes_0 = b"\x80\xdeb\xb2\x99>+\x12\x87\x9eI\x1e\xe7P\x14\x91|3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_2.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    int_0 = -264
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    int_0 = -1751
    module_0.get_new_command(int_0, int_0)


def test_case_2171():
    none_type_0 = None
    str_0 = "G45sj0'xpb`\nu!P"
    var_0 = module_1.fullmatch(str_0, str_0)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    complex_0 = 2139.5746 + 2266.266j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    bytes_0 = b"\xd5O)\x83\xc7\x9f#\x00W"
    var_0 = module_1.purge()
    module_0.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    complex_0 = -3652.2 + 1382.93j
    none_type_0 = None
    module_1.split(complex_0, none_type_0, flags=complex_0)


def test_case_2176():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2177():
    float_0 = 303.1016
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    bytes_0 = b"\xdf\xb0N\x1e\x96\xe4N\x93'F"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    var_0 = module_1.purge()
    error_0 = module_1.error(var_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    float_0 = -546.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    bool_0 = True
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    complex_0 = 3470.56 + 1959.66303j
    module_1.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    bytes_0 = b"R\x80\xbdj\x06ey\xfd\x9a\xd4xo\x18F5\xf8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    int_0 = 267
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    float_0 = 1251.6
    list_0 = [float_0, float_0, float_0]
    module_1.findall(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    int_0 = -785
    module_1.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    int_0 = 2339
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    str_0 = " `,K%\rO\x0cOuIPw5x<Mp|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


def test_case_2194():
    none_type_0 = None
    str_0 = "H{m*^:COnFj"
    var_0 = module_1.split(str_0, str_0)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    str_0 = "3@}AEf}Ya# hQ~<S"
    var_0 = module_1.sub(str_0, str_0, str_0)
    var_1 = module_1.purge()
    var_1.__getitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    bytes_0 = b"\x81Yk\xa6\xd6mi\xda\xae\xb3X\x06v<\x17Y`V\xec\xe3"
    none_type_0 = None
    module_1.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    bytes_0 = b"*\xa6\xde\xab\x84\xc5\x88\\*|\x1b\x8d\xe6\x0b\xdb\xa3\xb2D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    bytes_0 = b"M\x9c\xa2b\x8c\x8a\x1c\xe4\x07'"
    var_0 = module_1.template(bytes_0)
    module_0.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    float_0 = 2491.0
    tuple_0 = (float_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    int_0 = 4073
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    bytes_0 = b"\xa9\x84\xb57\xf4\xa6qCa\xbb\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    str_0 = "8Ryny]Ge)Q_Y2`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    str_0 = "-#E0${ou*zu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2209():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2215():
    bytes_0 = b"\xa4p\x1a\xb6b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    list_0 = []
    module_1.match(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    int_0 = 2594
    module_1.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    str_0 = "yu"
    str_1 = ",GOeP+G_\t3sBp75"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    float_0 = -2278.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    float_0 = 1819.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    int_0 = -918
    module_0.match(int_0, int_0)


def test_case_2222():
    bytes_0 = b"\x04\x1d_\xe3\xae\xe8\xa4s\xc3\xd4^4\xda\x9cp"
    bool_0 = True
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    with pytest.raises(TypeError):
        var_1.__contains__(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    int_0 = -159
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    complex_0 = 3283 + 805.03196j
    module_1.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    int_0 = -3430
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    str_0 = "3nP\tX\\Ae[%V@Rb\x0c2W"
    none_type_0 = None
    module_1.subn(str_0, none_type_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    str_0 = 'H*F0"s@s'
    none_type_0 = None
    str_1 = ""
    str_2 = "?nM@8G~2&g"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    var_0 = module_1.purge()
    var_0.__delattr__(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    bytes_0 = b" \xca\x02\xbda\xba\x01o\x13O\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    str_0 = "!Rvu"
    none_type_0 = None
    module_1.sub(str_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    bool_0 = True
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    bool_0 = True
    bytes_0 = b"N"
    module_1.finditer(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    str_0 = "J|\r@QrG3x9BG3.d"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    float_0 = 2453.86582
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    float_0 = 3489.3
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_1.compile(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    int_0 = -2251
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    int_0 = 1908
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    float_0 = -3102.12
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    bytes_0 = b"\x7f\xf6\x00\x00\x95\xaag\x9c\xb4\x1e\xbbH\xd5\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    str_0 = " =oW[;LT\x0c+a"
    module_2.EnumMeta(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    bool_0 = True
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    dict_0 = {}
    none_type_0 = None
    module_1.fullmatch(dict_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    var_0 = module_1.purge()
    tuple_0 = ()
    module_1.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    var_0 = module_1.purge()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    str_0 = "2)\nX"
    none_type_0 = None
    str_1 = "?EJ+"
    str_2 = "NKhE~/|h18=n^I"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_2: none_type_0,
    }
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    var_0 = module_1.purge()
    module_1.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    str_0 = "E77]\x0bO]("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    float_0 = 1559.9
    module_1.split(float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    exception_0 = module_4.Exception()
    int_0 = -2535
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


def test_case_2258():
    pass


def test_case_2259():
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2263():
    float_0 = -6.0
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2265():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2266():
    enum_dict_0 = module_2._EnumDict()
    module_0.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    float_0 = 847.92
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    bytes_0 = b"\x9f\xab\xd1D\x9b@\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2274():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    int_0 = -3065
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    bytes_0 = b"\xcd\xe8\xa8\x85\xe4T\x18\xc2\xadB\xb8\x8a~\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    complex_0 = 835 - 2297j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    float_0 = -982.588
    module_1.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    str_0 = "WQ]=\r(L#~\\cWv0ittJ`'"
    set_0 = {str_0}
    module_1.finditer(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    float_0 = -2852.005
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    float_0 = -227.36
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    str_0 = "?@Q )"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    int_0 = -1508
    list_0 = [int_0]
    none_type_0 = None
    module_1.subn(list_0, list_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2289():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2295():
    str_0 = "+.fz+Xi!l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    complex_0 = 2097.2 - 19.736j
    module_1.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    str_0 = "ZeuZ,"
    none_type_0 = None
    module_1.finditer(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    bytes_0 = b"\x0b\x14;[\xe7\xab,\xbb\x94\xae[u\x80i"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    float_0 = 1685.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    bytes_0 = b"Dm"
    module_1.finditer(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    str_0 = "x]z@0*Lf;G$q%W]q!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    bytes_0 = b"r\xb3\xd7\x1e?\x17\xd8\xd0\xdb\xaa4j\x16\xa1\x0c\xe5\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    str_0 = "x/=?xMJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    int_0 = -3255
    none_type_0 = None
    module_1.template(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0)
    module_0.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    str_0 = 'tl5sJ":.\r]jMvy'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    bytes_0 = b"\xa7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    str_0 = "E?w,!"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    bytes_0 = b"4\x1c\xdd\xee\xd6\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_2.EnumMeta(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    str_0 = "$\nR4:$\\Dqa\x0bN]"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    str_0 = ":?DunRibR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2316():
    bytes_0 = b"\xb0\xb2\x85\xf7\xdfAv\x80Hi\xdb\x81H\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    none_type_0 = None
    bytes_0 = b"\xc7\xc7yEr\xaa\x1d\xe6\x10\x06\xeb\xe3Y\xac\x17\x14j"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    bytes_0 = b"*\x04WH\x02\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    var_0 = module_1.purge()
    bytes_0 = b"\x88]v"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2323():
    list_0 = []
    none_type_0 = None
    module_3.Error(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    float_0 = 897.0
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    str_0 = "["
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    str_0 = "#aZW8FJhL8m-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    str_0 = "q!UnHgo4v"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    float_0 = 2170.8
    set_0 = {float_0, float_0, float_0}
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2330():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    str_0 = "f&`OIlRsIf)D"
    none_type_0 = None
    module_1.subn(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    bytes_0 = b"\x11R\x19\xfdrD\x82h\x08e\xd0sX>Z\xb1\xcc"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    complex_0 = -1398 - 2187.84565j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    str_0 = "\x0ca$SGf2\tB("
    str_1 = "$}|"
    dict_0 = {str_1: str_1, str_0: str_1, str_0: str_1, str_0: str_1}
    str_2 = "6W#)"
    dict_1 = {str_0: str_0, str_1: str_0, str_0: dict_0, str_2: str_1}
    module_1.Match(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    bytes_0 = b'\x1e\xe7\xca?\x06\xc79\x12\x07\x8b\xb4\xf6\n\xec"\x95\xe7x\x06'
    var_0 = module_1.purge()
    var_0.__iter__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    enum_dict_0 = module_2._EnumDict()
    module_0.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    int_0 = 1846
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    str_0 = "G*O)|k@lBqkZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    float_0 = -60.2345
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    list_0 = []
    module_1.template(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    list_0 = []
    module_1.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    var_0 = module_1.purge()
    module_1.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    complex_0 = 357.8586 - 892.4j
    module_1.Scanner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    str_0 = "ZZWdj&.,lb!M'K;H"
    var_0 = module_1.escape(str_0)
    dict_0 = {str_0: str_0, str_0: str_0, var_0: str_0}
    module_1.template(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    int_0 = 253
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    bool_0 = True
    bool_1 = True
    module_1.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    str_0 = "AnlN^gSFK\n^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    int_0 = 1106
    error_0 = module_1.error(int_0, pos=int_0)
    set_0 = set()
    module_1.findall(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    float_0 = -3247.3694
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    none_type_0 = None
    str_0 = "EOGIAa\t10"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    int_0 = 873
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


def test_case_2357():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2358():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.finditer(none_type_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    int_0 = -2070
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    bool_0 = True
    module_1.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    set_0 = set()
    none_type_0 = None
    module_1.split(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    tuple_0 = ()
    error_0 = module_3.Error()
    module_0.match(tuple_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    int_0 = 2121
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    float_0 = 4011.54
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    int_0 = -506
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    set_0 = set()
    module_1.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    int_0 = -1308
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    float_0 = -3953.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    int_0 = 1629
    module_2.auto(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    int_0 = 3985
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    bytes_0 = b"C\xbd\x02\xc7\x82\x81\xa5\xc2w\x9fG"
    none_type_0 = None
    module_1.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    str_0 = "BY^kLTF5dSO=K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    str_0 = "t74z$bGhyFh!"
    var_0 = module_1.subn(str_0, str_0, str_0)
    tuple_0 = (str_0, var_0)
    module_0.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    bytes_0 = b"\xd5\xfb"
    var_0 = module_1.match(bytes_0, bytes_0)
    var_0.__setitem__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2381():
    bytes_0 = b"\xc6D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    int_0 = 3826
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    str_0 = ";ou'>Z[LVKKM&;y c?nq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    int_0 = -3580
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    bool_0 = False
    var_0 = module_1.purge()
    var_0.__getitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    bool_0 = True
    error_0 = module_1.error(bool_0)
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    int_0 = 880
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    str_0 = "VbDb.$<qB%ujjps"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    var_0 = module_1.purge()
    module_1.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    complex_0 = 1642.96597 + 1276j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_2.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    str_0 = "'7,(~::B]}L"
    module_0.get_new_command(str_0, str_0)


def test_case_2395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2396():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    var_0 = module_1.purge()
    error_0 = module_1.error(var_0)
    var_0.__delattr__(var_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    bytes_0 = b"\xcf\xb5\xd91\xab\xdd\x82D\xba\x07"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    float_0 = 1376.85578
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    complex_0 = -3270.123 - 14.14j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    str_0 = "/J^n1"
    var_0 = module_1.sub(str_0, str_0, str_0)
    dict_0 = {str_0: var_0, str_0: var_0, var_0: str_0, var_0: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    int_0 = 288
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    complex_0 = -1012.6 - 2973.51j
    module_1.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    none_type_0 = None
    str_0 = "+@cg"
    module_1.split(none_type_0, none_type_0, flags=str_0)


def test_case_2407():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2408():
    int_0 = 379
    none_type_0 = None
    module_1.split(int_0, none_type_0)


def test_case_2409():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2410():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    bool_0 = False
    module_0.get_new_command(regex_flag_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    var_0 = module_1.purge()
    dict_0 = {}
    module_1.subn(var_0, var_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2413():
    str_0 = "h(I+\n\r=\x0bP?8Wm&lYZRq"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    bytes_0 = b"\xde\xb4E\x07]\x18"
    var_0 = module_1.split(bytes_0, bytes_0)
    module_1.search(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    bytes_0 = b"\x15j\xc6\xdbU^\xebSb\xd0y\x95\xa9"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    str_0 = "NV}/k\x0c|_A\tJ@QSA"
    dict_0 = {str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    list_0 = []
    var_0 = module_1.purge()
    var_0.__call__(list_0, list_0, start=list_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    str_0 = "n}a[`e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    bytes_0 = b"\xd7+\x12\x02Z@y\xd8\xe6.\xe3\xb50\xdaI\x06\x0f"
    none_type_0 = None
    module_1.sub(bytes_0, none_type_0, none_type_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    bytes_0 = b"\xbazW8\xe1L\xf8-\xe1\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    dict_0 = {}
    error_0 = module_3.Error(**dict_0)
    module_0.get_new_command(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    str_0 = "CgDk(Gd`"
    error_0 = module_1.error(str_0)
    module_1.findall(error_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    bool_0 = False
    module_1.compile(bool_0)


def test_case_2428():
    tuple_0 = ()
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(tuple_0, tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    str_0 = "Z;!^Lg+b"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    str_0 = ";Uu09"
    var_0 = module_1.compile(str_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    int_0 = 2746
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    object_0 = module_4.object()
    bytes_0 = b"\xdd\xc8k\xcd:\x81$\xf9\xe1\x08\xdfs"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    bytes_0 = b"&\x18\xcb\xe0\x88\xe8"
    str_0 = 'q\tG\t}%DU50G\x0cf\x0c.l?M7"'
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    var_0 = module_1.purge()
    str_0 = "43G?[#l|\x0b_\x0c\\w15EdgI"
    none_type_0 = None
    module_1.split(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    bytes_0 = b"?6\xbdT)\xa8A5\xc4\xb6\x16\xbc\x94\x87\xc5?\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    bool_0 = True
    str_0 = "Ut&\x0cKv*mTi 8W6T>"
    module_1.split(bool_0, str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    tuple_0 = ()
    module_1.subn(tuple_0, tuple_0, tuple_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    float_0 = 699.09
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    str_0 = "o;8^^i<jo`{M"
    none_type_0 = None
    module_1.split(str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    str_0 = "L v\n$_7r>{"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    error_0 = module_1.error(set_0, pos=set_0)
    set_1 = {error_0, tuple_0, tuple_0, error_0}
    list_0 = [set_1]
    module_1.search(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    int_0 = -2864
    tuple_0 = (int_0,)
    set_0 = {tuple_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    bytes_0 = b"\xe5\xb7\x06\xa3\xac\xb3A\x9e\xcbc<.\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    bytes_0 = b"\x99\x7f\xa7W\t\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    str_0 = "-PkuJy;vomN9B,DZ"
    module_1.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    error_0 = module_3.Error()
    module_1.finditer(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    float_0 = -1636.1225
    none_type_0 = None
    module_1.subn(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    str_0 = "q#m}8B"
    var_0 = module_1.split(str_0, str_0)
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    complex_0 = 5006.61013 + 595.8j
    str_0 = "yGt!lF"
    module_1.fullmatch(complex_0, str_0)


def test_case_2460():
    str_0 = "wMOg=rzoM!\x0cUpa"
    none_type_0 = None
    str_1 = ":=v&"
    var_0 = module_1.split(str_1, str_1)
    with pytest.raises(TypeError):
        var_0.__setitem__(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    object_0 = module_4.object()
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_1.Scanner(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    none_type_0 = None
    str_0 = "sR0w"
    var_0 = module_1.compile(str_0)
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    bool_0 = False
    none_type_0 = None
    module_1.findall(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    str_0 = "N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    int_0 = -3452
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


def test_case_2468():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2469():
    str_0 = 'Mg"%r+i8\x0b>004'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    bytes_0 = b"0\x15.c\xf9{ \x00\x1f\xffj\xe3\xab\xbaW\xda!\x16\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    str_0 = "h*b [[*1i[o&a;2\r93 "
    module_1.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    str_0 = "(~QL=gF+\tB"
    none_type_0 = None
    str_1 = "5"
    str_2 = "@B2r"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    dict_0 = {}
    module_1.split(dict_0, dict_0)


def test_case_2475():
    pass


def test_case_2476():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2477():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bool_1 = True
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    bytes_0 = b",\x88\xb5\x1c\x14\x02AM\x954"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0, var_0: var_0}
    module_0.get_new_command(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    float_0 = 1489.0
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    bytes_0 = b"%<u\\<Q\xb0IkO"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    int_0 = -476
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    int_0 = 1475
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    str_0 = "B7I>>>`H{-?E5FJ"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    bytes_0 = b"\xdf\x8a\xa5\xa1\xf2E\xac\xa1\xcc\xab5o"
    none_type_0 = None
    var_0 = module_1.split(bytes_0, bytes_0)
    module_1.finditer(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    int_0 = 2456
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2491():
    int_0 = -1557
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    int_0 = -1535
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    int_0 = 5174
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    str_0 = ".q\nmm"
    none_type_0 = None
    module_1.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    complex_0 = 3370.28956 - 1064j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    bytes_0 = b"\x12G\x1e\xb6\xa4"
    module_1.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    int_0 = -1852
    var_0 = module_1.purge()
    var_0.__reversed__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    tuple_0 = ()
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    int_0 = -809
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    bytes_0 = b"\xc9\x8f}tp"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    bytes_0 = b"W\xd1\x0c\xc2\xf8\x7f\xb7M[u\xee7\xde:\x19"
    module_1.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    str_0 = "lv?^^FcK\\q\nB8p"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bytes_0 = b"\xb1\xd9\xa8\x17\xa0\xc2\x8d\x06@\x1c4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    set_0 = set()
    module_1.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    bool_0 = True
    list_0 = [bool_0]
    module_1.match(list_0, bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    float_0 = 2380.02
    module_1.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    int_0 = -5563
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    float_0 = 950.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    int_0 = -450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    set_0 = set()
    module_1.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    bool_0 = True
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    str_0 = "lc$2"
    var_0 = module_1.escape(str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    bytes_0 = b"V\xfa\xda\xa7\xd1\xb2\x0f\xab\x94\xa9\x91\x80\xf6\xacq_\x06\xc7"
    var_0 = module_1.subn(bytes_0, bytes_0, bytes_0)
    float_0 = 3059.181
    module_1.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    str_0 = "/\x0b"
    none_type_0 = None
    module_1.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    bytes_0 = b"\xd5\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    var_0 = module_1.purge()
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    float_0 = 225.4
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    str_0 = "'0n.DmvW j\x0cucRZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    bytes_0 = b"f\xa4,\xb2}\xd8\xe7|?4gS\x9fH$\x84\xf2)"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    var_0 = module_1.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    int_0 = 1110
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    complex_0 = 1513.2012 - 1205.2j
    module_1.subn(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    none_type_0 = None
    str_0 = "P_-a<my5zx*&"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    str_0 = "/V=pr>"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_4.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2539():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bytes_0 = b"\xf9#\x95\x0f\x95\xc8zPB.\x9d\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    int_0 = -2412
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    float_0 = 4.65803
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    int_0 = -1594
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    bytes_0 = b"\xd9\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    bytes_0 = b"2\x8dW\xf3\xe7Jj\xd9"
    var_0 = module_1.match(bytes_0, bytes_0)
    module_1.subn(bytes_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    complex_0 = 974.445 + 2195.0676j
    module_1.search(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    int_0 = 967
    module_1.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    str_0 = "Rijr\x0c/IC!a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    int_0 = 0
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    list_0 = []
    module_1.sub(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    str_0 = "B,Fa8W|;"
    none_type_0 = None
    module_1.template(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    bytes_0 = b"^\x89!\xf1\xc4L\xd2M\xb7\xb3\xfd,\xbbJ\x95\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_1.finditer(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    str_0 = "<"
    var_0 = module_1.search(str_0, str_0)
    module_1.subn(var_0, var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    bool_0 = True
    float_0 = -575.900947
    set_0 = {bool_0, bool_0, bool_0, float_0}
    str_0 = "p'\"q`=P/ZJ"
    list_0 = [set_0, set_0, str_0]
    module_1.search(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    str_0 = "^#RxaGi@Mo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    bytes_0 = b"\xe5Vb\xff*<\x9c\x8c\x9fR\xbf;"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    bool_0 = False
    none_type_0 = None
    module_1.search(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    bool_0 = False
    str_0 = "k}9QySyD(ZT[i#\x0c@!E{Q"
    module_1.finditer(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    var_0 = module_1.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    error_0 = module_3.Error()
    module_2.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    dict_0 = {}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    int_0 = -1663
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    bool_0 = False
    none_type_0 = None
    module_1.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    complex_0 = 1142.466029 + 781.88052j
    module_2.EnumMeta(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    float_0 = 3522.741
    set_0 = {float_0}
    none_type_0 = None
    module_1.sub(set_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    complex_0 = -2080.343 - 2747.63392j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    float_0 = -2452.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    int_0 = -391
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    int_0 = 2553
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    enum_dict_0 = module_2._EnumDict()
    bool_0 = True
    module_0.get_new_command(enum_dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    float_0 = 2037.926
    list_0 = [float_0, float_0, float_0, float_0]
    module_2.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    str_0 = "PXShebb\x0bXplEdm"
    none_type_0 = None
    module_1.split(str_0, none_type_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    error_0 = module_3.Error()
    set_0 = {error_0, error_0, error_0}
    bool_0 = True
    module_1.findall(set_0, set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    int_0 = 471
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    str_0 = "\tv[}2x54u91{hPb'?ECf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    str_0 = "SJL#v"
    module_1.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    module_1.finditer(list_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    set_0 = set()
    none_type_0 = None
    module_1.subn(set_0, set_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    none_type_0 = None
    float_0 = -1409.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    bytes_0 = b"\xd1a9\xbd]\x1fU"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    bytes_0 = b"|\xd9\x92\xb0\xb5\x0ew\xec\x1a\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    str_0 = "j {6JTkm\x0cs\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    var_0 = module_1.purge()
    module_1.finditer(var_0, var_0)


def test_case_2599():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2600():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0}
    module_1.split(dict_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    str_0 = "\x0bt^vRJGcN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    str_0 = "Bs[(oi|eI*Uu1(\x0cnqn"
    dict_0 = {str_0: str_0}
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    error_0 = module_3.Error()
    int_0 = 1906
    none_type_0 = None
    module_1.compile(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    int_0 = 2387
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    set_0 = set()
    module_1.findall(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    int_0 = -848
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    int_0 = 2291
    none_type_0 = None
    module_1.split(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bytes_0 = b"!\xa9\x84\x04|\xb9j\xf5\xec\x15\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    bytes_0 = b"IzW'\x9a\xe5A\xfa%\xf6"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    float_0 = -525.41
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    bytes_0 = b"\xfb\xfe\x0f\xf9\xa4\xee0\xe9\xa3=\x93\x1a{\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    auto_0 = module_2.auto()
    set_0 = set()
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    int_0 = -885
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    float_0 = 855.64758
    module_1.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    int_0 = 3046
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    float_0 = -959.397
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    list_0 = []
    list_1 = [list_0, list_0]
    dict_0 = {}
    base_exception_0 = module_4.BaseException(*list_1, **dict_0)
    module_1.escape(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    str_0 = "o$KZ=D%\x0cf64>Md"
    none_type_0 = None
    module_1.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    int_0 = 1753
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    float_0 = -4331.4664
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    bytes_0 = b"\xea\xa1\xb8\x92\xfb\xce\xfd="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    list_0 = []
    module_1.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    bytes_0 = b"t\xd8z\xd5\x1f\xb1\x17\xef!R\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    str_0 = "9Sm3Xf-F}G;D Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    str_0 = "|"
    module_1.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    int_0 = 1455
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    set_0 = set()
    none_type_0 = None
    module_1.finditer(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    none_type_0 = None
    var_0 = module_1.purge()
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    float_0 = 2409.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    float_0 = -783.034
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    str_0 = "Pi[4pB^%X\ndYn6R}Up>K"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    float_0 = 1800.164364
    none_type_0 = None
    module_1.fullmatch(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    int_0 = 2091
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    var_0 = module_1.purge()
    module_1.match(var_0, var_0)


def test_case_2646():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2647():
    dict_0 = {}
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    dict_0 = {}
    module_1.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    bool_0 = True
    bytes_0 = b"\x9e\xc5K\xdcx\x90\xd0\xb2\xd2"
    module_1.finditer(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bytes_0 = b"\xfbM\xfe\x10=Z2\x08\xe9'\xcc[\xbf"
    module_1.split(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    str_0 = "'0"
    var_0 = module_1.escape(str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2656():
    bytes_0 = b"\xf8\xa7\xd4sB\x83\x81\x96\xd1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    var_0 = module_1.purge()
    set_0 = {var_0}
    module_1.findall(set_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    bytes_0 = b"PQ\x9bH\x06\x9f*\xbe\xe16\xa7"
    var_0 = module_1.match(bytes_0, bytes_0)
    int_0 = 1462
    module_0.get_new_command(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    str_0 = "IJ:}s\x0c"
    set_0 = {str_0}
    module_1.fullmatch(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    int_0 = -1455
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    exception_0 = module_4.Exception(*list_0)
    str_0 = "Vkz+\x0b"
    module_0.match(exception_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    bytes_0 = b"`uU\x9aO\xfe\x9ei\x0co\x8dj\xc3\x06Rye\x7f\x84"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    float_0 = -1205.355
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    str_0 = "i8\x0b*E;b,!;i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    int_0 = -1163
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    str_0 = "A4VOUtn<+c"
    complex_0 = 459.400242 - 1760j
    set_0 = {str_0, str_0, complex_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    int_0 = -1742
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    float_0 = -3524.200946
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    bytes_0 = b"\x92\x1fdC\xb9\xe3\xb7X\xa3\x03GW\xec\xa2\xe9yW\xf0\xe5\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    bytes_0 = b"\x18Iy\x14B)I"
    module_1.fullmatch(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    float_0 = -3172.7884
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    float_0 = -394.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    str_0 = "FNHGA%"
    module_0.get_new_command(str_0, str_0)


def test_case_2682():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2683():
    bytes_0 = b"L\x81j\xcbY\xa7\xe7\x19pk\xff\xde\xce\xcf\x00RY"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    str_0 = "_)Ka"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    bytes_0 = b"\xa4?\xcaS\x8c\xad\xf0f\x1d(4d\xba\xd1i\xc3\xbeA"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2687():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    float_0 = -1039.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    int_0 = -339
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    float_0 = 120.1161
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.finditer(tuple_0, bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    str_0 = "+b!Cxe"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    str_0 = "@?f*CB_0dx)"
    dict_0 = {str_0: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    auto_0 = module_2.auto()
    list_0 = [auto_0, auto_0, auto_0]
    module_0.match(auto_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    complex_0 = 931.697606 + 654.75545j
    none_type_0 = None
    module_1.sub(complex_0, complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    int_0 = 503
    str_0 = "[\tD6:o^X"
    str_1 = "l"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_0}
    module_3.Error(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    dict_0 = {}
    module_1.Pattern(**dict_0)


def test_case_2699():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2700():
    str_0 = "\tr\x0bu'qMrW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    dict_0 = {}
    var_0 = module_1.purge()
    var_0.__getitem__(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2703():
    int_0 = -303
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    str_0 = ""
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    str_0 = "p[CA!R_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    bytes_0 = b"\xdc\xee\xa0\xaf\x89L\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    bytes_0 = b"[\x18?\xc6uW\x8cY"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    dict_0 = {}
    float_0 = -1458.0
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    int_0 = 221
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    str_0 = "o7i+;x\rUikB7\nb-@^p"
    module_1.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    dict_0 = {}
    error_0 = module_3.Error(**dict_0)
    bool_0 = False
    module_1.search(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    enum_dict_0 = module_2._EnumDict()
    module_1.split(enum_dict_0, enum_dict_0)


def test_case_2715():
    int_0 = -3019
    none_type_0 = None
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(int_0, none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    str_0 = "/^lg0vI"
    bool_0 = False
    module_1.fullmatch(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    set_0 = set()
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    int_0 = -334
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    int_0 = -616
    module_1.Scanner(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    float_0 = 382.014703
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    exception_0 = module_4.Exception()
    module_1.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    str_0 = "O@\x0b;\te\r;b9]\tsm`AUH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    var_0 = module_1.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    str_0 = ""
    var_0 = module_1.search(str_0, str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_2728():
    int_0 = 710
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    str_0 = "Rx\rBB;;i[d%A NlEce+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    str_0 = "&NqK)u}$l+f\r4i9V}i'H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    str_0 = "k9iq1s%dAp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    float_0 = -1909.371
    module_1.sub(float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    enum_dict_0 = module_2._EnumDict()
    module_1.sub(enum_dict_0, enum_dict_0, enum_dict_0, flags=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    float_0 = 1400.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    error_0 = module_3.Error()
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    str_0 = "5cuUp^OHr?}C\x0cc-\\Q\\\x0b"
    module_1.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    bool_0 = True
    none_type_0 = None
    module_1.findall(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    bytes_0 = b"\xe4\x9f\xbf\xce&5\x9b\xf3n;\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    exception_0 = module_4.Exception()
    module_1.finditer(exception_0, exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    float_0 = -1377.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    str_0 = 'SlS"'
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    str_0 = "SrA"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    bytes_0 = b"P\xc1\x9e \x90\xf7\xee\xf2\xdd\xfb\xe1\x83\xa4\x13KC\xb3\x89L2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    int_0 = -2274
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    str_0 = "R{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    dict_0 = {}
    list_0 = [dict_0]
    exception_0 = module_4.Exception(*list_0, **dict_0)
    module_1.template(dict_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    bytes_0 = b"\xa5\x8c\xf6(\x95D\xa1c\xad4\xdcs\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    str_0 = ":T/=>\tXJ"
    str_1 = "y)/"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    none_type_0 = None
    enum_dict_0 = module_2._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    error_0 = module_3.Error(*list_0)
    module_0.get_new_command(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    str_0 = "O\r[ \x0b+gE1=gFT.Wk{*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    bytes_0 = b"\xc77\x8a\xf4 \x99@v\xee#\xa1\xf1\xa3\x0cf\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    list_0 = []
    var_0 = module_1.purge()
    var_0.__reversed__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    enum_dict_0 = module_2._EnumDict()
    module_1.compile(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    int_0 = 772
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    bytes_0 = b"\xccrHd\xf7\xc4\x99\xa0\xd1D\x9a\x15\x8e\x9c\x92\xe8\xdf\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    none_type_0 = None
    str_0 = "EUs"
    var_0 = module_1.subn(str_0, str_0, str_0)
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    var_0 = module_1.purge()
    str_0 = '">u@NEl0'
    tuple_0 = (var_0, str_0)
    module_0.get_new_command(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    int_0 = -1351
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    set_0 = set()
    none_type_0 = None
    module_1.subn(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    int_0 = 2669
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    float_0 = 2226.635525
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    int_0 = 4253
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    bool_0 = True
    str_0 = "X"
    var_0 = module_1.compile(str_0)
    var_0.__delattr__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    float_0 = 3965.02374
    module_1.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    int_0 = -1569
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    int_0 = -1878
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.fullmatch(bool_0, bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2781():
    int_0 = -1303
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    int_0 = 2211
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    int_0 = 1143
    module_1.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    error_0 = module_3.Error()
    module_1.split(error_0, error_0, flags=error_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    str_0 = "Wh$:"
    var_0 = module_1.sub(str_0, str_0, str_0)
    module_0.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    str_0 = "^#P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    var_0 = module_1.purge()
    str_0 = "Q:-4Y*|O\n&Em{r}I"
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    bytes_0 = b"a\xc0\x12\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    float_0 = -2215.056
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    bytes_0 = b';\xde\xff\x9dQ\xd8)"T\xd6r\xa8d\x9c\x84a\xb4v\xaa\xed'
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    bytes_0 = b"\xe0$\xdb\xef\x1f\xbb\xf2=\xc0\x02\xc7W"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    set_0 = set()
    none_type_0 = None
    module_1.subn(set_0, set_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    bool_0 = False
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    float_0 = -1386.0
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    float_0 = -1627.81
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    int_0 = 2958
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    str_0 = "#E@sPP*\\p"
    module_1.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    int_0 = -1591
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    str_0 = "#qES~N']Kx?^-C})f\r["
    module_1.subn(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    none_type_0 = None
    module_1.Pattern(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    int_0 = -2676
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    int_0 = -984
    none_type_0 = None
    module_1.subn(int_0, int_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    float_0 = 1515.749524
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    str_0 = "_O?"
    none_type_0 = None
    var_0 = module_1.finditer(str_0, str_0)
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    str_0 = "E"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    int_0 = -1101
    none_type_0 = None
    module_1.subn(int_0, int_0, int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    str_0 = "l"
    var_0 = module_1.purge()
    var_0.__contains__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    float_0 = 1077.360525
    module_1.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    float_0 = 740.7961
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    dict_0 = {}
    none_type_0 = None
    module_1.sub(dict_0, dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    bytes_0 = b"a"
    none_type_0 = None
    module_1.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    bytes_0 = b"\x0e\xe2\xe3\x8c&>\x04\x8a\x88X\xf2\xee\x7f\xafz"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    bytes_0 = b"?\x08Rw\xf9\xbfE\xce\x0b*\x18\x0cr"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    float_0 = -2386.635
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    str_0 = 'Y"'
    bytes_0 = b"\x8a\xe6J\x98\xdd\x81\xe5/\xc3\xcaU\xd1\x7fn\x00\xbdM\xa6"
    module_1.subn(str_0, bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    str_0 = "]B,dUJpP|M&k\n"
    var_0 = module_1.sub(str_0, str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    str_0 = "?at_8M\x0cf[@"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    str_0 = "#CrL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    str_0 = "KYE\x0bME|[ST/Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    none_type_0 = None
    str_0 = ";[<Nu]@pV"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    exception_0 = module_4.Exception()
    module_1.compile(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    int_0 = -6398
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    float_0 = 1695.6668
    none_type_0 = None
    module_1.findall(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    bytes_0 = b")"
    module_1.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    float_0 = -1538.076
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    int_0 = -459
    none_type_0 = None
    module_1.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    str_0 = "Ro\x0cQm;E3eTkS;2R<H$"
    module_0.get_new_command(str_0, str_0)


def test_case_2845():
    exception_0 = module_4.Exception()


@pytest.mark.xfail(strict=True)
def test_case_2846():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    dict_0 = {}
    none_type_0 = None
    module_1.findall(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    str_0 = 'A&614.\\-KW3CC\x0b#"ey'
    var_0 = module_1.escape(str_0)
    tuple_0 = (var_0,)
    module_0.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    list_0 = []
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    int_0 = 1959
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    str_0 = "\n&it=!\x0c{/k0\x0cl4"
    module_1.Scanner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    int_0 = -4363
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bytes_0 = b":V\xf3\xe2K"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    auto_0 = module_2.auto()
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    float_0 = 1151.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    str_0 = "X6)~"
    dict_0 = {str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_0.match(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    bytes_0 = b"\xd2\xd0;bv\xff\xe3"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    str_0 = '?"PDwj:z-\r6|\rAQ"Ej:'
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    bytes_0 = b'#\xe2L\x84r`\xb9\x9d\xe1\x0eW\x92\x18\xd3|b\x00c"'
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    bytes_0 = b"\xfb\x10P1\xc9\xf4\xd1\xaf<\x8cQ\xccs\xbd(U\x0f"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    float_0 = -348.401
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    none_type_0 = None
    str_0 = "wv=Q ,\t @MR"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    bytes_0 = b"xn\xc8\xa3>\x19\x9bK\x96\xc3\x7f?\\4\xce\xc7"
    var_0 = module_1.purge()
    var_0.__setattr__(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    none_type_0 = None
    var_0 = module_1.purge()
    module_1.findall(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    str_0 = "3zGigdSV^Q@jv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    bytes_0 = b"\xae\x18"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    int_0 = -2120
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    complex_0 = -2098.73597 - 415.085184j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    str_0 = "+56'L%w\""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    float_0 = 669.56698
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    none_type_0 = None
    int_0 = 1193
    set_0 = {int_0, none_type_0, int_0}
    tuple_0 = (set_0, int_0, set_0)
    module_1.sub(none_type_0, tuple_0, tuple_0, set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    str_0 = "L2c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0)
    module_1.fullmatch(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    str_0 = "F[aGFHIZw}z;"
    str_1 = "d41:-\n=QR*i<\x0bl "
    dict_0 = {str_0: str_0, str_1: str_1}
    module_2.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    float_0 = -372.07179
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    bytes_0 = b"\x1b\x96\x83#"
    module_1.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    bool_0 = True
    none_type_0 = None
    module_1.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    bool_0 = True
    error_0 = module_1.error(bool_0)
    none_type_0 = None
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    int_0 = -953
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__setattr__(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    float_0 = -1724.444493
    list_0 = [float_0, float_0, float_0]
    str_0 = "Qvq\t]RP9S,I\x0b=Bs*"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    float_0 = 273.304697
    module_1.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    int_0 = -697
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    int_0 = 1424
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    int_0 = 201
    module_0.match(int_0, int_0)


def test_case_2907():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2908():
    complex_0 = -3109.3648 - 3324.0411j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.template(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    float_0 = -2224.39346
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    str_0 = "u\nX/"
    var_0 = module_1.match(str_0, str_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_1.findall(list_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bytes_0 = b"\xea\x0e\xd8_v\xfc\xda\xd5\xea\xb6\x9dhsd\xa1\xf4\x0c"
    none_type_0 = None
    module_1.search(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    bytes_0 = b"\x97w\x014,\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_0.match(var_1, var_0)


def test_case_2917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2918():
    bytes_0 = b"\xeb>\x192"
    var_0 = module_1.findall(bytes_0, bytes_0)
    module_1.compile(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    float_0 = 1450.41415
    module_1.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    int_0 = -2058
    list_0 = [int_0, int_0, int_0]
    list_1 = [int_0, int_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    int_0 = -1060
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    bytes_0 = b"\x15U\x93\xd8\x9f's\x0f\n\xf8]D\xeb\xd3\xc5+w\xd3\xf7\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bytes_0 = b"-\x04#\xc6=\xb1\x17^\x1b\xb1\xb4\x94\xa5\xa6\x19\xf2\xde"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    error_0 = module_3.Error()
    module_1.split(error_0, error_0, flags=error_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    auto_0 = module_2.auto()
    list_0 = [auto_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    int_0 = -1446
    none_type_0 = None
    module_1.sub(int_0, int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    int_0 = 596
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    int_0 = 131
    list_0 = [int_0, int_0]
    module_1.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    bytes_0 = b"\xa5\xc57\x01\x11i\xd4\xf1\xcb\x8afX\x13\xa5\x05\xfd\xf2\x03"
    module_1.Match(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    str_0 = "IhLa["
    module_1.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    bool_0 = False
    error_0 = module_1.error(bool_0, bool_0)
    none_type_0 = None
    module_1.sub(error_0, none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    int_0 = 1029
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    str_0 = "~r1I\tt\tA^\ttUWi}nOPB"
    bytes_0 = b"\xa2\xa3\xd0\r\xda\xd1P\xb4\n6"
    dict_0 = {str_0: bytes_0}
    module_2.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2936():
    str_0 = "\")*+'_+Gv,1B"
    none_type_0 = None
    module_1.match(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    str_0 = "1n"
    set_0 = {str_0, str_0, str_0}
    enum_dict_0 = module_2._EnumDict()
    enum_dict_0.__setitem__(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    float_0 = -2060.4
    module_1.Scanner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    int_0 = -493
    set_0 = {int_0, int_0}
    module_1.sub(set_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    int_0 = 2962
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    bytes_0 = b"\xac\xdd\xe0!\x12\xf7K\xcaVl\xdb:`\xb5\xbb\xe9g"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    int_0 = -3578
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    bytes_0 = b"\x0f\xc7\x87\x15\xcddv\x04\xd2\xe6\xf3)\xd6\xc0"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    int_0 = -2350
    module_0.get_new_command(int_0, int_0)


def test_case_2952():
    none_type_0 = None
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    with pytest.raises(TypeError):
        var_1.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    dict_0 = {}
    module_1.template(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    complex_0 = -2304.4 - 2501.3j
    module_1.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    int_0 = -91
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    float_0 = -984.0797
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    str_0 = "Gi'\\+9-sOCG\tYy"
    int_0 = 2404
    none_type_0 = None
    module_1.search(str_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    int_0 = -1608
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    bytes_0 = b"/\xc8\xda\xa2\xa5\\"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    str_0 = "$C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    int_0 = -1168
    set_0 = {int_0, int_0, int_0}
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    int_0 = -440
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    str_0 = "t;p]I(_\rbi~$\\HOqo*9"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    bytes_0 = (
        b"\xab\xd8\xfc\xb8\xben\xa8\x1e\xe3\xba\xe5\xab\xd5\x90\xe8\x1d\x93\x8e\x96\xf0"
    )
    var_0 = module_1.purge()
    module_1.split(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    bytes_0 = b"O\x16g\xd4fx\xd6-7\xde\x9b\xc2\xf2\x86\xfc\xc7\xd8T\x86E"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    float_0 = -2940.68294
    list_0 = [float_0, float_0, float_0]
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    float_0 = -984.4
    module_1.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    int_0 = -1435
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    str_0 = "06`=!7JA5Fx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    bool_0 = True
    module_1.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    str_0 = "rt6d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    str_0 = "934iRVNIgLX9.$u`{h"
    module_1.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    int_0 = 1225
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    complex_0 = -1023.9 + 692j
    module_1.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    none_type_0 = None
    str_0 = ")@|(E2OoV!RFF9r"
    module_1.subn(none_type_0, none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    float_0 = 4356.0
    module_1.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    float_0 = 1065.059012
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    none_type_0 = None
    int_0 = 1270
    module_1.findall(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    bytes_0 = b'\xcc\x8b\x99\x9a"\xaa\x8bw\x1d\xbbH;\xdf9\xff\xdd'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    int_0 = -3309
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    complex_0 = -871.278872 - 607.385j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    bool_0 = False
    none_type_0 = None
    module_1.sub(none_type_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0)
    set_0 = {error_0, none_type_0}
    module_1.split(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    float_0 = -529.94494
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    int_0 = 4409
    none_type_0 = None
    module_1.sub(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    str_0 = "L[kFP~\\[+l`,)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    bytes_0 = b";V\x95]$E\xda\x13\x0b\xaa\xab\x88\xd8\xf2\x8b\xb1\xaf<"
    module_1.split(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    regex_flag_0 = module_1.RegexFlag.DOTALL
    int_0 = 1016
    module_0.match(regex_flag_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    str_0 = "FiOQ{x`Px&{\tb1S{^B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, bool_0, none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    str_0 = "03,/L+B[#"
    module_1.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3007():
    float_0 = -2856.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    float_0 = 1160.135
    module_1.Scanner(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    str_0 = "uL=~u.Y44#"
    var_0 = module_1.findall(str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    int_0 = 3449
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    float_0 = 883.8879
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    float_0 = 2494.3329
    module_1.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    set_0 = set()
    set_1 = set()
    module_0.get_new_command(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    str_0 = "%PzG3/\r`MU"
    var_0 = module_1.purge()
    var_0.__reversed__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    list_0 = []
    module_1.findall(list_0, list_0)


def test_case_3016():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3017():
    float_0 = 1800.86
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    int_0 = -4757
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    var_0 = module_1.purge()
    module_1.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    int_0 = 1371
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    int_0 = 1164
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    str_0 = "34"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    bytes_0 = b"]\xf8~S\xef\x97/\xfd\x142"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    int_0 = -2227
    bool_0 = True
    module_1.sub(int_0, bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    str_0 = "e_,rhy$cwJO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    int_0 = -2238
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    module_1.sub(var_1, var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    int_0 = 1860
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    set_0 = set()
    module_1.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    float_0 = -705.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    bytes_0 = b"\xe3\xbd\xb5\xc4\x8c\t:=x\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    str_0 = "VrtK6B 6&UG7bz"
    regex_flag_0 = module_1.RegexFlag.UNICODE
    none_type_0 = None
    module_1.subn(str_0, str_0, str_0, regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bool_0 = False
    regex_flag_0 = module_1.RegexFlag.ASCII
    module_0.get_new_command(bool_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    int_0 = -2575
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_0.match(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    int_0 = 50
    none_type_0 = None
    module_1.split(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    int_0 = -2690
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    float_0 = 702.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    complex_0 = -975.06406 + 4340.3512j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    float_0 = 395.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0)
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    int_0 = -810
    str_0 = ""
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    int_0 = -1297
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    complex_0 = 590.9 - 3538.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    complex_0 = -2384.39 + 1489.386958j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    none_type_0 = None
    set_0 = set()
    module_1.compile(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    str_0 = "I,*ms{V@62&a(IT4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    bytes_0 = b"\x96\x84Z\x0cF\xe2\x93n |\xa6\xd6\xa7i/R"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    int_0 = 778
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    int_0 = -3954
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    bytes_0 = b"r\x13Z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    str_0 = "6\tA;\nB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    float_0 = -887.472
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    bytes_0 = b"\xb8\x9f\xc6\xac*\x82\xa7\x8c\x8a\xb1\xd1\xe9LS:\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    list_0 = []
    str_0 = "Gc;u,;<RiJaxG#TZpI"
    dict_0 = {str_0: str_0}
    module_2.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    auto_0 = module_2.auto()
    none_type_0 = None
    module_1.search(auto_0, auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    float_0 = -4732.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3064():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    bytes_0 = b'\xb5"'
    var_0 = module_1.compile(bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    list_0 = []
    module_1.fullmatch(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    bool_0 = False
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    float_0 = 478.957393
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    int_0 = -365
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    var_0 = module_1.purge()
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    error_0 = module_3.Error()
    module_0.match(error_0, error_0)


def test_case_3073():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3074():
    bytes_0 = b"\x1b^AWO\xe2V\xfbB\x9a-\xd8\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    list_0 = []
    module_1.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    exception_0 = module_4.Exception()
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    str_0 = "3\\(N|M$FE'vz\x0cEv|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    bytes_0 = b"\xc7c\xb9\xba\x8b\xc2\xd2\x1e\x15\xc8i"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    dict_0 = {}
    bool_0 = True
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    bytes_0 = b"\xb2\xe0S\x89\xc1\xa3\x06Lkztx(k\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    var_0 = module_1.purge()
    str_0 = '=8L?l>\x0cuZO="'
    module_0.get_new_command(var_0, str_0)


def test_case_3083():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3084():
    int_0 = -2572
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0, list_0, int_0, int_0]
    module_4.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    float_0 = 3583.03974
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    bytes_0 = b't\x01\x95k\x1d$ja\x96\xba\x99B"\xc6\x89:\x9e\xea\xfc\xd5'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    int_0 = -251
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, int_0, list_0]
    module_1.split(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    int_0 = 3324
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, bool_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    str_0 = "rxThdgD(S$[r:A8d4pD/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    float_0 = -628.859195
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    int_0 = -867
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    bytes_0 = b"\xeaI\x0bSI\xb5\x8f\xb1+"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    bytes_0 = b"\xce\xd6F&\xba!\xb8\xc0~\xb4\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    bool_0 = True
    module_1.escape(bool_0)


def test_case_3100():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    var_2 = var_1.__dir__()


def test_case_3101():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3102():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    int_0 = -1524
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    bool_0 = True
    bytes_0 = b"\xd5\xa9EO8\x11\xfd\x97\x9c\xafze\x89\xb5\xc3P:,\xb8\xc3"
    dict_0 = {bool_0: bool_0, bytes_0: bytes_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    str_0 = 'Ct\x0b#Bg~PE=@\x0cxU"xz1W]'
    var_0 = module_1.finditer(str_0, str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_3106():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    bool_0 = True
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    bytes_0 = b"\x07[\xf1/U\xac\x02\\\x86\x1c\xe01%\x9b'\xe34g{"
    module_1.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    str_0 = "e'4\"Q}\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    bool_0 = False
    none_type_0 = None
    module_1.split(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    str_0 = "Or'i\n>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    bytes_0 = b"\x92\x1d\xac$\x90\xd1\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    int_0 = 2983
    module_1.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    str_0 = "6Q<.6)CnO\thzha69"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    int_0 = 235
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    none_type_0 = None
    dict_0 = {}
    module_1.subn(none_type_0, dict_0, dict_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    bytes_0 = b"\x97\xbe\xf9e\xde.\xa7\xf4T\x108\xa9\xb2\x83\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    int_0 = 510
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    bytes_0 = b"\xf4n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    float_0 = 663.38
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    set_0 = set()
    str_0 = "\tw6L59b"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    complex_0 = -277.839799 - 2000.861j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    auto_0 = module_2.auto()
    set_0 = {auto_0, auto_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    int_0 = -1225
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    str_0 = '7w/\n\x0c_R:ku&3g+"aV'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    int_0 = 3761
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3131():
    float_0 = -5037.418
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    int_0 = -583
    set_0 = {int_0, int_0}
    module_4.Exception(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    error_0 = module_3.Error()
    none_type_0 = None
    module_1.match(error_0, error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    bytes_0 = b"v"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    bytes_0 = b'"\x87\x80;\xb7\xda\xea\xaaJlP\xec\xc6\xe0\xeb\xb6sZ'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    none_type_0 = None
    bytes_0 = b'"\xfdTv\x0f\xf4\xad\x97\x94\xb9\xbd\x99,\x17I\xbed\x80\xf4)'
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    float_0 = -2040.83
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    bytes_0 = b"\x84|T\t\x18\x8al\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    int_0 = 2043
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    str_0 = "AaNPi l"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    str_0 = "y8nWQ0X%B !r~I\n!aa"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    str_0 = '?"=ewD^Y'
    set_0 = {str_0}
    list_0 = [set_0, set_0]
    module_1.finditer(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    bytes_0 = b"\xad\x81\xe0\xea>\x84\xd8\xac\xb4\xb6\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    bytes_0 = b"J\x8e\xc86r\x85\xf0\x9fv \xc0\x9cy\xe95+M"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, bool_0, none_type_0)


def test_case_3155():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3156():
    bytes_0 = b"\x93\x0c\x97\x9e@\x1e\x8a\x07\xf1X\xae8\x8f\x10\x11\xda\xb7\xff\xd7"
    var_0 = module_1.compile(bytes_0)
    var_0.__contains__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    int_0 = -1136
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    int_0 = -2932
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


def test_case_3160():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3161():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    str_0 = ":b%zxA@q!=gb8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    int_0 = -2125
    none_type_0 = None
    module_1.fullmatch(none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    float_0 = 1524.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    str_0 = " I8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    set_0 = set()
    none_type_0 = None
    module_1.match(none_type_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0, var_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    base_exception_0 = module_4.BaseException(*list_0)
    module_0.match(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    bytes_0 = b"\xa4\x81,\x005\x0f\x023\x93\x1d\xa5\xc7:\xeb\xf4\xba\xff{\x92\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    float_0 = -297.09
    module_1.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    bytes_0 = b"\xc0o9;Q`\xcbe"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    str_0 = "\x0c\x0bnM&e"
    var_0 = module_1.split(str_0, str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    float_0 = 4126.7358
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    float_0 = 2967.00028
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    str_0 = "1=a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    str_0 = "3}[z^J>*<.:sG_.x'OdR"
    module_1.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    list_0 = []
    module_1.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    bytes_0 = b""
    float_0 = 186.6
    var_0 = module_1.template(bytes_0)
    tuple_0 = (bytes_0, float_0, var_0, var_0)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    error_0 = module_3.Error()
    str_0 = "#Mtn?t.\x0b|f>|I<-,{n"
    module_1.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    float_0 = -2224.83391
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    int_0 = 775
    var_0 = module_1.purge()
    var_0.__repr__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    int_0 = -655
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    auto_0 = module_2.auto()
    module_2.EnumMeta(**auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    bytes_0 = b"S-\x1b\x12\xbf\xf6\xcc\x9b\x90\x12\xe4r#\xd7<"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    error_0 = module_3.Error()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    complex_0 = 2488.25481 - 1957.6j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    bool_0 = False
    tuple_0 = (complex_0, dict_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    int_0 = -1674
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    bool_0 = True
    none_type_0 = None
    module_1.fullmatch(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    bytes_0 = b'\xfb\x14"{\xc8\xdcf8\xd5ie\xc8\xd4\x990mR\xed\xd6\xfb'
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    str_0 = "UI1s=650rF,e;e2JQ:"
    module_1.sub(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    bytes_0 = b"e\xaeq\x90j\xea\xd3\xf8^\xf5\xc3\x90\x0e\x1fX2\xd1\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    bytes_0 = b"\x14\x02\x81\xa7X\xac\x875\x18\xd2\xa9\x95H\x86"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    error_0 = module_3.Error()
    module_1.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    dict_0 = {}
    error_0 = module_3.Error(**dict_0)
    module_0.get_new_command(error_0, error_0)


def test_case_3207():
    enum_dict_0 = module_2._EnumDict()
    bool_0 = True
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    set_0 = set()
    module_1.match(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    float_0 = 3531.03876
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    int_0 = -1688
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    auto_0 = module_2.auto()
    module_0.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    float_0 = 1302.1
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    str_0 = "'RQLf~i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    complex_0 = 1524.180486 + 1494.5j
    module_1.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    int_0 = -587
    module_1.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3220():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    str_0 = "?x\x0bLqE\x0c]8:U!&:>+!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    str_0 = "G)(.5)LM14"
    module_1.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    bytes_0 = b"\x11\n\x8aa"
    module_1.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    str_0 = "Osn#[$ze!i9eT3@g"
    var_0 = module_1.escape(str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    int_0 = 1500
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    bytes_0 = b"\xbbz\x8bO\xe3\xa1{']\xba\x86\xea$\x96!t\xab\xf1\xa1\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    bool_0 = False
    bytes_0 = b"\xbf4u"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    var_1.__reversed__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    float_0 = 178.0
    module_1.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    str_0 = "z(-3^S>7YOwQLcA#j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    float_0 = -688.618177
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    str_0 = "y]3tAX5>"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    str_0 = "z]\tdiz#QrP9jKA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    bool_0 = True
    module_1.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    bytes_0 = b"\xb8\x03\xc5\xd5"
    bytes_1 = b"\x03r\x9a"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    bytes_0 = b"F\xec\xd6E\xc6\xf6\x1e\xab\xc9\x07\x8e\x87(\xd9\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    str_0 = "gxi4L9g6G\x0c"
    module_1.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    bytes_0 = b"lG\xe1\xeb\xed\x8d\x0e\xd4\xc2\xf7Yfv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    int_0 = -2309
    str_0 = "N]"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: str_0}
    module_1.subn(dict_0, dict_0, str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    str_0 = '*pV"\x0c7OX9`24Vgf/'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    complex_0 = 53 + 974j
    module_1.subn(complex_0, complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    str_0 = "0?\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    str_0 = "DLz)@C&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    int_0 = 3039
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    none_type_0 = None
    bytes_0 = b"T\x05"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    int_0 = -694
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    bytes_0 = b""
    str_0 = "tc.7T>E}9\\</\nBHK"
    var_0 = module_1.findall(str_0, str_0)
    var_0.scan(bytes_0)


def test_case_3254():
    set_0 = set()
    var_0 = module_1.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    int_0 = 551
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    int_0 = -139
    module_1.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    str_0 = "xJ0#pD"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    float_0 = -417.66
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    int_0 = 566
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    str_0 = "H^iKdDCzEwb,"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    none_type_0 = None
    module_1.Match(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    var_0 = module_1.purge()
    tuple_0 = (var_0,)
    module_0.get_new_command(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    complex_0 = 1538.93 + 2729.5j
    none_type_0 = None
    module_1.sub(complex_0, complex_0, none_type_0, flags=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    int_0 = -2388
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    int_0 = 2843
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    str_0 = "K;V1.M;=.ny_W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    int_0 = 2851
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    str_0 = "-[\"K']t-!_3a."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    int_0 = 24
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    tuple_0 = ()
    none_type_0 = None
    module_1.match(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    var_0 = module_1.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    str_0 = "ke+q0u/p>"
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    tuple_0 = ()
    var_0 = module_1.purge()
    var_0.__call__(tuple_0, tuple_0, qualname=tuple_0, start=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    bool_0 = False
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    int_0 = -1817
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    str_0 = "Esd=.W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    str_0 = "jrWY3Hfoxm\t3Gs"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    bytes_0 = b"'\x07\xcf*\xf3\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    str_0 = "/Yspb;\x0cX2@6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    bool_0 = True
    module_1.compile(bool_0)


def test_case_3290():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3291():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    module_2.unique(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    float_0 = 2456.50614
    set_0 = {float_0, float_0, float_0}
    module_1.split(set_0, float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    none_type_0 = None
    module_1.escape(none_type_0)


def test_case_3295():
    tuple_0 = ()
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(tuple_0, tuple_0, tuple_0, tuple_0, **tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    str_0 = "FI*."
    str_1 = ",v\njogX!n3"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    bytes_0 = b"1,f\xfcPO\xba\x1b\x19\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    regex_flag_0 = module_1.RegexFlag.TEMPLATE
    module_1.split(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    int_0 = 2673
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    float_0 = 320.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    bytes_0 = b":\xa2\xbd\x8d\xe2\x18"
    complex_0 = -1543 - 2193j
    module_0.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    complex_0 = -2368.931757 + 1978.141729j
    float_0 = 2802.6
    module_0.get_new_command(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    str_0 = "-r4&sG9@sHu<),z}"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    bytes_0 = b"6\x1e{\xce\xfb{\xaf\xd4\x0b\\\n]1\x80\xe1\xf0"
    var_0 = module_1.escape(bytes_0)
    list_0 = [var_0, var_0, var_0, var_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    str_0 = "]R1\ti'7G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    str_0 = "10Hh):AA"
    module_1.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    bytes_0 = b"\xc8\xa7"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    str_0 = ""
    var_0 = module_1.subn(str_0, str_0, str_0)
    tuple_0 = (var_0, var_0, var_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_2.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    str_0 = "~P@YBV\nyop$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    int_0 = -1137
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    float_0 = -2972.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    int_0 = 3481
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    int_0 = -3318
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    bytes_0 = b"\x9a\xd4\x12E\xc66g\xc2\x96\xf1\x86\xd7\x06\x1e(a\xaa\xd9-"
    tuple_0 = (bytes_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    bytes_0 = b"a%\xcfE`\xad+<\x88+\xab`"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    list_0 = []
    base_exception_0 = module_4.BaseException(*list_0)
    module_0.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    float_0 = 1749.0
    str_0 = "qo)(Z\t>,(q9w"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    bool_0 = False
    module_1.findall(bool_0, bool_0, bool_0)


def test_case_3326():
    dict_0 = {}
    error_0 = module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    str_0 = "T"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    str_0 = "% h2z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    enum_dict_0 = module_2._EnumDict()
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    bool_0 = False
    tuple_0 = (dict_0, dict_0, list_0, bool_0)
    module_1.sub(tuple_0, dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    int_0 = -2170
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    int_0 = 1378
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    float_0 = 483.901
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    float_0 = -1680.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    int_0 = 454
    none_type_0 = None
    module_1.fullmatch(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    int_0 = -1834
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3338():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    str_0 = "{n$L$\x0cV0~jWkD_<k(sw."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    bytes_0 = b"x\xd4\xa4\xaeD\x13`Q\x1b\xfc\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    bytes_0 = b'\xe5"\xb3\x879\x0ba'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    bool_0 = True
    tuple_0 = (bool_0,)
    var_0 = module_1.purge()
    var_0.scan(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    bool_0 = True
    complex_0 = 2680.341 - 142.24369j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    dict_0 = {}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    tuple_0 = ()
    var_0 = module_1.purge()
    module_0.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    float_0 = -3193.31035
    module_1.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    int_0 = 4769
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    bytes_0 = b"4|\xca\xe1\x07\xf16\x05#R\xdfNk\xab-\xcd_q\x8a"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_1.template(set_0)


def test_case_3351():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3352():
    bytes_0 = b"\xa3\xf0\xf0f\xd7\xd7v\xe1)[Ig\xd2"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0}
    module_0.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    bytes_0 = b"\xe5\xb5?/PB3\xb7\xbeJ\xd8\xb3\x97!"
    none_type_0 = None
    module_1.findall(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    bytes_0 = b"\x9c/9\xfc="
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bytes_0 = b"\xa9}F\x89\xe1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    int_0 = 684
    module_1.Scanner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    var_0 = module_1.purge()
    module_1.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    none_type_0 = None
    bytes_0 = b"N\x85W"
    module_1.sub(none_type_0, none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    int_0 = -1501
    none_type_0 = None
    module_1.split(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    float_0 = -934.5399
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    str_0 = "-20bZ_f9nz>?|+IS>"
    module_1.split(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    int_0 = -902
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


def test_case_3372():
    pass


def test_case_3373():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3374():
    str_0 = "P{5"
    list_0 = [str_0, str_0, str_0]
    error_0 = module_3.Error(*list_0)
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3375():
    bytes_0 = b"\xc3\x0b\x91U:2dZ\x1b\xb7\x94^\x00{\xbdY\xfc\xeeA"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    float_0 = 2238.09352
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_0.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    str_0 = "FP~as\r\t'oo{\nS_U9Y"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    str_0 = "M&3*-E\x0bVa<dW5uu$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    complex_0 = 509.119 - 1636.3844j
    module_1.Scanner(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    bytes_0 = b"\xdc&\x96f\xfe3\x91[\xe4\xcb\xe1im,"
    module_1.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    str_0 = "LRb%\t0j5[)+uKD"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    bytes_0 = b"\xef\xc2uFq\x16@\xb5\x93\xd4YB"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    bytes_0 = b"C\xdc\xfd\xba{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    float_0 = 220.69373
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3395():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    str_0 = "T;!\x0bM[3Minq"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    tuple_0 = (set_0,)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    tuple_1 = (tuple_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    str_0 = "d\\*,I "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    str_0 = "/PRoI2#*U p2X9V"
    str_1 = "k;"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    int_0 = -3011
    none_type_0 = None
    module_1.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    int_0 = -1223
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    bytes_0 = b"\x95Ri\xcaw\x9f\xba@r\x94"
    var_0 = module_1.sub(bytes_0, bytes_0, bytes_0)
    var_1 = module_1.findall(var_0, var_0)
    var_1.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.subn(bool_0, list_0, list_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    bytes_0 = b"\xd964w\x93\xf9\xf1u\xe8W\x8a\x9e\xcc\x93"
    error_0 = module_1.error(bytes_0, pos=bytes_0)
    module_0.get_new_command(error_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    bytes_0 = b"\x9c\xc9]="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    complex_0 = 1082.77244 - 1722.83531j
    none_type_0 = None
    module_1.match(complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    bytes_0 = b"\x84\xf7S\x01RL\x10\xb9V\n\xc6_\xc1\xe1\xd6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    set_0 = set()
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    bytes_0 = b"wJ*\x82\x18\xaf"
    module_1.subn(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    int_0 = -1268
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    complex_0 = 1301.452 - 4439.00114j
    module_1.subn(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    complex_0 = -336 + 816.44j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    int_0 = -3687
    module_1.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    str_0 = ";N~(?CZO;n,fupe*\x0c8,"
    module_1.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    float_0 = 2461.83461
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    list_0 = []
    none_type_0 = None
    module_1.subn(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    bytes_0 = b"\xa4\xa89\xd4\x1f\xb2U\x8e\x87\x16\xfa"
    none_type_0 = None
    module_1.search(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    var_0 = module_1.purge()
    list_0 = []
    module_1.subn(var_0, list_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    var_0 = module_1.purge()
    module_1.search(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    complex_0 = 121.8 + 2232.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    bytes_0 = b"\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    int_0 = 2642
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    bytes_0 = b"r\xae\x04\xfd\xa6\x8a{\xce>\xeax\x07\xdc\x9c\xed\x114\x8a\xa9\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    exception_0 = module_4.Exception()
    module_2.unique(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    int_0 = 2013
    dict_0 = {int_0: int_0, int_0: int_0}
    var_0 = module_1.purge()
    module_1.split(dict_0, var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    int_0 = 920
    module_1.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    bytes_0 = b"\\\xc5\x90"
    none_type_0 = None
    module_1.compile(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    bool_0 = True
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    complex_0 = -3783.493 - 4003.19458j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    bytes_0 = b"8\xc6\xb9|\xa5\xaa\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    complex_0 = 3053.2 + 22.4251j
    module_1.finditer(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    str_0 = "Oyd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    str_0 = '@a?"Iz8=@el,10p'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    str_0 = "\nlBD^b \nhI"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    int_0 = 870
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    int_0 = -13
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    bool_0 = True
    none_type_0 = None
    module_1.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    int_0 = -337
    module_1.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    int_0 = -746
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    bool_0 = False
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    str_0 = '1q?"35'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    object_0 = module_4.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    int_0 = 884
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    int_0 = 2456
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    bytes_0 = b"\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    list_0 = []
    bytes_0 = b"d\xbbs\xf5oB>`\xc2a8\xe2\xc9"
    var_0 = module_1.findall(bytes_0, bytes_0)
    module_0.get_new_command(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    complex_0 = -774 + 1932j
    module_1.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    int_0 = -1630
    none_type_0 = None
    module_1.match(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    int_0 = 904
    module_1.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    bytes_0 = b"E\x98\xa4*\x9f\xe7\x9b\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    str_0 = ">h-a0D(x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    dict_0 = {}
    none_type_0 = None
    module_1.template(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    str_0 = "ndCU0XKggCk&q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    none_type_0 = None
    bytes_0 = b"\xb0S\xf6"
    module_1.sub(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3484():
    int_0 = 393
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    module_1.finditer(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.Pattern(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    str_0 = "y3-Qv*;=4I)IT\x0c\\Exz?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    float_0 = -393.247909
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    bytes_0 = b"F\xe7+Q\xc4\x01\xf0\x99\x8d\x949%"
    var_0 = module_1.escape(bytes_0)
    var_1 = module_1.findall(var_0, var_0)
    module_1.search(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    base_exception_0 = module_4.BaseException()
    module_1.compile(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    tuple_0 = ()
    module_1.sub(tuple_0, tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    bool_0 = True
    module_1.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    var_0 = module_1.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    object_0 = module_4.object()
    set_0 = {object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    str_0 = 'S|.tD1B%Zy"\x0c?Q0;Qju'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    float_0 = 1943.44
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    int_0 = -2585
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    bytes_0 = b"\x8e\xd6>a\xbd\x8c\xe5\x90<\r\x03B"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0)
    module_1.match(tuple_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    list_0 = []
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    int_0 = -963
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    bytes_0 = b"\xf0C\xa3\xffP2\x13\xa3\xae\xd85\xaayz"
    error_0 = module_1.error(bytes_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    bytes_0 = b"\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    bool_0 = True
    module_1.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    str_0 = "O\t!\x0b^[UG'\tNG\x0box}[@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    str_0 = "Tu^zqdKzBz\\wsB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    bytes_0 = b"\xae\xec\xb8;\x15\x9b\xbe\xe5\n\xfeB\xbd'!7\xf1\xec\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    str_0 = ""
    var_0 = module_1.search(str_0, str_0)
    var_0.__contains__(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0}
    module_1.search(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    bytes_0 = b"\r\xbd;\x0e?j\xc8G\x03\x94\xc4[=\xab\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bytes_0 = b"\x0f\x9fe\xeaG&i-\xb7k\x1e\xeeX\x94\x1d\xf0\xbb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3524():
    list_0 = []
    var_0 = module_1.purge()
    module_1.subn(list_0, var_0, list_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3526():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    str_0 = "2$(!?&}xG7Nc5,ZA}?\x0c@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    bool_0 = True
    error_0 = module_1.error(bool_0, pos=bool_0)
    module_1.finditer(error_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    complex_0 = 4092.1 + 627.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    bytes_0 = b"\xd8\x1c\xe8Y&\xda\x08\x8d\xd9Q\x82\x982\xc9\xf1}\xfa\x88\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    int_0 = 1701
    module_1.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    complex_0 = -1260.97 - 1993.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    str_0 = '2"]qLp'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    float_0 = 1502.23862
    module_1.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    str_0 = "9H5({|K=qoNI&oz7T"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    none_type_0 = None
    module_3.Error(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    bytes_0 = b"\xdaf\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    str_0 = "\\xV:i&jAZHy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    str_0 = "tVjO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    bytes_0 = b"\xae\x9at\xdc"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


def test_case_3552():
    none_type_0 = None
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    with pytest.raises(TypeError):
        var_1.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3554():
    bytes_0 = b'\x9a"\xd5w\t:\xe6\x8b\xf9\x04\xff\xf1\xfc'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    int_0 = 1756
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_1.split(dict_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    complex_0 = 528.7 - 1612.83904j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    var_0 = module_1.purge()
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    int_0 = -2046
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    int_0 = -1454
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    bool_0 = True
    object_0 = module_4.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    complex_0 = -783.2 + 61.4j
    tuple_0 = (complex_0,)
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    int_0 = -331
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    complex_0 = 1094.28 + 27.420763j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    bytes_0 = b"v\x96\xe0\x802\x11"
    none_type_0 = None
    module_1.fullmatch(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    str_0 = "}_Yu[dla\\0\\S<=h\x0c!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    str_0 = "\\tJHQ:3"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    list_0 = []
    none_type_0 = None
    module_1.split(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bytes_0 = b"L:\xc0\xb8~\xf8f\xb7\xff"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    complex_0 = 2631.31763 - 193j
    module_1.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    bytes_0 = b"I3z\xef\xd9 \xd3\x82c\x1e\x9d\xc5\x8f\xed,\xc4\x9f\xa5\xfe"
    set_0 = {bytes_0}
    module_1.findall(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    auto_0 = module_2.auto()
    set_0 = {auto_0, auto_0}
    module_0.get_new_command(set_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    var_0 = module_1.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    int_0 = 667
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    int_0 = -432
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    str_0 = "*r2>[eGsqn\x0b5"
    dict_0 = {str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    float_0 = 260.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    bytes_0 = b"\x10\x9e\xbeIy\xf0\t\x88\x04i\xc8\x1d\x97\xafd\x9a\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    int_0 = -614
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    int_0 = -1838
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    int_0 = 1294
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    bytes_0 = b"+R\xdf\xe5z\xea-U"
    module_1.split(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    str_0 = "JX}8"
    none_type_0 = None
    module_1.subn(str_0, str_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    set_0 = set()
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    list_0 = []
    module_1.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    bytes_0 = b"B\xfel\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    bytes_0 = b"\x01\x13d\xe54"
    module_1.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    bytes_0 = b'g?\x88\xf7\x1eS\x07"\xbe\x06\xe8\xcf\x9f\x85P\xc7'
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setitem__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    int_0 = -1496
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    list_0 = []
    module_1.subn(list_0, list_0, list_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    str_0 = 'Qf&>R\\"J\\R?)y<s`P-\\]'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    dict_0 = {}
    module_1.sub(dict_0, dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    dict_0 = {}
    module_1.template(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    object_0 = module_4.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    dict_0 = {}
    module_1.Match(**dict_0)


def test_case_3608():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3609():
    int_0 = 862
    list_0 = [int_0]
    none_type_0 = None
    module_1.search(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    str_0 = "\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = True
    list_0 = [set_0, bool_1, bool_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    bytes_0 = b"\x92\xd8\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    list_0 = []
    module_3.Error(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    str_0 = "9BDE|A>`5fvq<,(w+6|-"
    var_0 = module_1.escape(str_0)
    tuple_0 = (str_0, str_0, var_0)
    module_1.fullmatch(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    var_0 = module_1.purge()
    module_1.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    str_0 = '@\\u*k"vW_8IsX.9'
    var_0 = module_1.purge()
    list_0 = [str_0, var_0, str_0, var_0]
    list_1 = [list_0, str_0, var_0, str_0]
    module_1.Pattern(*list_1, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    str_0 = "tuQJ![Zw TC+n>p"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    str_0 = '""a'
    none_type_0 = None
    bool_0 = True
    module_1.sub(str_0, none_type_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    bytes_0 = b"\xe4\x9c\nu!!s\xd9\xb4\x1e\x89\xf2\x074+:cvd\xee"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bytes_0 = b"\x85x\x1e\x14~\x17|\x92\xb1\xd3L\x18\x95h\x96\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    int_0 = 966
    none_type_0 = None
    module_1.finditer(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    int_0 = 2235
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_1.match(tuple_0, tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    float_0 = -2187.102
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    int_0 = 907
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    str_0 = "Cz'$%8Kq\"af8D/"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    str_0 = "\tF/E\x0cqc&?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = "\x0bAUYg$!Zyg"
    list_0 = [bool_0, str_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    bytes_0 = b"@kv\xb1\xea\x93\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    int_0 = 2475
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    int_0 = -2138
    module_1.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    int_0 = 241
    module_1.split(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    float_0 = -2602.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3642():
    int_0 = 89
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    str_0 = "<'L4"
    none_type_0 = None
    module_1.sub(str_0, str_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    complex_0 = -1472.82 + 934.178349j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    complex_0 = 2189.53917 - 25.595j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    list_0 = []
    module_4.BaseException(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.split(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    int_0 = -351
    set_0 = {int_0}
    module_1.fullmatch(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    float_0 = -606.61116
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    bytes_0 = b"!\xbd4\xce?\xa2R\xb5\xddr\x1e\x17\xae\x16N\x9c\x1e\x12\x9ee"
    str_0 = "HfehsH?ZeCcR{c/JkQX{"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    float_0 = 1451.782
    module_1.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    str_0 = "#\\_Pj|9Pg/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    list_0 = []
    error_0 = module_3.Error(*list_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    bytes_0 = b"\xfa\xb1\x02\xcc\r\xcc\xee\x99:\xb4\xb2\x8a\xa8"
    bool_0 = True
    none_type_0 = None
    module_1.split(bytes_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    str_0 = 'isx.5S\nya]{4"/Rf'
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    int_0 = -3486
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    none_type_0 = None
    str_0 = "tKJg6-+] M/JJi/"
    module_1.match(none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_2.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    none_type_0 = None
    module_0.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    int_0 = -310
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    float_0 = -1061.5433
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    dict_0 = {}
    var_0 = module_1.purge()
    var_0.scan(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    none_type_0 = None
    int_0 = 366
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    int_0 = 508
    set_0 = {int_0}
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    bytes_0 = b"\xdaTW\x1eS\x11f\x93KY\xca\x8b\xca\x01/\xbd\xbe\xe6\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    int_0 = 732
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    str_0 = "!Pzs3lt]*LJeE{'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    exception_0 = module_4.Exception()
    module_1.finditer(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    str_0 = "*K-vdzX_{'<\rL+?["
    str_1 = "Bz M7Z]w"
    str_2 = "EF'*\nc~7]\tPfBWQh"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    none_type_0 = None
    module_3.Error(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    str_0 = '5n\x0c}Sk^Xgbm"Oq3I5VT)'
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    int_0 = -20
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    str_0 = "{8uWr_),OU(P\\<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_1.findall(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    complex_0 = 4936.01 + 3380.78903j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    int_0 = -3307
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    bool_0 = True
    module_1.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    int_0 = 1024
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    int_0 = -1866
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    bytes_0 = b"O-\x93\xef\xcc\x84{\xec\xd3\x0eY8\xc9\xeb4y\x00\xb2\x81"
    module_1.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    str_0 = "Fp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    auto_0 = module_2.auto()
    tuple_0 = (auto_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    str_0 = "p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    var_0 = module_1.purge()
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    str_0 = "Y@ZR1gp5-(b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3706():
    int_0 = -4664
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    var_0 = module_1.purge()
    int_0 = -1262
    module_0.get_new_command(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    float_0 = 165.99524
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    float_0 = -1227.0
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_1.split(set_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    enum_dict_0 = module_2._EnumDict()
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3715():
    int_0 = -4202
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    bytes_0 = b"\xb2j\xf6l\x14\xa0\x10\x00\x11\x9b\x1b\x94\xf0u"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    int_0 = -313
    module_1.template(int_0)


def test_case_3718():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3719():
    int_0 = 355
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    str_0 = ""
    module_1.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    str_0 = "SH8.$R,d@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    str_0 = ">G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    dict_0 = {}
    none_type_0 = None
    module_1.subn(dict_0, dict_0, dict_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    bool_0 = False
    int_0 = -170
    dict_0 = {bool_0: bool_0, bool_0: bool_0, int_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    bool_0 = False
    module_1.split(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    str_0 = "u>9!peW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    int_0 = -255
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    bytes_0 = b"\xc3\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    bytes_0 = b"\xedtQen\x085\xac\x98"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    list_0 = []
    module_1.fullmatch(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    int_0 = 2825
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    str_0 = "X\\Wp}p'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    none_type_0 = None
    bytes_0 = b"s\xeak(<l"
    module_1.finditer(none_type_0, bytes_0)


def test_case_3738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3739():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    bytes_0 = b"\xc9\x10\x06\xd5\xbeh\x86"
    module_1.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    int_0 = 379
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    str_0 = "QNZNau7"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    bytes_0 = b"\xf3\x14\xbf\x81"
    var_0 = module_1.purge()
    var_0.__call__(bytes_0, bytes_0, bytes_0, module=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    var_0 = module_1.purge()
    module_1.split(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    bytes_0 = b"n\x85\x86\xce\xaa\xd9\xac\x19\xe0\xb3\xce+t"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    bytes_0 = b"\x03\xa9d+\xdd\xe6\x1f\xee4\xd3;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    str_0 = "d"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    complex_0 = -901.844865 - 821.430584j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    float_0 = -1711.4
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    int_0 = 896
    module_1.subn(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    dict_0 = {}
    module_1.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    list_0 = []
    module_2.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    float_0 = 1595.702295
    none_type_0 = None
    module_1.search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    int_0 = 2537
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    bytes_0 = b"\xc1\xe7\xaf\x94>\x94'^ "
    module_1.subn(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    str_0 = '=vT"siK\x0c3N]Jc!"XU3HR'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    object_0 = module_4.object()
    tuple_0 = (object_0, object_0)
    module_1.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    str_0 = "+Hs5IT"
    none_type_0 = None
    module_1.subn(str_0, none_type_0, none_type_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    bytes_0 = b"`)m?\xca\x8e\xfe\xfe>\x03Ca\x08\xf3\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    complex_0 = -2776.7145 + 513.44645j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    bytes_0 = b"\xc7l\x8c\x04\xc5\x16\xb1\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0, var_0)
    module_2.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    str_0 = "K1/\x0bV\r\x0b=k-\nhU71Yh"
    var_0 = module_1.sub(str_0, str_0, str_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    bytes_0 = b"\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    int_0 = -1786
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    str_0 = "qVS)hfs_/hk_@f'\tK#!"
    tuple_0 = (regex_flag_0, str_0)
    module_1.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    str_0 = "Q#\nL<Aag/(qM-)B6"
    var_0 = module_1.escape(str_0)
    var_0.__len__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    list_0 = []
    module_1.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    int_0 = -2931
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    int_0 = -149
    str_0 = ",d@U3q0\rB^\n-vw~:qR"
    none_type_0 = None
    module_1.split(int_0, str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    float_0 = 2055.5716
    str_0 = "?u-.?)%l;W9C/+(ohcj"
    var_0 = module_1.escape(str_0)
    var_0.scan(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    int_0 = 1842
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    dict_0 = {}
    none_type_0 = None
    module_1.findall(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    float_0 = 1353.53
    module_1.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    int_0 = -51
    module_1.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    str_0 = ".r$y?HK"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_1.finditer(list_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    bytes_0 = b"X-\x1b\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    int_0 = -3219
    module_1.subn(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    dict_0 = {}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    int_0 = -470
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    str_0 = ""
    var_0 = module_1.purge()
    var_0.__reversed__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    str_0 = "PhEov\x0c+vqm]|DG*"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    tuple_0 = ()
    module_1.search(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    int_0 = 967
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    bytes_0 = b"\x11\x97b\x06\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    int_0 = -809
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    str_0 = "\rc"
    var_0 = module_1.subn(str_0, str_0, str_0)
    module_1.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    int_0 = -2028
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    int_0 = 539
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    int_0 = 1637
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    bytes_0 = b""
    module_1.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    bool_0 = False
    bytes_0 = b"\xce.*\xa2\xec\xd3\x90G$\xb0\xa9\xea\x91\xaf_^C"
    module_1.sub(bool_0, bytes_0, bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    bytes_0 = b"\x08\x8aw\x9eA\xa8l\xe3\x85K_\x17\xf9\xf0\xd3L"
    module_1.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    str_0 = "&*O7HfA"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    float_0 = -543.0
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    enum_dict_0 = module_2._EnumDict()
    module_1.template(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    str_0 = "h>Go[J9EN D \t\n\r[d\rqJ"
    list_0 = [str_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    bool_0 = True
    none_type_0 = None
    module_1.template(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    int_0 = -2626
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    int_0 = -364
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    str_0 = "v)U%N]kwCq$I0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    int_0 = -132
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    bytes_0 = b"DL\xa6\x04\x04"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    bytes_0 = b'\xf0\x95",\xb8%f\xb2\xbf/\x91/\xdc\x1e'
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    var_0 = module_1.purge()
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3834():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    str_0 = "21-\rxeafZ*I1=r%z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    str_0 = "uG-5"
    var_0 = module_1.finditer(str_0, str_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    str_0 = " Ku$^\nF__<pO"
    module_4.Exception(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    bytes_0 = b"%\xfe\x96E\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    bool_0 = True
    none_type_0 = None
    module_1.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    bytes_0 = b"^x\x8dI\xca"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3845():
    float_0 = 311.67926
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    float_0 = 1113.208746
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    str_0 = "/V2UF~gZsF)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    bytes_0 = b"\xbc\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    str_0 = "[6\x0c^a"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    bool_0 = False
    module_4.Exception(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    int_0 = -1535
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    bytes_0 = b"\x7f\x8f\xb3\x05\xbf\xdb-2c\xf7_\x03v"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    float_0 = 1792.7
    module_1.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    float_0 = -1891.58876
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    str_0 = "+4#>>TtO"
    module_1.sub(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    complex_0 = -302.7 + 1966.03j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    str_0 = "R:A*nxX<\x0cta"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    bytes_0 = b"\xa1\x03\xa7ob\x8e\xc4\xf4\xa3\x9d\xe5\xc7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    str_0 = "E]?tJxIRM|c)o-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    var_0 = module_1.purge()
    list_0 = []
    str_0 = "\x0b_<:fps}]F2$"
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0}
    module_2.EnumMeta(*list_0, **dict_0)


def test_case_3866():
    str_0 = "fL\t"
    var_0 = module_1.fullmatch(str_0, str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    int_0 = 901
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    complex_0 = -1605.3971 + 2209.43j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    int_0 = 1987
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    bytes_0 = b"T\xb6\xcd\x87jh}{\xe9.\x93\xbc\x87\xc3\xee\x9d\xf8"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    bool_0 = False
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    int_0 = -3500
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    str_0 = "kEajzWu[,)'Rk"
    module_1.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (none_type_0, bool_0)
    module_1.subn(tuple_0, none_type_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    none_type_0 = None
    bool_0 = False
    module_1.subn(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    float_0 = -679.15
    str_0 = "&[db 3\\}"
    tuple_0 = (float_0, float_0, str_0)
    module_1.sub(tuple_0, float_0, float_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    int_0 = -1238
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    float_0 = 9.9029
    module_1.split(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    dict_0 = {}
    none_type_0 = None
    module_1.sub(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    int_0 = -206
    module_1.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    bytes_0 = b"t\xd1\x8f\xff\x1aa\x05\xcd\x8e\xd5\x9f\xa3\xb6\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    str_0 = "]\\_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    complex_0 = -1520.71137 - 1420.219j
    module_4.BaseException(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    float_0 = -2816.0834
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    int_0 = -543
    module_1.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_3893():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3894():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    str_0 = "BtW/mazD/"
    none_type_0 = None
    module_1.sub(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3900():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    bytes_0 = b"a\xbf\x9b\xbbH\x95\x1f\xcb\x9a6c\x95\xc8\x86t\xdc\xa7\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    bool_0 = False
    module_1.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    bool_0 = False
    bool_1 = False
    module_1.search(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    int_0 = -1577
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    str_0 = "dR8d$\rBpq\n(+?f-Y"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    tuple_0 = ()
    module_1.subn(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    int_0 = -811
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3912():
    bytes_0 = b"\xeb\xa0\xe3M\x86\x98(%\xba\x15\xf4\xbc\xe3\x87\x8e\x91\x0c2~m"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    str_0 = "\nab=(X}_ud=\nwje>"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    complex_0 = -1641.966871 + 319j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    int_0 = -1119
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3917():
    complex_0 = 327.564051 + 2700.53j
    bool_0 = False
    module_1.split(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    str_0 = "d>FZ].vn\x0bF 2C%'wa!`H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    str_0 = "\r2{|VhukeLo"
    var_0 = module_1.escape(str_0)
    var_0.__iter__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    bytes_0 = b"\xb75"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3922():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3923():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    none_type_0 = None
    bytes_0 = b"\xbd\xd2\x87A\x10\xda\xe2GG=A\x14\xe9q\xba\xff"
    int_0 = -1109
    module_1.subn(none_type_0, bytes_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    float_0 = -963.63775
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.subn(dict_0, float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    bool_0 = True
    none_type_0 = None
    module_1.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    str_0 = "OED|%["
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    none_type_0 = None
    bytes_0 = b"c\xe5\n"
    module_1.finditer(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    str_0 = "Z]8B"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    tuple_0 = ()
    module_1.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    int_0 = 28
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    str_0 = "X3g[Bxo4,\nJ4jdn s:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    none_type_0 = None
    str_0 = ":BCKG85bU`"
    var_0 = module_1.finditer(str_0, str_0)
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    int_0 = 2611
    none_type_0 = None
    module_1.match(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    int_0 = 460
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    str_0 = "1wtJT6"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    complex_0 = 2354.307 + 2567.3j
    module_1.split(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    bytes_0 = b"\xbc\xd0H\x15\xf7\xda\xa0\xea\xf2Pt"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    str_0 = "\x0bH(;MG8o"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    float_0 = -1101.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    bytes_0 = b"G\xd5X\xa7;\x83&&\x86\xa6\xb5\x82ip"
    var_0 = module_1.template(bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    bytes_0 = b"\x91\x95\xe0m\xc5\xa2\x88\x8dP\xfc\xf1\xf8Yp"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_0.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    dict_0 = {}
    bytes_0 = b""
    str_0 = "5*9qN%IE9G2x$"
    tuple_0 = (dict_0, bytes_0, str_0)
    module_1.fullmatch(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    float_0 = -3530.31583
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    int_0 = -785
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    str_0 = "Pa5nbW$gZ"
    var_0 = module_1.fullmatch(str_0, str_0)
    var_0.__repr__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    none_type_0 = None
    float_0 = 895.069
    module_1.sub(none_type_0, float_0, float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    float_0 = 791.41
    module_2.EnumMeta(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    int_0 = 5033
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    str_0 = "u@?2"
    module_1.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    str_0 = "kk9aikP-#\rWH)4s"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    str_0 = "nS<tcYx82Rt< ID\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, pos=none_type_0)
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    var_0 = module_1.purge()
    module_1.compile(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    int_0 = -827
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    bytes_0 = b"h;\xfd\xacn\x95"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    str_0 = "RK"
    tuple_0 = (var_0, var_0, str_0, var_0)
    module_0.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    float_0 = -3594.0721
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3969():
    int_0 = -803
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    error_0 = module_3.Error()
    none_type_0 = None
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3973():
    int_0 = 112
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    bytes_0 = b"\xa9\xa5I\x01h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    float_0 = 1338.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    str_0 = "\ngMGT2d-pRYPE"
    dict_0 = {str_0: str_0}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    var_0 = module_1.purge()
    set_0 = {var_0}
    module_1.fullmatch(set_0, set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    str_0 = "LbH\t}j9P\tA#32"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    complex_0 = 58.001 - 2457.446j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    list_0 = []
    module_1.sub(list_0, list_0, list_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    int_0 = -4413
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    int_0 = -689
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    int_0 = -998
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    int_0 = 4030
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3995():
    str_0 = "D\rVA'T ;}00Z7c"
    str_1 = "`d!%v[\x0bc0NQ"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    int_0 = -486
    none_type_0 = None
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    int_0 = -1383
    module_2.EnumMeta(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    int_0 = 1283
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    int_0 = 1481
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    float_0 = -1378.96
    var_0 = module_1.purge()
    var_0.__setattr__(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    tuple_0 = ()
    module_0.match(error_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_4005():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    str_0 = "v3!UW\rKc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    int_0 = 2369
    module_1.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    bytes_0 = b"otM\xbf\xc9\xe5\xa8\xa4t\x0b\xb3?s\xe5)\x06\xae"
    module_1.fullmatch(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    str_0 = "\n\rP#\\_ltL@1PP15y[!("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    str_0 = "sxx\n0\tX]4"
    var_0 = module_1.purge()
    var_0.scan(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    var_0 = module_1.purge()
    module_1.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    str_0 = ""
    bytes_0 = b"\x93Z\xe7e[\x87Rxl\x15(\x90`="
    module_1.finditer(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    set_0 = set()
    error_0 = module_1.error(set_0)
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0)
    module_1.match(error_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    bytes_0 = b"\xa9\x15\x89/\xce\x9bF\x9as\xdc\x84X\x99"
    var_0 = module_1.escape(bytes_0)
    module_1.split(var_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    int_0 = -216
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    bytes_0 = b"'\xa8A\xd2\x88\x8d\xeeJ\x85\x98J\xdc\xfd\xa7,8\xdb\xe6"
    error_0 = module_1.error(bytes_0, bytes_0)
    none_type_0 = None
    module_1.findall(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    bytes_0 = b"\x88\xf7\xea$7\x18\xc7\r\xbe\xf1s"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    str_0 = "0?sv @I "
    str_1 = "cL}CP}\x0c\x0c g\r\\3"
    var_0 = module_1.sub(str_0, str_0, str_1)
    module_1.sub(str_0, str_0, var_0, flags=str_1)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    float_0 = -778.8259
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4025():
    error_0 = module_3.Error()
    dict_0 = {error_0: error_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    bytes_0 = b"\x0c\xf6J\xa4J)\xab?\x17\x07\x8b\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    float_0 = 1093.317
    module_1.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    int_0 = -1708
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    complex_0 = -1690.3318 - 1181.37646j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    int_0 = 2146
    none_type_0 = None
    module_1.split(int_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    bytes_0 = b"<\xd9n"
    none_type_0 = None
    module_1.finditer(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    str_0 = "cj<wZ7&FK+Vv+4~x.Es3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    str_0 = "&"
    module_1.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    int_0 = 68
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    str_0 = "4_G]s!Cma["
    module_0.get_new_command(str_0, str_0)


def test_case_4041():
    enum_dict_0 = module_2._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_4042():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    float_0 = -120.438
    error_0 = module_1.error(float_0, float_0)
    none_type_0 = None
    module_0.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    int_0 = 3303
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    int_0 = 2437
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4047():
    bytes_0 = b"\xd4\xadA\x11\x08/\xb7\xdc\x82\x9dq}\x16b4\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    int_0 = -1288
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    int_0 = -3304
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    bytes_0 = b"i6\x19\xa5\r\xa1\xe9\xa0g\xf2m\x027'\x13?\xa32h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    str_0 = ")"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    bytes_0 = b"\x930>\xc2\xa4[C'\x8d\x8b"
    error_0 = module_1.error(bytes_0)
    module_1.findall(error_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    int_0 = -1630
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_4057():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    none_type_0 = None
    int_0 = -1869
    module_1.findall(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    float_0 = 1521.56
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    float_0 = 1348.319175
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    exception_0 = module_4.Exception()
    int_0 = 2567
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bytes_0 = b"\xe1I\x01\x00x\xf3\xbd\xc3\xe6%\x14\x9e\xa7\xd0\x9c\n\x0f"
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    str_0 = "5uA|hC"
    var_0 = module_1.search(str_0, str_0)
    var_1 = module_1.purge()
    var_1.__call__(var_0, var_0, str_0, start=var_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    bool_0 = False
    bytes_0 = b"\xd8\xbb~f\x87\xce\x16\xe2\xf7O\xe1\xc7\xb5(\xdeMD\x1f"
    module_1.subn(bool_0, bytes_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    bool_0 = False
    none_type_0 = None
    module_1.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    bool_0 = False
    none_type_0 = None
    module_1.split(bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    var_0 = module_1.purge()
    float_0 = -1942.5573
    module_1.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    str_0 = "8P;H]OZ\\h?n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    set_0 = set()
    module_1.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    int_0 = 1072
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    var_0 = module_1.purge()
    bytes_0 = b"\x9d\xd4"
    module_0.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    module_1.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    dict_0 = {}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4078():
    float_0 = 587.18074
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    str_0 = "2rl$OSKaLgq,"
    str_1 = "E\tUw="
    bool_0 = False
    dict_0 = {str_0: str_0, str_1: bool_0, str_1: bool_0}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    str_0 = "?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    int_0 = 1235
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    int_0 = -1214
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    float_0 = -3552.97
    dict_0 = {float_0: float_0}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    list_0 = []
    int_0 = 3678
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    bool_0 = False
    bytes_0 = b"E\xa2\xfe\x04\xca}\xa8\xb8\xd9b\x9f\x94\x8f\xd6\xad]@"
    module_1.findall(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    bool_0 = False
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    float_0 = 2293.8216
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    bytes_0 = b"\xc0\x9eh\x0c\x97\x08\xb8\xc6o\xa2="
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    int_0 = 2751
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    float_0 = -28.40761
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    bytes_0 = b"\xa3\x1a\xa3\xd9;M3\x9303Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    none_type_0 = None
    var_0 = module_1.purge()
    module_0.get_new_command(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    bool_0 = False
    none_type_0 = None
    module_1.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    bytes_0 = b"\x0e\xdc\x83\xaf?\x0fw\xc9\xea\xabZ\x88\xf5\xc4M\xdeX"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    int_0 = 461
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    bytes_0 = b"\x1f"
    var_0 = module_1.subn(bytes_0, bytes_0, bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    str_0 = "<ah,$,KL1u*=D_k`J'T"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    int_0 = -1792
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    str_0 = "lI`~"
    dict_0 = {str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_4111():
    bytes_0 = b"\xc2\xfa0\x96-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    bytes_0 = b"\xbe\x1a\xd9\xe9\xb0\xe8\xe7\xb3_\xa9\xa2\x05\x98\x86\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    int_0 = -994
    none_type_0 = None
    module_1.subn(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    bytes_0 = b"^A\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    float_0 = -84.8943
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    str_0 = ";nX=~w~setz%79>k0MK6"
    dict_0 = {str_0: str_0}
    module_4.BaseException(**dict_0)


def test_case_4120():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4121():
    dict_0 = {}
    bool_0 = True
    module_1.findall(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4123():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    float_0 = 244.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    complex_0 = -2979 + 1338.16991j
    module_1.fullmatch(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    dict_0 = {}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    bytes_0 = b"U<\xc43x+Q\xd8\xd43\xa2\xacN\x04\xc4"
    var_0 = module_1.compile(bytes_0)
    module_0.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    regex_flag_0 = module_1.RegexFlag.ASCII
    list_0 = [regex_flag_0, regex_flag_0, regex_flag_0]
    module_1.fullmatch(list_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    bool_0 = False
    str_0 = "v ,!B}3aF.J$-KC"
    tuple_0 = (bool_0, str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    bytes_0 = b"\xaaM\xf3F\r\x97\xba\xf2\xbaMeQ\x0f\xa6\x00"
    var_0 = module_1.match(bytes_0, bytes_0)
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_1.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    complex_0 = -1435.51441 + 2127.9434j
    list_0 = [complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    int_0 = 1512
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    float_0 = -2024.96
    module_1.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    bytes_0 = b"?\x82\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    bytes_0 = b"\xc2Qf\xa2\xb6\x07\x19\x0f\xa4\xcc\xe1"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    tuple_0 = (bytes_0, var_0, var_0, var_0)
    module_0.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    int_0 = 1864
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    str_0 = '{\n/*pryvoK/*/("'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    str_0 = "4UT\r\x0cv34QO{a\x0c$]>"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.finditer(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    bytes_0 = b"\xe8|\x1d\xf4\x1be\x93U\x05e\x8d\xe5$6\x12\x87#&v"
    str_0 = "uk\n\x0cS4\x0c5G\x0bL1ILO#J/]"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bytes_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    complex_0 = -2745.2 + 250j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    str_0 = "7=<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    set_0 = set()
    var_0 = module_1.purge()
    var_0.__iter__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    int_0 = 426
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    bool_0 = True
    var_0 = module_1.purge()
    tuple_0 = (bool_0, bool_0, var_0)
    module_0.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    bytes_0 = b"[}CA\x1b\xff\xf2\xa5s[S\x0e\x99\xa5X"
    none_type_0 = None
    module_1.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    str_0 = "p>{zEn|^;"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    bytes_0 = b"\x08\xcbH\xb0\xa5\x87"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4158():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4159():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    module_1.match(exception_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    none_type_0 = None
    int_0 = 946
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    int_0 = 717
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    tuple_0 = ()
    module_2.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    complex_0 = -1410.48 + 533.218j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    str_0 = "sS)>w6\x0b@F/"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    int_0 = 711
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    int_0 = -675
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    bool_0 = True
    module_1.split(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    complex_0 = -2711.303872 - 1812.369j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_4173():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    tuple_0 = ()
    none_type_0 = None
    module_1.split(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    int_0 = -349
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    int_0 = 4815
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    str_0 = "+-\x0b.p6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    int_0 = -1085
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    object_0 = module_4.object()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    bytes_0 = b"$\xd2"
    var_0 = module_1.subn(bytes_0, bytes_0, bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    str_0 = "#2\x0ctpbFWwN\tesxrP"
    str_1 = "a<kdUD7s"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    str_0 = "p\x0bCbr\t|(+j@vP"
    module_1.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    str_0 = "S\n}YYHA$H0G#hf3b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    int_0 = 986
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    int_0 = 2928
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    int_0 = -4909
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    float_0 = 362.967
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    bytes_0 = b"[$\xd8h\x1e\x83\x91s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    bool_0 = True
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    tuple_0 = ()
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    bytes_0 = b"\xe6\x96\xb2\xb6:%q\xfc\xdd\xb3\xec\x84h\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    regex_flag_0 = module_1.RegexFlag.ASCII
    module_1.fullmatch(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    int_0 = 1582
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    tuple_0 = ()
    none_type_0 = None
    module_1.finditer(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    str_0 = "Q\nzF(Rp6@"
    none_type_0 = None
    module_1.findall(str_0, none_type_0)


def test_case_4200():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4201():
    int_0 = -1419
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    str_0 = "r~%z2%qR3#kNG&wQM%@"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    bytes_0 = b"\xea\xdb\xc7^\xf4 \xc9\x16W\xfd\xf4\xcdg\xc6F\x84p{\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    bool_0 = False
    float_0 = 985.38219
    list_0 = [bool_0, bool_0, float_0, bool_0]
    module_1.Pattern(*list_0, **float_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    int_0 = -98
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    bool_0 = False
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4209():
    none_type_0 = None
    str_0 = "i!\x0bm8%@\ngzZk"
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    int_0 = -562
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    str_0 = ""
    var_0 = module_1.fullmatch(str_0, str_0)
    var_1 = var_0.__dir__()
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4213():
    bool_0 = True
    none_type_0 = None
    module_1.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    none_type_0 = None
    bytes_0 = b"b\x95\xb3\x80\x90"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    bytes_0 = b"\x97\x84\x92d\xc2L"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    bytes_0 = b"\x07\\\tOqA\xa4\x1a\xc0q\xe62\xc1\xd5\xa8V.\xa6\xcc`"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4219():
    bytes_0 = b"?\x80D\x9bl\x1d\x06\xa7"
    module_1.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    str_0 = "(##<rM9`<o!"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    object_0 = module_4.object()
    int_0 = -1714
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.subn(list_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    float_0 = -2561.212
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    int_0 = -3264
    none_type_0 = None
    module_1.compile(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    int_0 = 2588
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    int_0 = -1848
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_1.finditer(set_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    none_type_0 = None
    bool_0 = False
    module_1.findall(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    int_0 = 2201
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    int_0 = -756
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    str_0 = "'^KMd)F1of#^%y8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    tuple_0 = ()
    none_type_0 = None
    module_1.finditer(tuple_0, none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    float_0 = -1024.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    str_0 = "J8Q~{#WJC2`T]vWw:"
    list_0 = [str_0, str_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    bool_0 = False
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    bytes_0 = b"\x9a"
    set_0 = {bytes_0, bytes_0}
    module_1.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    str_0 = "+5!(?o"
    bool_0 = False
    module_1.findall(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    int_0 = 3473
    module_1.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    float_0 = -1677.4392
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    complex_0 = 360.4088 - 2157.35931j
    module_1.template(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    float_0 = 738.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    module_1.search(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    str_0 = ";"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_4.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    dict_0 = {}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    bool_0 = False
    var_0 = module_1.purge()
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    float_0 = 2400.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    int_0 = -619
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    str_0 = "4ky#^NE]\rx7ol*xwHF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    bytes_0 = b"\n\xd6\x07\xf6\x98\x06\xba\xfa\xe1\xbes&\xed@~"
    var_0 = module_1.compile(bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    float_0 = 2566.9
    set_0 = {float_0, float_0, float_0, float_0}
    module_1.findall(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    int_0 = -908
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    var_0 = module_1.purge()
    var_1 = module_1.purge()
    var_1.__repr__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_4270():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    list_0 = []
    bytes_0 = b"|=\xfdx"
    var_0 = module_1.template(bytes_0)
    var_0.__repr__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    none_type_0 = None
    module_1.subn(none_type_0, exception_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    complex_0 = -1899.63 - 427.14385j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    float_0 = -1037.963
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    int_0 = 1609
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    bytes_0 = b"\xd7\xea\x99\xca\x1e\x8b\x92/\x05\n"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    str_0 = "r\"|sZ\\G001k'!"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    float_0 = -148.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    float_0 = 65.0
    module_1.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    regex_flag_0 = module_1.RegexFlag.ASCII
    none_type_0 = None
    module_0.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    exception_0 = module_4.Exception()
    list_0 = [exception_0, exception_0, exception_0]
    module_1.subn(list_0, exception_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bytes_0 = b"\xa6\xee\x08$\x1b\x030"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    regex_flag_0 = module_1.RegexFlag.ASCII
    module_1.template(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    dict_0 = {}
    module_1.template(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    none_type_0 = None
    bool_0 = True
    module_1.sub(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    bool_0 = False
    none_type_0 = None
    list_0 = [bool_0, bool_0, bool_0]
    module_1.match(bool_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    int_0 = 2239
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    none_type_0 = None
    bytes_0 = b"T\x96E\xeaqX\xe6\xc1\xa8e\x91.\xab`\xacZ"
    module_1.finditer(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    int_0 = 3571
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    float_0 = -2567.8449
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    exception_0 = module_4.Exception()
    module_1.template(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    bytes_0 = b"\xfc^@\x8a\x85\xde\xe36\x03\xb0=?\xc0\t\xba"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    complex_0 = -1560 - 4874.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    none_type_0 = None
    module_1.sub(regex_flag_0, none_type_0, regex_flag_0, none_type_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    str_0 = "Lqbf?B"
    var_0 = module_1.purge()
    list_0 = [str_0, var_0, str_0, str_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    none_type_0 = None
    module_2.EnumMeta(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    int_0 = 1305
    module_1.split(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    int_0 = -1481
    module_1.split(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4313():
    bytes_0 = b"'\xf3\xc7b\x85{\x80:0\xff\xbe"
    error_0 = module_1.error(bytes_0)
    module_0.get_new_command(error_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    none_type_0 = None
    bytes_0 = b"\x96\x8d\x8f\xd4\x0ec\xe0"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    float_0 = 2688.55313
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    float_0 = -833.855638
    module_1.split(float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    set_0 = set()
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    none_type_0 = None
    bytes_0 = b"\xa8\x93t\x17\xbe\xfb"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    complex_0 = 3009 + 892.2j
    module_1.match(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    bytes_0 = b"\x008"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    int_0 = 1314
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    bytes_0 = b"\x02\xa9\x9c1=\x8b\x8fl"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    str_0 = "o\x0b&Ic[4{Q5I9Gb\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    str_0 = "\t53#[SZq[\nIDpulli"
    bool_0 = False
    tuple_0 = (bool_0, str_0)
    list_0 = [str_0, str_0, str_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    str_0 = "\\j&Ki/2\x0c"
    none_type_0 = None
    module_1.sub(str_0, str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    int_0 = 1530
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    str_0 = "&tG9y2:87:du"
    dict_0 = {str_0: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    complex_0 = -1554 - 1972.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    str_0 = "PuE\t3H'+X`7"
    bytes_0 = b"\xae\xe1\xbd\ng"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    str_0 = "&i.=I8uR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    str_0 = "uRz7<TQS^tMvG="
    var_0 = module_1.fullmatch(str_0, str_0)
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    regex_flag_0 = module_1.RegexFlag.TEMPLATE
    list_0 = [regex_flag_0, regex_flag_0, regex_flag_0]
    module_0.match(list_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    float_0 = -933.9385
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    bytes_0 = b"\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    float_0 = -626.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    var_0 = module_1.purge()
    float_0 = -1082.0
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    bytes_0 = b"Va\xc5\x12\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    int_0 = 411
    module_1.subn(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    dict_0 = {}
    none_type_0 = None
    module_1.split(dict_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    set_0 = set()
    none_type_0 = None
    module_1.findall(set_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    str_0 = "Xe^-s#TmRU- \x0b%FPM0:"
    dict_0 = {str_0: str_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    str_0 = "!-[\re_:G[_V9%:g"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    int_0 = 1937
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    bool_0 = False
    none_type_0 = None
    module_1.subn(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    float_0 = -595.324516
    bytes_0 = b"6\xf4\x0f"
    var_0 = module_1.compile(bytes_0)
    var_0.__iter__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    bool_0 = False
    int_0 = -1909
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    str_0 = ".jg2Mzk2j-PRG:W\nY"
    module_0.match(regex_flag_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    module_1.split(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0, var_0: var_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    str_0 = "P"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    bytes_0 = b"\xe1\xdf9\x828"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    dict_0 = {var_0: var_0}
    module_0.match(dict_0, bytes_0)


def test_case_4361():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4362():
    bytes_0 = b"\xd3\xf6\x82\x12\xd5\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    bytes_0 = b"\xa3\x14\x19w\x9bE\xeb\x83\xe4\x96\xed4\xa0\xd3h\x1e\x89"
    var_0 = module_1.search(bytes_0, bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    float_0 = 393.2929
    module_1.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    float_0 = -425.5
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    str_0 = "'y\tR,d2r'kq4"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.split(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    complex_0 = 950.2 - 5443.801j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    int_0 = 922
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    bytes_0 = b"?"
    module_1.subn(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    bytes_0 = b"\x87\xc3\xa3b\x95[j\x1d\xc0\xb7\x18\xb2\xcf\x90"
    module_1.fullmatch(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    int_0 = -4253
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    none_type_0 = None
    var_0 = module_1.purge()
    module_1.match(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    int_0 = -1362
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    int_0 = -1917
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    int_0 = 1659
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    complex_0 = -462 + 2224j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    float_0 = -2408.0168
    module_1.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    bytes_0 = b"\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    bytes_0 = b"5\xb1^\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    var_0 = module_1.purge()
    module_1.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    tuple_0 = ()
    none_type_0 = None
    module_1.search(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, pos=none_type_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    bool_0 = False
    var_0 = module_1.purge()
    var_0.__iter__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    float_0 = -1465.7365
    error_0 = module_1.error(float_0)
    module_0.match(error_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    int_0 = 1698
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__contains__(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    str_0 = "3u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    str_0 = "+^={jOPkyH[`=DIr"
    module_1.Scanner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    float_0 = 244.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    int_0 = 565
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    int_0 = -1441
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.finditer(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    list_0 = [regex_flag_0, regex_flag_0, regex_flag_0, regex_flag_0]
    module_1.template(list_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    bytes_0 = b'\xf8\xe0\xd0>\x11\xa8I\xf6\xb9\x89\xc0"n;\x06\xaa'
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    enum_dict_0 = module_2._EnumDict()
    enum_dict_0.__setitem__(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    bytes_0 = b"V\xdf\xc0\xd1\x07)\x82\xb6:\xaep\xb7\xbd\xda!k\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    float_0 = 133.04773
    dict_0 = {float_0: float_0, float_0: float_0}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    str_0 = "e"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    float_0 = 1680.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    float_0 = -1749.59608
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0)
    dict_0 = {error_0: error_0, none_type_0: none_type_0, error_0: error_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.subn(list_0, dict_0, dict_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    error_0 = module_3.Error()
    module_1.Scanner(error_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    int_0 = 381
    tuple_0 = (int_0,)
    module_1.findall(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    bytes_0 = b"\xad\xf33"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    dict_0 = {}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    set_0 = set()
    none_type_0 = None
    module_1.subn(set_0, none_type_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    bool_0 = False
    module_1.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    int_0 = -1959
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    int_0 = 2606
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    bytes_0 = b"\x1fM\xdc"
    var_0 = module_1.findall(bytes_0, bytes_0)
    bytes_1 = b"\x13\xb0C,j\xffm"
    module_0.match(bytes_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.search(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    str_0 = "mzx=ugXjn;t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    bytes_0 = b"\xe0\x8d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    str_0 = "L8RnJ&D\x0b&aIC|z!\r<{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    bytes_0 = b"1\xb8\xc6\x90e+|\xd6\xec\x9b\x08P\xa62\xbf\xa5\x94\xae\x93"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    none_type_0 = None
    str_0 = "hX8\\_KT.l"
    str_1 = "7yY{VeNUPh$NX~"
    dict_0 = {str_0: none_type_0, str_1: str_1}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    bool_0 = False
    exception_0 = module_4.Exception()
    list_0 = [bool_0, bool_0, bool_0, exception_0]
    module_1.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    float_0 = 3023.97
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    bytes_0 = b"\x08\xefu;\x0f\x18b\x1b\x8e\x0b\xca\xfe\xe1\x8cRW\xdb\x9c\x1c\x04"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    bytes_0 = b"\xba\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    float_0 = 3952.49
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    error_0 = module_3.Error()
    module_1.fullmatch(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    module_1.Match()


def test_case_4446():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4447():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0)
    module_1.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    module_0.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    var_0 = module_1.purge()
    module_1.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    int_0 = -2787
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    bytes_0 = b"\xec\xa9\x1a\xca\xe0\xe9\x91\x10"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    bytes_0 = b"\xf1b\xd6s&\x9e\xc7\xb1\xbe\x7f\xa0\xc1\xaecC'\x8a\xdd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    float_0 = -133.156
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    int_0 = 2637
    none_type_0 = None
    module_1.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    bytes_0 = b"\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    bool_0 = True
    bytes_0 = b"\xd2\xcb\xaao\xf1\x9b\x8e\x11\x12\xb0Xn\x9fCW\x8d\x1es\xc0"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_4468():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    str_0 = "1z uFu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    str_0 = "ALO\rtxOs!lz_/q"
    none_type_0 = None
    module_1.sub(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    str_0 = "\rr%vc_oU9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    tuple_0 = ()
    none_type_0 = None
    module_1.fullmatch(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    complex_0 = 3843.903 + 471.15j
    int_0 = -311
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    int_0 = 665
    module_1.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    float_0 = 1301.91
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    none_type_0 = None
    set_0 = {none_type_0}
    module_1.split(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    int_0 = -408
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    str_0 = ".Y3)YU\x0b#pL7W\n"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_2.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    tuple_0 = ()
    str_0 = "vXm1;uHr%fb1"
    set_0 = {tuple_0, tuple_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0)
    module_0.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    int_0 = 861
    error_0 = module_1.error(int_0, pos=int_0)
    module_0.get_new_command(error_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    str_0 = "!Kf|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    set_0 = set()
    module_1.fullmatch(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    float_0 = 685.975771
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    bytes_0 = b"\xf9\xd2l\xb4\xa4\r(\xb7\x0c\xf4\x12\xb8\x02zt\x06s\x8b\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    str_0 = "z>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    bytes_0 = b"2\xecV2k'\x9e\x19\x90Q\x8d\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    error_0 = module_3.Error()
    module_1.compile(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    bool_0 = False
    float_0 = -29.117136
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    float_0 = -52.43
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    none_type_0 = None
    list_0 = []
    list_1 = [none_type_0, none_type_0, list_0, list_0]
    exception_0 = module_4.Exception(*list_1)
    module_0.match(none_type_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    list_0 = []
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    str_0 = "}?%{84@{;N.]%"
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    bytes_0 = b"8\x8ee\xa0\x80\x1fZ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    bytes_0 = b" g\xd7\xdb\x02\x98\xf54Q?"
    tuple_0 = (bytes_0, bytes_0)
    module_1.split(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    bytes_0 = b"< \xcb\xc2\x9e\nZP\xdeK\xf5\xd2"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    str_0 = "btTv5\x0bbc@<"
    list_0 = [str_0, str_0, str_0]
    module_1.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    bool_0 = False
    module_1.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    bytes_0 = b""
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setitem__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    base_exception_0 = module_4.BaseException()
    none_type_0 = None
    module_0.match(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    str_0 = "=Ph;o"
    dict_0 = {str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    str_0 = "aGU\\A\t"
    var_0 = module_1.split(str_0, str_0)
    module_1.split(var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    bytes_0 = b"\x02?B\xa9\xde#\x96\xb1,\xa9\xa6\xe2"
    str_0 = ":*&8\rM25\rK/*@H*k*"
    module_1.split(bytes_0, bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    set_0 = set()
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    bool_0 = False
    str_0 = "\x0c^NDoYL"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    complex_0 = -645.37 - 339.17j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    module_1.finditer(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    float_0 = 561.812
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    bytes_0 = b"\x98\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    int_0 = 1513
    none_type_0 = None
    module_1.Scanner(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    bytes_0 = b"kP\xb1\x9e\xf6\xe7\xe8\xcbSS"
    var_0 = module_1.findall(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    module_1.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    str_0 = "Uh[B"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.sub(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    bytes_0 = b"\x1f\x00z\r\xad\xceP\xd6\xa3\x0e\x98\xd5\x8c\xf3\xf9\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    str_0 = "3+s\x0ba"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    int_0 = 1970
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    bytes_0 = b"\x03ow(\xc1\xf4\xf9MI{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    bytes_0 = b"]\xea\xa7\xdd\x9ft%\xa8\xc4+\x87\tv\xf4\x13"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    bytes_0 = b"%\xc2m`\x9eS\x1d\xd8+BW6(;HG\xbb\xeb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    set_0 = set()
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    str_0 = "{J<E]~6p\rw\\mi."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    bytes_0 = b"|),\xd8V\\\\\x95\xc3Wk\xb4Z\xad\xe6m"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    int_0 = 182
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    none_type_0 = None
    int_0 = -1761
    module_1.sub(none_type_0, int_0, none_type_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    error_0 = module_3.Error()
    module_2.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4553():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    int_0 = 445
    module_1.split(int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    bytes_0 = b"\x1fX\x88\xf4\xd5\xd1\xcb\x9bT\x11\xe3\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    str_0 = ')`Z1[*H"/NqPD'
    str_1 = "z9$).BsdFf"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    bool_0 = True
    module_1.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    str_0 = 'bo"~\nnh!|UnjULp0'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    list_0 = []
    module_1.sub(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    float_0 = -837.011799
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    bytes_0 = b" \x10 \xbeYS\xde* \x85\x89\xd1"
    tuple_0 = ()
    module_1.finditer(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    int_0 = -56
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    str_0 = "#wX%>rVxRH'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    float_0 = 527.81
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    int_0 = 1762
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    bytes_0 = b"Y\xfa#\xd6\x93\x11\xa7\xf8\xa1\xfb\xa4\x1e\xf7\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    float_0 = -208.32
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    int_0 = -2857
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    str_0 = "_e0%R<JB(~8 X[<.\n0lS"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bytes_0 = b"\xfb\x07\xbe\x92\xce]U*\x99\xa5\x85\xa6\r(\xf3L\xd0"
    none_type_0 = None
    module_1.subn(bytes_0, none_type_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    float_0 = 798.7916
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    bytes_0 = b'\xb2\x88\x190\x8d"h&f\x0e\x99~\xa5\xbb\xb0\xe1\xb8\xca\xf3\x05'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    int_0 = 3554
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    float_0 = 2674.900316
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    bytes_0 = b"\xdd4\xf3m\xfb\x1f\x97"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    bool_0 = False
    none_type_0 = None
    module_1.split(bool_0, none_type_0)


def test_case_4585():
    var_0 = module_1.purge()


@pytest.mark.xfail(strict=True)
def test_case_4586():
    bytes_0 = b"\xf1_\x10\xd4V\xe47\x12#\xa8\x14\xca"
    none_type_0 = None
    module_1.subn(bytes_0, none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    int_0 = 2313
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4589():
    complex_0 = 2390.6243 - 483.968j
    set_0 = {complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    bool_0 = True
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    float_0 = 1029.4
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    var_0 = module_1.purge()
    bytes_0 = b"\x8a\xb1\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    tuple_0 = ()
    module_1.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    int_0 = 244
    set_0 = {int_0}
    module_2.auto(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    none_type_0 = None
    set_0 = {none_type_0}
    module_1.findall(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    float_0 = -2456.888
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    var_0 = module_1.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    str_0 = "W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4603():
    bool_0 = False
    str_0 = ""
    var_0 = module_1.template(str_0)
    module_1.template(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    bytes_0 = b">\x95X\xab"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    int_0 = 4254
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4608():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    int_0 = -2664
    module_1.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    str_0 = "8md3\x0baox(vU,'~f;\"tj+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    bytes_0 = b"gOe\x1a\x8c\xb8\x19\x07\x9a\x9a\xc0[z\xbaE\xae"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    error_0 = module_3.Error()
    none_type_0 = None
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    complex_0 = 2589.890549 + 153.722j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    float_0 = 1845.0
    dict_0 = {}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    var_0 = module_1.purge()
    set_0 = {var_0, var_0}
    module_1.subn(set_0, set_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    int_0 = 1750
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    int_0 = -135
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    int_0 = 707
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    bytes_0 = b"\xe8"
    var_0 = module_1.template(bytes_0)
    tuple_0 = (bytes_0, var_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    none_type_0 = None
    float_0 = -2543.061
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    none_type_0 = None
    module_4.BaseException(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    int_0 = -1725
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    bytes_0 = b"vt\xaeB\x7f\xea\xad\xb6\x10$\xa4\xb6\x15J\x91\rl\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    str_0 = " /qAn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    bytes_0 = b"\xa0\xc9\x10\x06HW\x864\xaa\xb8\x84\xfem\xfb\xa5\x1dH\xa4\xbd"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    int_0 = 1018
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    bytes_0 = b"\xea\x99\xb1\xecYW\x9a\xd7\xbb>\xfdl\xe5>\xe1+\xd0]\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    int_0 = 1835
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_1.split(enum_dict_0, enum_dict_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    bytes_0 = b']\x80:\xb5\x993\xde\xec\xe7\x1f\xc3\x19"\x11\x0c\x19'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    int_0 = -2619
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    str_0 = "O3W\n>Ftp`M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    var_0 = module_1.purge()
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    bytes_0 = b"I\x9dG\x17x\x19\x80\xdfa\xcc\x874\xbb\xce\xbb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    str_0 = "i4#)\nF2)P+jaD"
    module_1.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    complex_0 = -681.245 + 402.286j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    none_type_0 = None
    int_0 = -4506
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    tuple_0 = ()
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    var_0 = module_1.purge()
    var_0.__getitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    bytes_0 = b"i\xfd\x16\x97\x04"
    module_1.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    str_0 = "+y?qH(0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    int_0 = -2776
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    bool_0 = True
    int_0 = -1316
    dict_0 = {bool_0: bool_0, bool_0: bool_0, int_0: bool_0, int_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    int_0 = -2034
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    bytes_0 = b"i\xf8{\x1c\xfeQc(\xfd\x1c\xb7\x1a\xa0\xe7w@]\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    error_0 = module_3.Error()
    module_1.template(error_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    str_0 = "!lZ\x0b*|to75"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    bytes_0 = b"\x18[F\x7f\xb4"
    module_1.findall(bytes_0, bytes_0)


def test_case_4661():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4662():
    list_0 = []
    dict_0 = {}
    module_1.Pattern(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    complex_0 = -4217.77003 - 916.4729j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    int_0 = 3689
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    int_0 = 2380
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    bytes_0 = b"\xf87\xb5x\xb7C\xa5\x8a\xfb\xff\xbd\xed\xb5L\x12y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    bytes_0 = b"\xe2.W\x15"
    module_1.sub(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    int_0 = -308
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    int_0 = 687
    none_type_0 = None
    module_1.subn(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    none_type_0 = None
    module_1.template(none_type_0)


def test_case_4677():
    bytes_0 = b">d\xad^Tv\xccR\x90"
    var_0 = module_1.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    bytes_0 = b"\x17\xf9%\xcc\xa9\x8f\x1f\xd9\xfa\x08\x95\xc5\x1a<\xa5C\x8b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    float_0 = -528.343
    none_type_0 = None
    module_1.split(float_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    str_0 = "nWX i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    bytes_0 = b"\xa7\x8cT\xc3.\x93\x84\xac\xba\x08)\xe4N=\xd8\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    float_0 = -409.90057
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    int_0 = -138
    none_type_0 = None
    module_1.findall(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4686():
    complex_0 = -647.6061 - 2152j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    int_0 = -1268
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    str_0 = "]\x0blv:{e!+6AH`W\\\\S#Zq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    int_0 = -2030
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    bytes_0 = b"e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    int_0 = 540
    none_type_0 = None
    module_1.finditer(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    bytes_0 = b"\x886\xd1-\xb8H\x85\x91q\xd3\xf1\x1bt\x07\xba\x7f1\xe4"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    int_0 = 1232
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    str_0 = "7b"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    bool_0 = False
    var_0 = module_1.purge()
    var_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4699():
    complex_0 = 1916.564 + 928.7j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    float_0 = -1144.551884
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    float_0 = 1578.21
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    bytes_0 = b"EfgVTl\xc6\xfe\xa6o\x92T\xa1k\x1b 2\xdao"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    bytes_0 = b"\x8c/\x08q7\xcdf\xb3~'\r\xb9\x85\x0b\xb3\x01g"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    module_2.unique(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    str_0 = "KwK_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    str_0 = "Z5Vid>T)L(\x0c]P\r"
    error_0 = module_1.error(str_0)
    error_1 = module_3.Error()
    var_0 = module_1.purge()
    var_0.__reversed__(error_1)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    str_0 = "-x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    int_0 = 1504
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


def test_case_4714():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4715():
    int_0 = 2
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    bytes_0 = b"=\xf8\xe7\xe1\x86K82\xe1p\xa3\xe3\x02"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    float_0 = 530.0
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_1.subn(list_0, none_type_0, none_type_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    bool_0 = False
    float_0 = -3165.32268
    dict_0 = {bool_0: bool_0, float_0: bool_0, bool_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    bytes_0 = b"s|\x90qK\xe9\xecJba\xf5\x0b\xf46\xd7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    int_0 = -4246
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    object_0 = module_4.object()
    bytes_0 = b"\xd8\xfeR\x1c\x97.%\xda\x16\xe7\xfd"
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    dict_0 = {}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    bool_0 = True
    module_1.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    str_0 = "[UOQ^~(M"
    module_1.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    int_0 = 4248
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    int_0 = -656
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4732():
    error_0 = module_3.Error()
    int_0 = -20
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    bytes_0 = b"\xea\x93u+q\xa1\xd7\xe8"
    tuple_0 = (bytes_0,)
    module_1.split(tuple_0, tuple_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    int_0 = -2609
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    complex_0 = -1959.243958 - 121.927611j
    none_type_0 = None
    module_1.finditer(complex_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    complex_0 = -327.098 - 400.426j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    int_0 = 1708
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    tuple_0 = ()
    none_type_0 = None
    module_1.finditer(tuple_0, none_type_0)


def test_case_4739():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4740():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    float_0 = 586.7079
    list_0 = [float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    str_0 = "yRF[Pcf&|?/\x0bpt:h`-)}"
    module_1.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    int_0 = 1414
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    str_0 = ')-)|;"*'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    bytes_0 = b"\xb9\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    str_0 = "ZJ<"
    var_0 = module_1.search(str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.search(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    str_0 = "TE\x0c3cs^$j\x0ceJPrH65*y"
    str_1 = "~LTsXXTja]TV"
    var_0 = module_1.search(str_0, str_0)
    str_2 = "?Q]Y0"
    dict_0 = {str_1: var_0, str_2: str_0, var_0: str_0}
    module_1.Match(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    bytes_0 = b"\x98\x0bw\x91v\xf9\xa1\xea&\xc7\x14)\x0c0\x86\xc8"
    module_1.sub(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    bytes_0 = b"19\xdc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    str_0 = "<\tfVTZCz!v\r7-s"
    list_0 = [str_0, str_0, str_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    int_0 = 735
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_1.compile(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    int_0 = 299
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    bytes_0 = b"\xef\x8e\x84/\xc4$\xa6\xbap\xb1jC\x8c\xcd\xb1\xc3\xba="
    var_0 = module_1.template(bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    complex_0 = 613.921184 - 693j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    float_0 = -1969.84
    none_type_0 = None
    module_1.search(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    enum_dict_0 = module_2._EnumDict()
    module_1.finditer(enum_dict_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    tuple_0 = ()
    none_type_0 = None
    module_1.match(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    list_0 = []
    none_type_0 = None
    module_1.findall(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    bytes_0 = b","
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    complex_0 = -1177.7971 + 238.3j
    none_type_0 = None
    module_1.search(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    bytes_0 = b"\xcb}*\x1b\x0b\xcd\x07'\x9a\xb2R\x10gf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    int_0 = 647
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    int_0 = -2057
    none_type_0 = None
    module_1.split(none_type_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    float_0 = -3620.635
    tuple_0 = (float_0,)
    module_1.search(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    int_0 = 1278
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    str_0 = "1h0H8C X9Ap"
    var_0 = module_1.search(str_0, str_0)
    list_0 = [var_0]
    module_1.match(list_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    var_0 = module_1.purge()
    module_1.split(var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    enum_dict_0 = module_2._EnumDict()
    var_0 = module_1.purge()
    var_0.__len__(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    str_0 = "nk\tEl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    complex_0 = 1425.37455 - 1230.36824j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    float_0 = -1154.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    bytes_0 = b"\x15bK\x95\xab\xe1\x12\xc6\xfc\xd0\x05\xd3t\xf0\x8e\xd9\x0f\x1c\xb2"
    none_type_0 = None
    module_1.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    float_0 = -4765.572036
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    int_0 = -993
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    var_0 = module_1.purge()
    tuple_0 = (var_0,)
    module_0.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    error_0 = module_3.Error()
    bool_0 = True
    none_type_0 = None
    module_1.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bytes_0 = b" \\\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    object_0 = module_4.object()
    set_0 = {object_0, object_0, object_0}
    error_0 = module_1.error(set_0)
    module_1.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    enum_dict_0 = module_2._EnumDict()
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    bytes_0 = b"\xa8x\x9c\xaad\x1frRr\xa8\xc6\xd5\xf8\xfd@\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    base_exception_0 = module_4.BaseException()
    none_type_0 = None
    module_0.get_new_command(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    bytes_0 = b"\xc1*G!D[3\xc3?"
    tuple_0 = (bytes_0,)
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    float_0 = -1355.612
    none_type_0 = None
    module_1.search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    set_0 = set()
    module_2.EnumMeta(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    complex_0 = 3823.61885 + 1159.936975j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    tuple_0 = ()
    none_type_0 = None
    module_1.sub(tuple_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4800():
    str_0 = "-l%~5puu@L3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    bytes_0 = b"hP"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


def test_case_4802():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4803():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0}
    module_1.search(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    bool_0 = False
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    bytes_0 = b"F\xb63\xd8\xac\xbcQ\xbe;\xeebCe@3d\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    list_0 = []
    module_1.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    object_0 = module_4.object()
    module_1.escape(object_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    bytes_0 = b"\x18\x97\xf7\xe4\xd6.\xdaz\xd4\xdd="
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    bool_0 = False
    module_1.search(bool_0, bool_0)


def test_case_4816():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4817():
    base_exception_0 = module_4.BaseException()
    list_0 = [base_exception_0, base_exception_0]
    module_0.match(list_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    bytes_0 = b"\x1b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    int_0 = 1968
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    set_0 = set()
    module_1.split(set_0, set_0, set_0)


def test_case_4822():
    none_type_0 = None
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    float_0 = 553.9064
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    str_0 = "IX=T\nk|ij"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    int_0 = 4043
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    bytes_0 = b"W\xa1\xb4\xa4 \xf5\xb7\xd4\xb0\xb6]"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    tuple_0 = ()
    module_1.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    int_0 = 1171
    list_0 = [int_0, int_0, int_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    bytes_0 = b"\xb0\x01m1w\x04\x05OGcU\xd7"
    module_1.finditer(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    none_type_0 = None
    module_0.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    str_0 = "3g;w6z]pv"
    var_0 = module_1.search(str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    str_0 = "M#ef\x0bi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    bytes_0 = b"'\x8c\xf30\x86\x13u"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


def test_case_4836():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4837():
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {bool_0: list_0, bool_0: list_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    tuple_0 = ()
    module_1.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    float_0 = -1465.2038
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    float_0 = -695.5
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_1.subn(dict_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    bytes_0 = b"\xa2\xb3\x14>\x9fVm\x91\x94r\x11)\xc9\x06\xb6\xe8\x14\xc3\x8b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    bool_0 = False
    module_1.template(bool_0)


def test_case_4845():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4846():
    float_0 = 1910.628
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    int_0 = 4938
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    bytes_0 = b"dYR\x8a; c\xc7\x0f'\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    int_0 = -448
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    int_0 = -2224
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    list_0 = []
    module_2.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    bytes_0 = b"\x19\xe6l\xe5u\x8dp\xda\x9e\xc9\rT\x1c\xa0"
    bytes_1 = b"\xec\x01\xb53\x8c\x83\x13:o\xe1\x1a\x0f\x12\xb4\xe2\x13\x15"
    dict_0 = {bytes_1: bytes_1, bytes_0: bytes_1, bytes_0: bytes_1}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    int_0 = 358
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    str_0 = "c\r#\tEbU^#\\jTZNLf$oq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bytes_0 = b"\xd3l\xee\x9dL\x93\xd8\xfcH\xd5Y\xaf7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    tuple_0 = ()
    enum_dict_0 = module_2._EnumDict()
    module_1.sub(tuple_0, tuple_0, tuple_0, flags=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    float_0 = 706.38583
    error_0 = module_1.error(float_0, float_0)
    module_1.search(error_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    str_0 = "]c2u{4%$\tjX4n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    float_0 = -3306.23
    bool_0 = True
    tuple_0 = (float_0, bool_0, bool_0)
    var_0 = module_1.purge()
    var_0.__setattr__(float_0, tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    bytes_0 = b"\xa8\xe2\xf3T\xc32>\x9c\x07c:i\xac\xa1\x10Q\xbb\xa9\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    bytes_0 = b"\x1b\xdd\xa0P\xc9\xa5jP\xd20\xcfZ"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_1.sub(dict_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    int_0 = 1859
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    str_0 = "yP2zJrgoy=0`D):P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    complex_0 = 3723.847 + 771.12633j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    str_0 = "oB\tU.B:xN>"
    none_type_0 = None
    module_1.sub(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    bytes_0 = b"F\xa8P\xf5\xd9\x02\x1d?T\xa1\xf76\x7f\xd6\xa2\xda\\\x89\xedG"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    list_0 = []
    module_1.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    complex_0 = -236.07384 + 2564j
    none_type_0 = None
    module_1.findall(complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    bytes_0 = b"\xdc\x01\xbe\xb7\x0bM\xc1\x15n"
    none_type_0 = None
    module_1.split(bytes_0, none_type_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


def test_case_4877():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4878():
    complex_0 = 3917.5 - 725.042265j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    base_exception_0 = module_4.BaseException()
    module_1.escape(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    bytes_0 = b"\x97\x92a\xa3Ab\x90-6\xcaO\xde\x0c\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    str_0 = '\x0c"18c&,&)a'
    str_1 = "k=.FBev.'w#"
    str_2 = 'tLZ"6:w.xMU'
    str_3 = "74E"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_3: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    bool_0 = True
    none_type_0 = None
    module_1.fullmatch(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    str_0 = "3vBePGr_CT"
    error_0 = module_3.Error()
    list_0 = [error_0, str_0, error_0]
    tuple_0 = (str_0, error_0, list_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0, error_0)
    module_1.subn(tuple_1, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4885():
    int_0 = 2581
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    bytes_0 = b"\x96e"
    var_0 = module_1.purge()
    var_0.__contains__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0, var_0)
    module_0.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4891():
    bytes_0 = b"3\xf0g\xa8\x87\x9e#n\xdc\xa6=\xc6["
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    int_0 = 2066
    none_type_0 = None
    module_1.findall(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    bool_0 = True
    module_1.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    object_0 = module_4.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    str_0 = "%\t^![eeZZCwFD"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    bytes_0 = b"\r\x02\xcf\x80lf\xc9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [bytes_0, dict_0, dict_0]
    none_type_0 = None
    module_1.finditer(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    complex_0 = -1616.22 - 2709.168504j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    int_0 = 3396
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    none_type_0 = None
    bytes_0 = b'\x9bt\x1fh\xc4J\xcf\x0c"\xf1\xf7@Q\xb0d\xaev'
    var_0 = module_1.compile(bytes_0)
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    bytes_0 = b"8]\xf9\x06\xf6\x9b\xd2\xd0\x8a\xf7-\xdf$\xc5*\xc7\xf4\x0b q"
    var_0 = module_1.compile(bytes_0)
    module_1.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    str_0 = "3VZ~{c\\2TnA;I1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    float_0 = -3737.055058
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    bytes_0 = b"\xea\xf6<\x82\xfa\x05t\xee\x8eV\xe7\xd0\x04\xac\xa6{\xc5\x16w"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    str_0 = "R#QR[OD5C#yKU"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    bytes_0 = b"u\x15\x8c\x8by\x90\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    var_0 = module_1.purge()
    module_1.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    none_type_0 = None
    float_0 = 91.26381
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    bytes_0 = b"\xc7\xf9TG\xbb\xab\xd7\xae}d\xdcKO\xa1\xf8\x06;:\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    none_type_0 = None
    list_0 = [none_type_0]
    exception_0 = module_4.Exception(*list_0)
    module_0.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    int_0 = 1471
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    bytes_0 = b"}\x87\x00\x08Is\xb2\xaa\\!\xc6\xaf\xfe\xbb\x86\xb1\x19\xea\x9b"
    var_0 = module_1.purge()
    var_0.__contains__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    float_0 = -3023.2783
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    complex_0 = -166.894 - 30.984641j
    module_1.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    int_0 = 135
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    bytes_0 = b"\xb7\xfc\x16\xd4\xfaR-\xa3\xdcr\xa4\xef?U"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    int_0 = 529
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    dict_0 = {}
    none_type_0 = None
    module_1.template(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    float_0 = -1903.152471
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    int_0 = -4052
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    float_0 = -1318.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    auto_0 = module_2.auto()
    object_0 = module_4.object()
    none_type_0 = None
    module_1.split(auto_0, object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    bytes_0 = b"\xae*\x80\xf4UT\xb1s"
    str_0 = "CJ3ey]HgjF"
    none_type_0 = None
    str_1 = "NpBc06Xe-8CF-Cq' "
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_2.EnumMeta(*bytes_0, **dict_0)


def test_case_4934():
    none_type_0 = None
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    float_0 = 1260.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    base_exception_0 = module_4.BaseException()
    regex_flag_0 = module_1.RegexFlag.UNICODE
    module_1.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    str_0 = "}=!jO%*9\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    float_0 = -4430.55
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    complex_0 = -4886.47 + 834.172j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4946():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4947():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    int_0 = -447
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    int_0 = -970
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    bytes_0 = b"\xd9\xb6:\x95\xa5z\xee\x1c.C\xb2\xbf\x91w"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    int_0 = 3265
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    dict_0 = {}
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    none_type_0 = None
    bytes_0 = b"\x99SKd\xd0\x00\xd9\xee\xcc\x81/\x8fK\xa4Y"
    var_0 = module_1.template(bytes_0)
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    bytes_0 = b"\xc6Y\xc5^o\x9c\xda@\x03y\xc6"
    list_0 = [bytes_0, bytes_0, bytes_0]
    dict_0 = {}
    error_0 = module_3.Error(*list_0, **dict_0)
    var_0 = module_1.purge()
    var_0.__delattr__(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    float_0 = -54.35
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    float_0 = -2786.30543
    module_1.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    int_0 = -2304
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    bytes_0 = b""
    none_type_0 = None
    module_1.sub(none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    float_0 = -1393.3099
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    int_0 = 2704
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    int_0 = 900
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    bytes_0 = b"\xac\xb5-}]\xbfT/f"
    var_0 = module_1.escape(bytes_0)
    var_1 = module_1.template(var_0)
    module_0.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    str_0 = "6!|Bpd{'o/PBOg8"
    var_0 = module_1.purge()
    var_0.__repr__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    str_0 = "rt&q"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    bytes_0 = b"\xb0\xb1G\xcc\xb0T*]().V;\t\xb1"
    list_0 = [bytes_0]
    error_0 = module_3.Error(*list_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    list_0 = []
    module_1.split(list_0, list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    complex_0 = -2879.4 - 1446.74682j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0, var_0: var_0}
    module_0.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    enum_dict_0 = module_2._EnumDict()
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    int_0 = 839
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    int_0 = 2497
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    float_0 = 4317.41
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    int_0 = 135
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    bytes_0 = b'\x1d\xeaL\xdb_"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    int_0 = 2185
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    int_0 = 4120
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    int_0 = -857
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    int_0 = 384
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    bytes_0 = b"8.s\x9bl\xbf"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    float_0 = 47.597
    module_1.escape(float_0)


def test_case_5001():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5002():
    bytes_0 = b"{\x9c\xcd0\xe8\xd2X\xd0U\xaf\x01B+\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    none_type_0 = None
    float_0 = -672.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    bytes_0 = b"\x8e\x1ez\xe7\x1f)\xac&\xb5V2\xba\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    str_0 = ";szdT5+@?q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    str_0 = "tX\nfOTf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    bytes_0 = b"\xd2\x93\x1fL\x05\x8a\xf4\xa1\x08\x7f{"
    str_0 = "yqkirIWaR@\rp['"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, bytes_0, str_0, set_0)
    list_0 = [tuple_0]
    module_4.object(*list_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    str_0 = "k,q}ZN(X;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    bytes_0 = b"e~\xd0\t`2<^t\xc2"
    none_type_0 = None
    module_1.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    var_0 = module_1.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    int_0 = -2093
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    base_exception_0 = module_4.BaseException()
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    int_0 = 1258
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    float_0 = 1126.29
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    float_0 = -3017.8768
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    str_0 = "mE.V"
    module_1.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    base_exception_0 = module_4.BaseException()
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    base_exception_0 = module_4.BaseException()
    set_0 = {base_exception_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    bool_0 = False
    module_2.EnumMeta(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    str_0 = "t<{b?5v}d]5n\tG-a/\n"
    var_0 = module_1.compile(str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    int_0 = -1463
    bool_0 = True
    module_1.finditer(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    float_0 = -702.8
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    float_0 = 166.464106
    int_0 = 889
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    none_type_0 = None
    list_0 = [none_type_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    int_0 = -335
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    bytes_0 = b"X\xaa|\xa6$\xfe\xc6\xd4\xae\xc2b\xfa;\x0e\xfd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    int_0 = -140
    module_1.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    int_0 = 4510
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_1.split(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    str_0 = "\roL`p\x0bGG#F${5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    float_0 = 1872.95
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    bytes_0 = b"rJ\x7fs\x0c\xcd\xd3\x19_"
    module_1.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    bool_0 = False
    module_1.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    float_0 = -1736.0
    none_type_0 = None
    module_1.findall(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    int_0 = -1113
    module_4.Exception(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    bytes_0 = b"\xb9\xd9\x16"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    int_0 = 2151
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    bytes_0 = b"P\t\xd9\xfe\xdb\xbd\xcf;\xbd\x9d\x1b\xf4\xc5&&b\x92\xf4\r"
    var_0 = module_1.compile(bytes_0)
    module_0.get_new_command(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    int_0 = -2282
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    set_0 = set()
    module_1.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    float_0 = 2157.8661
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    complex_0 = -41.9 + 728.211j
    module_1.split(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    float_0 = 5303.50095
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    list_0 = []
    module_2.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    float_0 = -188.3
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    int_0 = -812
    module_1.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    error_0 = module_3.Error()
    module_1.findall(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    var_0 = module_1.purge()
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    var_0 = module_1.purge()
    bool_0 = False
    module_1.sub(var_0, var_0, var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    bytes_0 = b"\x88|2#\x97GeW\xa5K\xbd\x91Lt"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    var_0 = module_1.purge()
    enum_dict_0 = module_2._EnumDict()
    module_1.findall(var_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    bytes_0 = b"\x89Y\xa8y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    complex_0 = 2011.09 - 646j
    set_0 = set()
    module_0.get_new_command(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    bytes_0 = b"\x95\x9c\xf01-"
    str_0 = "Z-B6ljF}p"
    bool_0 = False
    module_1.sub(bytes_0, bytes_0, str_0, str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    bytes_0 = b"\x9f\x9b\x8b\xb6{\xa9=\xb0Y\xbb\x04\xdf$\x07\x97\nBjk"
    dict_0 = {bytes_0: bytes_0}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    float_0 = -1010.61109
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    bool_0 = True
    bytes_0 = b"\x8f\xde/[6\xccC\xb6\xd9"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    str_0 = "RG$gU\\o::3d'KvB"
    tuple_0 = (str_0,)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    float_0 = -45.3
    list_0 = []
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    error_0 = module_3.Error()
    int_0 = 1996
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    dict_0 = {}
    int_0 = -2753
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    str_0 = "<k!0P}yC"
    var_0 = module_1.match(str_0, str_0)
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    bool_0 = False
    int_0 = -1332
    module_1.fullmatch(bool_0, bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    float_0 = 6.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    str_0 = "6Xu^ttK2i-#=9\n"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    str_0 = "]e)KS'm"
    module_1.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    float_0 = 465.0446
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bytes_0 = b"Q\x12~"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    int_0 = -181
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    none_type_0 = None
    str_0 = "`JQ\x0b-nG^"
    var_0 = module_1.compile(str_0)
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    bytes_0 = b"`\xbf\x7f`\x8b\xc1\x93\x9do\xed\xc2j\x84Z\x13\x88\xa9\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    str_0 = "*ym6T"
    module_0.match(str_0, str_0)


def test_case_5099():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5100():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5101():
    int_0 = -578
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    str_0 = "\tBlTO>+>uMs?}uSB&"
    var_0 = module_1.sub(str_0, str_0, str_0)
    dict_0 = {}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    bytes_0 = b"B"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    str_0 = "HuXtI|fhwm\t,U2Bne"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    bytes_0 = b".\x81*IEc\xa0\xdf\xbd\xdaY;9\x7f\xdcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    str_0 = ","
    var_0 = module_1.fullmatch(str_0, str_0)
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    str_0 = "u1'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    complex_0 = 1892.06 - 1719.56j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, pos=none_type_0)
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    list_0 = []
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    int_0 = -574
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    bool_0 = False
    none_type_0 = None
    module_1.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    int_0 = 27
    list_0 = [int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    float_0 = 3671.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    int_0 = -316
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.fullmatch(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    exception_0 = module_4.Exception()
    tuple_0 = (exception_0,)
    module_1.subn(tuple_0, exception_0, tuple_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    bool_0 = True
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    str_0 = "(BUdqA_p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    complex_0 = -931.27 + 266j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    int_0 = -2045
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    int_0 = 733
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    bytes_0 = b"2\xc8\xeb\xce\x8a\n\xc0\x96\xb9.g"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_1.subn(list_0, list_0, none_type_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    bytes_0 = b"\xff/\x8bn\x9c\x93N\x84[\xe0_\xfe\x83@x\x8aO\x06\xac"
    int_0 = -3332
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, int_0: exception_0}
    bool_0 = False
    module_1.findall(dict_1, bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    bytes_0 = b"\xdf1\xeek\\\x88<\xff\x19"
    none_type_0 = None
    module_1.sub(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5133():
    tuple_0 = ()
    module_1.sub(tuple_0, tuple_0, tuple_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    float_0 = 1916.4
    module_1.split(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    str_0 = "(FN&@V8@D\\7<\rP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    object_0 = module_4.object()
    str_0 = "a7"
    none_type_0 = None
    module_1.subn(str_0, str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    error_0 = module_3.Error()
    module_2.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    bytes_0 = b"\xe9\xab|F\xe4\xf3\xc65%\xeak\xdc,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    int_0 = -1477
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    str_0 = "JO\x0bk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    bytes_0 = b"8]\x86\xa7<(u\x00s\xdd\xacU\xff%}\x90H"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    int_0 = 2038
    tuple_0 = (int_0,)
    int_1 = -165
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    bytes_0 = b"\x8d"
    int_0 = 1534
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    float_0 = 1960.797
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    float_0 = 1739.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    int_0 = -2321
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    bool_0 = True
    none_type_0 = None
    module_1.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    bytes_0 = b"\xc2J>,"
    var_0 = module_1.template(bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    str_0 = "=PO0[HL"
    module_1.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    bytes_0 = b"\x12C\xf6\xbe\x0f\x89\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    int_0 = -2136
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    bytes_0 = b"\x17\x85\x97\x01\xb9\xc6\xb1\x07.\x16"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    float_0 = 765.86037
    module_1.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    int_0 = 2415
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    bytes_0 = b"\xb3\x97"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    int_0 = -4267
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    str_0 = "!dFOcfV=\\)z(o1"
    error_0 = module_1.error(str_0, str_0)
    module_1.escape(error_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    float_0 = -1587.557
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    bytes_0 = b"\xf2\x9e\xe5\x82\xd6\xf2%\xac\xff\xd9\x07\x05+`\xd2%\x93\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    str_0 = "Xu1g[H.YF{}]KM8<1d("
    set_0 = {str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    var_0 = module_1.purge()
    str_0 = "z1>"
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    bytes_0 = b"\x8c\xea\xd0\xd5f\xce\xe5\x96"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    int_0 = -3667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    str_0 = "ygQ\\4u'*`L*uA@G-N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    str_0 = "LF\x0bX6QA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    int_0 = 977
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    int_0 = 1999
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    str_0 = "XA9o@DU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    str_0 = "Sa("
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    bytes_0 = b"\xe1\xb1N`K\xa22\xd7UE\xd2\xd7R"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    float_0 = 755.771829
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    bytes_0 = b"\xc8\xbc2\x96\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    int_0 = 1391
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    float_0 = 218.382272
    str_0 = "p\tq7+|\x0c<F#BK~If9\\%"
    module_1.sub(float_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    int_0 = -1791
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    int_0 = 926
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    dict_0 = {}
    base_exception_0 = module_4.BaseException(**dict_0)
    module_0.match(base_exception_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    bytes_0 = b"\x1dm\x83\x15]\x81\xd4\x8b\xc5\x8d\x8b\xac?\x1d\xc7\x13"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    int_0 = -1299
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    complex_0 = 3163.7569 + 2521.06j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    bytes_0 = b"\x01c+\xed._\x87\xc2"
    module_1.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    float_0 = -4491.0
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    float_0 = 2260.1
    none_type_0 = None
    module_1.split(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    var_0 = module_1.purge()
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    complex_0 = -2316.282 - 1384.41j
    bytes_0 = b"z"
    module_0.match(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    none_type_0 = None
    int_0 = -546
    module_1.fullmatch(none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    int_0 = -320
    none_type_0 = None
    module_1.split(int_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    none_type_0 = None
    complex_0 = -1193 + 1255j
    module_1.subn(none_type_0, complex_0, complex_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    int_0 = 763
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    bytes_0 = b"\xbf\x8aD\x07\xf2S\xc8h\xdaH\xd49\xf2\x07R\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    float_0 = -419.93234
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    none_type_0 = None
    float_0 = 1805.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    str_0 = "{LozJq_r_\te(pr-I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    bytes_0 = b"\xbe\x87\xcf\xe8\xdc\x1c,\xe76\xa1\xdc|\xb0\xe9"
    var_0 = module_1.escape(bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    int_0 = 2610
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    int_0 = 4399
    error_0 = module_1.error(int_0)
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    int_0 = 1474
    set_0 = {int_0, int_0, int_0}
    module_1.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


def test_case_5224():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5225():
    enum_dict_0 = module_2._EnumDict()
    error_0 = module_1.error(enum_dict_0)
    none_type_0 = None
    module_1.search(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    bool_0 = False
    none_type_0 = None
    module_1.findall(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    float_0 = -425.0439
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    bytes_0 = b"'\xde7\xf16\x82\x971U\xdd\x83\x8c\x8a"
    var_0 = module_1.template(bytes_0)
    tuple_0 = (bytes_0, var_0, var_0)
    set_0 = {tuple_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    int_0 = -1217
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    str_0 = "XX[zLCa]sl\nDO4U\t\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    str_0 = "r_Y4v="
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    var_0 = module_1.purge()
    module_1.compile(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    bytes_0 = b"\x07\x13v\x99\xe7t\xf0\xe1'&\x8e"
    var_0 = module_1.escape(bytes_0)
    var_1 = var_0.__dir__()
    module_1.subn(var_1, var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    complex_0 = -471.4015 - 1444.106j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    bool_0 = True
    none_type_0 = None
    bytes_0 = b"c\xf6\xc8\xed\xbf\xc4\xa4"
    module_1.match(bool_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    base_exception_0 = module_4.BaseException()
    module_0.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    str_0 = "yRwtWPv<?A~CcFol"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    none_type_0 = None
    str_0 = "\"W$6/|'x{0mehuICc"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    bytes_0 = b"\x04SZ\xc3\xe5\xbf\xfe\xa8Z.x\xf9<"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_1.split(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    var_0 = module_1.purge()
    set_0 = {var_0}
    module_1.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    int_0 = -2216
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    str_0 = "87)&N~\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    int_0 = 738
    module_1.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    complex_0 = -450 - 2597j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    int_0 = -2946
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setattr__(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    complex_0 = 3832.97229 - 2462.1908j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    complex_0 = -1774.203364 - 1838.726j
    var_0 = module_1.purge()
    module_0.get_new_command(complex_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    exception_0 = module_4.Exception()
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5254():
    complex_0 = -2512.66 + 705.314888j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    regex_flag_0 = module_1.RegexFlag.ASCII
    module_2.unique(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    float_0 = 728.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    float_0 = -1353.0
    none_type_0 = None
    module_1.split(float_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    str_0 = "_t$W6zK4l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    int_0 = -1628
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    bytes_0 = b"\x0eE\xd3j\x03s^\xb7"
    module_1.subn(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    bytes_0 = b"\xf4\rE\xafj\xb3]m\x81\xdd*\x06\x10\xdd\xc5\x96"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    bytes_0 = b"\xaa\x8e2VO\x9e2X\x95E\x91.%\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    none_type_0 = None
    base_exception_0 = module_4.BaseException()
    module_0.get_new_command(none_type_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    int_0 = 1893
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    float_0 = 3557.026801
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    list_0 = []
    bytes_0 = b"\xf5\xd6x0\xc9\x9f\xb19"
    var_0 = module_1.match(bytes_0, bytes_0)
    var_0.__setattr__(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    regex_flag_0 = module_1.RegexFlag.DOTALL
    module_1.split(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    int_0 = 1673
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    bytes_0 = b"\xf2\xc2\xc3X\xbf\xe4\xf1\xe2\x0f\x9f\xf4\xb3:\x02w"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_5275():
    bytes_0 = b"o\xf7X"
    str_0 = "?6+?:h"
    str_1 = ""
    str_2 = 'QoR?*5obT:eF"=o]'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_0: bytes_0}
    module_4.BaseException(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    var_1.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_5279():
    bytes_0 = b"\xa7\xee\x12\x11\x86\x8d\xfe\x94\x8f\xc2\xaf"
    var_0 = module_1.findall(bytes_0, bytes_0)
    module_1.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    bytes_0 = b"{\xc8\xfa\xe9}*\x8cj\x0f\xb3[\x9eM"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    float_0 = -3122.247
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    complex_0 = -2790 + 1726.93j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    int_0 = 1581
    dict_0 = {}
    module_1.split(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    bytes_0 = b"\xe0{-9^\xd6m\xdd\xd4\xb8\x92s\xed\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    int_0 = 1990
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_0.match(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    complex_0 = -2552 - 2611.76j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5296():
    bytes_0 = b" vO%[\xfce\xe5(F,\xe5"
    module_1.search(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    var_0 = module_1.purge()
    list_0 = [var_0]
    module_0.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    float_0 = 735.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    bytes_0 = b"p}S\x8c%\xc4\x8c\xeaR\xb2\x1bB\xd0\xf1U\x9b\x94n"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    complex_0 = 1393.093 + 3682.2869j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    list_0 = []
    auto_0 = module_2.auto(*list_0)
    module_1.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    float_0 = -1096.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    int_0 = -602
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    str_0 = "'; '\"5A@;2T\n#L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    str_0 = '" B\ra2YRlF8Vw\tPV'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    int_0 = -1498
    module_4.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    str_0 = "c's'\r&($;PdnW6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    float_0 = -2354.0
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    bytes_0 = b"\xed\x05\xc3\xed+\xe2\xa2\xf5\x18\xfd\xf4j\x98U0\xe4\x1dL\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    str_0 = "j#{m"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    list_0 = []
    auto_0 = module_2.auto(*list_0)
    module_1.template(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    complex_0 = 2062.056 - 3608.3759j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    module_0.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    str_0 = "Za$F5JCmfM6S\\$wMu"
    var_0 = module_1.compile(str_0)
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    tuple_0 = ()
    module_1.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    float_0 = 2140.759
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    auto_0 = module_2.auto()
    none_type_0 = None
    module_0.get_new_command(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    bytes_0 = b"Uv"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    float_0 = 437.33999
    none_type_0 = None
    module_1.fullmatch(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    str_0 = "ddZ'}'#Wcw\x0b1rhN:o "
    var_0 = module_1.search(str_0, str_0)
    module_1.search(var_0, str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    int_0 = 3019
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    float_0 = -2532.56448
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    float_0 = 566.723
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    bytes_0 = b"I"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    bytes_0 = b"\x9e\xaa62"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    bytes_0 = b"]\x89\x0bZvB\\1\xb8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    float_0 = -409.25
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    bytes_0 = b"I[\x97\xb4\xdd{\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    bytes_0 = b"m\xf6\x0b\xfa\xeaL\xf5'\x0f\x98zN\x01\x9cB\xec\xf9N\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    bytes_0 = b"\xd6?\xa5\xa1\x80\xb0\xd3\x1eQ\xb8\x8e\xad\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    float_0 = 1770.39816
    dict_0 = {}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    float_0 = -1427.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    int_0 = -1136
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    complex_0 = -898.0294 - 2489.3695j
    bytes_0 = b"I\x0fMk\x82oi\xb2\xbe\xa1\xcal9\xbd,"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    var_0.scan(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    str_0 = "*t`449o2/ND"
    set_0 = {str_0, str_0, str_0}
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    bytes_0 = b"\xda\xc0\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    str_0 = '1et/JM"x]OjN7_H=yf'
    module_1.sub(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    set_0 = set()
    none_type_0 = None
    module_1.split(set_0, set_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    var_0 = module_1.purge()
    var_0.scan(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    float_0 = 2106.993949
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    str_0 = "OMtK`V#"
    none_type_0 = None
    str_1 = ""
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    set_0 = set()
    module_1.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    str_0 = "9{xA|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    var_0 = module_1.purge()
    tuple_0 = (var_0,)
    module_0.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    bytes_0 = b"\x0c"
    module_1.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    str_0 = "fU?Q>g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    list_0 = []
    module_2.EnumMeta(*list_0)


def test_case_5361():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5362():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    object_0 = module_4.object()
    module_2.unique(object_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_2.unique(var_1)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    int_0 = 985
    bytes_0 = b"\xcfo\x1dh\xb8\xef"
    module_1.finditer(int_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    str_0 = "sN`2?IXZugI]V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    str_0 = "%I\nat*_7Z#/#G]"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    str_0 = "v*o,<u)<,\x0cz"
    module_1.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    float_0 = 1803.6
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5375():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    int_0 = -902
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    int_0 = -494
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    list_0 = []
    str_0 = "E3wa"
    str_1 = "v$$?rvV.lsTJc|Rt,Y?F"
    dict_0 = {str_0: str_0, str_0: list_0, str_1: str_1, str_1: str_0}
    module_2.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    error_0 = module_3.Error()
    module_1.search(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    var_0 = module_1.purge()
    var_1 = module_1.purge()
    module_0.match(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    complex_0 = 3.313628 + 3057.11728j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    bytes_0 = b'"\xe6\x15]\x02Z\xe02\x04\xd6\xa1\x8b\xdd\xaa\x08M'
    var_0 = module_1.finditer(bytes_0, bytes_0)
    var_0.__len__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    bool_0 = True
    str_0 = "X*"
    module_1.sub(bool_0, str_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    bytes_0 = b"\xf8\xc9Z\rVjZ"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    bytes_0 = b"/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    bytes_0 = b"\x9f\xf4\xa8\x8d&&H\x8d\xb5\x94z\xe2r\xe0k\xf3a"
    str_0 = "5\x0b7ZLm,"
    module_1.compile(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    auto_0 = module_2.auto()
    set_0 = set()
    module_1.fullmatch(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    bytes_0 = b"\x8bL\xe4q\xfa\x93\x05\x94\x16\xe6\x9dz\x82\x87\t\xdbc@M\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    float_0 = -1462.5
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    int_0 = -194
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    float_0 = -570.158972
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    int_0 = 1246
    module_1.fullmatch(int_0, int_0)


def test_case_5396():
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(var_0, var_0, var_0, var_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    bytes_0 = b"\xc8\x17l\xf7p\x07\xc3\xa8\x8b"
    str_0 = "50]YIv-T\\7U{1nd"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    auto_0 = module_2.auto()
    none_type_0 = None
    module_1.findall(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    str_0 = ";Y$M.N6 \x0c0i@"
    bytes_0 = b"\x8dV\xfa\x85\x92\x0ej"
    module_1.subn(str_0, bytes_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    int_0 = 1656
    module_2.auto(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    complex_0 = 1703.255 - 1362.782j
    set_0 = {complex_0}
    none_type_0 = None
    module_1.search(set_0, none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    int_0 = 268
    module_1.match(regex_flag_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    complex_0 = 410.38 + 605.945j
    var_0 = module_1.purge()
    var_0.__iter__(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    float_0 = -2369.6
    error_0 = module_1.error(float_0)
    none_type_0 = None
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    error_0 = module_3.Error()
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    bytes_0 = b"Dz\xee\xf0\xec\xc1\x85\x02rj\xaf;\x1dV8\x191\xcf"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


def test_case_5408():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5409():
    tuple_0 = ()
    module_1.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    str_0 = "g0`YuJ^Gs{eJY"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    dict_0 = {}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    int_0 = 3979
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    var_0 = module_1.purge()
    bool_0 = False
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    none_type_0 = None
    bytes_0 = b"\x97:"
    module_1.sub(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    bytes_0 = b"x;)\xbe\xa7A\xb9\x9bN@\x16\x0c\x1e\x14\xb0\xc1\xdb\nD"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    int_0 = 228
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    set_0 = set()
    module_1.compile(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    int_0 = 1105
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    int_0 = 277
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    int_0 = 1241
    float_0 = 1134.1504
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    bool_0 = False
    module_2.EnumMeta(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    int_0 = -4775
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    int_0 = -2902
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    var_0 = module_1.purge()
    var_0.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    str_0 = "iYm>y%"
    dict_0 = {str_0: str_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    bytes_0 = b"Y\x1a\xc4\xf3"
    str_0 = "zq\x0c%cEeMCu^7D\\6"
    str_1 = "YQn?\tGT<}u6"
    dict_0 = {str_0: bytes_0, str_1: str_1}
    module_2.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    dict_0 = {}
    none_type_0 = None
    module_1.sub(dict_0, dict_0, dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    int_0 = 1142
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    int_0 = 2304
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    str_0 = "e-ZCzZ@|TocZ"
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setitem__(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    bytes_0 = b"\x08\xeaq"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    bytes_0 = b""
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    str_0 = "\\.H\n[Z}"
    float_0 = 1482.03223
    set_0 = {str_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    int_0 = -704
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5445():
    int_0 = 178
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    int_0 = -2390
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    int_0 = -1925
    bool_0 = True
    module_1.finditer(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    base_exception_0 = module_4.BaseException()
    module_1.sub(base_exception_0, base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    str_0 = "mldy*V^3(=DEU="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    tuple_0 = ()
    module_1.compile(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    bytes_0 = b"\x8aJ\x88\xb6;\xde:\x80\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    str_0 = "MJw6"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    var_0 = module_1.purge()
    exception_0 = module_4.Exception()
    module_0.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    str_0 = "BD5(0aZ+\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    str_0 = "_Ur9uq_K1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    dict_0 = {}
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_1.subn(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    int_0 = -1378
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    complex_0 = 476 + 2367.928j
    module_3.Error(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    bytes_0 = b"\xed\xf3z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    int_0 = -685
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    int_0 = -1782
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    bool_0 = True
    float_0 = -1371.44138
    dict_0 = {bool_0: bool_0, bool_0: float_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    int_0 = 2063
    none_type_0 = None
    module_1.finditer(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    bool_0 = True
    none_type_0 = None
    module_1.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    str_0 = "c^<e7~azvA<!\\_Rv#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_5474():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5475():
    bytes_0 = b"\x17\x0b\x9a\xea\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    bool_0 = True
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_5480():
    str_0 = "M]d%{d>ilb"
    module_1.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    float_0 = -2386.94662
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    bytes_0 = b"\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    set_0 = {regex_flag_0, regex_flag_0}
    module_1.fullmatch(set_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = ""
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    var_0 = module_1.purge()
    module_1.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    int_0 = 857
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    str_0 = "=4WUI0V"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    bool_0 = True
    bytes_0 = b"\xc8\xe2\xdc\xe3\x00\x931\xbb"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    float_0 = 4290.0
    none_type_0 = None
    module_1.sub(float_0, float_0, none_type_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    bytes_0 = b"\xfa\xb9\xe8k"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    str_0 = "&'><U"
    none_type_0 = None
    str_1 = "\t"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_2.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    bool_0 = False
    none_type_0 = None
    module_1.split(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    str_0 = "?IfQVYaJ\ry 1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    int_0 = 1664
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0, dict_0]
    module_1.template(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    none_type_0 = None
    enum_dict_0 = module_2._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    dict_0 = {}
    module_1.findall(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    int_0 = -2410
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    int_0 = 105
    none_type_0 = None
    module_1.subn(int_0, int_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    str_0 = "83:."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    none_type_0 = None
    int_0 = -247
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    none_type_0 = None
    auto_0 = module_2.auto()
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    str_0 = "^YPH"
    set_0 = {str_0, str_0, str_0}
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    list_0 = []
    error_0 = module_3.Error(*list_0)
    set_0 = {error_0}
    module_1.Scanner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.finditer(dict_0, dict_0)


def test_case_5522():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5523():
    exception_0 = module_4.Exception()
    bytes_0 = b"\xa7\x0f\x8b\xbcty\xb4\xa6E\xec]\xe7T[\x0b\xe2\x12"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    bytes_0 = b"=:\xd1\xc0^\xf5L\x97f\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    bytes_0 = b"\x8f\xf0\x17\xb2U\x83d\xaddm"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    int_0 = -3673
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    bytes_0 = b"\x9fy\xa8\x04\x1aQ\xcc\x95\xc7\xcb\";\xfb'6\xc0 \x84\xbb\x13"
    error_0 = module_1.error(bytes_0)
    module_1.split(error_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    str_0 = ""
    module_1.sub(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    bytes_0 = b"\x9a\rJ"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    dict_0 = {}
    module_1.findall(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    int_0 = -2435
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    str_0 = "JeEYK\\2,#T{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    str_0 = "nF{10A!`47F*s&l"
    none_type_0 = None
    str_1 = "QH9FI)L@px :Y\n"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    int_0 = -1412
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_4.BaseException(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_1.purge()
    var_0.__len__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    str_0 = "b"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    bytes_0 = b"\\\xa1u\xdby\x1fnDh&\x88S@"
    none_type_0 = None
    module_1.subn(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    int_0 = 717
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    str_0 = "@.E|BQ:MC"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    int_0 = -4481
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    bytes_0 = b"\x8f\xa0h\xf6\xa5\xf4\xae\xe4\xa9\x9f\xdc\xb0"
    var_0 = module_1.findall(bytes_0, bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    bytes_0 = b"\xb1\x9c`\xf3\x9a2\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    complex_0 = -1361.34319 + 2731.081j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    int_0 = 83
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    float_0 = 1460.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    none_type_0 = None
    module_1.Pattern(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    int_0 = -699
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    str_0 = "Z:z1)\x0c@["
    dict_0 = {str_0: str_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    float_0 = 1789.1483
    module_1.template(float_0)
