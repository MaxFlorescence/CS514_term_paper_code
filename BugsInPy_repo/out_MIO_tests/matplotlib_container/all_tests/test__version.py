# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import _version as module_0
import re as module_1


def test_case_0():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1


def test_case_1():
    bool_0 = True
    with pytest.raises(AssertionError):
        module_0.run_command(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"\xedu\x1e\x7f\xf5\xba\x1a\xc0\xae~"
    var_0 = module_1.split(bytes_0, bytes_0)
    var_1 = module_0.run_command(var_0, var_0, bytes_0, hide_stderr=bytes_0)
    assert len(module_0.HANDLERS) == 1


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xedu\x1ecQ\x7f\xf5\xcb\xba\x1a\xc0\xae~"
    var_0 = module_1.split(bytes_0, bytes_0)
    module_0.run_command(var_0, bytes_0, verbose=var_0)


def test_case_4():
    str_0 = "+0/3D~?"
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(str_0, str_0, str_0)


def test_case_5():
    bytes_0 = b"j\x1f\x19\x9f\x1b\xce\xaf\x13\x05PAX7I\x95\x06"
    var_0 = module_0.versions_from_parentdir(bytes_0, bytes_0, bytes_0)
    assert len(module_0.HANDLERS) == 1


def test_case_6():
    bool_0 = False
    var_0 = module_0.git_get_keywords(bool_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.get_versions()


def test_case_7():
    bool_0 = False
    var_0 = module_0.git_get_keywords(bool_0)
    assert len(module_0.HANDLERS) == 1


@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    module_0.git_get_keywords(dict_0)


def test_case_9():
    set_0 = set()
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(set_0, set_0, set_0)


def test_case_10():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(var_0, var_0, var_0)


def test_case_11():
    str_0 = "\n1g9TTQ\\}$Vm\nr#5S/%`"
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(str_0, str_0, str_0, str_0)


def test_case_12():
    str_0 = ""
    none_type_0 = None
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(str_0, str_0, none_type_0)


def test_case_13():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(ValueError):
        module_0.render(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    bool_0 = False
    module_0.render(var_0, bool_0)
