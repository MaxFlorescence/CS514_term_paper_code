# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import conf as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    var_0 = module_0.get_sources(none_type_0)
    str_0 = "Ib98}G;W}$\r\\%<Gr7V$+"
    module_0.arglist_to_dict(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_0.get_sources()
    var_1 = module_0.closest_scrapy_cfg(prevpath=var_0)
    assert var_1 == ""
    var_2 = module_0.get_config()
    var_3 = module_0.arglist_to_dict(var_1)
    var_4 = module_0.arglist_to_dict(var_1)
    module_0.arglist_to_dict(var_2)


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_0.get_sources()
    var_1 = module_0.get_config()
    var_2 = module_0.init_env()
    var_3 = module_0.init_env(var_0)
    module_0.build_component_list(var_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    var_0 = module_0.build_component_list(dict_0, dict_0)
    list_0 = []
    var_1 = module_0.get_config(dict_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "configparser.SafeConfigParser"
    )
    assert len(var_1) == 1
    var_2 = module_0.get_sources(var_0)
    var_3 = module_0.get_config(var_2)
    var_4 = module_0.get_config()
    var_5 = module_0.get_config(list_0)
    var_6 = module_0.init_env(set_syspath=var_5)
    module_0.arglist_to_dict(var_5)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    var_0 = module_0.build_component_list(dict_0, dict_0)
    list_0 = []
    var_1 = module_0.get_config(dict_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "configparser.SafeConfigParser"
    )
    assert len(var_1) == 1
    var_2 = module_0.get_sources(var_0)
    var_3 = module_0.get_config(var_2)
    var_4 = module_0.get_config()
    var_5 = module_0.get_config(list_0)
    var_6 = module_0.init_env(set_syspath=var_5)
    var_7 = module_0.arglist_to_dict(var_0)
    var_8 = module_0.get_config(var_1)
    var_9 = module_0.build_component_list(var_1, var_2)
    var_10 = module_0.build_component_list(dict_0, var_8)
    var_11 = module_0.get_config()
    var_12 = module_0.init_env(var_11, var_11)
    var_13 = module_0.get_config(var_12)
    module_0.closest_scrapy_cfg(var_4)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    var_0 = module_0.build_component_list(dict_0, dict_0)
    list_0 = []
    var_1 = module_0.get_config(dict_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "configparser.SafeConfigParser"
    )
    assert len(var_1) == 1
    var_2 = module_0.get_sources(var_0)
    var_3 = module_0.get_config(var_2)
    var_4 = module_0.get_config(list_0)
    var_5 = module_0.init_env(set_syspath=var_4)
    var_6 = module_0.get_config(var_1)
    var_7 = module_0.build_component_list(var_1, var_2)
    var_8 = module_0.build_component_list(dict_0, var_6)
    var_9 = module_0.get_config()
    var_10 = module_0.get_sources()
    var_11 = module_0.init_env(var_9, var_9)
    var_12 = module_0.get_config(var_11)
    var_13 = module_0.init_env()
    module_0.arglist_to_dict(var_13)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    var_0 = module_0.init_env(set_syspath=bool_0)
    bytes_0 = b"\xc5\xc3x\x7f_\x02\xf4E}\xf4\x07\x15\x98\xef.1\xc7\x9e\x7fr"
    bool_1 = False
    set_0 = {var_0, bool_1, bool_1, bytes_0}
    var_1 = module_0.get_sources(set_0)
    none_type_0 = None
    var_2 = module_0.get_sources()
    var_3 = module_0.closest_scrapy_cfg(none_type_0, none_type_0)
    assert var_3 == ""
    var_4 = module_0.get_sources()
    module_0.arglist_to_dict(var_4)


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configparser.SafeConfigParser"
    )
    assert len(var_0) == 1
    var_1 = module_0.init_env()
    var_2 = module_0.init_env()
    var_3 = module_0.get_sources()
    dict_0 = {var_2: var_2, var_2: var_2}
    var_4 = module_0.build_component_list(dict_0, dict_0)
    var_5 = module_0.get_sources(var_4)
    module_0.arglist_to_dict(var_5)
