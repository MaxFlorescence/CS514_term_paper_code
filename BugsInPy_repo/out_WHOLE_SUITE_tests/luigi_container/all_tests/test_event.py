# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import event as module_0


def test_case_0():
    event_0 = module_0.Event()
    assert module_0.Event.DEPENDENCY_DISCOVERED == "event.core.dependency.discovered"
    assert module_0.Event.DEPENDENCY_MISSING == "event.core.dependency.missing"
    assert module_0.Event.DEPENDENCY_PRESENT == "event.core.dependency.present"
    assert module_0.Event.BROKEN_TASK == "event.core.task.broken"
    assert module_0.Event.START == "event.core.start"
    assert module_0.Event.FAILURE == "event.core.failure"
    assert module_0.Event.SUCCESS == "event.core.success"
    assert module_0.Event.PROCESSING_TIME == "event.core.processing_time"


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "_Iu_K;\\}g*%"
    dict_0 = {str_0: str_0}
    module_0.Event(**dict_0)


def test_case_2():
    event_0 = module_0.Event()
    assert module_0.Event.DEPENDENCY_DISCOVERED == "event.core.dependency.discovered"
    assert module_0.Event.DEPENDENCY_MISSING == "event.core.dependency.missing"
    assert module_0.Event.DEPENDENCY_PRESENT == "event.core.dependency.present"
    assert module_0.Event.BROKEN_TASK == "event.core.task.broken"
    assert module_0.Event.START == "event.core.start"
    assert module_0.Event.FAILURE == "event.core.failure"
    assert module_0.Event.SUCCESS == "event.core.success"
    assert module_0.Event.PROCESSING_TIME == "event.core.processing_time"


@pytest.mark.xfail(strict=True)
def test_case_3():
    event_0 = module_0.Event()
    assert module_0.Event.DEPENDENCY_DISCOVERED == "event.core.dependency.discovered"
    assert module_0.Event.DEPENDENCY_MISSING == "event.core.dependency.missing"
    assert module_0.Event.DEPENDENCY_PRESENT == "event.core.dependency.present"
    assert module_0.Event.BROKEN_TASK == "event.core.task.broken"
    assert module_0.Event.START == "event.core.start"
    assert module_0.Event.FAILURE == "event.core.failure"
    assert module_0.Event.SUCCESS == "event.core.success"
    assert module_0.Event.PROCESSING_TIME == "event.core.processing_time"
    event_1 = module_0.Event()
    event_2 = module_0.Event()
    module_0.Event(*event_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    event_0 = module_0.Event()
    assert module_0.Event.DEPENDENCY_DISCOVERED == "event.core.dependency.discovered"
    assert module_0.Event.DEPENDENCY_MISSING == "event.core.dependency.missing"
    assert module_0.Event.DEPENDENCY_PRESENT == "event.core.dependency.present"
    assert module_0.Event.BROKEN_TASK == "event.core.task.broken"
    assert module_0.Event.START == "event.core.start"
    assert module_0.Event.FAILURE == "event.core.failure"
    assert module_0.Event.SUCCESS == "event.core.success"
    assert module_0.Event.PROCESSING_TIME == "event.core.processing_time"
    str_0 = ";:ce\t!]HiBj"
    str_1 = "\x0c0"
    str_2 = "ja4!"
    event_1 = module_0.Event()
    dict_0 = {str_0: event_0, str_1: event_0, str_2: str_1}
    module_0.Event(*event_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.Event(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    list_0 = []
    event_0 = module_0.Event(*list_0)
    assert module_0.Event.DEPENDENCY_DISCOVERED == "event.core.dependency.discovered"
    assert module_0.Event.DEPENDENCY_MISSING == "event.core.dependency.missing"
    assert module_0.Event.DEPENDENCY_PRESENT == "event.core.dependency.present"
    assert module_0.Event.BROKEN_TASK == "event.core.task.broken"
    assert module_0.Event.START == "event.core.start"
    assert module_0.Event.FAILURE == "event.core.failure"
    assert module_0.Event.SUCCESS == "event.core.success"
    assert module_0.Event.PROCESSING_TIME == "event.core.processing_time"
    list_1 = [none_type_0, none_type_0, none_type_0]
    str_0 = "]%@<)cBi7Y4|lsd@L="
    str_1 = " 1!"
    dict_0 = {str_0: list_1, str_0: list_1, str_0: str_0, str_1: str_0}
    module_0.Event(**dict_0)
