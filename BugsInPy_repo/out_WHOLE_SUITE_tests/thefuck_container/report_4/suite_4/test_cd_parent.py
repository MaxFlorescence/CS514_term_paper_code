# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import cd_parent as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    list_0 = [bool_0]
    var_0 = module_0.get_new_command(bool_0, bool_0)
    assert var_0 == "cd .."
    var_1 = module_0.get_new_command(list_0, var_0)
    assert var_1 == "cd .."
    var_2 = module_0.get_new_command(list_0, bool_0)
    assert var_2 == "cd .."
    module_0.match(list_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    var_0 = module_0.get_new_command(bool_0, bool_0)
    assert var_0 == "cd .."
    str_0 = "{+6"
    int_0 = 2332
    module_0.match(str_0, int_0)


def test_case_2():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.get_new_command(none_type_0, none_type_0)
    assert var_0 == "cd .."
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1043
    var_0 = module_0.get_new_command(int_0, int_0)
    assert var_0 == "cd .."
    var_1 = module_0.get_new_command(int_0, var_0)
    assert var_1 == "cd .."
    module_0.match(var_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    var_0 = module_0.get_new_command(bool_0, bool_0)
    assert var_0 == "cd .."
    bool_1 = True
    module_0.match(bool_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "oC"
    dict_0 = {str_0: str_0}
    str_1 = "'"
    str_2 = "Y{PW>&buc"
    str_3 = ";gh!>k+Vs"
    dict_1 = {str_0: dict_0, str_1: str_2, str_3: str_1}
    module_1.object(**dict_1)


def test_case_7():
    bool_0 = False
    set_0 = {bool_0}
    var_0 = module_0.get_new_command(set_0, set_0)
    assert var_0 == "cd .."
    str_0 = '"%DQ*aO<iUB\tZfP~a/@?'
    list_0 = [str_0]
    var_1 = module_0.get_new_command(var_0, list_0)
    assert var_1 == "cd .."


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_9():
    bool_0 = False
    set_0 = {bool_0}
    var_0 = module_0.get_new_command(set_0, set_0)
    assert var_0 == "cd .."
    var_1 = module_0.get_new_command(set_0, set_0)
    assert var_1 == "cd .."
    var_2 = module_0.get_new_command(set_0, bool_0)
    assert var_2 == "cd .."
