# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import parse as module_1
import token as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    dict_0 = {}
    int_0 = -313
    module_0.Exception(*dict_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    none_type_0 = None
    parser_0 = module_1.Parser(none_type_0)
    parser_0.setup(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    parser_0 = module_1.Parser(bool_0)
    bool_1 = True
    parser_1 = module_1.Parser(bool_1)
    parser_1.addtoken(bool_1, bool_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -4493.6
    none_type_0 = None
    var_0 = module_2.ISEOF(float_0)
    parser_0 = module_1.Parser(var_0)
    parser_0.push(float_0, none_type_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    parser_0 = module_1.Parser(dict_0, dict_0)
    parser_1 = module_1.Parser(dict_0, dict_0)
    parser_0.setup()


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "gz3"
    int_0 = -1480
    str_1 = "$q#A"
    parser_0 = module_1.Parser(str_1, str_1)
    assert parser_0.convert == "$q#A"
    parser_0.push(str_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "J+Da|V/jm9("
    float_0 = -2455.7184
    tuple_0 = (str_0, float_0)
    none_type_0 = None
    parse_error_0 = module_1.ParseError(tuple_0, str_0, none_type_0, str_0)
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "parse.ParseError"
    )
    assert (
        f"{type(parse_error_0.msg).__module__}.{type(parse_error_0.msg).__qualname__}"
        == "builtins.tuple"
    )
    assert len(parse_error_0.msg) == 2
    assert parse_error_0.type == "J+Da|V/jm9("
    assert parse_error_0.value is None
    assert parse_error_0.context == "J+Da|V/jm9("
    module_2.ISNONTERMINAL(parse_error_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    object_0 = module_0.object()
    parser_0 = module_1.Parser(object_0)
    parser_0.addtoken(object_0, object_0, object_0)
