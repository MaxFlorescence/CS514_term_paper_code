# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import ls_lah as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -2461
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 1401
    bool_0 = True
    set_0 = {int_0, int_0, int_0, bool_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"&\xbev\xa7\x0c\x12\x85,\xc1\x95\xe0g\xbb\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 678
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"&\xa4C%\xf8*\xf1\xda\x1f\xf5\x84\x15\xe1+\x10%\xa3+7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    float_0 = 1168.624
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    float_0 = 1427.74
    list_0 = [float_0, float_0, float_0]
    complex_0 = -509.19 + 2399.50559j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    float_0 = 1077.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b"\xc9\xa4"
    module_0.match(bytes_0, bytes_0)


def test_case_13():
    pass


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b'\xea\r\x05"Z\xd0'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b"\x06\xc2\x0b\x18"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "r2"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


def test_case_17():
    pass


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = 649
    dict_0 = {int_0: int_0}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


def test_case_20():
    pass


@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = 357
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    float_0 = -1124.333992
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    int_0 = -617
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    float_0 = -640.92174
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    int_0 = 172
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    float_0 = -3198.608
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    int_0 = 1871
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    int_0 = -2223
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    float_0 = -1833.91
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = "]\nzNzHS3W_V`CBmi2y;"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    int_0 = 4519
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_46():
    pass


@pytest.mark.xfail(strict=True)
def test_case_47():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = "mUmfJ2_2~B`fE/k6GiD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    bytes_0 = b"}\xd1)m\xe3\xf6p\x1e\xa3u\x82\x97\xda\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    bytes_0 = b"K\xa0j5\xfb\x8f\xa5\xa0\x8e\r\x93\xda\x83\x0cC"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    int_0 = -2255
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    int_0 = 773
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    int_0 = -728
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, bool_0, dict_0, bool_0]
    tuple_0 = (bool_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    str_0 = "@70"
    str_1 = "S;"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    str_0 = "Z;\"}cX^|KBG9^c'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = ""
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    int_0 = -1268
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    bytes_0 = b"\xf6\x18Rh\xe9\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    none_type_0 = None
    str_0 = "5WTk9&_Kd4~R2\t,d"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    bytes_0 = b"\x00k\x03%\x15\xfbn\xfe\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    bytes_0 = b"\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    int_0 = -1598
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    bool_0 = True
    int_0 = 2094
    bool_1 = False
    set_0 = {bool_1}
    list_0 = [bool_0, bool_0, bool_0, int_0]
    tuple_0 = (int_0, set_0, list_0)
    str_0 = "eYo}T0S\x0b8EK]"
    bytes_0 = b"b\xc8\xe6\xc9\xa9$\xccz\xd8\xef"
    tuple_1 = (bool_0, tuple_0, str_0, bytes_0)
    bool_2 = False
    module_0.match(tuple_1, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_69():
    bytes_0 = b"\xd9\xa2\xdb3<\x90Q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    float_0 = 301.3931
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [bool_0, bool_0, list_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    bytes_0 = b"\xc9\x95\t)\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    str_0 = '2s1X\x0c|A"i\x0b|=QqCN G.'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    str_0 = "1<"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_79():
    pass


@pytest.mark.xfail(strict=True)
def test_case_80():
    float_0 = 1808.9536
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    str_0 = "(kT(g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    int_0 = -2753
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    float_0 = 4425.0
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


def test_case_84():
    pass


@pytest.mark.xfail(strict=True)
def test_case_85():
    str_0 = "8-!zX~eVLTo$?U("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    bytes_0 = b"Q<\x82A\xa9)\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    float_0 = -4150.609834
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    int_0 = -691
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_91():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    bytes_0 = b"|\x0e\xb8\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    bytes_0 = b",<\xeb\xc3\x1c1n\x8a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    bytes_0 = b"+\xe6\xe3\xa7\xec\x9cyt|R\x01\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    set_0 = set()
    bytes_0 = b"/\x16\xb1\xec\x94\x9e \xb5\xa6q\x91\xd5\x16\xa5\x95?"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    bytes_0 = b"Q\xc3\x93J\x0f\xcb\x01<B\xc5\x17\xa4U9O-\xfa\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    bytes_0 = b"\xc8\tW"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    int_0 = 1216
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    complex_0 = 298.3 + 217.571j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    str_0 = "E#?=bC{'TG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    none_type_0 = None
    str_0 = ":A/$^"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    complex_0 = -1035.5482 - 1254.275598j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    bytes_0 = b"AI\xb2\x9d"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    float_0 = -991.62962
    bool_0 = False
    dict_0 = {float_0: bool_0, float_0: float_0, float_0: float_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    bytes_0 = b"\x13"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    str_0 = "r./f^1"
    str_1 = "*Gz)p} m"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    str_0 = "#~qq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    bytes_0 = b"\x9c)}\xa7\x06\x1c\xa5Y\xcf^\x9f\xb3!\xa8\\\xe3"
    list_0 = []
    tuple_0 = (bytes_0, list_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    int_0 = 1367
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    list_0 = []
    str_0 = ""
    bytes_0 = b"\x08\x15\xafw\xcf_\xf62"
    list_1 = [list_0, str_0, str_0, bytes_0]
    dict_0 = {str_0: list_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    bytes_0 = b"^\xaby\xac"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_116():
    pass


@pytest.mark.xfail(strict=True)
def test_case_117():
    int_0 = -382
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    int_0 = 256
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    list_0 = []
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    int_0 = 1897
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    bytes_0 = b"u\xba\x01\x94\xc7\xfd\xe2\xd4t\xf0\x1f\x8d\x92d\xe7\xbd\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    bool_0 = True
    str_0 = "[m"
    tuple_0 = (bool_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_1: bool_1, bool_0: bool_1}
    tuple_0 = (bool_0, bool_1, dict_0)
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    str_0 = "A"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    str_0 = "-m\x0bQ&_"
    str_1 = "N~?'xVq'mpTa"
    set_0 = {str_0, str_0, str_1}
    module_0.match(set_0, set_0)


def test_case_127():
    pass


@pytest.mark.xfail(strict=True)
def test_case_128():
    int_0 = -768
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    complex_0 = -3203.994 - 2476.16j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, set_0)


def test_case_131():
    pass


@pytest.mark.xfail(strict=True)
def test_case_132():
    int_0 = 2009
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    str_0 = "Z-3<q_j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    str_0 = "sC T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    int_0 = -33
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    str_0 = "ftt@Y>sM%9@vE"
    str_1 = "=~(w>N,OJIutGP"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_139():
    bytes_0 = b"\x93\xa5\t\xd4\x17R\x84\x9c\x80\xc3+\xd6\x05\x08<\xa0`\xde\xab\x04"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    str_0 = "bpk-0oIMY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    str_0 = "a4dLB\\\r-\rp*Z 6\x0b7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    str_0 = "hhxHF;*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    int_0 = 1295
    tuple_0 = ()
    tuple_1 = (int_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    str_0 = "X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    bytes_0 = b"\x0e\x96\xae\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_149():
    pass


@pytest.mark.xfail(strict=True)
def test_case_150():
    str_0 = "Q1KsL8({,EL:f\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    int_0 = -1921
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    bytes_0 = b"k\x86\x11y\xa8]\x00\xd2\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    int_0 = -748
    tuple_0 = (int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    str_0 = ""
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    str_0 = "Vx|"
    module_0.get_new_command(str_0, str_0)


def test_case_157():
    pass


@pytest.mark.xfail(strict=True)
def test_case_158():
    float_0 = 995.5165
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    set_0 = set()
    int_0 = -2304
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    str_0 = "/b((F[? +="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    int_0 = 575
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    str_0 = "!L|/!vIsx!1@["
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    complex_0 = 1107.29 + 2634.209j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    int_0 = -1531
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    str_0 = "cl\"lq}\n @T_'u{MJe-"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    str_0 = "i\rQ,p8-i m="
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    int_0 = 2865
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    complex_0 = 797 + 213.675637j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    complex_0 = 6.41 + 1958.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    list_0 = []
    list_1 = [list_0]
    list_2 = [list_1, list_0, list_1]
    module_0.match(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_179():
    tuple_0 = ()
    int_0 = -4180
    tuple_1 = (tuple_0, int_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    str_0 = "G#8c=Te`_1"
    module_0.get_new_command(str_0, str_0)


def test_case_181():
    pass


@pytest.mark.xfail(strict=True)
def test_case_182():
    bytes_0 = b"H\xf3\xad\xdd\xc5X\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    bytes_0 = b"\xe3\x93\xcc{*\xef\xd6\xbd\xfe\x1d1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    int_0 = -2347
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    bytes_0 = b"\x88c\xdf\x828,\xf1'\x8aes~t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    int_0 = -1538
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


def test_case_189():
    pass


@pytest.mark.xfail(strict=True)
def test_case_190():
    float_0 = 299.635
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    int_0 = -996
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    bytes_0 = b"\xd7\x16\xbe+AO\x00\xff\xdd\xf6\x1b\xfd\xf4\x86\xbd\xd1\xdc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    str_0 = "\x0c=o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    bool_0 = False
    int_0 = 731
    str_0 = "Is@UmIX^2%qb7I\x0bB1"
    str_1 = "!WF]F^\x0cu\\m+.(DeOq"
    tuple_0 = (bool_0, int_0, str_0, str_1)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    bytes_0 = b"<\x7f\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    bytes_0 = b"\xa1\xf5oZ\x01\xa54\xa1\xe7\x14\xb4\xa37\x94I]t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    str_0 = "4\x0bq]v3{CL"
    dict_0 = {str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    int_0 = -155
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    complex_0 = -1695.23 + 2685j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    int_0 = -118
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    float_0 = -456.5
    dict_0 = {float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


def test_case_205():
    pass


def test_case_206():
    pass


@pytest.mark.xfail(strict=True)
def test_case_207():
    bytes_0 = b"\xc8\x05\xd5u\x1c^Ij\x13\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    str_0 = "^C9y"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    str_0 = "V*zl??$,,%c\rh<^AYWw"
    float_0 = -830.665
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    int_0 = -1585
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    int_0 = -1376
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    bytes_0 = b"\xa2\x127-\x1c\xe1\xe6\x04`\x8f\x10"
    str_0 = "]iG/woKgE;"
    int_0 = 2514
    tuple_0 = ()
    tuple_1 = (bytes_0, str_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    str_0 = ";"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    float_0 = -1687.9977
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    bytes_0 = b"\xfb\x04\x86k\xf6:\xab\x83\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_220():
    bool_0 = False
    int_0 = -3900
    tuple_0 = (bool_0, bool_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    object_0 = module_1.object()
    str_0 = "r ``T"
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    int_0 = -1458
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    int_0 = 4150
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    str_0 = '?,sRpEm4uyy5"Nm\n#'
    list_0 = [str_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    str_0 = "j4}o1{hMp@q`[;r?RqV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    str_0 = "X$V#P9&{GkrDc<+wJN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    int_0 = 231
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_231():
    pass


@pytest.mark.xfail(strict=True)
def test_case_232():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    dict_0 = {tuple_1: tuple_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    float_0 = -2406.16
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    float_0 = 3245.03053
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    int_0 = 1648
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    bool_0 = True
    bytes_0 = b"bc}\xa6j\x08B\x17\xf8\x17\xc9\xe5E+\xe9\x9e\x82\x0b0\xd4"
    tuple_0 = ()
    dict_0 = {bool_0: bytes_0, bool_0: bytes_0, bool_0: tuple_0}
    tuple_1 = (bool_0, bool_0, bool_0, dict_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    bytes_0 = b"\xc6"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    str_0 = "m|"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    str_0 = "U,o\tqAu58MZ"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    str_0 = "zMg:O~:\nj@,q-|"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    float_0 = 1198.075934
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    str_0 = "~\tG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    str_0 = 'O~%}WU";6kt)\n%] @'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    bytes_0 = b"l\x87\xbfL\xec\xe0%\x05\x16\x0eF\xd6\x0c\xa6\x1c\xefJ"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    bytes_0 = b"\x87\x12\xce0\x06L\xbeN\xfeM"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    str_0 = "h`DQ1z(j\\j}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    str_0 = "+$m\rDD06wep,W%4"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    str_0 = "(cAxk7f\tssH9"
    str_1 = "Pk!PW,\tFsl5Em!"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_255():
    int_0 = 2643
    bytes_0 = b"\xe1ALL"
    module_0.get_new_command(int_0, bytes_0)


def test_case_256():
    pass


@pytest.mark.xfail(strict=True)
def test_case_257():
    str_0 = "=Os(LW"
    module_0.match(str_0, str_0)


def test_case_258():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_259():
    bytes_0 = b"\x08\xb5v\xbe\x888\xd0\x84\xfc\x9d\x12\xb2\x18\xf7\xe1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    float_0 = 886.247
    module_0.match(float_0, float_0)


def test_case_261():
    pass


@pytest.mark.xfail(strict=True)
def test_case_262():
    float_0 = 122.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    dict_0 = {}
    bool_0 = False
    bytes_0 = b"^"
    tuple_0 = (bytes_0, dict_0)
    tuple_1 = (bool_0, bytes_0, tuple_0)
    module_0.match(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_266():
    bytes_0 = b'\xc0\xeb\x9d\xca\x02"\x96\xc5\xbf\x10\xd9\xb7\x82\xab\xfdO\x93\\\x86'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    str_0 = "a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    str_0 = '\rt8"kw4\t&WX"FI9EXwB'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    int_0 = 685
    bytes_0 = b"\x14\xcb\xf7\x13[\xdc\xba\x8e\xbe\xcc\x95\x021\xeco\xc2\x16"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    int_0 = 4497
    int_1 = 2186
    dict_0 = {int_0: int_1, int_1: int_1, int_0: int_0}
    module_0.match(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_272():
    int_0 = -189
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    int_0 = -882
    set_0 = {int_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    int_0 = -1088
    tuple_0 = (int_0,)
    set_0 = set()
    tuple_1 = (tuple_0, set_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    str_0 = 'AVw.b<+m"e9hD3q5'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    int_0 = -1952
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    str_0 = 'CG1Ml"n6/*$?icFk\x0c<g]'
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    int_0 = 1942
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    bytes_0 = b"\xbf{7\x1cS\xf2\x10\xac\x8f\xf8pR"
    int_0 = 1305
    dict_0 = {bytes_0: bytes_0, int_0: bytes_0, bytes_0: bytes_0}
    float_0 = 118.46
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    bytes_0 = b"\xef$\xe7\xbf\xe2\x86\xdd\x96\xbf\x88l\xbf\xaf\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    bytes_0 = b"\xf8\xdc5\xcb\xa8\xb3W\xda\xb6)^\xf0bO-\xce:\xd0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    int_0 = 555
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    complex_0 = -1802.95 - 1785j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    int_0 = 213
    module_0.match(int_0, int_0)


def test_case_290():
    pass


@pytest.mark.xfail(strict=True)
def test_case_291():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    int_0 = -1655
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    int_0 = -131
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    float_0 = -775.8574
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    bytes_0 = b"mk\xc2T\xf8\x98\xdeL\xf2\x92\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    bytes_0 = b"\xff\x89\xf8\x8a\x9c\x11hg\xc1\xb8\x87W\xc5U"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    int_0 = -1517
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    bool_0 = True
    str_0 = "Z=qDn}]nJd1BQ\\o\x0c6Q[K"
    bytes_0 = b"\xe8\x18\xe3\\-5\xae\xeaT\x19\x1b\xa5)\xd6\xbd|\x12\x17U\xf5"
    tuple_0 = (str_0, bytes_0, str_0)
    int_0 = 1896
    tuple_1 = (bool_0, tuple_0, int_0)
    bool_1 = False
    module_0.get_new_command(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_301():
    int_0 = -156
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_302():
    pass


@pytest.mark.xfail(strict=True)
def test_case_303():
    bytes_0 = b"\x9f8\xf17\x914\xed+\xc3\xf9\xacS\xdd\xe5\xe7T"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    float_0 = -3064.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    str_0 = ""
    float_0 = -693.539872
    tuple_0 = (str_0, float_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    bytes_0 = b""
    dict_0 = {bool_0: tuple_0, tuple_0: tuple_0, tuple_0: bytes_0, tuple_0: bool_0}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    str_0 = "/=ob_Y(t5ySbqVJ`"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    int_0 = 256
    float_0 = 555.373
    bool_0 = False
    tuple_0 = (int_0, float_0, float_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    str_0 = "=7,WC4~#4\n1rZB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    float_0 = 1165.6
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    tuple_0 = ()
    str_0 = "s`~SmJN'B|#Ag"
    str_1 = "dRe'ZT@A6]M"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: tuple_0, str_0: str_0}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    str_0 = "Wq4Bin2_mSzq>6$tYU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_318():
    str_0 = "pS|\x0b%K)\n:$4o`d_xc"
    module_0.get_new_command(str_0, str_0)


def test_case_319():
    pass


@pytest.mark.xfail(strict=True)
def test_case_320():
    float_0 = -1881.1725
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    int_0 = 2653
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    complex_0 = -1621 + 1155.9565j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    int_0 = 1226
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    bytes_0 = b"\xb8\x86\x9c\xea\xaan\x12)\xde\xce\xdel\xf8\xd6ro"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    float_0 = -262.76223
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    bytes_0 = b"\xc5\xed~\xec\xfe\x93r\xdb\xbb\xcd\xf7\xed\x93)\x8f\x19N5P\xb8"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    int_0 = 854
    list_0 = [int_0, int_0, int_0]
    bytes_0 = b"\xae*\x98\xf9\xf7t\x0cd{\x95\xc6\x0fN{\x18I1\xaf\x17"
    tuple_0 = (int_0, list_0, bytes_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    str_0 = "}3#V\n5D2+/AYE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    bytes_0 = b"/+{ \x9a2\xc1#\xcf\x9e\xb64 Qb/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    bytes_0 = b"\xdf\xcc,\xf3\xc77\xf5\xa7\xc3\x83\xbdM\xa9k4\x8c\x84"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    int_0 = -2580
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_335():
    pass


@pytest.mark.xfail(strict=True)
def test_case_336():
    int_0 = 402
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    bytes_0 = b"\x91S\xdf\x1fg;p\x0c3"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    bytes_0 = b"2\xce`E\xc2Kw\x84\xfb+-\xde\xcb\n\xdf\xea\x9f,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    bytes_0 = b"\xa1m\xed"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0, list_0, bytes_0)
    list_1 = [tuple_0, bytes_0, tuple_0]
    module_0.match(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    float_0 = -2333.744
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    str_0 = ":Wk;\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    float_0 = -127.45
    tuple_0 = (float_0,)
    float_1 = 2766.023
    module_0.match(tuple_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_346():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    float_0 = -1053.64369
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    bytes_0 = b"\xde\x0e\xd3K\x10\xfe\xb2\x00\x12A\xea8\x8cY7Y\xa1\xa9\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    str_0 = "J{"
    str_1 = "nYv"
    str_2 = "p.}hCzMFW*iKH;Wc"
    str_3 = ""
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_3: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    complex_0 = 1841 - 664.1j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    bool_0 = True
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    float_0 = 924.0907
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    complex_0 = 32.494 - 1151.642712j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    int_0 = 1698
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    complex_0 = 1286.844 - 762.10992j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    str_0 = "JvR\x0b"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    complex_0 = -2355.305992 - 3235.86j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    bytes_0 = b"H\xed\x83\n\xfb7\x16&\xa9\xc9\xcfFP\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    str_0 = "\\hmdp'Thn!9}X~"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    int_0 = 460
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    int_0 = 722
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    str_0 = ":!##;NHL9v+"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    complex_0 = 300.5 - 1185j
    set_0 = {complex_0}
    int_0 = 963
    tuple_0 = (int_0,)
    list_0 = [set_0, complex_0, tuple_0]
    list_1 = [list_0, tuple_0]
    tuple_1 = (list_1, list_1, list_0)
    list_2 = [tuple_1, set_0, tuple_1, list_1]
    module_0.get_new_command(list_2, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    float_0 = 2147.14
    int_0 = 1106
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    str_0 = "\ruANEh"
    bytes_0 = b"\xf2\x0b\x17\xea\xba\xa7\xdf\xdf\x19t6\n\x0en\xaf\xcc\x1e\x06\xa7\x13"
    tuple_0 = (str_0, bytes_0)
    set_0 = {tuple_0, str_0, str_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    int_0 = -1904
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    int_0 = 2266
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


def test_case_371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_372():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    bytes_0 = b"\xab4\x11\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    bytes_0 = b"\xb5*\xe7\xd1\xd9\xfd"
    bytes_1 = b"\xa3\xee=\t\xe7\x97\xa3\xc47"
    bytes_2 = b'\xf6\xfc\x14\x19"\xcfNfF\x8b\xf0'
    dict_0 = {bytes_0: bytes_1, bytes_0: bytes_1, bytes_1: bytes_0, bytes_2: bytes_2}
    list_0 = [dict_0, dict_0, bytes_0, dict_0]
    module_0.match(list_0, bytes_1)


def test_case_376():
    pass


@pytest.mark.xfail(strict=True)
def test_case_377():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    int_0 = -1456
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    complex_0 = 888.205 + 226.68j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    bytes_0 = b"\xef\x89y\xda\xefn\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    str_0 = "Q|1-MFPAWaTqco;\tac8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    str_0 = "h8\x0cio._'>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    int_0 = -1326
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    bytes_0 = b"\xdbd;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    bool_0 = False
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    float_0 = -682.2
    str_0 = "#m40X"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    complex_0 = -338 + 3523.61j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    str_0 = "0fA4n*,]Ee9V"
    tuple_0 = (str_0, str_0, str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    int_0 = -4132
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    int_0 = -102
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    str_0 = 'O~5]u5DcW2#"Go(=\x0b%z'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    bool_0 = False
    str_0 = '<"ye\r+E]W6;eAa'
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    int_0 = 443
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    bytes_0 = b"Z\xf9oVN\xf1U\xa3\x0f\xd5\xf3"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    str_0 = "\rL-'4\t 7`QP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    str_0 = "[2g\x0bP1.\r"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    bytes_0 = b"od\xecqm~\xeaA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    str_0 = "_/t#g6\nzj\tI+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    float_0 = 536.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    str_0 = "lmrvm8KWo3C7Z~v<J$"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    int_0 = -2669
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    float_0 = 1242.724336
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    bytes_0 = b"\xe3E+(a\xb2'\xbd)\xa5\xda\xc0\x1a\xc9\x91\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    str_0 = "I$)wM=;S"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    bytes_0 = b"ah\xd7LQ\x7f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    bytes_0 = b"\xe6S\xab\x02R\xd2\xf8\xca\xd4"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    int_0 = 1811
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    bytes_0 = b"\x03\xe4\xec\xab\x05\x85\x9f\xec\xc2\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    int_0 = -459
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    str_0 = "mD+Rk1lg`\n+\x0cFE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    int_0 = -3786
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_1, bool_0}
    tuple_0 = (bool_0, bool_0, set_0, bool_0)
    module_0.match(tuple_0, set_0)


def test_case_418():
    pass


@pytest.mark.xfail(strict=True)
def test_case_419():
    complex_0 = 3066.7 - 2877.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    int_0 = 3659
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    int_0 = 825
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    bytes_0 = b"<\x12)O6\t\xb9\xe6\x9f\xecEL\x8e"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    int_0 = -598
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    bytes_0 = b"\xb2\xcc:\x92J\x9c\\\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    float_0 = -510.755
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    complex_0 = -4805.1 - 330.603327j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    bytes_0 = b"\xe7\x19,f\x84\xfe\xc40\x94\x1b\x19\x9aX]"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    dict_0 = {}
    str_0 = '02)(\n1u[E+"\nUW`'
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    str_0 = "V:PX/\t;K"
    str_1 = "tR'\x0ch$kl8I0pFu8B!I"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    int_0 = -1039
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    bytes_0 = b"\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    bytes_0 = b"cV\x1c\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    bool_0 = False
    bool_1 = True
    float_0 = 1112.0
    dict_0 = {bool_0: bool_1, bool_1: bool_0, float_0: bool_1, float_0: bool_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_436():
    int_0 = -2737
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    str_0 = "@)).\\QFISZ*+qv\\]cb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    str_0 = "=P5..p"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, tuple_0, str_0, str_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    int_0 = -3294
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    complex_0 = 817.4408 - 1430.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    str_0 = "\x0b<YJrb<Ul%d<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    str_0 = "\nu"
    module_0.get_new_command(str_0, str_0)


def test_case_444():
    pass


@pytest.mark.xfail(strict=True)
def test_case_445():
    float_0 = -2754.555622
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    set_0 = set()
    dict_0 = {}
    object_0 = module_1.object(*set_0, **dict_0)
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    float_0 = 110.096735
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    bool_0 = True
    int_0 = 408
    tuple_0 = ()
    tuple_1 = (bool_0, int_0, tuple_0)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    bytes_0 = b".|\x02=\xb9Az\xe2\x90:Zb\xc7"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    int_0 = 473
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    str_0 = "\x0bO{Mu\\+v^Az>+\n"
    bytes_0 = b"\xd7\xb7\x177\xab"
    list_0 = [bytes_0]
    bool_0 = False
    tuple_0 = (str_0, bytes_0, list_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    bytes_0 = b"\x1c\x88`8=\x95E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    str_0 = "di}) ?8OPtE!@%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    bool_0 = False
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    object_0 = module_1.object()
    int_0 = 1979
    tuple_0 = (object_0, int_0)
    list_0 = [tuple_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    float_0 = -3931.89547
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    int_0 = -563
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    bytes_0 = b"\xc3-\xaf\xbc\xcd\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    bytes_0 = b"lPq\x99J1K\x96\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    bytes_0 = b"\x92\x8b+\x9b\xa3\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    bytes_0 = b"B!j@\x04m\xf7\xec\xe4\xf8\xe9\xd1O\xd6\t\x7f\x82y\x1e\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    str_0 = "F"
    module_0.get_new_command(str_0, str_0)


def test_case_464():
    pass


@pytest.mark.xfail(strict=True)
def test_case_465():
    bytes_0 = b'"\xa4{\xc6\x93\xca\x86*\xae\r\xa1^'
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    str_0 = "'0v\tU\t%H60"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    complex_0 = -474.9 + 402.6773j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    bool_0 = True
    bool_1 = True
    tuple_0 = (list_0, bool_0, bool_1)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    float_0 = -849.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    bytes_0 = b"hL\x951\xa2\xe1y\xa1\xe6>\xb0M d\xb3\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    str_0 = "dVB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    str_0 = '}66E!"|R'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    str_0 = "]L#9Zwnu>H81B\\"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_473():
    pass


@pytest.mark.xfail(strict=True)
def test_case_474():
    int_0 = 1739
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    float_0 = 368.29394
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    set_0 = set()
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, set_0)


def test_case_477():
    pass


@pytest.mark.xfail(strict=True)
def test_case_478():
    set_0 = set()
    bool_0 = False
    list_0 = [set_0, bool_0, set_0, bool_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    str_0 = "iilfVm[9\x0bJp"
    bool_0 = False
    float_0 = -976.0496
    dict_0 = {float_0: float_0, str_0: bool_0, str_0: str_0, bool_0: float_0}
    dict_1 = {bool_0: dict_0, bool_0: bool_0}
    tuple_0 = (str_0, bool_0, float_0, dict_1)
    module_0.match(tuple_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_480():
    int_0 = -1486
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    int_0 = -426
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    str_0 = ">\\G"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    int_0 = 3411
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_484():
    pass


@pytest.mark.xfail(strict=True)
def test_case_485():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    int_0 = 2871
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    float_0 = 4128.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    float_0 = 1185.258
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    bytes_0 = b"\x14\x1cI\xf0\xac$\xce\xe5z\xdb\xa89of\xf8Ls\xf2\xc3O"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    int_0 = 567
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    set_0 = set()
    tuple_0 = ()
    int_0 = -2473
    tuple_1 = (tuple_0, tuple_0, int_0)
    tuple_2 = (set_0, tuple_1)
    module_0.get_new_command(tuple_2, tuple_1)


def test_case_493():
    pass


@pytest.mark.xfail(strict=True)
def test_case_494():
    int_0 = 4919
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    float_0 = 3950.9675
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    tuple_0 = ()
    bytes_0 = b"\xdd\x9ec\x7fi\xdc$\x1a P"
    set_0 = {tuple_0, tuple_0, bytes_0, tuple_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    float_0 = 2226.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    complex_0 = 214.179 + 1632.38j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    float_0 = -808.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    int_0 = -1324
    module_0.match(int_0, int_0)


def test_case_502():
    pass


@pytest.mark.xfail(strict=True)
def test_case_503():
    bytes_0 = b"\xa7\xa8U"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_505():
    int_0 = -1083
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, list_0, int_0, list_0]
    tuple_0 = (int_0, list_0, list_1, int_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    bytes_0 = b"r\x99\x9a\xbc\xcd\xbb{\x86\x17\xe8b"
    tuple_0 = ()
    complex_0 = 6412 - 678j
    set_0 = {bytes_0, tuple_0, complex_0, bytes_0}
    set_1 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, set_1)


def test_case_507():
    pass


@pytest.mark.xfail(strict=True)
def test_case_508():
    str_0 = "HErE=W.R}\t_/46Hc<?"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    bool_0 = True
    int_0 = -1672
    int_1 = 452
    tuple_0 = (bool_0, int_0, int_1)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    bytes_0 = b"\xd9r\xf2_\xfb\xb67\xf4\xba\xb0\xdc\xf6\x16\x8e\xc5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    str_0 = "VZQ_cDK<S>v7^Rz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    str_0 = "Y2S,]3@:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    bytes_0 = b"wi\xae\xc8\xe0\xb9\xeee\xa6\x7f\xb1q=\xba2\x03Q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_516():
    bytes_0 = b"#x!M\xe6\x9f\t1\xb5c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    int_0 = 279
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    int_0 = -555
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    bool_0 = True
    float_0 = -2124.003
    bytes_0 = b"\xf7\x97\xacTV\xc3j\xba\xf4"
    tuple_0 = (bool_0, bool_0, float_0, bytes_0)
    list_0 = [tuple_0]
    list_1 = [list_0, bool_0]
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    str_0 = "]oGRjj5["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    str_0 = "?LjTHh\x0c2\r{W4Tp#1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    float_0 = -431.34
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    int_0 = -346
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    str_0 = "Aa"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    float_0 = -2740.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    str_0 = "M'N%_"
    module_0.match(str_0, str_0)


def test_case_530():
    pass


@pytest.mark.xfail(strict=True)
def test_case_531():
    int_0 = 889
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    str_0 = "pQP7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    int_0 = -810
    int_1 = 973
    str_0 = "|K2uA&kL!V"
    tuple_0 = (int_0, int_0, int_1, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    bytes_0 = b"\xfd\x93\x18\xdc\\\xe9\x16r\x7f\xa0\x0b\x8b\x01\xebK\xf5\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    list_0 = []
    object_0 = module_1.object(*list_0)
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    complex_0 = 476.649 - 652.8987j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [bool_0, bool_0, list_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    bool_0 = True
    complex_0 = -969.3 + 173.4j
    bool_1 = True
    tuple_0 = (bool_0, complex_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    int_0 = 3701
    bytes_0 = b"\xce\x1a1D'H7\xbb^\xb1\xac\x08\xa2"
    dict_0 = {int_0: int_0, bytes_0: int_0, int_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    str_0 = '"BQ'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    bytes_0 = b"\xed\xec*\xad\xff\x02ur"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    int_0 = 87
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    bytes_0 = b"B\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    int_0 = -992
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    bytes_0 = b")h\xb8\xb7\x99\xc3?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    complex_0 = 2450.8 + 1349.176j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    bytes_0 = b">\xee\x0c\x8aS"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    int_0 = 7232
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, object_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    complex_0 = 1890.59 + 2257.44j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    int_0 = -1810
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    int_0 = -96
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    list_0 = [set_0, tuple_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    float_0 = -179.847
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    float_0 = 1021.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    bytes_0 = b"\xc8_Y\x91\xf4L\x96_r\xdb"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    int_0 = 2737
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = "DxQ"
    str_1 = "*0|`%"
    str_2 = "{O+b`vwu9[<<^^{\x0b::CV"
    dict_0 = {str_0: none_type_0, str_0: str_0, str_1: list_0, str_2: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    str_0 = ":#]J-2\t4me"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_568():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    str_0 = "jv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    str_0 = "H)]oK:WQ!v5\\w<5Ce"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    bytes_0 = b"\x13\xc0\xf2\xb9\xb6\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    str_0 = ""
    bool_0 = False
    list_0 = [bool_0, str_0, str_0, str_0]
    str_1 = "H}Em6^sfl"
    module_0.get_new_command(str_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    float_0 = -2069.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    float_0 = -698.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    str_0 = "9k4{7A/=F\x0bJ\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    int_0 = -1436
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    str_0 = ";XQ57\x0c=B"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    str_0 = "+j;?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    str_0 = "~CW\x0b-lGX9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    bytes_0 = b"~y\x03\xc4\xb6`T\xd2i\x0c\xaed\xd2\x8b\xeb\x0b\xc4\xe9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    str_0 = "z=YtO\\iaBr'Kuv7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    bytes_0 = b"\xa6\x06\x16\xba\x18\xab*D\x9a?J"
    list_0 = [bytes_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    int_0 = 144
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    int_0 = -2048
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    int_0 = -1565
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    bytes_0 = b"\r2\xf0\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    bytes_0 = b"$\xfe\xd3k\x9dI\xfb"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    complex_0 = -3327.861 - 842j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    bytes_0 = b"\x90\xeaD\x17sN\n\xf5\x825"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    str_0 = "m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    str_0 = "@v"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    bytes_0 = b"h\x08\xc3\x8a\x19\x88\x1f\xe3\xb9\xf1\x15\x93\xf3\x88\xb0\xc1[\xa6\xfc"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    str_0 = "mK[[=2skR<8y|9\nNj.S_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    float_0 = 859.6
    str_0 = "k\x0c]nH("
    int_0 = 1468
    tuple_0 = (float_0, str_0, int_0)
    module_0.match(tuple_0, int_0)


def test_case_598():
    pass


@pytest.mark.xfail(strict=True)
def test_case_599():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    bytes_0 = b"PV\xea\xef<\x9a\x08m\xf6<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    int_0 = 1745
    bytes_0 = b""
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    str_0 = " _"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    int_0 = -1543
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    bool_0 = False
    str_0 = 'u<>5"0P1'
    bool_1 = True
    tuple_0 = (bool_0, str_0, bool_1)
    list_0 = [tuple_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0}
    tuple_0 = (list_0, dict_0)
    bool_1 = False
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_606():
    int_0 = -824
    int_1 = 1271
    list_0 = [int_1, int_0, int_0]
    tuple_0 = (int_1, list_0, int_0, list_0)
    dict_0 = {int_0: int_0, int_0: tuple_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    str_0 = "&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    float_0 = 631.2784
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    float_0 = 566.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    float_0 = -571.493922
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    int_0 = 2528
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    int_0 = -3272
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    int_0 = 2462
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    str_0 = "\x0b"
    dict_0 = {str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    str_0 = "l~LTjGWqCUD}rQ)="
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_0)


def test_case_619():
    pass


@pytest.mark.xfail(strict=True)
def test_case_620():
    bytes_0 = b"\x06\xed\xd8\x15qR1vZ\x0ekx\x93\x9e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    object_0 = module_1.object()
    int_0 = 1218
    list_0 = [int_0]
    module_0.get_new_command(object_0, list_0)


def test_case_622():
    pass


@pytest.mark.xfail(strict=True)
def test_case_623():
    complex_0 = -982 + 3002.147763j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    complex_0 = 1331.4 + 1717.180449j
    bytes_0 = b"\x02\xcd;\xcf\x87i.II\x0f\xcc\xe2\x0e\xcd\xde\xff\xab"
    set_0 = {complex_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    int_0 = 5063
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    set_0 = set()
    int_0 = -647
    tuple_0 = (set_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    str_0 = "ja\\NyC$U[|"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    complex_0 = -922.650436 - 237.668156j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    str_0 = ""
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    bytes_0 = b"\x95\xd6\xb9\xd3kH\x7fcu"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    str_0 = "iCiAO\x0b"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    float_0 = 2096.77263
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    bool_0 = False
    bytes_0 = b"\xc9\x82\xcea\x03X7\n\xa6\xe4\xe1`\x01\xd7"
    set_0 = {bytes_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, bytes_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    str_0 = "<O3]8Nl.O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    int_0 = 1737
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    bool_0 = True
    int_0 = -498
    list_0 = [int_0, bool_0, int_0, bool_0]
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, int_0, list_0, dict_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    str_0 = "K/"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    str_0 = "J#K7t&lpPa"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    int_0 = -504
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    float_0 = -154.015
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    float_0 = 219.3755
    int_0 = 279
    dict_0 = {float_0: int_0, float_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    int_0 = 2653
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    int_0 = 527
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    bytes_0 = b" \x88\xab)I"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    int_0 = -452
    bool_0 = True
    str_0 = 'w"!h'
    tuple_0 = (int_0, int_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_650():
    pass


@pytest.mark.xfail(strict=True)
def test_case_651():
    int_0 = 3397
    list_0 = []
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    complex_0 = 1645.17 + 1078.29738j
    float_0 = 2209.820749
    list_0 = [complex_0, complex_0, complex_0, float_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    int_0 = 1843
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    bytes_0 = b"\x9a\xc2\xc1\xab\x90\x9d\xf7\xf5d\xf5\x0f\x85\xf5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    int_0 = -624
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    int_0 = 2820
    tuple_0 = (int_0, int_0, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    int_0 = 53
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    float_0 = -1171.916262
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    float_0 = 5497.54501
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    int_0 = -733
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    float_0 = -2039.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    str_0 = 'r!DiV/p"b{&\x0b='
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    int_0 = 522
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    str_0 = "Bbad\n'[gl3IPHCR "
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_670():
    pass


@pytest.mark.xfail(strict=True)
def test_case_671():
    float_0 = 2085.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    int_0 = 2227
    str_0 = "(;\\\x0b(.g5A\x0cob4"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    bytes_0 = b"a(\xdb\xe5\x9f\x08F\x02\xfc\x91Gy\x87c\x1f|T"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    complex_0 = 2485.46 - 666.316841j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    complex_0 = -1908.97164 + 3980.37193j
    list_0 = [complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    int_0 = -2658
    tuple_0 = ()
    dict_0 = {int_0: tuple_0, tuple_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    int_0 = -4650
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    bytes_0 = b"\xb3q:%\xe3\x01o\xbd\x93\x86\x9f\x05&"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    float_0 = -132.501
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    int_0 = 445
    bytes_0 = b"h}\xacp\x07\xa8\x1f\xbe\x85+\x95"
    tuple_0 = (bytes_0,)
    dict_0 = {int_0: int_0, int_0: int_0, int_0: tuple_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    bytes_0 = b"\xce)\x9f6I\x1bb\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    float_0 = -1396.0
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    bool_0 = False
    str_0 = "e+bF_M"
    bool_1 = True
    tuple_0 = (bool_0, str_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    object_0 = module_1.object()
    bytes_0 = b'j"\x8c\xc3\x9d\xc9O\x84\xc8+\x0b\xd7\x86\t\x8c0B\xc0\xd0'
    dict_0 = {object_0: bytes_0, bytes_0: bytes_0}
    int_0 = 1353
    tuple_0 = (object_0, dict_0, dict_0, int_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    str_0 = "iL$;#5?vc*av_t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    complex_0 = 602.671 + 3369.128664j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    int_0 = 2272
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    int_0 = -1368
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    str_0 = "DW@#\x0cun"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    set_0 = {str_0, bool_0}
    list_0 = [tuple_0, str_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    str_0 = "N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    float_0 = 2246.68
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    int_0 = -1868
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_699():
    pass


@pytest.mark.xfail(strict=True)
def test_case_700():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0]
    tuple_0 = (bool_0, set_0, list_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    str_0 = "1qcX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    bytes_0 = b"\x94\xf4\xff'\xd1\x96\x98s\xba\xf8\x8a"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    complex_0 = 2117.0597 - 131j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    str_0 = ")2\nLZ&C5\ng"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    bytes_0 = b"\xc8\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    complex_0 = 2160.92 + 1422j
    dict_0 = {complex_0: complex_0}
    tuple_0 = ()
    module_0.get_new_command(dict_0, tuple_0)


def test_case_707():
    pass


@pytest.mark.xfail(strict=True)
def test_case_708():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    int_0 = -2640
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    int_0 = 1834
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


def test_case_712():
    pass


@pytest.mark.xfail(strict=True)
def test_case_713():
    float_0 = -2363.57702
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    list_0 = []
    tuple_0 = (list_0,)
    list_1 = [tuple_0, tuple_0, tuple_0, tuple_0]
    list_2 = [list_1, tuple_0]
    module_0.match(list_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    int_0 = -1656
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    str_0 = "';.:#T'mEh04:Auo[$k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0]
    int_0 = -741
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    float_0 = -705.3158
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    str_0 = '8YFVWU"\r'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    bytes_0 = b"\xc6Y\x0e\xe3(\xcd\xae%\xf0\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_725():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    int_0 = 390
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    str_0 = ">Pv=j/?ABQ\x0bHl@U"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    bytes_0 = b"\x7fO\xdc\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    tuple_1 = (tuple_0, tuple_0, dict_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    int_0 = 260
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    bytes_0 = b"\xd5\x8a\xe6^\x03\xf19f"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    int_0 = -1885
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    complex_0 = 742.159 + 110.1693j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    int_0 = 1474
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    bool_0 = True
    bytes_0 = b"\xd2\xc1\xc7\x03\xe0\xfe\x12\xd4Z\x1eAo\xf2"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    str_0 = "XU]S2LY\x0bdpTqY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    str_0 = "4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    bytes_0 = b"\xeb\xef\x90\xa5\xc0\xa5\xfd\x1a\xdb[\xca\xfe\x13l"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    float_0 = -3755.2462
    bool_0 = True
    module_0.match(float_0, bool_0)


def test_case_745():
    pass


@pytest.mark.xfail(strict=True)
def test_case_746():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    set_0 = set()
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    str_0 = "kh("
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    int_0 = -4173
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    bytes_0 = b"b\x93\x95@\xc44\x89\xe1p\xd5\xba:\xa6\x0e\xcc\xe1V\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    int_0 = -861
    list_0 = [int_0, int_0]
    int_1 = 4127
    module_0.match(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_752():
    int_0 = -16
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    bytes_0 = b"Q\xc3\xad\x83\xfd\x92\xdb\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    str_0 = "[~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    complex_0 = -1789.82612 + 2741.061967j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    bytes_0 = b"\x83\xbb\xf3\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    int_0 = -382
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    bytes_0 = b"\x11 \x9a\xde3\xca\x12\x9a\x89%(N\x0f\xe3\x1e/"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    int_0 = -4941
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    int_0 = -314
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    bytes_0 = b"g\xa2\xdd\x1ce\x1d\xfd\x9cm\xcb/\xe76\x9e\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    str_0 = "lz8gat1Tb(Y\\gy:"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    int_0 = -2763
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    bytes_0 = b"EP\x16\x19"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_767():
    float_0 = -1637.0
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    int_0 = -702
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    str_0 = "^\nd%5e@Or$"
    module_0.match(str_0, str_0)


def test_case_770():
    pass


@pytest.mark.xfail(strict=True)
def test_case_771():
    float_0 = 1540.93
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    int_0 = -3511
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


def test_case_773():
    pass


@pytest.mark.xfail(strict=True)
def test_case_774():
    bool_0 = True
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    int_0 = 905
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    bool_0 = False
    int_0 = 1718
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    object_0 = module_1.object()
    bool_0 = False
    tuple_0 = (object_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_779():
    float_0 = 151.61
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    str_0 = "bv)@-$xs''"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    float_0 = -234.022
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    int_0 = -640
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    bytes_0 = b"=\x12\xf1T\x12"
    set_0 = {bytes_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    str_0 = "A\x0czsq v\x0c]ksCu)XU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    bytes_0 = b"o"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    bool_0 = False
    bytes_0 = b"\xe6\x02\xac"
    set_0 = set()
    tuple_0 = (bool_0, bool_0, bytes_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    str_0 = "\rRmvX4\\s]S"
    module_0.get_new_command(str_0, str_0)


def test_case_792():
    pass


@pytest.mark.xfail(strict=True)
def test_case_793():
    bytes_0 = b"\xe2\xa4\xfb\x0e42c`2^\x05"
    str_0 = "(Qj"
    dict_0 = {str_0: bytes_0}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    str_0 = "+,\x0bIX0aQ#N#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    int_0 = 2038
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    float_0 = 1628.99
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    str_0 = " ?8'DwZ+>\x0bz^8=ZfOW"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_800():
    pass


def test_case_801():
    pass


@pytest.mark.xfail(strict=True)
def test_case_802():
    bool_0 = False
    bytes_0 = b"\xa3\xe7\xe1\xe9\x9cD\x9edk\x92"
    tuple_0 = (bool_0, bytes_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    int_0 = -4025
    bool_0 = True
    list_0 = [int_0, bool_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    str_0 = "nR^](TN:\\O<(@Id"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    int_0 = -326
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    int_0 = -1062
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    bytes_0 = b"\xeb(c\xc7"
    list_0 = [bytes_0]
    set_0 = set()
    float_0 = 1670.28212
    tuple_0 = (list_0, set_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    str_0 = '_7vIR!Z>M[sl\nTv&."y'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    float_0 = -2587.2503
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    bytes_0 = b"\x15\x06\x07\x1aD"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    float_0 = 2369.922939
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    complex_0 = -1382.01 - 75.47917j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    bytes_0 = b"0t\xc3\x16\xc3i\xbbX\xdfn\x96"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    complex_0 = -947.016 - 268.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    int_0 = -1427
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    int_0 = -2945
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    bytes_0 = b"{\x14\xe3"
    bool_0 = True
    int_0 = 738
    dict_0 = {bytes_0: bool_0, bytes_0: bytes_0, bytes_0: bool_0, bool_0: int_0}
    object_0 = module_1.object()
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    bytes_0 = b"1\xd7\xf5\x95F\xb4^|!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    int_0 = 3721
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    bytes_0 = b"n\xc4\x0e}\xa6~Q8\x8d["
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    int_0 = 2070
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    int_0 = 3163
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    int_0 = 2724
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    str_0 = "\r7\\4E#ou/#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    str_0 = "drp,T|ue3JkU1#5M)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    bytes_0 = b"\xc4\xcf\x8c/dd\x94)\x03\xb4G\x0b\xa7\xf2?$^z"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bytes_0 = b"\xcer7\x150"
    dict_0 = {bool_0: set_0}
    tuple_0 = (set_0, bool_0, bytes_0, dict_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    str_0 = ".q{lr &\x0b.K3%"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    bytes_0 = b"U\x8b\xd5\xa0\xd6k:x\xeeL4\xe7C\x17+\xc2"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    int_0 = -2752
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    float_0 = -3413.05
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bytes_0 = b"\xa3T\x92\x83h\xf3a\x84\x1d\x10\xbanTg\xea\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    str_0 = "qH>"
    bytes_0 = b'j\xdd\xabZ1Lq\xcdxe\x80C4lq"'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bytes_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    bytes_0 = b"0;\xb2\xf2s\x17\x9b\x0b\x94+jt\xaf_\x1a!N\x8f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    float_0 = -3748.59
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_846():
    pass


@pytest.mark.xfail(strict=True)
def test_case_847():
    int_0 = 2590
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    int_0 = 3851
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    int_0 = -1141
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    str_0 = 'OUYA"Z,w:'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    complex_0 = 1332 + 1363.040192j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    none_type_0 = None
    module_1.object(**none_type_0)


def test_case_855():
    pass


@pytest.mark.xfail(strict=True)
def test_case_856():
    object_0 = module_1.object()
    bytes_0 = b"\xf7\x03\x10\xbf\x9c6"
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    str_0 = "~Ph4~V@Ju%\x0cpq!_@\r.e"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_858():
    pass


@pytest.mark.xfail(strict=True)
def test_case_859():
    str_0 = "v8KQuItZk*tX6j"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    bytes_0 = b".Y.\xcc\xa0\xabM>\x81\x9be\xaa\x96\xfd\xcf"
    set_0 = {bytes_0}
    list_0 = [set_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    bytes_0 = b"d\xaf\xcf\x0e\xb9(\x15Xe4\xd9\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    str_0 = "ej_-Y>0M{|ofh!+K%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    bytes_0 = b"J\x94\xefNbC"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    str_0 = "@-()@\\$\\7/"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    int_0 = -4410
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    bool_0 = True
    complex_0 = 2404.977454 + 2495.665902j
    dict_0 = {bool_0: bool_0, complex_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    int_0 = 4301
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    str_0 = "_cBlh}^`=-W"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    object_0 = module_1.object()
    str_0 = "|\t.*g\t"
    tuple_0 = (object_0, str_0, str_0, object_0)
    dict_0 = {tuple_0: tuple_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_874():
    pass


@pytest.mark.xfail(strict=True)
def test_case_875():
    bytes_0 = b"G!\x94\x94\xa9\xd5?\\J"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    int_0 = -1956
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    int_0 = -2261
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    str_0 = "nJ1bWv(Gc`j3_>e"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    str_0 = "wjt\tT`u"
    bool_0 = True
    module_0.match(str_0, bool_0)


def test_case_880():
    pass


@pytest.mark.xfail(strict=True)
def test_case_881():
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = True
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_882():
    bool_0 = True
    float_0 = 2565.740473
    set_0 = {bool_0, bool_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    float_0 = 3137.44
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    str_0 = "(7QL~//.*AkIaI)0&+5+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    int_0 = -3249
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    bytes_0 = b"\x12\xd2\xaa\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    float_0 = 1633.839933
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    float_0 = -168.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    bytes_0 = b"q\xc3\xc9V\xcc\xd5\xcc_\xd1D|\xe9%P>\xef\x86u"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    bytes_0 = b"\x00\rY\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    bytes_0 = b"\x94[\xca\x90~\x18Z]\x02\xae\x15\xef\xd1U"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    int_0 = -1336
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    str_0 = "A A\rb+1s~ij"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    float_0 = 1150.3
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    int_0 = 3698
    str_0 = "5}^hpUR&"
    list_0 = []
    tuple_0 = (int_0, str_0, list_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    bytes_0 = b"\xb5\x9d9\xae\xafc2\xf6\x18\x84"
    object_0 = module_1.object()
    module_0.get_new_command(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    bytes_0 = b"\xd1\xe3\xe4r\xe2\x08"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    int_0 = 3181
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    int_0 = 2563
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    float_0 = 1314.1
    module_0.get_new_command(float_0, float_0)


def test_case_904():
    pass


@pytest.mark.xfail(strict=True)
def test_case_905():
    set_0 = set()
    list_0 = [set_0]
    list_1 = [set_0, list_0, list_0]
    tuple_0 = (list_1,)
    list_2 = [tuple_0]
    module_0.get_new_command(list_2, set_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    int_0 = 2710
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    bool_0 = True
    int_0 = 897
    int_1 = 1314
    dict_0 = {bool_0: bool_0, bool_0: bool_0, int_0: int_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    str_0 = "PTMTwdL"
    int_0 = -168
    dict_0 = {str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    str_0 = ">+WL}\rW,S\nkQ"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    bytes_0 = b"\xbd\x1f'\xd0\x87\xf3Of\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    float_0 = 3721.105455
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


def test_case_912():
    pass


@pytest.mark.xfail(strict=True)
def test_case_913():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    str_0 = "C"
    module_1.object(*str_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    int_0 = 509
    tuple_0 = (int_0, int_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    bool_0 = False
    float_0 = -152.0
    tuple_0 = (bool_0, float_0)
    bytes_0 = b"\xca\xacL\xae\x10\xe2\xafn\xe6\xa2K\x03\x93~"
    list_0 = [tuple_0, bytes_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    str_0 = "NSM"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    str_0 = "1jJDVO/e xB\x0cgLBQ"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    int_0 = 99
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    str_0 = "3q.@G.\x0bn|n3jY"
    str_1 = ""
    str_2 = "\n4n(PeHj_Ikx\x0ccdj*^S#"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    float_0 = -1108.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    bytes_0 = b"O\x00/T\x06\x87=["
    module_0.match(bytes_0, bytes_0)


def test_case_924():
    pass


@pytest.mark.xfail(strict=True)
def test_case_925():
    float_0 = -913.140604
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    str_0 = "O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    bytes_0 = b"\x92\xac\x17&\xe4$\x82B\xaa\x88c\x9b\xfa\xb2\xfa\xc1:\x8dy"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    complex_0 = -309.104 + 1144.70488j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    complex_0 = 1994.8341 - 387.298j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    bytes_0 = b"\xa5\xa9\x9c\xf8\xca"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_934():
    pass


@pytest.mark.xfail(strict=True)
def test_case_935():
    float_0 = 1013.3623
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    str_0 = "\n "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    float_0 = -1759.934953
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    bytes_0 = b"\xd3\xfdpT\r\xae\x86\x1fgE?a"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    bytes_0 = b"\xb1\x05\xb8\x1a\xa7\x1di\xf0i\xd9\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    str_0 = "eFITfyZ $Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    float_0 = -3793.3534
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    bytes_0 = b"\x03i\r\xe6:\xc7\xf6,\xf4_\xf4\xab\xcfw\xfdL\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    float_0 = -2115.534
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    int_0 = -217
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    float_0 = 1678.7
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    str_0 = '"EChcAy53mn=sT/'
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    bytes_0 = b"\xf1\xd9k\xe8\xce\x16"
    bool_0 = False
    bytes_1 = b"\x9fO>@X\x9f\x9f\xc36\x97"
    tuple_0 = (bool_0, bool_0, bytes_1)
    bytes_2 = b"\x10g\xc6\xda\xac\x11\x99gl_oH\x96\xd6OL\xc3\xd6"
    set_0 = set()
    tuple_1 = (bytes_0, tuple_0, bytes_2, set_0)
    module_0.get_new_command(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_951():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    int_0 = -1900
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    float_0 = -1823.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    str_0 = "Z\nJl,siEA&-2)KaB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    none_type_0 = None
    str_0 = "*()F5cWxt"
    str_1 = ";.b<"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    bytes_0 = b"\xef\xe3%\xaf\xc9\x1c\xe4\x95\xbe\x86\xe20\x05 "
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    float_0 = 732.73
    tuple_0 = (bytes_0, dict_0, float_0)
    list_0 = [tuple_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    bytes_0 = b'\x8b\xc8\xaee[\x183\x0e\xdem3\x98Jc"'
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    complex_0 = 1671.3 + 1531.526j
    list_0 = [complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    int_0 = -3837
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    float_0 = 1202.375277
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    str_0 = "\\?4Z1d,^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    bytes_0 = b"\x1e\xbc"
    int_0 = -1887
    dict_0 = {bytes_0: bytes_0, bytes_0: int_0, bytes_0: int_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    float_0 = -375.729
    module_0.match(float_0, float_0)


def test_case_964():
    pass


@pytest.mark.xfail(strict=True)
def test_case_965():
    int_0 = -823
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    float_0 = 2971.97
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    complex_0 = -434.0047 + 1564j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    float_0 = -558.65
    bytes_0 = b"9\xd8\x998\xd7\x1f"
    list_0 = [float_0, bytes_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    bytes_0 = b"CX\xd3\xfb\x1f*F\x0bY#]\xd0\xd4\x04J\x03\xda\xbf\xcc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    float_0 = -1830.820886
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    bytes_0 = b"\x1fY:a:\x1d\xa8v\xb7_\xf9\x89v\xf7\\CE\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    bytes_0 = b"\x0b/\xf1\x08\x9b8v\x8d\xea\x0c\x96 \x06B\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    str_0 = "#e_T"
    str_1 = "M6u9\x0c\tQ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    bool_0 = True
    bytes_0 = b"\xa2"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    int_0 = 909
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    int_0 = -800
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    int_0 = -819
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    complex_0 = 2670.3 + 36.096j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    float_0 = -729.0
    str_0 = "AE6"
    dict_0 = {float_0: float_0, float_0: str_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    str_0 = 'X4(2:(pA"T@1Z'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    int_0 = -261
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    str_0 = "nbMI'QNCpIu\n8|%^Mw"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    str_0 = "'NI?8%OBR!0i{Xv9"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    int_0 = 1195
    bytes_0 = b"Ml\x80\x8e\x03\xfa\xf6\xd9$\xb4j\x8a\xd7hN\x0c"
    dict_0 = {int_0: bytes_0}
    dict_1 = {int_0: dict_0}
    module_0.match(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_988():
    float_0 = -3523.8886
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    int_0 = 990
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    none_type_0 = None
    float_0 = 406.00575
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    float_0 = 585.077556
    int_0 = 3496
    dict_0 = {float_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    str_0 = "^J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    bytes_0 = b"\xb7O\xed3\x10\xb8\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    bool_0 = True
    int_0 = -791
    dict_0 = {bool_0: bool_0, int_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    int_0 = -64
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    str_0 = "^sYv\tob*KC&S]||d/9}^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    str_0 = "UgY/g~=m_Y`n!mkUnC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    bytes_0 = b"\xd9k\x0e\x01"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    str_0 = "\\})|2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_1003():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1004():
    int_0 = 318
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    str_0 = "0Sd=*C[9|t"
    module_0.match(str_0, str_0)


def test_case_1006():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1007():
    float_0 = 1526.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    float_0 = 2200.6279
    bool_0 = False
    float_1 = -2272.77
    tuple_0 = (float_0, bool_0, float_1)
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    int_0 = 2827
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    str_0 = "\\V*1r;9k(T%,"
    bytes_0 = b"\xa6\xd5+\x1c"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    bytes_0 = b"\x01\xbd\xe9>\x90\x15\xe3\xd9\xc9\xf6\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    str_0 = "I09?9^2e|MF%\tXNu?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    int_0 = -812
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    int_0 = 1521
    list_0 = [int_0, int_0]
    str_0 = 'qm4L]{[3?\\lxZ"M%:3-'
    bytes_0 = b","
    tuple_0 = (list_0, str_0, bytes_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    str_0 = "\nzrrKgjm6chl.;+RV2\n"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    float_0 = -35.13147
    bytes_0 = b"\xba\x83\xa8\xfb\xa3\x98}\x89\xf6\x94\xbb"
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    float_0 = -354.79
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bool_0 = False
    bytes_0 = b"4\xa6M\xc7\x85Tp\xe7a&H"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    bytes_0 = b"\x8d\x9b1\x94\xa5\xc8\xd7\xe8\xfe\x0c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    list_0 = [set_0]
    str_0 = 'q>\x0c@""l#=Ok'
    tuple_1 = (tuple_0, set_0, list_0, str_0)
    list_1 = [tuple_1]
    list_2 = [list_1, tuple_1, list_1]
    module_0.get_new_command(list_2, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    bytes_0 = b"D\x85oZ\xcfh\xb5\xe7\xefBp\xa6n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_1026():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1027():
    str_0 = "7`{"
    bool_0 = False
    str_1 = "\\"
    str_2 = "_+iBp-iE)LHrfZG"
    dict_0 = {str_0: str_0, str_0: bool_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    bytes_0 = b"\xc5}pO\xc5\xd9\x1ap%\x92\xe4f"
    list_0 = [bytes_0]
    list_1 = [list_0, bytes_0, bytes_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    float_0 = -2266.9404
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    float_0 = -5895.81
    bool_0 = False
    tuple_0 = (float_0, bool_0, float_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    bytes_0 = b"\x82\x89\xc0Sj\xb07#\r>^\xb7\xfb\x9a2"
    object_0 = module_1.object()
    module_0.get_new_command(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    bytes_0 = b"N\xbf\x05|\x98\xe3\xe7\\\xdc\xfd\xae\x00\x92v1\xfd\xf0\xf4%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    float_0 = 6842.8377
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    str_0 = ",i`6<lCfLVw/?1F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_1037():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1038():
    bytes_0 = b"\xd3<\xf5"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    int_0 = -2239
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    bytes_0 = b"\xb7s\x85\xf5e\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    int_0 = 1237
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    str_0 = "L/p\rP0m&O8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    str_0 = " J5\x0c:<T_Z\n~a%Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    str_0 = ">tSSq^#\n0\t=2F;Qz7"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    int_0 = -2558
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    float_0 = 1335.544
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    bytes_0 = b"\xdee(\x03u\xa3\xfe1\xfd\xddb\xad"
    none_type_0 = None
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    str_0 = "\x0cZ6';g2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    str_0 = "%IjPX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    dict_0 = {}
    bytes_0 = b"\x06\x87\x92\x1f\xacK\x1d\xbd\xceB"
    bool_0 = False
    tuple_0 = (dict_0, bytes_0, dict_0, bool_0)
    list_0 = [tuple_0, dict_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    int_0 = 728
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    bytes_0 = b""
    str_0 = "1fiCwqd q\x0b`uy>$NfY"
    bool_0 = True
    str_1 = "*,}\x0bRmg}Jw#~zr6A(:"
    tuple_0 = (bytes_0, str_0, bool_0, str_1)
    module_0.match(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    float_0 = -1261.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    str_0 = "*.d 8'c[Q"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    str_0 = "9w|w`x/YgyQ;"
    set_0 = {str_0}
    bool_0 = False
    tuple_0 = (set_0, set_0, bool_0)
    bool_1 = True
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    int_0 = 1364
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    int_0 = 2649
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    bytes_0 = b"\xfd\xac\x8d\t\xfc\xd8\x86\xd1\x8b\x0cM"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    int_0 = 2308
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    str_0 = "q[<Hs,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    bytes_0 = b"\x1ec\x88\xa43[U\xa1x! \x08U"
    module_0.match(bytes_0, bytes_0)


def test_case_1066():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1067():
    str_0 = "G"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    int_0 = 1218
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    bytes_0 = b"9\x94\xe2\x92\x19\xf3\xbc\xfc\x15}py\xfeb"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    int_0 = 916
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    str_0 = 'k(R|\t\rmr"|I\x0cZb{N2*z'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    int_0 = 960
    list_0 = [int_0, int_0]
    tuple_0 = (list_0, list_0, int_0)
    list_1 = [int_0, tuple_0, tuple_0]
    module_0.get_new_command(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    bytes_0 = b"\xdc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    float_0 = 5501.17225
    bytes_0 = b"]\xb3\x8b\xcauJ+"
    float_1 = -2112.105311
    dict_0 = {float_0: float_0, bytes_0: float_0, float_0: float_0, float_0: float_1}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    bytes_0 = b"@q\xc2j\x0bW\x8f\xa8\x80(\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    bytes_0 = b"\xa2\x01\x93 \xbc\x94\x84\xbf\x8e\x0e\x1f\xc3!:d\xa0\xd3}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    int_0 = 2569
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    int_0 = 407
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    bytes_0 = b"0\xb9\xb4\xa4\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    str_0 = "B&=2OuEue"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    bytes_0 = b"2wP\x02pS\xd10\xb1\xb3h\xdd\xcbZ\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    float_0 = -1177.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    float_0 = -2191.637
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    dict_1 = {float_0: dict_0, float_0: float_0}
    module_0.get_new_command(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    complex_0 = 2333.18 - 594.93556j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    float_0 = -2038.887706
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    int_0 = 5099
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    bytes_0 = b"ARSV\xba\xb6\xdf\x90 "
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    complex_0 = 1151 + 1833.7j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    bytes_0 = b"\x00+DT\xa1\x8d\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    list_0 = []
    str_0 = 'Rlq\rA65x8B"I%#z\t7D'
    tuple_0 = (list_0, str_0)
    list_1 = [tuple_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    float_0 = 1454.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    bytes_0 = b"\x9a\x0e\xc7\rC&\x99%\x10\x8f>\xedq\xf9C0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    str_0 = "g2e"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    int_0 = -361
    bool_0 = True
    int_1 = -2095
    tuple_0 = (int_0, bool_0, int_1, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    str_0 = "R`$Im!5[8;j`JhACk4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    bytes_0 = b"-\xb9u|Qo\xb4\xd4\x8e\xd2\x9e\x1c\x0f\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    float_0 = 1149.4
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    str_0 = "5Af@r|o0G'Got)pe!,"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    str_0 = "v<y-P,X<8\r6<a#aH\x0bN(O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    str_0 = "ot"
    list_0 = [str_0, str_0, str_0]
    str_1 = "y/~WC#"
    float_0 = -4095.0
    dict_0 = {str_0: list_0, str_0: str_0, str_0: list_0, str_1: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    str_0 = "j\x0ci+>ot'\\@{~'q=NR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    int_0 = -15
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    str_0 = 'Ia(A(]cB@i6c"tF)`'
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    int_0 = -1489
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    str_0 = "kH<:mk<':NZ"
    bytes_0 = b"/\x9bv\xfd!_:\xb3Q}\xa0M\x9fM"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    int_0 = -556
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    str_0 = "LJI`Wgm)#ya"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    bytes_0 = b"\xff%3\xab\x07\xc6\xd2\x1bG\xc6;\xa2\xa1\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    int_0 = 779
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    bytes_0 = b"`(Y\r\xe3X"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    bytes_0 = b"\xe1\x9b9\x81/\xf0\xe4\x19\xb3\x0e\xbf"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    bytes_0 = b"Y\xcf\x7fT\x1e\xf1\xbf\xf1\xab)\xfb\xb2\x8f\x9b\xaf\xe2\x8e\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    str_0 = "7~$?UGmHq:BL2!|"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: bool_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    bytes_0 = b"\xcc\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    bytes_0 = b"E0& b\xed\xbf\x98\xcaj\xf0!\xa0\x0c!,\xcd.\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    float_0 = -334.64
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    float_0 = 1143.1311
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    str_0 = '8{\t0TPR1 x@H".'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    bytes_0 = b"\x9dMoe\xad\xbar=RF\xcc\xf9"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    float_0 = 2664.53
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    str_0 = "|f-bHMHtE(ZTz"
    str_1 = "!~?VdDnKQ"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    bytes_0 = b"2\x9a\xbdC"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1139():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1140():
    float_0 = 3522.0
    module_0.get_new_command(float_0, float_0)


def test_case_1141():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1142():
    int_0 = -3191
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    bytes_0 = b"\xe0\n\xca\x93\x83.M\xcc)\xf6^\xd2\x89\x7f\xe3\xc9\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    str_0 = "Tv}S;(PXE/A}KF"
    module_0.get_new_command(str_0, str_0)


def test_case_1146():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1147():
    bytes_0 = b"\xc8\x8b\x85W\xa6V\xd4z6"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    dict_0 = {}
    float_0 = -840.58652
    list_0 = [dict_0, dict_0, dict_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    bytes_0 = b'"\x14\xf0\xe6\xca'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    str_0 = "jE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    str_0 = '}DY:eW|WE$~}yY0S"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    complex_0 = -1730 + 14.6537j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    none_type_0 = None
    bool_0 = False
    float_0 = 211.667
    list_0 = [bool_0]
    bytes_0 = b"\x14\xa5d\x08=\xee\xac9|\xd4r\x89\xcc\xa8L\x18q\x11"
    tuple_0 = (list_0, bytes_0)
    tuple_1 = (bool_0, float_0, float_0, tuple_0)
    module_0.get_new_command(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    float_0 = 761.8
    dict_0 = {}
    module_0.match(float_0, dict_0)


def test_case_1155():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


def test_case_1156():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1157():
    str_0 = "W7\\)}\\O`EWN2e7P*2q\t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    none_type_0 = None
    int_0 = 429
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    str_0 = "+yKF4mz2o<Y\tJ4}h["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    int_0 = 1228
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    str_0 = "r\\hal"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    bytes_0 = b"\x16\xf56$\xd9J\xc2\x92\xba\xab\x84\x05\x95"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    bytes_0 = b"\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    float_0 = 1087.03
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_1168():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1169():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    str_0 = "y78~EX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    int_0 = 1044
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    bytes_0 = b"T%@\xc4\x8f\x86J\xf1\xd2\x8fI\x0f\x1a\xa7\x8c\xf32"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    bytes_0 = b"\xe6\xadnb\x83\x96%\xa95L\x8b:\x02L\xe0"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    bytes_0 = b"\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    str_0 = "'[<lROo0oxue"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    str_0 = "OznSC<wz[X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    bytes_0 = b"\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    str_0 = "L%)TA9K+JpX=M0(sOW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_1184():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1185():
    bytes_0 = b"\x85\xaa\x1b\x06\x87\x96\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    int_0 = -1841
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    float_0 = -2387.2575
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    float_0 = -543.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    int_0 = 295
    set_0 = set()
    tuple_0 = (int_0, set_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    bytes_0 = b"\xae\x99\xecd\xd0`Y_y-\x8e6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    bytes_0 = b"\x1f\x9c\x19\x1f\x8f1\x86!\x9a\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    bytes_0 = b"\xec\\\x96\xc1W\x17"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bytes_0 = b"\x9f\x1a\xf2\x02Pt\x16\xde\x02\xb5\xca\xdbzr\x0b\x9fb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    float_0 = -1451.392
    int_0 = 2690
    list_0 = [float_0, int_0]
    bool_0 = False
    set_0 = set()
    tuple_0 = (float_0, list_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    int_0 = -663
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    bytes_0 = b"H+\x1d\xdaG\x8f\x9d\x08\x08\xea(\xde\xea\xb1\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    dict_0 = {}
    list_0 = [dict_0]
    list_1 = [dict_0, list_0, list_0, dict_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    bytes_0 = (
        b"\xf8\x18\xc1\xee\xb9\x1e\xd3\x1a\xd8\xaa\xbf\x83\x94\x81\t\xd2\xe4\x03\x0b"
    )
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    int_0 = -1251
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    complex_0 = 928.3544 + 2049.041j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    bytes_0 = b"\x1a\x16,eR \xfa\xb9i\xaf\x98\xed\xbd\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    str_0 = ".)s\t*fIxhk9.-"
    str_1 = "<;c^&xQq"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    float_0 = -2700.00919
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    str_0 = "|\x0c\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    int_0 = 1428
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    int_0 = 2263
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, int_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    int_0 = -1629
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    object_0 = module_1.object()
    bytes_0 = b"\xae(\xfahJc0\x1dA!e\x90\xcc"
    set_0 = {object_0, object_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    bool_0 = True
    int_0 = 549
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    tuple_0 = ()
    bool_0 = False
    dict_0 = {tuple_0: tuple_0, tuple_0: bool_0, tuple_0: bool_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    str_0 = "\\@D:78:y!\x0b"
    module_0.match(str_0, str_0)


def test_case_1216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1217():
    list_0 = []
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    float_0 = 2061.852175
    module_0.match(float_0, float_0)


def test_case_1219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1220():
    complex_0 = -2262 + 1071j
    bool_0 = True
    tuple_0 = (complex_0, bool_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    bytes_0 = b"\xb2\xd1\x97A\xecI\x9b\x93^\xf5B\xe3\xd8\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    complex_0 = 55.88 + 659.6936j
    float_0 = 76.6365
    module_0.match(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    int_0 = -2578
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    int_0 = 3560
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    int_0 = -2191
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


def test_case_1228():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1229():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    float_0 = 1037.794
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    int_0 = 1022
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    complex_0 = 4739.1 - 2197.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    int_0 = -1925
    str_0 = '5" $zp9u'
    dict_0 = {int_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    bool_0 = False
    complex_0 = 1881.4 + 922.93j
    dict_0 = {complex_0: complex_0}
    tuple_0 = (bool_0, complex_0, dict_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    float_0 = -791.82
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    bytes_0 = b"\xbc\x01Q\xb7\xf2`mN\xe6\x810\xe7\xf8\xf6H"
    int_0 = -1785
    tuple_0 = (bytes_0, int_0)
    tuple_1 = (tuple_0,)
    int_1 = -2996
    module_0.get_new_command(tuple_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    int_0 = 1138
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    int_0 = -393
    module_0.match(int_0, int_0)


def test_case_1241():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1242():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    int_0 = 2417
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    float_0 = 642.1912
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    list_0 = []
    bytes_0 = b"M8\xc10'\x13\x1a\xc8\xd9\x08\xfd"
    float_0 = 3906.0
    int_0 = -142
    float_1 = -260.0
    tuple_0 = (int_0, int_0, float_1)
    tuple_1 = (list_0, bytes_0, float_0, tuple_0)
    list_1 = [tuple_1]
    bool_0 = True
    tuple_2 = (list_1, bool_0)
    module_0.get_new_command(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    str_0 = '.QCLMx\x0b^"\r'
    int_0 = -846
    set_0 = {str_0, int_0, str_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    dict_0 = {}
    int_0 = 1230
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    complex_0 = 1328.8319 + 3427.1612j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    int_0 = 1413
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    int_0 = 2586
    tuple_0 = (int_0,)
    str_0 = ""
    set_0 = {tuple_0, int_0, int_0, str_0}
    tuple_1 = (tuple_0, set_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    float_0 = -1926.0
    dict_0 = {}
    bytes_0 = b")\xc3\xb6\x06oo"
    list_0 = [dict_0, dict_0, bytes_0, dict_0]
    tuple_0 = (float_0, dict_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    bytes_0 = b'\xaf"\xdb\xd2J\xc5'
    module_0.match(bytes_0, bytes_0)


def test_case_1254():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1255():
    str_0 = "+M\tFcz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    object_0 = module_1.object()
    int_0 = 266
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    int_0 = 1689
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    int_0 = -3745
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bytes_0 = b"\x8b-@\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    str_0 = "z#DcV5"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    str_0 = "+wg"
    str_1 = "VZ;7!KR=W:"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
    module_0.match(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    str_0 = "_1d!BL/MGo3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    bytes_0 = b"9\xb45\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    bytes_0 = b"\x1e\x1d\xfd\xb3t\xbbh\xc6g\xdc\x1f\xca\xd85\xbc\xea8D$\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    str_0 = "f1{7a;J?}"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    bytes_0 = b"t"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    float_0 = 487.3473
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    float_0 = 2529.17027
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    int_0 = 1127
    set_0 = {int_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    str_0 = ";^o8>G~"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    str_0 = "eY~2y\\BrRr"
    tuple_0 = ()
    set_0 = {str_0, str_0, tuple_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    float_0 = 1842.385324
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    int_0 = 1307
    module_0.match(int_0, int_0)


def test_case_1277():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1278():
    bytes_0 = b"6\x96\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    str_0 = "o'(DQmF??x[7"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    complex_0 = -1833.86 + 568.0232j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    int_0 = 1711
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    int_0 = 2407
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    bytes_0 = b"8U0\xe3e\xde\x1cdT\xb9\x10\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    str_0 = ">TD)?}PI"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    bytes_0 = b"k\x97i\xab\xe1\x00t\xfa\xb4\xc0}rhJ~\x19"
    set_0 = set()
    list_0 = []
    tuple_0 = (bytes_0, set_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    str_0 = "\\[C_OVl 7"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    int_0 = -2506
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    int_0 = -1531
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    bytes_0 = b"\xe26\x81\xd7\x0f\x15\x11b\xffi\xfb\x01\x07\xe6\x14E\xe6\xa5%"
    str_0 = "H"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    int_0 = -1860
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1293():
    object_0 = module_1.object()


def test_case_1294():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1295():
    bool_0 = False
    str_0 = ""
    tuple_0 = (bool_0, bool_0, str_0)
    module_0.match(tuple_0, tuple_0)


def test_case_1296():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1297():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    complex_0 = 35.90917 + 1748j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    int_0 = -1431
    int_1 = -1962
    set_0 = {int_0, int_0}
    tuple_0 = (int_0, int_1, set_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    float_0 = 1566.883822
    module_0.match(float_0, float_0)


def test_case_1302():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1303():
    str_0 = "=jHK{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    bytes_0 = b"\x18n\xe0\xabC\xc1\xb9\xa4\xd0/Ie\xb5L\x86\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    str_0 = ']\x0cI9\n\x0c\x0c|-TbaUe["'
    list_0 = [str_0, str_0]
    float_0 = 1948.15678
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    str_0 = "iew<Tp%KC)U=>t0fqR"
    bool_0 = False
    str_1 = "x(|4>\x0b68#/X{lT)hRj@"
    tuple_0 = (str_0, bool_0, str_1)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    str_0 = "d-h!5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    bool_0 = True
    bytes_0 = b"\xa0z\x1e\xda-F\xd2\xfd\xfc"
    float_0 = 2020.6
    str_0 = "?<H2*.5,WH^Q]dRy'"
    tuple_0 = (bytes_0, float_0, bytes_0, str_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    int_0 = 1884
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    int_0 = -4128
    module_0.get_new_command(int_0, int_0)


def test_case_1313():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1314():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    float_0 = 627.0543
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    int_0 = -2641
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    bytes_0 = b">\xea\xc2"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    float_0 = 560.738
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    bytes_0 = b"%_\xb1\x8d\x08\xce\xf3\x8c\x8b\x1f*\xea\xa4(Q\n\xf1"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_1322():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1323():
    int_0 = -924
    module_0.get_new_command(int_0, int_0)


def test_case_1324():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1325():
    bytes_0 = b"\xdd\xa4\xdd\xad\xc8\xff\x00$$"
    list_0 = [bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    bytes_0 = b"\xdd\xaf\xf6\xa3^\x03\xd0\x1d\x1e\x03W\x9e\xbf\x07Z("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    set_0 = set()
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    int_0 = 4765
    module_0.match(int_0, int_0)


def test_case_1330():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1331():
    float_0 = -823.8
    int_0 = 2590
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    int_0 = 3494
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    str_0 = "{#wG;<?JY"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    bytes_0 = b"\xd9]\xef,\x9e\xc3[@\xdd7\xe8\xdc\x0b\xd1'\xf9H\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    bytes_0 = b"\xe5j\x0fU{\xb2\xc1\xd7W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    bytes_0 = b'\x89\x1f\xbc\xf5\x98"\xf0\x89\x9f'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    bytes_0 = b"\xe2/\xe9\x16\x89\x96\x80\xf3fL\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    int_0 = -3549
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    int_0 = -1287
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    int_0 = -1779
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    bytes_0 = b"\x880\x8d\xbf\x19\x962\xd7D\x18\xa9u)\x011n4"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    str_0 = 'c-!:"HaB'
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_1343():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1344():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    int_0 = 703
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    int_0 = -2616
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    bytes_0 = b"C-\xe6.A\x90\x0f\xd6XUP\x18"
    bytes_1 = b"?\xc2\xd0\xf2d4f7\x88\xe4~"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    none_type_0 = None
    int_0 = 4260
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    str_0 = ".!jW0# e@>"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    float_0 = 260.784857
    float_1 = -801.95
    list_0 = [float_0, float_1, float_1]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    int_0 = 1088
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    str_0 = "/L~w0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    bytes_0 = b"\xaf\xe8(\x0f\xf1\x91\xa0\xa9\x0fr"
    bool_0 = False
    int_0 = -1810
    tuple_0 = (bytes_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    str_0 = "xjh%P49_Z%`6s\x0bt\\(0/1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    str_0 = "BBWd!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    float_0 = -2970.84441
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    int_0 = -1915
    module_0.match(int_0, int_0)


def test_case_1358():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1359():
    bool_0 = False
    int_0 = 1425
    list_0 = [bool_0, bool_0, int_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    bytes_0 = b"\xd7\x9c*\x0ef\xd6\x18\xaa`\x07\x1c\x96\x1d\xb2dhz\xb4*"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    str_0 = "yC=~E\\$\rV\rfaE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    bytes_0 = b"@\xe7\x9f\x9e\xb8\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    int_0 = 338
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    str_0 = "I9Y!\tWd[Xkn.[fuY)\\"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    bytes_0 = b"S\x8a:\x97\x9f{\x8bhv@2O8E\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    int_0 = 1645
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    complex_0 = -1605.41517 - 1235.1031j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    str_0 = "a3X $`mm\x0bDu\x0cP"
    str_1 = "3Eom'@{d/<^"
    dict_0 = {str_1: str_1}
    tuple_0 = (str_0, str_1, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    int_0 = 2569
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    int_0 = 4517
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    str_0 = ":drWKG4(&X>-Z*i]-TC/"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    none_type_0 = None
    list_0 = [none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    str_0 = "46mhe-/"
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, str_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    int_0 = 1086
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    int_0 = -1682
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    float_0 = -4760.074
    bool_0 = False
    int_0 = -4185
    tuple_0 = (float_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0]
    tuple_0 = (set_0, set_0)
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    int_0 = 1184
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    bool_0 = True
    float_0 = 1158.628
    bytes_0 = b"\xecn\xe4\x9e\xb3\xfbY{)D\x96\xe9|\x84\xbex\xee\x97"
    dict_0 = {bool_0: float_0, bytes_0: bytes_0, bytes_0: float_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, float_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1385():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1386():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    str_0 = "\t"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    str_0 = "G4"
    bool_0 = True
    str_1 = "Q(X34"
    str_2 = "y{$J7awm"
    str_3 = "4@Q,7\t2"
    dict_0 = {str_0: bool_0, str_1: str_0, str_2: str_3}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    bytes_0 = b"\xc3gC\xba?\xe7\x91C\xae\xc2\x16-\xfa\xb6N\xbe\x8e"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0, tuple_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    bool_0 = False
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    int_0 = 1647
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    int_0 = 379
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    float_0 = 2027.9
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    float_0 = -2837.3689
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    bytes_0 = b"'\xfe\xa7\xbd\x10vR]\x89\xd5\x0b\xb7p\xbf\xb7\xae\xace\xc2"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    float_0 = 895.534
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    int_0 = -771
    str_0 = ")2g"
    tuple_0 = (int_0, str_0, str_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    bool_0 = True
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    str_0 = "*D?;B^kTV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    float_0 = 666.325
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    str_0 = "[_2Z?z2\\gcZvLE-i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    complex_0 = 1299.23109 + 141.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    bytes_0 = b"\x86\x9bw"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    bytes_0 = b"\x8c\xce\xc8J\xd4\xb6\x04A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    int_0 = -1500
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    float_0 = -1433.62
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    float_0 = -1714.5719
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    complex_0 = -1794.1 + 1680.551j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    bytes_0 = b"bN\xbc\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    int_0 = 126
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    str_0 = "q&L\rq^bJ;.|*e"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    float_0 = 2703.09363
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    int_0 = -1238
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    str_0 = "+{z:BGDW$"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_1418():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1419():
    bytes_0 = b"Z\xa0yE\x125\x7fe\x1bQ)}\x93\xd9\xa3\rA"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    complex_0 = 1429 + 637.02j
    dict_0 = {complex_0: complex_0}
    bool_0 = True
    str_0 = "TLVi\tr>C"
    tuple_0 = (dict_0, bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    bytes_0 = b"#!\x81lj\xedG\xb1\x98\xcd\xcbs,\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    float_0 = -3013.9866
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    float_0 = 452.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    bytes_0 = b"Q!\x14\x8b:8Eb\t\xc19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    bytes_0 = b"\x81ZG\x99~\xfe;\x91\xabW"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_1428():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1429():
    int_0 = 943
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    int_0 = 1340
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    str_0 = ":8aXL9ulSe&M<(S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    int_0 = -4495
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    bytes_0 = b"!r\x9f\xd5\x90\xed\xc8\xbf\xc4\xc8\xce\x82o\xfe\x17|@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    float_0 = 4357.74284
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    float_0 = -2999.1972
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    int_0 = 1585
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    bytes_0 = b"cP\xec\xe3!\xd27\x0c\xe3\xf0\x03\xa13g"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    float_0 = -1709.85374
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    bytes_0 = b"\xd1\xc6\xf5c\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    bool_0 = False
    bool_1 = True
    bytes_0 = b"#\xe4\xea\xba\xf9"
    object_0 = module_1.object()
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bytes_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    str_0 = 'S1#3![)\x0cT"'
    bytes_0 = b"\x848"
    tuple_0 = (str_0, bytes_0)
    dict_0 = {tuple_0: bytes_0, bytes_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    bytes_0 = b"\xect\xc5\x9eQ\xa5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    str_0 = ":`M-UR\x0c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    int_0 = 939
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    int_0 = -890
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    float_0 = -666.76535
    dict_0 = {float_0: float_0}
    module_1.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bytes_0 = b"\x19\xc2\xec\\u\x86Q\xde\xf9"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    float_0 = 6334.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    complex_0 = -1468 - 2085.805271j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    float_0 = 811.1976
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    bytes_0 = b"\x10\xc5\x83\xc0O\xff\x82\x98\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    int_0 = -188
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    str_0 = "Ea`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    none_type_0 = None
    str_0 = "<Q+"
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    bytes_0 = b"\x07\xc2r@\xfb\xe3a9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    int_0 = -2242
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    float_0 = 2725.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    str_0 = "\\f<u\nUIo\tWu6ox"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    str_0 = "$r4wC-<%.k`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    int_0 = 1296
    str_0 = "~mn7"
    set_0 = {int_0}
    tuple_0 = (int_0, str_0, set_0, int_0)
    int_1 = -683
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    bytes_0 = b"\xf8@?\xa6\xaa \xfc\xb8\xa8Wa\xf4\xb8\xf8\x84b4\xfb6;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    bytes_0 = b"A \xbb\xa7N\xb4\xaf_%\x97\x1e\x85%\x1d@\xbd\xe7\x16"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    int_0 = -870
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    list_0 = []
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    float_0 = 3636.2
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    str_0 = "G7q6In"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    int_0 = 1165
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    float_0 = 2292.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    int_0 = -1038
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    int_0 = 285
    str_0 = "A\r8oz8R<\x0cY:\nN9+1]\r"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    str_0 = "z3Br8`J]SX$"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bytes_0 = b"\x15VF\xaf\xc8\xa2j\xef"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    int_0 = -1428
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    none_type_0 = None
    int_0 = 2752
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    complex_0 = -1976.3 + 1072.23j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    str_0 = 'd"TRvZ~@KdYm1'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    str_0 = "3nlT$x+&:c~o"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    int_0 = 1728
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    bool_0 = True
    int_0 = -2541
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    set_0 = set()
    list_0 = []
    tuple_0 = (set_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    float_0 = -1579.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    bool_0 = False
    float_0 = 127.975
    list_0 = [float_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    int_0 = -3466
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, set_0, set_0]
    float_0 = 269.0
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    bytes_0 = b"H\x970\xed\x97"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = "-#xIr3b<{MJpz3Ge"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    float_0 = 601.777873
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    str_0 = ""
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    str_0 = 'Ipy|lmlJa]"[?1g0wB'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    set_0 = set()
    dict_0 = {}
    tuple_0 = (set_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    int_0 = 683
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    float_0 = -718.034
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    bytes_0 = b"\xa2\xa4\x9b\xad\xb7\x8f"
    complex_0 = -270.5 - 1348.821j
    set_0 = {bytes_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    int_0 = -1536
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    int_0 = 601
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    bytes_0 = b"\xad\xfa\xc8\xcf\x97\xb2|r`/\xf7\xeb\xa5\x06\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    str_0 = "k qq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    str_0 = 'Mww@?\x0c\x0bUR"7A`u'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    int_0 = 2490
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    int_0 = 1963
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    float_0 = -514.82
    tuple_0 = (float_0, float_0, float_0)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    object_0 = module_1.object()
    set_0 = {float_0, object_0, tuple_0}
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    complex_0 = 96.44 - 1321.82j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    bytes_0 = b'\x86&\xe3M\xf7\xc4\x99"'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1512():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1513():
    str_0 = "+so7#t\x0bEymG\x0ci"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    bytes_0 = b"Z\xe5\xfe\x16\xbbO\xcf\xf9\x87\xe9\xf8\x1c'\xfa\x12\n\x90"
    module_0.match(bytes_0, bytes_0)


def test_case_1515():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1516():
    int_0 = -3809
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    float_0 = 733.576
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    none_type_0 = None
    float_0 = 2226.258
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    float_0 = -174.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    bytes_0 = b"N\x94\x82dn\x96\x82\xb7\xd1\x1d\xee\x0f|7\xf5\\\xbe"
    module_0.match(bytes_0, bytes_0)


def test_case_1523():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1524():
    str_0 = ";hb%ecf}\x0b-s%as?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    str_0 = "4"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    str_0 = "!tBv5'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    str_0 = "2s&\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    str_0 = "'\"<? 3f$}`dTo"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    int_0 = 173
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    float_0 = -1260.612
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    bytes_0 = b"\xc3\xc6\x04\x85"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    int_0 = 3783
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    int_0 = 1062
    module_0.match(int_0, int_0)


def test_case_1534():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    str_0 = "uN9wH9&\t`e;Lp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    bytes_0 = b"5\\\xdf\x8fYu\x98\xaba\x9d\xde\xa9r"
    int_0 = 1979
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    str_0 = "TL0\x0cI.Cy.qw\n!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    float_0 = -15.61
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    bool_0 = False
    float_0 = -1548.90569
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_1547():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1548():
    set_0 = set()
    bytes_0 = b"h`\xc9\xf7\x0c\xc7!\xa0'\xf1_\xbe\xe5\xcc"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    float_0 = 153.225
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    int_0 = -897
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    float_0 = 3937.912
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    bytes_0 = b"a\xfe\xa7\\\xc8\xbb&+\x89\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    bytes_0 = b"hqXq\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    int_0 = -1920
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    str_0 = "9u=T13'xV9fV+A{1T"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


def test_case_1557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1558():
    bytes_0 = b"\x80B\xe1\xc5\xf2\xe2\x13"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_1559():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1560():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    int_0 = 2981
    float_0 = 2978.12
    dict_0 = {int_0: int_0, int_0: int_0, int_0: float_0, float_0: int_0}
    tuple_0 = (int_0, float_0, dict_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    bytes_0 = b"\xd9\x91"
    bool_0 = True
    bool_1 = True
    list_0 = [bool_1]
    tuple_0 = (bytes_0, bool_0, bool_1, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    bytes_0 = b"\x11\xa0\x94\xfb\xdd\x88\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    str_0 = "?!PrY8[6Aau\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    str_0 = "dxTXBi#)]?LfF"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    float_0 = 23.680589
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    complex_0 = -41.840345 + 140.34875j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_1568():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1569():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    str_0 = "Z`H1io!A]u\x0c2]+\n9"
    float_0 = -23.52282
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    int_0 = -61
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, tuple_0)
    list_0 = [tuple_1]
    int_0 = 941
    dict_0 = {tuple_1: int_0}
    tuple_2 = (list_0, dict_0)
    module_0.get_new_command(tuple_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    int_0 = 1872
    object_0 = module_1.object()
    list_0 = [object_0, object_0, int_0, object_0]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    complex_0 = 2364.38 - 819.0699j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    float_0 = -1754.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bytes_0 = b"\xcc&g\x9e\xe0f`\x9cK"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = True
    tuple_0 = (set_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    str_0 = 'J:TW\rfmQy"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    float_0 = 1417.92
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    str_0 = "fFf"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bytes_0 = b"\xbc\x8f#\x99\xb8F\xc1\xfcD\xa0\xf5\x12x\xd8\xf4"
    float_0 = -295.06912
    list_0 = [bytes_0, bytes_0, float_0, float_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    bytes_0 = b"\x15\xe8C"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    float_0 = 4169.385525
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    str_0 = "&y%]\rYESL6Ca"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    bytes_0 = b"o\xb9\x88\xf9\xe0b<\xc8"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    int_0 = -1688
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    int_0 = 466
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    float_0 = -569.70349
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    float_0 = 2825.205348
    tuple_0 = (float_0, float_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    bytes_0 = b"\xe1\xe5\x16\x94\xc8"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    bytes_0 = b"\xb4\xc7&\xca\xd1O\xa1\xef?\xdc\x8dk\xdf\xba\xff\x89'\x94|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    bool_0 = False
    float_0 = 1548.5
    list_0 = [bool_0, float_0]
    tuple_0 = (bool_0, bool_0, float_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    float_0 = 422.365144
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    int_0 = -861
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    int_0 = -1394
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    str_0 = "B<r$'_}5u@'W$*n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    float_0 = 2424.733204
    module_0.match(float_0, float_0)


def test_case_1605():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1606():
    str_0 = "*V/'\t4<,?iVpHp~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    float_0 = 2325.1
    set_0 = {float_0, float_0, float_0}
    bytes_0 = b"\xda"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    int_0 = 412
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1610():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1611():
    float_0 = -521.042785
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    bytes_0 = b"\xef\xad\xe9\xbb`_\xab"
    int_0 = -537
    bool_0 = True
    complex_0 = -2759 + 4363.4j
    tuple_0 = (bytes_0, int_0, bool_0, complex_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    bool_0 = True
    int_0 = -543
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    str_0 = "{UuW(jCJRm]d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    str_0 = "fK<f"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    int_0 = 2118
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    str_0 = '*\rgbVmU?y_"'
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    str_0 = "\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    str_0 = "H"
    set_0 = set()
    tuple_0 = (str_0, str_0, str_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    str_0 = "JA\x0ceV"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    str_0 = "7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    float_0 = 3831.52
    bool_0 = True
    dict_0 = {float_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    complex_0 = 4270.5659 + 573j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    str_0 = "ihH8lwB/: a|>J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    int_0 = -1019
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    float_0 = 801.2
    set_0 = {float_0, float_0}
    bytes_0 = b"m\x94Ef\x028[\xa8\xef Z'z:\x00\xfd"
    tuple_0 = ()
    tuple_1 = (set_0, bytes_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    list_0 = [tuple_0, tuple_0, object_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    int_0 = 2158
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0, dict_0, dict_0, int_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    int_0 = 1558
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    float_0 = 2884.0
    list_0 = [float_0]
    str_0 = "ycu/Y"
    tuple_0 = ()
    dict_0 = {str_0: tuple_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    list_0 = []
    str_0 = "[15_:99"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


def test_case_1634():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1635():
    str_0 = "p3!cmr4U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    int_0 = 1857
    dict_0 = {int_0: bool_0, bool_0: list_0, bool_0: list_0}
    list_1 = [list_0, list_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    list_0 = []
    tuple_0 = ()
    module_1.object(*list_0, **tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    int_0 = 936
    bytes_0 = b"\x9b\xd7\x1c\xaeV\x05o\xa9\x97Xh\x98+"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    int_0 = 31
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    float_0 = -605.598518
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    none_type_0 = None
    str_0 = "$:RJ-B_K5N'PB*K"
    str_1 = "\\zIojY~2&kZ/*q\\"
    str_2 = "/i2.zdbFK\rQ(RTf0O%|N"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    int_0 = -59
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    float_0 = -1603.7696
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    int_0 = 2706
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    float_0 = -1052.5
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    int_0 = -1444
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    float_0 = -2296.725
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    int_0 = 430
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    float_0 = -1097.19
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    bool_0 = True
    int_0 = -1151
    dict_0 = {bool_0: int_0, int_0: bool_0, int_0: int_0}
    tuple_0 = (bool_0, dict_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    str_0 = "f*["
    set_0 = {str_0}
    complex_0 = -510.8514 - 155.4j
    tuple_0 = (str_0, set_0, complex_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    bytes_0 = b"\xbf7\xf1\xdf\xcfH\x0e.\xf7\x0e\x18\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    int_0 = -2249
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    int_0 = -2806
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    complex_0 = 472.1 - 1609.386j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    list_0 = [set_0, set_0, set_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    float_0 = -3413.4803
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    str_0 = "N9<7tQ]&xr&;Q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (tuple_0, list_0, list_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    float_0 = -2469.7
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    float_0 = 1716.805
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_1664():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1665():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    str_0 = ","
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    int_0 = -1580
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    int_0 = 158
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    float_0 = 685.023068
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    bytes_0 = b"r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    bytes_0 = b"\xd8\x0c\xc6"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    str_0 = "s[kq(vT5$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    int_0 = -1209
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    complex_0 = 449.68 + 844j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    bytes_0 = b"\xf9\xc2\x86f~\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    str_0 = '<o"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    str_0 = ";T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    bytes_0 = b"L\x0b\xbc\x9e\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    bool_0 = True
    str_0 = ""
    object_0 = module_1.object()
    set_0 = {object_0, object_0, bool_0}
    tuple_0 = (str_0, object_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    bytes_0 = b""
    int_0 = 1126
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    str_0 = "\\9:T\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    int_0 = -43
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    bytes_0 = b"\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    str_0 = "}q3V~"
    complex_0 = 848.012778 + 2782.31963j
    list_0 = [str_0, str_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    complex_0 = -579.481 + 440.20134j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    int_0 = 2662
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    bytes_0 = b"X\xad?X&z\xc1\x1d\xfa\xef!\xbe(\xdd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    bytes_0 = b"\xce\x12\xc1\xf5\x104\x88\t\x17\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    str_0 = "&Y_w*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    bytes_0 = b"\x89\xfe\xf4|\x97|Y\x0c@/\x1aKIU\x8f\xe3\xb4\xc1"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    set_0 = set()
    str_0 = ""
    int_0 = 2605
    tuple_0 = (set_0, str_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1695():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1696():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    int_0 = -4039
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    str_0 = "Nc\x0c=Qt"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    float_0 = 1374.204
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    bytes_0 = b'f"\xa0\x7f\x0bL\xdc\xaa|\xc2\x00'
    bool_0 = False
    list_0 = [bytes_0, bytes_0, bool_0, bool_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bytes_0 = b"\xcc\x95m\xe1r\xe4\xbc\x87\xec\x0fu\x91"
    bytes_1 = b"F\xe7Y\xd1\xa1\xb6"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    int_0 = 4704
    module_0.match(int_0, int_0)


def test_case_1703():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1704():
    float_0 = -3999.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    bytes_0 = b"%,\xd9h\xef\xd7\r\x7f\xacD\xa9\xaf\xc0\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    str_0 = "[c$7xm~VHa>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    str_0 = "K;.\x0bplg4/'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    bytes_0 = b"5\x0f\xc4\xbb\x17\xbd\x93\xb0B"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1709():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1710():
    int_0 = 1536
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    bytes_0 = b"P\xfe\x88\xac\xe1y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    str_0 = "FN_3\nK"
    module_0.match(str_0, str_0)


def test_case_1713():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    float_0 = -1216.124
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_1715():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1716():
    complex_0 = -955.418153 + 1309.89j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    str_0 = "z}f\x0blp#i&qN0}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    tuple_0 = ()
    set_0 = {tuple_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    bool_0 = False
    int_0 = -5279
    dict_0 = {bool_0: int_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    str_0 = "CA\t\x0bg9JWArteW"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1723():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    bytes_0 = b"\xfc\xad\x9a\x88\xcb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    str_0 = "WL#a{sT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    str_0 = "dph"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_1727():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1728():
    bytes_0 = b"C"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = True
    tuple_0 = (dict_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    str_0 = "UE("
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    float_0 = 1234.85
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    int_0 = 56
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    str_0 = "@)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    str_0 = "lh;l"
    module_0.get_new_command(str_0, str_0)


def test_case_1736():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1737():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    int_0 = 400
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bytes_0 = b"1\xee\xcc#&\xf3\x06f\x1d{S"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    str_0 = "A`;/_&S\x0b)e!):R\x0cJ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    str_0 = '|e m"dJgw! 4'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    int_0 = -491
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    float_0 = 3582.1641
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    object_0 = module_1.object()
    bool_0 = True
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    float_0 = -82.879
    bool_0 = False
    str_0 = "O"
    tuple_0 = (float_0, float_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    bytes_0 = b"\x86K\xa3\x1f)\x9e\xe7l\xab\x12v\xf6/"
    bool_0 = False
    list_0 = [bytes_0, bytes_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    bytes_0 = b"\x18>>+\x84\xda\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    complex_0 = -896.4187 - 3653.4476j
    tuple_0 = (complex_0,)
    dict_0 = {tuple_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    bytes_0 = b"\xc1\x8fF\x86\x9a\xa2\x98\xc05\x89\xea\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    str_0 = "z0\r0Mra;ofM'Hv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    bytes_0 = b"S\xa3}\xb8@\x14\xee\x8a\xe3}Nm\xd0\xec"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    str_0 = "6Wa"
    bool_0 = True
    dict_0 = {str_0: bool_0, bool_0: bool_0, str_0: bool_0}
    module_0.match(dict_0, str_0)


def test_case_1758():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1759():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    str_0 = "srv@5\rI6iaO,8\rcK7 X"
    list_0 = [str_0, str_0]
    tuple_0 = (str_0, list_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    float_0 = -2.96141
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    bytes_0 = b"\xcb"
    bytes_1 = b""
    dict_0 = {bytes_0: bytes_0, bytes_1: bytes_1}
    module_0.get_new_command(dict_0, dict_0)


def test_case_1764():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1765():
    complex_0 = -900.3274 - 3988j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    float_0 = -446.29
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    int_0 = -1228
    float_0 = 1902.85
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    int_0 = -251
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    bytes_0 = b'Y\xa6"\x8dd\xbe\xf5J\x97\xc9'
    list_0 = [bytes_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    int_0 = 1576
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    float_0 = -962.95836
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    int_0 = 545
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    float_0 = -379.0008
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    int_0 = 985
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


def test_case_1778():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1779():
    int_0 = -1326
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    float_0 = -2168.7942
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    float_0 = -1533.615
    list_0 = [float_0]
    bytes_0 = b"&\xb8:b\xf2\xbe\x12\xaag\xe3\xcbT\xb2\xac+Mv/"
    str_0 = "j/B<9l"
    tuple_0 = (bytes_0, str_0, list_0)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    float_0 = 683.436876
    object_0 = module_1.object()
    module_0.match(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    list_0 = []
    bool_0 = True
    list_1 = [list_0, bool_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    complex_0 = 1376.4 + 2941.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    bytes_0 = b"\x89IIO\xa5n\x0f\x0bh\xf8\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    float_0 = -1345.788
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_1787():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1788():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_1790():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1791():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    float_0 = -3685.17
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    int_0 = -1399
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    int_0 = -2109
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    str_0 = '\\_]l"#M@w!\\N&o2Xkvi\\'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    str_0 = "G\x0c"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    str_0 = "M.I^H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    bytes_0 = b"\x8aya\xf9\xbd."
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    int_0 = 306
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    str_0 = 'h&V|~h:2[Y6`+:x,\n"'
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    int_0 = -4138
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    complex_0 = -38.43331 + 5957.21j
    module_0.match(complex_0, complex_0)


def test_case_1803():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1804():
    bytes_0 = b"\x99\x06\xf6\x17T"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    str_0 = ":,;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    int_0 = 2173
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    bytes_0 = b"4j"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    str_0 = "T`"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    str_0 = "h_E:hJP)]9}g9M"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    int_0 = 1086
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    bytes_0 = b"\x99\xa2\xa0\x0b\xbdj\x07\x13!\x14\xb3\xb7V\xbf*\x95\x13,\xf0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    int_0 = 873
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    int_0 = -1752
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    int_0 = 1342
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    str_0 = "qlNz>SY@e+\\4U#oc8p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    str_0 = "Sl#4#{w+N;m-INhT"
    str_1 = "$'KrX9S8^XGw:Z\te"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    bytes_0 = b"3\x8f\xd5\xad\xb6\x0ejq\x04\x0e[5\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    object_0 = module_1.object()
    float_0 = -4768.1885
    dict_0 = {
        object_0: object_0,
        object_0: float_0,
        object_0: float_0,
        object_0: float_0,
    }
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    bytes_0 = b"\x1c\x18\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1821():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1822():
    str_0 = "*jci="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    str_0 = "VObJ5V@[{F.=u O4~"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    float_0 = -876.0
    tuple_0 = (float_0,)
    set_0 = {tuple_0, float_0, float_0}
    str_0 = "na1;"
    dict_0 = {tuple_0: float_0, str_0: tuple_0, str_0: float_0, tuple_0: float_0}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    int_0 = -2624
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    int_0 = -1839
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    complex_0 = 631.81172 + 1565.488j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    float_0 = -3288.621349
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    int_0 = -125
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    bool_0 = True
    float_0 = -237.997
    dict_0 = {bool_0: float_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    float_0 = 707.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    bool_0 = True
    bytes_0 = b"\xd7\xb2\xda\xf4l\xb0\xc4\xe5g\xfe\xda\x85\x15\xba\x7f\x99\x1f["
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    bytes_0 = b"\xc6\x99\x83x\xc8\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    int_0 = 2591
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    bytes_0 = b"8\x98\xa0~y\xee\xfeG'\x14s\xbc\x87\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    float_0 = -1014.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    str_0 = "*OZFv0'vp`u{xS#_:;zk"
    str_1 = "Il?;Lz+"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    str_0 = "#E?l"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    complex_0 = 499.32052 - 1535.55078j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    int_0 = -811
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    str_0 = "0_cGsPi}a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    str_0 = "Ko@xm\ttPw/*Y//dgI9"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    int_0 = -868
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_1}
    tuple_0 = (bool_0, bool_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    int_0 = 1613
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


def test_case_1848():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1849():
    float_0 = 727.0
    module_0.match(float_0, float_0)


def test_case_1850():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1851():
    none_type_0 = None
    str_0 = "evA:I[\rz&{]u"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    float_0 = -1560.9448
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    str_0 = "Wj`2, \r#edfX'v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    str_0 = "vb.^;Xo?(^M.{:"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    bytes_0 = b"\x19\xac3\xbfp\x94\xd2\x82Zt\x9f\xbf\xd2\xa0\n\xcb\x99\xa3\x89\x1a"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    str_0 = "0N3I,g6JR1"
    bytes_0 = b"&\xcd\xe2\xad\xf0\xc2\xb0{\xc2p"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1859():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1860():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    complex_0 = -2016.178 + 477.893004j
    dict_0 = {}
    module_0.get_new_command(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    bytes_0 = b"\xd6eP\x9f\xe0\xc1GN{}\xc5\r\xf7\x8f?x\x91"
    list_0 = [bytes_0]
    float_0 = -2971.6095
    tuple_0 = (list_0, bytes_0, float_0, list_0)
    tuple_1 = (tuple_0, float_0, float_0)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    bool_0 = True
    int_0 = 4253
    list_0 = [bool_0, bool_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    bytes_0 = b"\xc4\x004 $6\x8f\x9bE\xa3w\x9ci\xaf"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = ()
    dict_0 = {tuple_0: bytes_0}
    tuple_1 = (set_0, tuple_0, dict_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    int_0 = -4082
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    int_0 = -2590
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    float_0 = 3817.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    complex_0 = -787.36195 - 2103.204071j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    set_0 = set()
    int_0 = -163
    tuple_0 = (set_0, int_0, set_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    str_0 = "C=$\n.#\t4<ht"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    int_0 = -345
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    int_0 = 620
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    complex_0 = 68.216628 - 1.78j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    bytes_0 = b"\xcfe\x1d\xebm\x8aI\xba\xa6o\xa1\x8b\xcb\x12\xbb}"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    int_0 = -1655
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    str_0 = "ODq?("
    module_0.get_new_command(str_0, str_0)


def test_case_1882():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1883():
    float_0 = -1308.951
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    float_0 = -1390.3
    int_0 = 1311
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    str_0 = "XPNOi@SGX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    complex_0 = 4905.7856 - 1438.212551j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    str_0 = "u|'C\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    str_0 = "p9^:H[W@$TQB'-D|+6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    bytes_0 = b"\xca\xda\xc7\xae\x0bD\x12\xa2VC\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    int_0 = -1428
    float_0 = 483.142
    str_0 = 'm\t"O R'
    tuple_0 = (float_0, float_0, str_0)
    list_0 = [int_0, tuple_0, int_0, float_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    str_0 = ";/!o4_D[{os#RA;;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    int_0 = 767
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    str_0 = "3g`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    int_0 = -419
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    float_0 = 2543.416
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    bytes_0 = b""
    object_0 = module_1.object(*bytes_0)
    dict_0 = {object_0: bytes_0, bytes_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    complex_0 = -375.833382 + 956.39j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    str_0 = "E;r\x0c+42"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    bytes_0 = b"U\xf0\xa3V\xdc\xa3\x1f\xf1\xf4J\xaf^\x8f*\xf8"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    int_0 = -1732
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    bytes_0 = b"zHlmg"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    int_0 = 1496
    float_0 = 834.1124
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    complex_0 = 555.894873 - 2293.38101j
    bytes_0 = b"w&\x04\xab\xd4R#8T\xa5\xfbz}\x8f\xf3"
    module_0.match(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    int_0 = 759
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    float_0 = 1986.0
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    str_0 = "5xQ`Y"
    dict_0 = {}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    str_0 = "[=mrD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    str_0 = "}o#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    bytes_0 = b"\x80\x977"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    str_0 = "\x0cVc_Fl2SFHrS|xi\nz-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    int_0 = 332
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    str_0 = "Z]k)?{a _Se:61"
    set_0 = {str_0, str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    int_0 = -187
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    bytes_0 = b"\xcc\x0b\xdb\xc2\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    bytes_0 = b"5\xf8\x89\xdeZ\xc1\xd2\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    float_0 = -1245.93265
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    bytes_0 = b"\xdd\x95\xa0\xf7RE\xe0\x9a\x1e}$"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    bool_0 = True
    set_0 = set()
    dict_0 = {bool_0: set_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    int_0 = -1901
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    complex_0 = -393.662426 + 1136j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    bytes_0 = b"\x1ea0+dt\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    list_0 = []
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_1936():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1937():
    str_0 = "h{g[Ay<?~_3I0s"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    bytes_0 = b"o\xbd\xe8rl(/\xfa\xd7\x0b\x87\\\xa9\x02\xad\x17)\xd7="
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


def test_case_1939():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1940():
    bytes_0 = b'p\xeb\x8d\x01;(\xb9\xd9\x03\x90"\xa7\xc6\xcc}\xc6G\xdb\x10\xd2'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    int_0 = -1636
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    float_0 = -403.223
    tuple_0 = (dict_0, bool_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    str_0 = "x`Z:5kSIak"
    bool_0 = True
    set_0 = {str_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    complex_0 = 322.751088 + 4264.6348j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    float_0 = 4183.04
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    str_0 = "5S3L@^(tma=JW\x0bIQe7\\"
    bool_0 = False
    dict_0 = {str_0: bool_0, bool_0: str_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    set_0 = set()
    module_0.get_new_command(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    object_0 = module_1.object()
    bool_0 = False
    set_0 = {object_0, object_0, bool_0}
    list_0 = [set_0, bool_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    bytes_0 = b"\x1d\xc7\xdf\x02\xa8=\xc6\xbb\x9a2\xedn\xaeN8\x8a\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    str_0 = "'0WRk:*PA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    set_0 = set()
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    object_0 = module_1.object()
    str_0 = "U!Kb9#$:yak%0_^='#Sj"
    set_0 = {object_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    str_0 = "G:$|_O"
    str_1 = "']X#%{I^"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    float_0 = -467.6
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    bytes_0 = b"\xdeT\x931"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    complex_0 = -342 - 1309.4j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    int_0 = -595
    bool_0 = True
    bool_1 = False
    tuple_0 = (int_0, bool_0, int_0, bool_1)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    bytes_0 = b"\x03\x9a]\x06Gg\x14\x95S\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    list_0 = []
    bool_0 = True
    list_1 = [list_0, list_0, bool_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    bytes_0 = b"\x88\xc3Q\x8e@L\n\xa2\x8b4\xfa~\xe2\x0b\xf2"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bytes_0 = b"O|\xb7\xca\x04$\xaa\xba\xa4Q?\xae\xb9kL"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    bytes_0 = b"\xe6j\xc9\xc7\x13-'\x91\xb3\xb4]f\x1c\x0e\xea\xfc\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    float_0 = 1757.23
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, float_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    bytes_0 = b"\x1e\x00=v\xa8O\x8b\xdb\xf4@\xeep6D\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    bytes_0 = b"\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    int_0 = 1472
    bytes_0 = b"\xed\xc7\xa6y\xd9W\x98~\xc51"
    bytes_1 = b"\x03:\xfe'\xc6(\xec\x91*J~\xdb/\xbb"
    bool_0 = False
    tuple_0 = (int_0, bytes_0, bytes_1, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    complex_0 = -986.4 - 1644.69388j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    str_0 = ""
    bytes_0 = b"\x04\xa7-\xfdY"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    bytes_0 = b"\xa6\xd9\xa5\xd4\x8d'#\xf5zX\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {object_0: object_0, bool_0: object_0, object_0: bool_0}
    module_0.get_new_command(object_0, dict_0)


def test_case_1970():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1971():
    bytes_0 = b"\x03\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    int_0 = 863
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    complex_0 = 2702.3 + 2536.383j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    complex_0 = 2898.17735 - 247.129134j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    complex_0 = 762 - 1807.0525j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    bytes_0 = b"\x86\xca6~uo\xde\xc0m\x9e)\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    int_0 = -1390
    module_0.get_new_command(int_0, int_0)


def test_case_1978():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1979():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1, bool_1)
    dict_0 = {tuple_0: bool_1, bool_1: bool_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    float_0 = -556.8677
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    float_0 = 4747.1
    object_0 = module_1.object()
    dict_0 = {float_0: object_0, float_0: float_0}
    tuple_0 = (float_0, dict_0)
    tuple_1 = (tuple_0, tuple_0, tuple_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    str_0 = "|2DI,$|F1*EKK\\w-D2x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    str_0 = 'FP`3p\\[|a\tGj"Fkoi'
    module_0.get_new_command(str_0, str_0)


def test_case_1984():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1985():
    bytes_0 = b"\x06\xeb\xe0\xa9\xa9+\x8c\xe71\x0e\xc5\xfd\x08X8"
    int_0 = 1160
    tuple_0 = (bytes_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    str_0 = "m<PI\"he\x0b[{B',,6\n]a\\["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    bytes_0 = b"\xe0\xef\x01v\xec\xe5J\xca2\xcd\xec\xcfE\xe3C\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    float_0 = -364.0139
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    complex_0 = -4245.686899 - 879.66557j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    str_0 = "eiUWUR "
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    complex_0 = 3103.73776 - 708j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    str_0 = "_|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    bytes_0 = b"\xbb\x98@"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


def test_case_1997():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1998():
    int_0 = 79
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    str_0 = "9K"
    int_0 = -2639
    dict_0 = {str_0: str_0, str_0: str_0, int_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2001():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2002():
    float_0 = 155.7319
    set_0 = {float_0}
    module_0.match(set_0, float_0)


def test_case_2003():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2004():
    float_0 = 1074.2749
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    float_0 = 1937.670398
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    int_0 = 1225
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    complex_0 = 755 - 1452.82j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    int_0 = -4227
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    str_0 = "&uL;"
    str_1 = ""
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    int_0 = -1656
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    bytes_0 = b'\x0e\xe5\x85\x14\xc5\x9e\xe9\xd9\x075\x17K\x0f\xaa\t"t1'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    str_0 = "\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    int_0 = 2331
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    int_0 = -574
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_2019():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2020():
    str_0 = "JSW%zoPwh"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    bytes_0 = b"\xfe@\xc6\x18\x01\xe1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    bytes_0 = b"}\xb0\x1ciW\xbe\xe0#\x17\xd3\x1c\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    str_0 = "StCx\tGdq8Wqa"
    str_1 = "(RcE)AjRWS"
    bool_0 = True
    str_2 = "Uhhwz"
    dict_0 = {str_0: str_0, str_1: bool_0, str_1: str_1, str_2: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    object_0 = module_1.object()
    str_0 = "("
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    int_0 = -120
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    int_0 = -4803
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [int_0, dict_0, dict_0]
    tuple_0 = (dict_0, list_0)
    list_1 = [tuple_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    int_0 = -4698
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    float_0 = 4742.09148
    dict_0 = {float_0: float_0, float_0: float_0}
    bytes_0 = b"\x03\xaf\x9e\xe6X\xc7\xda\xca\x9eQ\xb4l\xba\xeb"
    str_0 = "4"
    tuple_0 = (float_0, dict_0, bytes_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    bytes_0 = b"ceC\xe7\xb3\xdd\x97\xc1\x18\x99GP\x08\xf4\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    str_0 = "\t@?F\x0bl:QcJ?AB`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    int_0 = -483
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    int_0 = 501
    int_1 = 2670
    list_0 = [int_0, int_0, int_1, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    bytes_0 = b"]*P\xc5\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    int_0 = -2084
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    str_0 = "<FG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    str_0 = "c!|9);;|0#:]F5rD-"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    bytes_0 = b"\xe9\xff`\xbcT\x06\x0f<z^5\xfc\xa6\xe8\xf8g\x0b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    str_0 = "bLCec"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    bytes_0 = b"\xcd)\xbdv\xeaZ\x15\x19\xbdk"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    int_0 = 1072
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    bytes_0 = b"\xc6"
    int_0 = -81
    tuple_0 = (bytes_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    bytes_0 = b"\xf0\x00#2L\x93\xb4\xcfmX\xc9\xe6\r#"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bytes_0 = b"\xfc\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    str_0 = "w0Ids(ws| !lrQg&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    float_0 = 214.55
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    bytes_0 = b"\x89 \x0e\xf3\xdd\x94|\xcb6\xbb1X\xb62\xbf\xaf\x8a^Y\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    str_0 = "8[rWK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    str_0 = "M\x0b}Ym5"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    list_0 = []
    int_0 = 1265
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    float_0 = 749.1677
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    bytes_0 = b"#=\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    float_0 = 1629.58
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    int_0 = -380
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    float_0 = 1916.66191
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    int_0 = -2215
    dict_0 = {int_0: int_0}
    int_1 = 1923
    module_0.match(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    list_0 = []
    object_0 = module_1.object(*list_0)
    set_0 = {object_0}
    module_0.match(set_0, set_0)


def test_case_2060():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2061():
    bool_0 = False
    str_0 = ":"
    set_0 = {bool_0, bool_0, bool_0, str_0}
    module_0.match(set_0, bool_0)


def test_case_2062():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2063():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    float_0 = -205.7263
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    int_0 = -1023
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    str_0 = "&E+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    int_0 = -1080
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    str_0 = "w$pqg/Dy+NiiG"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    int_0 = 2269
    complex_0 = 343.82248 - 2305.68678j
    tuple_0 = (int_0, complex_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    float_0 = 3239.0165
    tuple_0 = (float_0,)
    tuple_1 = (tuple_0, float_0)
    list_0 = [tuple_1, tuple_1, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    object_0 = module_1.object()
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    int_0 = -45
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    str_0 = "J;1U.P6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    int_0 = 993
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    bytes_0 = b"T5\x1bo|\xeb]E\x99\xee\xd4,\xff\xb6\xa1l\xc4\xa9"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    int_0 = -34
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    float_0 = 1325.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    str_0 = "Ura*^C!pLGH !P|b+07"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    bytes_0 = b"y\x9c\x1f\x94\x0c\x1d,sC\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    complex_0 = -3487.927 + 497.1998j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    set_0 = set()
    str_0 = ",|xGM9?(\rhq&"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    int_0 = -3142
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    int_0 = 1668
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    int_0 = 1765
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    float_0 = -614.48
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    complex_0 = 807 - 1006.8867j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    float_0 = 3726.3
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    bytes_0 = b"L\xf8\xf5\xea\xf9\xd6`\xee*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    float_0 = -1235.0
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    complex_0 = 631 - 576.886j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    complex_0 = -1244.8881 + 1266.938023j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    float_0 = 3846.469116
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    bytes_0 = b"u\xe9\r\xd2\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    bool_0 = True
    str_0 = "z\\bdPL)O(zq2QY Rg,\x0b"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    int_0 = 789
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    int_0 = -908
    str_0 = 'JXU6y=n"IX\tQ'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    bytes_0 = b"\x8a\xbe\xd3\x071"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    float_0 = 4005.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    str_0 = "V*0X`PpwWG<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    float_0 = 2855.88908
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    str_0 = "6V%8Qm}C#cexp.'n&"
    str_1 = "<E\n!9Oyl/p$2g="
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    int_0 = -1590
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    int_0 = 2262
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    bytes_0 = b"\x84z\xc8\x08\x83\xb9Q!\xabb\xaaWK"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    float_0 = 2278.6023
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    int_0 = -1861
    module_0.match(int_0, int_0)


def test_case_2119():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2120():
    float_0 = -184.0
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    float_0 = -3214.0
    str_0 = ""
    bytes_0 = b"\xc1\xaf>\xa5"
    tuple_0 = (float_0, float_0, str_0, bytes_0)
    list_0 = [tuple_0, str_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    bytes_0 = b"^.N6\t\x19\xa8.\xcdHS\xd6c\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    int_0 = -916
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    bytes_0 = b"\x95\x80\xef"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    complex_0 = -661.8 + 3666.626j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    int_0 = -2785
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    bytes_0 = b"\xf7\xfb'\x1b\xd9h\x08\x12#\xd1"
    int_0 = -112
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    str_0 = 'C"]?x|'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    object_0 = module_1.object()
    float_0 = 1969.0
    list_0 = [object_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    float_0 = -277.420908
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    float_0 = 1197.0
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    bytes_0 = b"V\xc2'}\x88"
    bool_0 = False
    bool_1 = False
    tuple_0 = (bytes_0, bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    float_0 = -319.68
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    list_1 = [list_0]
    module_0.match(list_1, tuple_0)


def test_case_2139():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2140():
    bytes_0 = b"n.\x83\x92\xd5H\xd8\x9d<\xca\x18\n\xe0"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    int_0 = -863
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    int_0 = -1008
    bytes_0 = b"f\xec\xfb\xf2\xdd"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    bytes_0 = b"\xd2\xde\x9d\x0c\x81B\xac\x8d\xf0\x81bv8\x9a\x11\x95\xa3\xc2\x16\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    float_0 = -653.764897
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    int_0 = -1367
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    str_0 = "\x0c<9T q:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    int_0 = -280
    tuple_0 = ()
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    int_0 = -793
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    str_0 = 'vCACG5O?@"\n>jT'
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    int_0 = -1096
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    bool_0 = False
    int_0 = 2052
    tuple_0 = (bool_0, int_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    int_0 = -793
    tuple_0 = (dict_0, bool_0, bool_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    int_0 = 2366
    bool_0 = True
    list_0 = [int_0, bool_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    bool_0 = True
    str_0 = "d7#*d'`#"
    int_0 = 1530
    tuple_0 = (bool_0, str_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    bool_0 = True
    bool_1 = False
    dict_0 = {}
    tuple_0 = (bool_1, dict_0)
    str_0 = "<r2bM~#"
    tuple_1 = (bool_0, tuple_0, str_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    int_0 = 3685
    dict_0 = {}
    dict_1 = {int_0: int_0, int_0: dict_0}
    none_type_0 = None
    module_0.match(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    int_0 = 546
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    int_0 = -1799
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0, int_0, int_0]
    module_1.object(*list_0)


def test_case_2170():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2171():
    int_0 = -4123
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    int_0 = -1435
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    list_0 = []
    str_0 = "=}OGbr@^&8+}y%A\x0b"
    set_0 = {str_0}
    tuple_0 = (list_0, str_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    int_0 = -4170
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    int_0 = -1174
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    str_0 = "jb~,H?xQIY5"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    str_0 = "a#MJ;8{QO"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    str_0 = "C)#QB>'~[,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    int_0 = 1058
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    complex_0 = -672.169086 + 962.648j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    str_0 = "|\nAG'4\nuh\rrjE 'v3Ss\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    int_0 = -638
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    bytes_0 = b"\xe6^)Z\xa5\xb8a\x91\x983\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    str_0 = "=e"
    module_0.get_new_command(str_0, str_0)


def test_case_2186():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2187():
    float_0 = 940.111988
    list_0 = [float_0, float_0, float_0]
    tuple_0 = (float_0, list_0, float_0)
    int_0 = -3430
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    float_0 = 1161.664543
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    bytes_0 = b"\xf33S\xab,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    object_0 = module_1.object()
    str_0 = "\x0cB/"
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: str_0,
    }
    module_0.match(dict_0, dict_0)


def test_case_2191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2192():
    str_0 = '\\N\\QLI8K"\x0bHWw`h|'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    bool_0 = True
    complex_0 = -265 - 2599.943j
    set_0 = {complex_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    list_0 = []
    float_0 = -4115.946
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    str_0 = "o4nW\x0b<B#"
    int_0 = -1413
    tuple_0 = (str_0, int_0, bool_0)
    int_1 = -610
    tuple_1 = (set_0, set_0, tuple_0, int_1)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    int_0 = -2246
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    int_0 = 13
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    str_0 = "\x0cbNU)Xj\t_#f9"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    str_0 = "nt^UpvOEYiiP0i4z).#"
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0, str_0)
    tuple_2 = (tuple_1,)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


def test_case_2201():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2202():
    float_0 = -2698.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_2203():
    pass


def test_case_2204():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2205():
    int_0 = -3406
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    float_0 = 295.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    int_0 = -1831
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    float_0 = -1464.6775
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    bytes_0 = b"S6\xf1+\x00\x16\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    none_type_0 = None
    float_0 = 2423.02
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    float_0 = -1509.08
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    bytes_0 = b";(\x1a?p\x80\xa7\xb0\xff\xaa;\x85\xfc\xbe\xd2\xde"
    tuple_0 = ()
    set_0 = {tuple_0, bytes_0, tuple_0, tuple_0}
    tuple_1 = (bytes_0, tuple_0, set_0, set_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    complex_0 = -3319.5 - 1580.3j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_2215():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2216():
    complex_0 = 3357.2 + 1085.12j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    bytes_0 = b'\x84\xfa5\x94\x1f\xb0"\xcbd\xab\\\x97'
    bool_0 = False
    dict_0 = {bytes_0: bool_0, bool_0: bool_0}
    list_0 = [bytes_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    complex_0 = -1648 - 2947.261j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    int_0 = 2365
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    int_0 = 977
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    complex_0 = -1138.4927 - 2237.62j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    str_0 = "\x0b(g+ZHP{\x0c#"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    bytes_0 = b"\xe6/\xfd\x98*\x97"
    int_0 = -2711
    dict_0 = {bytes_0: bytes_0, int_0: bytes_0, int_0: bytes_0}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    float_0 = -1174.217909
    list_0 = []
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    int_0 = 3686
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    bool_0 = False
    list_0 = [bool_0]
    bool_1 = False
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    float_0 = -494.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    str_0 = ":Su`*|BcdZ\tB)'a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    int_0 = -2022
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    float_0 = -2350.069
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    int_0 = 2498
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_2233():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2234():
    str_0 = "[n0*&B)7XWt1~'"
    module_1.object(*str_0)


def test_case_2235():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2236():
    str_0 = "lXP#NWA\\ N\\U*AkC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    float_0 = -2476.84
    tuple_0 = ()
    tuple_1 = (float_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    bool_0 = False
    float_0 = -2222.700361
    module_0.get_new_command(bool_0, float_0)


def test_case_2239():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2240():
    int_0 = -679
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    bytes_0 = b"H\xb4\x0cfN\xfe.\x17\xdf\x03"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    str_0 = "=tnJQ@}iJG\rxkTC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    str_0 = "A\x0b\\k`P)_R#dP"
    float_0 = 2402.100891
    int_0 = 728
    bool_0 = False
    tuple_0 = (str_0, float_0, int_0, bool_0)
    str_1 = "UxO!"
    list_0 = [tuple_0, tuple_0, str_1]
    module_0.match(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    int_0 = 426
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    bytes_0 = b"\xa1\x18<X\n3\xdc\xa6\xaa/\x83\x16\x1c\xd3U\xaa\xc9k"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    dict_0 = {}
    bool_0 = True
    module_0.match(dict_0, bool_0)


def test_case_2248():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2249():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    str_0 = "}zL"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    int_0 = 3257
    module_0.get_new_command(int_0, int_0)


def test_case_2252():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2253():
    int_0 = -1146
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    complex_0 = -493.3 + 1495.17j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    int_0 = -2078
    set_0 = set()
    tuple_0 = (int_0, set_0)
    str_0 = "&>kgpGDi?rjbp\rw"
    tuple_1 = (tuple_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    bytes_0 = b"\xb0\xda*kQ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    float_0 = 168.44
    int_0 = -893
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    bytes_0 = b"\xe4I\xaf\xae`\xb5 t|\xd3\xbd9\xc5"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    bytes_0 = b"H\xaf\xc6/f\xbe\x92\n\xc6\xcd\x97d\xfa58\x1b\x9d"
    int_0 = 2434
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    int_0 = 788
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    float_0 = 199.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    float_0 = 928.3549
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


def test_case_2265():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2266():
    int_0 = 1873
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    str_0 = "Rd4]Op51/ ^n\t"
    set_0 = {str_0}
    tuple_0 = (str_0, set_0, set_0, set_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    complex_0 = 1025.9 - 310.2816j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    int_0 = -191
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    bytes_0 = b"\xb5\xd7\xdb\xd4\xed\xd37\xd4^\x11\xc9\x9at\x84\x0b"
    str_0 = " "
    set_0 = {bytes_0}
    tuple_0 = (str_0, bytes_0, set_0)
    bool_0 = False
    list_0 = [bytes_0, set_0, tuple_0]
    tuple_1 = (bytes_0, tuple_0, bool_0, list_0)
    list_1 = [tuple_1, bytes_0, bool_0, set_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    list_0 = []
    int_0 = 694
    tuple_0 = (list_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    int_0 = 29
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    int_0 = 674
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    float_0 = 521.5
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    str_0 = "y#7;=\x0che(Ww}_;vJFuD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    complex_0 = -1311.7849 + 1575.7103j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2279():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2280():
    complex_0 = -165.92 - 441.80044j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    int_0 = 3800
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    float_0 = -2340.66537
    int_0 = 193
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    bytes_0 = b"\xf5\xaf\xab\xf6\x10E&\xe0mWi-\xbd\xc8\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    int_0 = 4959
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    bytes_0 = b"} \xf0\x92\x16)k\x07\x0c\xd3}"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    str_0 = "u-!%ZHLESg~k-EH{$RI"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    int_0 = 297
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    int_0 = 594
    list_0 = [int_0, int_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


def test_case_2289():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2290():
    bool_0 = False
    bytes_0 = b"\xcf\x9bxT\x8d\xa4\xf2B\x123LQD\x91\xf8y"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    bytes_0 = b"\x8dFf\x9f\x06_\x16F\x1dHF\xefh\xc3\x19H\xa6\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    int_0 = -3643
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    complex_0 = -5665.40936 - 2095.189j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    float_0 = 2120.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    int_0 = -2763
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    str_0 = "\x0c4v!A-l8Yc9j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    int_0 = -1154
    bytes_0 = b"PU!\x12\x95G\xbe&\x14\xda\xf3\x17"
    list_0 = [int_0, int_0, int_0, bytes_0]
    list_1 = [list_0, bytes_0, int_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    str_0 = "gY"
    module_0.get_new_command(str_0, str_0)


def test_case_2303():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2304():
    int_0 = 995
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    str_0 = "sy'dgx{]!\"C "
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    int_0 = 1235
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    str_0 = "54E6.CHWl{9WS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    float_0 = 269.4329
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    str_0 = "D\x0cq5#fbFl:L!*]wb#"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    bool_0 = False
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    int_0 = -1425
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    bool_0 = False
    int_0 = -78
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    set_0 = set()
    float_0 = 2899.56723
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    str_0 = ""
    module_0.match(str_0, str_0)


def test_case_2317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2318():
    int_0 = -1013
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    str_0 = "N*AsGB1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    bytes_0 = b'\x07\xf8t\xc1\x07N\xa9\xd3\xb3+\t,>["\xc8'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    bytes_0 = b"\x0f\xb7R\x17\xc1K\xe3t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    float_0 = -187.44
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    str_0 = "2>\rR?}A^;yY~oC"
    list_0 = [str_0]
    str_1 = ""
    bool_0 = False
    bytes_0 = b",\xcd\xb4"
    tuple_0 = (list_0, str_0, bool_0, bytes_0)
    tuple_1 = (str_1, tuple_0)
    tuple_2 = (str_0, list_0, tuple_1)
    float_0 = -761.42577
    module_0.get_new_command(tuple_2, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    int_0 = -1421
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    bytes_0 = b"\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0, list_0, list_0]
    list_2 = [list_1, list_1, list_1]
    module_0.match(list_2, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    bool_0 = True
    int_0 = 1009
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    bytes_0 = b"\x06\xeb\x10\x9d\x9c\x89\xa1\x86\x8b-\xd07G"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    int_0 = -4110
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    str_0 = "XCI*)+]"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    int_0 = -1576
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    str_0 = "7}@:^^?4g@yM}"
    module_0.match(str_0, str_0)


def test_case_2336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2337():
    int_0 = 2579
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_2338():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2339():
    float_0 = 209.1888
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    int_0 = 2119
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    float_0 = 123.6418
    bytes_0 = b"r@a"
    bytes_1 = b"T\xfe\xfcD\tV\xa2\xd3"
    str_0 = "$Y7\t#fr!KHD!e"
    tuple_0 = (float_0, bytes_0, bytes_1, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    int_0 = 3604
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    bool_0 = False
    bytes_0 = b"t2H\xe8\xd4"
    dict_0 = {bytes_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


def test_case_2347():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2348():
    bytes_0 = b"\xa9\x9fo\x07WL\xffb+"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    bool_0 = False
    none_type_0 = None
    module_1.object(*none_type_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    float_0 = 1327.86
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    int_0 = -969
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    float_0 = -5352.233383
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    bytes_0 = b"\xf3\x01m\xae\x0c\xdf\x8b\x8b\x17"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    float_0 = -401.43141
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    bytes_0 = b"e\xf6\x82]\xe2\xd6m\xd9\xc8\xde\xe8\xfb"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    int_0 = -3095
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    none_type_0 = None
    bytes_0 = b"X\xb2\x1e\x98\x7fNQ\x92q\x8ea\xbf\x11\x96"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    str_0 = '":2'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    str_0 = "B~Z,0\tQ>!+8*qv\\_SsZ\\"
    set_0 = {str_0, str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    str_0 = "p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    str_0 = "~d%^U?`b^88\x0cqajRv\nl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    str_0 = "bvzVPb'xhWrj]P"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    bytes_0 = b"\x87 c\x07\x88\xab\xdc\xc8mr*V\xcb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    int_0 = -1115
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    dict_0 = {}
    int_0 = 802
    tuple_0 = (dict_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


def test_case_2369():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2370():
    int_0 = -1795
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    bytes_0 = b"\xc2L"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    int_0 = -1711
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    str_0 = "gV+x\x0cQ)63(GV{EwUX)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    float_0 = -1635.0
    set_0 = {float_0, float_0}
    list_0 = [set_0, float_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    float_0 = 1985.392943
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    str_0 = "< 0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    bytes_0 = b"\x13\x18\x17\xb4\xcd\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    str_0 = "x8"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    complex_0 = -392.036209 + 4895.26j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    bytes_0 = b"\x03\xe3\xbf\x99\xb2\xdfg9\x9a\xf6\xbd*XM~"
    bool_0 = True
    dict_0 = {bytes_0: bool_0, bytes_0: bool_0, bool_0: bytes_0, bytes_0: bool_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    bytes_0 = b"\\\xed(\x8d5\xb1\xd5h\xc9)\x02s\x91o"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    float_0 = -286.7115
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0}
    str_0 = "NLkC0Z3lv!j-61]avS<."
    tuple_1 = (dict_0, bool_0, tuple_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    bytes_0 = b"Tq\x02v-\xfc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    float_0 = 984.369535
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    int_0 = -2988
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    str_0 = "x#?,\\&$^$4P`r"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    bytes_0 = b"\xb76l/\xb1\xb7V\xfa\xe8\xd3\xa0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    none_type_0 = None
    int_0 = -4801
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    int_0 = -2759
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    int_0 = 1400
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    str_0 = "@ .gVr6\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0, list_0]
    dict_0 = {}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    str_0 = ":f_|H~y#Q7Ldr;Q8Yw)"
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = -1997
    tuple_0 = (str_0, set_0, int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    str_0 = 'bW$e8RrP"He'
    module_0.match(str_0, str_0)


def test_case_2397():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2398():
    float_0 = 3526.84369
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    int_0 = -2228
    none_type_0 = None
    module_1.object(*int_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    str_0 = ".! 0-.y[xWWc**.H:\n_"
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    int_0 = -2200
    tuple_0 = ()
    set_0 = {int_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    int_0 = -577
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    complex_0 = 2350.462451 + 3034.83324j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    float_0 = -1295.654789
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    complex_0 = -807.893207 + 1114.1j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    bytes_0 = b"\x8b\xd4z\xd86\\\x85\xbb\xe3z\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    float_0 = 2652.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    bytes_0 = b"8pi\x1b`\xb05\xe6\x91\x0c\x84\xea\xed\x051J\xc8T"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    str_0 = "\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    int_0 = -169
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    bytes_0 = b"C\x15\x9d&\xe5\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2415():
    bytes_0 = b"\xc4iz\xb3z_-/\xa0\x80\xf7\xc6V\x87\x91\x92\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    complex_0 = -3221 - 2010.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    complex_0 = 1181 + 829.973997j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_0, bool_0: bool_1}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    int_0 = 1692
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    bytes_0 = b"\x0f{\x0fIM\x88m"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    str_0 = "r\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    bytes_0 = b"\x06cq"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    int_0 = -2318
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    float_0 = 1195.125292
    list_0 = [float_0, float_0, float_0]
    str_0 = "yOv!\teJ?sBKkc!-)"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    str_0 = " ?Kv\t[LJt_BW6p.Kn@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bytes_0 = b"\xc2\xf43\xc1"
    module_0.match(bytes_0, bytes_0)


def test_case_2429():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2430():
    int_0 = -612
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    str_0 = "API\x0ckESYPlEq\\%R__E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    complex_0 = -1615.024913 - 724j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    bool_0 = False
    float_0 = 35.952
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


def test_case_2435():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2436():
    int_0 = 544
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    int_0 = 858
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    bytes_0 = b"9\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    bytes_0 = b"\x16\\\xf6\xac\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    int_0 = -418
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    bytes_0 = b"\xa7\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    str_0 = "2#8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    bytes_0 = b"\xba@\xe7\x8f\x12\xe5|\x91\x9e\xf6\xdf\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    complex_0 = -2403.858 + 1627.428426j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    complex_0 = 693.305003 - 1479.85788j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    str_0 = ";K2+k_$&Gp<Yv@q^K}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    float_0 = 2288.258808
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    bytes_0 = b")%\xba*\xcem\x9d\xdb$\xf8\x95<U\xad\xd4\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    str_0 = '?Vk26"\\f`B-%_$mLkv V'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "x]&,:*;c<u%&R~K}"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: list_0, str_0: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    bytes_0 = b"?\x9dK G\xb0\xacd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    str_0 = ""
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    bytes_0 = b"T\xbd|\x00[a\xe6\xe9lk:;;\x83\x00zw$"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    float_0 = -1589.52484
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    int_0 = -1762
    set_0 = {int_0, int_0}
    list_0 = [set_0, int_0, set_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    int_0 = 3049
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    str_0 = "4\tXCcuc\nBpw'Ts&h@n\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    bytes_0 = b"v,!\xb1\t\x85\x16"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [bytes_0, dict_0]
    tuple_0 = (bytes_0, dict_0, list_0)
    tuple_1 = (tuple_0, bytes_0, tuple_0)
    tuple_2 = (tuple_1,)
    module_0.get_new_command(tuple_2, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    bytes_0 = b"qQ\x98\x92:\xf5AP\xe1:\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2466():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2467():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    complex_0 = -61.391426 + 568.94729j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    str_0 = "Q$}Pg:\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    complex_0 = 1545.310241 + 1179.547j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_2472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2473():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, set_0)


def test_case_2474():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2475():
    bytes_0 = b"*\xe12@[I"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    str_0 = ":Q+z5j2,I_*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    str_0 = "2t:MSd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    str_0 = "5r0\r]Y`CRdqTQ;qf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    int_0 = 1866
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    int_0 = 2659
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    int_0 = 9
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    int_0 = -3473
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    str_0 = '\nBO!v?"E}9Tc/'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    int_0 = 4438
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2486():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2487():
    bytes_0 = b"\xbe\x88\xa5aC\xc2/\x9c\x8a\x1a\xff&\x19\xb7\x91"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    bytes_0 = b"\x9b\xba+\xa3\x12\xa6j\x82\x86\x96\xdd\x0c\x0b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    int_0 = 281
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    complex_0 = 1199.286321 + 3448j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    bytes_0 = b"\xcb*\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    float_0 = 1338.8146
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    bool_0 = True
    float_0 = -2932.0
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    int_0 = -211
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    int_0 = 2026
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    int_0 = -1559
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    str_0 = "<xv{fV//x+Rs'/J_k>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    int_0 = -835
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    int_0 = 1041
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    int_0 = 1146
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bool_0 = True
    bytes_0 = b'\xa1Z\x17\x8c\xec\xc3n"\xf7\xbd\x1e\\\x1d\xaf'
    tuple_0 = (bool_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    str_0 = "\x0bC 0.Uknl*<Ug?{0gY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    int_0 = 1252
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    complex_0 = 2076.5 - 438.7226j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    str_0 = "w[o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    str_0 = "+("
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(str_0, list_0)


def test_case_2514():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2515():
    int_0 = 2232
    module_0.get_new_command(int_0, int_0)


def test_case_2516():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2517():
    int_0 = 566
    tuple_0 = ()
    tuple_1 = (int_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    bytes_0 = b"\xba-"
    str_0 = "'to:.yi>:o;<8\x0bY"
    list_0 = [bytes_0, bytes_0, str_0]
    int_0 = -1145
    tuple_0 = (list_0, int_0)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    str_0 = "F{Nlksq\x0ch\\it"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    float_0 = 2349.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    int_0 = -328
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    int_0 = 387
    dict_0 = {int_0: int_0}
    bool_0 = False
    tuple_0 = (int_0, dict_0, bool_0)
    int_1 = 629
    tuple_1 = (tuple_0, int_0, int_1, dict_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    int_0 = 2543
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    int_0 = -2732
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_2525():
    pass


def test_case_2526():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2527():
    float_0 = 212.11
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_0, bool_1]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    complex_0 = 1918.5 - 2005.42626j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    str_0 = "\x0cB6$cvz]!FEy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    bytes_0 = b"\xd8\x9e\xaa~}\xcf\xa6\xbc:\x02R{{\xd9S\x93\xd0\xaa"
    bytes_1 = b"!RB\xc4n\x1d\x8c\xec\xb6\x7f"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    int_0 = -1188
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    int_0 = 3819
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    list_0 = []
    float_0 = 998.0
    int_0 = 485
    tuple_0 = (list_0, float_0, float_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    str_0 = " U!z|@?5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    bytes_0 = b"\xcb\x92"
    int_0 = 820
    bool_0 = True
    tuple_0 = (bytes_0, int_0, bool_0)
    int_1 = -2133
    dict_0 = {tuple_0: int_0, int_1: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    float_0 = -2006.463394
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    float_0 = -2945.373
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bytes_0 = b"\xb4\xe6y\xde\xe8}\xab\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    str_0 = "9%lv"
    str_1 = 'hpGaB7.CBV8P("9e$\\u'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    str_0 = "B@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    bool_0 = True
    bytes_0 = b"l\xfe7\x8a\xeb)z \xd3:\x10\xd9\x7f\\"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    bytes_0 = b"\x89\xe1\xc7\x10I\xf5\x9c\x15z\x039<\xd0\xd4;\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    bytes_0 = b"\xa4\x81\x1c\x8a\t\xae\x9d\x84\xa7\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    bytes_0 = b"\xe3::\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    str_0 = "~sI.0\r{q}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    int_0 = 390
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    int_0 = -1233
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    bytes_0 = b"\x9a\xcd)lT<)\xbd\x88s\x16\x85\x8a\xc3\\"
    tuple_0 = ()
    tuple_1 = (bytes_0, tuple_0, bytes_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    float_0 = 370.629616
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    str_0 = "JxcEc~m$^"
    bytes_0 = b'r\xf7\\\xca\x04=n?\x92\xa1\xb4"\xfb\xc7y'
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    str_0 = "qpK*z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    str_0 = "Cz\t*k&Q-X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    str_0 = '>{E"R9\x0biD:?Sxn'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    str_0 = "x\\t(`,"
    str_1 = '~}"h\x0c'
    dict_0 = {str_0: str_1, str_1: str_0, str_0: str_1}
    dict_1 = {str_0: str_0, str_1: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    str_0 = "~.y7boOq?\n{SMF@o;2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    complex_0 = -4308.936623 - 1418.07j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    bool_0 = False
    str_0 = ""
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, str_0: bool_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    object_0 = module_1.object()
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    tuple_0 = (object_0, bool_0, dict_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    str_0 = ";|\x0bU'RD<<q\r,3n|Ll~8"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    bytes_0 = b"\x8c\xf8\x06\r0\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    bytes_0 = b"\xf8g"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [bytes_0, list_0, list_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    str_0 = "FR("
    none_type_0 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    str_0 = "6kOGV>XHWb\rQ.D]*?A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    bytes_0 = b":\x1aG\xde\x00B\xef\x18\x8b\xd9\x17!\x1c9\x1a\x96\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    str_0 = "njxg}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    int_0 = 1457
    module_0.match(int_0, int_0)


def test_case_2573():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2574():
    bytes_0 = b"\x12~~\xd7\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    bytes_0 = b"\x04,\xac\x90GI\xcb'\xc6\xe6*"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    float_0 = -874.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    int_0 = -857
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    str_0 = "!H~Y>?D,4 ."
    str_1 = "I"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    int_0 = -3374
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    float_0 = -1083.62
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    list_1 = [object_0, object_0, list_0, object_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    list_0 = []
    bytes_0 = b"$m\x16\xe1ST\xbf\xf3R\x83\\"
    str_0 = "qQ:6'iTt`'n"
    int_0 = -2902
    tuple_0 = (str_0, list_0, int_0)
    tuple_1 = (list_0, bytes_0, tuple_0)
    list_1 = [tuple_1, int_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    str_0 = "2z )Wu'+rfht\\C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    int_0 = 1997
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    str_0 = "]8ECX#Moe\\N1%m"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    str_0 = '[<f2z{>"6'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    bool_0 = True
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    str_0 = "5\n;?^44(2|=Yca enq\\g"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    float_0 = -2153.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_2593():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2594():
    float_0 = -170.7
    complex_0 = -742.98003 - 852.1j
    bool_0 = False
    tuple_0 = (float_0, complex_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    int_0 = 844
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    int_0 = -2017
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    str_0 = ".H]4MEYEf% sf5\\*]kS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    int_0 = 841
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    float_0 = -2376.87207
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    bool_0 = False
    list_0 = [bool_0]
    object_0 = module_1.object()
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    bytes_0 = b"\xb0e\x90\xe8\xcf#7\xcdH\xe6\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    bool_0 = True
    bytes_0 = b'\x00\x93bn\x02\xa2\xb2Up"F\xb7\xf5\xc5\x88\xec.^'
    tuple_0 = (bool_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    str_0 = ",[si7'*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    float_0 = -2182.2
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    int_0 = 2179
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    complex_0 = -2965.5 - 897.19j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    str_0 = "\x0clS2s,\r(PK("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    str_0 = "/-;j-,rX"
    float_0 = 1205.121961
    dict_0 = {str_0: str_0, str_0: str_0, float_0: float_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    int_0 = 3532
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    str_0 = ")G'&P;v{$T"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    str_0 = "EbW)gwo7P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    float_0 = 698.44797
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    none_type_0 = None
    float_0 = 2029.1
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    bytes_0 = b"\n-\x1a\xe3"
    set_0 = {bytes_0}
    list_0 = [set_0, bytes_0, set_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    float_0 = 1138.8143
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    str_0 = ",C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    str_0 = "4wMo4Tm*,!#Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    float_0 = 2886.7252
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    str_0 = ',^dH8")c>rx$N6o:>6j!'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    float_0 = -1044.9136
    module_0.match(float_0, float_0)


def test_case_2626():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2627():
    bytes_0 = b"\x80\xc2\x04\x1e^\xf2\xfb\xe5\xa4\x9fDr\xa9\xf5\x91\x84\xca\xc8\x02"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    bytes_0 = b"\xde\xd3\x7f\xb29.\x9dv\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    str_0 = "+eI.eg\t:\r#G)"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    int_0 = -1806
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    int_0 = 716
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    float_0 = -2158.652815
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    complex_0 = 659 + 1012.47577j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    int_0 = -819
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    float_0 = 523.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    str_0 = "R2J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    int_0 = -423
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    int_0 = -2719
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    bytes_0 = b"\xd9\xfb\xcd5\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    complex_0 = -1309 + 4920j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    str_0 = '"$\x0cf\nbYe&t}X$VHrA'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    str_0 = "Y:<0B]|H\rI(Ea_C:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    str_0 = "DYIQ|XCzekVE/I<"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_2647():
    pass


def test_case_2648():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2649():
    int_0 = 839
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    int_0 = 2122
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bytes_0 = b"o\x8b\xa1}x\xc0G\xbe\xec\xa4\xd2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    bool_0 = False
    bytes_0 = b""
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    float_0 = -784.7141
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    str_0 = "Ge^d\rERHovX30"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    complex_0 = 1615.0616 - 1244.82307j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    bytes_0 = b"\xe9\x1f5\xefl\xf2\xff\xa7\x81P9{\x1c"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    bytes_0 = b"\xf6k\xb6\x15Y\xd49.\xd9\xad\xae\xa3\xc4\x90\x87\xa8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    int_0 = 1619
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, dict_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    bytes_0 = b'-#"\x1aa\x0f\x94_\xa3\xb0<:\xd1\x188'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    str_0 = "< RrKn^r<l<v|_("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    int_0 = -1034
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    bytes_0 = b"\x92\xb6\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    bytes_0 = b"}\xb3\xc0\xc0\xeag\x0f\x00\xb2\x05\xf3e\xc0O"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    str_0 = "c\\^697\nmP[Y"
    none_type_0 = None
    str_1 = "wbI*QK <\r-RL)l.OvyyV"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    int_0 = -2147
    bool_0 = False
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (int_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    int_0 = -1246
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    float_0 = -1862.391
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    int_0 = 1213
    list_0 = [int_0]
    bool_0 = True
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    str_0 = "R><4ZyVdzjKF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    str_0 = "<iw\r{s;'+( "
    list_0 = []
    bool_0 = True
    tuple_0 = (str_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    bytes_0 = b"2\xe2\xa6\x0c!\xa6y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    bytes_0 = b"\xc3\x14\x07^o~\x06,K\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    int_0 = 1015
    bytes_0 = b"6r"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    int_0 = 2018
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0, none_type_0: tuple_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    float_0 = -5264.03
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    int_0 = -686
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    int_0 = -2921
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    str_0 = ',<`Rr3:H:Bwyv @VoMG"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    str_0 = "G]FytdZY(r>z-gzEd"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    str_0 = "n]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    str_0 = "A?=@z]a}%*pMs.ywc"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    bytes_0 = b'<z\x00WJ\xc5\xe3N\xf4\xea;d\xb6k;\x0b"L\x93'
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    none_type_0 = None
    float_0 = 1370.2
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    bytes_0 = b"c\xeb\xf18\x1fJQ\x89"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2701():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2702():
    bool_0 = True
    bytes_0 = b"W'JHr\xfe\xe7"
    tuple_0 = (bool_0, bytes_0)
    tuple_1 = (tuple_0, bytes_0)
    list_0 = [tuple_1, tuple_0, bool_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    float_0 = -79.45641
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    int_0 = 1402
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    bytes_0 = b"\x8b\xca\xcd\xc5z\x9c\xa1\x02\xf4\xb0\xc6\x0cH\xa5o"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    str_0 = "~\r#DnJ\\wK(\t#PWF @I"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    complex_0 = -4543 - 710j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    bytes_0 = b'4z(\xb4\t\x10\xeb\xd6"\xd9\x98:'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    complex_0 = 335.97 + 322.4039j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    complex_0 = -2850.1 + 717j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    tuple_0 = ()
    str_0 = "<G/q"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    str_0 = "B/@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    complex_0 = 239.36 + 3259j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    float_0 = -903.02
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    str_0 = "3R3$,]Y@jE:5iXal?kQ"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    str_0 = "3$)?{rA|\\"
    set_0 = {str_0, str_0}
    int_0 = 1096
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    int_0 = -268
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    bytes_0 = b"{\xf2O\x01[K\xcc\xcehTs\xca\xf4\xcd\x13\xe0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    str_0 = 'uIpq=D"QE)ktOO\x0b3v\x0b}'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2722():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2723():
    str_0 = "\t#k7{\\l3QG4Dx]+d&*8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    float_0 = 688.4374
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    str_0 = "k52[G)<NAvl"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    str_0 = "ZEPFsUtxB{~THQ\x0cw\n"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    int_0 = -1921
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    int_0 = 3450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    str_0 = "@/|SE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    str_0 = "ZFsK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    str_0 = '"w"~g"5Sy<+i'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    str_0 = "IiplQr+r*(99T!?}D?["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    set_0 = set()
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    int_0 = 1703
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    bytes_0 = b"\x82\x15\x96\xd0\x81\xd7\x14\xb3\xcd1\xd7\xab\x127\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    bool_0 = True
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


def test_case_2739():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2740():
    str_0 = "Q\r8q{2]^6;$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    str_0 = "v~HYG3Yx#=%o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    bytes_0 = b"\xe0\xef "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    complex_0 = 1933.833454 - 1194.48j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    str_0 = "!\x0b0E&\rB,Zjm)%\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    float_0 = 864.0
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    bytes_0 = b"\xca\x17L\xbd\xf8"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    int_0 = -3247
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    bytes_0 = b"3"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: bytes_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    str_0 = '"'
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    float_0 = 1303.2137
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    float_0 = -997.5292
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    int_0 = -441
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    str_0 = 'w&UZ"  t+\nkFqsF)J}J'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    bytes_0 = b"\x12\xdb`hX\xbd\xc4\x98\xf7\xac\xd1\x80\xeb"
    list_0 = [bytes_0]
    str_0 = "4E&!53BsK'65\x0cW"
    str_1 = "o%&y?GO\x0b8\\JK'A"
    dict_0 = {str_0: bytes_0, str_0: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    int_0 = 103
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    float_0 = -2507.7511
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    str_0 = "^-1`+H=nI){ ?"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1, bool_1: bool_1}
    list_0 = [dict_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    bytes_0 = b"\x91\xa3\x1a\xb6{\xd8P\xc7\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    bytes_0 = b"f\x05\x9c$\xc7\xfe\xb5\x03\xd5\xed?.\xd3\xea|\xb4m\x7f3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    bytes_0 = b"\x92\x07^\x8diP\xe4%\xd2"
    dict_0 = {}
    tuple_0 = (bytes_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    str_0 = "Tz2E)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    int_0 = -962
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    float_0 = -846.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    bytes_0 = b"\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    int_0 = 1883
    int_1 = 5656
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    bytes_0 = b"\xac\xca\xde"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [bool_0]
    tuple_1 = (tuple_0, list_0, bool_0, bool_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    int_0 = 1830
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    bytes_0 = b"\xa0\xed\xe5\x9c\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    float_0 = -201.59
    str_0 = "n`"
    tuple_0 = (float_0, str_0)
    set_0 = {tuple_0, str_0, tuple_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    bytes_0 = b"\x86\xdf\xfcF8\xe9\x9f\x1e\xf5\x1e"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    bytes_0 = b"\xb0\xe0N\x8d4\xcbp\xf1\x01o\x1c-\x9e7\x0b\x1fj\xcc\x0c)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    bytes_0 = b"\xfe\xd8\x92\xf0\x9c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    int_0 = 2236
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    int_0 = -533
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    str_0 = ",9NC9p\x0cxG\":R>5'&sR"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    int_0 = 3579
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    bytes_0 = b"\xb5\xedJ\xd9\x19\xfaU"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    bytes_0 = b"\xf1pl\xb85\xb4\xcf\xa5\xdc6\xa9\x83\x14\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    float_0 = -579.35828
    float_1 = 1257.64369
    tuple_0 = (float_1,)
    object_0 = module_1.object()
    dict_0 = {tuple_0: float_1, tuple_0: object_0, float_0: object_0}
    tuple_1 = (float_0, float_1, tuple_0, dict_0)
    str_0 = "kc3z\x0ci"
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    float_0 = 457.05
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


def test_case_2794():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2795():
    str_0 = "A "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, bool_0}
    tuple_1 = (set_0, bool_0)
    complex_0 = 389.76626 + 2714.244j
    module_0.get_new_command(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    str_0 = "jTY7o0],@o>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    str_0 = "h\\LN"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    int_0 = 535
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    float_0 = -832.249681
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bytes_0 = b"g\x85UGN\xc9\x02\x9d\x14}V\x1a"
    bool_0 = True
    float_0 = -2464.16895
    dict_0 = {bytes_0: bytes_0, bool_0: float_0, bool_0: float_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    bytes_0 = b"\xd4 \x08\xeb\xb4\xf5-?\xac\xea\xf1\x01\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    float_0 = 1342.808052
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    str_0 = "|`^JII%Fw&4.Vqm.AD"
    str_1 = "K#O]Mj'N4PgqN"
    str_2 = ""
    list_0 = [str_1, str_2]
    dict_0 = {str_0: str_0, str_1: str_1, str_2: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    float_0 = -4609.656
    float_1 = 3305.92
    module_0.get_new_command(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    str_0 = "F|N\x0cw{AsaR"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    complex_0 = 735.337 - 632.354j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    float_0 = -484.26
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    int_0 = -2728
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    bytes_0 = b"!\xc6\xc2\xa1\x1c\xba\xfcW\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    dict_0 = {}
    bytes_0 = b"\xd2r"
    list_0 = [dict_0, dict_0, dict_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    bytes_0 = b"\xfe\xa1\xa8\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    bool_0 = False
    float_0 = 388.42
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    bytes_0 = b"\xf2\xf2C\x10\t'\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    bytes_0 = b"@\xfbN7\x9b\xf9G\xb0\x8b\x9b9\xa0=\xa5\x17y:"
    int_0 = 445
    complex_0 = -3003.83255 - 932.4288j
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: int_0, complex_0: int_0}
    tuple_0 = (dict_0,)
    int_1 = 656
    module_0.get_new_command(tuple_0, int_1)


def test_case_2822():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2823():
    str_0 = "\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    none_type_0 = None
    int_0 = -679
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2826():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2827():
    float_0 = 4707.7826
    module_0.match(float_0, float_0)


def test_case_2828():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2829():
    str_0 = "GU<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    int_0 = 3164
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    float_0 = 3130.2
    int_0 = -2179
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    int_0 = -1148
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    bytes_0 = b"\xd9\xb7x\xbbv\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    str_0 = 'acoE\n"Nk?M`\rH3(x'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    float_0 = 1829.92
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    dict_0 = {}
    int_0 = -2001
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    str_0 = "Q\\[\rk8=T'/{q"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    complex_0 = 553 + 227.808884j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    int_0 = 394
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    list_0 = [int_0, int_0, tuple_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    complex_0 = 767.2354 - 987.7j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    int_0 = 2813
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    int_0 = -3495
    bytes_0 = b"\xa2\x83\xd0gY\xe65\xbfT\xe3"
    list_0 = [bytes_0, int_0, bytes_0, bytes_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    bool_0 = False
    str_0 = "&fx"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    int_0 = 179
    bool_0 = True
    list_0 = [int_0, bool_0, int_0, bool_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bytes_0 = b"\x04\\A!K\x0eJx\x1c\xe1n\xe7\xf0"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    str_0 = "N(=\x0bi\ry7\\1JLa<"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    float_0 = -1444.585197
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    int_0 = -668
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    dict_0 = {}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    int_0 = -326
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    bool_0 = False
    complex_0 = -928.7935 + 2158.133j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    bytes_0 = b"|\xf2\x03\x93\xb4T\x98|~z%s\tu"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2862():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2863():
    str_0 = "50K_SfzZDZkCUkDe6'&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2864():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2865():
    int_0 = -1615
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    int_0 = -2415
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    str_0 = "2;;Yx1UjaW0(tGY("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    float_0 = 523.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    str_0 = 'BV4G`{_"\nv6$N<w(t>&E'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    str_0 = "D2$@c>`|)'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2875():
    pass


def test_case_2876():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2877():
    bool_0 = False
    bytes_0 = b"\xa9\xea7>>\x9d]\xe6<\x15\x00\xbc\x8f\xa0\xe2\x01\x8f/"
    list_0 = [bool_0, bool_0, bool_0, bytes_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    int_0 = -574
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    set_0 = set()
    bytes_0 = b"\xbd\x91"
    list_0 = [set_0, set_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    int_0 = -437
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    str_0 = "n)VXmY[=7Z.)1cdP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    float_0 = -1100.83
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    bytes_0 = b"\xb7\xd1\x0c\x05\x99\xec\xf2\xc8\x1e\x08\x96"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    int_0 = 3859
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    int_0 = 1210
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    int_0 = 2758
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    bytes_0 = b"\xa2A\xb0\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    int_0 = 476
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    int_0 = -9
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    bytes_0 = b"8\xf1\x8a?\x8a\x0fL\xb1\x01*L\x88\x06\xadw"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    str_0 = "-r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    int_0 = -2851
    int_1 = 1948
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    str_0 = "8LMDe/2sL\t;d//tjf4B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    int_0 = 313
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    int_0 = -730
    str_0 = "bcx\\e;"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    int_0 = -476
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    int_0 = -278
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    str_0 = " (f"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    int_0 = -274
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    int_0 = 1847
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    int_0 = 3158
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_2906():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2907():
    int_0 = -1182
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    bytes_0 = b"\xea\xdf\x83\xd0\x03\xb1\xdd\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    int_0 = -2501
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    int_0 = 868
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    bytes_0 = b"\xf1\xd5\xdejY\x9c\xc4L\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bytes_0 = b"\xc9\xca\x87\x06\xa6\xf5\xeb\xec\x02\xb3\xee"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, set_0, set_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    str_0 = "Op!(-K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bytes_0 = b"\xe1\x87\x1f\xab\x83\x02\xd8\xbb\xe5T\x19p\xaa\xb9\\T\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    none_type_0 = None
    bytes_0 = b""
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    int_0 = -703
    bytes_0 = b"\xf8\x1ep~kW\x8d\x92m\xcb\x91~n"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    complex_0 = -597.7914 - 459.443j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    int_0 = -728
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    float_0 = -1964.30679
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    int_0 = 2269
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    str_0 = "\r?5%7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    str_0 = "Vz\nK5}!Z"
    str_1 = "G6s++BO$"
    str_2 = ",_h'E:g&EiIfx-z\t9o4f"
    dict_0 = {str_0: str_1, str_1: str_2}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    bytes_0 = b"~\xa5\xfe\x8a\xa6cat1\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    bytes_0 = b"Rl\xef\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    set_0 = set()
    module_0.match(set_0, set_0)


def test_case_2929():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2930():
    str_0 = "4b0-'6){{F5%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    int_0 = -1190
    dict_0 = {}
    bool_0 = True
    tuple_0 = (int_0, dict_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_2932():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2933():
    float_0 = -1974.52096
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    int_0 = -3190
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    dict_0 = {}
    bool_0 = False
    list_0 = [dict_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    complex_0 = 2040 - 2916.4j
    tuple_0 = (complex_0, complex_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    bytes_0 = b"\xa9;,\xff\x99\x84\x9af\xc3\xe2\xf4\xf6}N\xe7x\x06u\xc1"
    set_0 = {bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    int_0 = -3463
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    str_0 = "43If>;>7\r^\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    bytes_0 = b"\xb9\xbb,=q\xbd\xb8\xc5\xef&B:A\x9d8jw^\xb9'"
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bytes_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    bytes_0 = b"\xe1\xe9\x1d\x00\xdfv\xc5\xec\\\x18\x1e\xb5vN\xe0c6\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, dict_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    bytes_0 = b"p\x83\xd0_\x83\x83\xd5\xc2\xee\xa8\xbbk\xadb?"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    float_0 = 3167.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    bytes_0 = b"3\xa6\xa3\xe2\xd4\xf9-\xb0\xccW\xa9\x80Wa\xa1@{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    str_0 = "2TQZ(6"
    none_type_0 = None
    str_1 = "Q%\\;- X+YB#^IY"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


def test_case_2952():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2953():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    float_0 = 1071.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    float_0 = -2353.584
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    float_0 = 546.57253
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    bool_0 = True
    float_0 = -427.49395
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    none_type_0 = None
    bytes_0 = b"$\xa0\xbf"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    bool_0 = True
    int_0 = 1032
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "G3-:"
    str_1 = "}&\t5Vs\x0cc;r1YNu@,}\n8^"
    dict_0 = {str_0: none_type_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    str_0 = "s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    int_0 = 90
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    int_0 = 726
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    bytes_0 = b"\x1a\xceg*\x8e\xa5\x86|\xd9\xd2\x8d0\x86\x8d\x99\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    int_0 = -2814
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    bytes_0 = b"\x8d\x14\xa6v\xe3\x13\x9d\x89\xa0\xc1\x9d5\xb9"
    bytes_1 = b'\x9a"\x19'
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    str_0 = "=W9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    bytes_0 = b"\x94\xc1T\x1b3B*Q\xad\x87\x89$\xab\xc2\xd1\xec\x08\x9e\xba"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, dict_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    complex_0 = 1574.3 + 1558j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    str_0 = 'D|,&7ae;%k`}{+_"JxS'
    int_0 = -477
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    str_0 = "TOtO}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    bytes_0 = b"4vE\\\xa7\x0b\x06\xf7\xe5y\xcd\xe3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    int_0 = -586
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    bytes_0 = b"\xa4\xb4\xbe\xf8\x90"
    int_0 = 1665
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    str_0 = "#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    str_0 = "\r9C%!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    float_0 = -1978.3808
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    str_0 = "Ypi,"
    set_0 = {str_0}
    tuple_0 = (str_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    str_0 = "P.]+\\,k?2l"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    str_0 = "4 *'3;{\"~Zm{I"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2984():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2985():
    float_0 = 2472.261009
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    float_0 = -206.8551
    str_0 = "Ab0,("
    str_1 = ""
    dict_0 = {str_0: float_0, str_1: str_1, str_1: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    int_0 = -2442
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    str_0 = "\r<Gv]OZX<\x0cF|]"
    str_1 = "L^#>."
    module_0.match(str_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    str_0 = "jd_eZ@\\nU"
    str_1 = "9{/v*ct,53/^)bO]"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    str_0 = "{UH!6Va|)}}HSx"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    int_0 = -2458
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    bytes_0 = b"\x9e\xfb\xb7ij\xbcQ_\xcd\xd3\xb1V/"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    float_0 = -55.3005
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    int_0 = -652
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_2998():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    str_0 = "Mj9]$6E~FlpS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    str_0 = "Q(?~qqrsI[S"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    str_0 = "2H6\tqt5,N2_<6`zzDHen"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    int_0 = 581
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    int_0 = -1767
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    float_0 = 241.1377
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    object_0 = module_1.object()
    list_0 = []
    float_0 = -928.93
    tuple_0 = (object_0, list_0, float_0, list_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    bytes_0 = b"\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    bytes_0 = b"#q\xcd\xb2.o\xc7u\xcag\xa5\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    float_0 = 2332.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    str_0 = "{.2hL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    bytes_0 = b"\xa9\xdc"
    float_0 = -2579.211602
    tuple_0 = (bytes_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.object(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    int_0 = 920
    str_0 = ":Z6#'"
    tuple_0 = ()
    tuple_1 = (int_0, str_0, int_0, tuple_0)
    dict_0 = {tuple_1: str_0}
    dict_1 = {}
    module_0.get_new_command(dict_0, dict_1)


def test_case_3013():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3014():
    int_0 = -333
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    str_0 = "Wr\n/3b\r3r|bUbFA?5Jk"
    int_0 = -2283
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    tuple_1 = (str_0, int_0, dict_0, str_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    float_0 = -149.53252
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    str_0 = ""
    str_1 = " Hd5yV"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    int_0 = -1156
    bool_0 = True
    str_0 = ":L\x0bz"
    bool_1 = False
    tuple_0 = (int_0, bool_0, str_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    str_0 = "nYQc@51]"
    bool_0 = False
    set_0 = {bool_0, str_0}
    dict_0 = {str_0: bool_0, bool_0: set_0, str_0: set_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    int_0 = -2640
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    bytes_0 = b"\xca\xf1=G\x8a|\xa9u\xc6\xc3\x05AMq\x9d\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    int_0 = 3135
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    float_0 = -657.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    str_0 = ' lM$T"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    str_0 = "![ub\x0b1n;hU\nev`%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    str_0 = "w#JZ!0^^Cb_6e"
    int_0 = 287
    dict_0 = {str_0: int_0, int_0: int_0, int_0: int_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    str_0 = 'q"FsZ"&bm/v1@#n[bi}'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    int_0 = -3001
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    str_0 = "mkT:r9)\tB^D\\"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    int_0 = -47
    set_0 = {int_0, int_0, int_0}
    dict_0 = {}
    module_0.get_new_command(set_0, dict_0)


def test_case_3031():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3032():
    float_0 = 257.0
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    int_0 = -1783
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    int_0 = 1379
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    int_0 = -781
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    int_0 = -1696
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [dict_0, tuple_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    bytes_0 = b"\x05\xa4\xa4.\xefx"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    complex_0 = -2826 + 598.54914j
    set_0 = {complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    complex_0 = -3615.444 - 2504.75j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    float_0 = -997.20525
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    str_0 = '\x0bQu%:;}ySg\nC"sN\x0cJ#'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    str_0 = "h;}A|tY8R"
    tuple_1 = (bool_0, tuple_0, tuple_0, str_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    str_0 = ":vp"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


def test_case_3047():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3048():
    str_0 = "X\x0bF1\x0b11@$F87y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    float_0 = 2491.047
    str_0 = 'w_QXyOU"+F])Fw'
    bool_0 = False
    tuple_0 = (float_0, str_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    str_0 = 'LK"-P{my2)'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    str_0 = "h"
    bytes_0 = b"\x87j\x12\x15\xb2\xee\x8a\xbe\xc0\xe5"
    tuple_0 = (str_0, bytes_0)
    dict_0 = {tuple_0: bytes_0}
    list_0 = [dict_0, bytes_0, tuple_0, str_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    bytes_0 = b",\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    set_0 = set()
    list_0 = [set_0]
    tuple_0 = (set_0, list_0, set_0)
    list_1 = [set_0, set_0, tuple_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    str_0 = "7-?ll^M@B2ho.bQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    bytes_0 = b"\x9d\xc7\xefT\xfc\xa8\xa8\xf8\xe6\xd0\xa0\xb8iz\xa0\xeaz"
    float_0 = -301.131
    tuple_0 = (bytes_0, float_0)
    complex_0 = -411.227405 + 594.38405j
    list_0 = [tuple_0, complex_0, complex_0, complex_0]
    tuple_1 = (list_0,)
    list_1 = [tuple_1, tuple_0, bytes_0]
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    str_0 = "y7~dtSk>oi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    float_0 = 2167.4522
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    bytes_0 = b"\xab?J\x92\x0b\xfa8:\xe7\x00\xcb\xa10\x9c\x93\xb78"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    str_0 = "u5ho%sK0/(<"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    bytes_0 = b"7a\xb6\xf7E1\xba\xca\xcc\x82\n!w\xf1r\x1b\xb6\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    str_0 = "2=;kwRwv"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    str_0 = "2~Q\n4/-"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


def test_case_3064():
    pass


def test_case_3065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3066():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    bool_0 = True
    bytes_0 = b"q4\xbcx%A"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    bytes_0 = b"\xed\xed\x07;\x16Q"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    int_0 = 334
    object_0 = module_1.object()
    dict_0 = {int_0: object_0, object_0: object_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    bytes_0 = b"\xa3\xc3\xcdh"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    str_0 = "%#Yu+=N-7"
    module_0.match(str_0, str_0)


def test_case_3072():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3073():
    str_0 = "v"
    int_0 = 2027
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    bytes_0 = b"\x1e\xdfT_\xe5\x94T\xb8G\xb6\x12\x08\xd3/\x16\xf5h"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    int_0 = -1101
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    complex_0 = -938 - 2813.55617j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    float_0 = 2062.943
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    bytes_0 = b":\xa6t\x82\xda\x15F\x87\xccw>/\xe1^\xdb\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    int_0 = -51
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    int_0 = -2717
    module_0.get_new_command(int_0, int_0)


def test_case_3084():
    pass


def test_case_3085():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3086():
    float_0 = -2589.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    str_0 = "- XX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    bytes_0 = b"\x9c\xae\x16Y\x8e\xd8\x02\xa9\xf0\xbc\nh\x02\x13"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    bool_0 = True
    float_0 = -3076.0
    set_0 = {float_0}
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    int_0 = -455
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    str_0 = "^"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    int_0 = 5634
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0, int_0, tuple_0]
    list_1 = [list_0, tuple_0]
    dict_0 = {}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    float_0 = -668.94
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_3094():
    pass


def test_case_3095():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3096():
    str_0 = "V7lUHk)@DibS`\x0c }m!P+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    bytes_0 = b"\x19\xe0+P\xb6B\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    bytes_0 = b"\xbc\xd2Yj\xb0\xb2\xcb\xc7w"
    bytes_1 = b"\x1a\xc8o\xcdF\x07$S\xec\x1f\x8a\xd3\xc22\xf2o"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_1}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    int_0 = -447
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    bytes_0 = b"p\xa7\xfbk_ZF!Wy\xd4\xf6\x03>^:\x15Lr9"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    bytes_0 = b"/\xe7c3\xe8\x9cp\x8cw\x16\xc9Hs!D\xd29"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    int_0 = -406
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    int_0 = 1570
    bytes_0 = b"\x92r\x196\x04\xe7=\xeb\x99\xa9\xc3As"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    bytes_0 = b"\xd6\x98\xc2tu\xeb\xa0\x9a\x146\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    float_0 = -944.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    bool_0 = False
    bool_1 = False
    float_0 = 167.0
    tuple_0 = (bool_0, bool_1, bool_1, float_0)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    int_0 = 562
    module_0.get_new_command(int_0, int_0)


def test_case_3109():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3110():
    int_0 = 3624
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    int_0 = -3119
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    bytes_0 = b"\xf8x\x9ea\x91\xf2$\xd1c\xc2\xdb\xe5v\xec\xa4\xb3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    int_0 = 2384
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    int_0 = -73
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    complex_0 = 3115.03 + 292.9j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    float_0 = 188.04219
    list_0 = [float_0, float_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    bytes_0 = b"d\xc7\xeb\xf7\x80-?\x8e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    str_0 = "kJg 71se#F~\r7"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    bytes_0 = b"d\x9f\x9f~\xdboY`\xcc\xd1\xa7\x85Z\x8e\xc7\xbd\x8d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


def test_case_3124():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3125():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    dict_0 = {bool_0: set_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    bytes_0 = b"\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    complex_0 = 836.873 + 2581.5693j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    complex_0 = 960.3 + 891.07597j
    float_0 = 2172.5137
    module_0.match(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    bytes_0 = b"\xd7\xf5\xee?Q7\xf2\x07\xeaao'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    bytes_0 = b"RkW\xbe\xb4r\x90\x91n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    float_0 = -2901.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    float_0 = 2561.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    int_0 = -1996
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    str_0 = 'W$^!px"P\x0btWi'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    str_0 = "-/S9%B]ZDI*Ebk1,a"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    bytes_0 = b"\xb7\x8e\x8f\xc9z\x01\xb1\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    str_0 = "!k!o>Lc)(M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    str_0 = "iLy"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    int_0 = -1521
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    str_0 = "1yjp>"
    bool_0 = True
    set_0 = {str_0, str_0, bool_0, str_0}
    bytes_0 = b"vN1\x95%)\x17[\xe6\x83\x8dw\xf0(\xdc"
    tuple_0 = (set_0, set_0, bytes_0)
    tuple_1 = (tuple_0, bool_0, str_0)
    tuple_2 = (str_0, tuple_1)
    list_0 = [tuple_2, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    float_0 = -3766.0
    object_0 = module_1.object()
    module_0.match(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    none_type_0 = None
    str_0 = "U\x0cP{BF'O4 y%A@"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    complex_0 = 2991.4013 - 1771.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    int_0 = -2250
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    float_0 = -1697.80947
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    int_0 = -2655
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    str_0 = "VTBZ!KoJR. 8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    bytes_0 = b">\xedY-\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    tuple_0 = ()
    list_0 = []
    tuple_1 = (tuple_0, list_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    complex_0 = 2745 - 1487.9j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    str_0 = "O5Js"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    bool_0 = True
    str_0 = "\x0b ='#"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    bool_0 = False
    int_0 = -981
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    int_0 = -270
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    str_0 = "J9(\\KO\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    int_0 = 760
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    str_0 = '`)M\\=kz2<"X'
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    int_0 = 3726
    bytes_0 = b"\xb6\r\x84qhH\xd6\x98;\xc7\x9e\xbe!"
    tuple_0 = (int_0, bytes_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    float_0 = -3662.79066
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_3163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3164():
    bool_0 = True
    complex_0 = -2017.91 + 4552.68962j
    dict_0 = {bool_0: bool_0, complex_0: complex_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    bytes_0 = b"\xe2\x8e\x17<\xac\x92J%\x0c#\x86E\x9e\xe9^\x98\xbf\x9c\x97\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    float_0 = -3219.358
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    str_0 = 'TS*"0I*)zP'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    bytes_0 = b'"H\x07'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bytes_1 = b"\xc4\x08\xc4\x08b\x18^\xaeH$2c1\xf7\xe5\t\x19\xfb"
    module_0.get_new_command(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    int_0 = 2298
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    int_0 = 551
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    str_0 = "Ujj1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    bool_0 = True
    str_0 = 'zk*Mp"?jZ{ySoO4Ly(F#'
    list_0 = [bool_0, str_0]
    dict_0 = {}
    tuple_0 = (bool_0, list_0, dict_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    str_0 = "bqGv"
    complex_0 = -87.379284 - 1658.36j
    tuple_0 = (str_0, complex_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    bytes_0 = b'\xa7\x8e\xa4\r\xa9\x9f? "\x7f\xc9\xa8\xa0'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    int_0 = 406
    str_0 = "?(Qy\t.0XK3%"
    set_0 = {int_0, str_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    bytes_0 = b"H=g\xe8[\x85\x9f\xcc\x16,Te\t\x81\x93e="
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    str_0 = "|Wjj\r~\x0cE=AZU%`s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    str_0 = "eR5Vn$iJPh:,qVa11u"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    complex_0 = 1638.207042 - 976j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


def test_case_3182():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3183():
    bytes_0 = b"\xabD\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    str_0 = "=s85"
    str_1 = "z+ZdiZr<!8<B?$KZw\x0cGR"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    bytes_0 = b" p\x1c`u!\x17\xa1\xba\x8a\xad\xf5\xe1\x15\xa2\xc9\x17\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    bytes_0 = b"Z\x17"
    bytes_1 = b"\x08\x85\x90\xa3^\xa4. F\xe1\xc3\x94\x06\x8cx"
    tuple_0 = (bytes_0, bytes_1)
    set_0 = {tuple_0, tuple_0, bytes_1, bytes_0}
    str_0 = "iTRnRS}\rnSJgQ\\"
    bytes_2 = b"\xcf\x8a\x92\xdf\x0b\x13\xcb\xfe\x89\xa1\xdb"
    tuple_1 = (tuple_0, set_0, str_0, bytes_2)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    str_0 = "-bTv2dTwDEsdX#N9'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    complex_0 = -920.433948 + 1007.128j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    complex_0 = -902.202 + 2725j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    bytes_0 = b"E\xa9\xc4w\xa0\xfe\xf7)\xc0m\x1b\x04\xd0@P\xeb\x1a\xa8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    bytes_0 = b"\xcag\xc8\xb0\xc2\xe4Tr"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    str_0 = "$+>f-]RcQ9(72i39"
    module_0.get_new_command(str_0, str_0)


def test_case_3196():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3197():
    bytes_0 = b'"\xb6\xda|!'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {bool_0: tuple_0, tuple_0: tuple_0, bool_0: bool_0, tuple_0: bool_0}
    str_0 = "g$RYXav{CU;\n~L0V?"
    tuple_1 = (str_0,)
    module_0.get_new_command(dict_0, tuple_1)


def test_case_3199():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3200():
    float_0 = 2437.2
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    float_0 = 2379.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    str_0 = "B-|L\"WlPPS,'[='^xfD?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    int_0 = -1442
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    int_0 = -2008
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    int_0 = -7991
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    complex_0 = -2280.536904 - 1476.7j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    complex_0 = -150.543091 + 949.82423j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    bytes_0 = b"\x0b`s)\xfa_\xfa+usj@\r"
    int_0 = 620
    tuple_0 = (bytes_0, int_0)
    module_0.match(tuple_0, bytes_0)


def test_case_3209():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3210():
    int_0 = 1362
    module_0.match(int_0, int_0)


def test_case_3211():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3212():
    float_0 = 1047.23851
    int_0 = 3031
    list_0 = [float_0, float_0, float_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    str_0 = "=X-Jk\r_QIZ(oKolE9"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(object_0, list_0)


def test_case_3215():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3216():
    float_0 = -1825.15022
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


def test_case_3219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3220():
    bytes_0 = b"\xc9goH\xa7\x0e\xda\x0e\xbd"
    list_0 = []
    bytes_1 = b"\x13"
    tuple_0 = (bytes_0, list_0, bytes_1, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    int_0 = -614
    set_0 = set()
    bytes_0 = b"\x85\xa1}\xfd\xfd[Ct\xb5\xcf+w\xee*\xf3f\xdf'"
    tuple_0 = (int_0, set_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


def test_case_3223():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3224():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    bytes_0 = b"\x0b"
    module_0.match(bytes_0, bytes_0)


def test_case_3226():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3227():
    int_0 = -623
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    float_0 = -1533.3167
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    bytes_0 = b"S\xe7\xcam\xc5A\xcc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    none_type_0 = None
    int_0 = 865
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    float_0 = 2873.662901
    int_0 = 2582
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    float_0 = 545.48
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    complex_0 = -739 - 3009.251j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    bytes_0 = b"\xc8\xab\xbf%\xe0e.Tr\xeak\xf1<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0)


def test_case_3236():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3237():
    str_0 = '(c@zg9L:(MT3*)MA&Di"'
    set_0 = {str_0}
    tuple_0 = (str_0, str_0, set_0, str_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    int_0 = 3285
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    bytes_0 = b"*\x81\xdb\x16\xb5s\xf1F"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    int_0 = -2853
    module_0.match(int_0, int_0)


def test_case_3241():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3242():
    bool_0 = False
    bytes_0 = b'+Z\xc6\xbaHi\x8c\xc8\xec\x9d\x04"\xd3=\xf2'
    dict_0 = {bytes_0: bool_0}
    tuple_0 = (bytes_0, bool_0, bytes_0, dict_0)
    tuple_1 = (bool_0, tuple_0, dict_0, dict_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    str_0 = "dSC0)neO.O1 3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    dict_0 = {}
    dict_1 = {}
    bool_0 = True
    tuple_0 = (dict_0, dict_1, bool_0)
    bool_1 = True
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = ()
    tuple_1 = (bool_0, dict_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    int_0 = -2481
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    bool_0 = False
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    int_0 = 341
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    int_0 = -2662
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    float_0 = 3104.75989
    set_0 = {float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    str_0 = "vZ]\x0b7XQ`Dv"
    none_type_0 = None
    str_1 = "*@7\r[e"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    int_0 = -1990
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    str_0 = "-x*6h\nr@8^Ns"
    float_0 = 52.77953
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    str_0 = 'ze-]0"9\\7u)'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    bytes_0 = b"\xc5\xc0\xf2e[\xf9\xdd\x84"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3259():
    complex_0 = -963.8 + 2041.742395j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    bytes_0 = b"\x02|Yc\xc12\xdb\xaa\xad\xb4\x8c\x93\x91"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    int_0 = 1682
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    float_0 = 605.3782
    bytes_0 = b'^\x08\x010Wi\xf9\x83\x92">\x80-'
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_3264():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3265():
    bool_0 = True
    float_0 = -1687.8193
    set_0 = {bool_0, float_0, bool_0, bool_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    str_0 = "u2(A\x0b\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    complex_0 = -141 - 1582.518j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    float_0 = -1900.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    int_0 = -2379
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0, int_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    str_0 = "\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    int_0 = -2599
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    bytes_0 = b"\xa2ps\x06n#i\x0f\x82,\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    int_0 = 2907
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    str_0 = "SRp2NW\n@`#c"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


def test_case_3277():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3278():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = False
    tuple_0 = (bool_0, set_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    str_0 = "UU=py@LS"
    int_0 = -486
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    float_0 = 423.902
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    str_0 = "$&|'0 :~U]<-"
    float_0 = 2101.67
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    complex_0 = 2437.399 - 3842.7j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    float_0 = 805.194
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    str_0 = 'o!8Ti @W"ub?<cL'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    bytes_0 = b"(\xcf8\x96&\x13\x92\xa0\xbe\xe9$$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    complex_0 = -1332.429 - 453.7j
    set_0 = {complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    int_0 = -2093
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    float_0 = -4588.821
    list_0 = [float_0]
    float_1 = 1922.0673
    tuple_0 = (float_0, list_0, float_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    str_0 = "J9ad3PyF<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    str_0 = "M75#F`mffuW[J\rtng+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    int_0 = 1312
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    int_0 = -3431
    set_0 = {int_0}
    list_0 = [int_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    int_0 = 889
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    float_0 = 637.795607
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    str_0 = "eP1\tFs\n9d"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    complex_0 = -339.54 - 3208.100081j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    int_0 = 1783
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    int_0 = -1012
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3302():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3303():
    int_0 = 1374
    str_0 = "BS.h'$G\x0bb -"
    float_0 = 1753.7
    tuple_0 = (int_0, str_0, str_0, float_0)
    module_0.match(tuple_0, str_0)


def test_case_3304():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3305():
    int_0 = -2005
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    str_0 = "5\r>Xn51O\x0c<N"
    module_0.get_new_command(str_0, str_0)


def test_case_3307():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3308():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    int_0 = -1948
    int_1 = 1858
    tuple_0 = ()
    tuple_1 = (int_0, int_1, tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    bytes_0 = b"\xe3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    bytes_0 = b""
    bytes_1 = b"\x83\xd1\xa9\xd3\xd5\xcc\xcd\x19\x1c\xaf\x01\x8fk\xb066\xb5\x81\xfc"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    bytes_0 = b"\x87\xb4\x0e\xeaP"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    str_0 = " 8X)l{et'X]cDF\"0yS"
    str_1 = "`CYLW>dyX`E[IL+i"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    str_0 = "7L>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    float_0 = -451.0
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = True
    tuple_1 = (float_0, bool_0, tuple_0, bool_1)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    int_0 = 693
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    bytes_0 = b"\xc6f\xf4\x89T\xdd\xae6\xc2\xc8"
    set_0 = set()
    dict_0 = {bytes_0: set_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    complex_0 = -2696 + 2235.6782j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    bytes_0 = b"\xad3\xf5\xa2\x93\xa9(\r\xe9Q\xcf\x06\xd9\x9e\xf0\xee\x0c\xeb\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


def test_case_3321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3322():
    bytes_0 = b"\x02\xd6@\xda\xfe\xe3m[Sr\xd8\x8d\x07=\x97`3\xbf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    str_0 = "+z|xIdZxs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    tuple_0 = ()
    bool_0 = False
    set_0 = {tuple_0, tuple_0, bool_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    int_0 = 1369
    tuple_0 = (int_0,)
    float_0 = 1347.7
    list_0 = [tuple_0, tuple_0, tuple_0, float_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    set_0 = set()
    float_0 = 1455.8
    list_0 = [set_0, set_0, float_0]
    bytes_0 = b"\xf2\x89\x1e,"
    tuple_0 = (list_0, list_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    bytes_0 = b"\n\x85\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    float_0 = -2987.925
    list_0 = [float_0, float_0]
    tuple_0 = (float_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    int_0 = -1419
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    int_0 = 794
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    int_0 = 2484
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    bytes_0 = b"\xb1\xa2\xaa\x06\xa9\xaeW\xb6\x98P\xe1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    float_0 = -2938.0
    tuple_0 = (float_0,)
    set_0 = {tuple_0, tuple_0, tuple_0, float_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    object_0 = module_1.object()
    set_0 = {object_0}
    int_0 = -279
    tuple_0 = (set_0, int_0, int_0, object_0)
    list_0 = [tuple_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    int_0 = 401
    module_0.match(int_0, int_0)


def test_case_3341():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3342():
    bytes_0 = b"\x1bRPO"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    bytes_0 = b"\nv\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    str_0 = ";J_1bm[\nRh/h<"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_3345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3346():
    str_0 = '8"ze.Rz!G\x0b#IgnC'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    str_0 = "ABP7n#+]4TBTP,?Rj"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    bytes_0 = b"\xfc\x06\x89o\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    str_0 = "\x0bmA+wl`Cm`_2ft"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    str_0 = "[:gd"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_1: bool_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    str_0 = "\\\x0cO0kwc1;_5hV@Os!$F"
    dict_0 = {bool_0: bool_0, bool_0: tuple_0, tuple_0: str_0, str_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    float_0 = 3216.13
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    complex_0 = 675.99 - 1916j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    str_0 = "nw>6MmI|P~]vq.K,a<"
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0, str_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    str_0 = "fy"
    str_1 = "?OgR!h~6!\\)7"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    str_0 = "9S"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    bytes_0 = b"\xa9"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    int_0 = -1160
    list_0 = [int_0, int_0, int_0, int_0]
    bytes_0 = b"\xa5\xc3\x80\xd7@KIa\xff\xce"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    int_0 = -1486
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    str_0 = "_YF~ej\nE[|`w6SqCJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    int_0 = 37
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    str_0 = "j8ye"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    int_0 = 763
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    int_0 = 3515
    module_0.get_new_command(int_0, int_0)


def test_case_3369():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3370():
    str_0 = "\x0b1l\r1v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    str_0 = "G  }#$w{C/hE\n&#\nz`"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    str_0 = "%`5\x0brrA@Q#73}"
    str_1 = "L&wtlu)'2&5*\rlB\"s"
    dict_0 = {str_1: str_1, str_0: str_1}
    str_2 = "m&(\n"
    bool_0 = True
    dict_1 = {str_0: str_0, str_1: dict_0, str_2: bool_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    bytes_0 = b")>(1hNu\x88$\xe7\x1d\xad\x15"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0, bytes_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    str_0 = "s~,e%mo/\x0bp5Z?e\x0bqws"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    str_0 = "4ofWFHR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    str_0 = "tn''r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    bytes_0 = b"\xc2\xd72\xe9\xa3]\xd7\x04QI\xcd\xb8\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_3379():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3380():
    str_0 = "k_~jG9ZB:;},1g"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    int_0 = 1792
    str_0 = ""
    float_0 = 321.4752
    tuple_0 = (int_0, float_0)
    tuple_1 = (str_0, int_0, int_0, tuple_0)
    module_0.match(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    int_0 = -217
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    bool_0 = False
    float_0 = -2070.5
    bytes_0 = b"\xf9\x07\x9c\x95\xa1AB\x83j\xd73f+Rb"
    tuple_0 = (bool_0, float_0, bytes_0)
    bool_1 = False
    str_0 = "X3,\x0bx+r34,*V^7Jp94B"
    bool_2 = False
    tuple_1 = (bool_1, bool_0, str_0, bool_2)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_1, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    int_0 = -1199
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    int_0 = 389
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    float_0 = 2092.988
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    list_0 = [set_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0, object_0]
    tuple_1 = (object_0, tuple_0, list_1, tuple_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    float_0 = 1040.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    int_0 = 374
    module_0.match(int_0, int_0)


def test_case_3394():
    pass


def test_case_3395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3396():
    float_0 = 1286.279753
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (float_0, bool_0, float_0, list_0)
    module_0.match(tuple_0, list_0)


def test_case_3397():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3398():
    bool_0 = False
    module_1.object(**bool_0)


def test_case_3399():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3400():
    none_type_0 = None
    int_0 = 2306
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    bytes_0 = b"s\xbe2M\xdcf\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3402():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3403():
    bytes_0 = b"\xc3=\xca\x169\xc9r\x98\xf7\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    str_0 = "K~5rN||nsQ2dwR\x0b\x0bSG\n"
    str_1 = "eZ\n\x0b&fyD\\e}b!;Y~A"
    bytes_0 = b"\x01)\x0c\x1e\x9a\x98xM\xbb&\xcb\xb9A\xdf\x08a\x95\xd4"
    bool_0 = False
    tuple_0 = (str_1, bytes_0, bool_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    int_0 = -793
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    int_0 = 1100
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    str_0 = ""
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    bytes_0 = b"n\xbb\xb8\xcd8\x8a\xb1\x9c?.\x1fYro\xda\xf4-r\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    bool_0 = False
    str_0 = ""
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    bytes_0 = b")\x81\xfe\x1dr\xa0\xbe1\xb6\x1f\xa1\xa1\xc6F\x95\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    bytes_0 = b"N\xa8\xfe\xddY\xe2\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bytes_0 = b"\x96\xf4;\xe7_\x01\xd8c\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    float_0 = -771.938
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    bytes_0 = b"\x05$\xcb\xfd\x90m'"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    float_0 = 5984.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    bytes_0 = b"\xa9\x07z\xa3\xf9\x90\t\x03\xe2\x1c\xf0/\xba\x99[\xf1\xa6Z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    int_0 = 203
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    float_0 = -219.1
    list_0 = [float_0, float_0, float_0, float_0]
    dict_0 = {float_0: float_0, float_0: list_0, float_0: float_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0, dict_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_3419():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3420():
    int_0 = 1877
    list_0 = [int_0]
    module_1.object(*list_0)


def test_case_3421():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3422():
    float_0 = -43.97
    module_0.get_new_command(float_0, float_0)


def test_case_3423():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3424():
    int_0 = 1035
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    int_0 = -1803
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    str_0 = "X"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    complex_0 = 411.881246 - 789.129j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    str_0 = 's6TLPD"A\x0c\nBeYl'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    int_0 = 1335
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    str_0 = "%\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    str_0 = "9H_M_'\x0bR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    str_0 = "@pv;x"
    bool_0 = False
    set_0 = {bool_0, str_0}
    int_0 = -371
    int_1 = -72
    tuple_0 = (set_0, int_0, int_1)
    dict_0 = {str_0: str_0, bool_0: str_0, str_0: bool_0, bool_0: tuple_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_3433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3434():
    str_0 = "$31\x0bnvS&bHW85/"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    int_0 = 1599
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3437():
    int_0 = -1491
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    str_0 = "i}hi9qX(=M_3XH-@[;"
    set_0 = {str_0, str_0}
    list_0 = [set_0, set_0, set_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    bytes_0 = b"\xe4:\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    int_0 = 1162
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    float_0 = -1085.4
    list_0 = [float_0, float_0, float_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    str_0 = "s^@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    str_0 = "x$y:'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    int_0 = -1179
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    complex_0 = -614.72 + 2676j
    set_0 = {complex_0}
    dict_0 = {}
    tuple_0 = (complex_0, set_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    bytes_0 = b" 2\xf8\x06`\xc9FA<\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    bytes_0 = b"\xe0\xf0\x99\xa4C\x8b\xea\xed\xf1\xb8\xceY\xb5\xa3Y\x86\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    complex_0 = 1887.344187 + 1276.2178j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    str_0 = "#aF%\\q<>@\\$5L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    float_0 = -3520.8855
    module_0.get_new_command(float_0, float_0)


def test_case_3452():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3453():
    bytes_0 = b"\xbd9w"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    int_0 = -1115
    module_0.match(int_0, int_0)


def test_case_3455():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3456():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    float_0 = -329.83953
    object_0 = module_1.object()
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    complex_0 = 515.048 + 2903.118j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    complex_0 = -4760.1473 - 1763.6756j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    none_type_0 = None
    int_0 = 1086
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    str_0 = "WCVG+\\nxs{#_r&~#"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    str_0 = "ni[w\r,tDwgRuv~?aQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    str_0 = "op45\x0b"
    module_1.object(*str_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    object_0 = module_1.object()
    float_0 = -900.47667
    module_0.match(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    int_0 = -206
    int_1 = -430
    dict_0 = {int_0: int_1, int_0: int_1}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    str_0 = "x|"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    object_0 = module_1.object()
    list_0 = [object_0]
    list_1 = [list_0, list_0, list_0, object_0]
    list_2 = [list_1, list_0, list_1]
    module_0.match(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    int_0 = 367
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    int_0 = 1767
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    int_0 = -2306
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    float_0 = 1580.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    str_0 = "MP"
    str_1 = "A2"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    int_0 = 779
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    bytes_0 = b"L\x89\xbe\x18\x91\xaf2\x9a\xc4\xe74\x93\xb3\xeeGak\xdf\xcc"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    str_0 = "HPRR^L@(3E?1;(Eo"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    int_0 = 2792
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    float_0 = -407.489315
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    bytes_0 = b"\xeb\x97{\x9as\x05<\x13\x8c!\x01\xc3\xaeQ\xed\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    str_0 = "vbl\x0cn1$R\x0co1=Z*v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    int_0 = -1905
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    str_0 = "g.kc^?rZ[OI$w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    bytes_0 = b"\xb8\x88W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    complex_0 = -2113.331 + 1270.900459j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    int_0 = -3291
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    bytes_0 = b"r\x04\xff\xa8\x84\xe9*\xfb\x1ae\x81?\xa9"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    int_0 = -1357
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    object_0 = module_1.object()
    str_0 = '6$]#_v_9\\X-"N(^:'
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    int_0 = -1939
    bytes_0 = b"\xb5\xa4G\x07\xe9\xce\xc1W\xb7\xe4\x91\xd3\x8c\xce\x890\xf3\xfc\x14\xbc"
    dict_0 = {int_0: bytes_0, bytes_0: int_0, int_0: bytes_0, int_0: bytes_0}
    int_1 = -1980
    float_0 = -1927.84
    tuple_0 = (dict_0, int_1, float_0)
    module_0.get_new_command(tuple_0, dict_0)


def test_case_3496():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3497():
    str_0 = "UnSl:hy9eDKb\x0b*OGm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, dict_0, bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    str_0 = "zpX\t^R"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    bytes_0 = b"\x1c\x9a\xbc\x10Q\x994\xdb\xff"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    bytes_0 = b"\xf4\xf8$c\x9aveS2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    bytes_0 = b"\x05 $\xe1_\x7f[7\xc0X2\x9c\xe4\xeag\xbb\x95\xd1)\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    int_0 = -551
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    bool_0 = False
    set_0 = {bool_0, bool_0, tuple_0}
    str_0 = "`_^4a*3pHB"
    tuple_1 = (dict_0, dict_0, set_0, str_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    int_0 = -3084
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    str_0 = "("
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    none_type_0 = None
    int_0 = 612
    tuple_0 = (int_0,)
    module_0.get_new_command(none_type_0, tuple_0)


def test_case_3510():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3511():
    int_0 = -4445
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    int_0 = 2502
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    float_0 = -2390.04
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    bytes_0 = b"\x9a\xe6'"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    bytes_0 = b"\xd2\nx\x8b\xa3N\xd4O\xf3\x00Q\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    str_0 = "1{\x0bR|sN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    bytes_0 = b"\x0c\xff\xac\xa6)A\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    int_0 = -1819
    module_0.get_new_command(int_0, int_0)


def test_case_3519():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3520():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    set_0 = {tuple_0, object_0}
    list_0 = [tuple_0, set_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    float_0 = 2492.7143
    dict_0 = {float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, dict_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    int_0 = 207
    module_0.get_new_command(int_0, int_0)


def test_case_3524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3525():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    complex_0 = -1209.2 + 1827.52726j
    module_0.match(complex_0, complex_0)


def test_case_3528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3529():
    int_0 = -2270
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    bytes_0 = b"'`\xba?\x08\x8e\xb5\xfa\xbf\xfb\xab\x97!\x05=\xe1X\x16."
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    float_0 = 1040.1158
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    int_0 = -1429
    set_0 = {int_0, int_0}
    bytes_0 = b"AO"
    bytes_1 = b"(\xc27"
    complex_0 = -537.36 - 1488j
    tuple_0 = (set_0, bytes_0, bytes_1, complex_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    str_0 = "l7Vx5OAP8ws`7/w\x0b:)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    str_0 = "<or:v"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    float_0 = -962.0
    list_0 = [float_0]
    module_0.match(list_0, float_0)


def test_case_3537():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    int_0 = -971
    float_0 = -2360.3
    tuple_0 = (int_0, int_0, float_0, float_0)
    set_0 = {int_0}
    bool_0 = True
    list_0 = [set_0, float_0, float_0, bool_0]
    tuple_1 = (tuple_0, list_0, float_0, list_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    bytes_0 = b"-\xef\\\xdf^u\xa1O2LJ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    str_0 = "hC v,@e-StHgJK^At"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    str_0 = "v43_Egs(e\x0bI@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    str_0 = "\tV,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    str_0 = ",dK|d*/$pxP7\x0bt0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    int_0 = -1379
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


def test_case_3548():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3549():
    list_0 = []
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    float_0 = -3431.1045
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    int_0 = -894
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    float_0 = -1213.89
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    int_0 = 588
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    float_0 = 1468.319
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    str_0 = '/V\t4#"'
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    bytes_0 = b"\xc2\xd86\x14\x8c\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


def test_case_3560():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3561():
    bytes_0 = b"\xceL"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    none_type_0 = None
    bytes_0 = b"=\xfb7,\xb2u$\x93\x18\x86G\x0cM'"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    str_0 = "?}V_7 #\\GvP*|f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    bool_0 = False
    float_0 = -4336.9
    tuple_0 = (bool_0, bool_0, float_0)
    dict_0 = {tuple_0: float_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    bytes_0 = b"\xd8\xaf^r1{y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    str_0 = ""
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    float_0 = 293.8
    list_0 = [float_0, float_0]
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    bytes_0 = b"\xcbm\xa2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    str_0 = '/]6n<Ai0$I=8&"E)'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    float_0 = -509.42589
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    int_0 = -951
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_0, bool_1}
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    str_0 = "mPO=qpN]zn1^oa\\o!7"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    complex_0 = -1554.0177 - 148.1405j
    bool_0 = False
    tuple_0 = (complex_0, bool_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bool_0 = True
    int_0 = 524
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    float_0 = -1871.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    int_0 = 1249
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    str_0 = "Ql>K[fj"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    float_0 = 562.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    float_0 = -554.7
    float_1 = -1644.56922
    set_0 = {float_0, float_1}
    float_2 = 403.19386
    list_0 = [set_0, float_2]
    list_1 = [list_0, float_2, float_1]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    bytes_0 = b"\xa1\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    bytes_0 = b"\xce?\x15W\xcb\xb5b\xcf\xd5\xa5R{d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    float_0 = -367.343
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    list_0 = []
    bytes_0 = b"\xb4\xc9"
    tuple_0 = (list_0, list_0, bytes_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    str_0 = "UxZp4N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    int_0 = 2603
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    str_0 = "/;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    bytes_0 = b"_\x88\x08\x1cX\xcc\x17\x1cg\xd4\x83\xc8\x1d\xb2\xbcG\x82"
    dict_0 = {}
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, dict_0, set_0)
    bool_0 = True
    list_0 = [set_0, bool_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    bytes_0 = b"\x06\xc8]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    bytes_0 = b".\x91\xa7\xd5\x166\x04n\xeb\xd1\xfe\x90,$\x18\xa5\xe4\xacb\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    bytes_0 = b"\x9c\xc2,\xca\xf3\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    complex_0 = 2796.72 + 1178.99j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    int_0 = 2494
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    list_0 = []
    str_0 = "u?Q?Q\nX% D![fso~^"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    int_0 = -751
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bytes_0 = b"y\xee\x19\xfe\xd8rQ\xe0\xfc\xb9\x1e\xff"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    int_0 = 882
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    bytes_0 = b"\xac+\x9f\xc0\xb3"
    module_0.match(bytes_0, bytes_0)


def test_case_3605():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3606():
    complex_0 = -392.26 + 1063.52409j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    str_0 = "i(FbuYzP;(\rRrg27\rYJ0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    bytes_0 = b"[U\xa4\x9c\x15CE\xd8\xec\x9f\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    int_0 = 2804
    int_1 = 2617
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    bytes_0 = b"\xec\x04\xbey\x8e\xc7l\x90\xa0\xd1\xb6\x06\x06]\xeb\x98"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    int_0 = 2940
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    int_0 = 701
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    int_0 = 4956
    dict_0 = {int_0: int_0}
    bytes_0 = b"K\xd9>\x7f\xef\xd3T\xb3\xf3\x84\xe8\xb7\x90\x07"
    str_0 = "3{JwS+R8hZ'"
    tuple_0 = (dict_0, bytes_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bytes_0 = b"\xe4\xd62vzQ\xea\xedsh\x12>L98\x8cS\xaa"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    float_0 = -2189.570771
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    bytes_0 = b"J\x16\x90\xbaI\xc7\x10\x81\xee\xf9\x9dj\xebt\xca\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    int_0 = 634
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    bytes_0 = b"\xe8Q\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3621():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3622():
    bytes_0 = b"\xc4@\x11\xf0\xc3?\xad,\xde\x90\x9bN\x96F"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    str_0 = "k[`Onyrayzb'9C'D"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, set_0, str_0, set_0]
    str_1 = "u\x0cQX!6h}rk.k-D(,"
    module_0.get_new_command(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    bytes_0 = b"\x8b\xcfp[\x01Jy"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bytes_0 = b"U\xa3\x8f\xdd\x14\x1e\xd74\xbbs\x87\xe0uP\xe8\xe9\xae"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    str_0 = "UH,@+P!jNU"
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    str_0 = "1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    bytes_0 = b"R\xaf\x19\x8b\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    int_0 = 90
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    str_0 = "4s6pYfmR\t*gh:a7%"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    int_0 = 429
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    int_0 = -2006
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    int_0 = -3039
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    str_0 = "Ya(+cMeyK\\"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    bytes_0 = b"\x1cu\xc8\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    int_0 = 119
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    int_0 = -54
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    int_0 = 2129
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    object_0 = module_1.object()
    int_0 = 2849
    float_0 = 561.0152
    tuple_0 = (object_0, int_0, float_0)
    dict_0 = {tuple_0: float_0}
    bytes_0 = b"9\x82{\xed\x9e\xe3\xe0{"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    str_0 = "W&d_P!;>o\\\rAM0;!"
    bool_0 = False
    tuple_0 = (str_0, str_0, bool_0)
    str_1 = "R"
    tuple_1 = (tuple_0, tuple_0, bool_0, str_1)
    module_0.get_new_command(tuple_1, str_0)


def test_case_3642():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3643():
    int_0 = -349
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    set_0 = {int_0}
    bytes_0 = b"\xf0\xed\x03\xe3\xc1\xb9\xf7"
    tuple_0 = (dict_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    complex_0 = 1421.918456 - 279.25j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    bytes_0 = b".\x0c\xd0\xd8\xf5\xa0\xe6md\xe6s\x04\x02\xc5"
    str_0 = "?!}Kp}\tP^4"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    str_0 = "yF_Va\rgS`BE0%"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    bytes_0 = b":\xc0\xc0W]\xaa\xfd\x96Z\x12\xc7\x92\x89\xbc\t\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    bytes_0 = b'\x89:"T\x97'
    module_0.match(bytes_0, bytes_0)


def test_case_3651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3652():
    int_0 = 959
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    str_0 = "\x0c-\\y~*h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    complex_0 = -2830.757133 - 130.43927j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    int_0 = -1365
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    str_0 = "++"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    bytes_0 = b"\xf2Q1b\xbe@\xe4\xd3H\xcbB\xd9\xb5\xad\xbd\xf6A\x1ev"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, bytes_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    bytes_0 = b"\xe4\x82}5n|K"
    int_0 = -870
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    int_0 = -2265
    tuple_0 = ()
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    int_0 = -1518
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    bytes_0 = b'J\x02\x07\x146o"\x90\x14\xc8\xb3e\xc3\x17O\x9a\xe7\xe6'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    int_0 = 869
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    str_0 = "+?c)q'E"
    list_0 = [str_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    list_1 = [tuple_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    complex_0 = -681.817113 + 147.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    str_0 = "Q&DBE;tjt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    bytes_0 = b"ah\xe7\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    int_0 = -1601
    module_0.match(int_0, int_0)


def test_case_3670():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3671():
    bytes_0 = b"dn\xa7\tF,[`\xd5\xfcT\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    bytes_0 = b"\xc1vCQ$?0\x03%\xa2\x1b\xb6\x11\xb4Z"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    str_0 = "\ti"
    str_1 = ""
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    int_0 = -2926
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    int_0 = 3460
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    int_0 = 1604
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    float_0 = 376.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    bool_0 = True
    set_0 = {bool_0}
    bytes_0 = b"j\xe7\xb5!\xb5"
    tuple_0 = (bool_0, bool_0, set_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    float_0 = -1309.5041
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    float_0 = 834.73
    set_0 = set()
    bool_0 = True
    bytes_0 = b"\xa7\xa6\xe5^"
    tuple_0 = (set_0, bool_0, bytes_0, bool_0)
    int_0 = -496
    tuple_1 = (float_0, tuple_0, int_0)
    module_0.match(float_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    int_0 = -1450
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    int_0 = 700
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    str_0 = "GS+\rJ13\x0c`]AgAAHf9>V)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    int_0 = 4150
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    str_0 = "Ml>,CU,I<Qq\n0`U4~7"
    str_1 = "[#o4~o6\x0b]fF:\x0ccL>_"
    bytes_0 = b"@\xcb\x8bf\xa6"
    dict_0 = {str_0: str_0, str_1: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    complex_0 = -588.7213 - 1102j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    str_0 = "ke"
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    int_0 = -101
    set_0 = {int_0}
    bytes_0 = b"\x9aS\xe0X\x82JZ&7\x93'viL\x14\xc8\xf3*\xcf\xb8"
    tuple_0 = (int_0, set_0, set_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    int_0 = -573
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    dict_0 = {}
    tuple_0 = (dict_0,)
    complex_0 = -41.07936 + 1860j
    bytes_0 = b"\xdbK\x10\xd4\xeb\x95\xc0*T\x08\xb5/j\x9d"
    tuple_1 = (tuple_0, complex_0, complex_0, bytes_0)
    module_0.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    str_0 = "%\ry"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    int_0 = -1398
    str_0 = "2zkX5G5Enc"
    int_1 = -697
    tuple_1 = (dict_0, int_0, str_0, int_1)
    module_0.get_new_command(tuple_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    complex_0 = 2222.24 - 812.3148j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    str_0 = "tJU#Jsar/3lR<\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    bytes_0 = b"\xe3\xaa\x0c;\xd3]\xe6\x98=+\xc4\x9c\x91p\xbc\xdeS"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    str_0 = '&ZjNAo"dk+B'
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    str_0 = "Bs"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    int_0 = 74
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3702():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3703():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


def test_case_3704():
    pass


def test_case_3705():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3706():
    int_0 = 2258
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    complex_0 = -662.181 - 1559.172j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    int_0 = -3219
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    bytes_0 = b"a\xb8\xd8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    str_0 = "I\r.eA"
    none_type_0 = None
    str_1 = "iM"
    str_2 = "[a@Gb6Ec_zH)pX[!"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    float_0 = 154.9
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    complex_0 = 1109.47048 + 273.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    set_0 = set()
    int_0 = -1565
    str_0 = "]^\x0bM'@>p\n@"
    tuple_0 = (set_0, int_0, int_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    bytes_0 = b"QS\t\x08\xb0\xb9)\xbd\x16\x02r\xf7\x05R"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    none_type_0 = None
    str_0 = ";~"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    float_0 = -3591.2474
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    int_0 = -484
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    int_0 = -3554
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    bytes_0 = b"*\xf5?\x83l"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    bytes_0 = b"\t\x8ch\xe6u^(\x83`\x8e\x11\x7f\xfaC\xfc\xf1P&\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    bytes_0 = b"9#6\xd2\xda\xfa\xd3r\xf7\x1c\xb2\x89gh"
    str_0 = "Uw*"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    complex_0 = -368.3588 + 1676.460798j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    str_0 = "TD8hP"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    bytes_0 = b"\x86\x16\xc1\x8b3Ah\x9a\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    str_0 = ")|X6a'mS\\~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    str_0 = "6~a8}SI-O;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    str_0 = "As?-P^V"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    bytes_0 = b"\xfd\x9e\x0b\x00\x96`'q\xeci"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    bytes_0 = b"\x19\x08\x16\xe2j\x18\xb4"
    list_0 = [bytes_0]
    str_0 = "Tw)CAk||95"
    tuple_0 = (bytes_0, list_0, str_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    float_0 = -2892.1568
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    int_0 = -2436
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    int_0 = 820
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    int_0 = -1106
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    int_0 = 2189
    complex_0 = 1792.596 - 2316j
    tuple_0 = (int_0, int_0, complex_0)
    dict_0 = {tuple_0: tuple_0, complex_0: int_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    bytes_0 = b">H\xdeJ\xf9\xea\xca=\x95g\xec\xa3\xce6"
    str_0 = "OR;a\r%c@8\r9"
    tuple_0 = (bytes_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    bytes_0 = b"\xf3\xe1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    bytes_0 = b"\xcd\xe2\xe8=\x8d\x9fUvhO\xb9\x1b\x0bCOo+\xf5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3739():
    pass


def test_case_3740():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3741():
    int_0 = 1003
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    int_0 = -130
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    int_0 = 1099
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    float_0 = -1495.07
    float_1 = 4857.51
    dict_0 = {float_0: float_0, float_0: float_1, float_1: float_0, float_1: float_1}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    bytes_0 = b"0\xd3\xe22\x87\x10"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    bytes_0 = b"\xc5\xd2-\xd2X\xbc\xb5\xd5\x97\x14\xaa\x92\xf0\x05W\xd2\xa7\xa8 "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    bytes_0 = b"R\xab\x80\x91\x88c\xce\xe8\x96\x9a\xe6\x16@\x12F\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    int_0 = -1462
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    str_0 = "j"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    str_0 = "yRr/5"
    dict_0 = {str_0: str_0}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    int_0 = 2768
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    int_0 = 4515
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    str_0 = "0:=|(w[hV"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    int_0 = 808
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    int_0 = -3037
    module_0.get_new_command(int_0, int_0)


def test_case_3758():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3759():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    str_0 = "p$w,;z\n^ZQJdLZE Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    float_0 = -1649.037805
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    bytes_0 = b"\xa1\xb6\xab;\t\xee_\x95\xf6\x80[\xb6\xd0\xd0l\xabj\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    str_0 = ";/T\x0b$"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    int_0 = -1155
    tuple_0 = (int_0,)
    float_0 = 1424.07736
    dict_0 = {tuple_0: tuple_0, tuple_0: int_0, int_0: int_0, int_0: float_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    int_0 = 2753
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    complex_0 = -890.53422 - 1370.1083j
    float_0 = 2564.343
    module_0.match(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    float_0 = 2081.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    bool_0 = False
    int_0 = -3049
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    str_0 = "fa};&L(3<VB.\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    int_0 = 1120
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    str_0 = 'Gwa|jA"PdLx,?'
    set_0 = {str_0, str_0, str_0}
    float_0 = -213.0
    tuple_0 = (set_0, str_0, float_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    bytes_0 = b"g\xb3\t\xcc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    int_0 = -56
    module_0.match(int_0, int_0)


def test_case_3775():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3776():
    int_0 = 1271
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    int_0 = -2453
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    float_0 = -848.284
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    complex_0 = -2546.89 + 1584j
    set_0 = {complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    int_0 = 2879
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    int_0 = 346
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    none_type_0 = None
    str_0 = "Uw=*oQh_#"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = []
    list_1 = [bool_0, bool_0, bool_0, list_0]
    tuple_0 = (bool_0, dict_0, list_1)
    tuple_1 = (bool_0, tuple_0, dict_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    bytes_0 = b"]w\xcd\xa8\xafa9*"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3786():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3787():
    int_0 = -563
    list_0 = [int_0, int_0]
    list_1 = [list_0, list_0, list_0]
    dict_0 = {int_0: list_0, int_0: int_0, int_0: list_1}
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    str_0 = "^t(c=zg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    str_0 = "aBsE9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    str_0 = "\n=@8\rcUmK\x0b?eS"
    str_1 = "ZP9\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    bytes_0 = b"\xec\xc8\xbdM\xd1\xecPh\x9bC\xb7nf\x96U"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0, bool_0]
    str_0 = '|9}R.i3e,\rP\nS@\tF"E@4'
    bytes_0 = b"\xeb\x98\xdf"
    str_1 = "R\n"
    dict_0 = {str_0: bytes_0, str_1: list_0, str_1: bool_0, str_0: set_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    str_0 = "P{tQh-CN>(*IEom\r!=aB"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    bytes_0 = b"\xa1\xa5S\x85\x9d\xdf%\xa9\xa2\x93\x00l\x99B"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    int_0 = 851
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3799():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3800():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    int_0 = -1187
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    str_0 = "@AMd'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    int_0 = -1065
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    str_0 = "S,5-)rfJ|'&2\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    int_0 = 1680
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    str_0 = "E wh!mQ&FpE=/r2)L_v"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    str_0 = "Et1:"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    bytes_0 = b"\xaa@\xfco\xb4\xe9n\x1d\xe0\xae\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    int_0 = -3160
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_3812():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3813():
    complex_0 = -317.879 + 3861j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    str_0 = 'j\rfV"[!{e@'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3816():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3817():
    bytes_0 = b"lL&"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    float_0 = -1816.6904
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_3819():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3820():
    str_0 = "`}qP5mCab"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    int_0 = 2079
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    str_0 = "s!wN(E\r`>=\x0b_A<L\r\x0bM"
    module_0.get_new_command(str_0, str_0)


def test_case_3823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3824():
    int_0 = -127
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    bytes_0 = b"-\x11\x15\xbc.\xf6\xa9\x81\xef!\xe41\xc3\x8au\x0bO"
    bool_0 = True
    list_0 = [bool_0, bool_0, bytes_0]
    tuple_0 = (bool_0, bool_0, list_0, bytes_0)
    tuple_1 = (tuple_0,)
    module_0.match(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    bytes_0 = b"\x94\x05\xc9\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    str_0 = "]w@EM4eaFQN:$"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    int_0 = -1983
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    bytes_0 = b"\xf3\xcdN\x83\x1f\x98\\X\x17UB\x13\x92Cg\xfa5@V\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    int_0 = 472
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    complex_0 = -492.4406 + 2454.92634j
    list_0 = [complex_0, complex_0]
    tuple_0 = (complex_0, list_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    str_0 = "n\\uBb"
    module_0.match(str_0, str_0)


def test_case_3835():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3836():
    int_0 = 86
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    float_0 = 21.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    float_0 = 2629.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    bytes_0 = b"\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    object_0 = module_1.object()
    float_0 = 26.26
    list_0 = [float_0]
    tuple_0 = (object_0, float_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    bytes_0 = b"v\xe4"
    module_0.match(bytes_0, bytes_0)


def test_case_3846():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3847():
    float_0 = -1022.54
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    complex_0 = 1609.23324 + 2131.67127j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3849():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3850():
    float_0 = 1475.8
    bool_0 = False
    list_0 = [float_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, float_0]
    tuple_0 = (float_0, bool_0, list_1, float_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bytes_0 = b"Rdu\x00\xa0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    str_0 = "f(Z5x\x0b|*!CA^\x0czx\ns="
    set_0 = {str_0}
    module_0.get_new_command(str_0, set_0)


def test_case_3853():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3854():
    float_0 = 416.963461
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    str_0 = ""
    str_1 = "7;9\nGJ?"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    int_0 = 1543
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    str_0 = "^34,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    float_0 = -3313.54
    module_0.get_new_command(float_0, float_0)


def test_case_3859():
    pass


def test_case_3860():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3861():
    int_0 = -3147
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    float_0 = -554.49614
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    str_0 = "fOQC!\r'_^:x/0"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    bool_0 = False
    complex_0 = -605 + 3957.046j
    dict_0 = {
        bool_0: bool_0,
        complex_0: bool_0,
        complex_0: bool_0,
        complex_0: complex_0,
    }
    tuple_0 = (bool_0, complex_0, dict_0)
    list_0 = []
    tuple_1 = (list_0,)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    float_0 = 2921.4
    str_0 = "\x0b]6cy(R"
    set_0 = set()
    tuple_0 = (float_0, str_0, set_0, set_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    bytes_0 = b"\x98"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3868():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3869():
    int_0 = -259
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3870():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3871():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    int_0 = -2754
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    str_0 = "Pw]F\x0b1N7Tdv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    int_0 = 1548
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    bytes_0 = b"I\x8d\xc4Tw:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    int_0 = 19
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    complex_0 = 1537.61518 - 922.086867j
    str_0 = "E>"
    str_1 = "TvA*PI=zf3\t "
    str_2 = "qa9b`f2d| qpI1?MIY"
    str_3 = "g\n\x0b;Uur{gfrBB"
    complex_1 = -117.85702 - 664.58258j
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_3: complex_1}
    module_1.object(*complex_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    bytes_0 = b"X\x9bj\x93\xcd'"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    int_0 = -1653
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    bytes_0 = b"\xe8O\x98\x9c\xde\x87\x19\xe7\x03E\xf6\xa0\x95\x04D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    float_0 = 576.22101
    bytes_0 = b"\x11\xb1\xc5\x18\x1b\xaa\x85"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    float_0 = -3718.30522
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    bool_0 = False
    bytes_0 = b"\x17\x15\xb9"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    bytes_0 = b"RqW6\xde\x04\x19<\x99\x81\x7f\x06\x93y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    bytes_0 = b'\xf3\xab\xf99\xa9U)B\xc2\xd5(B\xa7\x01U\x16\xb9"V'
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0]
    module_1.object(*list_0)


def test_case_3888():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3889():
    list_0 = []
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    complex_0 = -1573.38815 - 843.24j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    str_0 = "`}D RW]."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    bytes_0 = b"D\x1c\x90k\xd1\xa9\x12\xdc\r\x83\x94\xcaA\x84"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    list_0 = []
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    str_0 = "MbG~H*5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    int_0 = 73
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    str_0 = "L[8\x0ciF|a/*mzY9a;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    int_0 = 142
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    str_0 = "]e($-NaAZ\x0bX"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    bytes_0 = b"\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    int_0 = 1513
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    bytes_0 = b"-\xa4\x9f\xbb\xd9\xca\xaa\xe6\xbfVPU\xaf\x1d\x0c\x16m\xb7Z\x9a"
    bool_0 = True
    tuple_0 = (bytes_0,)
    set_0 = {bool_0, bool_0, tuple_0, tuple_0}
    tuple_1 = (bytes_0, bool_0, tuple_0, set_0)
    list_0 = [tuple_1]
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    float_0 = -2431.11
    set_0 = {float_0, float_0, float_0, float_0}
    bytes_0 = b"<3=`\x83\x95"
    tuple_0 = (float_0, set_0, bytes_0, set_0)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_3903():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3904():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    bool_0 = True
    bool_1 = True
    str_0 = "ox\\"
    tuple_0 = (bool_0, bool_1, str_0)
    tuple_1 = (tuple_0, bool_1, bool_0, str_0)
    float_0 = -816.4
    dict_0 = {tuple_1: bool_0, bool_0: tuple_1, str_0: tuple_0, str_0: float_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    bool_0 = False
    str_0 = "-x"
    dict_0 = {str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    int_0 = 930
    module_0.get_new_command(int_0, int_0)


def test_case_3909():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3910():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    bytes_0 = b"\x87-}"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    int_0 = -1183
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    int_0 = -3359
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    int_0 = 83
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    bool_0 = False
    module_1.object(*bool_0)


def test_case_3917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3918():
    str_0 = "\t|=R:i#!Q+$i8Lp"
    object_0 = module_1.object()
    bytes_0 = b"\xb1\x9cQ\xe1h\xa3\x84e,\n\xdf\x9f\x7f\x17\x13J8\xb3\x0b"
    complex_0 = 1817.126 + 1122.7503j
    tuple_0 = (str_0, object_0, bytes_0, complex_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    float_0 = 622.4898
    bytes_0 = b"\xf6\xeb\xc8\xf4J\xe1\x02\x86/e\xfa\x04L\x9a\x1e\xdde\xc4\xd5"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    complex_0 = -2770 - 304.611j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    complex_0 = -30 + 4681j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    int_0 = 209
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    int_0 = 2274
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    list_1 = []
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    float_0 = 1466.835228
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    str_0 = "_Rz\t,B\t+M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    int_0 = -623
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    str_0 = "]ki6. 'hb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    str_0 = "L"
    object_0 = module_1.object()
    str_1 = "Sn5Z)*!hrxVTs5O"
    dict_0 = {str_0: object_0, str_0: object_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    bytes_0 = b" \xdd\xfb\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    complex_0 = -2833.38825 - 248j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    int_0 = -4789
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    str_0 = "7&G~i\x0b*:sMV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    list_0 = []
    str_0 = "w"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    int_0 = 284
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    str_0 = "r6fr|}QmEq,Ux"
    tuple_1 = (int_0, tuple_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    str_0 = "pLxyX\x0b>@Q2fv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    int_0 = -970
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    float_0 = 2571.5111
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    none_type_0 = None
    int_0 = 1248
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    int_0 = -2557
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    float_0 = -1698.9775
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    int_0 = 249
    set_0 = {int_0, int_0, int_0}
    object_0 = module_1.object()
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    int_0 = -40
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    str_0 = "D@S\x0b;xRSb"
    bool_0 = False
    set_0 = {bool_0, str_0}
    str_1 = "RB]x\x0bKKknd\x0c&'R\r{G"
    tuple_0 = (str_0, bool_0, set_0, str_1)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    int_0 = 3400
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    int_0 = 4456
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    str_0 = "6WY@#c8zgLzstaMtb_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    float_0 = -608.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    list_0 = []
    tuple_0 = (list_0,)
    list_1 = [tuple_0, list_0]
    int_0 = -1505
    module_0.match(int_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    int_0 = -1049
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    bytes_0 = b"\x8c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    float_0 = 2505.33
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    str_0 = "^cYvJ8b>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    bool_0 = False
    int_0 = 1623
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    bytes_0 = b"\xfc\xd7 |IQ\x81\xea\xc8\xcf\xa0n\x8d:e\xbd\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    bool_0 = True
    float_0 = -2469.6
    list_0 = [bool_0, bool_0, bool_0, float_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    int_0 = -166
    list_0 = [int_0, int_0, int_0, int_0]
    int_1 = -533
    tuple_0 = (int_0, list_0, int_1)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    str_0 = "pF7~"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    str_0 = "zo+$:_c.!P]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    float_0 = 440.4426
    str_0 = "Ru\rtx2$5C%_QW B"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    int_0 = -1965
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    int_0 = -476
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    float_0 = -3899.87896
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    bytes_0 = b"\xf30\x99\x1e"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    set_0 = {tuple_0, bool_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    str_0 = "SWh:+"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    str_0 = "VCr'|yF`,?7_"
    set_0 = {str_0}
    list_0 = [set_0, set_0, str_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, str_0)


def test_case_3975():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3976():
    float_0 = 1240.55
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    bytes_0 = b"\xb7\x9b\xec\xf6\xce\xc1\xa3R\x13=\xc1$\x15\x14Q-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    complex_0 = -3774.42516 - 2370.72j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    str_0 = 'yM"iC5cH,qkqx'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    int_0 = 972
    list_0 = []
    tuple_0 = (list_0,)
    bytes_0 = b"x\xc3|\x0cQ\xaa\xa3\x9eF\xce"
    tuple_1 = (int_0, tuple_0, bytes_0, int_0)
    module_0.match(tuple_1, tuple_0)


def test_case_3982():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3983():
    float_0 = 151.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    bytes_0 = b"\x81\xe5\xaf\xca\r\xb6y\xe0\xfa\xbe"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    float_0 = -596.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    float_0 = 4822.8697
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    float_0 = -3206.30793
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    bytes_0 = b"@\xb1q\x19f,\xc6`]\x06\xb19\x11\x8e\xaal"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    float_0 = 1940.3006
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    int_0 = -1290
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    int_0 = -1370
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    int_0 = -2051
    module_0.match(int_0, int_0)


def test_case_3995():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3996():
    bytes_0 = b"{|\xd3\x08~\x8cK\xf2\xf1fW\xd4\xd7\x98\x99\xfa\xbe\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    bytes_0 = b"\xc0o\x8dg\xfe\x15\xbd\x90\x13R\x97|\xb9g\xd8;\x11\xec"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    bytes_0 = b"\xabn\xf0P\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    bytes_0 = b"\xc8H{H3\x9e\xc0\xa9\xa5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    str_0 = "+/Z9sxWT_\n'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    list_0 = []
    bool_0 = True
    str_0 = '-yH\x0bn,"W+?3\tK]8?aLL'
    bool_1 = False
    tuple_0 = (bool_1,)
    bool_2 = False
    tuple_1 = (str_0, bool_1, tuple_0, bool_2)
    tuple_2 = (list_0, bool_0, bool_0, tuple_1)
    module_0.get_new_command(tuple_2, tuple_1)


def test_case_4002():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4003():
    int_0 = -3003
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    str_0 = "D( 3\t(E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    str_0 = "FJQNTgV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    int_0 = 44
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    none_type_0 = None
    complex_0 = 2054 - 703.49675j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    str_0 = "qK\n6}xDS'jE#j45"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    float_0 = 2909.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    bytes_0 = b"\x8e9-_\xc30M\xdcwZ\x8f\x18r\x91t\x92\xc0\x97\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    bytes_0 = b"\x86%<N\xdf\x1e\xc3\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    bytes_0 = b"\xdb~p\x7f\xbaCw\xab\xd1~^\xa6\x9a\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    complex_0 = 2939.644385 + 604.56j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    set_0 = {complex_0, complex_0}
    tuple_0 = ()
    tuple_1 = (dict_0, set_0, tuple_0)
    module_0.get_new_command(complex_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    bytes_0 = b"8\xf7\x11?\n\x99\xa2\x9a"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    int_0 = -73
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    float_0 = 3295.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    bool_0 = True
    int_0 = -2353
    set_0 = {bool_0, bool_0, int_0, int_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    int_0 = 902
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    int_0 = 961
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    int_0 = 1217
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, int_0, dict_0, int_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    int_0 = 533
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    bytes_0 = b"\n\xba`\x08\x9fG\xdb\x98\x19\x9f\xbc\xbeG\xa7\xc1t\xdaI"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    int_0 = -759
    set_0 = {int_0}
    tuple_0 = (int_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    float_0 = 1622.517449
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    str_0 = '88v"[DcLrY6oo*KOC'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_4029():
    pass


def test_case_4030():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4031():
    str_0 = "hHrXj4sZyWZV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    complex_0 = 5227.6324 + 1072.167j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    int_0 = -908
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    str_0 = "r"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    int_0 = 4498
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    int_0 = -1434
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    int_0 = -1380
    dict_0 = {int_0: int_0}
    tuple_0 = ()
    tuple_1 = (int_0, int_0, dict_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    int_0 = -2447
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    int_0 = -1266
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    tuple_0 = ()
    bool_0 = False
    set_0 = {tuple_0, tuple_0, tuple_0, bool_0}
    str_0 = "[l*y@k.&i\x0b6tz'N\\bGoZ"
    tuple_1 = (tuple_0, set_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    bytes_0 = b"\xf3\xddi{\xbd\x08\xe7\xc6j\xd97\x82\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    str_0 = 'M"Iq|8\'"A#MWb'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    str_0 = "xH*B.H,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    int_0 = 1362
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    float_0 = 721.26338
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    bytes_0 = b"*\x0c \x97JR%"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    int_0 = -1238
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    str_0 = "Bxc= "
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    int_0 = 1092
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    float_0 = 809.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    str_0 = "wMUh"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    bytes_0 = b"\xe1\x85\xda\xdf\x87MCN$\xe0t\x1a\xbe3"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    float_0 = 1502.58
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    complex_0 = 437.555079 + 664.43461j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    str_0 = "NT0we1@w}=7swm;[z"
    module_0.get_new_command(str_0, str_0)


def test_case_4058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4059():
    float_0 = -835.54704
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    str_0 = "h\t5\r}f\n/Z"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    float_0 = -881.488575
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4063():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4064():
    bytes_0 = b"\xb3\xdc\xf0\xe3K\x06\x01b\xd5?P\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    int_0 = 4269
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    bytes_0 = b"\xf7bcfN\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    float_0 = 2337.95
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    str_0 = "x3t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    none_type_0 = None
    float_0 = -1573.0
    module_0.get_new_command(none_type_0, float_0)


def test_case_4070():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4071():
    int_0 = -407
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    bool_0 = False
    str_0 = "SWwS\t<A!WT1gh}jNk/bo"
    tuple_0 = (bool_0, bool_0, str_0)
    tuple_1 = (bool_0, str_0, tuple_0)
    set_0 = set()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: tuple_1, tuple_1: set_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    int_0 = -256
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    bytes_0 = b"\xe1I\xe3\x12\x19q\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4075():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4076():
    bytes_0 = b',A\xcd\xd1O\xc6\x05\r\rv\xaa\x8dG\x825S"\\\xeb\xc0'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    str_0 = "\x0b~)0#.\\p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    str_0 = "}o1C(u+1S\n8g>)1$n@"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    float_0 = 2660.0
    set_0 = {float_0, float_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    int_0 = -1383
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    str_0 = 'QOD4}G$Zhne"A|'
    set_0 = {str_0, str_0, str_0}
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    bool_0 = False
    str_0 = "\tfYKTg"
    tuple_0 = (bool_0, bool_0, str_0)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    str_0 = "sOHNQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    bytes_0 = b"CBj9\x88\r\xb1\x03\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    float_0 = 1431.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    dict_0 = {}
    tuple_0 = (dict_0,)
    tuple_1 = (tuple_0,)
    module_0.match(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    str_0 = ">:qRQx%nYpdjYjH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    bytes_0 = b"~\x12bD\x03\x9f/\xf3\xcb\xe3\x8c\xda\x06\xc4p\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    bytes_0 = b"\xa2Ow\xc6\x9e\xc2\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    str_0 = "\\2YB*5Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    str_0 = "@S8:l{]"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    bool_0 = False
    str_0 = "Y\x0brf\x0cM~"
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    int_0 = 543
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    int_0 = 5039
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    tuple_0 = ()
    list_0 = [tuple_0]
    set_0 = {tuple_0}
    tuple_1 = (tuple_0, tuple_0, list_0, set_0)
    module_0.get_new_command(tuple_1, list_0)


def test_case_4098():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4099():
    bytes_0 = b"\x1d-Ip\r\xaf"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, bytes_0)


def test_case_4100():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4101():
    int_0 = -215
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    bytes_0 = b"\xecrZ\r\x83\xc1m\x1a\xd1\xde9\xee\x83h"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    bytes_0 = b"M\x96Oe\x0f1!7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    str_0 = "%6;u%T1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    float_0 = -2600.00407
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    str_0 = "1rN"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    int_0 = 182
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    str_0 = "//s=w"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    bytes_0 = b"\x9d?\x9f\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    float_0 = -4411.655
    module_0.get_new_command(float_0, float_0)


def test_case_4112():
    pass


def test_case_4113():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4114():
    none_type_0 = None
    complex_0 = 897.079 + 2254.9j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    bytes_0 = b"nL"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    int_0 = -2511
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    str_0 = "KU2W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    int_0 = -820
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    int_0 = 438
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    str_0 = "vWR+.<xTE_"
    module_0.get_new_command(str_0, str_0)


def test_case_4121():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4122():
    int_0 = 1051
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    bytes_0 = b"\r\xad\xe4\xb4\xc5\xbdu}GY*)\xeaC=="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    bytes_0 = b"\xaf\xe7\xe5}u,j\x0e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    complex_0 = -2270.58 - 1325.66j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    object_0 = module_1.object()
    str_0 = "<UaF7MJm_0YQ)1yhn="
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    bytes_0 = b"\x98\x1d\\\x93\xd8\xa5U\xaaWm\xb6\r\x98$\xe6.nrV\x9b"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    int_0 = 4446
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    bytes_0 = b"\xc4\x02\r\tI\x81"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_4132():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4133():
    int_0 = 1581
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


def test_case_4135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4136():
    bytes_0 = b"\x95\x89\xaf\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    int_0 = 3595
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    int_0 = -510
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    int_0 = 3039
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    bytes_0 = b"!\xf0\xb5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    bytes_0 = b"\xd9\xff_\xdeWn\x9fOL\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    str_0 = "QR_\tfA@\x0b!Zw"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    bytes_0 = b"K!O<\xcd(\xefl\xb6\xfa\xf7H"
    float_0 = 902.888176
    tuple_0 = (bytes_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    float_0 = 1130.472078
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    float_0 = 2656.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    str_0 = "gSMuBUk"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    none_type_0 = None
    float_0 = 402.027
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    bytes_0 = b"\xc9\xecye\xf0\xcd\xe4\x1d\x87\xa6c\x16\xfd\x10#C"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4150():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4151():
    int_0 = -3601
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    float_0 = 85.37
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    none_type_0 = None
    complex_0 = -491.70104 + 1447.594j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    bytes_0 = b";\xb3<\xe9\x92\n}5!\x1f\x99\xb5v"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    int_0 = -1608
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    bool_0 = True
    bytes_0 = b'\x85\x02\x856\x88p,\xf2\xb2\x01\x80\x0c"j\xb6\xa4\xa1'
    dict_0 = {bool_0: bytes_0, bool_0: bytes_0, bytes_0: bool_0}
    tuple_0 = (bool_0, bytes_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    int_0 = 2060
    module_0.get_new_command(int_0, int_0)


def test_case_4159():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4160():
    int_0 = -840
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    str_0 = "'|8$ &S!(x!$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    str_0 = "GD;X:89"
    set_0 = {str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    complex_0 = -2261.7 + 3220.1183j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    float_0 = 134.834
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    bytes_0 = b"\x14\xd9\x92\xa3%\xb3\x85\xbd;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    str_0 = "VDV;vV?U<hIp-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    int_0 = -948
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    float_0 = 199.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_4169():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4170():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    float_0 = 873.4
    set_0 = {float_0, float_0, float_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    bytes_0 = b"\xca{\x85\xe8O[U\xfb\x1a\x9dr\x00v\x98\xe3\xf4"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bytes_0 = b"\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    bytes_0 = b"\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    bytes_0 = b"\x1eN\x02s\xa0\xf4\x85\xc0\xecu\xa2\x0f"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    bytes_0 = b"\xac}-"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    tuple_0 = ()
    str_0 = "mXY"
    set_0 = {tuple_0, tuple_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    bytes_0 = b"\x0f+h\xe205\x901\xb9\x1d\xbd\x80\xa7\x88m\xd7a\x93\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    float_0 = -993.167498
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    int_0 = 993
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_4185():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4186():
    int_0 = -1463
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    bytes_0 = b"\x8b\x8e\xb4'="
    tuple_0 = (bytes_0,)
    bool_0 = True
    bytes_1 = b'V\x8b\xa2:\xe2\xd0\x1e\x95"\x0bj\xde\x0f'
    tuple_1 = (tuple_0, bool_0, bytes_1, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    int_0 = -4618
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    bytes_0 = b"K\xe5\xe3\xe9\x94r\x8c\xa6"
    set_0 = {bytes_0}
    int_0 = -1303
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    bytes_0 = b"\x80\xc3\xe2\x0f-\x8db|\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    bytes_0 = b"h\xd7\xf1\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    float_0 = -3880.0
    bytes_0 = b"\xaf\x04\xbeQR\xb0U\xca"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    complex_0 = 230.935 - 141.64j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    float_0 = 1732.808041
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    str_0 = "\\e(kK2^dYT-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    bytes_0 = b"\xceD\x86\xb2i\xe8\xefb\xc7\xc0O"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4199():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4200():
    bytes_0 = b"w\xc3}\x04\xd9b\x86\x95c\xf4pL"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    int_0 = 2045
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    str_0 = ">EY+A\r2"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


def test_case_4203():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4204():
    str_0 = "#6\nNno~4:t3TTk"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    int_0 = 1219
    module_0.match(int_0, int_0)


def test_case_4206():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4207():
    bytes_0 = b"rN#\xf8\x18B\x90\xa0\xeb\xc7\\"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    str_0 = "?"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    float_0 = 2006.029
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    int_0 = 2316
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    bool_0 = False
    bytes_0 = b"\xf7X\xd5i\xa6\x19\x98\xf0$\xbaG\x90"
    dict_0 = {bool_0: bytes_0, bool_0: bytes_0, bytes_0: bool_0, bool_0: bytes_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    str_0 = "+<84~$v\nxp-4UO\x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    bytes_0 = b"\xfaG]^\xd8\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    str_0 = "I75:4`C'3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    str_0 = '"/te,h-Qa6H$| d.'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    bytes_0 = b"\x87_\xd2\x9b\xc2I\xb6!\xca\xe1C"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    str_0 = "Lqe"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    int_0 = 220
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    str_0 = "@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    int_0 = 18
    module_0.match(int_0, int_0)


def test_case_4224():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4225():
    bytes_0 = b"\xc4\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4226():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4227():
    int_0 = -1378
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    bytes_0 = b"\xa3\x13\x94\xeb\xdb\x15u\x96\x08\xbb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    int_0 = 202
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    float_0 = -1331.4933
    dict_0 = {}
    bool_0 = False
    tuple_0 = (float_0, float_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    int_0 = 250
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    str_0 = "WCRqSg)/ N98M0L&"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    float_0 = -2243.8766
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    str_0 = 'v"FUfZHgHXLi8`&}'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    str_0 = "?m2CRDCyN\x0bvGH"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    int_0 = 239
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    int_0 = -1893
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    str_0 = "#*,1J]\x0c:"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    none_type_0 = None
    float_0 = 193.75561
    module_0.match(none_type_0, float_0)


def test_case_4243():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4244():
    str_0 = ")$cmW<'t!dc%5B"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = {str_0: str_0, str_0: str_0, str_0: dict_0, str_0: dict_0}
    module_0.get_new_command(dict_1, str_0)


def test_case_4245():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4246():
    int_0 = 2934
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    float_0 = -939.42
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    bool_1 = False
    set_0 = {tuple_0, bool_1, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, object_0)


def test_case_4252():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4253():
    complex_0 = -1296.57 + 1061.4193j
    bool_0 = True
    dict_0 = {complex_0: complex_0, bool_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    int_0 = -4944
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    bytes_0 = b"O~ssV"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    bytes_0 = b"L\xbf\xac\xec\xfd\xe9 ~aY#\xe4\x13\xea\xb8\xdf\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    list_0 = []
    object_0 = module_1.object(*list_0)
    dict_0 = {object_0: object_0, object_0: object_0, object_0: list_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    str_0 = ",RCt9\t}|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    str_0 = ':/W8|uEV,?\r8)-"/+Hr'
    str_1 = "0D|{):J-`'#Y!\x0b"
    str_2 = "&R53~*O\rt6nUFa"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: str_1, str_2: bool_0}
    module_1.object(**dict_0)


def test_case_4262():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4263():
    none_type_0 = None
    bytes_0 = b"\xa0\xc2hM\xf8F"
    dict_0 = {none_type_0: bytes_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bytes_0 = b"\xbe\x8e@\x9a\xcbz\xfc\xa48o1\xc9\xf6\x03\xbe"
    float_0 = -1515.78
    tuple_0 = (bytes_0, float_0)
    tuple_1 = (list_0, tuple_0, bool_0)
    str_0 = ")Su-0%2zVae"
    tuple_2 = (bool_0, bool_0, tuple_1, str_0)
    module_0.match(tuple_2, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    float_0 = 3058.9721
    tuple_0 = ()
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    int_0 = -1651
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    int_0 = 1598
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    str_0 = "!^~]-b:&@5BT5m/]M|!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    bool_0 = True
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    int_0 = -1314
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    bytes_0 = b"~\xe4.\xd6y\xb38\xc6(\xd2\x80\\dn"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    int_0 = 852
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    str_0 = ":4/S[PqPyZy"
    str_1 = "Z?>z"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4276():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4277():
    bytes_0 = b"\xd9\x9e\xf6\x9b\xc5\xe0<Qo0av\x11\xfe\\Qf\xdd("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    bytes_0 = b"\xe0%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    none_type_0 = None
    bytes_0 = b"\x0e\x99\x98"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    bool_0 = True
    str_0 = "*2Gc"
    list_0 = [bool_0, bool_0, str_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    str_0 = "6`$\\<\\q]zL\x0cl>/}D8'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    int_0 = 95
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    str_0 = '>2C7*"jRPB'
    bytes_0 = b"\x0f\xa6\xd1\xdb\xf8b"
    module_0.match(str_0, bytes_0)


def test_case_4285():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4286():
    bytes_0 = b"]\x1e"
    bool_0 = True
    dict_0 = {bytes_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    int_0 = -1348
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    float_0 = 2298.14
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    complex_0 = -852.60412 + 238.1021j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    int_0 = -717
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    float_0 = -2292.660299
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    str_0 = "nwhvG`|lo[K,\rpCkS\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    bytes_0 = b"\xd6\xe0\xd1"
    bytes_1 = b"+\xe0\xc8\xed\x88\xef\xccx\xe5\xf2+G("
    set_0 = {bytes_0, bytes_1, bytes_1}
    tuple_0 = (bytes_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    float_0 = 1251.123
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    float_0 = 893.0
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    int_0 = -108
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    int_0 = -3157
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    int_0 = -2025
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0, dict_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    bytes_0 = b"\xbc\x86Q\xedI\x03\x9e\xfa\x99>-\xc1\x92k\xb0\x9b\x08\x9a"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    int_0 = 4818
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    int_0 = 166
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    str_0 = "R>j_HvDHg\trK"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    complex_0 = -2407.5 - 2944.965j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    float_0 = 1295.226
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    bytes_0 = b"KA\x0e\x053j\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    int_0 = 2191
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    str_0 = "=i\\*ui"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    int_0 = -5044
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    bytes_0 = b"y\xb0\xb2-\x1d\xfc\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4318():
    str_0 = "Q%c?S~S-h-XS<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    int_0 = -624
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    float_0 = 3564.36042
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    bytes_0 = b"+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    bytes_0 = b"\xf2\xb9\xae\x1d\xf2\xc1\xf1if\x07\x8b\x12;J\xecl\xf7\xe2"
    tuple_0 = ()
    str_0 = 'Q|\n%&8FaM"q32Kn5WS`W'
    tuple_1 = (bytes_0, tuple_0, tuple_0, str_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    bytes_0 = b"\xfe\xc1 Te\x7fF\xfe\xf3\t\x8a.\xe5\x01P"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    bytes_0 = b"+\xa8\x99\xbfn>\xdf\x07\xc5}\x0e\xafJh\xce\xac\xf0\x08"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    str_0 = "M=OC!\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    bytes_0 = b"?\xf51oF\x1d&.\r?]\xec\xa3\x9c\xa4Ue\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    bytes_0 = b"\x15\x9f6l,9\x0f\xc6\xf4Res\xba\xb8\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    int_0 = -2689
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    bytes_0 = b"3"
    bytes_1 = b"\xfd\xe2\x96\x08\xb1\x04.]\x83\x83P\xe7\xc7KW\xa2,\xc4"
    bytes_2 = b"'\x10F\x8c)\xd5\xbc\xcf\xf4\xfd\xce\x83"
    dict_0 = {bytes_2: bytes_2, bytes_2: bytes_0}
    tuple_0 = (bytes_0, bytes_1, dict_0, bytes_0)
    list_0 = [tuple_0, bytes_1, bytes_1]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    bool_0 = False
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    str_0 = "\rE%X\x0b-"
    module_0.match(str_0, str_0)


def test_case_4336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4337():
    float_0 = -542.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    bytes_0 = b",\xe6\xaa\xb5\xee%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    float_0 = -367.0538
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    int_0 = 874
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    float_0 = 17.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    int_0 = -1583
    bytes_0 = b"\x82\xb0[\x9b\xd6\x08\xa4\xf4V\xbc\x15\xd8:T/\x01"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    str_0 = "hRI6C"
    int_0 = 2200
    int_1 = 1008
    str_1 = "]4G7^#;xp49Cv"
    tuple_0 = (str_0, int_0, int_1, str_1)
    list_0 = [tuple_0, int_1, str_1, int_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    str_0 = "I)5Oj8?RNXHV"
    module_0.match(str_0, str_0)


def test_case_4346():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4347():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    bytes_0 = b"\xc9o"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    set_0 = set()
    bytes_0 = b"\x96#\xa6>'\xab\xf2\x06\x82yf\xdf="
    int_0 = 2288
    tuple_0 = (set_0, bytes_0, int_0)
    list_0 = [int_0, set_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    str_0 = "k4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_4353():
    pass


def test_case_4354():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4355():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    float_0 = 266.403
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    float_0 = -6184.9489
    set_0 = {float_0, float_0}
    list_0 = [set_0, set_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    str_0 = "N\x0bdJaL\x0bFmW6\n#z %{\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    bool_0 = False
    int_0 = -3782
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    str_0 = "4>=H*?-uN%=Zw)A$"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    int_0 = -975
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    bytes_0 = b"\x03PA%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    bytes_0 = b"Y\xb2T\xeb\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    str_0 = "btP4:u'E|ZJC:8drsWQ2"
    module_0.get_new_command(str_0, str_0)


def test_case_4365():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4366():
    str_0 = "6t%Zpx\x0c5d"
    str_1 = "0~f2DA\rk\nK}-e%~}@QN\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    bytes_0 = b"\x8e\xb1D"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_4369():
    object_0 = module_1.object()


def test_case_4370():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4371():
    float_0 = -5787.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    complex_0 = 2655.251 + 1768j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    complex_0 = -441 - 1852.374966j
    list_0 = []
    module_0.match(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    str_0 = "Oy*T@z;f"
    str_1 = "ES_)EpsY=]"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    str_0 = "IRbj)\x0cjUOvUqJ1"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    int_0 = 1965
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    float_0 = -2869.4188
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    str_0 = "n`aN]d&k5%@>\rSf:yL1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    int_0 = -366
    complex_0 = -847 + 1707.16284j
    tuple_0 = (list_0, int_0, complex_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    bytes_0 = b"x\xf8\x89o\x10O\\\xa6\x7f~\xa9"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    bytes_0 = b"\x83l\x10$\xd6\xe8\xc1\xf9\xed\xa5\xfa\xe5ynA\xd0\x1c\x97\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_1}
    list_0 = [dict_0, bool_0]
    float_0 = -3323.0
    module_0.match(list_0, float_0)


def test_case_4386():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4387():
    float_0 = 1192.704773
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    int_0 = -312
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    str_0 = "x6kReRE*D&U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    int_0 = 4075
    bytes_0 = b"Z\xb8\t\xad\xc3\xa7\xe4AE\xbd\xb4"
    tuple_0 = (int_0, bytes_0, bytes_0)
    str_0 = "xT~MFZ"
    bool_0 = False
    int_1 = -537
    tuple_1 = (tuple_0, str_0, bool_0, int_1)
    list_0 = [tuple_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    float_0 = -2264.7851
    list_0 = []
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    str_0 = "h^Q=+CIN "
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    str_0 = "f%:\t(-W:e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    int_0 = -378
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    str_0 = "ghRr5SyS59LDdN42b%15"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    str_0 = "fE/b}/,8!?1q8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    str_0 = "5d;})9s"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    float_0 = 6195.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    complex_0 = 1463.5151 - 3711.115586j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    int_0 = 1798
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    str_0 = "p0Si*Z(<N"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    complex_0 = 1571.642 - 2121j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    int_0 = -24
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    bytes_0 = b"\x1am\xce\x80\x93K\xe7\x07GP\x1a"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    str_0 = '[\n?i"GE'
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    bytes_0 = b"\x19\x81j\x85\xceZ"
    bytes_1 = b"\xf3\xb0\x82\xdf,\xe7i\x97\xce&5\xf1\x0f\xc6\x9a\r4\xa3>\xb4"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    int_0 = 2789
    none_type_0 = None
    module_1.object(*int_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    str_0 = "PDJkfN*T9}YB|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    str_0 = "Ss"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    int_0 = 514
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    str_0 = "-*X.nU\nCGAKk\x0cw{"
    module_0.match(str_0, str_0)


def test_case_4414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4415():
    bytes_0 = b"$\x1d\xf5\xf5\x1f\x9e\x8b)\xe4x\x8a\xdf[\xc8\xd3_y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    bytes_0 = b"\x10S\xcd\xc8\xaf\xd1\xb3)fV\x97\xcd\x7f4\x8b\xd40Ww"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    bytes_0 = b"nU\x90\xf8h:\xb9\x11\x1b\xec\x00\xf5[GB"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    int_0 = 305
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    complex_0 = -642.489 - 1519j
    module_0.match(complex_0, complex_0)


def test_case_4420():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4421():
    bytes_0 = b"A\x05\x0emM\xeb/\xfd\xfa@3\x18\xbc\xebJ!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    int_0 = -1379
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    bytes_0 = b"7BVU-\x7f\x8a\x87\x00"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    bytes_0 = b"\xe1\x1e\x08\x18o\x0f]\x0b*\t&\\\xc9O\xb1(\xf9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    float_0 = -304.182
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    str_0 = "^vN9S#Gpb7w45l5s[5q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    bool_0 = False
    bytes_0 = b"\xa4\x06"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    complex_0 = -3251.96521 - 17.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    str_0 = "Qa)I;\ro2Ib9`\x0c3yjj5]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    bytes_0 = b"\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    set_0 = set()
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    bytes_0 = b"\xe5\xe3r\xe5\x8e\xb3\xd4\t\xb1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    str_0 = "\rE]Ui-r;\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    float_0 = 1335.7
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    int_0 = 876
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    bytes_0 = b"D\x15Fh\xf1\xfd\xaa\x95\xad\xa7\x9f\x01\xae\x97\xd4f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    bytes_0 = b",\x9c\x10\xd2\xf5^\xcb\xa0Z>H"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    int_0 = 2800
    object_0 = module_1.object()
    module_0.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    bytes_0 = b"\xce\x84\xffi"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    int_0 = 1465
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    float_0 = 3554.405
    set_0 = set()
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    float_0 = -4123.23
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (float_0, float_0, float_0, list_0)
    module_0.match(tuple_0, list_0)


def test_case_4446():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4447():
    int_0 = -703
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    complex_0 = 2116 + 2577.5094j
    bool_0 = True
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: bool_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    float_0 = 1004.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    bytes_0 = b"\x8d\x7f\x12\xeb\x191\x03\xbf\x00\xba#\x0f"
    list_0 = [bytes_0]
    dict_0 = {}
    tuple_0 = (list_0, dict_0, bytes_0)
    complex_0 = 4516.99 + 3503.519009j
    tuple_1 = (bytes_0, tuple_0, bytes_0, complex_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    bytes_0 = b"\xd4\xad'\x12\x88\xfa\xe3\xb9QH\xbb\xb9\x87\x13k~\xb3\x03\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    int_0 = 59
    dict_0 = {int_0: int_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    bool_0 = False
    float_0 = 1249.5444
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    str_0 = "$KPj\rlEJ*_3M[dg+yAgS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    bytes_0 = b"\xed\xa7\x18)\x8d,*B\x90NAz\xa2\xf8F \x80\x97"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    int_0 = 2170
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    int_0 = -4399
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    int_0 = -2831
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    bytes_0 = b"\x9a,\x851gn\xab\xcf\x0e\xd3\xfe\x01]6:\xb7\xd7j,"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    float_0 = 2883.22033
    list_0 = [float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    str_0 = "I|9jY\x0cxDB\nAV\t]j9M5"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    str_0 = "u4>3\n$!1?Wu1hd{(^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    int_0 = 1932
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    float_0 = 1314.956
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    complex_0 = 1481 + 2653.022j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    bytes_0 = b"\xb6\xd0\xdc'\xf5\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    float_0 = 3555.658316
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_4473():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4474():
    complex_0 = 875 - 1091j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    str_0 = "\\;_Y*Ul}r$"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    bytes_0 = b"\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    int_0 = 992
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    str_0 = "(J,qF^C\\DK"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    str_0 = "a_R\n>^421']]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    int_0 = -1240
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    bool_0 = True
    str_0 = "L||Z/4'_!rTF"
    tuple_0 = (bool_0, str_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: str_0, bool_0: str_0, bool_0: tuple_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    bytes_0 = b"g\x83$\xd8\x9f\x9a\xd67\xba\x99X\x16\x1dh\xee"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    str_0 = 'Y34>yLP!2GBgUmSRFp"'
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    int_0 = 2408
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    bytes_0 = b"\x9a\xc5\xe6\xaf("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    int_0 = -1324
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, int_0, dict_0, dict_0]
    bool_0 = False
    tuple_0 = (int_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    int_0 = 849
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    bytes_0 = b"\x03}\xf0f\xaeJL\x0fF$A\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    float_0 = -1668.029
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_4492():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4493():
    str_0 = "Hq|1@+^l%rl4D"
    module_0.match(str_0, str_0)


def test_case_4494():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4495():
    bytes_0 = b"7\xdd\xf5\xd2k9\xd6*\x0b\xe2\xd4O"
    bool_0 = True
    set_0 = {bytes_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    int_0 = -2370
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    complex_0 = 1078.42 - 54.26193j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    bytes_0 = b"x\xf8\xa2\xe6\xf3\xb6\xf4)f=V\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    bytes_0 = b"lG"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    bytes_0 = b"\x94\xfbvf\xce\xb4\xcf^G\x98\xe4\xc3<\x8e\x1a\xf1S"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    bytes_0 = b"\x9fs4v8G\xd2\xc8O\x1c\xffY\xd8@\x1f\xf7"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    str_0 = "8a*iTy%/BRW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    bytes_0 = b"\xa6S\x0f\xa4_F\x9aW"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    str_0 = "23?_GDIyeO6"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    int_0 = 1173
    tuple_0 = (dict_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    bytes_0 = b"9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    bytes_0 = b"\x0f\xc8M\x02\xbdn\xe9\xe2W\xa7\xe6@\x1c\n\x82"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    int_0 = 1413
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    bytes_0 = b"\x839X1\x08\xf4/:\xa6+\x97\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    bytes_0 = b"\x94\x95\x8b\x16r\x9f\x10\xe9s\xe8\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    int_0 = 3312
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    str_0 = "n_i$>H#/:?:+dfQ<B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    str_0 = "\r\nY\nRR0 )hz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    float_0 = -2839.1297
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    float_0 = 711.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    str_0 = ">&\rE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    float_0 = -2414.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    bytes_0 = b"\xabc:\xcf\xea\xea\xd1"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    bytes_0 = b"^\xaf)\xff\rwr\t\xa8\xf6\xe0\xc8\x11\x11K\xe9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    str_0 = "I^~Y\t\n\x0bDR-C]E\\vo_&\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    int_0 = -93
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    set_0 = set()
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    str_0 = "R3>Yo\n/,++E,!#=Vcs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    int_0 = 379
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    str_0 = "{f?A~S^5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    bool_0 = False
    int_0 = -923
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    str_0 = "1=L7C=9cB#WPl?\rFL!c!"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    str_0 = "XPQd$\tsaH.'i9 gR!S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    str_0 = "h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    str_0 = "zpo7O"
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, str_0, str_0]
    str_1 = "6OHlIS(nnYM8"
    str_2 = "yH*>F`c9e'K\x0bU'U"
    dict_0 = {str_0: list_1, str_1: list_1, str_2: str_1}
    module_1.object(*list_1, **dict_0)


def test_case_4536():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4537():
    bytes_0 = b"H\x1f\xea0B\x01]X\n\xe5l5\xbb9\xde\x1a"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    int_0 = 5285
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    complex_0 = 797.81 + 1789.9j
    none_type_0 = None
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    float_0 = 2243.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    bytes_0 = b"\xedJa\xef\x00+\x9dm"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    bytes_0 = b"5\xbd\xe6\x04\x1f+\xfd\x14\xf9"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    complex_0 = -1176.316 + 602j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    str_0 = "Hiu lbG\x0cl{f!&V'P\x0b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    complex_0 = -1587 + 3486.2j
    tuple_0 = (complex_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    bytes_0 = b"8j\xc4\xfeE\xd7 7\x82\xbf\xea\x13C\x06\x03<\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    bool_0 = True
    str_0 = "NF"
    tuple_0 = (bool_0, bool_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    bytes_0 = b"_\x1aH"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    int_0 = 252
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    float_0 = 983.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    int_0 = -652
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    complex_0 = -970.408 + 1134.349j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    bytes_0 = b"\xd6}\x1cn"
    set_0 = {bytes_0}
    list_0 = [set_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    str_0 = "g9J-jU>YI?@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    bytes_0 = b"v\x85\xd1M\xbf\x86\x88]\x15\x8a\xbc\xa1h!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    complex_0 = -677.8 + 442.9j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, dict_0]
    list_1 = [list_0, list_0, dict_0]
    str_0 = "^.p~%W"
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    str_0 = "k]r`^X/^!~|$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    float_0 = 249.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    int_0 = 1221
    int_1 = 154
    tuple_1 = (tuple_0, int_0, int_1)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    str_0 = 'PhU4^Jx1[.7J4%)P{""'
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    bytes_0 = b"\xf0[\xf7y\x10"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    int_0 = 336
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    float_0 = -426.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    str_0 = "aE\r:PVVWZ~y'\t@buO-QU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    float_0 = 1002.86
    tuple_0 = (float_0,)
    dict_0 = {tuple_0: float_0, float_0: float_0}
    tuple_1 = (float_0, tuple_0, float_0, dict_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    bytes_0 = b">\x9d\x81^\xcc\xe8+C\xfc\xd1\xa1\xd0E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    str_0 = "><a`pi\\p,#q\x0cC\t@*e$RK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    str_0 = '+lSxn(;k-$(" QBy'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    int_0 = -21
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    int_0 = -2716
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    bytes_0 = b"8\xfd\xe7^\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    bytes_0 = b"\xcbf\xc4\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    str_0 = "0~dnQh|*+i"
    int_0 = -4772
    set_0 = {str_0, int_0, int_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    int_0 = 1057
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    float_0 = -545.150596
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    str_0 = "!.|tdM&o)n\x0b&f~eF0'="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    str_0 = "{mej(eTMR*Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    str_0 = "zcMze>("
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    none_type_0 = None
    bytes_0 = (
        b"\xeb&\x97\xdc\xd1\xa8\xef\xee\x7f\xba\xfc\x11\xee\x8d\xc5\xa6\x81\x83\x1f"
    )
    float_0 = -4090.0
    tuple_0 = (bytes_0, float_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    bool_0 = False
    complex_0 = 2835.05256 - 315.781j
    str_0 = "%|B#*INQ-'"
    bool_1 = True
    tuple_0 = (bool_0, complex_0, str_0, bool_1)
    bool_2 = True
    module_0.get_new_command(tuple_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    complex_0 = -1261.9314 + 1015j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    float_0 = -4263.539
    module_0.get_new_command(float_0, float_0)


def test_case_4594():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4595():
    none_type_0 = None
    str_0 = ">Z"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    int_0 = -2109
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    int_0 = -195
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    bytes_0 = b"\xef|\x9d\xfe\x91\xbd\x13\xf1\x88\x05\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4599():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4600():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    str_0 = "uetL/1_+,w\x0c$l"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    complex_0 = -902.66004 + 1986.667j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    bytes_0 = b'\xf4\x0c"\x8c$,K\x92\xcf\xae\x8a\xb7\xac'
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    float_0 = -2336.248
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    bool_0 = False
    bytes_0 = b"X\x1d\x05\x0c{\xf6\xf4\xf7~X}"
    str_0 = "Pf*U+duLO&$\n"
    tuple_0 = (bytes_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    none_type_0 = None
    set_0 = set()
    int_0 = 2222
    tuple_0 = (set_0, int_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    str_0 = "TOY_\x0c\x0b:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    str_0 = "O#Q$%m7Buk1W#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    str_0 = '+v8?k/%\x0c"<_{@i'
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    int_0 = -2484
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    float_0 = -2916.150629
    module_0.match(float_0, float_0)


def test_case_4615():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4616():
    str_0 = "}f31C$"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    complex_0 = 249.74 + 458j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    complex_0 = -1128.7 + 1581.6j
    str_0 = "\t"
    list_0 = [dict_0, bool_0, complex_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    bool_0 = False
    str_0 = "_|,e/vx`ko"
    bytes_0 = b""
    tuple_0 = (bool_0, str_0, bool_0, bytes_0)
    bool_1 = False
    tuple_1 = (tuple_0, bool_1)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    int_0 = 2449
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    str_0 = "F1%F3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    float_0 = 589.513
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    str_0 = "6Ytg+'y%0|08u$FR9k"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    str_0 = "=bh]_ \x0buo1)\x0cBnn1XD"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    bytes_0 = b"\x9b\x11\xb3\xbfj/a\xf4`r\xf0\xf3K\x95*!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    float_0 = -510.28
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    bytes_0 = b"TL8"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    float_0 = -1387.589889
    float_1 = 420.972
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    bytes_0 = b"\xd3pJT\x1b\xc2\xdeN\x0e[\x92q\xfe\xb1x\x04\x86"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    bytes_0 = b"K"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    bytes_0 = b"\x03\xdb\xc8\x17\x9c=\xbc\xd5L\xf4\xb2!(f\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    int_0 = 4055
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    int_0 = 1948
    module_0.match(int_0, int_0)


def test_case_4637():
    pass


def test_case_4638():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4639():
    bytes_0 = b"\x81\x93%O14\xda\x12"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    bytes_0 = b"\x90\xae-r\xf4N2?\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    float_0 = 1138.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    bytes_0 = b"X>ss\xa9\x18"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    bytes_0 = b"\xb2l\xa8u\xbc\x1e@\xcd\xa4o\xd8\x84\x9f\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    none_type_0 = None
    bytes_0 = b"\xba\t}2\x96"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    int_0 = 1557
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    bool_0 = False
    bytes_0 = b"\xe9\x80\x0b\xa5\xca;\xa3\xcd\xfa\xbb\x9e\xa3uT\x1c\xb4\x1a*\xe3\x9c"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    int_0 = -3232
    module_0.get_new_command(int_0, int_0)


def test_case_4653():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4654():
    complex_0 = 2749.166596 + 3786.3944j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    str_0 = "_cSFX"
    int_0 = -1526
    dict_0 = {str_0: str_0, str_0: str_0, str_0: int_0}
    str_1 = "{)Ec"
    bool_0 = False
    list_0 = [str_0, str_1, bool_0]
    tuple_0 = (str_1, int_0, list_0)
    tuple_1 = (dict_0, str_1, tuple_0, list_0)
    tuple_2 = (tuple_1, bool_0, tuple_1, dict_0)
    module_0.match(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    str_0 = "["
    list_0 = [str_0, str_0, str_0, str_0]
    bytes_0 = b"\xa9\xd2\ry\x9d\xe5.\xe4\xed\xdb\xee\xbd`\x15\x96U"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    bytes_0 = b"g\x07\xc2\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    bytes_0 = b"\x08;\x8c\x12jJ9\x1e5\r\xd9z\xfc\x13\xe9\x89+"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    bytes_0 = b"\xe7\xd9\xddc\xc8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4661():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4662():
    bytes_0 = b"\xa8\x99:\x194a7:AY\xa1\x15VM(\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    int_0 = -589
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    str_0 = "A"
    str_1 = "}f#oe\t`zxv"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    str_0 = "ZTaVJCYo>hBv"
    module_1.object(*str_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    float_0 = 473.51
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    complex_0 = 2403.057727 + 4999.27775j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    bytes_0 = b"\x8cS\xc6\xc7Mi\xb3\xf6"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, bytes_0, bytes_0]
    int_0 = -1605
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    bytes_0 = b";"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    list_0 = []
    str_0 = "># sXII\r$aKqn.gcV"
    float_0 = -1083.3077
    dict_0 = {str_0: float_0, str_0: list_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    int_0 = 458
    bytes_0 = b"Q\x0e\xa8^-\x9a\xcc\x93"
    tuple_0 = (int_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    int_0 = -3316
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    int_0 = -2032
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    str_0 = 'jlp{CfV.q\\(!*"V'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    bytes_0 = b"\xa0\x10\t\x1d\xaa\x1e\x8d\x9a\xc3~\xf5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    bytes_0 = b"\xec\xae$\x15\x12\xfc\\\xd1\xebtJ\xc1\xc1\x9a\xf9\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    float_0 = 654.93
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (list_0,)
    tuple_1 = (float_0, bool_0, tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    bytes_0 = b"n\xc8#S\x04\xebg\x99\xbc\xa8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    tuple_0 = (object_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    str_0 = ")|J*[{bKc?ha<>--"
    module_0.match(str_0, str_0)


def test_case_4684():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4685():
    bytes_0 = b"\x0f\x8d\x1c"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    str_0 = "g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    bytes_0 = b"r\xf8\xb3Jq\xca\x83\x9bJ\xc0r\x1f"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    float_0 = -1899.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    complex_0 = 2791.69 + 139.18237j
    bool_0 = False
    bytes_0 = b"25\xf7\x99\xbb\x91\x95\tf\xcb\xe2\x9eJ\xa9\x98\x89\xad\xa6"
    int_0 = -1396
    tuple_0 = (complex_0, bool_0, bytes_0, int_0)
    dict_0 = {tuple_0: int_0, bytes_0: tuple_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_4690():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4691():
    str_0 = "WlqLE_)\tN8\\$hs{\n$lCa"
    str_1 = "f]C\rX}<1_/(wE= A,>"
    set_0 = {str_1}
    int_0 = 2535
    list_0 = []
    tuple_0 = (int_0, list_0, str_1)
    dict_0 = {str_0: str_0, str_1: set_0, str_1: tuple_0, str_1: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    bytes_0 = b"\xb5\xc9\xc0Am P\xe1\x04\x16\xce\x1a\x9d{\xb4\xf3"
    int_0 = 1131
    dict_0 = {bytes_0: bytes_0, bytes_0: int_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    bytes_0 = b";\xbb\xb07 \x98\x8d}\xdf\xc1pk$\xc0D\xdd\x9c\xfd"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    bytes_0 = b'\xa2\x10\xc1\xaa{\x01"J'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    bytes_0 = b"+\xae\xd5]\xf6~\xcd'\x0f\xc6\xb2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, bool_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    float_0 = -762.866082
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [float_0, dict_0, dict_0, float_0]
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\x92\xaa\xa3\x86\xcaq\xa8.\x80\xf5C\x84\x9e\xcc\x98\x1fj&\xe1"
    tuple_0 = (dict_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    str_0 = "'-;M"
    dict_0 = {str_0: str_0}
    bool_0 = True
    module_0.match(dict_0, bool_0)


def test_case_4702():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4703():
    str_0 = "`:pVLi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    float_0 = 1073.939
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    bytes_0 = b"9cb\x95H"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    complex_0 = 1053.39093 + 4867.3j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    bytes_0 = b"\xc4\xcc\x8d]\x91\xc9"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    int_0 = -3866
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, set_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    bytes_0 = b"z%\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    bytes_0 = b"Q'\xce\x93\x99w\xab\x8d\xd1+pnI\xfc"
    float_0 = 256.44
    dict_0 = {float_0: bytes_0, bytes_0: bytes_0}
    dict_1 = {float_0: float_0, bytes_0: dict_0, bytes_0: float_0}
    list_0 = [bytes_0, bytes_0, bytes_0, dict_1]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    str_0 = "\x0c6S"
    tuple_0 = (str_0,)
    dict_0 = {str_0: str_0}
    int_0 = 805
    tuple_1 = (tuple_0, dict_0, int_0, str_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    bytes_0 = b"\xaf\x88\xd2K\x02\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    int_0 = -1922
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    none_type_0 = None
    bytes_0 = b"t\x18\x13\x98\x1e\xe0)\x11\x85\xda\xb4"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    bytes_0 = b"\xe2)\xcc\xbd\x1b\xd8\xfd\xa2\xe2\xfc\xc6 X2\x97\x84!"
    bool_0 = False
    set_0 = {bytes_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    str_0 = "<8'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    bytes_0 = b"\x85\xa3\xb1\x89\xa0\xc4\xd5\xc9\xa1@\x8d\x9a`\x0cM\xd8\xff\xc5\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    int_0 = -453
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    int_0 = -1347
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    str_0 = "+TZ-T$A!nV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    bytes_0 = b"\xc7\xc0\xe1\x83\r\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    bool_0 = True
    float_0 = 2184.7079
    dict_0 = {bool_0: bool_0, bool_0: float_0}
    bytes_0 = b'Z*Q\xa7&\xb9\xa5\x14"\xc6 M.\xbf\x08o'
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    float_0 = 1105.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    int_0 = 1586
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    str_0 = "',VkI+{6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_1: bool_0, bool_1: bool_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    int_0 = 1507
    int_1 = -1942
    set_0 = {int_0, int_0, int_1}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    int_0 = 2194
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    str_0 = "R%*5"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    str_0 = "s^=.5J8|\n"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bytes_0 = b"h\x87\xd4\x928\xc6\x18\xf8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    str_0 = "t|\\gE$DyxL*:x\t :IC"
    str_1 = ">G4jbuEM\rMA\x0b/;)>"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    float_0 = 1537.75925
    list_0 = [float_0, float_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


def test_case_4741():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4742():
    int_0 = -3275
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    bytes_0 = b"\xe9C\xb5c\x99\x82.\\%P\t\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    bytes_0 = b"=P\xe8C-\xe1\xdb\xde\xdc\x91\x0b\x98"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    str_0 = "Du&\nI\tf*]nr \n^:.&B.O"
    bytes_0 = b"\xe6R3\xcb\xcc"
    list_0 = [str_0, str_0, str_0, bytes_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    int_0 = -626
    bytes_0 = b"K"
    set_0 = {int_0, bytes_0, bytes_0}
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: int_0, int_0: bool_0, bool_1: bool_1}
    tuple_0 = (set_0, bool_0, bool_1, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_4747():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4748():
    str_0 = "@X<I(u8c<xg^)vy#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    str_0 = "SobNw!W@VW`2EP~]["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    int_0 = -725
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    dict_0 = {}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    int_0 = -1426
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    float_0 = 2084.87386
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    str_0 = "_y_|gOP"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    complex_0 = -2053.23162 + 2627.914672j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    float_0 = 1457.85364
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_4758():
    pass


def test_case_4759():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4760():
    none_type_0 = None
    bytes_0 = b"Z\x02j&:\xd8\xd7\x18m\x1e\r\x9f"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    int_0 = 506
    int_1 = 308
    bool_0 = True
    bytes_0 = b'kg\x14\tR\xd8\x8e\xd9M".'
    dict_0 = {int_1: int_0, bool_0: bool_0, bool_0: bool_0, bytes_0: bool_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    float_0 = -2511.497
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    bytes_0 = b"\xc0r\xd1\xf1jA\xd5-~@b.W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    complex_0 = 4191.266 - 536.73793j
    int_0 = -1006
    int_1 = -1460
    tuple_0 = (int_0, int_1)
    tuple_1 = (tuple_0,)
    str_0 = "X#CqH\x0cp"
    dict_0 = {complex_0: complex_0, tuple_1: str_0, tuple_1: tuple_1}
    list_0 = [dict_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    complex_0 = 379.94263 + 395.29463j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    bytes_0 = b"N\x08"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    int_0 = 900
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    str_0 = "2x <'`7/(0"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    int_0 = -4103
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    bool_0 = False
    bytes_0 = b"\xdf0\x8a\x846`"
    list_0 = []
    tuple_0 = (bool_0, bytes_0, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    int_0 = -481
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    complex_0 = 339.88 - 871j
    set_0 = {complex_0, complex_0, complex_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    str_0 = "jR,AKPv<U*b]"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    str_0 = "{vC)Jv`<dcIM% "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    str_0 = ";"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    bytes_0 = b"\x9f\x0b\xd1\xbd\x9dD\xe0\xcb\x96E\x16#\xe6m\x04T"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    complex_0 = 2697 - 3153.7036j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    bytes_0 = b"\x14D\x07\xd0\x86\x8d\x16\xf4\x81\xee\x865\xeb\xb5\x97\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    complex_0 = -2382.744 + 2507.901j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    float_0 = -1288.0
    bytes_0 = b"7p\xb9\x82n\x988\xfb>\xd1w\xd7\xe6\xe0\xd4K\x97\xe1"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    bytes_0 = b"!*\x8c\xde\x12x"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    str_0 = "\t2*J/EM>"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_4788():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4789():
    bytes_0 = b"\x02Q\x0e\x14\xa1;\x94y\xfc=.h\x8a\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    int_0 = 541
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    int_0 = -1352
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    bytes_0 = b"h\xc1\xaau\xe8.\xd7\xaa,\x16_C<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    str_0 = "p\n7Gq._dDA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    none_type_0 = None
    str_0 = "v#m9"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    int_0 = 153
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    complex_0 = 505.870187 + 1441.3727j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    str_0 = "1B,"
    str_1 = "KZ>|b:"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    bytes_0 = b"\x81\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    none_type_0 = None
    str_0 = "%x4h"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    bytes_0 = b'e\r\x9c\xae"\x8f\x19/P\xb0B\x04'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    none_type_0 = None
    bytes_0 = b"n\x1e\xa31\xd4\xbb"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    complex_0 = 259.21198 - 4244.20972j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    str_0 = "crD\nZAtB."
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    list_0 = [dict_0, bool_0, dict_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    bytes_0 = b"\xba\xfa\x1c\xc4\xe0\x15"
    module_0.match(bytes_0, bytes_0)


def test_case_4807():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4808():
    str_0 = "a("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    int_0 = -2099
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    bytes_0 = b"lY\x1d\xde5\x8aN5\x1c\xed`\xbe\xf2"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    float_0 = 1368.62554
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4813():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4814():
    int_0 = -1304
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    bytes_0 = b"p`\x1d\xc9hM"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_4816():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4817():
    complex_0 = 1497.44 - 4446j
    none_type_0 = None
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    int_0 = -1110
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    str_0 = "cl2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    bytes_0 = b":\x9f\xb5\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    bytes_0 = b"q\x88\x85\xaa"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    complex_0 = -219.2799 + 1440.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    str_0 = "\x0c6dvL2&}{0:^Yub3L"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    str_0 = "1/M"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    bool_0 = True
    int_0 = 1833
    bool_1 = False
    list_0 = [bool_1, bool_0]
    str_0 = "~>P.'7G'8%v(o"
    tuple_0 = (int_0, bool_0, list_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    int_0 = -970
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    str_0 = "~6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    int_0 = 3737
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    str_0 = "~$\n'(lD@N"
    module_0.get_new_command(str_0, str_0)


def test_case_4831():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4832():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    bytes_0 = b"'\xf0P<\xf7\x82(V\xac\xc9\xa9\xd4\x19T\xa3"
    set_0 = {bytes_0, bytes_0, bytes_0}
    int_0 = 1909
    str_0 = "b4ts\r(>~/W5GUA<UYwRM"
    list_0 = [set_0, int_0, str_0, bytes_0]
    module_1.object(*list_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    int_0 = 483
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    float_0 = 490.536176
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    int_0 = -2007
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    int_0 = 1962
    float_0 = -1607.0
    dict_0 = {int_0: int_0, int_0: int_0, float_0: float_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    none_type_0 = None
    bytes_0 = b""
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    float_0 = -390.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    int_0 = 530
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    int_0 = 2259
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    int_0 = 38
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    bool_0 = True
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    int_0 = -1320
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    float_0 = -127.092341
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    str_0 = "A"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    bytes_0 = b"\xfd\xf0y@\xac\xe8\xe6\xc5\xef\xfe\x92\xe0\x02d\x02\xfb8*\xaf\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    str_0 = "5FDO]%,"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    complex_0 = -666.6 - 3494.986893j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    float_0 = 1317.49
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    str_0 = "j OM,D'X=\"eozX!V8"
    str_1 = "Z?*A7d:N"
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_0: str_0, str_1: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    str_0 = "jy"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    str_0 = "RK&>UX\ntW;Xrf"
    none_type_0 = None
    str_1 = ""
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    bytes_0 = b"y:\xa0\x90\xc6\x9f\xb1/\xbc\xaa\xa2\xcc/&G8Q$\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    int_0 = -2238
    int_1 = -576
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    str_0 = "0\\r[3yaKC`'~v<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    str_0 = "^mi;B6b7//M9Lp{X+R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    float_0 = 1260.218825
    module_0.match(float_0, float_0)


def test_case_4860():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4861():
    str_0 = "ImQJ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    int_0 = 1366
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4865():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4866():
    str_0 = "!zx7 /.p,W$XCH\x0bBd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    float_0 = -396.25
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    bytes_0 = b"\xb8\xd6"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    int_0 = 10
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    str_0 = "E<_\x0b\x0b9^fp6 >9098Ao_a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    str_0 = '(AYrVxq"GVoxd7,J:Od\x0b'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    int_0 = 5065
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    int_0 = 2949
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.match(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    float_0 = 2436.289057
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    int_0 = -1414
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    list_0 = [bool_0, bool_0, bool_0, tuple_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    str_0 = "\t&BcKN[\\L\x0beq<'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    str_0 = "P\thb"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    float_0 = -265.72
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    bytes_0 = b"X\x1f\x183\xf1\x98@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    bytes_0 = b"m\xcb3\x99xj\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    float_0 = 798.19521
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    int_0 = -2459
    int_1 = 4276
    tuple_0 = (int_1, int_1)
    tuple_1 = (int_0, tuple_0)
    tuple_2 = (set_0, object_0, tuple_1, tuple_0)
    tuple_3 = (tuple_2,)
    module_0.match(tuple_3, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    float_0 = 1776.515316
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    str_0 = "bl+KD54`\\\r_=7GJAN)Xt"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    str_0 = "Utu\"JI.(K]VS Hv'\x0cw"
    set_0 = {str_0, str_0}
    str_1 = "i,^6hN/t8z0N!nrqA"
    module_0.get_new_command(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    str_0 = "tx\r3%D *[Tbj;o|Bk"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    int_0 = 1424
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    str_0 = "nd5\x0bPc?"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    bytes_0 = b"\xb0\\\t"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    bool_0 = False
    list_0 = []
    bytes_0 = b"|1\xdaS$Q"
    tuple_0 = (bool_0, list_0, bytes_0)
    bool_1 = False
    tuple_1 = (bool_1,)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    bytes_0 = b"\x17\x04\xb9^\xb2\xdf)2\x9c\xfb\xe1`\xd2"
    str_0 = ""
    tuple_0 = (bytes_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    str_0 = "zb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    str_0 = "@icV<5-B`[\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    float_0 = -1274.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    int_0 = -1238
    module_0.match(int_0, int_0)


def test_case_4899():
    pass


def test_case_4900():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    int_0 = -1418
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    int_0 = -878
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    bytes_0 = b"\x9c\xe4\x99\xa5Kc\xd8\xea+x(l\xb7\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    none_type_0 = None
    bytes_0 = b"\xcdv\x03\x92\xae\x10\xbf\xc6\xf5\x18\xad\xa4s\x97\xf2\x19_\x86j"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    int_0 = 1998
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    str_0 = "8l!|[-K]aI\t"
    complex_0 = -1557 + 2749.251j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    str_0 = "g&A^9jhG) IY6SUq0."
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    bool_0 = True
    float_0 = -3525.8
    complex_0 = 1976.6 + 595.7295j
    tuple_0 = (bool_0, float_0, complex_0)
    bool_1 = True
    dict_0 = {tuple_0: float_0, tuple_0: tuple_0, bool_1: float_0}
    object_0 = module_1.object()
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    complex_0 = -702 - 891.63j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    str_0 = "2r?eM,7.U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    float_0 = 1130.8895
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    bytes_0 = b"\x06\x1e\xd1F3p\xc9\x12(\xf5\xdf\xfc\xcd\x1d\xd3D\x06"
    tuple_0 = (bytes_0,)
    list_0 = [bytes_0, bytes_0, bytes_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    bytes_0 = b"J\x15.Tiq\x18\x02\xa6\xf7\xe3\x17\x12"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4918():
    bytes_0 = b"\x048\xa7\xfd\xfd\xf0\xd2j\xc0J"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    float_0 = 1947.51723
    module_0.get_new_command(float_0, float_0)


def test_case_4921():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4922():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    bytes_0 = b"V\x05f.\x82\x1d\x8c\xa1[\xaf\xe6\xb0\xf4"
    dict_0 = {bytes_0: bytes_0}
    int_0 = 1081
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    bytes_0 = b"\xfd\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    str_0 = ":KjLgQPeH?1;@t!>1y"
    str_1 = "aY'4wJOx"
    bytes_0 = b"\xa7v9\r\xbd7W+\xe5\xac2"
    str_2 = "{B*0|"
    dict_0 = {str_0: str_0, str_1: bytes_0, str_2: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    str_0 = "4-J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    int_0 = -1703
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    int_0 = 1816
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    str_0 = "{f,8!MD"
    set_0 = set()
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    int_0 = -1453
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    bytes_0 = b"8\x98N\x1a\x90\xf4J\xdc\xfb\xe8\x8f\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    bytes_0 = b"\x9fAf\x9d\x1bA\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    set_0 = set()
    list_0 = [set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    bytes_0 = b"\xcf\xc37\x86l"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


def test_case_4936():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4937():
    float_0 = 1718.88
    set_0 = {float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    float_0 = 3420.257708
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = [float_0, float_0, float_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    float_0 = 862.1154
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_4941():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4942():
    int_0 = 887
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    str_0 = "q_<L \rid"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    bytes_0 = b"\xed\x1b\x19\x02\x84\xebh\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    str_0 = "pE.\r5k\r)5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    bytes_0 = b"\x87\x11\xdes\xce\x1a\x9b]\xd0\xcf+3,\x18\xf9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    int_0 = 3851
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    bytes_0 = b"x\x08)"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    float_0 = 1284.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    str_0 = "Oss5"
    bool_0 = False
    bool_1 = False
    tuple_0 = (str_0, str_0, bool_0, bool_1)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    bytes_0 = b"\x88\x1e\xcf\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    bytes_0 = b"\xd7\xc0\x1c\xe9\x06S\x01-OD\xfa\xff\x0ep\xc3~\rq"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    bytes_0 = b""
    bytes_1 = b"\xce}"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    bytes_0 = b"A\xea\x0f\xe2i\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    str_0 = "|v]ITU{$_1H"
    list_0 = [str_0, str_0]
    bytes_0 = b"\xb1\x8f\xf3\x8b\xfd`\x96\xc6\xdba(1\xe1\x9d\xbf\x1c\x7f"
    tuple_0 = (str_0, str_0, list_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_4958():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4959():
    int_0 = 2702
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    str_0 = ">g[0x2a"
    str_1 = "xH7VfkalPY-^Ft`=DOL"
    str_2 = "<+{N"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    bytes_0 = b"I\xbe\xbeg=\xba\xd8?Z'\xbaHw"
    set_0 = {bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    bytes_0 = b"l\x98~D\xcf\xbc\x12_\xe7\x11\x88\xb4i\xad\xd7U"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    bytes_0 = b"\xd4at\xc8\x1d\xcd\x98\xb83\x83\xd1\xfbM\x15M"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    int_0 = 1364
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, set_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    str_0 = "W\\87+|hk\ng:m3"
    dict_0 = {str_0: str_0}
    float_0 = -452.547
    tuple_0 = (dict_0, float_0, str_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    complex_0 = 1510.4 + 204.414j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_4969():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    str_0 = "\x0bMh]C\t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    float_0 = -124.839798
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    str_0 = "0z>(l$%'NelG"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    bytes_0 = b"\xe0\xf8\xdd\x07\xe9\x10\xd1+\xc5A`\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    float_0 = -574.38906
    bytes_0 = b"\x1fMY\x04\xee@v\xc3*N5=*\xd5\xae"
    tuple_0 = ()
    int_0 = -1889
    tuple_1 = (bytes_0, bytes_0, tuple_0, int_0)
    tuple_2 = (float_0, tuple_1, bytes_0, float_0)
    bool_0 = True
    module_0.get_new_command(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    int_0 = 2534
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    int_0 = -107
    int_1 = -5233
    list_0 = [int_0, int_1, int_1, int_1]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    str_0 = "M)}52^\\e\\"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    float_0 = -1112.3509
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    complex_0 = 2504.8395 + 949j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    bytes_0 = b"\xf9\xd94L\xa1\xaa\xeaQ\xcb\xbeg\xf8'\x1c~\xedz"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    str_0 = "h3\\\x0c\x0cj\rE@A@5JVO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    str_0 = "IKA5}F3u$;\nN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    bytes_0 = b"\x0f\x186\x0c\x16"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    bytes_0 = b"%\xb1\xae\x00\xf9\xb1"
    float_0 = 1781.0
    bool_0 = True
    tuple_0 = (bytes_0, float_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    complex_0 = -183.4726 - 1261.849j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    float_0 = 2410.2213
    set_0 = {float_0, float_0}
    dict_0 = {float_0: float_0}
    tuple_0 = (dict_0,)
    list_0 = [set_0, tuple_0, tuple_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    none_type_0 = None
    bytes_0 = b"\x86q[\x07\x8c3"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    str_0 = "=e^7S\\)e/LjWUNK"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    float_0 = 692.0
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    bytes_0 = b"\x99\xdbe:\x16`ip\x9fbA\xf0\xda-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    bool_0 = True
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    str_0 = "TuH+|+%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    complex_0 = -1036 - 565.3291j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    int_0 = 1023
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    int_0 = -3335
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    str_0 = "T@D5KRuk]"
    bytes_0 = b"S\xe4\xf3e2\x86\x92"
    list_0 = [str_0, str_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    float_0 = -1506.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    int_0 = 1918
    bytes_0 = b"\xcc\xad\x9c"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    float_0 = -14.8883
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    str_0 = "+s?2 B)\r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    int_0 = 2434
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    bytes_0 = b't\xfb\x12\xc9.J>\x02\xda\x90(";\xee4\xce'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    bytes_0 = b"\xda\xb4\x9c\x07 \xcb:F\xfa\xee\xa6\xf4g\x1c\xd4\xa0V*\xcf>"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    bytes_0 = b"\xd6\xeb`\xef\xef"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    float_0 = -231.615924
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    bytes_0 = b"\xb4\xe3\x15\t\x1c\xe4\xccl\xab\x14\x99\x12\x01\x0c\x89:%\x03\xe1"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [bytes_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    str_0 = "!j.oa"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    bool_0 = True
    bytes_0 = b"\xf9h%\x0b\x0e\x0c\x0b\xff#\xcbq8\x92[5T\x04"
    tuple_0 = (bytes_0, bool_0)
    bool_1 = False
    tuple_1 = (tuple_0, tuple_0, bool_1)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    bytes_0 = b"\xc4\xf4\xbb\xb0\xf59\\\xb1?\x06TL@\x8d\x86K\x92\x02\xf0\x17"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    bool_0 = False
    complex_0 = -1068.7748 + 820.458j
    tuple_0 = (bool_0, complex_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    str_0 = "\x0chJ"
    str_1 = 'jnaEl.&Y\ttx"Ik%Og3:U'
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


def test_case_5014():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5015():
    str_0 = "h&\x0bJkt*:[Vm"
    str_1 = "VqF"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


def test_case_5016():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5017():
    bytes_0 = b"\xee1\xbc)ys8\xee\xbd\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    float_0 = 1029.782
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    bytes_0 = b"\xfe\xe2Rb\xbc\x04cN \xf4D7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    int_0 = 4146
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    float_0 = -1955.17757
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    str_0 = "c&))^d"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    float_0 = 2279.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_5024():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5025():
    str_0 = "Bl]8h2("
    str_1 = "_[^.$iRY"
    str_2 = "J$ac\x0c{`Yj(p 7[e"
    int_0 = -1771
    str_3 = "$rN?[L3o96PHo14"
    dict_0 = {str_2: int_0, str_0: str_1, str_2: str_1, str_3: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    bytes_0 = b"\xcai\xe8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    list_2 = [list_1, list_1]
    module_0.match(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    bytes_0 = b"\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    bytes_0 = b"\x91\x84\xf0;|E\xe5bZ7\x98\xe5<\xfe\xbd2f\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    int_0 = 645
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    str_0 = "U]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    int_0 = -1171
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    bytes_0 = b"BF\x96\xa4\xbb\xf4~^<\x9b\xb9\xa7>F=\xbfo"
    set_0 = {bytes_0}
    list_0 = [set_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    int_0 = 3637
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    bytes_0 = b"\xe3\xdc\xc9\xf1\xaa\xect\x0e\x01\x98\xa8\x1a\x00#\n\x92"
    list_0 = []
    tuple_0 = (bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    int_0 = 2171
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    complex_0 = 693.7 - 496.3197j
    tuple_0 = (complex_0,)
    list_0 = [tuple_0, tuple_0, complex_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    bool_0 = True
    bytes_0 = b"\xd8\x7f"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    bytes_0 = b"\xd2=\xf748\xf6\xc7\xaea@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    bytes_0 = b"\xeeV\x03\xb1qNa\xe1\xa5\xd5\x85\xc9\xda"
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    bool_1 = False
    tuple_0 = (set_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_5043():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5044():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    complex_0 = 2874.8111 - 1697.8j
    module_0.get_new_command(complex_0, complex_0)


def test_case_5046():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5047():
    bytes_0 = b"?\xe3\x03\xec\xc7\xfatv`\xa8\x1cn2\xf1\x7f\x08v\x9e\xa3\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    str_0 = "M"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    int_0 = -664
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    str_0 = "[]T=7x "
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    float_0 = -3200.580318
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    float_0 = 2971.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    bytes_0 = b"\xfc'=xe[uD8\xb4]"
    complex_0 = 2440.61901 - 998j
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, complex_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    float_0 = 3493.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    str_0 = "lo?j~*>OF\\\x0c~|\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    str_0 = "s0#U!aIT"
    complex_0 = -3118.71 - 1036j
    bytes_0 = b"\xa3\xa779\x19\x86\xb6\x8a\x08\xda\x87,\xae\xc7\xac\xa2"
    dict_0 = {str_0: str_0, str_0: complex_0, str_0: str_0, str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    int_0 = 525
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    int_0 = -1302
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    float_0 = -2590.0108
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    none_type_0 = None
    int_0 = 691
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    bytes_0 = b"\xce1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    bytes_0 = b"(\xaeRfq\x13\x8a\nN\x15l\xd7\x93\xf7\x89O`Q0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    float_0 = -985.704917
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    str_0 = "t`{2p<imFGeHO76]?~+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    float_0 = -1258.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    str_0 = "aKyHNJ?bs@J3^"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    list_0 = []
    float_0 = 429.04199
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    str_0 = "N#csL%8"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    str_0 = "AC\nR'nem\x0ceT~Tl;NJ"
    list_0 = [str_0, str_0]
    str_1 = ".6h:plv*"
    module_0.match(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    str_0 = "XEEy? lRD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    str_0 = "%aq@\t;4T+%:S8Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    int_0 = 1071
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    str_0 = "7&q<.Ylo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    str_0 = "E^%ZzDPS:Uvo"
    dict_0 = {str_0: str_0}
    tuple_0 = ()
    tuple_1 = (dict_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    int_0 = -1909
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    complex_0 = -603.591 - 942.92j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    bytes_0 = b"\xbe&\x0cbP]1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    complex_0 = 519 - 2020.80115j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    float_0 = -3012.2874
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    str_0 = "@kA\x0cG>a)FL{"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_5083():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5084():
    int_0 = -2523
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    bytes_0 = b"\x1e\x12\xaa\x0c\xa8\xb4?\x93\x1c\x97\xba\x17\x13`\xf8X\x0f\x01"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5086():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5087():
    complex_0 = 1862.07 + 1494j
    bool_0 = False
    tuple_0 = (complex_0, bool_0, bool_0)
    tuple_1 = (tuple_0, bool_0)
    set_0 = {complex_0}
    tuple_2 = (tuple_1, set_0)
    module_0.match(tuple_2, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    bytes_0 = b"\xf5\xd5\x8c]\xa1\xc8'G%\xf2\xae"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    bytes_0 = b"\\4\x1f\x1a\xa8\xa5hS\xcc\xe6\x1fHR"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    float_0 = -685.164
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    str_0 = "LL+P .f-"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bytes_0 = b"6'\xf5\xb9QD7\xffT\xb7\x8d\x86"
    module_0.match(bytes_0, bytes_0)


def test_case_5093():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5094():
    int_0 = -124
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    int_0 = 318
    str_0 = "\x0c569hDy{>I)#?v([+@"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    bytes_0 = b"?\xe4\xb5\xe1J\xa9\xafz\xef\xeekk\x86^\xe9\x15\x89\xa2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    bytes_0 = b"e7\t\xe3F\x05:\xabu8\x84"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    bool_0 = True
    str_0 = '"B(]jpxUEkY'
    set_0 = {bool_0, str_0, bool_0}
    tuple_0 = (bool_0, str_0, bool_0, set_0)
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1, tuple_1]
    module_1.object(*list_0)


def test_case_5101():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5102():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    bool_0 = False
    int_0 = -1301
    str_0 = "5i*\x0cIT6"
    tuple_0 = (bool_0, bool_0, int_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    complex_0 = -2275.34 + 321j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    int_0 = -159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    float_0 = -1425.165524
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    dict_0 = {}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    str_0 = '2[" jX>`\x0cXy[4*7\x0c'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    int_0 = -19
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    int_0 = -113
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    int_0 = 707
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    int_0 = 2257
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    str_0 = "EI+jab"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    bytes_0 = b"\xfd\xfe\x83\\\xb8$"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    int_0 = -456
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    int_0 = 921
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    str_0 = "Bn,pl6ZBQx\\O=}+b"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    bytes_0 = b"t\xcd\x052\x8b\xf6}\xee07\x17\x8f\x80\xef\x7f\xf9\xee\\\xcc"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    bytes_0 = b"\x11\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    bytes_0 = b"N\t7_+m\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    float_0 = -2917.17
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    bytes_0 = b"\xea\xd7f j"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    str_0 = "\nElod>f&wNC4H"
    str_1 = "(RYFLx"
    int_0 = -1117
    str_2 = "?xG3cS~ %=<$FRS*P"
    dict_0 = {str_0: str_0, str_1: int_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    bytes_0 = b"\x0e\x19"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    float_0 = 35.99265
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    int_0 = 3084
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    int_0 = -3448
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_5134():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5135():
    str_0 = "69vJ;aOG<: G!\\"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_5136():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5137():
    int_0 = -3838
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    float_0 = -3093.67918
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    bytes_0 = b"-<H\x93\x8f\x94V\xdc\xb6;\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    int_0 = 3081
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    bytes_0 = b"V\x02e\x1e`\x9f\xa7U\x87W"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    int_0 = 44
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    str_0 = "YD6\x0ctw"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


def test_case_5144():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5145():
    str_0 = "VC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    float_0 = 4342.059
    bytes_0 = b"\xdfa\x14\x8c\xdc\x91\xce\xcc?\x90\xdd\x87\x10\xc1\x93\r"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    float_0 = 228.1
    set_0 = {float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    str_0 = "eD%W{DLM7<d)S"
    bytes_0 = b"b\xff\xe0\xf0\xa2[GA*\xdc\xbe\xa4\xc8\xb5\x07\xf8\xc1\xc5\xa1\xdf"
    float_0 = 674.053891
    list_0 = [str_0, str_0, float_0]
    set_0 = {str_0, bytes_0}
    tuple_0 = (bytes_0, float_0, list_0, set_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    str_0 = "es:T#tR4S0<Ho"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_5151():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5152():
    str_0 = "gU@;j"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    set_0 = set()
    list_0 = [set_0, set_0]
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    float_0 = -1835.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    float_0 = 18.62857
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    str_0 = "ZF\x0bQ|SI3<B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    tuple_0 = ()
    int_0 = 2144
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    bytes_0 = b"\xe7A\x927\xb1\x1b\xf2\x80\xb9\x94\xabt(a[\x95I"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    bool_0 = True
    bytes_0 = b"\x8e\x8bD\xd2\xf0\xf9\xce"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    int_0 = -1235
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    str_0 = "q_%"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    int_0 = -2187
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    bytes_0 = b'c\x14y:\x03\xaf)l"\xea\x12\xf6\xe9\xcd\xdd\x11\xecss['
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    bytes_0 = b"5*qG\xady\xde\x01[\x9f2\xbd\xaf\xcd\x94P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    int_0 = 1378
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    str_0 = "@b(%@WD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    str_0 = "=as("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    str_0 = "XALt.\x0cbqI!oZ\r\n"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    int_0 = 1375
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    str_0 = "cEGQq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    str_0 = 'e"d-@/\\'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    float_0 = 763.21848
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    list_0 = []
    object_0 = module_1.object(*list_0)
    str_0 = 's71F\r@4}avI.uE"='
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


def test_case_5180():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5181():
    complex_0 = -715.9438 - 1361.61986j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    int_0 = -2211
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    float_0 = 1583.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    float_0 = 1916.90252
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    str_0 = "8Z#`,A5.wPEY`bsC"
    module_0.match(str_0, str_0)


def test_case_5186():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5187():
    float_0 = -199.75672
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    str_0 = "^ieC~86"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    str_0 = "VAKgEpYDI?#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    bytes_0 = b"\xc2\x1d`\x1c\x15\xbe\xc9\xb4\xef\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_5193():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5194():
    str_0 = "rhX~\n& #LJZ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    str_0 = "\"%r!;EXEJ')c.~~#hDfd"
    float_0 = 1998.9
    list_0 = [str_0, str_0, str_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    str_0 = "@a{a!j/EUE?~A2f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    str_0 = "*OWkXC="
    set_0 = {str_0}
    object_0 = module_1.object()
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    complex_0 = 159.353976 - 1720.9j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    set_0 = set()
    str_0 = "D_-X[2G_{'B8S$FaX"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    bytes_0 = b"\xe2&\xce\xf9\x88\xb1\xdfJ\xe58\xe8c\x9b\xaf\xe2<I{n\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    bytes_0 = b"s\x988\xa5\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    str_0 = "/Y}=EO\\Lm<\x0cMs{t&_;"
    set_0 = set()
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    bytes_0 = b"z\x16\xd5Y\xf2}\x02_\xa5\x03\xa4\xd2\xa2\xa3\xa4\xba,\x1b\x85"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    int_0 = -980
    set_0 = {int_0}
    tuple_0 = (int_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    complex_0 = -135.82803 + 983.2543j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    float_0 = 1608.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    int_0 = 865
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    complex_0 = 168 - 1958.46505j
    list_0 = [complex_0]
    complex_1 = -1267.3 - 2113.3086j
    tuple_0 = (list_0, complex_1)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    str_0 = "qZVE7:pq"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    bytes_0 = b"_\xe4\x0b\x88xje"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    bytes_0 = b"\xa7\x85A\\w\xa5\xb1\xb7V\xa7w\x18"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    int_0 = -3769
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    bytes_0 = b"\x07Bx\xa6'\xbe\xf9g5\xb3ZK sW\xafE2"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    complex_0 = -567.26 + 154.4544j
    module_0.get_new_command(list_0, complex_0)


def test_case_5215():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5216():
    str_0 = "T1,'QV"
    int_0 = -649
    dict_0 = {str_0: str_0, int_0: int_0, str_0: int_0, str_0: str_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    str_0 = "1\r0P_6XL"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    int_0 = -1488
    list_0 = [int_0, int_0, int_0]
    int_1 = 4897
    tuple_0 = (list_0, int_0, int_1)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    float_0 = 640.706
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    int_0 = -1828
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    int_0 = 302
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    complex_0 = 1401.907 - 2965.44273j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    str_0 = "pNk;DVb%5JC,o8q"
    str_1 = "\\1!1<PtH"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    int_0 = -1305
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    none_type_0 = None
    bytes_0 = b"\x99b\x19\x8e"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    str_0 = ';"%#10s2KK\\'
    set_0 = {str_0, str_0, str_0}
    str_1 = ":r3`3el2J2cV(\tr"
    module_0.match(set_0, str_1)


def test_case_5227():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5228():
    str_0 = "\tsh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    str_0 = ",*xNja7?@"
    bytes_0 = b'#:\xac-\x8c8\x0c\xe4\x1bY\\W\xfa\x8e"|'
    int_0 = -4959
    tuple_0 = (bytes_0, int_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    float_0 = -435.889633
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [bool_0, set_0]
    tuple_0 = (set_0, list_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    str_0 = "70Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    complex_0 = 232.668 + 804.4j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    float_0 = -848.95
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    object_0 = module_1.object()
    str_0 = "fsSuPyZ|Pnk(a{"
    set_0 = {str_0, str_0, object_0, str_0}
    tuple_0 = (object_0, str_0, set_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    int_0 = 1099
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    str_0 = "`RQSBY)>qo"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    str_0 = ",1\x0cik}M&\x0c5ZXs2\t_Y<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    int_0 = -3177
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    str_0 = "s\\sEsq}D_T\t@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    int_0 = 1606
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    int_0 = 1660
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    none_type_0 = None
    int_0 = 2122
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    int_0 = -2343
    tuple_0 = (int_0,)
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    complex_0 = 2288.26737 + 2034.08093j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    str_0 = "jiAX9&=Fl"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    str_0 = "|m*Cg4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    str_0 = '%\\kX\\qf{^"wV;qwwsG{>'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    bytes_0 = b"1\xba\xb09\x1c\xdf#\xe1\xb96\x8f"
    dict_0 = {bytes_0: bytes_0}
    int_0 = -1076
    tuple_0 = (dict_0, int_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    str_0 = "5V1hJ!A4w@"
    str_1 = "Y-&?k6"
    dict_0 = {}
    tuple_0 = (str_1, dict_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    bytes_0 = b"\x9b\x81hYY\xf6\x80*hF\xe6*W\x95\x8a_\x99\x8ah"
    list_0 = [bytes_0, bytes_0]
    str_0 = "Xy5E"
    float_0 = -934.5
    bytes_1 = b"^C\x86\xbe\xea\xa6\xeb\xa5\x06\xc0#\xc4S"
    str_1 = "Ui>]"
    tuple_0 = (float_0, bytes_1, str_1)
    bool_0 = False
    tuple_1 = (tuple_0, tuple_0, bool_0)
    tuple_2 = (list_0, str_0, tuple_1, tuple_1)
    module_0.get_new_command(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    str_0 = "%I,\\3;2ign"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    str_0 = "c82\t`nRf,qQ*yu>HA(6"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, list_0]
    tuple_0 = (list_1,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    str_0 = '\x0bNw"OJ$aej3#Euc'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    complex_0 = 1153 + 3024.46906j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    str_0 = "IoW\r}'p9|bIdGGy|E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    float_0 = -202.0
    module_0.get_new_command(float_0, float_0)


def test_case_5259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5260():
    bytes_0 = b"\xc7\x1c\xae\x89UN"
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0,)
    dict_0 = {tuple_1: tuple_1, tuple_1: tuple_0, bytes_0: tuple_0, tuple_1: tuple_1}
    module_0.match(dict_0, tuple_1)


def test_case_5261():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5262():
    bytes_0 = b"\xad\xaa\x1d\x9a\x14\x17!\x9b\xf0/\xb50\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    str_0 = "nt2']N&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    float_0 = -2196.38
    set_0 = {float_0, float_0}
    tuple_0 = (float_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    int_0 = 1486
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    float_0 = 1507.11129
    module_0.match(float_0, float_0)


def test_case_5267():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5268():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_5269():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5270():
    int_0 = -2662
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    bytes_0 = b"\xee\x1d=\xf1\xd76\\\x02\xec\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    int_0 = -1184
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    int_0 = 41
    int_1 = -5030
    int_2 = 147
    dict_0 = {int_0: int_1, int_1: int_0, int_1: int_2, int_0: int_1}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    float_0 = -2483.2123
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    complex_0 = 4836 + 2828.061j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    str_0 = "^pIGC6 f]wgsSG~(C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    str_0 = "CvwV|jZN_-S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    bytes_0 = b"\xc5\xd7\xb4+\xf2\x124;\xb7LZ\x04A\r\xe0\xcb\x9d\xc6M"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5279():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    bool_0 = False
    float_0 = -3127.332
    set_0 = {float_0, bool_0}
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: set_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    none_type_0 = None
    float_0 = 2889.177
    list_0 = [float_0, float_0, float_0]
    module_0.match(none_type_0, list_0)


def test_case_5282():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5283():
    str_0 = "JT/xd+YV/%"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    bytes_0 = b"s\x93s!\x07\xe9\xf0\xe1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    int_0 = -2769
    tuple_0 = (int_0,)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    int_0 = -1596
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    int_0 = -1661
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_5289():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5290():
    bytes_0 = b",\xb3\xa15b\x9b\x17A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    str_0 = "fm"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    str_0 = "=~A!:\x0cx8en-7[y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    complex_0 = 1296.6 - 729.80698j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    list_0 = [dict_0, complex_0, complex_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    float_0 = 366.92951
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    int_0 = -473
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    float_0 = 1087.48
    list_0 = [float_0]
    module_0.match(list_0, list_0)


def test_case_5297():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5298():
    bytes_0 = b"\x16\xd0+o<P\xd59H\x07f\xacP\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    bytes_0 = b"\x18\x12\x07\xd9!g\xb1\xdd4\x84+\xc0k\xe3"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    list_0 = []
    list_1 = [list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    float_0 = -2409.05
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    bytes_0 = b"\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    bytes_0 = b'\xc4\x99\xc2\x00h\x03\x1b%SBC\xac"\xc80u'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    complex_0 = 4138.086 - 2349.94j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    str_0 = "''fLg\x0c.\x0b\t<$xIM%/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    float_0 = -1644.809878
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    bool_0 = False
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    complex_0 = -688 - 3637.642j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    str_0 = " "
    bytes_0 = b"I\x18\xf9u\xf3b\x9f\xe2\xfb\xb6H\xc9L\x9c"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    int_0 = -4558
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    str_0 = "IDg\x0c\nl]a''}"
    module_0.match(str_0, str_0)


def test_case_5313():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5314():
    bytes_0 = b"\xbc\xb5\xcf\xbaa\xd5\xa4\x15\xb8$\xa7&c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    bytes_0 = b"\xb2\xae\xdaU\x05B\x98\r\xf7\xfc\xdd\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    float_0 = 2475.097854
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    int_0 = 1562
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    bool_0 = True
    int_0 = -1052
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    float_0 = 272.44
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    bytes_0 = b"+l\xeb\x0c\xfe\xbfPj\x99\x9b\xdbq\xfe4\x03"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_5325():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5326():
    int_0 = -6294
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    str_0 = "]"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    bytes_0 = b"\x1dN\xc5\x17\xc8e\xe0\xfc\xe9\xeaN\x16\x0e\x80;\x85s\xdb]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    int_0 = 2537
    tuple_0 = ()
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    int_0 = -3393
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    none_type_0 = None
    tuple_0 = ()
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    bytes_0 = b"tg\xacd\x02"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    float_0 = -1723.50584
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    str_0 = 'dKE|P71"J\x0c`5B;rUz'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    bytes_0 = b'\xfa\xcb\xbd"\xe7\xbd\xa8\xb2\x00p\x10\x1a\xe2\xdb\xd6\xee\x1c\xd9'
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5338():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5339():
    int_0 = -558
    object_0 = module_1.object()
    module_0.match(int_0, object_0)


def test_case_5340():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5341():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    tuple_0 = (bool_0, dict_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    int_0 = 1088
    module_0.match(int_0, int_0)


def test_case_5343():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5344():
    bytes_0 = b"\xbeG1`\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    bytes_0 = b"Q/*\xd7\xca\x97\xe1\xae$\xd2\r0\x1d\\\x1bO\xce\xf4gY"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    float_0 = -2251.431
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    bytes_0 = b"\x0e\xd8tdj\xbe\x84\x02.\xdd<6\x03L\xe1\xb9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = True
    str_0 = "_aY[Z\x0ci@c X_k5sL="
    tuple_0 = (bytes_0, dict_0, bool_0, str_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    bytes_0 = b"\xdc\xe4\x9f\x8b1\xbd\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    int_0 = 4708
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    bytes_0 = b"\xd1\x02\xb1X"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    int_0 = 670
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    str_0 = "@HhE-F~T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    complex_0 = -114.5 - 3603.931243j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    bytes_0 = b"I\x8c_\x1d)r^\xd8\xb3\xcd.W\xf5\xba\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    float_0 = 1011.0
    complex_0 = -103.001 + 753.1j
    module_0.match(float_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    int_0 = 654
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    int_0 = -2085
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    bytes_0 = b"\xa61\xd5p\xfd<b\xd0J:\x86\xa4f\x8bk\xbe"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    complex_0 = 1516.93095 - 2293.56j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    bytes_0 = b"zC\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = ""
    str_1 = "w"
    dict_0 = {str_0: list_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    str_0 = "Bn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    none_type_0 = None
    int_0 = -2385
    int_1 = -681
    tuple_0 = (int_0, int_1, int_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    str_0 = "m2V"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    bytes_0 = b"\x89\x1b\xd3\x07Y#\xbd"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    int_0 = -505
    tuple_0 = (dict_0, int_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    int_0 = -539
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    bytes_0 = b"\r\x81\xd2i\xa7\x0c\xde\x16\xb3\xe7\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    int_0 = 2977
    module_0.get_new_command(int_0, int_0)


def test_case_5372():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5373():
    bytes_0 = b"\x11l\x05E\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5374():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5375():
    bytes_0 = b"\xbc\x01A\xdd\xcb\x7f\x956(70\xed\x83m"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    int_0 = 1554
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    bytes_0 = b"X\xcf&\xf2,\x97\xd7\xad\x17\xb8~\xf1 \n"
    tuple_0 = ()
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    float_0 = -1013.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    set_0 = set()
    bool_0 = False
    int_0 = 3158
    tuple_0 = (set_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    int_0 = -679
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bytes_0 = b"|p\x9b\x07ZK\xa0\xe0:9\xea\x80R\x80_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    list_0 = []
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    int_0 = -452
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    float_0 = 479.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    float_0 = -48.245
    bool_0 = False
    str_0 = "&}.;+-$lcG"
    set_0 = {bool_0, bool_0, float_0, bool_0}
    tuple_0 = (bool_0, str_0, set_0)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    str_0 = ""
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    bool_0 = True
    float_0 = -1287.04349
    module_0.get_new_command(bool_0, float_0)


def test_case_5391():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5392():
    int_0 = 1623
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    str_0 = "A)wW+/Gj-*wa \nB3}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    str_0 = "d2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    str_0 = "qL5)-{eg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    bytes_0 = b"\x0bk4T\xa8\\*\xa4y\x1a\xe0\x0f\x8d\xd3\xff\x88\x07\xa3\xf43"
    set_0 = {bytes_0, bytes_0, bytes_0}
    complex_0 = 3983.116 + 2380.95j
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    none_type_0 = None
    bytes_0 = b"\xce<\x81\x83\x08+\xe7\\\x18\xab\x94\xd2"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    none_type_0 = None
    int_0 = 2600
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    float_0 = 1846.3171
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    str_0 = "\\u}\t0h.<'S+nY\r/,C-t?"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    int_0 = -198
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    int_0 = -1903
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    set_0 = set()
    str_0 = "PA>"
    tuple_0 = (str_0, str_0)
    module_0.match(set_0, tuple_0)


def test_case_5407():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5408():
    str_0 = "L>"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    str_0 = '%Ny"WVO%Roy*8Mpf='
    none_type_0 = None
    str_1 = "j<\rN\r1CTK1;J\tt"
    str_2 = "(f/6SiaIW d="
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    float_0 = 627.79134
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    str_0 = "||zVCT(U\nuxz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    int_0 = -630
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0, set_0, set_0]
    tuple_0 = (set_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    int_0 = 69
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    str_0 = "X_+3W"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    bytes_0 = b"E\x10\xe0\xde\x11\xb9\xe7\x90.\x8a\xd1"
    module_0.match(bytes_0, bytes_0)


def test_case_5416():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5417():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    bytes_0 = b"P\x7f\xcd\xf4\x1e[\xe9\xc2\xc9\xd9Q\xf0\xb1{\xc7e\xb6h\xe0\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    complex_0 = 1830.8 - 410.4036j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    str_0 = "4\nDkl61OR%YuC\t@\\7"
    module_0.match(str_0, str_0)


def test_case_5422():
    pass


def test_case_5423():
    pass


def test_case_5424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5425():
    list_0 = []
    bool_0 = True
    object_0 = module_1.object(*list_0)
    tuple_0 = (bool_0, object_0)
    tuple_1 = (list_0, list_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    str_0 = "s.-Vna"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    complex_0 = -4149.99 - 3043.98j
    module_0.get_new_command(complex_0, complex_0)


def test_case_5429():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5430():
    str_0 = 'rd/Bj3[,(6-swv"3NXiY'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    str_0 = "_\tHvdg78=?{@JQc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    bool_0 = False
    tuple_0 = (bool_0,)
    complex_0 = -940.46351 - 1365.595724j
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    int_0 = -960
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    bytes_0 = b"\x8d\x90\x16<"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    bytes_0 = b"E\xfd\xae\xba3T\xf5\x06\x05\xba\xceW\x9e}"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    int_0 = 3540
    tuple_0 = ()
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    int_0 = -1909
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    int_0 = -254
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    int_0 = 3053
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    bool_0 = False
    str_0 = "wWiu6wWNxlg^`jb#OrsA"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    int_0 = 2011
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    bool_0 = True
    int_0 = 1892
    tuple_0 = (bool_0, int_0)
    set_0 = set()
    list_0 = [tuple_0, int_0, set_0, bool_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    float_0 = -1003.57
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    bytes_0 = b"\xda\xa6\xf9Y\x07\xef\xda`\xea8\xe2o\xf1\x0b\xd0\x96\xfc\x94"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5445():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5446():
    int_0 = -2295
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    complex_0 = -453.9 + 2989.018307j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    bytes_0 = b"\xea\xbe\x02{\xfb\xcf\xb1\t\xb1\xef"
    str_0 = "@vI[](bQC/<5+"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    set_0 = set()
    str_0 = "a"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    complex_0 = 1203.7 + 827.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    str_0 = 'yo@"gT5=n'
    int_0 = 1072
    dict_0 = {int_0: int_0, int_0: int_0, str_0: str_0}
    tuple_0 = (str_0, int_0, dict_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    str_0 = "f1-YJMcb6Tu%GX!I&]k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    int_0 = 840
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    str_0 = "4qq$_6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    int_0 = -1276
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    str_0 = "0)\rZq)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    str_0 = "26En6CI`nS4IL-ob|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    bytes_0 = b"\x03\x06Bj"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    int_0 = 4467
    bytes_0 = b"\x03O\xa8\r\x9a"
    tuple_0 = (int_0, bytes_0)
    dict_0 = {bytes_0: bytes_0, int_0: int_0, int_0: tuple_0}
    list_0 = [tuple_0, bytes_0, bytes_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    int_0 = 1633
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    str_0 = ";fQGBzXN6+5`"
    list_0 = [str_0, str_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    float_0 = -1114.581625
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    int_0 = -3174
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    str_0 = "&`>7QUxDET$SSu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    str_0 = "j:&N!ys\r\t_RKWn^Yte"
    bool_0 = False
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    float_0 = 2298.122241
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    bytes_0 = b"0X\xa4\xd7\xd4TS\xc6\x88%\xeaT\x81tK\xb5^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    float_0 = -1361.0
    bool_0 = False
    bool_1 = True
    tuple_0 = (float_0, bool_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    str_0 = "]),p#:7zD|?3HT`]+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    int_0 = -1466
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    str_0 = "LR/[5ebwz"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    float_0 = -2184.524
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    bytes_0 = b'\xc63"z\x91\x04SE\xa6'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    float_0 = -313.91895
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    str_0 = "#f)Cw%ZM]Q~TCJX +"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    int_0 = -1004
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_5482():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5483():
    dict_0 = {}
    bool_0 = True
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    float_0 = 8.97368
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    float_0 = -2311.4805
    module_0.get_new_command(float_0, float_0)


def test_case_5486():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5487():
    str_0 = "1sZ\r3'P\x0b@x#^U<{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    complex_0 = -2118.06 - 708.5761j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    bytes_0 = b"\x89\xc5v\xc6D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    bytes_0 = b"\xab}\x80b\x13\xc9\x93/\x10"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5491():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5492():
    bytes_0 = b"\xdd\xaf\xae\x83\x98c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    str_0 = "i]^Ut*b@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    float_0 = 28.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    float_0 = 2893.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    int_0 = 3615
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    int_0 = 919
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    int_0 = 2044
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    complex_0 = 342.7 + 3147.22j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    bytes_0 = b"\tR\xaa\x01\xf7\xcb}E\x16\x12\xbf7\xd9\x02\xc8]\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    str_0 = "d3'(W,X/ww\x0c\r-F9\r-"
    set_0 = {str_0, str_0, str_0}
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    set_0 = set()
    tuple_0 = (set_0,)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    bytes_0 = b"*\x805NK\x98\xd5]\x9e\x88N\xe5x\xda\x8eI1yF\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    str_0 = '0i"(.pYR&@'
    list_0 = [str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    float_0 = 2294.029178
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    bytes_0 = b"L\xf7\xcc"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    bytes_0 = b"Uq/l\xb5\xba\xac9+\xe9'\x1e\x98\xed\xe0\x1b6\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    bytes_0 = b"\xd9(\x17\xf1@|\xe9B\xe1\xcd\xa2"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    float_0 = -3.21912
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_5510():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5511():
    bytes_0 = b"\xda\xc6\x0bk4e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    bytes_0 = b"\xa0l\x96b\xc1\xe1@f\x01\xd6\x9c7\x003\x80\xdfj"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    int_0 = 205
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    bytes_0 = b"u\xda5J\xefo"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    str_0 = "Y=p4,"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


def test_case_5516():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5517():
    complex_0 = 1600 - 1612.61j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    str_0 = '"1xNswsU&_#R:!XSK'
    int_0 = -1149
    float_0 = 1195.0
    tuple_0 = (str_0, int_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    int_0 = 4012
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    bool_0 = False
    bytes_0 = b"\x18\x1d'"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    str_0 = "oH<o!<{Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    bytes_0 = b"\x9b\x99\xec\xf91$g?,\x9d2e!\x83\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    str_0 = "I#9VpUy~uW%Ua2*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    complex_0 = 158 + 3843.91j
    str_0 = "%Z4E"
    tuple_0 = (complex_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    float_0 = -2565.9156
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    bool_0 = True
    int_0 = -720
    dict_0 = {int_0: int_0, int_0: int_0}
    bytes_0 = b"\x10\xd6\xcf\xc1>"
    list_0 = [bool_0]
    int_1 = 906
    tuple_0 = (list_0, int_1, bool_0)
    tuple_1 = (int_0, dict_0, bytes_0, tuple_0)
    tuple_2 = (bool_0, tuple_1)
    module_0.match(tuple_2, list_0)


def test_case_5527():
    pass


def test_case_5528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5529():
    int_0 = 322
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    str_0 = "\x0b"
    module_0.get_new_command(str_0, str_0)


def test_case_5531():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5532():
    bytes_0 = b"4\x13\xde\xdc\x91\x9bY8\xed7\xa5#\x83\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    int_0 = -1879
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    float_0 = 535.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    int_0 = 1852
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    bool_0 = False
    float_0 = -1750.8419
    bytes_0 = b"\xde\xc4\x12\xb2\xe9:xIes"
    tuple_0 = (bool_0, float_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    float_0 = 1016.72892
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    int_0 = -1619
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    complex_0 = 530.0517 - 426.5489j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    str_0 = "oF[lu2,n`0"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5545():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5546():
    float_0 = -1327.974
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    complex_0 = -892.3 + 1169.603807j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    bool_0 = False
    str_0 = "t4"
    str_1 = "Wrx*\t}Xxf\n"
    dict_0 = {str_0: bool_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    bytes_0 = b"`\xf3\xc2#\xb0\x9c\r\x9b\x90j\x1f,\xdbbQ[\\"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    float_0 = -3412.087
    set_0 = {float_0}
    module_0.get_new_command(float_0, set_0)


def test_case_5551():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5552():
    int_0 = -904
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    float_0 = 236.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    str_0 = "7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    int_0 = 1463
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    int_0 = 2660
    module_0.get_new_command(int_0, int_0)


def test_case_5557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5558():
    str_0 = '|J#J{\x0cHJ")U!H8'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    bool_0 = True
    str_0 = "z~\n"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    bytes_0 = b"\xc9\xacD\x05\xf8\xfb\x8e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    bytes_0 = b"\xed\xb3Z\xf6y$\xf7\x81\x1b\x16#6\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    bytes_0 = b"\x15\xf2\xe0\xc7KT9\xfa\xf2\xb3\x8b\x9d\x97u"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    int_0 = 799
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    str_0 = "n"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    bytes_0 = b"Q\x90\x9a\xd4Uh\x0e\xf0\xccm\x08fl'\xe2b~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    bytes_0 = b"s\xb9\xc9\xf6L\xc6v\x12\xcc2\x97\x11\xb7\x1d"
    str_0 = "5]"
    dict_0 = {str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    str_0 = "eJfOu)p\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    bytes_0 = b"\x91.\xff\xd6+o\x1cX\xd7\xd7r \xa7\xbf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    int_0 = -4185
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    none_type_0 = None
    int_0 = -237
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    str_0 = "> .2?G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    str_0 = "4d0??@'GW01lR3}\x0cq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    str_0 = "\x0cae)"
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    bytes_0 = b"\x15\xe0\x8e~\xa5Z\xf0\xaa\xa4\xe0\xee'\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    int_0 = 1255
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    float_0 = -2147.649
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


def test_case_5578():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5579():
    bytes_0 = b"\x02\x1a\xc7\xc0J\xb5\x98\xb7\x92RDF\x85\xcbU[a\xa4\xe6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    bytes_0 = b"\xf3\xb2\xc6`\x8df\xff\xe7\x02%P\x13\x8d\xa5\x04\xbd\xa3\x98\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    int_0 = -2101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    str_0 = "c?i?f*ft<1\tLc+?-\x0b"
    module_0.get_new_command(str_0, str_0)
