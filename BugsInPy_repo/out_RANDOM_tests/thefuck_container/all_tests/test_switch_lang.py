# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import switch_lang as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xd9\x85\xcb\xa2\n\x89OD\x0cCf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -846
    dict_0 = {int_0: int_0}
    int_1 = -1221
    bool_0 = False
    tuple_0 = (int_1, int_0, dict_0, bool_0)
    tuple_1 = (dict_0, tuple_0, int_1)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -1142
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "KgVZeBY6l\rk<ORT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    object_0 = module_1.object()
    list_0 = [object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "'+\tnr"
    float_0 = -776.0
    set_0 = {str_0, float_0, str_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = ":OI;-V)b\r$D\x0bi\x0cjG"
    set_0 = {str_0, str_0}
    list_0 = [set_0, set_0]
    module_1.object(*list_0, **set_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b"\xf2/\xdbGH*B"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    float_0 = 3648.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b"\xc0\x0c%F\x00\xe3N\xc2\x85\xe7k-!\x82\xeahW\x8f\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    complex_0 = 1105.505334 - 2092.9j
    list_0 = [complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "HPPw8jXr%'wEEcIQ|3]_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b"4c,\xbf0Y&\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    int_0 = -306
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    int_0 = -257
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    int_0 = -2594
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_31():
    pass


@pytest.mark.xfail(strict=True)
def test_case_32():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, set_0)


def test_case_33():
    pass


@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "eq?&ixa3Qu"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    int_0 = -501
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = "4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = "]1<Oq.7Vl+X"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    float_0 = -2041.731
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    bytes_0 = b"\xcf\xe0\xde\x1d1F\x81j@|\xab\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_45():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    str_0 = "R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    bytes_0 = b"H"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    int_0 = 1010
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = "/;sC{mC"
    dict_0 = {}
    list_0 = [str_0, str_0, dict_0, str_0]
    list_1 = [list_0, dict_0]
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    object_0 = module_1.object()
    object_1 = module_1.object()
    tuple_0 = (object_1, object_1)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    int_0 = -2027
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    int_0 = -2870
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    bytes_0 = b"\x05G\xa9\xe8\xde9\xae."
    bytes_1 = b"'\roR"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_1: bytes_0}
    str_0 = "k[r"
    tuple_0 = (dict_0, bytes_1, dict_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    tuple_0 = ()
    float_0 = -1832.7521
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    str_0 = "Fb\\yn["
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    str_0 = "@){\nI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    int_0 = 3890
    module_0.match(int_0, int_0)


def test_case_68():
    pass


def test_case_69():
    pass


@pytest.mark.xfail(strict=True)
def test_case_70():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    float_0 = 3618.0
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = [list_0, list_0]
    list_2 = [list_1, list_0, list_0]
    module_0.get_new_command(list_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    bytes_0 = b"\xf5s\x05\xe1\xbb\xa6\x11"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    str_0 = "*\teYI;q$\x0c)XV8u^;!"
    dict_0 = {str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    int_0 = 4931
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    bool_0 = False
    float_0 = -518.586278
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    float_0 = -1947.3
    tuple_0 = (float_0,)
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    bytes_0 = b"\xafK6 \x84\x94\xa0\x8b\xb2wc*S/\x81"
    int_0 = 4205
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    bytes_0 = b"+\x00\xcb\x1bn\xb7"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    float_0 = -1089.97988
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    str_0 = "K"
    bool_0 = False
    module_0.match(str_0, bool_0)


def test_case_83():
    pass


@pytest.mark.xfail(strict=True)
def test_case_84():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    bool_0 = True
    dict_0 = {}
    bytes_0 = b"p\xbe\\\xfb\xcb\x97D!\x01)H"
    tuple_0 = (bytes_0, bytes_0)
    set_0 = {tuple_0}
    tuple_1 = (bool_0, dict_0, set_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    str_0 = "\x0chG3E]{9{Y|OidT[Y"
    module_0.match(str_0, str_0)


def test_case_87():
    pass


@pytest.mark.xfail(strict=True)
def test_case_88():
    int_0 = -1101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    int_0 = 1313
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    int_0 = -1890
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    str_0 = "I}Bt86`*1LqT0$\r"
    none_type_0 = None
    str_1 = ")Pe-nei[nc"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    str_0 = "S%z'Ab%X>W\""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    bool_0 = True
    float_0 = 612.0
    int_0 = -1386
    bytes_0 = b"\xd799\xe0\xa0\xc9\xa75yp\xfe\x08?\x86\xd0\x00"
    tuple_0 = (bool_0, float_0, int_0, bytes_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    str_0 = "gn\\y@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    bytes_0 = b"O\x96}Vd\x84\x1f&q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    int_0 = -969
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    str_0 = "E\rh;jL<IG\n]R{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    bytes_0 = b""
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    bytes_0 = b"\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    str_0 = ".n[_rLKJU\to)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    int_0 = 2626
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    float_0 = 3303.73
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    float_0 = 4445.322
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    float_0 = 3277.2
    module_0.match(float_0, float_0)


def test_case_108():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_109():
    bytes_0 = b"+T\xa9\r\x1f\xeez\x95\xe3\x83.S(;t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    bytes_0 = b"\xb8NK=\xc7q\xd97V\x1b\x9e\\l\xdcA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    bytes_0 = b"\x96\x9e"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    str_0 = "+yEba9gy2+Vh!9\x0ci"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    int_0 = -2533
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    float_0 = 639.5172
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    bytes_0 = b"UT%\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_118():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    float_0 = 1768.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    int_0 = 2738
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    object_0 = module_1.object()
    complex_0 = 500.768 - 1473j
    bool_0 = False
    tuple_0 = (object_0, complex_0, bool_0, bool_0)
    tuple_1 = (tuple_0, bool_0)
    module_0.get_new_command(tuple_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    bytes_0 = b"\xdd6\xd2\x95\xed\xe4\xc3?T\x11\x12 F"
    float_0 = -2120.661
    tuple_0 = (bytes_0, float_0, float_0, bytes_0)
    set_0 = {tuple_0, bytes_0}
    str_0 = '"T4R~*Bcp)'
    list_0 = [set_0, str_0, tuple_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    bytes_0 = b"\x9f\xa1\x92\x06R'\x90\x9a\xe8q\x17\xff\x90\xe5h\xc5\r\x95\x85\xf5"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    bytes_0 = b"\x02`\xee\xb6\x07N\xda\xccs\xc08\xd9\xf1\xae\x16\xd3\xdc"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    bytes_0 = b"\n\x08\x1eJ\x10\xb8a\x9f-2\x89\xb7\xa9]>\xb3\xe3\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    int_0 = 433
    module_0.get_new_command(int_0, int_0)


def test_case_127():
    pass


@pytest.mark.xfail(strict=True)
def test_case_128():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    complex_0 = -1040.7706 - 1489.2521j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    float_0 = -2247.43092
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    str_0 = "B]Yn\t$).O0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    str_0 = "N6"
    bytes_0 = b"\x15\xd6'\xda\xb4"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    bytes_0 = b"\x14\x86s\x15\x1a=\xa0"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_134():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_135():
    bytes_0 = b"\xed\xe0\xc9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    int_0 = 3454
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    bytes_0 = b"Kf\td\xfb\x1b\x1fJ\x97E$\xa6/h\xd7\x99'l\xb6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    bytes_0 = b"\x13\xca"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    str_0 = "LF+kl pqKvj29!c[q68l"
    str_1 = "}/eXh)(M^M"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = ()
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    int_0 = -3186
    list_0 = [int_0]
    module_0.match(list_0, list_0)


def test_case_142():
    pass


@pytest.mark.xfail(strict=True)
def test_case_143():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    bytes_0 = b"\xe4\x00\xae\xe9w\xdb\xe9\x9a\x83\x06'\xbf\x16A\xd2m{$\n\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    bytes_0 = b"g\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    none_type_0 = None
    str_0 = "m2,oswoF(vnl"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    list_0 = []
    float_0 = -3046.61
    str_0 = "i[1'7B'u8]ya"
    bool_0 = False
    bool_1 = False
    complex_0 = -521.813 - 99.3356j
    tuple_0 = (str_0, bool_0, bool_1, complex_0)
    tuple_1 = (list_0, list_0, float_0, tuple_0)
    set_0 = set()
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


def test_case_151():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_152():
    float_0 = -2730.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    bytes_0 = b"%\x1f\xf2\xa9\xe2\xe5\xda\x04\xe9\xf4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    complex_0 = 2519 + 341.032j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    dict_0 = {}
    list_0 = []
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    str_0 = "0\tp$z%#o3N"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    int_0 = 77
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    str_0 = "q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    str_0 = "RM@&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    bytes_0 = b"\xd0\x91D\xc3\x15\xce\xd8\xc6\xeb\x03u\x05\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    str_0 = "d{6>|cce?^%o\"La\x0b'-^5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    int_0 = 346
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    int_0 = -1074
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    str_0 = "\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    float_0 = 1420.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    str_0 = "~Z:z;0\risD"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    int_0 = 2956
    module_0.get_new_command(int_0, int_0)


def test_case_177():
    pass


def test_case_178():
    pass


@pytest.mark.xfail(strict=True)
def test_case_179():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    str_0 = "7s0p]=z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    int_0 = -2075
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    bytes_0 = b"\x07\x1ax\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    bytes_0 = b"7\xc7\x05\xc3\x14\x86\xb0\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    int_0 = -1093
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    str_0 = ":-/b?<t[1f_b'LIif$"
    bytes_0 = b""
    tuple_0 = (str_0, bytes_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    str_0 = "^o/fEW@$`TW"
    module_0.match(str_0, str_0)


def test_case_190():
    pass


@pytest.mark.xfail(strict=True)
def test_case_191():
    str_0 = "DMBY<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    str_0 = "8e?,iZU%1"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    float_0 = -192.397
    str_0 = ""
    list_0 = [float_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    float_0 = -838.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    set_0 = set()
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    tuple_2 = (set_0, tuple_1)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_197():
    bytes_0 = b"W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    float_0 = -409.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    bytes_0 = b"\nz\xf0\x84\xa1J\x99\xae\xef\x8d\xfaGq\x8f>\xd5\xadzU"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    float_0 = 2788.01833
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    float_0 = 979.0
    set_0 = {float_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    bytes_0 = b"S\xa5\xb7\xb0>_\x0c\x818\x0fc0\n\x836\x92\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    bytes_0 = b"\x9eF0\x91\xef\xef\xbe>\xf6\x97\x7fJ\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    int_0 = -26
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    bytes_0 = b"0\xed\xb5\xd5\xe6\x01EtX\x9a\\TFb\t\x18=m"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    bytes_0 = b"\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    str_0 = "*+(Nw^Sw)C2op$="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    str_0 = "CE/a4E?f\\i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    str_0 = "yT\n\\`ZY*$ 5E_ 0pyjC"
    int_0 = 2626
    tuple_0 = (str_0, str_0, int_0)
    list_0 = [tuple_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    bytes_0 = b"\xe3I\x91\xae\xbe\xea\x10"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    complex_0 = -1309.47 + 2511.576547j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    bool_0 = False
    bytes_0 = b"\xdb?\x14\xd7"
    list_0 = [bool_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    int_0 = 2303
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    float_0 = -2502.73
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    float_0 = -1905.096
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    complex_0 = 654.2 + 620j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    float_0 = -3179.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    str_0 = "\x0b'(qo\"rQz8lW)^p"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    int_0 = -141
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    bytes_0 = b"n\x935A\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    bytes_0 = b"\x97\x15\xafj`!"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    none_type_0 = None
    str_0 = "5WMj\x0bC&<6,6a8[t:vv#["
    str_1 = "E\x0cy\x0bO"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: str_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    complex_0 = 409.65 + 3137.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    bytes_0 = b"\xcd\x1cd \xb2 \x83"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    int_0 = 967
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    int_0 = 554
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    float_0 = -1308.486753
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    bytes_0 = b"\xd3XJ)X"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_236():
    pass


@pytest.mark.xfail(strict=True)
def test_case_237():
    str_0 = ":Vr 8 -Vf@\rzi"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    bytes_0 = b"\x001"
    bool_0 = False
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0, bool_0, bool_1}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    set_0 = set()
    complex_0 = -1044.68 - 721.17j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    tuple_0 = (set_0, complex_0, dict_0, set_0)
    list_0 = [tuple_0, tuple_0, set_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    bytes_0 = b"3\xfa\x83\xa7U"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    float_0 = -1774.686548
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    str_0 = "1g0oCV !Qf$GU"
    none_type_0 = None
    str_1 = "G"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    int_0 = -1796
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    bytes_0 = b"&}\x04\x17~g\x8a"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    str_0 = "mAs.y"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    str_0 = "m"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    str_0 = "Eoa\\:Y[j2|u{F"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    int_0 = -173
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    int_0 = -285
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    int_0 = -263
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    int_0 = 1268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    str_0 = ":^] :483KSox:hqu"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    none_type_0 = None
    int_0 = -1254
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    bytes_0 = b"\xda}|\x97\xde"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    int_0 = -53
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    str_0 = "\r=2u\x0bD$.A["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    str_0 = ">mg6i6"
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = 1776
    tuple_0 = (str_0, int_0)
    list_0 = []
    tuple_1 = (str_0, set_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    float_0 = 1923.8
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    float_0 = -1387.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    float_0 = -43.0
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_271():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_272():
    int_0 = 934
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    str_0 = "\t{m)2cCEMwKO@s%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    float_0 = -2387.47
    int_0 = -1824
    tuple_0 = (float_0, int_0, float_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    str_0 = "hCktT)sCHz9#_1|pk"
    bool_0 = True
    bytes_0 = b'U\x08_\xfc\x98\t\x9d\xf1\xe0J\xa1\x12F\xa7\x13\xaf"\xa6Y\xe7'
    bool_1 = True
    dict_0 = {bool_1: bool_1, bool_0: bool_0}
    tuple_0 = (str_0, bool_0, bytes_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    int_0 = 1295
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    str_0 = "qwtn]D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    int_0 = -2028
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    float_0 = 198.14279
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    bytes_0 = b"YK"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    dict_0 = {}
    float_0 = 831.9786
    tuple_0 = (dict_0, float_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    bytes_0 = b"ojGlG"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    int_0 = 4434
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    str_0 = "z-[lUjF3e623S+%Zu,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    tuple_0 = (bool_1, bool_2, bool_0, bool_1)
    tuple_1 = (bool_0, tuple_0, bool_2, bool_2)
    set_0 = {tuple_0, bool_2, bool_1, tuple_0}
    tuple_2 = (tuple_1, set_0)
    module_0.get_new_command(tuple_2, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_287():
    float_0 = 1268.0
    bool_0 = False
    dict_0 = {float_0: float_0, float_0: float_0, bool_0: float_0}
    bool_1 = True
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_288():
    bytes_0 = b"\xed\xcek\x99\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    float_0 = 638.87
    module_0.match(float_0, float_0)


def test_case_290():
    pass


@pytest.mark.xfail(strict=True)
def test_case_291():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    bytes_0 = b"\x1e\xa5@\x81{\xaf#"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    bytes_0 = b"\xbae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    str_0 = "iZ\t"
    str_1 = "G\nG~[\rMj$j%"
    list_0 = [str_0, str_0]
    dict_0 = {str_0: str_0, str_1: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    bool_0 = False
    complex_0 = -1289.01 - 1583.234815j
    int_0 = -2656
    tuple_0 = (bool_0, bool_0, complex_0, int_0)
    module_0.match(tuple_0, tuple_0)


def test_case_298():
    pass


@pytest.mark.xfail(strict=True)
def test_case_299():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    int_0 = 961
    list_0 = [int_0, int_0]
    str_0 = "*_#([$0C\x0c"
    tuple_0 = (int_0, list_0, str_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    str_0 = "!V*4&RKcL"
    float_0 = 4023.35
    list_0 = [float_0, str_0, str_0, str_0]
    tuple_0 = ()
    tuple_1 = (str_0, float_0, list_0, tuple_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    float_0 = 1729.454
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_303():
    pass


@pytest.mark.xfail(strict=True)
def test_case_304():
    bytes_0 = b"\xc87\xab\xef\xc1\xeb<b\xf2\xd5M\x06\xa0Y\xdb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    bytes_0 = b"\xab\x8a\xad+*\xab|\x87L\x17\xe3>\xc4\xf9"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    int_0 = 1029
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    bytes_0 = b"x\xb8\x93G\xfb\xbd\xacV\x1c\x07\xaa\t\xa7\xf7\x90\x0f\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    set_0 = set()
    bool_0 = False
    list_0 = [bool_0, set_0, set_0, set_0]
    bool_1 = False
    tuple_0 = (bool_0, list_0, bool_1, bool_0)
    list_1 = [tuple_0, set_0, bool_0, tuple_0]
    module_0.get_new_command(set_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_309():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    float_0 = 1555.139
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    str_0 = "JnO}r;%&}RA: 6"
    str_1 = "(\tviEc?iO\x0c_/R{1;kz"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    str_0 = "g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    bytes_0 = b"\x98(,\xf2\x07\xff\x93EA\x96\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    bytes_0 = b" {\xf3@fq\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    bytes_0 = b"\xc5L\xc0X\x99\x10\xcb\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    float_0 = -3659.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    int_0 = 217
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    int_0 = 822
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    float_0 = -370.784
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    str_0 = "kw\t}$nH<"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    float_0 = 2218.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    int_0 = 2423
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    str_0 = "@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    str_0 = "*CzOW))"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    str_0 = "+U2x=OH_1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    bytes_0 = b"\xf0\xf7\xfd\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    str_0 = "9!v5~-E}u<gGm&5'\\Y}"
    list_0 = [tuple_0, tuple_0, str_0]
    module_0.get_new_command(list_0, bool_1)


def test_case_333():
    pass


@pytest.mark.xfail(strict=True)
def test_case_334():
    bytes_0 = b"\x02\xbdr%\x18\xd7\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    bytes_0 = b"\x0c?Y3)<6\xcc:\xdb\x06\xc1\x08\x9f\xf5\xf8\xc1\xbe1"
    str_0 = "="
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    float_0 = 525.300751
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    bytes_0 = b"\xc5\x8cI"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    float_0 = -241.06932
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    bytes_0 = b"\xd7\xaa\x94$\xf6\xdd\xa7J\x03\xc8\x82\xa2\xa7\x9f\xcb\x1d\x92\xc6\x94"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    int_0 = -3121
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    bool_0 = False
    int_0 = -471
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    float_0 = 695.2
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    bytes_0 = b'\xd9,n9-~\x9b\x00"::\xbc\xb4\x04]5\x13zc\x8b'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    bytes_0 = b'\xda\xb6\x16\xb4\x974\xa0\xe5@"4\xa0Wjr'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    int_0 = -929
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    int_0 = -1176
    tuple_0 = (int_0, int_0, int_0, int_0)
    tuple_1 = (tuple_0, int_0, int_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    none_type_0 = None
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    int_0 = 302
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    bytes_0 = b"\xaf\x16E`&\x02;\xf7\xd623\t\xfbM\xfa\xe8\x89\x15"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    str_0 = "F<X~%M\rP>/?@/!;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    str_0 = "}4KGw]As\x0c-E"
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    int_0 = 3090
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    int_0 = 335
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    int_0 = 496
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    bool_0 = False
    int_0 = 1875
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    str_0 = "_p\n"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    bytes_0 = b"a\x1a\xe0\xd4\x99"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    bytes_0 = b"\xbb\xf0b}\xaa\xda\xe0\x04\x0e\x11#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_0, bool_1, bool_1}
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_369():
    str_0 = "\n.,~7"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


def test_case_370():
    pass


@pytest.mark.xfail(strict=True)
def test_case_371():
    list_0 = []
    object_0 = module_1.object(*list_0)
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    int_0 = 1354
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    str_0 = "e\r^;togA+=\n_\x0cO(t["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    str_0 = "Yo-9h|"
    str_1 = "C(sPc3U6r=aK\nc\r"
    str_2 = "F\x0bDOm[:jhD"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    bytes_0 = b""
    str_0 = "2sqV2"
    tuple_0 = (bytes_0, bytes_0, str_0, str_0)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    int_0 = 761
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    bytes_0 = b"\x17\x95?\xaa@<\x90w>%\xc2\xd2m\xc5\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    int_0 = 1221
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    bytes_0 = b"\x19\xe2\x8d\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    bytes_0 = b"\xce\x18a?\xc4\t\xc0/\xdd\xfewk+\t\x1a2\x96\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    float_0 = 428.38
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    str_0 = "OD_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    bytes_0 = b"J,\xcctR\xb2\xa6\xa5\r8\x86L\xe5\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    int_0 = -3565
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    bytes_0 = b"\x9a"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    bytes_0 = b"\xe7\x0f\xb1\xc4\x00\x99\xd3\x8ev\x02\xa3>"
    str_0 = "B\rp_~LLhv:S@"
    list_0 = [bytes_0, str_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    complex_0 = -143.110475 + 959.198725j
    module_0.match(complex_0, complex_0)


def test_case_395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_396():
    int_0 = -3355
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    bytes_0 = b"\xa0\xcfZ?v"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_399():
    pass


@pytest.mark.xfail(strict=True)
def test_case_400():
    float_0 = 224.957718
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    bytes_0 = b"tK\n\x13\xae\r\x12\xc3[\xde\xaaq\xed\xc2r\xf2@\xed\xdcv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    str_0 = "\rCf=mPJ3v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    str_0 = "K%'hu*ZR\x0cnbq-3hYI"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_405():
    pass


@pytest.mark.xfail(strict=True)
def test_case_406():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    float_0 = -231.808658
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    float_0 = 3126.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    int_0 = 1857
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    int_0 = 944
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    bytes_0 = b"\xea\xa7\x86'Oy\xc8\x18Ke\xfd\xe6="
    int_0 = -1237
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    int_0 = 218
    module_0.get_new_command(int_0, int_0)


def test_case_413():
    pass


def test_case_414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_415():
    int_0 = -1248
    int_1 = 1092
    bool_0 = False
    tuple_0 = (int_0, int_1, int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    int_0 = 194
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    bytes_0 = b"\x98\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    str_0 = "EB4X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    bytes_0 = b"\x8b\xe4h\x0f\xe6)\xfb0n-D\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    complex_0 = -2601.935925 - 2069.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    int_0 = 2253
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    float_0 = -460.229
    str_0 = "?%2"
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, str_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    float_0 = 975.2708
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    int_0 = 4081
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    str_0 = "t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    bytes_0 = b"\x9fP>\xa9P\xf7\x19k"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    int_0 = 1470
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    int_0 = 1094
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    int_0 = -3016
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    str_0 = "Q~f`,@"
    module_0.match(str_0, str_0)


def test_case_433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_434():
    bytes_0 = b"MH\x17\n\x03"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    float_0 = -2973.738
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    bytes_0 = b"}d\xcd\xb7^\x03\t\xee\xa0j=\x13\x02\x08@\xe9\x0f\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    str_0 = "r29g[@XE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    bytes_0 = b"\xc4\xbc\x1c\x87\xe3\xe1\x05\xd2\xba]\xf9N\xf3\xd95\xb0r/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    str_0 = ".=dx\\<Vy\x0c"
    complex_0 = 1623.974111 - 2828.64799j
    module_0.get_new_command(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    bytes_0 = b"\xefX\x9b&L\xba(\xf3*\x87\x1e\xab6|\x04\x19^\x8eH\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    bytes_0 = b"\xff\xe8'\xed8\xb0\x1c;P\x8d\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    float_0 = -176.17302
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    int_0 = -2855
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    bytes_0 = b"\xda\xe1\xe2\xb7\x8c\x0e#\xe1"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    bool_0 = False
    object_0 = module_1.object()
    list_0 = [bool_0, object_0, object_0, bool_0]
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    int_0 = -4309
    float_0 = -3615.822
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    str_0 = "tlCR*"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    str_0 = "bG`0Qj9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    bytes_0 = b"4a\xfd\nb\xf2\xe6z\xcdQ\xc1\xbd7f\xd5\xce\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    bytes_0 = b"\xdaE\xe8aP\x92\xa6\xf6\x8b#\xb2\x18\xb9\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    int_0 = -1107
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    complex_0 = -657.17 - 537.66047j
    int_0 = -3766
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    bytes_0 = b"\xbc\xe0\x04\xe2<w\t\xa1\xa9>\xe71\xb3\x86v"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    int_0 = 1537
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    str_0 = "v?;4n3'%ap*rk.[n5n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    str_0 = "ly!ERfCffrrYk"
    bytes_0 = b"l"
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = set()
    tuple_1 = (str_0, bytes_0, tuple_0, set_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    bytes_0 = b"\x8e\xf9^\xf9\x8d"
    dict_0 = {bytes_0: bytes_0}
    set_0 = set()
    module_0.get_new_command(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    int_0 = -774
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    complex_0 = 204.35 + 1174.306j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    complex_0 = 2179.704 + 167.46378j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    int_0 = 2229
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_469():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    bytes_0 = b"\xf8\x82\x93\xe3?\xb6&i\xdf\xc0\xc7\x95\xe9o\xc3?\xe1U"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    str_0 = "5J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    list_0 = []
    complex_0 = 1344 - 1126.239j
    list_1 = [complex_0, complex_0]
    list_2 = [list_0, list_0, list_0, list_1]
    dict_0 = {}
    bool_0 = True
    tuple_0 = (list_2, dict_0, bool_0)
    module_0.get_new_command(tuple_0, list_2)


@pytest.mark.xfail(strict=True)
def test_case_473():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    int_0 = -1
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    str_0 = "|HO5Pi"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    int_0 = 929
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    complex_0 = 3927.67 - 989j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    bytes_0 = b"\xbdl\x0e?\xf3\xcd\xf8\x04\xf5w\xa6\xf5u\xab\xf2\x871W\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    int_0 = -8
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    bool_0 = True
    int_0 = -819
    tuple_0 = (bool_0, bool_0, bool_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    complex_0 = 2672.230232 + 1091.27j
    tuple_0 = (complex_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


def test_case_485():
    pass


@pytest.mark.xfail(strict=True)
def test_case_486():
    set_0 = set()
    int_0 = 2656
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    float_0 = 1750.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    bytes_0 = b"\xddV\xb5\xa9ur\xd3<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    int_0 = -3111
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    bytes_0 = b"9\xd6\xeb\xcf!\xcb\x01\x85\xf3\xba\xd9+\x0b/W\x8f\xfe\x10\x84S"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    none_type_0 = None
    str_0 = "h_Se E.GD'F`$I"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    none_type_0 = None
    str_0 = "Id>\x0c,_k"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    float_0 = -2132.0
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    bool_0 = False
    complex_0 = 2195.03 - 1243.12j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_500():
    float_0 = -757.3174
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    str_0 = "YTA?h9G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_503():
    bytes_0 = b"S\xd3\xben\xc8\xdf\x15\xa3\xe3\xa7\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    bytes_0 = b"\x8e'\xf76?\xe8\\L\xdc)\xac\xde\x03\xcd\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    complex_0 = -1880 + 2505.8j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    list_0 = [complex_0, complex_0, dict_0]
    module_0.get_new_command(complex_0, list_0)


def test_case_506():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_507():
    bytes_0 = b"\x05\xb8\x89\x99\xfa\xb6\x91P\xeb)[\xcbyq\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    str_0 = "K%L7 BZ+7d[`*=!Qz["
    set_0 = {str_0}
    str_1 = "\t6CT"
    module_0.match(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_509():
    bytes_0 = b"\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    bytes_0 = b"\xea"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    bytes_0 = b"YL\xaa<\xd3\x8a\xd8\x92-u\xfb\x9c\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    bytes_0 = b"\xe4\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    bytes_0 = b"\xfd\xc8'\x9a\xdf\xa6\xddRtJ"
    str_0 = "rM"
    tuple_0 = (bytes_0, bytes_0, bytes_0, str_0)
    list_0 = [tuple_0, bytes_0, str_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    str_0 = ";0,>d\r$w\r@G\\xRS#9 *"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    str_0 = "D}VQ[Z1b-Q"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    float_0 = 1643.43728
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    dict_0 = {tuple_0: float_0, float_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    bytes_0 = b"\xd5$\xa4.\xd6\xd4&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    int_0 = 26
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    complex_0 = -738.69 + 1332.177j
    tuple_0 = ()
    module_0.get_new_command(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_523():
    pass


@pytest.mark.xfail(strict=True)
def test_case_524():
    object_0 = module_1.object()
    set_0 = set()
    list_0 = [object_0, object_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    str_0 = "z:by%tRb*82!"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    int_0 = -1584
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    int_0 = 3927
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    int_0 = 2046
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    int_0 = 2209
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    bytes_0 = b"\xd5\xc84\x93VfS\xefY\xc3\xdcT\x9fi"
    float_0 = -3594.78
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    int_0 = 5479
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    complex_0 = 2496.865 + 1358.26132j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    bytes_0 = b"\xdbkU{\x8d#$\x90\x13\xbb\x1a"
    bool_0 = True
    list_0 = [bytes_0, bytes_0, bool_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    int_0 = -1502
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    str_0 = ";$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    bytes_0 = b"\xef|\x15D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    set_0 = set()
    float_0 = -1085.744231
    int_0 = -289
    tuple_0 = (set_0, float_0, int_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    str_0 = "Y\x0bG;8:@o\ntWX /-[\\8>E"
    dict_0 = {}
    bool_0 = False
    tuple_0 = (str_0, dict_0, dict_0, bool_0)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    tuple_0 = ()
    str_0 = "%!D]h%x\x0b.&3q{"
    tuple_1 = (tuple_0, str_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_542():
    float_0 = 333.4335
    bool_0 = False
    dict_0 = {float_0: float_0, float_0: float_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    float_0 = 1516.011
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    bytes_0 = b"\x88H\x1c52\xdb|\xfe}\x03\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    complex_0 = -339.15725 - 45.48j
    set_0 = {complex_0}
    list_0 = [set_0, set_0, complex_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    int_0 = -81
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    complex_0 = 1743.487 - 1303.540192j
    bool_0 = False
    tuple_0 = (complex_0, bool_0, complex_0)
    dict_0 = {tuple_0: tuple_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    float_0 = 265.876
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


def test_case_549():
    pass


@pytest.mark.xfail(strict=True)
def test_case_550():
    int_0 = -1382
    tuple_0 = (int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    str_0 = "D%48"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    int_0 = -828
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    bytes_0 = b"\x1d\x0c\x0e|\x1e\xc4\xb9\x02\x1b"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    bytes_0 = b"\x18'\x95@8\x16\xc5/MLZW\xb0\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    str_0 = ")'O)vNf5\rS7y|#K;Nm)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    int_0 = -883
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    float_0 = 2751.278
    str_0 = "9Tg/ehn(4u0ehsw["
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    float_0 = -2595.2881
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    complex_0 = -4772.20731 + 1050.295j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    int_0 = -400
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    complex_0 = 2107.826 - 3797.099j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    complex_0 = 593.373685 - 363.498j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    str_0 = ""
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    int_0 = 2712
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    bool_0 = True
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    str_0 = "q0`PKZ\r\tMxZQ(ae5`.O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    bytes_0 = b"\x0f\x80("
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_572():
    pass


@pytest.mark.xfail(strict=True)
def test_case_573():
    str_0 = "Py>)SFr#R*XwBYa"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    float_0 = -3630.6289
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    str_0 = '<"2"-6e/!O8w'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    str_0 = 'r\r4ZiY"^\njwz%T4Z:'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    str_0 = ",\rY6W9{{b$N<z["
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, set_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    bytes_0 = b"\xe6EF\xb4\xa5p\xda\xd1\xbe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    int_0 = -967
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    float_0 = 1237.097654
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    float_0 = -1431.239
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    bytes_0 = b"\xec\r\xbd0"
    bytes_1 = b"\xbc\xe3/.\x0b\x1a4\xbb0\n+\x9c\xb9!\x15iv\x9e'"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_583():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    bytes_0 = b"\x04\x11\xc6\\[\xe1{\xac\xe2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    str_0 = "DevH\r)zA@#<q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    int_0 = -936
    set_0 = {int_0, int_0}
    str_0 = "\x0b=d?a$|[-@Mi4@r]h"
    complex_0 = -290.4 - 1049.9j
    tuple_0 = (set_0, str_0, int_0, complex_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    str_0 = "@'.xN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    str_0 = "\tc\x0b6fC[ro2_xc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    int_0 = 5097
    module_0.match(int_0, int_0)


def test_case_591():
    pass


@pytest.mark.xfail(strict=True)
def test_case_592():
    str_0 = "`cBdR6rvkMa#*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    int_0 = -953
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    str_0 = ";$Z8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    tuple_0 = ()
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    int_0 = -2218
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    int_0 = 4494
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    set_0 = set()
    tuple_0 = (set_0, set_0, set_0)
    int_0 = -1963
    list_0 = [int_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    float_0 = 101.687
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    bool_0 = True
    int_0 = -561
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    int_0 = -258
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    bytes_0 = b"q\xe0I\x8fo\xd2\xfb\x96\xab\xa2h\xfd\x86\x8dP\xbe\xe3\xe5\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    bytes_0 = b"\xa4\xc7\x04\xcd@\r\xe5"
    bytes_1 = b"\xa80\x17^\xe4\xcf-iV\x189\xa6\x154L\xfbt\xf5\xd9"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_605():
    str_0 = "hg9vr4N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    bytes_0 = b"\x8a"
    float_0 = 1609.0
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    str_0 = "f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    bool_0 = False
    int_0 = -663
    dict_0 = {bool_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    set_0 = set()
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    int_0 = 880
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    int_0 = -47
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    bytes_0 = b"\x03\xdd\xaa\xc2\xef\x9cq\xaa\xef\xde@$\x1dL"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    str_0 = "\x0b4?}\x0bC12!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    bytes_0 = b"\x82\xb3g?*\xdb\xd4\x04'^\xaa"
    float_0 = 1799.67
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = "oTp^w4FgH~MH\\$T@\\"
    tuple_0 = (bytes_0, list_0, str_0, list_0)
    tuple_1 = (bytes_0, float_0, tuple_0)
    list_1 = [tuple_1, tuple_0]
    tuple_2 = (list_1, str_0, tuple_0)
    module_0.get_new_command(tuple_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    bytes_0 = b"c\xf7\x9bC@\xbc\x0e\xe0\xeb\xb8\xb4\n+\xcf\xcd"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    bytes_0 = b"l\xa9^\xa6\xd5\xc2\x8c\xe68\xe8\xbf.\xa1\xf9\xf7\xbdV"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    bytes_0 = b"lI\xed\xf0\xec\x02h\x03\xf3B_w\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    int_0 = 1610
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    str_0 = "*5Rnm[gu.GT\rMM?E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_623():
    pass


@pytest.mark.xfail(strict=True)
def test_case_624():
    complex_0 = 1401.170162 - 850.005j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    bytes_0 = b"\xf6\xf8n<\x91swJ\xadC\x19"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, set_0]
    list_1 = [list_0, list_0, set_0]
    module_0.match(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    int_0 = -1673
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    int_0 = 3910
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    int_0 = 1014
    str_0 = " owwYyhP<iFL>z{O-"
    set_0 = {str_0}
    tuple_0 = (int_0, str_0, set_0)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (object_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    str_0 = "N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    bytes_0 = b"\xe2u\x9e\x07\x8b\xfcH4W\xef<B\x0eY\x9d}"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    float_0 = -15.659282
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    str_0 = "2o+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    int_0 = -1467
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    str_0 = "R2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    bytes_0 = b"\xaa\x11s\xf3\xc9.\xe1O^\x8d\xa6\xc3\xd6B\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    bool_0 = True
    str_0 = "d-N"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    str_0 = "m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    bool_0 = True
    list_0 = [bool_0]
    int_0 = 977
    tuple_0 = (list_0, int_0)
    tuple_1 = (bool_0, tuple_0, bool_0)
    str_0 = " Uq6zIl^e7*`d?"
    bool_1 = True
    bytes_0 = b"\xeeU\xe7^\xfd\x96D\xc2\xc8/\xc8\xa9\x9c\xc6@[\xa1\xa0"
    dict_0 = {bool_1: list_0, bytes_0: tuple_1, bool_0: list_0, str_0: tuple_1}
    tuple_2 = (str_0, dict_0, bool_0, int_0)
    tuple_3 = (list_0, tuple_1, int_0, tuple_2)
    module_0.get_new_command(tuple_3, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    str_0 = "Shxm:"
    str_1 = "jt!L)pj"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    bytes_0 = b"\xff\xf1P\xd7:%\xc7!\xa7r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    float_0 = -3364.5624
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    str_0 = "\r@.x(f+)&p1QtW^(XD\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    bytes_0 = b"\xa1\xb0^\xb9xT?#\x92\xafR\x9e\xeb\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    complex_0 = -427 + 1095.16233j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    bytes_0 = b"\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    float_0 = 2212.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    bytes_0 = b"]4\xc3A\xf5\xfa"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    bytes_0 = b"\xbc"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    str_0 = ":]4ZtQtsb\rkmvT!("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    bytes_0 = b"\xed\xd2\xf5\xee\xafHJ\x9d>u\xbe\x83\xbd\xc1S\xbe\x9fD"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_656():
    pass


@pytest.mark.xfail(strict=True)
def test_case_657():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    bytes_0 = b"\xf7\x0fx\xa3k8\x89"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    int_0 = -1278
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    int_0 = 2083
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    float_0 = -2788.220327
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    str_0 = "z9ZjDo\x0c.4$N(of`!@"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    none_type_0 = None
    bytes_0 = b"\xd9n,\x9b\xa6\x87\x15\xf3A\xd5\xdc"
    int_0 = -805
    tuple_0 = (int_0, bytes_0, none_type_0)
    tuple_1 = (int_0, tuple_0)
    set_0 = {bytes_0, tuple_1}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    str_0 = "yI9a*-wZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    bool_0 = False
    bytes_0 = b"\x0c\x02WsES\x80\xba\xc0\x16X\x04\x06\x93\xf8\xea"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    bytes_0 = b"\x0e\x8dy\xc5\x0e\xa46\xbd\xf5\xdf\x05\x11\x86>\x91N\xf1\xdc"
    list_0 = [bytes_0, bytes_0, bytes_0]
    dict_0 = {bytes_0: list_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    int_0 = -2407
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    str_0 = "XWF9"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    float_0 = -965.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    bytes_0 = b"n\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    bytes_0 = b"\xbf\xd6\xc6\x04\xa7\xe7i4\x94\x0cO\xe4\xcde"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    int_0 = 1443
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    complex_0 = 209.86661 - 174.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    int_0 = -1287
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    str_0 = ";;"
    bool_0 = False
    bytes_0 = b"\x1c\x0e!\x18AbN\xf4\xcf\x06U\x84XH\xe8\x94\x95\xf1\xe0"
    tuple_0 = (bool_0, bytes_0)
    list_0 = []
    tuple_1 = (str_0, str_0, tuple_0, list_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    complex_0 = 2978.45 - 1583.76j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    str_0 = ":63h3Z\r\x0bN"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    complex_0 = -495.372 + 2566.5j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    str_0 = "Lu{wk0"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    str_0 = "_^w;cLyv'?&N{8xiH\tX"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    bytes_0 = b"\xebo"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    str_0 = "\r@lKnyhF\tO@ERrV{"
    module_0.get_new_command(str_0, str_0)


def test_case_687():
    pass


@pytest.mark.xfail(strict=True)
def test_case_688():
    bytes_0 = b"\xd0\xb8\xa2\xc9\xdd\xa3\xf2\x94h"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_689():
    pass


@pytest.mark.xfail(strict=True)
def test_case_690():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    complex_0 = 1458.5 + 898.37j
    bool_0 = True
    dict_0 = {complex_0: complex_0, bool_0: bool_0, complex_0: bool_0}
    tuple_0 = (dict_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    bytes_0 = b"\xdc\xb7\xc5\xe4\xf0\x89V\xdb\xca\xa5\xfah"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    str_0 = "eBKMy2y5u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    str_0 = "u"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    set_0 = set()
    bytes_0 = b"\xc5\xa6\xc3\x1d|\xa1\x96"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    bytes_0 = b"I\xbe\xfb\x87.\xb0c\xc6\xe4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    object_0 = module_1.object()
    int_0 = -1934
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    bytes_0 = b"7~\xc2@\x17\x0f\xf7\x8b\x0e\x0f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    bytes_0 = b"w<v\x90\x12\xff2\xef\xb6\xb1\xb8\xd5\xf0K\xeaO?b\xfeo"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    int_0 = -1749
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    set_0 = {tuple_0, bool_0, bool_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    float_0 = -794.5852
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    tuple_0 = ()
    str_0 = ""
    tuple_1 = (tuple_0, str_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_703():
    pass


@pytest.mark.xfail(strict=True)
def test_case_704():
    str_0 = "&]Pl%da"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    str_0 = "\x0cWDdOV[+\nc,wU"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    bool_0 = False
    float_0 = 2599.4621
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    bytes_0 = b"\xb7\xe7=\x04w\xca\xbd\xb6S]21\x8c\xd0s\xd0ZTI\xeb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    float_0 = -579.57243
    module_0.match(float_0, float_0)


def test_case_711():
    pass


@pytest.mark.xfail(strict=True)
def test_case_712():
    bytes_0 = b"\x9d\xc1m\x94\x87\xea\x9bd\t\xfe\x85z\xfb-I"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    float_0 = -2607.06404
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    int_0 = -1017
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    str_0 = "iC0"
    object_0 = module_1.object()
    set_0 = {str_0, str_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    float_0 = 613.777375
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    float_0 = 1446.6133
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    bytes_0 = b"p\xdbo"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    complex_0 = -389.85582 - 3085.280223j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    bytes_0 = b"\xfc\x93\xdaz\xb8\x06\xd3\xd6\xd1\xc28\xdf\x9e<\xff"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    int_0 = 1125
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    str_0 = "$ &\x0cy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    float_0 = 177.47
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    float_0 = -1139.544
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    int_0 = -1426
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    str_0 = "!=,g;rj$jqUE^i\\ZBj\rc"
    bool_0 = False
    complex_0 = -6262.31 - 1531.663j
    set_0 = {str_0}
    tuple_0 = (bool_0, complex_0, set_0, bool_0)
    tuple_1 = (str_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_732():
    int_0 = 1170
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    object_0 = module_1.object()
    int_0 = -5272
    object_1 = module_1.object()
    dict_0 = {int_0: object_0, int_0: object_0, int_0: object_0, object_1: object_0}
    bytes_0 = b"{J\xc3\x12\x9b\xc1\xe90D\x07\xc0\x8f\xb7:"
    tuple_0 = (object_0, int_0, dict_0, bytes_0)
    bool_0 = False
    list_0 = [bool_0, bytes_0, tuple_0, bool_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    bool_0 = True
    bool_1 = False
    bool_2 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_2, bool_2: bool_0}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_735():
    float_0 = -1772.06
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    int_0 = 1355
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    int_0 = 1876
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    complex_0 = 1779.199 - 1091.59966j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    int_0 = -3154
    list_0 = []
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    bytes_0 = b"\xc5t/\x86j\xad\xc9\xa4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    str_0 = "h("
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    int_0 = 1078
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    int_0 = 2919
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_746():
    complex_0 = -2160.3211 - 411.7661j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    str_0 = "cM!WSbyF:\x0b64"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    str_0 = "\nj&3~&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    int_0 = -3029
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    str_0 = "GWgl\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    bytes_0 = b"@VI\xf6\x04t\r0"
    bool_0 = False
    bytes_1 = b"5\x8c\xa2<\xae\x07\xa0G*\xf2\xeb"
    tuple_0 = (bytes_0, bool_0, bytes_1)
    list_0 = []
    tuple_1 = (bytes_0, tuple_0, bool_0, list_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_755():
    float_0 = -544.567292
    module_0.get_new_command(float_0, float_0)


def test_case_756():
    pass


@pytest.mark.xfail(strict=True)
def test_case_757():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    list_0 = []
    int_0 = 529
    tuple_0 = (list_0, int_0)
    int_1 = -1624
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_759():
    str_0 = "-DN6de96\r8Cjs:"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    bytes_0 = b"\xbe\xbc\xbf\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    str_0 = "ZXb+@=tq9mk#f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    str_0 = "'C"
    str_1 = "QMuz\\\x0cZpY'"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    int_0 = 782
    bool_0 = False
    list_0 = [int_0, int_0, bool_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    str_0 = '0"5X.&&~L_]V\npec2:'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    str_0 = "Uzr W/ZFeF238Xi$Z:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    int_0 = 3636
    tuple_0 = ()
    bool_0 = False
    dict_0 = {int_0: int_0, tuple_0: bool_0, int_0: int_0}
    tuple_1 = (dict_0,)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    int_0 = 510
    tuple_0 = (int_0, int_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    bytes_0 = b"x\xd2X\x13\x95\xf7\x7f\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    bool_0 = False
    int_0 = -592
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    float_0 = -1137.642
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    int_0 = 1043
    list_0 = [int_0, int_0]
    bool_0 = True
    bytes_0 = b"\x9c8\xd2\xc3#\xd8cFN\x18\x84\x1b\x06\x8d\xf3"
    tuple_0 = (int_0, list_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    str_0 = "2&\nroJAn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    bytes_0 = b"\xce\xeb\x93\x83\x13\x92\x9b)\x91/\xd0\x17"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    int_0 = -273
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    bytes_0 = b"\x96\x9f(\xb3\xea\x121+\x16\xb2\xc4\xbc\xd5\xdf:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    bytes_0 = b"\xf0^84q&\xbe\x1dL\x8f+\xb0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    list_0 = []
    str_0 = "WQD},dBsir'Ku\r*]e$a"
    str_1 = "\t*\x0c}nI*6\thmHU\rh+"
    int_0 = -1602
    dict_0 = {str_0: list_0, str_1: list_0, str_1: int_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    float_0 = -1852.0
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_784():
    pass


@pytest.mark.xfail(strict=True)
def test_case_785():
    set_0 = set()
    list_0 = [set_0]
    int_0 = -721
    bytes_0 = b"\xa9<\x13\xb5X\xfdH{1\xd4\xa1\xc3\xc6X\x19^\x91f"
    tuple_0 = (bytes_0, bytes_0)
    tuple_1 = (set_0, list_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\xbfeC\x87\xd7\x17\x14\xfe\xebw\x86V\xcc\x14\xd3\xb5\xd2"
    tuple_0 = (bool_0, bool_0, set_0, bytes_0)
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    str_0 = ")YY\n3\x0b,DOA{B}^'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    bytes_0 = b"\xf5\xd1-\xe4\xbco\xf5\xc9\xa7\xb7eZ\x1c\xb2\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    int_0 = 598
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    bytes_0 = b'S7C-G\xb8\x992\xa3\xae"a\xe3'
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    bool_0 = True
    int_0 = -2239
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    bytes_0 = b"\t\x19\xf2C|\xc3\xdb\xda@\x15`O`\x85Nz\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    complex_0 = -1847.084942 - 2292.786j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    str_0 = "+'.\x0bL4Ef "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    str_0 = "8mg\r\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    str_0 = '%lT@6yKPF"B4u)'
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    bytes_0 = b"\xa6\x00\xe8\x06sb6{GC\x92\x0c\xedZ\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    complex_0 = 2273.217695 + 1901.58676j
    bytes_0 = b""
    int_0 = 4223
    tuple_0 = (complex_0, bytes_0, bytes_0, int_0)
    dict_0 = {tuple_0: int_0, int_0: bytes_0, tuple_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    str_0 = "0 \\X\x0bs[."
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    int_0 = 900
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    str_0 = "7hHy*jb7[g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    int_0 = -819
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    bytes_0 = b"\x8f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_808():
    pass


@pytest.mark.xfail(strict=True)
def test_case_809():
    float_0 = 449.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    float_0 = -64.1775
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_1: bool_1, bool_1: bool_1, bool_1: bool_0}
    str_0 = "VU;@paCx5\n_R\nho-4"
    tuple_0 = (dict_0, str_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    str_0 = "<t7B>D!]8LL4.6"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    none_type_0 = None
    str_0 = "A*f%>>tDIz"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    bytes_0 = b"d\x0e\xe1\x8eVMR\xcdb\xb7\x12\x00\xfa\xbet\x81<\xfb5\xd9"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    int_0 = -2690
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    complex_0 = -78.019 - 3468.6983j
    str_0 = "3TWDb.r"
    tuple_0 = (complex_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    str_0 = "%\x0bB>izBn\t"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    bytes_0 = b"\x9a\x86{\x1b\xe0\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    int_0 = 1497
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    str_0 = "F^KX;:dz~jnj\x0c3\n"
    module_0.get_new_command(str_0, str_0)


def test_case_823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_824():
    str_0 = "dr\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    str_0 = 'w? 9~#n i=Ir"&'
    module_0.get_new_command(str_0, str_0)


def test_case_826():
    pass


@pytest.mark.xfail(strict=True)
def test_case_827():
    int_0 = 2609
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    str_0 = ""
    module_0.match(str_0, str_0)


def test_case_829():
    pass


def test_case_830():
    pass


@pytest.mark.xfail(strict=True)
def test_case_831():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    bytes_0 = b"Y\xf7\xa6\x15\xdf\xf5\x1e*\x19|i\xba\xbc\xf0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    int_0 = 87
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    int_0 = -807
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    bytes_0 = b"b\xdb\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    str_0 = "mvr/))R5B<_ #qJtC<uW"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    complex_0 = 634 + 1380.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    str_0 = "hM\\KA#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    float_0 = -1717.93
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    bytes_0 = b"\xb1EQ\x00\xc1Q\x9d\xc4\x81\xf1_%? vO"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0]
    list_1 = [list_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    str_0 = "\x0c"
    int_0 = -2262
    dict_0 = {str_0: str_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    str_0 = "NUwN&o:)mUixa"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    str_0 = "~E{8ry)S=GTw~\npp%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    float_0 = -1274.89794
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    bytes_0 = b">r\x92\x94CP\x86"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    int_0 = -1486
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    bytes_0 = b"H4\x98\x89\xfa2\x81o\xbff\xf0(\x17\xd98\xbeM=\xcc\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    float_0 = -2829.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    int_0 = 1311
    module_0.match(int_0, int_0)


def test_case_854():
    pass


@pytest.mark.xfail(strict=True)
def test_case_855():
    bytes_0 = b"\x8a|y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    float_0 = -1603.69657
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    complex_0 = 261 + 286.73j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    int_0 = -480
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    int_0 = 1780
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    bytes_0 = b"\x0b\x89\x12\xcb`\xc6\x85\xf2\x05\xe6i\x9a\xe7M\x16\xc7Fz^H"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    none_type_0 = None
    str_0 = "XYi3fFNR (Mcc"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    str_0 = "\x0b)P\\iZtM"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    bytes_0 = b""
    object_0 = module_1.object(*bytes_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    str_0 = "GDmC/F"
    str_1 = "?avV>?::^pOFi^"
    set_0 = {str_0}
    dict_0 = {str_0: str_0, str_1: set_0, str_1: set_0}
    module_1.object(**dict_0)


def test_case_865():
    pass


@pytest.mark.xfail(strict=True)
def test_case_866():
    bytes_0 = b"\x81^\x89\xfb\r\x9fj"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    int_0 = 3054
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    int_0 = -211
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    int_0 = 4383
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    int_0 = 1042
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    bytes_0 = b"Y\x96\x91\xa1\xe2\xba<\x85\xfe\xd4\x18\xd4\x9d\xf2'\xe2&f"
    list_0 = [bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    int_0 = 1789
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    int_0 = -695
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    int_0 = 564
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    complex_0 = -828.8803 + 1395.0318j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    bool_0 = False
    str_0 = "oD3JX6X\x0cV"
    set_0 = {str_0, bool_0, str_0, str_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    str_0 = "\t&Jn@Sm\t\x0ccL#>e3\x0c"
    module_0.match(str_0, str_0)


def test_case_879():
    pass


@pytest.mark.xfail(strict=True)
def test_case_880():
    int_0 = 1524
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    bytes_0 = b"\x8f+\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    int_0 = 2045
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    bytes_0 = b"\xfa\xf3\x9bf\xf9\x11\xeb\x9c(\x17\xb3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    bool_0 = False
    bool_1 = False
    module_1.object(*bool_0, **bool_1)


@pytest.mark.xfail(strict=True)
def test_case_885():
    str_0 = "|H7c)~t~;y*fNp\nd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    bool_0 = True
    complex_0 = 4867.57481 + 1067.6855j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    int_0 = -1328
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    complex_0 = -50.1 + 2362.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    int_0 = 1151
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, list_0, list_0, int_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    str_0 = "?f\x0b"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    bool_0 = True
    float_0 = -1434.36
    set_0 = {bool_0, bool_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    bytes_0 = b"\x166\xb9\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    bytes_0 = b"|\xe1L\xa8\x82\xff\xe1\x7fL\x95\xba\xa2\x8e!\x8d\x15\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    float_0 = -714.1047
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    str_0 = "W!\r|8M$qe sF"
    module_0.get_new_command(str_0, str_0)


def test_case_897():
    pass


@pytest.mark.xfail(strict=True)
def test_case_898():
    str_0 = "Kp&otq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    complex_0 = -3713.882 + 937j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    int_0 = -436
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    str_0 = ")WFZU)pt1X=SbR}~M@}r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    bool_0 = True
    float_0 = -2633.6
    list_0 = [float_0]
    list_1 = [bool_0, list_0]
    module_0.match(list_1, list_1)


def test_case_903():
    pass


@pytest.mark.xfail(strict=True)
def test_case_904():
    str_0 = "#|dU'j\ruA"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    bytes_0 = b"J\x13BL\xd5\xf7SB\x18v\xddF\xcd"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    int_0 = -1611
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    int_0 = 1165
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    bytes_0 = b"\xcd\x9e\x18\r\xdb\x80\x8cd\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    float_0 = -855.01
    set_0 = {float_0, float_0, float_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    int_0 = 3895
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    int_0 = 326
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    complex_0 = 2353.2224 + 1835.0223j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    bytes_0 = b"\xd4!^D(\xd9 \xd9aZ\xf9\x91r\xbf*s"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    int_0 = 2390
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    str_0 = "H?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    int_0 = -269
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    float_0 = -1274.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    bool_0 = True
    int_0 = 286
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    float_0 = -1384.56
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    float_0 = -2468.780373
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, tuple_0)
    dict_0 = {}
    module_1.object(*tuple_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    int_0 = 1647
    str_0 = "\x0c:)_["
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    bytes_0 = b"\xa8\xcdV@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_931():
    pass


@pytest.mark.xfail(strict=True)
def test_case_932():
    int_0 = 176
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    bytes_0 = b"\xc3\xef\xa5G\xb1\xceK\x85\xab\xa2\xd6\x7f\x84\x1b\xf4&\x96A\x8a"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    complex_0 = -1571.23976 + 2372.27j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_935():
    pass


@pytest.mark.xfail(strict=True)
def test_case_936():
    float_0 = -1947.820307
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    int_0 = -2021
    module_0.match(int_0, int_0)


def test_case_938():
    pass


@pytest.mark.xfail(strict=True)
def test_case_939():
    int_0 = -1886
    bool_0 = True
    tuple_0 = ()
    list_0 = [tuple_0]
    tuple_1 = (int_0, bool_0, tuple_0, list_0)
    int_1 = 294
    tuple_2 = (tuple_1, int_1)
    module_1.object(*tuple_2, **tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_940():
    bytes_0 = b'K\xb8\xa5\x89\xe4&S\xa9"\xb56\xae&C'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    bytes_0 = b"\x86\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    str_0 = "fJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    str_0 = 'adYNnc`ahJB"Uroz'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    str_0 = "A-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    str_0 = "i]?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    bytes_0 = b"\xee\xbf\xb1\xb1\x7f#R7=\xc0;\xf2\xee\xf2>\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    int_0 = -899
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_951():
    str_0 = "U\x0b3"
    none_type_0 = None
    str_1 = "lZmu%Al"
    str_2 = 'JLhG-U9_fBw;"OT+'
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    complex_0 = -1640.04189 + 441.97j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    int_0 = 447
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    int_0 = 3893
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    float_0 = 88.101
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    bytes_0 = b"\x12x\xb5$;g\xdf?F\xb5\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    int_0 = -4034
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    int_0 = -2171
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    int_0 = 344
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    int_0 = -1680
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    dict_0 = {}
    object_0 = module_1.object(*dict_0, **dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    bytes_0 = b"%EYi\xb1\xe8\xaef\xf2k\xb3\xd1C\xd5g\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    bool_0 = True
    str_0 = "3v"
    list_0 = [bool_0, bool_0, str_0, str_0]
    list_1 = [bool_0, str_0, list_0, str_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_966():
    float_0 = 565.91858
    module_0.match(float_0, float_0)


def test_case_967():
    pass


@pytest.mark.xfail(strict=True)
def test_case_968():
    bool_0 = False
    bytes_0 = b"@\x80=\x80t\x9c6l\xff\xa0l"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    bytes_0 = b",t\xa4U7\xecJ}ZM=\xf9w\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    str_0 = 'hwrD#*nX\\%&8w"Gh#E\tn'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    str_0 = "y\r^'p5Q->rZfv`hq+PR9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    float_0 = 238.89
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    int_0 = 279
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    bool_0 = False
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    str_0 = "{,L,($\n;P;QxIZs\"'&#D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    float_0 = -1692.53
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = []
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    none_type_0 = None
    int_0 = 2692
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    bytes_0 = b"Q\x9c\x83\xe0E\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    bool_0 = True
    float_0 = -53.7
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    bytes_0 = b"\x8e\x8a\xf1\xd0q\x82S\xe1\xf9\xdac\xfc\x9fQY\x11 \x90\xd6\x04"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    int_0 = 4292
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_984():
    pass


@pytest.mark.xfail(strict=True)
def test_case_985():
    int_0 = -4097
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    bytes_0 = b"e`U]"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    bytes_0 = b'U\xfbaHE\xac4\xa7\x8a\xec\x01t]"'
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    int_0 = 2077
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    bytes_0 = b"\x93v-zt\x94\xafC\xe8\xf5<aS\xfc#D"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bytes_0 = b"\xc0\xbf\xee\xa84\xcc/J/\x0f\x05\x84\x12ey\x99\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    bytes_0 = b"\x8d\x812\xabR\x8c\xbf\xe1\x8f5\xf7\x8e\xbd\xd1GJ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    str_0 = "Ms2=m0QJ':qcPly1"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    bytes_0 = b"i\xfb\x9d\x7f\xe9\xecR\xcd`\xed\xfd\x8f\xba"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    int_0 = -1241
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    int_0 = 166
    module_0.match(int_0, int_0)


def test_case_996():
    pass


@pytest.mark.xfail(strict=True)
def test_case_997():
    int_0 = -1256
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    int_0 = -1223
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    int_0 = 2364
    module_0.match(int_0, int_0)


def test_case_1000():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1001():
    int_0 = -5367
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    bytes_0 = b"\xbe\x00\x99\xdb!\x14\x00g\xc6\xcd\x81\x80\x9e\xfa\x19\x9d;\xc7_\x1c"
    int_0 = 1308
    tuple_0 = (bytes_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    str_0 = "|~{g%CpA'*r}Zw<K8*rE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    bytes_0 = b"\xfc#\x13\xcb\xacv)\xdc\xee\xf8?8\xad\x8f\x06I`=\n"
    module_0.match(bytes_0, bytes_0)


def test_case_1005():
    pass


def test_case_1006():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1007():
    str_0 = "BTv}Odq{\t\\4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    str_0 = "f!pk"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    bytes_0 = b"$\x14'!"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    tuple_0 = (bytes_0, set_0, list_0)
    module_0.match(tuple_0, list_0)


def test_case_1010():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1011():
    bytes_0 = b"Qo\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    int_0 = 2243
    module_0.match(int_0, int_0)


def test_case_1013():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1014():
    str_0 = "W>/UA~[awTxR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    int_0 = 873
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    float_0 = 1350.927678
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    float_0 = -1121.028026
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    int_0 = 1441
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    complex_0 = 2398.257722 - 1204j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bool_0 = True
    bool_1 = True
    str_0 = "6fQ-;yKt<I/)m$<]"
    tuple_0 = (bool_0, bool_1, str_0)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    str_0 = "(/&u\nRP)n/FEkuC9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1025():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1026():
    int_0 = 1166
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    float_0 = 296.92
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    int_0 = -49
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    float_0 = 653.24031
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    bytes_0 = b"G\x13TZ\x01\x8e\xe9\xacx\xa8$#\xa8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    int_0 = -240
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    int_0 = -2393
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    bool_0 = True
    int_0 = -214
    module_0.get_new_command(bool_0, int_0)


def test_case_1034():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1035():
    float_0 = -1519.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    bool_0 = True
    int_0 = -2210
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    str_0 = "/pp1<@*}vo]K@)(]Aa-c"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.object(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    int_0 = 1328
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    float_0 = -869.004
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    bytes_0 = b"\x9d\x00'\x9f\xeb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.object(*list_0)


def test_case_1043():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1044():
    str_0 = "(1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    int_0 = 1500
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    tuple_0 = ()
    object_0 = module_1.object()
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    str_0 = "QS6"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    str_0 = "Flu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    bytes_0 = b"0ki\xb6\xb7\xc3\x8e\xde\x8f3\xfc\xbb\xa1.!J\xcb\xc7%"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    str_0 = "-cON3i/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    str_0 = "}_\tcoS> $NJyK<jF\t$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    int_0 = -1384
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    str_0 = "[ZDs'dZ%XBbj((~"
    bool_0 = False
    set_0 = {str_0, str_0, str_0, bool_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    str_0 = "xSrR0+d8"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


def test_case_1057():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1058():
    float_0 = 341.86
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    bytes_0 = b"\x13\xda\xe8\x04T\xc3\xeaS}\x9e\x9e\xd6\x7fu\x1f|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    int_0 = 2055
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    bytes_0 = b"Q\xf6\x9e\x07\xbb\x83"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    int_0 = 303
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    complex_0 = -57.617 + 857.29j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    int_0 = -731
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    bytes_0 = b"\xc6\xf6'-\xd0\x992\xe5\t\x1dJ"
    dict_0 = {}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    str_0 = "d|'|Ri/*G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    str_0 = "^:Y'rl7ngP#f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    int_0 = -2376
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    bytes_0 = b"wA\xd3\xaa"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    str_0 = "\x0cW|~6,*a2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    int_0 = -1608
    module_0.match(int_0, int_0)


def test_case_1075():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1076():
    float_0 = -410.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    bytes_0 = b"\xc8\x0e@\x9b\xa0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    bool_0 = False
    float_0 = 1875.7
    int_0 = -872
    bytes_0 = b"\xb1\x02\x84\xf0\xea\xbe\x88~\xa7\xcd!u\xdd}o\x1e"
    bytes_1 = b"\xf6b\xad\xf0H\x82\xac\x1b\xa4|\x0b\xbe@4"
    tuple_0 = (float_0, bytes_0, bytes_1)
    tuple_1 = (bool_0, float_0, int_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "=6\t G"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    bytes_0 = b"\x0bF"
    str_0 = "vbw\tl+f\t7^,RI4sMEVgD"
    int_0 = 1668
    bool_0 = True
    tuple_0 = (bytes_0, str_0, int_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    str_0 = ""
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    str_0 = "q%A')0!.#Xn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    complex_0 = -548.4905 + 285.326j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    bytes_0 = b"t\x06\xa6\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    int_0 = 738
    module_0.get_new_command(int_0, int_0)


def test_case_1087():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1088():
    str_0 = "'+?/i< B\t$k2Ib4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    int_0 = -1252
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_1092():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1093():
    float_0 = 1757.69953
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    complex_0 = -2064.003 - 470.7102j
    dict_0 = {}
    module_0.match(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    str_0 = "D]M"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    int_0 = 3032
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    float_0 = -349.24837
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    float_0 = 1262.8
    bool_0 = True
    bool_1 = False
    dict_0 = {float_0: float_0, float_0: bool_0, bool_0: float_0, bool_0: bool_1}
    tuple_0 = (bool_0, bool_1, dict_0)
    list_0 = [float_0, tuple_0, tuple_0]
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    bytes_0 = b"j\x18}k\xadR\xe4\xcb\xe4\x02\xb0\xaa\x1b\x1b\xe6\xcb\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    complex_0 = 1416.6 - 419.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    str_0 = "p;\n(H1Z8ov+"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    dict_0 = {bool_0: bool_0, str_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (tuple_0, dict_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    bytes_0 = b"X\x94\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    str_0 = "R"
    str_1 = "4,iX\r"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: bool_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    int_0 = 62
    module_0.match(int_0, int_0)


def test_case_1106():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1107():
    float_0 = -508.454
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    int_0 = 2895
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    bytes_0 = b"\x8d\x1b\xb3y\x06/\x19"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    complex_0 = -810.997668 + 1730.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    str_0 = "LJquSgr9NVv-!+"
    module_0.get_new_command(str_0, str_0)


def test_case_1112():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1113():
    bool_0 = True
    int_0 = -1045
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    bytes_0 = b"`'\xe8V0\x8e\xea\x146M\x8c"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    int_0 = -429
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    str_0 = "SXOkm=M\n_r\\RZP"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    int_0 = 95
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    complex_0 = 2100 + 2008.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    float_0 = 1204.56907
    str_0 = "L}J}FdKv#7\x0c"
    tuple_0 = (dict_0, list_0, float_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    int_0 = 609
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    complex_0 = 3110 + 1609.777j
    str_0 = 'Q23D}"~x]'
    int_0 = -741
    list_0 = [str_0, complex_0, complex_0]
    tuple_0 = (complex_0, str_0, int_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    str_0 = '{"k'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    float_0 = -989.78
    dict_0 = {float_0: float_0}
    float_1 = 1251.01527
    module_0.match(dict_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    bytes_0 = b",\x97Q\x80d\x18\x9e\x8aal\xc6\xa7\x92\xd9\xd6\xaa\xf3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1128():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1129():
    str_0 = "A*4"
    module_0.get_new_command(str_0, str_0)


def test_case_1130():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1131():
    str_0 = '"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    bytes_0 = b"\x88\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    str_0 = "IT/8}hW^PTlSZ-9g\rE"
    module_0.get_new_command(str_0, str_0)


def test_case_1134():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1135():
    str_0 = "#RF5lqjRc\\0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    none_type_0 = None
    str_0 = "z:;L\\\r[ }#9*-Ca5 ,\n"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    complex_0 = -745.23646 - 1216.65j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    int_0 = 3292
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    int_0 = -859
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    complex_0 = -1684.69377 + 2178.891j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1143():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1144():
    bytes_0 = b"'\x0c\x19\x1bq\\\xf1\x18\xe6\xf7x"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    bytes_0 = b"\xa3I\xbe\xaa\x17:"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    str_0 = "/$>fm*x6 H.(p~>\x0b5%T"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    list_0 = []
    float_0 = 862.22
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    complex_0 = -124.851 + 558.4j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    str_0 = "~e,\n@\x0bNkh\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    bytes_0 = b'k~\x89\xb1\xb5\xda-\xfa6\xbf\x08\xb3"\xa1\xa8\x98\x92'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    bytes_0 = b"/\x9fs\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    bytes_0 = b"\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    bool_0 = False
    int_0 = -2345
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    str_0 = "<>!vnLcd}rBE_:Z~c["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    str_0 = "V%aK_FO.>J#c})o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    str_0 = ">t`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    bytes_0 = b"L>\xb0\xd1\xb2\x0e\x97\xa4`}>\x97\xc2\xeb\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bytes_0 = b"\x13\xcd\xa9;@WB\xc6c\x0cg"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    bytes_0 = b"ng"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    bytes_0 = b"\x143\x1c\x90\xcc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    complex_0 = -2872.02906 - 5484.14j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    str_0 = "RwZ t"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    int_0 = -2645
    bytes_0 = b":\x81V"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    bytes_0 = b"\xbc0a\xf4\xdf\x94\x94\xfe\x84\xaf\x93\xaa\xc8\xe3~\xc8\\"
    complex_0 = -4479.57 + 3628.69j
    int_0 = -2247
    dict_0 = {bytes_0: complex_0, bytes_0: int_0, complex_0: int_0}
    set_0 = set()
    list_0 = [dict_0, dict_0, complex_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0, dict_0]
    float_0 = 2800.0
    tuple_1 = (list_0, float_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    float_0 = 4277.05
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    bool_0 = False
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    float_0 = 2311.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_1180():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1181():
    float_0 = 1107.22848
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    float_0 = 1847.30083
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    str_0 = "vgm.iwNW\nS+_G?Y{L)U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    bytes_0 = b"\xcc\x00VVR[ \x1b\xf3\xa1\xfc'{j\xc3\xf9m"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    bytes_0 = b"\xef\xc2\x94W\x90\xab5\x97x\xcc\xc0\xfc\x82o\x83"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    str_0 = "L]qr\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    str_0 = '"PX0'
    dict_0 = {}
    list_0 = [str_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    bytes_0 = b"\x8d\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    float_0 = -1987.6732
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    int_0 = -1102
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_1193():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1194():
    int_0 = 879
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    bytes_0 = b"\xae\xd9\xd1\x12\xef\xca\xc2\xd9U\xab\xa5\xdf@\x9c.R\xcc\xc5\xca\xaf"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    bytes_0 = b"&@\xcc6\x0b\x9c\xecaIU<"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    str_0 = "{`J5Cfcx{3k.=q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    str_0 = "a:e\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    bytes_0 = b"\xb2\x80\xd9\x91\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    bytes_0 = b"\xf8B\xb5\xd85\x1f\xd4>\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    str_0 = "OJ\x0c0b3V,Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    complex_0 = -1660.4 + 2931.58j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    str_0 = "'9NvT^<Gl"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    str_0 = "8S0t#)"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    str_0 = "5kWc]MtEFk>}O&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    str_0 = "fMi<>rR,nuD`4I@\t"
    complex_0 = -1633.8932 - 908.03j
    tuple_0 = (str_0, complex_0, str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    bool_0 = True
    set_0 = {bool_0}
    bool_1 = True
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    str_0 = "c,,qfE;@}54]Z2'<~zm"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    complex_0 = -479.55 + 1019j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    str_0 = "iIa&C;"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    int_0 = 1569
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    int_0 = -3838
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    bytes_0 = b"\xf2\xd6WO\xa9\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    bytes_0 = b"\xa5^$\x04\xe0\xde4\xcb\xd9B\xbeOyEB\xb7\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    str_0 = "Qj0.wh$zKB"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    str_0 = "L?\t]$pM-w\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    float_0 = 485.384022
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    str_0 = "$~\x0bJ6r7fA\r|Uc#\t<[,t"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    int_0 = 273
    str_0 = "Y\to~qn"
    set_0 = {str_0, int_0, str_0}
    tuple_0 = (int_0, str_0, int_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    bytes_0 = b"'\xac\x9bq\xbb\xa2<\x8a\x9d;nX\xf2\x7f"
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [bytes_0, tuple_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    str_0 = "WyYi#"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    str_0 = "ak96J\x0bcvo\x0bMu-'Pw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    str_0 = "(JrvaK&4|V1-RZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    str_0 = "Oo;1'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = []
    module_0.match(object_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    bytes_0 = b"\x9a\xd1t3\xf1\xd3-6K\xab]8e\xde\xb5k\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    str_0 = ",6h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    object_0 = module_1.object()
    int_0 = 1979
    list_0 = [object_0, int_0]
    str_0 = "UzPJ' S%2"
    bool_0 = True
    tuple_0 = (str_0, bool_0, str_0, int_0)
    tuple_1 = (int_0, list_0, tuple_0, bool_0)
    module_0.get_new_command(object_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bool_0 = False
    list_0 = [bool_0]
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: list_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    str_0 = "Z?g$-(Q)7"
    str_1 = ""
    set_0 = set()
    dict_0 = {str_0: str_0, str_1: str_1, str_1: set_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\x8b\xa7\xfb\x1b\xde\x97\x82\xe7\xeaQ\xcd\x02;F'7"
    tuple_0 = (list_0, set_0, bytes_0)
    tuple_1 = (tuple_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


def test_case_1234():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1235():
    int_0 = -1109
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    bytes_0 = b"\x9c00\xc6\x98\xd8E\xf0\xc6\xd4Q\xc09|\xb8C["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    int_0 = 499
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    str_0 = ":cN\x0b1x*E5sw^P"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    dict_0 = {}
    str_0 = "hF6t-Y`u"
    module_0.match(dict_0, str_0)


def test_case_1240():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1241():
    bytes_0 = b"S\xf8W\xaa\xfb]\xef\xd79\xbb\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    bytes_0 = b"L\xe0\xa3\x05\x94\xc90\xeb\xb8\\\xaac\x90\x0c\x1a::w"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1243():
    pass


def test_case_1244():
    pass


def test_case_1245():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1246():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    float_0 = -275.348
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    bytes_0 = b"D+\xe1\x82\x1d\xe6\xd1f\x80\x0c\xf1M"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    float_0 = -791.91
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    bytes_0 = b"8\xd1'\xba\x04&\x8a\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    str_0 = ").DX*q[ 8"
    module_0.get_new_command(str_0, str_0)


def test_case_1254():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1255():
    bytes_0 = b"FR\xe0V\x98\x06V\xd3\xfb\x90b_\nF|\xb5\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    str_0 = "Hu,$"
    set_0 = {str_0}
    list_0 = [set_0, set_0, set_0]
    bytes_0 = b"\xa19A\x96d\xf9\x1f\xcd*\xb67f\xb1HB\xaf\x06"
    bytes_1 = b"[\x00\x01\xc25\x9c=pR\xf6e\xf0\xcaG"
    tuple_0 = (list_0, bytes_0, bytes_1, list_0)
    list_1 = [tuple_0, bytes_1]
    module_0.get_new_command(list_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    int_0 = 1743
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    float_0 = -122.698
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    bytes_0 = b"mZ\xeesM\xee,\r\x1a]\x11m4\x19\x95"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1263():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1264():
    bytes_0 = b""
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    complex_0 = -3353 - 827.7054j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    float_0 = 258.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    bytes_0 = b",r\xc8\x0fh*\x88["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    int_0 = 60
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    str_0 = "5iV2!n\r~OjGnhd\x0b<H5a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    complex_0 = 327.00542 + 1875.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    bool_0 = True
    bytes_0 = b"\xd6\xe1\xc3>\xcb*\xa4\xdb"
    dict_0 = {bytes_0: bytes_0, bool_0: bytes_0}
    bool_1 = False
    tuple_0 = (bool_0, bytes_0, dict_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    int_0 = -2742
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    tuple_0 = (int_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    int_0 = 243
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    str_0 = "RAGWRL"
    float_0 = 467.017
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    float_0 = 1562.98
    str_0 = "\t/ni9'p\tDkd"
    str_1 = "L"
    tuple_0 = (float_0, str_0, str_1)
    list_0 = [tuple_0, float_0]
    bytes_0 = b""
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    bytes_0 = b"\xd3\xaa\x92\xbd\xde\xa8Wl\xf5\x1c\xa9\x7fL8xx\x08\x02\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    str_0 = "eI^{3\r)\tsqD/\x0c1n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    str_0 = "-$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    bytes_0 = b"\xf1\xc0\x1d4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    str_0 = "vl69i@dS\":OvC[Kl':L,"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    bytes_0 = b"\\\x1a\xee\xa7\xb9)\xff7\xec\xaa^7\xc2\xca"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    str_0 = "SzY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    int_0 = 2027
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_1290():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1291():
    str_0 = "~b<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    int_0 = 3736
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    int_0 = 2176
    module_0.get_new_command(int_0, int_0)


def test_case_1294():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1295():
    float_0 = 4030.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    bytes_0 = b"\xd4\xa1`\x0bw\x18Z\x97\x86V\x904{^\xe9D\x9d"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    bytes_0 = b"\xe7\xf1\x0f\xa0\x8f\xcb\x03\n \x80\x83\xeaA\x0e\x10\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    float_0 = -2401.52296
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    int_0 = -2015
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    str_0 = "fYol=sjpR6;\rT.9.d@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    float_0 = -2100.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    float_0 = -337.37
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    str_0 = "v(I,s1\\Lx/qH2Z\nUd/l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    float_0 = 2454.691379
    bytes_0 = b"\x12_\xaf\xd4gAm\xb8Y\xa3{X\xa2\x87\xb8\xa2\xe6\x8d!\xfd"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    float_0 = -1341.971444
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    none_type_0 = None
    complex_0 = -940.9671 - 580.066j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    bytes_0 = b"\xa3\xb9\xa9\xd40"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    int_0 = -1152
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    bytes_0 = b"\xf8<\x9cg\xe0RU\xba\xf0\x82~\x7f\xbc\xc9c@\x87B"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    str_0 = ";1l_$3dS1"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    bool_0 = True
    str_0 = ""
    list_0 = [bool_0, bool_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    int_0 = 2231
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    str_0 = ";7^Zg6o:9!J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    int_0 = 133
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    int_0 = 1464
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    str_0 = ".\x0c[!:`_iP[#a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    int_0 = 108
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    float_0 = 1480.02644
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    int_0 = -202
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    int_0 = -1606
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    str_0 = ";fzK"
    str_1 = "{\x0bs[824 m[\t\x0bQ\x0bR%oL6"
    str_2 = "7LF5O3?JQvOi)%to\x0cW81"
    str_3 = "O5Xd"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_3: str_3}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    str_0 = ";D>MM7Ga5)7jV@JW9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    complex_0 = -554.4 + 1414.256151j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    complex_0 = 3243.004 + 1676.8216j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    int_0 = -1973
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    int_0 = 343
    int_1 = 57
    str_0 = ".BNT"
    tuple_0 = (int_0, int_0, int_1, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_1338():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1339():
    str_0 = ".\rw(2p|/wo$90w*V}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    int_0 = 1737
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    str_0 = ")8@bD7pRJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    bytes_0 = b"\x06\xd2\x8a\xc2#\x18?\x9fg"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    complex_0 = -110.453029 + 534j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    bytes_0 = b"\xbb\x0c\xb8\x03\xd6\xfb:\r\x14\xdc"
    int_0 = -642
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    str_0 = "u}B+3~\rY-]$Oj.KVMsK\x0c"
    module_0.match(str_0, str_0)


def test_case_1348():
    pass


def test_case_1349():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1350():
    bytes_0 = b"_kW\xc5\x93m;\xd4\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    none_type_0 = None
    bool_0 = False
    dict_0 = {
        none_type_0: none_type_0,
        bool_0: bool_0,
        bool_0: none_type_0,
        bool_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = ()
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    str_0 = "FImZG~9\nA8@szrJOoD9'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    bytes_0 = b"A\xd97%\x16a\x02\x00\xbd\x14?!\x85\x82\x9f%"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    int_0 = 4366
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    int_0 = -2606
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    bytes_0 = b"U\xd0\xad\x1c\xa1S"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1358():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1359():
    int_0 = -1497
    float_0 = 2319.96361
    dict_0 = {int_0: int_0, int_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    float_0 = 2860.0
    object_0 = module_1.object()
    set_0 = {float_0, float_0, float_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    int_0 = -609
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    none_type_0 = None
    str_0 = "Saw\x0b20)S3"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    bytes_0 = b"\x8eZ\xa2m\x10\x8ct\xf5\x9bk\xd0\xcf\xefjY1\xa8_"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bytes_0 = b"^\xa5\xc1pz"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    str_0 = "8dPI1QAx"
    complex_0 = 1763.9 - 519.6621j
    dict_0 = {str_0: complex_0, complex_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_1367():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1368():
    bytes_0 = b"\xa0\xbcr\x82\xad\xd5\xf5\x0b\xc2\xa6\xb5\xf6\xf5Zd\x1bc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    str_0 = "K<'!#W\x0clO{'.e<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    str_0 = "dU_x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bytes_0 = b"\xc2\x98\x81\xc6\xd8>\xdb-P\xach\x96\xf1\xb1\x96l\xb9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    str_0 = "eT'4o8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    int_0 = -3307
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    int_0 = -1295
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    int_0 = -1428
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    bool_0 = True
    bytes_0 = b"\xa4V\xf9k\xca\xf1u\x00\xea\xbc\x90\xe1\xf4\xab4"
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    complex_0 = -1378.57013 - 5147j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1378():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1379():
    float_0 = -321.522
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    int_0 = 612
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    str_0 = '<?v"aJm<Q.'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_1383():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1384():
    complex_0 = 1191.55141 + 2464j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    bool_0 = True
    str_0 = "'e-dVj izr9 $.\"%3eY"
    dict_0 = {str_0: bool_0, str_0: bool_0, bool_0: bool_0, bool_0: str_0}
    tuple_0 = (bool_0, bool_0, str_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    bytes_0 = b"\x18;\xc4\xfa\ts\x9e\x910\xa3\xf4\xa5\x90\xe5/Nm"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    str_0 = "*!! (GY3mI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    int_0 = -1809
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    float_0 = 836.626167
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    str_0 = "OB@g.\\(vA D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    int_0 = 2900
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    int_0 = 684
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    float_0 = 3118.763036
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0, bool_0, dict_0, float_0]
    bool_1 = False
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_0, bool_1, bool_1, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    int_0 = -5135
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    float_0 = 277.22
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    bytes_0 = b"\xf0\x0c\x11L"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    int_0 = 372
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    int_0 = 877
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    int_0 = 1233
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    int_0 = -3555
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    bool_0 = True
    str_0 = "5-*|xHzK"
    dict_0 = {str_0: str_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    str_0 = "\t}d\x0cLBL{eVhkR"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


def test_case_1410():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1411():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    int_0 = -2096
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1415():
    bytes_0 = b"\xe5\x99<\xf4\xa2\x15\xcf\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    complex_0 = 1016.23574 + 618.153j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    str_0 = "'~F<X\\WCF[\x0bO2lkogV"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    complex_0 = 717.38 + 3015.816308j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    float_0 = 1328.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    int_0 = -780
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    str_0 = "i.@o}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    str_0 = "FYRE=oC/jr43\r rQ\x0ca"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    int_0 = 3403
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    int_0 = -4540
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    bytes_0 = b"\xed\xf0B\x1aG\xe0}"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    str_0 = " ttT*PU,i_Z@;x;"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    bytes_0 = b"\xaf\xc3:c\x98\xa8 9\xd9\xcf\x94\xcc\xc1TC"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    int_0 = 1450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    bytes_0 = b"\xceMOp\x10A\xd4\xef\xcag\x8b~\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    str_0 = "!%)i@<n<hSE,^z2[i\rgr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    bytes_0 = b"\x88\x1b\xcc\xc7\xce<"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    float_0 = -914.29
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    bytes_0 = b"\x964Rf\nf\x86\xa0\xed\xc7\x1d\xc67\xa3\x87\xee\x07\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    float_0 = -1856.8321
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    int_0 = -1637
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    bytes_0 = b'@\x12\xc9\xea"\xf4\x8a\xbe\xe1\x0fp\xf1\r\xa4'
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1440():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1441():
    complex_0 = -2291.2741 + 886.063j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    str_0 = "rDo?82-8R"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    bytes_0 = b"\xc3[\x18\xa4\xd7\xae\xca\xdd\xb9\xb2\x92\x856\xf4z\xf0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    bytes_0 = b"\xc6p\xbeh"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    int_0 = 4114
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    bytes_0 = b"l\xc5\x90\xee1\xd5\xca;"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    str_0 = "cz"
    module_0.get_new_command(str_0, str_0)


def test_case_1449():
    pass


def test_case_1450():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1451():
    bytes_0 = b"\x19k=\xdb\xfb\x8a'\xd8!\\!\xaaZy\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    int_0 = 1053
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    str_0 = " "
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    complex_0 = 1689.7 + 721.464j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    bytes_0 = b""
    list_0 = []
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    str_0 = "<%\ru'c:SN[j@~q"
    module_0.match(str_0, str_0)


def test_case_1459():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1460():
    bytes_0 = b"6y\xe8s"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    int_0 = 1777
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    int_0 = -23
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


def test_case_1463():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1464():
    str_0 = "#47#,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    complex_0 = -852.3 - 1243.2618j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_1466():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1467():
    float_0 = 4629.478833
    module_0.get_new_command(float_0, float_0)


def test_case_1468():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1469():
    int_0 = -666
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    str_0 = "Rw"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    bytes_0 = b" A\xd4\xda}\xad\xe2\xaeM\xb9\xbc"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    int_0 = -1729
    bytes_0 = b"T6\x9e\xe8q\x14\x15"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    float_0 = -3496.3911
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    float_0 = -1177.2057
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    int_0 = -2747
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    float_0 = 818.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    int_0 = -582
    module_0.get_new_command(int_0, int_0)


def test_case_1479():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1480():
    bool_0 = False
    set_0 = set()
    list_0 = [set_0, bool_0]
    tuple_0 = (bool_0, set_0, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    int_0 = -2762
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


def test_case_1482():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1483():
    str_0 = "m"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    int_0 = 1195
    module_0.match(int_0, int_0)


def test_case_1486():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1487():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    bytes_0 = b'\x9c_":Z\xd7\xdd\x14\xa3\x8a\xa7w-Z\x7f\xdf\xe8'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    bytes_0 = b"\x8e\xa0[A\xaa\naX\xf1V\x13L\xed\xb0]`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    set_0 = set()
    tuple_0 = ()
    tuple_1 = (list_0, set_0, tuple_0, list_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    str_0 = "t+ywv:-P/Q,\x0bzU(:"
    set_0 = {str_0, str_0}
    bytes_0 = b"3\xe7A\xbfU"
    complex_0 = 1115.9579 - 2993.87264j
    tuple_0 = (set_0, bytes_0, set_0, complex_0)
    module_0.get_new_command(str_0, tuple_0)


def test_case_1493():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1494():
    float_0 = -743.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    float_0 = -113.9
    bytes_0 = b"<\xe6\xca\xed\x85"
    set_0 = {float_0, bytes_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    int_0 = -3344
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    bytes_0 = b"\x7fL\xae\xb5^\xc5\xc6\x83R\x84\x8d\xef\xff\x87$\xb4`\x9e\x80"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    int_0 = 2086
    list_0 = []
    dict_0 = {int_0: list_0}
    int_1 = -601
    module_0.match(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    float_0 = 1709.414
    str_0 = "V,Y8zLw\\&D[[oI:9lL~2"
    list_0 = [float_0, float_0, float_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    bool_0 = False
    str_0 = "\x0b0[BP0p$LUQAAh)Q"
    dict_0 = {str_0: bool_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    bytes_0 = b"\xb7\xbc\x8b\x1dt6\x97\xdc\xe7X\xe5\xeaKb\xc5wxc\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    complex_0 = 366.916499 + 3352.4162j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


def test_case_1507():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1508():
    str_0 = "n@\nT."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    bytes_0 = b"8\xa8\x95:\xac^\xca\xb0\xe7\x8d\x0c\xf5\x05\xb1\xa6i\xd2c:"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    int_0 = -3087
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    str_0 = "u8!!V|=XVVdDkqp$%/7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    str_0 = "-tTW#zQS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    bytes_0 = b"\x11&\xc9\\"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    int_0 = 204
    dict_0 = {}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    complex_0 = 1555.5862 - 2297.187j
    int_0 = 96
    set_0 = {int_0, int_0}
    module_0.match(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1518():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1519():
    str_0 = "f 9:{QQB\x0c4_{?:RNG$r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    str_0 = "zr>qeUT,yTmn`5Wo"
    module_0.get_new_command(str_0, str_0)


def test_case_1521():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1522():
    bytes_0 = b"h\xa4P\xd9"
    str_0 = 'B5"O'
    tuple_0 = (bytes_0, str_0)
    list_0 = [tuple_0, str_0, bytes_0, tuple_0]
    int_0 = -2132
    tuple_1 = (list_0, int_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    bool_0 = True
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    float_0 = -2461.834794
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    str_0 = "^?b:[dI0oV1S\x0bLT"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    complex_0 = 1969.3988 + 704.8155j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    bytes_0 = b"\xb1\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    int_0 = 625
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    str_0 = "yh+bXJ\r;s2Z6Z-j"
    list_0 = [str_0, str_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    str_0 = "E-J'm/Sf+>jmRE7\tkM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    bytes_0 = b"}\xe6L,\xed>\x1f\xa7\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    int_0 = -1691
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_1534():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1535():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    str_0 = "av'DOfwA`2\nP"
    str_1 = "\x0b@o%7x\x0cgXzo 5,Ft("
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    int_0 = -620
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    int_0 = -487
    bytes_0 = b"\xc0\x07\xd6"
    tuple_0 = (int_0, int_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    bytes_0 = b")s\x0bI\x0fX\xb3\xd2\xba\x9c\x8b\xc4_\x1e\x86\xd0\xf0"
    float_0 = 2423.6
    bytes_1 = b"Y\xfe\x9e@\xef[\xf3\xf9b$\x93\t0\xbc\x87\xd1\xd0\x1f"
    tuple_0 = (bytes_0, float_0, float_0, bytes_1)
    tuple_1 = (bytes_0, tuple_0, float_0)
    module_0.get_new_command(tuple_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    complex_0 = -3076 - 2176j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    bytes_0 = b"'sW\xec\x1a\xfcg\xb7\x0e\x8dg\x0c\xd7\xe88\xcdZO\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    int_0 = -2030
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    float_0 = 685.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    int_0 = -554
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    str_0 = "-<#&^"
    set_0 = set()
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    list_0 = []
    str_0 = "Pe0-Oz"
    list_1 = [list_0, str_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    int_0 = 849
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    set_0 = set()
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_1, bool_1]
    str_0 = "rkm&A9@0N5"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    int_0 = -1583
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    str_0 = "S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    bytes_0 = b"\xc3\xae\xd0rD\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    int_0 = -322
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    str_0 = "R0$.PZ_J)n"
    str_1 = "X)3C6Vy|)*(-[(_/_+\x0c"
    str_2 = "\tfej37)\x0cRdzq[0%iru8"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    str_0 = ""
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    bytes_0 = b")\x98\x05\xafI\xa087=:"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    str_0 = "GCYnnMJ%6esC>>}e*YE"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    float_0 = 218.83188
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    bytes_0 = b"N\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    str_0 = "l*L`hY'G8P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    float_0 = -1120.27907
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    bytes_0 = b",\xf85\x05\xe6\xb6\x0e\xdf\xf7"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    bytes_0 = b"\xc2\xd9\x8a\xb7\xe1\x19\x9f\xdc\xc7j'2J\tm:\xdc]"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    float_0 = 362.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    int_0 = -1745
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bytes_0 = b"[\xb2\x1bb\x88\x10,\xe2P\xfb\xf1\x1f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    str_0 = "@42\n84Y\tWp+J>]pkrJ[n"
    module_0.match(str_0, str_0)


def test_case_1569():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1570():
    str_0 = "{jV\x0c+\ta)[ij"
    none_type_0 = None
    str_1 = "i:BfGG/.%ABOr7jEr- a"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    complex_0 = -3820.27 + 159.808j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    bytes_0 = b"\x86\x94\xc1\xab\x07\xea\xbdf\t\xaa\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    complex_0 = 1414.565 - 1625.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    int_0 = 1132
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    str_0 = "Z*m[uY\x0bo4FbwE\t_\x0bVEAj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    float_0 = 976.9951
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    str_0 = "_8f1bYlUyJVF/\\L'umH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    bytes_0 = b"\x08\x1aw\x0b\xdd\xb4\xaa\xf4\x1c\x9b\xd5\xa7b\xaf\xe0"
    bytes_1 = b"\xc2\xe6I\xb2s\x0c\x11\xe3\xac(\xba\x80P]K\x1a+\x02]\x06"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    list_0 = []
    float_0 = -2317.8
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    complex_0 = 3515.1403 + 77.881536j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    str_0 = "S7vhC~}|'}o<Gz"
    str_1 = "L@JTG>m-=mc=\n"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    float_0 = 3387.972562
    set_0 = {float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    str_0 = "TdjUsSOQ&i=ang"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    str_0 = "<#4"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1588():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1589():
    object_0 = module_1.object()
    complex_0 = 252.35892 - 1649.9j
    module_0.get_new_command(object_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    str_0 = "]ym\x0c!u(:%/:"
    set_0 = {str_0}
    float_0 = 757.7299
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    int_0 = -496
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    complex_0 = 233.1 - 2029.4606j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    int_0 = -5342
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    str_0 = ":z\x0cW_E3l$l?9\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    int_0 = -3827
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    str_0 = ",H]hwW"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b'[M\x98\xb9\x1f:-\xebDz\xc4\xbc\xe5D}\xad"@'
    set_0 = {bool_0, tuple_0, bytes_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (list_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    str_0 = "icZq&[O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    int_0 = 564
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    float_0 = -1895.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    bytes_0 = b"\x9d\xdfQ\xb8w7#\xd7\x84\x82\x1b"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    int_0 = -2616
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    int_0 = 597
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    bytes_0 = b"\xdeQ6\x10R"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    bytes_0 = b"\x9d\\\x9eTB\x19\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    float_0 = -3342.1652
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    bytes_0 = b"\xf8\xee\xe4\x95\xe0\x07\x8f\xdd\xe2\xad\xf9@\r\x1f\xb1\xc9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    float_0 = 2716.84
    bytes_0 = b""
    tuple_0 = (float_0, bytes_0, float_0, float_0)
    float_1 = 1902.692422
    list_0 = [tuple_0, float_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    none_type_0 = None
    bytes_0 = b"!\xe5\x8cTs\xb9p\x0f\x87\xaa\xf1\nHN\x827\x93\xca\x02\xf2"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    float_0 = 3368.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    int_0 = -1911
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    complex_0 = -872.704 + 965.01434j
    float_0 = -46.002
    module_0.get_new_command(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    bytes_0 = b"\x8d@\xb3\xedc\x0f[\x94V\x13"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    int_0 = 594
    bytes_0 = b"\xaf\xa0\x8f\x03\xf7\xdb|\x9f\x93d\xa9\x8aQ\x16"
    bool_0 = False
    tuple_0 = (int_0, int_0, bytes_0, bool_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    int_0 = 2606
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    float_0 = 1555.0
    tuple_0 = (float_0,)
    tuple_1 = (float_0, tuple_0)
    module_0.get_new_command(tuple_1, float_0)


def test_case_1621():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1622():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    bytes_0 = b"v7\xb2\r\xf6\xf4\x1c\xbe0\x97\x1b\xc2\x89\x97\x02\xa5h\x1f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    int_0 = 4990
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    int_0 = -2438
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    int_0 = 1006
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    str_0 = "1<h%()s}gb-i?=u"
    module_0.match(str_0, str_0)


def test_case_1629():
    pass


def test_case_1630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1631():
    bytes_0 = b"\xd1K\n\xc2("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    int_0 = -1150
    tuple_0 = (int_0,)
    set_0 = {tuple_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    bytes_0 = b"\x07\x02\xc4\x84\x9b\x8c\xf1*\t]\x8f\xfa"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    str_0 = "4Nk!`IB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    str_0 = '2a*+U*\nJ)"XGZ|^'
    str_1 = ",w>q\\s#Lsi:a\r>i"
    tuple_1 = (list_0, str_0, str_1)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    str_0 = "!B$?Si&"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    int_0 = 759
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    bool_0 = False
    str_0 = "a@s"
    tuple_0 = (bool_0, bool_0, bool_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    int_0 = -1369
    module_0.match(int_0, int_0)


def test_case_1649():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1650():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    bytes_0 = b"I\xec\x94D\xa1\xe2\xbc\x9bI\x1e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    str_0 = 'J+#>a D:}n"{8o>ba'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    bool_0 = False
    str_0 = "stxe@iy'R"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    int_0 = 404
    set_0 = {int_0, int_0}
    tuple_0 = (set_0,)
    str_0 = "QK"
    int_1 = -382
    tuple_1 = (tuple_0, str_0, int_0, int_1)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    bytes_0 = b"\xf6\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    bytes_0 = b"}\xdb\xa81\xbf\x7fB]\r\x11\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    int_0 = -1813
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    str_0 = 'Vm2K*s"X\rUG(X'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    bytes_0 = b"\xc8\xc3\xfc\x0e\xfb\xda\x90\x1e\x84\x8e\xef"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    int_0 = -1420
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, int_0, int_0, set_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    int_0 = -2616
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    float_0 = 1367.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    int_0 = 755
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    bytes_0 = b"{s\x98\xce\x1e\xf0\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    float_0 = 3115.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    str_0 = "U9biIqO-k-N\n["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    int_0 = 2379
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    str_0 = 'g?\tfM"K\x0b,|c%>p5kff3\r'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    str_0 = "\\lC2 *I/5:3"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    bytes_0 = b"\x02\x8b4\xa2\x91\xe6\x03zS{?\x8fL\xaa\xc9TQ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    int_0 = -2818
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    str_0 = "]V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    str_0 = "|Hm&RIc"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = "<\x0bG5ZE\tbi!~koIp"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    bytes_0 = b"-\xc4\xb2\xb6Y\x88\xbf\x06"
    str_0 = "QQsU5#1SQuKeG"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    int_0 = -1754
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    bytes_0 = b"'\xc8\xf4]\x84\x82\x10\xbc\xed"
    bytes_1 = b""
    str_0 = "6xUR!jT;r >;tuQm"
    tuple_0 = (bytes_0, bytes_1, str_0, str_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    float_0 = -3056.856187
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    bytes_0 = b"\xdcM\xcf\x9cP\x8a\xae\xc8\x0c<\x89\xdc\x12gJ\xf8;C^"
    module_0.match(bytes_0, bytes_0)


def test_case_1694():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1695():
    str_0 = '^E,\x0b~jV$/451" FV<\x0c_'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    none_type_0 = None
    str_0 = "* NxMRNH"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    float_0 = 2259.9552
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    bytes_0 = b"\x16 \x0f\xf4\x83\x98\x003\x16\xeb"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    int_0 = 929
    bytes_0 = b"\xd8\xf5\xbe\xc4\xfe\xc3\xad"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    int_0 = -2701
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    str_0 = "J"
    str_1 = "dn.Z@0^#:l\r+W~7f"
    dict_0 = {str_1: str_0, str_0: str_1, str_1: str_0}
    dict_1 = {str_0: str_0, str_1: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    float_0 = 2611.89439
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    bytes_0 = b"\x9f,\xdb\xd7"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    bytes_0 = b"\xea\x06\x1d{N\x11\x13\xcd.\xbc'\x8f~\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    float_0 = 4500.0
    set_0 = {float_0, float_0, float_0, float_0}
    tuple_0 = (float_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    int_0 = 1432
    dict_0 = {int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    int_0 = 1400
    bool_0 = True
    tuple_0 = (int_0, int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    bytes_0 = b"I,\xae\xea\xe5*@2\xbe"
    str_0 = ""
    list_0 = [bytes_0]
    dict_0 = {bytes_0: bytes_0, str_0: list_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    bytes_0 = b"S\x86\xa4\x12\xda.\x114\xe1\xc2k1\xc5\xcf\x06\xc3\xe1|."
    bytes_1 = b"\x10\xe5O1\x02\x99\x19\xea\xd1\xae%\xaeGm\x90bUJ\xaa"
    dict_0 = {bytes_0: bytes_0, bytes_1: bytes_1}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bytes_0 = b"B\xf2@TJp]9\x98%\x1a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    str_0 = "Tib\tvz"
    str_1 = "NCr<V|D\nGJ{"
    list_0 = [str_0, str_1]
    module_0.match(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    bytes_0 = b"\x9eq\x88\xd1\x9e\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    bytes_0 = b"\x93\x93p \xdd=\x9f\xae\x8cn\xae\x85\r\x1cq"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    int_0 = 1406
    bytes_0 = b"\xa4\xff\xbb\xb0"
    tuple_0 = (int_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    float_0 = 3144.3901
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    int_0 = -823
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    float_0 = 1277.46382
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    float_0 = -3386.045
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    bool_0 = False
    bool_1 = True
    bytes_0 = b"\x9a\xdbV\xe6\x81\xe1#f\x96\x97\x95r\x02q\xc6\xc7\xfec\xa3"
    tuple_0 = (bool_0, bool_1, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    str_0 = "??E 'J2S[`h["
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    str_0 = "k&Vl'Z"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    int_0 = -1566
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    complex_0 = -271.88 + 4108.06647j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    int_0 = -2355
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    str_0 = "4Ks6l`c\n-+QFAV9O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    str_0 = "'J?f+^tx=@tK"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    bytes_0 = b"\xd8\x00Z\xf4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0, dict_0)
    bool_0 = True
    str_0 = "yt67@(hJ0\\Trn*J\\R"
    tuple_1 = (tuple_0, bool_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    float_0 = 1014.563035
    module_0.get_new_command(float_0, float_0)


def test_case_1736():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1737():
    str_0 = ""
    float_0 = -3094.0609
    list_0 = [str_0, float_0]
    bool_0 = False
    list_1 = [list_0, str_0, str_0, bool_0]
    module_0.match(list_1, str_0)


def test_case_1738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1739():
    int_0 = -2185
    bool_0 = True
    set_0 = {int_0, int_0, int_0, bool_0}
    tuple_0 = (set_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    bytes_0 = b"\x89\xad\x8e*\xcek\xffT4\xe9[\x0c\xc0\xc0\xf2p\xd9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    str_0 = "u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    int_0 = -3321
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    bytes_0 = b'\xe5\xc0"x\x03J\xad\x12\xe1'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    str_0 = "zPj]o{D#"
    float_0 = -1793.675
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    int_0 = -54
    bytes_0 = b" \xd4\xf0"
    list_0 = [int_0, bytes_0, int_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    bytes_0 = b"\xcd\xd1`|T\\\xa8xLs\x97+\x9e\xbf_\x02lets"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    bytes_0 = b"\xe3\xce\x1d\x04\x1a/\xdf\xe6\xd6\x87w"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    int_0 = -2650
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    int_0 = 1426
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    int_0 = 6
    float_0 = 1618.0
    bytes_0 = b"\xbdN`hRo\xf8\xba\xf1\x86\t!\xaaF\xaax\xab"
    tuple_0 = (int_0, float_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    int_0 = -252
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    str_0 = "Ug"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    int_0 = 3639
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    int_0 = 1114
    bytes_0 = b"\xc3|I\xea\xcf\xfe\xeb\xef\x03\xb6C\x0b\xf8_"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    float_0 = 946.67679
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    bytes_0 = b"\xcb\xcc\x15XB\x13"
    int_0 = 2832
    bool_0 = False
    int_1 = -2659
    set_0 = {bool_0, bytes_0, bool_0, int_0}
    list_0 = [int_1, int_0, bool_0, bool_0]
    tuple_0 = (bool_0, int_1, set_0, list_0)
    bool_1 = True
    tuple_1 = (bytes_0, int_0, tuple_0, bool_1)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    float_0 = 1583.48
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    str_0 = "\x0b$u\x0b-+l2O)6HO*"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    int_0 = -1842
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    str_0 = "a"
    object_0 = module_1.object()
    float_0 = -1687.794
    dict_0 = {str_0: str_0, object_0: float_0, float_0: str_0}
    list_0 = [dict_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    bytes_0 = b"\xb0\x10\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    str_0 = ';xxHN^Z+" N+jv/[Vb'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    bytes_0 = b"\x98\xab\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    int_0 = 260
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    int_0 = -582
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    int_0 = -2971
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [bool_0, list_0, bool_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    str_0 = "\\C1FH\td;"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    complex_0 = -2416.6337 - 2589.25334j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1778():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1779():
    int_0 = 1797
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bytes_0 = b"\x1dC\xc7\xf9\xd1q\x8d\xa0\x9e\x91[\x7fLk"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    int_0 = 451
    list_0 = [int_0]
    str_0 = "_-X@a@&^|ExFf,"
    dict_0 = {str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    bytes_0 = b"\xe0Y *\xf0\xd2R\x11\x98m\x81\xa6\xfb\x06^\x0f\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    complex_0 = 4000 - 2782.455j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    int_0 = 51
    str_0 = "3KHDZ~t"
    tuple_0 = (int_0, str_0, str_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    int_0 = -923
    module_0.get_new_command(int_0, int_0)


def test_case_1787():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1788():
    float_0 = -716.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    str_0 = "To[o~YDw{#A@\\0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    object_0 = module_1.object()
    tuple_0 = (object_0, object_0, object_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    complex_0 = 246.596201 + 2698.649514j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    bytes_0 = b"\xb1\x8d\xc7F 5%\x1a\xd6~\xc3|\xfc\xdb\xa1nRPk\xb3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    int_0 = 1989
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    int_0 = 756
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    int_0 = 898
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    bytes_0 = b"-lJ\x17GA\x19"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    int_0 = 2895
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    int_0 = -415
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    bytes_0 = b"\xb9"
    int_0 = -1405
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    bool_0 = False
    float_0 = 1048.7
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    complex_0 = 1371.868438 - 1637.81j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    int_0 = 1046
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    int_0 = 695
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    str_0 = "DJ+p]!h&\x0bOc7\n6R]pm"
    str_1 = "~vs9P"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    str_0 = "0Tv_T2T%,eQYW{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    str_0 = "GP:OVBG-V|UiMmBL:{A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    bytes_0 = b"<\x84"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    int_0 = 2241
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    set_0 = set()
    bool_0 = True
    tuple_0 = (set_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    int_0 = 3739
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    str_0 = 'Noa\x0c*M"l?C22DrB`dAT'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    bytes_0 = b"M\xfd>\x8d\x9a\xa2~\xe8\x80\x88\xd7\xa4_\xb5*\x9eG"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    complex_0 = -968.72612 + 2718.15952j
    none_type_0 = None
    module_1.object(*complex_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    bytes_0 = b"\xb9\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    str_0 = "G'~1>&jh{6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    int_0 = 2926
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    float_0 = 1480.088
    module_0.get_new_command(float_0, float_0)


def test_case_1823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1824():
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    int_0 = -262
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    str_0 = 'C]-"\tW;'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    bool_0 = True
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


def test_case_1828():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1829():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    float_0 = -847.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    bytes_0 = b"_} \x94W\xd7\xeb\xe4\xf6"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, bytes_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    str_0 = "xsd\tFzrWE+P{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    complex_0 = -141.90027 - 989.36106j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    int_0 = 2410
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    str_0 = "}3B:kD]tJUj(a0"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    int_0 = -2823
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    str_0 = "_'R)ScN)kGRe8&H"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    int_0 = 58
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    int_0 = -3696
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    bytes_0 = b"\xff\xbb\xbb\x1a\xdd\xb1\xa4a\x16s?\xfaL\xe5\x87\x98\xb0q\xf7P"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    bytes_0 = b"\x95\xeaO~\x85\x9c\xe7\x03\t\xc4\xd1\x92-\x0e#\x18"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    bytes_0 = b"\xd0\xbf\x83M\x03\xfa:R\xe6\xa6#\xe5\xc2\x92\xd9\x8a\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    bool_0 = True
    dict_0 = {}
    int_0 = -420
    tuple_0 = (dict_0, int_0, int_0)
    tuple_1 = (bool_0, bool_0, bool_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    complex_0 = -420.833495 + 2366.326j
    list_0 = [complex_0, complex_0]
    tuple_0 = (list_0,)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    str_0 = "\r|+10i;;%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    float_0 = -4726.188526
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    str_0 = "1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    bytes_0 = b"}\xe8\x90\x90\x811c\x04\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    bool_0 = True
    complex_0 = -1435.90855 - 625.057j
    bytes_0 = b"\x16p\xce.\xf5\xbc~2\x90-<\xfcf\x1e^\xf2\xae"
    tuple_0 = (bool_0, complex_0, bytes_0, bytes_0)
    str_0 = "VCC^]TPX-S'X[{"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    str_0 = "?_YWUHQ(BVA''h1Oj,4a"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    int_0 = -186
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    int_0 = 1168
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    bytes_0 = b"-\xc0Q(##\xde C"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_1857():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1858():
    bytes_0 = b"%\xdd\xffG^~\xb5:]\x86\x10\x96\xcb\xf4j\xd5g"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    bytes_0 = b"\xcd,\x88>\xdb\xb3e\xca"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    str_0 = ""
    tuple_0 = (str_0,)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    dict_0 = {}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    bytes_0 = b"\x92q\xa3\xf1\x95\xbb\xe7:\xcf\xe0\xa4a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    float_0 = -2223.91
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    float_0 = 678.8149
    module_0.match(float_0, float_0)


def test_case_1865():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1866():
    float_0 = -1274.8663
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    int_0 = -867
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    int_0 = -2141
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bytes_0 = b"8_\xe3\x00\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    int_0 = 1700
    module_0.match(int_0, int_0)


def test_case_1871():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1872():
    bytes_0 = b"\x95\x0f=U\x01\x9f\xa3\x05\xf3\xcf\xba\x84^\xaf"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    str_0 = "C@=D4p87;"
    set_0 = {tuple_0, bytes_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    int_0 = -1696
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    bytes_0 = b"\xe9\x90\xa4i$\xaa\x90\xcf\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    int_0 = -1577
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    bytes_0 = b"\x1a\xd8\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    str_0 = "$)P#k`6=MCu,vld"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_1880():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1881():
    float_0 = -3879.256
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    int_0 = -1152
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    str_0 = "3T)CQot=1}olq+b\x0cA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    bytes_0 = b"x\xec\t\xce\x02\x06/\x05\xe1\t\x0c\xe7\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    int_0 = -2555
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    object_0 = module_1.object()
    set_0 = {object_0}
    list_0 = [set_0, object_0, object_0]
    list_1 = [list_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


def test_case_1887():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1888():
    object_0 = module_1.object()
    int_0 = 1631
    bool_0 = True
    tuple_0 = (object_0, int_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    bytes_0 = b"\xe0\xe3a\x18\xc3\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    str_0 = "xHa{$G1el"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    complex_0 = 4766.391889 + 954.948j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1892():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1893():
    bytes_0 = b"\xed\x81r\x19K\x9d\xe9\x1f\x91a\x81\xb3\x8d\xe6\xfa\x12\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    float_0 = 1088.834976
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    str_0 = "}2sS.=(#^l#&n{Vj\\g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    int_0 = -384
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    complex_0 = -534.7 - 1159.7422j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    str_0 = "%d;y&p'>#'^GQ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    str_0 = "[|mq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    int_0 = -60
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    str_0 = "\x0bt|C\r/]iNz#r;_y\\\\9 t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    str_0 = "i7q6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    bytes_0 = b"=o#\xa6\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    tuple_0 = ()
    bytes_0 = b"I\xf3\xab\xf6\xe2!\xbb\xe9\x93-h\x10\xbf"
    tuple_1 = (tuple_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    str_0 = "C)Q\n}c3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    int_0 = -3157
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    int_0 = 1701
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    int_0 = 1205
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0}
    float_0 = 151.99682
    tuple_0 = (set_0, float_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    bytes_0 = b"E"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    int_0 = 23
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    float_0 = -2460.3966
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    bytes_0 = b"\x1e\x9d\x14\xcaWtW\xf7\xbe\xb9*f\x00\x84\x0b\x8fs["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    bool_0 = False
    str_0 = "\x0cE,,ebM$ _1%ecf5`"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: str_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    str_0 = "y]ke_rGv1"
    list_0 = [str_0, str_0]
    list_1 = [str_0, list_0, str_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    float_0 = -999.468983
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    int_0 = 234
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, set_0]
    bytes_0 = b"N/"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    bytes_0 = b"\x89\x9c]@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    float_0 = 1857.938
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    bytes_0 = b"3\xfd\xc5\xfe\x83\xd0\xd3\x17?\xf1\x1f \xbe?|2\x11\x8c"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    int_0 = -1256
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    float_0 = -1600.37
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    bytes_0 = b"0\x7f}\xd6E?%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    bytes_0 = b"\xe2\xb8\x80^I2\x15/"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    float_0 = 224.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    str_0 = "\x0bx2(m&5~y`\n-qP\n:LI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    bytes_0 = b")\x97["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    int_0 = 155
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    bytes_0 = b"\xf6\xe7\x0f5\x925_\x8ej\xdc0_\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    bytes_0 = b"\xd11\x8cI\xca\x97k\x06\nV\xf2\xb5\xb2\x99\xd1\xaf\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    bytes_0 = b"\x83\xab\xdaa\x1c\xd4\x8f\x9a\xe0\x18a\xf5\x91\xcf\r\xcbD"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    int_0 = 2030
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


def test_case_1938():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1939():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    bytes_0 = b"\xcc\x94\xf9\x10\xc2j\xe8\xa4\xa8\xc2\x13\t\xb5\xc5u~\xe5p\x06c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    str_0 = "zw=X"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    bytes_0 = b"\x0b\x94\\\xe2"
    bytes_1 = b"\xff}|\xc6\x0b"
    list_0 = [bytes_0, bytes_1, bytes_1, bytes_1]
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_1: list_0, bytes_0: list_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    bytes_0 = b"\xea\x1e7\xf0^\xa0\xc0\x91\x1c\xf2\xd2\xd5\xdc:\xaf\xd0"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    float_0 = -2534.66
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    bytes_0 = b"+\xffg\xe1\xa5)\xe10\x93\x9c\x01\xa0"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    set_0 = {tuple_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    int_0 = -1083
    module_0.match(int_0, int_0)


def test_case_1949():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1950():
    bytes_0 = b"$\xfe\x82Z\x06\x085\xb0\x98\xf2#(\x14\x17zX\xce\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    float_0 = -1298.63512
    tuple_0 = (list_0, float_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    int_0 = -3985
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    complex_0 = -1094.3291 + 1584.27589j
    int_0 = 1041
    module_0.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    str_0 = "en:l"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_1955():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1956():
    bool_0 = False
    int_0 = 1615
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    float_0 = 1428.6018
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    bytes_0 = b"\xe9\xd0\x10\xcf;Bt\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    int_0 = 13
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    str_0 = 'jAp>UkbM,rJKCAb+d"I'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    int_0 = 1248
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    int_0 = -2917
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1963():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1964():
    int_0 = 1965
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    int_0 = 3172
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    str_0 = "K"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    int_0 = -2521
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    str_0 = "/zo#FsRd$uop\x0b=lp`Kp&"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    float_0 = -2389.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    str_0 = " TXBphfD#\\R`e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    bytes_0 = b'\xf7-\x92\x87\xf7"\xf4:\xd2\xbe'
    module_0.match(bytes_0, bytes_0)


def test_case_1974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1975():
    bytes_0 = b"\xcfS\x1c\xa2\x88\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    bool_0 = False
    int_0 = -1004
    list_0 = [bool_0, bool_0, int_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    bytes_0 = b"\xf6\xd6\x95C!\xde\x84"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    str_0 = "tX!n'u\rH:^,-ei[s?a "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    bytes_0 = b"\x10\x8e\x0c3\x08x\xde"
    bytes_1 = b":_\xdf\x108\xb6\xe4\xaf\xb3\x9d\x9b@\x08!j"
    tuple_0 = (object_0, set_0, bytes_0, bytes_1)
    module_0.get_new_command(tuple_0, object_0)


def test_case_1983():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1984():
    complex_0 = 1807.109944 - 1508.291j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    bytes_0 = b"\xe0\x98d\xbb\xbc6\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    float_0 = -2834.19
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    str_0 = "#g:0r'[TI"
    complex_0 = -780.134 - 3540.2j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    float_0 = -344.684548
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    str_0 = "H[\t"
    module_1.object(**str_0)


def test_case_1991():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1992():
    int_0 = 1183
    module_0.get_new_command(int_0, int_0)


def test_case_1993():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1994():
    bool_0 = False
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    int_0 = -2597
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    float_0 = -498.863535
    dict_0 = {float_0: float_0}
    tuple_0 = ()
    tuple_1 = (dict_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    int_0 = -793
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    float_0 = 825.962608
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    list_0 = []
    bool_0 = True
    tuple_0 = (list_0, list_0, bool_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    str_0 = "<y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    none_type_0 = None
    int_0 = 2173
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    int_0 = -515
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    bytes_0 = b"Et/|@\xd7@\xc7\xa5\x1bE"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    float_0 = -1749.402
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    dict_0 = {}
    bool_0 = True
    bytes_0 = b""
    tuple_0 = (dict_0, bool_0, dict_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    bytes_0 = b"\x90\xcb&X\xec]\xd4u\x8chL\x9cU"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    bytes_0 = b"\xb6\x0b/V\xa2\xee\x16\x89\x1b\x0f\xe1\xc3\xdb\xf5y\xbc\xcc"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    bytes_0 = b'\xd8\xa3\xa7\x9c`\x91"\x8b\xf9\x19\x10-\xd5'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    str_0 = "Va)Yf'5eCc.<p+0(;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    int_0 = -3090
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    bytes_0 = b"\xfb\x1f\xb2\xc7b\xcchH\xb9\xd6\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    int_0 = 10
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [int_0, int_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    str_0 = "\rUW4DRW8%@U2"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    int_0 = 2998
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    bytes_0 = b"\x1f5\xdc\xbd\x80\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    int_0 = 126
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b""
    tuple_0 = (bool_0, list_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    str_0 = "=w=&TyB'Q5$\r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    str_0 = "3-^i FcLZ\x0b<K "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    int_0 = 2287
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    float_0 = 1593.03
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    str_0 = "R\nK;ZGC_jsj"
    list_0 = [str_0, str_0]
    bool_0 = False
    tuple_0 = (str_0, list_0, list_0, bool_0)
    set_0 = {str_0, str_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    bytes_0 = b"\xcc\xd2\x00\x8f\xd1{\xd5\x97"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    bytes_0 = b"\xe7(\x11\x939\n\x9a\xb7=\x9e\xfe\x1cx\x83\x91\x17"
    str_0 = "#I4omcO"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    bytes_0 = b"\x01\x85\xc54\xc0\x7ft\xcf\x0b\xae3\x15\xf4\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    float_0 = 1613.162
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    str_0 = "o]IFos<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    float_0 = -299.7194
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    bytes_0 = b"\x17\xa6M\t\xdeeQN+["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    str_0 = "\tzZ7\n4BtR!KV:L+"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    int_0 = -674
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    bytes_0 = b"\x19"
    bytes_1 = b"\x8f\x8b\xb9y2\xf7\xb0\x84\xa5\x96\xed"
    dict_0 = {bytes_0: bytes_1, bytes_1: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = []
    tuple_0 = (bytes_1, dict_0, list_0, list_0)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    bool_0 = False
    str_0 = '"R.t0 vM7eK8IYGV*`46'
    dict_0 = {bool_0: bool_0, bool_0: str_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    bytes_0 = b"\x9d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bytes_0 = b"\xce\x88hQ\xcc\x9a\x00\xe0\xfe"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    bytes_0 = b"\xb2/\xabL"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    str_0 = "JT2jS3Rng;|auPY_3e"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    list_0 = []
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    int_0 = -2514
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    bytes_0 = b"\xc4\xec@r\xb4`\x86\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    bytes_0 = b"{\xe8;\xef\r\xfd"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    bytes_0 = b"\xd0\xc5\x92\xea\xa6^\xc9{Tp\xcc\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    str_0 = "2b:m |f&3rzLT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    bytes_0 = b"E\x08k\xee\x00\xddl\x1b\x11\x93\xd6<"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


def test_case_2055():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2056():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_2057():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2058():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    int_0 = 4295
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    str_0 = "zN2ISlhpjY.:%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    complex_0 = -4752.817016 + 2085.81j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    complex_0 = -93.8 + 262.405j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    int_0 = -1055
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    str_0 = "h`eS  ~:-C2:)J"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    float_0 = -2688.434452
    list_0 = [float_0]
    dict_0 = {float_0: list_0, float_0: float_0}
    tuple_0 = (list_0, dict_0, list_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    str_0 = "HH|l_NXwSWF$GX,`S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    int_0 = -1493
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    bytes_0 = b"\xac\xc6c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    int_0 = 790
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    bytes_0 = b"\xb9<\xfb\xa54q\xd1W\x01eeB\t\x1a\xb6"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    int_0 = -2194
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    list_0 = []
    float_0 = 803.307778
    bytes_0 = b"\x83\x8ehF\x89\xf3mxZ\xa0\xc9\x82\xd92\x17\xd1\x17C"
    list_1 = [list_0, float_0, bytes_0, float_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    bytes_0 = b"\xcedp\x14\x0c\x88\xac\xce\xab\n\x862=\xfc$T\x0f'\xf8\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    bytes_0 = b")u\xf95\xb5\x97\xefb\x9e\x10?u\n=\x93\x14\xf5\x10\xb29"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    str_0 = "\t\x0b/q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    int_0 = -1173
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    int_0 = -220
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    int_0 = 4877
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    str_0 = "C]7Mn"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    complex_0 = 2949.1562 + 985.354333j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    tuple_0 = ()
    int_0 = -184
    list_0 = [tuple_0, int_0, tuple_0, tuple_0]
    str_0 = "z\\y56mU"
    str_1 = "*w\rVe'3%"
    dict_0 = {str_0: tuple_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    int_0 = -3451
    int_1 = -987
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    bytes_0 = b"\x90\xb5M\x03\xe2\xc7\xc1\xde\xc7i\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    float_0 = -1359.158
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    dict_0 = {}
    set_0 = set()
    float_0 = 67.0
    tuple_0 = (dict_0, set_0, set_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    str_0 = "$6\tX1_Aa)z9Z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    int_0 = -1970
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    float_0 = -1767.16728
    module_0.get_new_command(float_0, float_0)


def test_case_2096():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2097():
    int_0 = -413
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    int_0 = -2078
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    str_0 = "!nWB*lm5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2101():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2102():
    complex_0 = -556.124 + 1315j
    set_0 = {complex_0, complex_0, complex_0}
    int_0 = -2605
    tuple_0 = (complex_0, set_0, int_0)
    list_0 = [tuple_0, tuple_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    bool_0 = False
    str_0 = "\x0czWkA+!^KU|d/4mu"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    bytes_0 = (
        b"\xae\xc6\x0c\xc9\xa7\xae\xc27\x85\r\xee\xdb\x9f\xf1\x04Q\x9e\x03\xdd\x92"
    )
    str_0 = '|2x`:q[:3j\x0bB9"]$'
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (bytes_0, str_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    bytes_0 = b"x\x83q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


def test_case_2107():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2108():
    float_0 = -3281.99
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    bytes_0 = b"S\x00A\xa5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    str_0 = "g^C\x0cZM3=,:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    int_0 = 962
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    bytes_0 = b"}\xa9 \x03C"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    bytes_0 = b"u\xb6c^\x92\xca \x1d\xca\xe8\xc5\xfd\x02\xa4o"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    int_0 = 412
    str_0 = ".jb"
    int_1 = 502
    set_0 = {int_0, str_0, int_0}
    tuple_0 = (int_0, str_0, int_1, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    bytes_0 = b'#\xb7"\xb7o'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    bytes_0 = b"\xb7\xf1\xf0\xdc\xc3\x1dS} \xe2\xcbjn"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    str_0 = "5|\r0$qi["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    bytes_0 = b"\xdcZ\x99x#Q\x80\x11IF7bD.#'\x19"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    float_0 = 555.762
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    float_0 = 458.693829
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    float_0 = 3357.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    str_0 = "xghuev\t2n18"
    bool_0 = True
    tuple_0 = (str_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    str_0 = "%z)>f5dg]\rw"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    int_0 = -742
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    bytes_0 = b"\xbc\xd5\x9e\xf9\xbb\xc8\xe2\x9a)\x88s"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    bool_0 = True
    int_0 = 448
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    str_0 = '}TlgpQ"P1'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    str_0 = "4}&08#<Y\t'*LmP$."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    str_0 = "<UT&8$d`va>6/V99~UZ"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    int_0 = 2522
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    float_0 = -1686.38221
    module_0.get_new_command(float_0, float_0)


def test_case_2138():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2139():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    int_0 = 1473
    module_0.get_new_command(int_0, int_0)


def test_case_2141():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2142():
    bytes_0 = b"\x8da\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    int_0 = -1418
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    bytes_0 = b"\xd1[C\xd3)9SK\xfd\x93\ni"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    int_0 = 2292
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    bytes_0 = b"7\xdb\xb9\x8d[\x1c${"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    bytes_0 = b"\x85\xdf\x08\x1e3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    float_0 = 895.8
    module_0.match(float_0, float_0)


def test_case_2151():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2152():
    str_0 = "cqT5{Elmp,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    complex_0 = 1555 + 1241.753546j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_0, bool_1: bool_1, bool_1: bool_1}
    int_0 = 391
    tuple_0 = (dict_0, int_0)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    str_0 = "ZSjQLA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    int_0 = 3400
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    float_0 = 332.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    int_0 = 925
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    str_0 = "A)@{-~8SmPY\nc!=D"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    int_0 = -214
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    float_0 = -1018.33743
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    complex_0 = 631 - 1428j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    int_0 = -543
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    object_0 = module_1.object()
    set_0 = {object_0}
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    str_0 = "n\r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    bytes_0 = b"8\xdf\xeb\xf3)\x98\xbd"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    str_0 = "1[#I4 ]sCxR~?1M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    bytes_0 = b"n=\x9c\xbd>Ip\xc8\xb2\xcd={\x83}>|D\xcd\xd9\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    float_0 = 958.5
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    bool_0 = True
    int_0 = -16
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    str_0 = 'E"10J@\\=.'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    int_0 = -327
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    bool_0 = False
    bool_1 = False
    str_0 = "vzZr"
    int_0 = -282
    tuple_0 = (bool_0, bool_1, str_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    str_0 = "`@,"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    complex_0 = 828.927 + 1341j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    str_0 = "],lEm1.)~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    float_0 = -188.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    bytes_0 = b"\xc2"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    str_0 = "\r?`m[(lT>(W+5)o_u"
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    int_0 = -2849
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    bool_0 = True
    int_0 = 1668
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    complex_0 = 1074.96354 + 417.278j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    str_0 = "b_;|tGmKK!"
    module_0.match(str_0, str_0)


def test_case_2186():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2187():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    int_0 = -840
    bool_0 = False
    set_0 = {bool_0, int_0, int_0, bool_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    bytes_0 = b"4\xb9\x11\"\xb2\xad\xde5T'\x82sL"
    int_0 = 789
    dict_0 = {bytes_0: int_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    str_0 = "9w#CX,ul\n~l`st^#On"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    int_0 = 122
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    float_0 = 2235.4721
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    str_0 = "Q\x0b\\T cd\\$]DW`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    float_0 = -1368.46
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    complex_0 = -3399.0138 - 3253.37081j
    set_0 = {complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    float_0 = -553.0141
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    bool_0 = False
    bytes_0 = b"X/\xa4\xfa\xe2\xdd=\x85"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    float_0 = 2101.4
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    str_0 = "2#G bWe\x0bFZ2rd2M"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    str_0 = 'e\nnh%nK"0J'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    str_0 = "sxC6)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    str_0 = "|t_vB*|IR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    int_0 = 4140
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    int_0 = 3155
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    int_0 = 983
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    complex_0 = 429.189 - 1032.98838j
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        tuple_0: tuple_0,
    }
    tuple_1 = (complex_0, dict_0)
    str_0 = "W,rzH-,<da{"
    set_0 = set()
    tuple_2 = (tuple_1, str_0, set_0, set_0)
    module_1.object(*tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    bytes_0 = b"\x06\x86\xb3\xb5\x0b"
    str_0 = "0Q7\t3|WWv"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    bytes_0 = b"\x94}\xa5\xbf\xcb%qq\xad\xfe\xd2\x89*\xe7"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    int_0 = -2295
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    bool_0 = False
    bytes_0 = b"?p\x03FH\xa2\xffa\t\x0e\xde\xe0"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0, bytes_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    tuple_0 = ()
    bool_0 = True
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, bool_0: bool_0, tuple_0: bool_0}
    module_0.get_new_command(dict_0, tuple_0)


def test_case_2219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2220():
    str_0 = "g\\w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    int_0 = 98
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    bytes_0 = b"\xa8\xf0]\xa7\xfb\x8c\xb3Osc\xdd\xd8\xf6\xd8\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    bool_0 = False
    int_0 = 324
    dict_0 = {bool_0: bool_0, bool_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    float_0 = 2198.412
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    int_0 = 1539
    str_0 = ""
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    str_0 = '{y*\x0b"2@|8'
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    float_0 = 1317.078
    bool_0 = True
    list_0 = [float_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    str_0 = "'bg@pQ7WqXfO(|Xm9%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2232():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2233():
    str_0 = "Pu6.)|rDF-tQ.u>'DA"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    int_0 = -1343
    module_0.get_new_command(int_0, int_0)


def test_case_2235():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2236():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    str_0 = "iDODmd[.Sl\"':"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    bytes_0 = b"\xe4>M\xb4\xcbs\x1a\t\xa6\x0f'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    bytes_0 = b"\xa1\xd7\x99\x1f\xcf\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    int_0 = 2018
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    int_0 = 763
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0, int_0]
    bool_0 = True
    str_0 = "AQ/wIO{9Z|bA"
    tuple_0 = (str_0, dict_0)
    tuple_1 = (list_0, bool_0, tuple_0)
    list_1 = [tuple_0]
    module_0.match(tuple_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    str_0 = '1!"Lkc'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    int_0 = -549
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    int_0 = 729
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    bool_0 = True
    tuple_0 = (set_0, list_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    float_0 = -2317.761
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    bool_0 = True
    str_0 = "V@nGryJxw.\n:ti"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    int_0 = 1741
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    none_type_0 = None
    str_0 = "/\x0b1XB!4s .gqpV1<@"
    set_0 = {none_type_0, none_type_0, str_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    bytes_0 = b"5;\xb8\t8\xe83&\xa5\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    bool_0 = True
    int_0 = -2166
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    int_0 = 243
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    int_0 = 652
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    str_0 = ",]|zvdBg\x0bt'p{"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    float_0 = -62.67
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    str_0 = "C_1w}\\\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    int_0 = -1908
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    str_0 = "B^< qg\rok.[>B--&7%F"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    float_0 = -1283.51546
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    int_0 = -819
    module_0.match(int_0, int_0)


def test_case_2269():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2270():
    bytes_0 = b"YNc\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    float_0 = 4281.482996
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    bytes_0 = b"\xe2\x8b3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_2274():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2275():
    bytes_0 = b"\xf9\xc0"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    float_0 = -1990.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    float_0 = 194.26102
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    int_0 = -5061
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    str_0 = '$Gq[":5\\n'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    bytes_0 = b"\xd3\x15?\x82\xeb\xe1\xfa\xe5\x148}]\xb3Q\x96\x1b\x1ej\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    bytes_0 = b"\x0f\x05\x0fN\xff\xc0c\xd1:I\x8b\xd2\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    bytes_0 = b"l\xed"
    module_0.match(bytes_0, bytes_0)


def test_case_2284():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2285():
    str_0 = " )D4h\n}j(6$f"
    str_1 = "."
    str_2 = "8#u+&!]"
    dict_0 = {str_0: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    bytes_0 = b"\x1e7\xc2H\x00+$|\xad6\xa9\x19{\x00{\x0ec\xbd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    str_0 = "] J,qe<W~p"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    str_0 = "d/sLupv7T\rTpGn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    str_0 = "FO79,EazBsOMub"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    bytes_0 = b"\x92\x18F\x00\xa6\x1d\xe8*\x84\xcd\xf2\xbb\x0f\x82\xd6\xa4\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    int_0 = -1412
    module_0.get_new_command(int_0, int_0)


def test_case_2292():
    pass


def test_case_2293():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2294():
    float_0 = 65.231
    module_0.match(float_0, float_0)


def test_case_2295():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2296():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    int_0 = 271
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    none_type_0 = None
    str_0 = "4w%P"
    module_0.match(none_type_0, str_0)


def test_case_2299():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2300():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"n\xe8\xdem\x18\x85<c\xf0\xce\xcea\xb29"
    tuple_0 = (bool_0, dict_0, bytes_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    str_0 = "Yo7H"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


def test_case_2304():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2305():
    dict_0 = {}
    str_0 = ">411p;X\tI~Y_OR6EE=("
    tuple_0 = (dict_0, str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    float_0 = -915.154
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    int_0 = 1858
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    int_0 = 2387
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    str_0 = "i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    float_0 = -667.07946
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    bytes_0 = b"\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    float_0 = -2466.59
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    str_0 = "#?_=+-x[(2!>S\x0b6#,N"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    complex_0 = 361.180326 - 1698.86886j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    float_0 = 1299.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    float_0 = -2691.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    int_0 = 2060
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    complex_0 = -3699.3298 + 1479.18303j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    str_0 = "Knsb@N>@1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    complex_0 = 1304.16114 + 2247.94j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    str_0 = ",GI~MmHV]~_\x0cP^u%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


def test_case_2327():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2328():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    str_0 = "scf&Z"
    str_1 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    int_0 = 2791
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    bytes_0 = b"\x0eKpZ"
    str_0 = "{=rP"
    dict_0 = {bytes_0: bytes_0, str_0: str_0, str_0: bytes_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    tuple_0 = (dict_0, dict_0)
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    int_0 = -100
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    complex_0 = 2643 + 3907.558538j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    float_0 = -3201.919076
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    float_0 = 1689.218
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    str_0 = "^6\r98TSq3K[qOCu"
    str_1 = "=u:}x{moL\x0bfo"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    str_0 = "f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    bytes_0 = b"\xac&\xf8\xc2\x1e\xf2\xe8\x91\xbc\xf5C\x8a"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    float_0 = 1602.912955
    set_0 = {float_0}
    list_0 = [set_0, set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    bytes_0 = b"G\xb1\xf6-\x9ds"
    bool_0 = True
    str_0 = "G"
    tuple_0 = (bytes_0, bool_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    bool_0 = False
    int_0 = -19
    list_0 = [bool_0, int_0, int_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    complex_0 = -1036.3 - 387.5207j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    int_0 = -1839
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    str_0 = "T3O}S\n5U"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    bytes_0 = b"^\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    str_0 = "@gy9V "
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    int_0 = 982
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    float_0 = 1829.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    int_0 = -913
    module_0.get_new_command(int_0, int_0)


def test_case_2352():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2353():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = ""
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    bytes_0 = b"\xd2\x15\xdc\xa04\xf4\n\xb7\x13Q\x87\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    bytes_0 = b"\x05b\xd20\x05\x16\x11\xa0\xad\n\xef\xc1\xa4\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    str_0 = "u{fq=6Zn^H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    bytes_0 = b"]\x19\xcb\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    int_0 = -2103
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    bytes_0 = b'"3\xdf\xb1j\x98\x13\x8f*i\x12\x8a\xe1\xac\xe5\x81"'
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_0, bool_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    int_0 = -324
    list_0 = [int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    bytes_0 = b"ymWqc\x99\x9b\xd6q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    int_0 = -927
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    complex_0 = -1666.85 + 632.728554j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    int_0 = -153
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    str_0 = "j{Gpzg:}\x0c}[<k~T"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    float_0 = 838.649
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    int_0 = -1513
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    str_0 = "Le"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    str_0 = "Tl^&9=2O;f-tb^"
    str_1 = "z:@8d;~LMQ/"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    float_0 = 2728.41696
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    int_0 = -2663
    module_0.match(int_0, int_0)


def test_case_2377():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2378():
    bytes_0 = b"\xc6jm\xd9\xd8\x11\x9b\xd9\x94\x95\xb8\x97\xf9I\x9c\x87G\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    str_0 = "h.U&\rYP0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    float_0 = 1237.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    float_0 = 4016.0
    str_0 = "[K[?%S"
    tuple_0 = (float_0, str_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, float_0)


def test_case_2382():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2383():
    bytes_0 = b"8?\xb5\x89\xf4\x8c\xff\x1e7\xfd\x9b3\xde"
    str_0 = '^-l"W1\x0cCyLlu(I@O'
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    float_0 = 1309.11
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    bytes_0 = b"U\x9b\x94\xb1\xd5f\x9b\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    none_type_0 = None
    int_0 = -1536
    module_0.get_new_command(none_type_0, int_0)


def test_case_2387():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2388():
    float_0 = -2909.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    complex_0 = -270.42833 - 1805.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    none_type_0 = None
    float_0 = -2158.9
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    complex_0 = 1776.925 - 5217.808j
    module_0.match(complex_0, complex_0)


def test_case_2393():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2394():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    bytes_0 = b"P\x92\x81\xd2\xdc\x17\x1a\xac\xfb\xf4\xff\\\xbd\xa4z"
    list_0 = [bytes_0, bytes_0]
    str_0 = "aW'1c3Lk{%"
    bytes_1 = b"\xa8\x80\xaf8?\xf1UR\xf74\xd2\xd2"
    tuple_0 = (list_0, str_0, bytes_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    int_0 = 876
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_2399():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2400():
    float_0 = 2166.32
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    int_0 = -152
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    complex_0 = 783.507914 - 1908.924j
    bytes_0 = b"d\xbe;\xc3x\xcc\x11\xba"
    tuple_0 = (complex_0, bytes_0)
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    str_0 = "f*8=NlvA_3Bq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    int_0 = -1663
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    str_0 = "@\x0b(wj.td"
    module_0.get_new_command(str_0, str_0)


def test_case_2407():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2408():
    float_0 = -1257.6
    int_0 = 1095
    module_0.get_new_command(float_0, int_0)


def test_case_2409():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2410():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    float_0 = 1095.496
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    bytes_0 = b"(bA\xa6Npz?Q\xb5[\xc50\x9f\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    float_0 = -356.148
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    bool_0 = False
    str_0 = "O"
    complex_0 = -1219.9289 + 201.8j
    tuple_0 = (bool_0, str_0, complex_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_2418():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2419():
    int_0 = 558
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    str_0 = "Bgjj~No3FL\nH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    float_0 = -1094.037311
    list_0 = [float_0, float_0]
    tuple_0 = (float_0, list_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    int_0 = 200
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    str_0 = "%(UY^iw\x0cwV"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    float_0 = -692.381717
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    str_0 = "R|CV)-sb=[7\tm}cmk"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    bytes_0 = b" \x92\xd7\x01\xea\x98\xe1\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    int_0 = 469
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    int_0 = -2081
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    list_0 = []
    str_0 = "kj>(sg"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    bytes_0 = b"6G_K,\x14\x9bT\xda\x0f\xees"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    bytes_0 = b'\xf7\x95\xfa]\x92\x0e\x07+\xe7"_\xa3\xe1\x96\x7fk\x90\xbe\x91\xb6'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    bytes_0 = b"\x83\x04\x19\x8fe>L\x8f\xde*}\xe3\x87\r\xfdB"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = False
    list_0 = [dict_0, bool_0, bool_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    int_0 = 538
    tuple_0 = ()
    tuple_1 = (int_0, int_0, tuple_0, int_0)
    bool_0 = False
    tuple_2 = (int_0, tuple_1, bool_0, tuple_1)
    dict_0 = {int_0: int_0, int_0: tuple_2}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    int_0 = -985
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    bytes_0 = b"y"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    int_0 = 1451
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    str_0 = "*Stoh)nu0]\t;n.z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    bytes_0 = b"\x91\x02*pS\x9ao\xcb\x8c\xcb'\xeb\xb6\xa1\xd4\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    str_0 = "C0>dv\\"
    tuple_0 = (str_0, str_0)
    dict_0 = {tuple_0: str_0, str_0: tuple_0, tuple_0: tuple_0, str_0: tuple_0}
    str_1 = "6T{b*w$?yr-H5t+"
    module_0.match(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    int_0 = 249
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    complex_0 = 349.3275 + 345.6592j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    int_0 = 228
    module_0.match(int_0, int_0)


def test_case_2449():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2450():
    bool_0 = True
    str_0 = ""
    dict_0 = {bool_0: bool_0, bool_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    str_0 = ""
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, str_0, bool_1, str_0)
    dict_0 = {str_0: str_0, tuple_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    int_0 = 1334
    str_0 = "mT_3R:\nm"
    list_0 = [int_0, str_0, int_0, int_0]
    module_0.match(list_0, str_0)


def test_case_2454():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2455():
    str_0 = 'g@"Ou7;N?'
    str_1 = "-_s-'\x0c/"
    str_2 = '"=+Gy3uuw92)*e{.s,'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    str_0 = "/,?m{dc$l@&((NBG"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    str_0 = ",,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    int_0 = 277
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    complex_0 = 1761.738 - 1261.39j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    bytes_0 = b"\xfab\x8a\xd6l5\xb9\xde4\xc6\x1b#R*I"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    str_0 = "q:"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    float_0 = 5362.9583
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    bytes_0 = b"\x83\xa0\x80*\xbed!c\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    complex_0 = -2708.631 + 1364.25j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    int_0 = -346
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    int_0 = 2268
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    str_0 = "o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    str_0 = "imRP.\x0bR\x0b=V\tElF\\r"
    str_1 = ">e\nk6ETL_ijI'&"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    str_0 = "\x0b\x0cCzGrAlz~k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    bytes_0 = b"\x11r*z_\xa2+}m\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    int_0 = -2305
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    float_0 = -2890.8708
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    bytes_0 = b"5"
    bool_0 = False
    set_0 = {bytes_0, bool_0, bytes_0}
    list_0 = [set_0, bytes_0, bytes_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    int_0 = -1231
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    str_0 = "\\}13E(_9=7y\t_T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    str_0 = "}\r6r"
    str_1 = "L +dwsY)i=#C![4/c*B"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    float_0 = 2658.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    int_0 = -2726
    int_1 = 822
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    str_0 = "ninS:\\}vO.N}d1b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    int_0 = -2617
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    str_0 = "bfx,7X&+1)\x0cBL/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    bool_0 = False
    bytes_0 = b"\xf8Q\x16Dz\x81z\x82k"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    float_0 = 4573.378
    tuple_0 = ()
    str_0 = "["
    tuple_1 = (float_0, tuple_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


def test_case_2489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2490():
    str_0 = "lYLBG<<E*bjvZM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    int_0 = -451
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    str_0 = "Pi|gs:}s"
    bytes_0 = b"_\x08a\xcf\xc5\xca\xb6\xe8i\x91\xbc\xcd\xdf\x055\x908\x9d[\xdb"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    complex_0 = 1850.43 - 2386.34j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    float_0 = -3826.65709
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    str_0 = "3\x0b&\\g=q$\n,,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    float_0 = 1928.68
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    bytes_0 = b"\xd3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    bytes_0 = b"\xcc\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2499():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2500():
    bool_0 = True
    int_0 = -1206
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    tuple_0 = (bool_0, dict_0)
    tuple_1 = (tuple_0, tuple_0)
    int_1 = 1737
    module_0.get_new_command(tuple_1, int_1)


def test_case_2501():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2502():
    int_0 = 26
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    bool_0 = False
    float_0 = -2433.941
    tuple_0 = (bool_0, float_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    float_0 = -1908.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    str_0 = "Y\t^&D0-M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    float_0 = 3903.783362
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    int_0 = 3599
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    int_0 = -3327
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    float_0 = -463.68073
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    bytes_0 = b"\xc5@"
    list_0 = [bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    bytes_0 = b"HF*\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    complex_0 = 1635.181 + 215.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    int_0 = 3324
    module_0.match(int_0, int_0)


def test_case_2518():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2519():
    int_0 = -1357
    set_0 = {int_0, int_0, int_0}
    dict_0 = {}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    float_0 = -2064.83
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    str_0 = "9]}/1gM-J|25{qj\tM"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: str_0, bool_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    str_0 = "ONV\\`!t,I~q\x0cUWS-.xC7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    int_0 = 1528
    module_0.match(int_0, int_0)


def test_case_2524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2525():
    complex_0 = -1123.6427 - 2756j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    str_0 = "-)h9RO;3FDCE\rV*R0k"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    str_0 = ">C\nUo)o:B~\x0c!B!;a^$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    float_0 = 682.575
    str_0 = '.>,"0,tPz;PF.NH/'
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    complex_0 = -1009.3 + 3904.04j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    int_0 = 1357
    int_1 = 1320
    module_0.match(int_0, int_1)


def test_case_2531():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2532():
    float_0 = 1266.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    complex_0 = -3270.92022 + 1266.3j
    str_0 = "+E66%n"
    bytes_0 = b"`\xd1\xbe\x9e\xf7sH\x8e"
    tuple_0 = (complex_0, str_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    str_0 = "1"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    int_0 = 845
    float_0 = -1247.4217
    int_1 = -1196
    tuple_0 = (float_0, int_1)
    set_0 = {int_0, tuple_0}
    set_1 = set()
    list_0 = [set_0, set_1, set_1, tuple_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    float_0 = 1163.456647
    module_0.match(float_0, float_0)


def test_case_2537():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2538():
    float_0 = 826.87
    str_0 = "&2z4Y`K2VnrH6qM5r\tbl"
    bytes_0 = b"\xef\xf5\xf0\x1b\xb8]+N_\xac\x0e}\xb3h\x8d\xf3"
    list_0 = [bytes_0]
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (float_0, str_0, list_0, tuple_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


def test_case_2540():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2541():
    str_0 = 'K38w"br,'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    str_0 = "n2U5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    str_0 = ")Q~v5|#(2h.\x0c&\\"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    int_0 = 195
    str_0 = "r2YC"
    tuple_0 = (int_0, str_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = '+"3;WzL i,.kQ)'
    str_1 = "s.X(,~z"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    complex_0 = 2638.3 - 2210.79675j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    int_0 = -763
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    int_0 = -3077
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    int_0 = -3530
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    str_0 = "8{iZ^7hq"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2551():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2552():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    int_0 = -2693
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    bytes_0 = b"wH\xf7\xbfP\xbav\xbf\xd1\x07\xea~yf\x96c%\x1fR\x1f"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    float_0 = 2502.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    int_0 = 3572
    module_0.match(int_0, int_0)


def test_case_2561():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2562():
    int_0 = 2416
    module_0.get_new_command(int_0, int_0)


def test_case_2563():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2564():
    object_0 = module_1.object()
    str_0 = "!^kxU"
    module_0.match(object_0, str_0)


def test_case_2565():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2566():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    float_0 = -1696.89741
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    float_0 = 26.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    str_0 = "zG8`k#*#~kuhE;@"
    module_0.match(str_0, str_0)


def test_case_2571():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2572():
    float_0 = 676.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    str_0 = "S\tmbP\x0c6W!}2VH&"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


def test_case_2574():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2575():
    bytes_0 = b"\xd2\xeb\xe2+\x18\x9a\x84K\x93\xcf\xa6\xb6SruXA\x16\xae&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    float_0 = -505.6101
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    str_0 = "I1KIx:O06u5K31qJPO}D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    str_0 = "9c6/}j\t]NtQ\x0c'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2580():
    pass


def test_case_2581():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2582():
    str_0 = '"vzvB'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bool_0 = True
    bytes_0 = b"L"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    str_0 = "UZgCuFd(KWT^zZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    str_0 = "ScZt` 6;g0AOa"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    float_0 = 2907.101
    int_0 = 1629
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    bytes_0 = b"\xbeHo\x96_`\x03\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    bytes_0 = b"|^at\x05\xe9\x01\xe0\x02\x0c\x14?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    complex_0 = -523.614 + 3045.119j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2591():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2592():
    str_0 = "[\nF-N2/>6B(i7:L!h\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    bytes_0 = b"ZX\xdaH\xb8\xa3\xf4\x16\xc6\x9c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    str_0 = 'C\tfEh\rVAvRv%p"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    int_0 = 1479
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    bytes_0 = b"X\xe8\x13w\r\xf9\xe6\x1a\xfa\x02\x12(2"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    str_0 = ""
    int_0 = -826
    list_0 = [str_0, int_0, str_0]
    str_1 = "D ,Ov\\;V0PUV j+*"
    str_2 = "9J\rkkR0]Z8;gR\r\r-"
    str_3 = "iqH&"
    dict_0 = {str_0: list_0, str_1: str_1, str_2: list_0, str_3: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    bytes_0 = b"\x81\xd2\xeaV\x16],\xabZ\xe3\x80\x03\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    float_0 = -430.219014
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    float_0 = -2839.94149
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    str_0 = "\\~X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    bool_0 = False
    list_0 = []
    dict_0 = {bool_0: list_0}
    tuple_0 = (list_0, dict_0)
    bool_1 = False
    tuple_1 = (bool_0, tuple_0, bool_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    float_0 = 1654.886891
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    str_0 = "xkV!e7Iw"
    int_0 = -833
    dict_0 = {str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bytes_0 = b"\x10-\xceG\x9d\rC\xbeyn"
    bytes_1 = b"\x8f<\xd6\x16\xeda\x88\xa0M\x0fQ\r*6c\xdb\xa5E\xe3"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    str_0 = "<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    str_0 = "lV$dtY<S$4PN8lHY\x0c<m\x0c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    str_0 = "<(WA$39m/s2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    float_0 = 1295.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = "9A7"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    int_0 = 957
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_1, bool_0: bool_1, bool_0: bool_1}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    str_0 = '"_jBnL]5u$,%^lXx'
    module_0.match(str_0, str_0)


def test_case_2618():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2619():
    int_0 = -3469
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2620():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2621():
    bytes_0 = b"\xb1M\xb8\x90\x17:+\x87\xa0\x05}\x89\xa2a\x1a"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    int_0 = -3757
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    float_0 = -3378.4615
    bool_0 = False
    bool_1 = False
    tuple_0 = (float_0, bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    bytes_0 = b"tIi\xdcm\xe9T<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    bytes_0 = b';\x9dM\x1c"\x88\xab\xe9@\xbdHm\x15\xe9\x9fw\xf0\x89\x9c\x07'
    int_0 = 316
    list_0 = [int_0, int_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    int_0 = 1337
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    int_0 = 2078
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    int_0 = -1434
    module_0.match(int_0, int_0)


def test_case_2629():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2630():
    int_0 = -242
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    str_0 = "z35YXe:dTp)L'^"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    bytes_0 = b"\xa9$\x91\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    bool_0 = True
    str_0 = "?N\naNbi'^7."
    list_0 = [bool_0, str_0, bool_0, bool_0]
    int_0 = 827
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    str_0 = "^C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    list_0 = []
    int_0 = 67
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    bool_0 = True
    str_0 = "b>}[tZH/FN- .3LJx"
    tuple_0 = (bool_0, str_0)
    tuple_1 = (tuple_0, bool_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_1)


def test_case_2638():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2639():
    int_0 = -1275
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    int_0 = -846
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    int_0 = -840
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, int_0, tuple_0]
    tuple_1 = (int_0, tuple_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    complex_0 = 4133.66933 + 2808.8407j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    str_0 = "/1|C?]flW8]w"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    complex_0 = -1697.1705 + 1696j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    str_0 = "pmO'(pfm\x0b %2"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    str_0 = "/v.\\(S:{N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    bytes_0 = b"\x03\xa9\xeb\xfc+\xdcQ9\xbb\xa6\x82\xd3edK\xc5?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    str_0 = "f"
    bool_0 = False
    set_0 = {str_0, str_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    float_0 = -1518.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    bytes_0 = b"\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    str_0 = "-57|-`Ulv_"
    str_1 = "4{^l\\1u2-4MFl)t"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    str_0 = "x)&\x0c,Q\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    int_0 = 241
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    float_0 = 892.0
    float_1 = -228.7
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    complex_0 = 959.81563 - 1360.2166j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    bytes_0 = b"\xd84\x1b\xd6\x99\xff\xba\x01\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    str_0 = "&[\r\x0cEd3P#i?@>21sq"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    str_0 = "*Dnyqt"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    float_0 = 692.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    int_0 = 2744
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    float_0 = 1695.5883
    module_0.match(float_0, float_0)


def test_case_2667():
    pass


def test_case_2668():
    pass


def test_case_2669():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2670():
    complex_0 = 1276 - 685.08299j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    bytes_0 = b"\x1ah\x94\xf5\x87\xbbz9%\xb1g\xd4q\x94n\xf9"
    none_type_0 = None
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    float_0 = 2690.92723
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    float_0 = 108.829
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    float_0 = 2138.4
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    float_0 = 663.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    str_0 = "PgU3=rjEV\x0bBzC4^7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    bytes_0 = b"P\x03\xf8g!rNZ\x8f\xb6\xd2\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    int_0 = -616
    float_0 = -2147.6584
    object_0 = module_1.object()
    set_0 = {int_0, float_0, object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_2680():
    pass


def test_case_2681():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2682():
    bytes_0 = b"O\xf6\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    bool_0 = False
    int_0 = -2792
    bytes_0 = b"]\x10\x07\x1f<\x90[<YA\x91e,.\xa4\xf3\xb9\x9a"
    tuple_0 = (bool_0, int_0, int_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    bytes_0 = b"zj\x81\xb2\x87\xd3\x9e\xff\x8c\x1f\x82\xc01E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    float_0 = 66.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    complex_0 = 2804.76053 - 899.114683j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    int_0 = 1872
    dict_0 = {int_0: int_0}
    dict_1 = {}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    bytes_0 = b"\x1f\x17\xa6'\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    bytes_0 = b"\\\xc0r:\x91z\xc7"
    str_0 = "_'_sK(pN,h"
    bool_0 = True
    tuple_0 = (bytes_0, str_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    int_0 = -241
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    str_0 = "r0_H&8W9l\tC@1SV58"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    complex_0 = -2541 + 1188.129j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    int_0 = -1192
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    bool_0 = False
    object_0 = module_1.object()
    tuple_0 = (bool_0, object_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    str_0 = "/*&7M[5zKa"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    int_0 = 260
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    int_0 = 1537
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    str_0 = "1fftFKc"
    bool_0 = False
    list_0 = [str_0, str_0, str_0, bool_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    str_0 = "Q1\r4zKnWY\n$K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    int_0 = -1172
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    bytes_0 = b"\xff67\xbcK\xc0>_\x0c9:C\x8e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    int_0 = -4602
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    bool_0 = False
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    float_0 = 1954.154
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    int_0 = 1201
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    bytes_0 = b"9\xd8H\xe9\x81\x85\xff/\xd4\x06\xdaK\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    str_0 = 'P^W&zv\\y\x0c"0k'
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    bytes_0 = b"u\xdalt\xcd\xde"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    str_0 = "RG?S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    int_0 = 385
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    bytes_0 = b"(G&\xb6\x7f\x19\x90=\xeb[\xf6?\x98m\xfc\xf6C\xf5\xf6\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    bytes_0 = b"\xa5\x7f\x88\xd4'\xe2\xe9\x7f\x06\x00\x13@:\x8c\xc8\xb0\xe6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    str_0 = "DIiA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    bool_0 = True
    int_0 = -2323
    list_0 = []
    tuple_0 = (bool_0, int_0, int_0, list_0)
    list_1 = [tuple_0]
    module_0.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    int_0 = -1784
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    int_0 = 505
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    bytes_0 = b"\x06\x17"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    int_0 = 553
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    bytes_0 = b"\xe9\x1b\x08\x9cC\xfc\x8c\x045\x1c\r\x9d\xc7`\xa7\xd5IW'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    str_0 = "lm:7-lg)\nT!l*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    bool_0 = True
    int_0 = 2755
    dict_0 = {bool_0: bool_0, bool_0: bool_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    int_0 = 278
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    bool_0 = False
    str_0 = ">4^h\t"
    int_0 = 1059
    tuple_0 = (bool_0, str_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    float_0 = -3346.9
    tuple_1 = (bool_0, tuple_0, float_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    int_0 = 818
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    str_0 = "yweS]TV4m(z50b[FmD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    float_0 = -1892.82
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    bytes_0 = b"9}\x86\xfe\\\x1c9\xdb\xc9s\x9e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    float_0 = -471.2493
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    int_0 = 3314
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    complex_0 = 144.414 - 493j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    str_0 = "-PojoE\x0ce"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    bytes_0 = b"1\x1f\xbe*\xcd\x85\xe6\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    float_0 = -1825.74
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0, bool_0, tuple_0)
    set_0 = {tuple_1, tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    complex_0 = -1203.8 + 49.97j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    int_0 = -213
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    int_0 = -3649
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    bytes_0 = b"\x8e\xb1\xd4L3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    complex_0 = -944.8 + 354.0614j
    tuple_0 = (complex_0, complex_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    int_0 = -1009
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_2751():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2752():
    complex_0 = 1899.038001 + 152.13464j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    int_0 = 1696
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    float_0 = -2722.53
    bytes_0 = b"\xc4}\xef\xc2\xc8\xe1(\x86+c\xceob\xa2"
    str_0 = "^\\J9"
    tuple_0 = (float_0, bytes_0, str_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    bytes_0 = b"\xe5m\x91\xa8\xeaGA"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    none_type_0 = None
    complex_0 = 536.075 - 297.651444j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    bool_0 = True
    int_0 = -2645
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    float_0 = 1639.34
    module_0.match(float_0, float_0)


def test_case_2762():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2763():
    bool_0 = False
    float_0 = 1528.2
    dict_0 = {float_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    bool_0 = False
    bytes_0 = b"\x19\xfd\x1cL\x8fav\xf2\xd1q"
    list_0 = [bytes_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b"p3\t\xa9\xf9`\xc6\x03\x89/\xee"
    tuple_1 = (bool_0, tuple_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    bool_0 = False
    int_0 = -2910
    tuple_0 = (bool_0, int_0, bool_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    str_0 = "~yB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    str_0 = "og"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    bytes_0 = b"L\x0bR\x02E\xce\xe08\xabd-o\xfe\xd0\x18\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    none_type_0 = None
    float_0 = 1220.949
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    int_0 = -8
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    int_0 = -1599
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    str_0 = "SLS\x0cwd"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    str_0 = "bF$j1O%eDn[QX:t@|"
    module_0.match(str_0, str_0)


def test_case_2776():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2777():
    complex_0 = -614.846743 - 252.34944j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    bytes_0 = b"\xc7\x13v\xb1T\x1a\xf3\xde\xa3\x9e\xe7Xf\xdc\x8f.\xe5\xc4"
    str_0 = "I$)EC"
    list_0 = [bytes_0, bytes_0, bytes_0, str_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    int_0 = 640
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    bytes_0 = b"\xb5qqS\x87\x90{\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    complex_0 = 831.8 - 978.905494j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    int_0 = 133
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    int_0 = -31
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    int_0 = 876
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    int_0 = 2519
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    float_0 = 1750.134
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    float_0 = -1000.278
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    list_0 = []
    int_0 = 988
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    str_0 = "["
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    int_0 = -2195
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    complex_0 = 3053.2013 - 2599.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    int_0 = 1787
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


def test_case_2798():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2799():
    bytes_0 = b"\x1d0w"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    int_0 = 2828
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    str_0 = "Y XU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    float_0 = 4569.7419
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    complex_0 = -1099.3796 - 1665.952j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    complex_0 = -1227.3 - 1170.901j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    int_0 = -818
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    float_0 = -645.85049
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    int_0 = 1550
    set_0 = {int_0}
    tuple_0 = (int_0, int_0, int_0, set_0)
    list_0 = [tuple_0, int_0]
    list_1 = [list_0, tuple_0, list_0]
    module_0.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    bytes_0 = b"\xd2.#\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    str_0 = "9&)gM=lvnQqE&"
    module_0.get_new_command(str_0, str_0)


def test_case_2812():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2813():
    float_0 = -798.0
    bytes_0 = b"\r\xb7\x92\xfb\xd8\xa5v"
    bool_0 = False
    tuple_0 = (float_0, bytes_0, bool_0)
    bool_1 = True
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    bytes_0 = b"\xd5yl0"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    str_0 = "LfWFUo\x0b$ZO?,*:kR]+"
    dict_0 = {str_0: bytes_0}
    module_1.object(*set_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    int_0 = -1097
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    float_0 = 2317.594867
    dict_0 = {float_0: float_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    int_0 = -2565
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2820():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2821():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    int_0 = 4214
    module_0.get_new_command(int_0, int_0)


def test_case_2823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2824():
    int_0 = 1723
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    bytes_0 = b"\xe1n\xf0\x83\xc7\xe6\xc8\xf0\xd7\xb4\x9a\x10"
    complex_0 = 2427.83763 - 2121.57062j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    int_0 = 612
    dict_0 = {int_0: int_0}
    bool_0 = True
    tuple_0 = (int_0, dict_0, bool_0)
    list_0 = [tuple_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    bytes_0 = b"\xa5\xdf"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    dict_0 = {tuple_0: bool_0, bool_0: bytes_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    int_0 = -1657
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    str_0 = "y;jfM50W@_GBs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    int_0 = 2311
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    float_0 = -762.601
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    complex_0 = 3374 + 593.0137j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    int_0 = -1744
    list_0 = [set_0, int_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    str_0 = "QUXKh\x0b3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    bytes_0 = b"3P\x98\xd4\x05x\x82\t\xbc\xc7D\x8c\xf1\x88"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bool_0 = False
    bytes_0 = b"lp\xc0DJB\xda\xd5\x9f\x14\xca"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    float_0 = 1056.97
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    int_0 = 2428
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    bytes_0 = b"M\xf8];Y\xd9\xca3\xbcY\x12\x01 \xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    str_0 = "Fnb+2xc3[Ut[gYl`NtX("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    bytes_0 = b"@(\xc3\\>\xf9\xe7\xf9\x89\x88 <4\x1d]\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    str_0 = "^xBB qO.\x0c|CbsTy"
    int_0 = -1627
    str_1 = "\\2P.6H\tka\x0cY"
    dict_0 = {str_0: int_0, str_1: int_0, str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    float_0 = -70.32
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    str_0 = "$V\n|\tZ!\x0c!=+4Nl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    bytes_0 = b"\x12e\x82\xff\xc2a\xb9\x80\xe7\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    set_0 = set()
    tuple_0 = (set_0, set_0, set_0)
    module_0.match(tuple_0, set_0)


def test_case_2850():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    str_0 = "$+>il;C.q+[^"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    bytes_0 = b"\xf2\xfb\x05\x04\xbf\xec\xaa\xb4O\xf0\xc9\xb2\xf6,\x07\xa7\xe7\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    int_0 = -244
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, int_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    str_0 = "\t^quDE^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    int_0 = -932
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    complex_0 = 905.2658 + 44j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    int_0 = -1647
    set_0 = {complex_0, int_0}
    str_0 = "INg"
    int_1 = -2064
    tuple_0 = (list_0, set_0, str_0, int_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    str_0 = "?y\x0b_o/P]<j`-\t{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    bytes_0 = b"F\xfc\xf5\xc7\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    str_0 = "rO>lGojybv$+'+-5'6wN"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    int_0 = 736
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    int_0 = -3224
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    int_0 = -1016
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    int_0 = 2127
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    str_0 = '"!oYPht4d(rG\\:]H\\'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    int_0 = -209
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    bytes_0 = b"\xe4)k\xb5\xc7,29\xa5\x12\x04\x9a\x8d\x11c\xab\x91\xb6\xfd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    bytes_0 = b"U\xc8\xa8\xb3r\xb5\x17\xb4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    bytes_0 = b"H\xac\x02\x0f\xd8\\\xba$4\x03\xf8_\xf1#[\xb11S"
    bytes_1 = b"yA\xace\xd6>{Xh/\xdaW\x94?\xe0\x92\xf1\xd0\xb5"
    dict_0 = {bytes_0: bytes_1, bytes_0: bytes_1}
    module_0.match(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    str_0 = "~"
    list_0 = [str_0, str_0, str_0, str_0]
    str_1 = ""
    list_1 = [list_0, str_1, str_1]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    bytes_0 = b"\x08D8\x07\nH#O-\x8bI1Ps\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    int_0 = -2109
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    float_0 = -1200.39
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    none_type_0 = None
    str_0 = "zL\tSK5K}< umB&sc&dKH"
    int_0 = -1518
    bool_0 = False
    dict_0 = {none_type_0: int_0, none_type_0: bool_0, str_0: bool_0}
    float_0 = -1515.471
    tuple_0 = (str_0, int_0, dict_0, float_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    float_0 = 1313.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    int_0 = -622
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    int_0 = -2652
    set_0 = {int_0}
    object_0 = module_1.object()
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    int_0 = 2821
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    bytes_0 = b"\xfeX\xe1\xf9\x94\x06\x04W\xae\x8f\x8f>HR\x9b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    str_0 = "^t6sdl\t\n_Or9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    str_0 = "R`_0&jr|hz+kB"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    str_0 = 'S=nqs%d`"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    int_0 = -335
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    bytes_0 = b"\xd2s\xc6\xf7.\x97\xed]"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    str_0 = "|;|Gui"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    bytes_0 = b"h\xf7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    float_0 = 3632.41
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    list_0 = []
    int_0 = -1546
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    str_0 = "B'c[-"
    str_1 = "Ipu;7BceA\\C"
    dict_0 = {str_0: str_0, str_0: str_1, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    str_0 = "-sc\x0btusH6#u'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    int_0 = 124
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0, int_0, int_0, tuple_0)
    bytes_0 = b"\x1fS\xc8\xe7\x84\xbbF4\xecw6\x92U\xb8r"
    str_0 = "\ntC3d!aD"
    tuple_2 = (tuple_1, bytes_0, str_0, int_0)
    set_0 = {tuple_1, bytes_0, tuple_1}
    list_0 = [set_0, bytes_0, int_0]
    tuple_3 = (int_0, set_0, list_0)
    module_0.get_new_command(tuple_2, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    int_0 = -1373
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    int_0 = -1590
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    bytes_0 = b"yU4-\x92\xd3\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    str_0 = "\x0ctbV$K2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    int_0 = 4343
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    bytes_0 = b"\xde\x11c\x04"
    module_0.match(bytes_0, bytes_0)


def test_case_2908():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2909():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    str_0 = "9#;Cjn20!U\\xcB\x0cv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    bytes_0 = b"h!ns\xb2\xa3\x87\x17\x9dJ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    str_0 = ";X%QE!h"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    list_0 = []
    dict_0 = {}
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bytes_0 = b"\xa8\xdf}\xfa\x187\xa9\xaf\xebf\xd1\x91\x9c\x1a\xdb\x9ex\xc0\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    float_0 = 2834.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    bytes_0 = b"y\xef)U\xe1o\x84\x1b\x98\x81\xc5"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = ()
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    bytes_0 = b"\x9a\x1a\xd8\xcc\x0b\xc1\xda\n\xa9\xa2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    float_0 = 433.082
    dict_0 = {float_0: float_0, float_0: float_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    complex_0 = 222.63 + 3220.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    bytes_0 = b"\x9b\x86?\xca\xe8B\xdd\xef\xcb+\xb4R\xec\x90F\x81g\xf7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    bool_0 = False
    str_0 = "T&V"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    bytes_0 = b"\xb4\x8a1\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    int_0 = -476
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    int_0 = 762
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2927():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2928():
    int_0 = 1122
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    int_0 = -5965
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    tuple_0 = ()
    bool_0 = False
    list_0 = [bool_0, tuple_0]
    tuple_1 = (bool_0, list_0, list_0)
    tuple_2 = (tuple_0, bool_0, tuple_1, list_0)
    module_0.match(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    int_0 = -1618
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    bool_0 = False
    float_0 = -1.4
    tuple_0 = (bool_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    str_0 = "+v7`*G("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    complex_0 = -864 + 70.476j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    bytes_0 = b"\x99\xe6\xab$wf\x93\xfc\xf7\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2936():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2937():
    int_0 = -217
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    complex_0 = -2462.8173 + 2010.57723j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    set_0 = set()
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    float_0 = -2805.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    str_0 = "/.IIA:"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    complex_0 = -2581.34 + 3145.452413j
    set_0 = set()
    tuple_0 = (complex_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    str_0 = "'bvK<1$X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    bytes_0 = b"\x9f*"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    bytes_0 = b"("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    str_0 = "E$Lw8.G7J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    str_0 = '}z18[12FarBy(e6"\x0b2,'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    bool_0 = True
    str_0 = "uUGM@R]EI/"
    tuple_0 = (bool_0, str_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    float_0 = -2430.3834
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    int_0 = -3066
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    str_0 = "s\x0bI#._%l_19p"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2955():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2956():
    str_0 = "5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    bytes_0 = b"c\xa8sC\xcd7A\xdfa\xd6\x1c\x94\xee\xfa\xd1\x10\xa5\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    str_0 = '!9bVE3mt\\B|7j"=6'
    module_0.get_new_command(str_0, str_0)


def test_case_2959():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2960():
    str_0 = "g7EA`"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    str_0 = "sqSa}~"
    set_0 = {str_0, str_0}
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    complex_0 = 3427.1539 - 147j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    str_0 = "Hr]F:L(B0JC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    int_0 = 3229
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    float_0 = 1904.0
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


def test_case_2967():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2968():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    float_0 = 422.0
    module_0.match(float_0, float_0)


def test_case_2970():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2971():
    bytes_0 = b"QvnM KG\xe5Id6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    str_0 = "\x0bs9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    str_0 = "Aaw[!O_4Bxq"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    int_0 = 1877
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    bytes_0 = b"\x80\xaa\x15\xda\x10\x871\x0f\xf5 \x99"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    str_0 = "I+GhUR<yRV453!\\H:^5"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    str_0 = "\x0boUs82xvh.y& ,a\\A"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    int_0 = 1900
    str_0 = "}Pr\x0cycyuSJ1|{\x0bb"
    set_0 = {int_0, int_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    object_0 = module_1.object()
    str_0 = "^#rK"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    complex_0 = -2.045003 - 2979j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    int_0 = 1467
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    str_0 = "}g.`S~aAwkv9ZZ9X"
    complex_0 = 1406.337774 + 1932.8j
    bool_0 = False
    tuple_0 = (str_0, complex_0, bool_0, complex_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    float_0 = 1452.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    bool_0 = False
    int_0 = 1677
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    int_0 = 2257
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    int_0 = -867
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    str_0 = " @l\x0b'*VV;B2\"sj+\n\x0c?"
    float_0 = 674.2
    set_0 = {str_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    bytes_0 = b"\xc5pu~"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    int_0 = -1779
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    int_0 = -931
    module_0.get_new_command(int_0, int_0)


def test_case_2996():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2997():
    str_0 = "3\x0b\toZ3<`.~\x0cp<k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    str_0 = '"Tuc"7vDK-B"!Lj,\n3'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    bytes_0 = b"2\xda\x84\xe2\x85*R\x92K\x1et\xd0d\x94!-"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    str_0 = "0Ug\n%t]u "
    int_0 = -840
    tuple_0 = (str_0, int_0, int_0)
    set_0 = {tuple_0, int_0, str_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    int_0 = 3499
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    bytes_0 = b"\xe2\x7ffS$]\xd2\x1b\x08\xbd7\xf2H\x0e"
    bool_0 = True
    set_0 = {bool_0}
    bool_1 = False
    str_0 = "g"
    tuple_0 = (bytes_0, set_0, bool_1, str_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    none_type_0 = None
    bytes_0 = b"/,\xd3\xd6\x98\x8e\xd6\x95\xab+\xb3hY\xc8mzEd "
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    str_0 = "QxkbkH|b~=ZO0L>3G"
    str_1 = '9_b/w<.o\tfF] u\r0spT"'
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    complex_0 = -580.133694 - 313.5341j
    module_0.match(complex_0, complex_0)


def test_case_3006():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3007():
    str_0 = "MxaD;QpA{iBUuD3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    bytes_0 = b"\x15\x00\xf6\xb1\xb0\x89\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    float_0 = -601.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    str_0 = "-/4F2t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    float_0 = 624.28
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    bytes_0 = b"\x19w:\xd8s\x066\x00\n=2\xcb\xfd"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    float_0 = 1234.47
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_3015():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3016():
    bytes_0 = b"\x14J=b\x02\x9cx\x0e.\xbc\x1b+\xf4\xe3-!"
    module_0.match(bytes_0, bytes_0)


def test_case_3017():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3018():
    bytes_0 = b"\x86\x80\x9f\x80\x95\x1e\xcf<K\xe7/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    int_0 = -2298
    module_0.get_new_command(int_0, int_0)


def test_case_3021():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3022():
    str_0 = "*%7K2YZ(?f_6#4:>,G!{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    complex_0 = 322.07731 + 533j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    float_0 = 682.430189
    bool_0 = True
    set_0 = {float_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    int_0 = 428
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    str_0 = "C [c8"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    bytes_0 = b"\x00]\x1d\x80\xbe\xc9\r\x87\x1b4"
    bool_0 = False
    dict_0 = {bytes_0: bool_0, bytes_0: bytes_0, bytes_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    int_0 = -1706
    bool_0 = True
    int_1 = -1206
    tuple_0 = (int_0, bool_0, bool_0, int_1)
    bool_1 = True
    set_0 = {int_0, tuple_0, tuple_0, bool_1}
    tuple_1 = (tuple_0, bool_1, bool_1, set_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = []
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    int_0 = -1595
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0, list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    float_0 = -2442.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_3036():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3037():
    float_0 = 1735.8759
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    float_0 = -3222.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    int_0 = -140
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    bytes_0 = b"I"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    str_0 = "2DB8nx*~~&>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    bytes_0 = b"\xd7X%\x15\x07\x94&T9WS\x1ed\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    bytes_0 = b"k\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    float_0 = -5530.0
    dict_0 = {}
    list_0 = [dict_0]
    tuple_0 = (float_0, dict_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    complex_0 = -322.1 - 253j
    dict_0 = {}
    dict_1 = {complex_0: complex_0, complex_0: complex_0}
    str_0 = 'xz7",#uB5'
    tuple_0 = (complex_0, dict_0, dict_1, str_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    str_0 = "UAdWZXS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    bytes_0 = b"\x8141\xb9\x85\x13"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    none_type_0 = None
    bytes_0 = b"\xbd\x86!\xbd\xd7\xd2\x85"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    none_type_0 = None
    str_0 = "[}j<\x0c\x0c\rfkCr)e7l#4t("
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    str_0 = "D~Xn#`&"
    module_0.get_new_command(str_0, str_0)


def test_case_3054():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3055():
    str_0 = '/`]E,>lq"9'
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    bytes_0 = b"\xc8\x9d\xe2\xac\x0c\x029\xb4\xd5\xa2\xb7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    int_0 = -1551
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    bytes_0 = b'\xd0\x02\xb1\x02\xac\x81a\x90?\xe1"\x90\xaaU'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    float_0 = 2268.14
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    bool_0 = True
    int_0 = -4708
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    complex_0 = 838.8545 + 492.99j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    bytes_0 = b"\xd8\x00J\xe2\xb5\xa2zm)\x82"
    module_0.match(bytes_0, bytes_0)


def test_case_3063():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3064():
    float_0 = -387.6753
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    str_0 = "zI,*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    str_0 = "Q+J@0R\rN)!\x0b/\x0btcdg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    bytes_0 = b"C\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    int_0 = 435
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    str_0 = "WNnGe)iSlIOFg[Awqr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    int_0 = -272
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    float_0 = -5057.3
    module_0.get_new_command(float_0, float_0)


def test_case_3074():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3075():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    float_0 = -1267.86
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0, set_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


def test_case_3078():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3079():
    bool_0 = True
    str_0 = "x-<whv(rV"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    str_0 = "Zw&Yrht"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    int_0 = 2384
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: list_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    bytes_0 = b"\xe7\x85\xd4\xf4L\xf9X9\x7f\xa3\x14\x85K\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    float_0 = -2949.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    str_0 = "je-}C|K,F^\t3R\tC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    float_0 = -1715.06
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    str_0 = ">Fnw_yjZb93_\rk"
    dict_0 = {}
    module_0.match(str_0, dict_0)


def test_case_3089():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3090():
    int_0 = 2282
    module_0.get_new_command(int_0, int_0)


def test_case_3091():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3092():
    bytes_0 = b"\xeec\xa2\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    str_0 = "oa4"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    str_0 = '?W"hG]^s-|[/D9'
    str_1 = '{_FPP<Axj9Dh;sq"j})A'
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    bytes_0 = b"m,\x93\xa9\xa6\xcb\xf3\x8c\xd39\xdffH\xd6yX\xf9\x01\xbd"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    float_0 = 345.36
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    int_0 = -3848
    list_0 = [int_0]
    module_0.match(list_0, list_0)


def test_case_3098():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3099():
    int_0 = 1304
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    int_0 = -2431
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    int_0 = -486
    dict_0 = {int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    float_0 = -834.379
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    bytes_0 = b"\x18;]/M\xb5(\xfd\x93\x9f]\x96\xc2\xbc\x14\xef\x15\xfa\xbc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    str_0 = "1i~bPl^<$`7Bz"
    str_1 = "]4$Q{\t"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_1]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    str_0 = "6k?i*;-r+X)TgjOI"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    bytes_0 = b"\x10\xfe\xef\r\xc9\x10\x15\xc2\xfe\xd3\xd7qO\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    bytes_0 = b"4\xbb\xf4\xd9\x04\x7f\xa8k\xe80Bj\x1f]\xcdM\x9e"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    int_0 = 2220
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    list_0 = []
    bytes_0 = b"/\x11\x9862=\xfb,U\x0b\xa7\x7f\xff?\xaa\xe5\xa4\xbe"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0]
    list_1 = [list_0, set_0]
    module_1.object(*list_1, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    complex_0 = -81 + 1652.543j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    int_0 = -2398
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    int_0 = 1712
    module_0.get_new_command(int_0, int_0)


def test_case_3115():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3116():
    bytes_0 = b"\x8d9\x8c\x15\x10\xc0\xbd~+\x03YI2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    str_0 = "N<kvla\n4G\x0cL1UQqXo+F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    str_0 = "sIL=OHZ2jqt&x\n~lM&"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    bytes_0 = b"\x86I\xa7\xb2\xb3\x11&\xe2\xf4\x19\xf8p\xba\xc55\xb7\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    complex_0 = -430.6 + 64.85j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    bytes_0 = b"\xc1>\x98*6"
    float_0 = 1090.846
    set_0 = {bytes_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    bytes_0 = b"\x11\x19\x15\xaa`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    bytes_0 = b"e\xfaCd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bytes_0 = b"oZ\x14\xf8\x1b\xb86@y\xef\xf0\x17R"
    module_0.get_new_command(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    int_0 = 1814
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    bytes_0 = b"|\xd4\x8d\x1f\x93\xa5\x85P:"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    float_0 = 239.261885
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    bytes_0 = b"\x85N5\xf0,\x98\x96\xf9\x9f\xfc"
    module_0.match(bytes_0, bytes_0)


def test_case_3132():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    float_0 = -1695.0
    dict_0 = {bool_0: float_0}
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    str_0 = "hA|}5\x0b9fG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    float_0 = 202.55
    module_0.get_new_command(float_0, float_0)


def test_case_3136():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3137():
    bytes_0 = b"\x8a_\xf3\x03\x0b\xef\x9f\xdd\x00H*\x8e\xba\xc0/\x822"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    bytes_0 = b"\xe8\xab\xecf\x96\x9cW"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    int_0 = -711
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    str_0 = 'uD"+[j{>bv'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    float_0 = -3068.55934
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    int_0 = -544
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    bytes_0 = b'\xa2h\xf3\xa7\xfcd"R\xdf'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    float_0 = 5062.367586
    list_0 = [float_0, float_0]
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    int_0 = 264
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    bytes_0 = b"Q3\xed\xd5\x81\x9e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    int_0 = 228
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [int_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    str_0 = "[[m2;\nbjU\tWA="
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    bytes_0 = b'Q\xa7\xc9"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    bytes_0 = b"\xc0\x16\xc1\xe1\xeb\xcb\xd2\xa1\xaa\x11"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    int_0 = 1060
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    str_0 = "#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    str_0 = "W_W{0QqdAYy"
    bool_0 = False
    set_0 = {str_0, bool_0, str_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    str_0 = "4K[(f;gh1"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = ()
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    int_0 = -5229
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    int_0 = -1061
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    str_0 = '2s=x\\\t "WX_'
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_3160():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3161():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    int_0 = -1089
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    str_0 = "?gGN~|pox$a2\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    float_0 = 2123.447
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    int_0 = 638
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    bytes_0 = b"\x86\xaf\xa3\xad\x8e\x8a"
    str_0 = "~EP{6f:\tN]Wp;=\r0qP"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    bytes_0 = b"(Zn\x9b\x18c[\x98P\x98(\x12\x05\x9b\x1e\xb4r\x03\x94\x0e"
    list_0 = [bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    float_0 = 2874.88
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    complex_0 = -2730.636 - 1461.717157j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    float_0 = -971.569
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    int_0 = 1706
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    str_0 = ';Lw/zrQs-5Vj0-"P\x0c'
    module_0.match(str_0, str_0)


def test_case_3173():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3174():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


def test_case_3175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3176():
    str_0 = 'iKb^NW<1PynrGZ`"Qe'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    str_0 = "7b6q)k6]\n"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    int_0 = -542
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_3182():
    pass


def test_case_3183():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3184():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


def test_case_3185():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3186():
    bytes_0 = b"\x8e@\x93\x9a\x9b\xfd+8\xd2jw6P\xd4\xac3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    bytes_0 = b"X\x1c0F[\xf5\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    str_0 = "kt#K|B1LTY)(iC?Rm"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    str_0 = "Z{'K\\9\\%1bGq_hF7s!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    bytes_0 = b"\xf8"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    complex_0 = -1108.376829 + 2492.71j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    int_0 = -672
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_3195():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3196():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    str_0 = '%g\\\n;"A.PWY\x0b!V$S\\'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    float_0 = -717.56
    bool_0 = True
    dict_0 = {float_0: bool_0, float_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_3200():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3201():
    int_0 = -1797
    str_0 = "J)]!&`NUdCuJU"
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    str_0 = "|X=u>aq]D>]\tOW"
    list_0 = [str_0, str_0]
    tuple_0 = (str_0, list_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_3203():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3204():
    int_0 = -1570
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    tuple_1 = (int_0, tuple_0)
    set_0 = {tuple_1, tuple_1}
    module_0.match(set_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    bytes_0 = b"y\xd2\x90v\xb8\xd5\xcf\x1e4r7S"
    module_0.match(bytes_0, bytes_0)


def test_case_3206():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3207():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    complex_0 = 337.553461 - 1882.141j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    str_0 = "C<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    bytes_0 = b"\xbbO\x06@\xe2s\tm"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    bool_0 = True
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    str_0 = ".\tubZ!OD"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    int_0 = -3137
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    bool_0 = False
    float_0 = 4996.0
    tuple_1 = (tuple_0, list_0, bool_0, float_0)
    list_1 = [tuple_1, float_0]
    module_0.get_new_command(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    int_0 = -817
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    str_0 = "GP#>763nG[W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    bytes_0 = b"f\x9d\x0b\xcb\xb0\xe8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3220():
    str_0 = " QN3"
    str_1 = "wi F^Zduq+(u{1L&TKB"
    tuple_0 = (str_0, str_1)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    int_0 = -1522
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    int_0 = -5663
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    int_0 = -1449
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    int_0 = -2002
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    int_0 = 2047
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    float_0 = -952.42
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    str_0 = "()dgtQh"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    str_0 = ";\t3d8"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    int_0 = -1968
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    str_0 = "~;/0TO?$39:\n,mU`q>Ar"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    str_0 = "j_(UUO+."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    int_0 = -1660
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    bytes_0 = b" \xe6L\xbb\x9d\xca\x1ah\xdd\xbc\x08\xd0\x11y\xc5\xa5r\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    int_0 = 1282
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    bytes_0 = b"\xc6\xe2u3$\x16\xc8b\x17\x97\xe1\x15\x8d%@,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    str_0 = "#Gt%U{\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    bytes_0 = b"\x01\x8b\xc1\x86\xdf\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    bytes_0 = b")\xb4w\xe9\xcb\x10\x04s\xf1!y\xd6z\xea}\x0f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    str_0 = "GW.UlNq*CyUQa"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    float_0 = -436.44
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    bytes_0 = b"B\x80\\LC_\xcd6\x89"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    int_0 = -3637
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    str_0 = "8\x0b?j9|bG:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    int_0 = 1063
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    none_type_0 = None
    bool_0 = False
    list_0 = [none_type_0, none_type_0, none_type_0, bool_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    int_0 = -2052
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    float_0 = 3123.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    tuple_0 = ()
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_3253():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3254():
    tuple_0 = ()
    int_0 = -2209
    bytes_0 = b"\x9b\xefM{+\xc66C\x86\xb6\xf1\xaf"
    complex_0 = 2890.288 + 1641.42j
    tuple_1 = (tuple_0, int_0, bytes_0, complex_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    complex_0 = -447.5447 + 559j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    bytes_0 = b"P_ \xcf\r\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    int_0 = -1515
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    int_0 = -1996
    module_0.match(int_0, int_0)


def test_case_3259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3260():
    int_0 = 819
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    dict_0 = {}
    tuple_0 = (dict_0,)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, object_0)


def test_case_3263():
    pass


def test_case_3264():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3265():
    float_0 = 3418.198442
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    bytes_0 = b"\x99\xab\xa0\xb3M\x15\x93W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    bytes_0 = b"d\xd8v\x8b\xc8\xce57)1g\xb7\t.\xe7\xf1|\x88\x93\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    str_0 = "9\tE XZw>#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    str_0 = '2+\r_G@EAJef784_a!"'
    int_0 = -4344
    int_1 = -1542
    tuple_0 = (str_0, int_0, int_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    str_0 = "8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    float_0 = 3195.295
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    str_0 = ":q;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    bytes_0 = b"\xbeZ{?Y\xe2\xda\xc4\xaf&\xa3\xad\xed\x98&"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = 1545
    tuple_0 = (bytes_0, dict_0, bytes_0, int_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    none_type_0 = None
    str_0 = "{5UCv6U7B`U[g\t!"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    int_0 = -628
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    bytes_0 = b"&\x00\xe7\x0fD\x06\xb8\xf8\xa5\xa4dl\xd6q)\x18\x15\xa8"
    bytes_1 = b"t\r\x06s\xf0\xc3\xd0\xeb\xb1J\xa8@\xc3Y\x00\x99R\x84"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    str_0 = "f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    complex_0 = 4504.1679 - 1473.19j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    bytes_0 = b"\xd26P\x0f\xe9M\x9c\xb3~\t\xea^2#?@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    bool_0 = True
    str_0 = "SUfU9"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (bool_0, list_0, tuple_0)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    bytes_0 = b"\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    str_0 = '"\x0b}\\|l'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    bytes_0 = b".r\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    none_type_0 = None
    str_0 = "f\rS::]|`=("
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    bytes_0 = b"\x94e\xf1\xf9\xce<<\xd1\xd6\x93\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    int_0 = 4734
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    int_0 = -2339
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    bytes_0 = b"\xbd\xf5\x93\xae<\x8d\xa2x+\xf6}\x83\x190zb/O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    str_0 = "ar"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    float_0 = -3920.43825
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    float_0 = 5132.1974
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    str_0 = "ov}@@tI}]*e<3yw"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    bytes_0 = b"\xbf\xfe\xda\xc466\xfa\x91\xab\x8c1\x8f\x07j"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    float_0 = 468.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    bytes_0 = b"tN\x9az\x87."
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    bool_0 = False
    bytes_0 = b"\xc8N/'\xde\xad\x10\xf9\xd3"
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    str_0 = ":D(]!Q<ys)Ek?Q&"
    complex_0 = -2669.0157 + 3892.85032j
    dict_0 = {str_0: str_0, str_0: str_0, complex_0: complex_0, complex_0: str_0}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    complex_0 = -1119.108 - 1391.471j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    str_0 = "ak\n\x0c%j\r,\x0c`9E;3L72#c"
    module_0.match(str_0, str_0)


def test_case_3308():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3309():
    int_0 = 1844
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    int_0 = 1065
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    object_0 = module_1.object()
    bytes_0 = b"Sv5\x1e!\t_\xeb\r\xa0\xeek)*\x9b9\x11\xa9\xf7\xf2"
    tuple_0 = (object_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    str_0 = "Pp"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3314():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3315():
    bytes_0 = b"R\xf8q*:\xab\xeal;6\x1a\x1blI\x9f\xbb\xd1\x00\xa0\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    str_0 = "*%X:\n6hc|V{sk'c"
    str_1 = "\x0b/O'F.Kp.{lX=/'n8di#"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    int_0 = 552
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    bytes_0 = b"\x0b\x04\x9c^\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    bytes_0 = b"qw\xd8#\xf3\xa9\x1d\xbd\r\xeb$\xc2\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    bytes_0 = b",\xd4\x13\xae\x84\xa4K\x94\xd7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    str_0 = "P]:(6"
    tuple_0 = (str_0,)
    list_0 = [str_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    float_0 = -1774.365
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, set_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    bytes_0 = b"\xc0\xf0n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    int_0 = -2890
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    bytes_0 = b"o\r\x1e\x02#Qv\xd9nL\xfcPm\xb9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    str_0 = "b+z}nQYT/"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    none_type_0 = None
    bytes_0 = b"gXM\x9d\xc5F\xfe\x80;\xc4"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {bool_0: tuple_0, bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\xac\xed<\x0bC\xdc\xe3"
    tuple_1 = (dict_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    int_0 = 1026
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    bytes_0 = b"\x02\xe9 "
    str_0 = "%~5tLmwUaI"
    dict_0 = {bytes_0: bytes_0, str_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    int_0 = 4398
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    float_0 = 72.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    bytes_0 = b"G\x9d\xf5\xbb\xb0\xa1\x12\x85#\xf8#\x1f>\x1a\xd1\xfc\xa1\xe9\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    int_0 = -2365
    bool_0 = False
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    bool_0 = True
    float_0 = 543.0
    list_0 = [bool_0, bool_0, float_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    complex_0 = 2076 - 34.64j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    int_0 = 1737
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    int_0 = 37
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    int_0 = 2909
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: bool_0, int_0: bool_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    int_0 = -372
    int_1 = -1153
    list_0 = [int_0, int_0, int_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    int_0 = -551
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    int_0 = 1425
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    float_0 = 106.45034
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    bytes_0 = b"\x7f\xce\x15"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    bytes_0 = b".\x86r\xca\x94\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    int_0 = 177
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    str_0 = "B;,(Yjo=|{Svc{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bytes_0 = b"%x\xab\x88\xab\x0f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    str_0 = "^4uggP'\tRg@w\"*V/4T"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    str_0 = "+RW"
    str_1 = "3v@8k"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    int_0 = 4448
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    bytes_0 = b"\x85I\xefl\x15\xccS\xa6\x9e\xc9T"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    bytes_0 = b"\x937l\xe8\x97-`"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    bytes_0 = b"v\x17\xa0\x0b\x01"
    module_0.match(bytes_0, bytes_0)


def test_case_3364():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3365():
    float_0 = 1083.20641
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    str_0 = "nEE7; ixNqK"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    complex_0 = 910.72 + 907.9689j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    complex_0 = -37.13 + 327j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    complex_0 = 318.27978 + 5008.31j
    float_0 = 4993.5489
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: float_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    int_0 = 4627
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    bool_0 = False
    int_0 = 1818
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    bool_0 = True
    int_0 = -5055
    list_0 = [bool_0, bool_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    float_0 = -1877.505
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    bytes_0 = b"\xce\r&\xb2\x9a\xa8\xbd\xb4\xc5b\xa9O\x86\xc9\xa1\x0fF"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    int_0 = -3418
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    float_0 = -1632.2426
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    str_0 = "c&}2c~\x0cFTG/G'k$m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    bytes_0 = b"\xf2u\x82\xa3\xec4\xa0\xe7O\xc2s|T\x91\x99\xae\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    bytes_0 = b"\xf1\x0e\xb5\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    str_0 = "9q#ez\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    bytes_0 = b"U3\xf9\xbe\x1d\x82\xd2J\x8a\xe6|\xdf\x98\xe6\xa6G\x15\xaf\xafX"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    int_0 = -4423
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    int_0 = 573
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    bytes_0 = b"\xd0\xbe\xa8\x8bUP\xb7\x0b\x18\\\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    bool_0 = True
    object_0 = module_1.object()
    set_0 = {bool_0, bool_0, object_0, bool_0}
    bytes_0 = b"\xe5"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    str_0 = "fISv@YG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    bytes_0 = b"'o\x01\x12\xf7\r\x8d\x1cK\xfb\x9b\xd9\x02x\x00_\xa4~\xb0"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    int_0 = 1530
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    str_0 = 'J@&e"z\rL`'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    str_0 = "\x0cbA{uxJUFR(OhgSvNR"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    dict_0 = {tuple_0: tuple_0, bool_0: str_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    int_0 = -1618
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    str_0 = "M^M-uDUW_7nZ<H|"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    int_0 = -745
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_3401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3402():
    str_0 = "EAm[7${8Po)B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    bool_0 = True
    bytes_0 = b"\xed\xeb\x9e\xb3e\xec7M\x1d\xad[\x83\xd0\x07\xe9Oe\xd4\xceA"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    float_0 = 368.25
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    bytes_0 = b"\xb2"
    float_0 = -1576.85397
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    bytes_0 = b"(y\xb0h\x16\x15l"
    bytes_1 = b"W\x1ek\xa2\xc6\xa0\xa7\x9e`\xda\xb6a"
    tuple_0 = (bytes_0, bytes_1)
    module_0.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    float_0 = -3462.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    float_0 = 4.0
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    str_0 = ";E7SVsFJfy1lK;W+<>BJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    str_0 = "(LgHm=_<$P>E^`]r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    str_0 = "i;;wmz"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    bool_0 = False
    bytes_0 = b"D\x89v\xa0H{\xc3"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    complex_0 = 4601.51 + 1697.359712j
    module_0.match(complex_0, complex_0)


def test_case_3417():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3418():
    bytes_0 = b"\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    str_0 = "0LVo? CE*`2};"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    bytes_0 = b";\x15!\xe0b:\x07\xea\xc2An.\xea"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    int_0 = 3961
    set_0 = {int_0}
    tuple_0 = (int_0, int_0, set_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    bytes_0 = b"\x86\xa0\x83\xfbK"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    str_0 = "mJLm\x0bX.pD9S!v=Sx/4MK"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    str_0 = "KRTNv-M:aeC#,"
    none_type_0 = None
    str_1 = 'ys\x0cK,")H<K",'
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    complex_0 = -2893.643875 + 1383.359j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    int_0 = -1979
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    complex_0 = -159.2492 - 3605.8j
    str_0 = "fs"
    module_0.match(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_0, bool_1: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    bytes_0 = b"\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3432():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3433():
    str_0 = ".\\kR0Eb>Ja7.!Xta9"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    bytes_0 = b"\xc9\xf6:0i\xeb~\xf4\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    str_0 = "f^vTO3lk9"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    float_0 = 934.9521
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    int_0 = 3608
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    int_0 = -390
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    complex_0 = -1496.814 + 141.54317j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    str_0 = "Ec\x0b.b'fP=A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    str_0 = '4LuY-O"Gcq<792'
    dict_0 = {str_0: str_0, str_0: str_0}
    int_0 = 169
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    int_0 = -119
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    str_0 = "T{FA_m\tL`7Avu["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    bytes_0 = b"\xde\x89\xbe\x88w\xbbD\x94E10x\xe7t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    float_0 = -440.15
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    float_0 = 4145.29076
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    int_0 = 1631
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    bytes_0 = b")-\xa0\x10\x15\xa1\xe0``\xcd\xd1\x96C\xbf\xf4\xf7an\x9f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    bool_0 = True
    int_0 = 414
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    bytes_0 = b""
    bool_0 = True
    bool_1 = False
    int_0 = 604
    dict_0 = {int_0: bool_1}
    dict_1 = {bytes_0: bool_0, int_0: bytes_0, bytes_0: bool_0, int_0: dict_0}
    tuple_0 = (bytes_0, bool_1, dict_1, dict_1)
    tuple_1 = (bytes_0, bool_0, bool_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    complex_0 = -834.77964 - 2763.7j
    bytes_0 = b"\xe4Wh<\x1c\x02\\\xf6\xab"
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    complex_0 = -1325.1522 - 845.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    int_0 = -91
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    int_0 = -1231
    list_0 = [int_0, int_0, int_0, int_0]
    float_0 = 1565.894
    dict_0 = {int_0: int_0, int_0: list_0, int_0: float_0, float_0: float_0}
    tuple_0 = ()
    tuple_1 = (dict_0, tuple_0)
    module_0.match(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    int_0 = -2014
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    bytes_0 = b"\xab\x1d\x1b\xd5z<8\xb1\xa9|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    complex_0 = -423.46549 - 1173.13526j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    int_0 = 935
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    int_0 = 1288
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    bool_0 = True
    int_0 = -1216
    tuple_0 = (list_0, bool_0, none_type_0, int_0)
    module_0.match(none_type_0, tuple_0)


def test_case_3462():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3463():
    str_0 = "P?x3oU:"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    int_0 = 858
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    int_0 = 4028
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (int_0, int_0, bool_0, set_0)
    bytes_0 = b"\xc7\xdb\xb7\xc3"
    tuple_1 = (tuple_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    float_0 = -82.73
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    str_0 = "-dg~\rCH{9YZNit/"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    int_0 = 3580
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    complex_0 = 89.2 + 2503.94j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    str_0 = ' 09I?7<z7vE\ngU"^n'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bytes_0 = b"\x02\xbf\\\xf6\xf1t\xc0\xf5\x87"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    str_0 = "MEY\r"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    bytes_0 = b"+\x99X\x92\x02\xc9\x12e\xf9>\xeb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    int_0 = -2492
    bytes_0 = b"%\x8b\x90\xedf\xf2\xfe"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    int_0 = 2151
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    float_0 = 926.4447
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    complex_0 = 2392.832 - 3386j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(complex_0, list_0)


def test_case_3479():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3480():
    str_0 = "wlD)s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    str_0 = "H"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0]
    module_1.object(*list_1, **tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    float_0 = 928.0
    bool_0 = False
    dict_0 = {float_0: float_0, float_0: bool_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    bytes_0 = b"^Tx\x0c\xb1\xce\xf2xC:\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    int_0 = 379
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    str_0 = "m<`\th]3#tp%}\x0cY?&-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    bytes_0 = b"\ra\x16m-\xe0n\xec\xb6e\xbe\xb8\xf4\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    str_0 = "x\x0cL_3O.%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    str_0 = "0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    int_0 = -16
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    str_0 = "}8"
    none_type_0 = None
    str_1 = "!rAfC'B-[gUk`:DoO"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    str_0 = "k/Rj/Js=JT"
    tuple_0 = (str_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


def test_case_3494():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3495():
    float_0 = 440.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    float_0 = -917.705981
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    int_0 = -2709
    bool_0 = False
    bool_1 = False
    tuple_0 = (int_0, bool_0, int_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    bytes_0 = b"\x99\x9a\xd2:\x0f\xb3I"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    int_0 = 282
    list_0 = [int_0, set_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    int_0 = -2317
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    bytes_0 = b"\\"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    str_0 = "[C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    float_0 = -274.84
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    str_0 = "="
    bytes_0 = b"e:\xd3\x93P\xa0\xe61q7\xde?<^%\xe5@)\xfb"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    int_0 = 3546
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = "*Eqr"
    dict_0 = {str_0: bool_0, str_0: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    bytes_0 = b"\x81\xcb\xc2\xd2\x17e\xf4\x82\xa0\xe9\xa3\xdc\xf4\x01\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    list_1 = [list_0]
    list_2 = [list_1, bool_0, bool_0]
    module_0.match(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    bytes_0 = b"\xee\xdbHh\x98\xeb\xcc/\x11\x1au\xbb\xcf\xf8\x9aw"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    complex_0 = 1466.2021 - 648.17j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    int_0 = -425
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    int_0 = 2609
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    bytes_0 = b"\x87*\x92MH\x96\xe0\xef\x10\xdcC\xf9\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    int_0 = 1804
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_3517():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3518():
    complex_0 = -1345.5 + 3697.62881j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    int_0 = 1264
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    int_0 = 3258
    module_0.match(int_0, int_0)


def test_case_3521():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3522():
    str_0 = "YygI9rwz"
    float_0 = 729.998
    set_0 = {str_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    int_0 = -59
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    str_0 = "o>!\\y/Bd"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    complex_0 = 1618.5 - 75.0568j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    bytes_0 = b"c!C\x1d\xec\xf7dJ(X\xd7\xe0w>d\x96K\x03A~"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    bool_0 = True
    int_0 = -1839
    dict_0 = {bool_0: bool_0, bool_0: bool_0, int_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    bool_0 = True
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    int_0 = 418
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    bool_0 = False
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    int_0 = 411
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    int_0 = -2961
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    bytes_0 = b"rGV[\xd0fX\xca\x8c\xaa\xe4\x8dAL"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    int_0 = -3851
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, int_0, int_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    bytes_0 = b"s\xddl\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    complex_0 = -690.7184 - 3219.651j
    list_0 = [dict_0, complex_0, complex_0, bool_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    str_0 = "x@UUk"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    float_0 = 604.96
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    complex_0 = -802.236554 - 1887.09j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    float_0 = 969.465046
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_3544():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3545():
    str_0 = "kYqI4<B8k1zV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    bytes_0 = b"4"
    bytes_1 = b"\xdf\x90(R\x8f\x00\x93[\xe0\x81\x86(\xa2\xaa\xeb"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_1, bool_0, bool_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    int_0 = -2424
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    bytes_0 = (
        b"\x89\xbb\xfa\xc8\xab\x1b\x1a\x9a\xa0\xdc\xc5Y\xe2\xea\xcb\x8c\xb2\x9b\xc4\x80"
    )
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    str_0 = "fi"
    set_0 = set()
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    int_0 = -292
    list_0 = [int_0]
    bytes_0 = b"0\xb7\xe6\xbb\xc6\xa2\xc8\xa0g\xf8\x9d\xa9\xa2\x1d*-"
    tuple_0 = (int_0, list_0, bytes_0, list_0)
    bytes_1 = b"KO3\xfa\xed=)\xed\x1e\xa8\x95\xe8\xab\xec\x92?\x16m"
    list_1 = [int_0, bytes_0, bytes_1]
    tuple_1 = (int_0, tuple_0, bytes_1, list_1)
    bytes_2 = b"\xaf\x8bg"
    tuple_2 = (tuple_1, bytes_2)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "\ru2Cw)4.KRvOcW"
    str_1 = "p>f2],>^D`\\Mt-ZZ<|i"
    dict_0 = {str_0: list_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    str_0 = "x5stf20vx!EoV%/"
    str_1 = "@*P~dE'"
    str_2 = "aZVR,"
    list_0 = [str_1, str_2]
    tuple_0 = (list_0,)
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: tuple_0}
    module_1.object(**dict_0)


def test_case_3555():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3556():
    int_0 = -892
    module_0.match(int_0, int_0)


def test_case_3557():
    pass


def test_case_3558():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3559():
    bytes_0 = b"a\x9e\x0f\xf1\x8d\xc6\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    int_0 = 1692
    module_0.match(int_0, int_0)


def test_case_3561():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3562():
    bytes_0 = b"\x8b0\x81T%u\xa2\xa6\xfd4\xd0m\xd1\xaa\x8f=\xeb\xf2j"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    int_0 = 2916
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    float_0 = -443.4824
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    bytes_0 = b"D[\xd9\xcbU@\xb2\xa0<\xd9@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    str_0 = "%cEj:1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    complex_0 = 669 + 2143.141j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    float_0 = -4082.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    bytes_0 = b"\xe8V\xf0\xba\xaa\x81N\x16z\xaf\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    bytes_0 = b"\\\x03]\x8d\xf4\xde\x14"
    module_0.match(bytes_0, bytes_0)


def test_case_3571():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3572():
    bool_0 = False
    complex_0 = 1597.886 + 1298.17375j
    list_0 = [bool_0, bool_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    str_0 = "aMu\x0c|R7 %Sz\nW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    none_type_0 = None
    tuple_0 = ()
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        tuple_0: tuple_0,
        tuple_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    int_0 = -910
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    str_0 = "kh3n51L\x0b'i_T"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    float_0 = -1684.66
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    complex_0 = -2324.31857 - 2940.688032j
    set_0 = {complex_0, complex_0}
    module_0.match(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    bytes_0 = b"\xd2\xf62\x8b\xb4\xa6\xefC-3liW))"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    float_0 = 1768.525856
    module_0.match(float_0, float_0)


def test_case_3582():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3583():
    int_0 = -224
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    str_0 = "C.(G/7|\n\tT{uIG"
    str_1 = "^T7= -nmgI8HTK"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    bytes_0 = b"L\xb7\x1d\xcc\xe0\xc2\x81\x0c\xa9\xd5g\xb5<\xafe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    str_0 = "n`(Q"
    str_1 = "4=_zSk3.?l}\r=&.'Br"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1}
    module_0.match(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    str_0 = "]0{Z*<"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    bytes_0 = b"?\x12\x85f.\x86\\\x109"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    str_0 = "tq4 Ar"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    bytes_0 = b"i\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_3592():
    pass


def test_case_3593():
    pass


def test_case_3594():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3595():
    bytes_0 = b"uB\xa6\x9b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    int_0 = -2098
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    str_0 = "/O[e\x0cbd@{d\\t!#q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    int_0 = -1385
    int_1 = 262
    set_0 = {int_0, int_1, int_1, int_0}
    tuple_0 = (int_0, set_0, int_1)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    str_0 = "*3g`."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    str_0 = "ulXvq"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    float_0 = -539.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bool_0 = True
    int_0 = 213
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    float_0 = -223.364285
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    str_0 = "G{) HZuNw301i"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    bytes_0 = b"\xeb\xc0&A\xadK"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    bytes_0 = b"/\xb8|\x8c\xb3\x7f\x96 +\xba\x8b\x91"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    dict_0 = {}
    str_0 = "qiq83%"
    module_0.get_new_command(dict_0, str_0)


def test_case_3608():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3609():
    int_0 = -2497
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    bytes_0 = b"b\xbc\x96\xd2\xdb\xb7\x0e\xf5\x9a\xb1\xa42\x14IO\xc3\xfc\x10\x03\x96"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    int_0 = -299
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    float_0 = 1391.972
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    complex_0 = 1398.70477 - 1058.143j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    float_0 = -552.319972
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    str_0 = "ZJ)1|yuPC\ry-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    int_0 = -448
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    str_0 = "Je\\ev3qNVE\\amOL1B"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    str_0 = "}*\x0cWS"
    bytes_0 = b"\xe3\xe8H\xa8\xc6\x92\x12\xb5\x0e\xbdp\x8b\x18(\xa8':\x11"
    tuple_0 = (str_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_3620():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3621():
    int_0 = -359
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    bytes_0 = b"Xqu"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    none_type_0 = None
    str_0 = "(Ox^\"yRH'h{4'R-c\x0c"
    str_1 = ">M0?XKMe\x0bqVzmj%"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bytes_0 = b"z\x9e\xcb#\xc4\xee\x84\xd08\x0cR\xcaf\x03l\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    bytes_0 = b"9\r\xf2\xb4ZT\x9d\x98\x9cv[\x83"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3628():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3629():
    str_0 = "0KtHei$$t@XiK?i|vJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    str_0 = "rZY!j\n}<TOM2,iE!("
    bytes_0 = b'\xa8\xea\x1b\xfd"fO\x19\x9d\x1c\xfd\xcf'
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    int_0 = -2079
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    int_0 = 558
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    int_0 = 571
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0, int_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    int_0 = -1135
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    int_0 = 393
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    tuple_0 = ()
    bool_0 = True
    bytes_0 = b"\xe1\x89\xcc\x1aD\x9a\x0f:\xcdZ"
    tuple_1 = (tuple_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_3641():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3642():
    str_0 = "Ja1L%0x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    bytes_0 = b"\\?\xa4\x0f\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    bytes_0 = b"\xbc!/hv\x0b6\xbd.\xbcd\t\x13\x03\xa3\x07w"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    bytes_0 = b"\x96\x0b\xcd\x1a\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    str_0 = "W|vMjW<90Cn3)\r'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    int_0 = 476
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    str_0 = "$\n\nu{F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    float_0 = 517.0
    set_0 = set()
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    str_0 = "G2m~j\rL_b_H*Kw\n{3#p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    list_0 = []
    str_0 = "0*"
    int_0 = 1146
    dict_0 = {str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    complex_0 = 5895.22947 - 1808.266972j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    bytes_0 = b"\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    float_0 = -1406.33
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    bytes_0 = b"Hv\xdcy]#\xcc\xb6%\x9eP"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    bytes_0 = b"\xaa\x1f\x87\n\x8d\xe5\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    str_0 = "V@5T$ y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    int_0 = 2746
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    bytes_0 = b"\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    complex_0 = -2258.4047 - 382.03j
    module_0.match(complex_0, complex_0)


def test_case_3664():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3665():
    float_0 = -419.20741
    module_0.match(float_0, float_0)


def test_case_3666():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3667():
    complex_0 = -2354.211 - 142.42j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    int_0 = 2128
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    bytes_0 = b"\xdbU\xeesI*\xd3\x8e%NZ\xcb\xe0\x9a\xc4\xd9f>\xf7"
    float_0 = -76.76533
    list_0 = [bytes_0, float_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    int_0 = 1300
    set_0 = set()
    list_0 = [int_0, int_0, int_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    none_type_0 = None
    int_0 = 5025
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    str_0 = "\\xUphc$gDjH`IiX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    int_0 = 1386
    str_0 = "pggTo;g,qc]i%"
    list_0 = [int_0, int_0, str_0, int_0]
    dict_0 = {int_0: list_0}
    int_1 = -3108
    tuple_0 = (dict_0, int_1)
    tuple_1 = (int_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    int_0 = -1267
    set_0 = {int_0}
    list_0 = [set_0, set_0, set_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    int_0 = 3069
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    str_0 = "BZc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    str_0 = "\\NP4tq[v"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    float_0 = -3981.0541
    list_0 = []
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    int_0 = 1135
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    float_0 = 611.3356
    module_0.get_new_command(float_0, float_0)


def test_case_3683():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3684():
    int_0 = 518
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    bytes_0 = b"\xf6/L\x91O\x13T\xb4\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    bool_0 = False
    complex_0 = 4647.151 - 2230.63623j
    set_0 = {complex_0, complex_0}
    tuple_0 = (bool_0, bool_0, complex_0, set_0)
    int_0 = 2451
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    str_0 = "/wk\t\x0cRjc\n;055a#"
    object_0 = module_1.object()
    list_0 = [str_0, str_0, str_0, object_0]
    module_0.match(list_0, str_0)


def test_case_3689():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3690():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    int_0 = 1905
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    str_0 = ".&Cs"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


def test_case_3693():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3694():
    complex_0 = 1063.105 + 501.3j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    float_0 = 1705.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    str_0 = "c"
    none_type_0 = None
    str_1 = 'w]uG\x0c:B7"EB0XdwHGj'
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


def test_case_3698():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3699():
    int_0 = -648
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    bool_0 = True
    float_0 = -3528.7196
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    str_0 = "n^h<\x0b2RB{6n@u;"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    int_0 = 1766
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    complex_0 = 112.9 - 977.0659j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3704():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3705():
    str_0 = 'k7xq".i&|\\Fy9:<E}X'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    str_0 = "_5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    str_0 = "~MK~QVHd+P:&)4i2?{S"
    str_1 = "K.+^7\\>"
    str_2 = "0WY.z3UZr5rVR;"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    float_0 = 343.18
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    bytes_0 = b"\xab\xcd\xb9\x12\xa6\x96\xca6R\x91\xe4sqo\xe7(\xde#\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    int_0 = 2439
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    str_0 = '3k}*mL"kmc3_)'
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    str_0 = "k;]zs%8sQsJJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    int_0 = 2923
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    float_0 = -940.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    int_0 = -1306
    list_0 = []
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    str_0 = "jV ayC"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    bytes_0 = b"\xbc\x0fa\xfbx\xe8HIK"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    float_0 = -3603.445
    bool_0 = True
    list_0 = [float_0, float_0, bool_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    str_0 = "N\x0cq:"
    module_0.get_new_command(str_0, str_0)


def test_case_3721():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3722():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    bytes_0 = b"\x9azR\x18\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    str_0 = "S zu#89\r{lu+5"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    list_0 = []
    object_0 = module_1.object()
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    str_0 = "|2su+#B4up_:b"
    float_0 = -330.966864
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    none_type_0 = None
    str_0 = "Xq]jPYyzFfp.G1%*S"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    int_0 = -1380
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    str_0 = ",iuAm,6AbEo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    int_0 = -2796
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    int_0 = 2495
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    str_0 = "gCWh(g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    str_0 = ":\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    bytes_0 = b"J\xf9\xa6\xea\xe0\xf4\xf0j\xc9D\x92\xa0a\x15\x155o]\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    str_0 = "lkC"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3737():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3738():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    str_0 = "<_\x0b'\rx,9}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    int_0 = 150
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    int_0 = -6216
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    bool_1 = False
    dict_0 = {tuple_0: tuple_0, bool_0: bool_1, tuple_0: bool_0}
    tuple_1 = (bool_0, bool_1, dict_0, tuple_0)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    float_0 = -2536.1555
    dict_0 = {}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    str_0 = 'XV/Ls<(e~j"37'
    list_0 = [str_0]
    module_0.match(list_0, str_0)


def test_case_3746():
    pass


def test_case_3747():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3748():
    int_0 = 2605
    module_0.match(int_0, int_0)


def test_case_3749():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    int_0 = 2251
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    str_0 = "1+n0k\x0cl6<?)Wr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    str_0 = "c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    int_0 = 4452
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    str_0 = 'z;e@"*7HH5`%bLUqW'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    int_0 = -551
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    bytes_0 = b"\xb1\xe7\xc2o29\x9f\xd9\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    str_0 = "}/,<WV{bK!vv_e1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    float_0 = -406.9588
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    int_0 = 862
    object_0 = module_1.object()
    dict_0 = {int_0: int_0, int_0: int_0, int_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    bytes_0 = b"\xba\x97\x9e\xda\x97\xc9\x9a\xebJ\x87\xa1Ma\xe14\xda\x80;\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    bool_0 = False
    bytes_0 = b"\x89\xeaj\x95\x12\xe1\xd9L\x9c"
    bool_1 = False
    tuple_0 = (bool_0, bytes_0, bool_1)
    set_0 = {bytes_0, bytes_0}
    int_0 = 1516
    list_0 = [tuple_0, set_0, set_0, int_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    float_0 = 905.891539
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    int_0 = -263
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    float_0 = 1816.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    int_0 = -2890
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    bytes_0 = b" |\x0f\xde\x8c\x08h\xe5"
    bytes_1 = b"\xbc\xde<\xd9&\xe8\x14\xaf\xd0\xef\x08\xb5l\xcc\x0c"
    module_0.match(bytes_0, bytes_1)


def test_case_3771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3772():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    bytes_0 = b"\xa4\xa47\x92<\x9f-\x97\xd8\xe3\x86\x9b\xb4\xd8\xee\xc4\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    float_0 = 5130.7
    module_0.get_new_command(float_0, float_0)


def test_case_3775():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3776():
    str_0 = "-w7]J=~ mhFBR5\x0cKD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    bytes_0 = b"H`\x87\x12\x96\xcd\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    str_0 = "sEr/<z'E>CB\x0b^\tb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    int_0 = 3716
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    int_0 = 315
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    bytes_0 = b'\xafRX@"\x96\xc4\r\xce\x85\x14\xda'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    str_0 = "_\x0bS+bK2a=iT9B/t1$<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    list_0 = []
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    int_0 = 2404
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    complex_0 = -4736 - 312.449076j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    float_0 = 477.1
    list_0 = [float_0, float_0, float_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    bytes_0 = b"\xfb\xdc9\xdd\x8d\xf2\x94 \x9cR\x9a"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    complex_0 = -823.119365 + 935.45836j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    float_0 = 1412.0
    module_0.get_new_command(float_0, float_0)


def test_case_3794():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3795():
    int_0 = -2859
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    float_0 = 974.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    str_0 = "E>~CtO\x0c\t6Oq,]o0"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    int_0 = -598
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    str_0 = 'NaH\\K;JUZ_Y"kB`'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    bytes_0 = b"\xc1\xcdu\xed\x95\xea\xbc\xe3\xf1\xdd|\xac:\xee\xac]\xbf\x86s"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3801():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3802():
    bytes_0 = b"\xe6hn\xc5K\x8ca\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    str_0 = "+DsVWwm&nz>!"
    set_0 = set()
    tuple_0 = (str_0, set_0)
    module_0.match(tuple_0, str_0)


def test_case_3804():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3805():
    float_0 = 1907.35
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    int_0 = -532
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    str_0 = "4x<\x0cKJ&O0o\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    int_0 = -1070
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    float_0 = -3715.83741
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    bytes_0 = b"\xda*\x160\xe3+zD\xb6\x8b\x0f\xb13\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    str_0 = "8s$li@"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    bytes_0 = b"\x9c\x89\xb4d\xacBk/\x92\x03\xf7;\x16"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    str_0 = "?X\x0b;OmZ\r\r{!z R:Q)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    int_0 = -1584
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    float_0 = 1809.0096
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    bytes_0 = b"y\xf8\xd4\x90"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    int_0 = 3016
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    str_0 = "0?~R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    bytes_0 = b"\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    int_0 = -793
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    float_0 = 3199.04761
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    str_0 = "]D=W48"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    float_0 = -1347.6
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    float_0 = -1782.2135
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    int_0 = 1575
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    str_0 = "3vy z$r&m )T9dU}a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    str_0 = ';(I5wE^nQ^?"M$3xR`q!'
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    str_0 = "^yrMW-n<P&r72w&8p{U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    complex_0 = -3324.7 + 187.6927j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    bool_0 = True
    bytes_0 = b"l\x18\xf5\x05\n\x90\x15h\xb1U\xe0&\xdf\x8f"
    str_0 = "8/~r\tygN&:TtcQS"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    int_0 = 2540
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    int_0 = -3211
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    str_0 = "T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    bool_0 = True
    int_0 = 936
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    str_0 = "nm_WrQZ"
    str_1 = "r7Y"
    set_0 = {str_0, str_1, str_0, str_1}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    float_0 = -2705.510922
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    int_0 = 447
    bool_0 = True
    list_0 = [int_0, int_0, bool_0, int_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    int_0 = 1641
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    int_0 = 366
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    complex_0 = 3109.394 + 2052j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    str_0 = "j^+ww"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    str_0 = "-BoM\nAv`t_"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    str_0 = "[5TUm3pcWW6Pi\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    int_0 = -1143
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    complex_0 = 4310.8 - 2764.238j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    int_0 = 1392
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3859():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3860():
    bytes_0 = b"\x1a\x90\x11o\x06w\xc1_TKf9\xb4\xc19\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    str_0 = "S!Vf&@b"
    module_0.match(str_0, str_0)


def test_case_3862():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3863():
    bytes_0 = b"\xc9S\xe5\x18Q\xec\x8d\xcf"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    int_0 = -1504
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    bool_0 = False
    int_0 = 3079
    dict_0 = {bool_0: bool_0, bool_0: int_0}
    list_0 = [dict_0, bool_0, dict_0, bool_0]
    tuple_0 = (dict_0, int_0, list_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    str_0 = ""
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    bytes_0 = b"\xbe^\xaa\x7f\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    int_0 = -2805
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    str_0 = "|Ca4sR5:"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    complex_0 = 3017.38335 + 621.154546j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    complex_0 = -1466.974 + 1137.801236j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    str_0 = '4ye|3"Z\x0c+?'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    int_0 = 932
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    int_0 = 714
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    float_0 = -2004.2026
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    complex_0 = -3592.721 + 971.53525j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    str_0 = "?P^(C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    bool_0 = False
    bytes_0 = b"3\xc3-)(\xe0)]Y\\"
    tuple_0 = (bool_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_3880():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3881():
    bytes_0 = b"\xba\x86)q\x8a\xa7wU\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    float_0 = 2410.918194
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    float_0 = -2503.7638
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    bytes_0 = b"\xb7a\xcf\x8d}Mo\xcd\x84U\r\xe2M\r\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    int_0 = -1291
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    bytes_0 = b"Gt\xab\xb4\x833\xfe\xd2\xa7FU\xd6\r"
    float_0 = 107.573
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    bool_0 = True
    float_0 = 96.92
    set_0 = set()
    tuple_0 = (bool_0, float_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    complex_0 = -1026.0457 - 2487.664559j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    int_0 = 2756
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, bool_0)


def test_case_3892():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3893():
    bool_0 = True
    str_0 = "rs9`yg<"
    dict_0 = {bool_0: str_0}
    float_0 = 2171.56108
    tuple_0 = (dict_0, float_0, str_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    str_0 = "qL}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    bytes_0 = b"\xdec\xd4\xc0\xf9\xfah\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    bytes_0 = b"\xe4\xbc\xcb\x1f\xd8p>\xd9\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    bytes_0 = b"\xdb6\x81p\xb2\xa7\x96\x132+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    str_0 = "~)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    bytes_0 = b"\x89\xae0\x83\x07V\n\xb2\xd1\x84\x85\x19\x99K"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    int_0 = -1529
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    str_0 = "!\\=,GVz?>"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    bytes_0 = b"\xc3\xd31a\xd1\xba\xd4\xda=\x99\xe1\xe1\x97p"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    float_0 = -1057.0144
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    str_0 = ".tE)f\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    bytes_0 = b"|RP\xed\xf9\x10F\x17\xc6qj\x8eX"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    bytes_0 = b"|\xbf|C="
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    str_0 = "Iu?0fw\x0cJG{PE@d(\x0b=p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    bytes_0 = b":v\x9d\x19\xa2\xfc\xe0/\xc2\xd8"
    bool_0 = True
    str_0 = "&9HZgQHRQ7+U"
    tuple_0 = (bool_0, bool_0, str_0)
    list_0 = [bytes_0, tuple_0]
    bool_1 = True
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    int_0 = -1730
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    float_0 = -775.62727
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    str_0 = 'g;K\\S\r8"[g'
    tuple_0 = (str_0,)
    str_1 = "\x0cMkPB\x0b\rpf\t7dx&1"
    module_0.match(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    str_0 = "c\x0bS`^vCe*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    int_0 = 6579
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    str_0 = "\\1|+\n{I9p]B\n~|54@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    bytes_0 = b"\xa5\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    bytes_0 = b"\xe1\xa0\xb7\xc1\xc1(\x0f\x80'a\xf5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    bytes_0 = b"G\xb4\xd69\x82kC\xa5:\x9au"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    float_0 = -4591.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    int_0 = -2655
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    str_0 = "n\rSN[{!E/N@"
    module_0.match(str_0, str_0)


def test_case_3921():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3922():
    str_0 = 'Ccqe<g^f#"_>Mkt;``]'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    int_0 = -909
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    int_0 = -1127
    str_0 = "OK[&G1JSf{|:0W"
    set_0 = {int_0, int_0}
    tuple_0 = (str_0, set_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    float_0 = 1381.7169
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    str_0 = "/\tN|T\t>\\O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    str_0 = ""
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, str_0)


def test_case_3928():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3929():
    str_0 = "b z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    float_0 = 1556.74164
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "5M"
    list_1 = []
    tuple_0 = (list_0, str_0, list_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    str_0 = "7\nsihRU[X5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    complex_0 = 2384 - 1485.597649j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    str_0 = '<*g\r~TluvL\r"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    bytes_0 = b"\xa8M_\x80("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    none_type_0 = None
    str_0 = "]{%5h"
    str_1 = "B{et{e}\\Zf)-GiTjagj"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    int_0 = -2114
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    bool_0 = True
    int_0 = -4563
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    float_0 = 3347.0
    int_0 = 979
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    str_0 = "{<s"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    int_0 = 909
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    str_0 = "^/ b@`F0mY[9?cz^lli"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    int_0 = 584
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    bytes_0 = b"\xc1\xbe\xbd\x9e\xa5\xd3k\xf5\xb3C\xf6\xcc\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    str_0 = "\\c\r/U20-p'uoJne0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    str_0 = "fd^1iC4Dr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    int_0 = -1205
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    complex_0 = -3517.787349 - 31.44j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    str_0 = '@G}R=6@P?V~yBVq0" ('
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    str_0 = "|=Lds[9@~\rR$82W\x0cV"
    float_0 = -2416.00001
    tuple_0 = (str_0, float_0, str_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_0, bool_1: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    bytes_0 = b"\xe3\x1d\xb3>\xa1\x1d\xc5\xaa"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    bytes_0 = b"\x14m\x07|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    none_type_0 = None
    complex_0 = 9.09296 - 70.17447j
    set_0 = {none_type_0, none_type_0, complex_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    int_0 = 611
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    int_0 = 2349
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    str_0 = "<\rn+_Gs+~9@_p\rs1px"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    float_0 = -2024.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    bytes_0 = b'\xd50\xee#\x93\xd7\xbb\x89\xc6,\xb0A\x9c\x82g"\xefVO'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    float_0 = 967.266937
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    int_0 = -2990
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    complex_0 = 1720.59 + 782.6712j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    bytes_0 = b"\xf7\x86\xcag"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    str_0 = "r'A\t2'7wy0`p,|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"\xa8\x8f\x87\x14"
    tuple_0 = (list_0, bytes_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    bytes_0 = b"\xab\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    bool_0 = True
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    str_0 = "uLa?Fdqb`"
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    int_0 = -3996
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    complex_0 = -3577.308826 - 3085.52446j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    object_0 = module_1.object()
    bool_0 = False
    bytes_0 = b"[\xf4\x87"
    tuple_0 = (object_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    bytes_0 = b"E'\x08\x16\xffm"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    complex_0 = -1518.371 - 3448.014j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    bytes_0 = b"\xfd\x19\x7f\x14\x1e\x1e\xc9\x17\xd0H\x92\x84\x80"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3981():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3982():
    int_0 = 256
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    str_0 = "X\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    bytes_0 = b"i\xd6\xff\x86q\x05Om\x9cHS{;\xb2\xaf15guz"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    int_0 = 8112
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    str_0 = "4DQBU.\tNA"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    bytes_0 = b"\xf9\xa9\x07\xe9\x8c\xee\xbb\xeaE\xca\xa2\xcd\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    int_0 = 517
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    float_0 = 2259.78
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    bytes_0 = b"\x96\xd32O`\xca\xffM\x12\xb7\xafMA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    bytes_0 = b"\x9f|\xd8\x16\rY\x7f\x05\x16\x10\xe4\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    float_0 = 658.111
    list_0 = [float_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    complex_0 = -1757.85 + 558.572058j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    str_0 = 'z@m?"L)wPK"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    none_type_0 = None
    str_0 = "XU<5vvU-LAQ7F_ CM,\ni"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    float_0 = -1906.87898
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    str_0 = "0\n> *MxG0|I"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    bytes_0 = b"\r\r\x07\xbf\xde\x99\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    bytes_0 = b"\xf4"
    int_0 = -1139
    dict_0 = {bytes_0: int_0, int_0: int_0}
    tuple_0 = (bytes_0, int_0, dict_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    int_0 = 3218
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    bool_0 = False
    object_0 = module_1.object()
    set_0 = {bool_0, bool_0, bool_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    int_0 = 3222
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    str_0 = "<o6{H^#cux,rEV\\cbIF"
    list_0 = []
    tuple_0 = (str_0, list_0)
    module_0.match(tuple_0, tuple_0)


def test_case_4007():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4008():
    bytes_0 = b"\x80[\x93Cz|\xcc\x05\xc1\x8e\xb2\xbe\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    bool_0 = True
    str_0 = "EXf26$l&"
    list_0 = [bool_0, str_0, bool_0]
    list_1 = [list_0, bool_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    int_0 = 4134
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    bytes_0 = b"^\xcc\x18\xe6\xca\xde\x96\xc5\xde\xaf\xd6\x0cr\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    int_0 = -3281
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    str_0 = "@~S^'Qa']\x0c`4%ry."
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    bytes_0 = b"\xcf\x80\xc2b\n\xdbO\xd6\xc29\xf1^*"
    tuple_0 = (bytes_0,)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    bytes_0 = b"\xefU\xb4P\xca\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    none_type_0 = None
    complex_0 = -1626 - 1431.3209j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    str_0 = "(J:p#\x0co^h\x0c[|dTJK0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    complex_0 = -2825.45 + 2844j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    tuple_0 = (complex_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    float_0 = 2421.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    str_0 = "_xE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    str_0 = "W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    complex_0 = -2410.596 + 264.487j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    int_0 = -1039
    module_0.get_new_command(int_0, int_0)


def test_case_4024():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4025():
    bytes_0 = b"\xd1P'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    float_0 = -2530.0965
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    bytes_0 = b"N\xc0\xe4\xdd\x840\x93\x18]\xd5O\x92PeT"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    str_0 = "H[nS@l_uV*KV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    str_0 = "*qZ(r\tLA,$7n*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    object_0 = module_1.object()
    str_0 = "&U\\RBkwGqa$t4Kv29K"
    dict_0 = {str_0: str_0, str_0: object_0, str_0: str_0, str_0: object_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    complex_0 = -316.54621 + 860.744j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    int_0 = 1938
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    float_0 = -3561.34
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    float_0 = 2899.31
    none_type_0 = None
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    none_type_0 = None
    str_0 = ""
    str_1 = "b{"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    complex_0 = -105 - 874.088j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    float_0 = -196.111
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    bytes_0 = b"^\xe3\xd7\xaa\xcc\xb6\xd5\xd2\xa5\xb1\xfa"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    float_0 = 4194.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    object_0 = module_1.object()
    str_0 = '8OK\n97gnG)`7s:"d'
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    int_0 = 2022
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    none_type_0 = None
    str_0 = "86H#J`VxX"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    complex_0 = 2581.13015 - 2433.203j
    module_0.match(complex_0, complex_0)


def test_case_4046():
    pass


def test_case_4047():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4048():
    int_0 = -1024
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bool_1 = True
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    float_0 = -722.43
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    bytes_0 = b"\xc8\x823\xcda"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    complex_0 = 107.378 + 744.621j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_4054():
    pass


def test_case_4055():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4056():
    str_0 = "+$\tWtq*nUu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    float_0 = 3040.57
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    float_0 = 1264.1395
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    bool_0 = True
    bytes_0 = b"P62u\x086"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    int_0 = -962
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    float_0 = 565.175122
    module_0.get_new_command(float_0, float_0)


def test_case_4064():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4065():
    int_0 = -2281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    complex_0 = -1069.2694 - 129.28j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    int_0 = 2353
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    int_0 = -1352
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    bytes_0 = b"d2\xc6\xe2\x8d\x87\xbb\x8f\x18\xbd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    complex_0 = -1026.572457 + 664.09616j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    str_0 = "S%oah@Zl'$trL\"\x0c}{e*K"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    bytes_0 = b"\xfdq\xe8|\x9b\xdf\xf2t\x94B'C\x04\xf2\xc1TTX"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    str_0 = "v5L~ff&;>G/*,~[ZbDcO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    str_0 = "@bsm"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4076():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4077():
    int_0 = 49
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    int_0 = 2509
    list_0 = [int_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    bytes_0 = b"=,\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    bytes_0 = b",:d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    str_0 = "(=Pk\n]V(K "
    module_0.get_new_command(str_0, str_0)


def test_case_4083():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4084():
    bytes_0 = b"\x80YP\xf5\x03\xfby"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    int_0 = 1254
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    int_0 = -123
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    bytes_0 = b"\xbdx\xb5kjVQ\x1b\xe1\xa1\xf8\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    str_0 = "cV\x0co"
    str_1 = ""
    str_2 = "[\tPuLBMM\n~@k2@46j"
    int_0 = 1456
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    int_0 = 2587
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    int_0 = 35
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    bytes_0 = b"\x18\xc1F\xf8\xf3\xee\x08\x9d\xcbL\xe3CB"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    bytes_0 = b"\x91\xe8\xfdT\x8e\x06Su\t\x1f,\xef\x91\xfc8\x8fv]"
    bytes_1 = b"\xab9\x0bO\x94\x9a\xcd\xb6h\x02\xbcs}P"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    str_0 = "/:|U6[/<[o(kMi0"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    bytes_0 = b"\xeb\xa4i\x14~,\xa1\x88R\xf4\xc3\xb6F\xe9\xfa"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    str_0 = "Di&'[L \t^P\t0L}kDJl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    bytes_0 = b"\x00\xa3ue\xe9\x1ey\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    bytes_0 = b"~3\xddd\xcf\xe34"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    int_0 = 1854
    module_0.get_new_command(int_0, int_0)


def test_case_4101():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4102():
    complex_0 = -681 - 5633.603935j
    set_0 = {complex_0}
    str_0 = "/d9]u\tY"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    list_0 = []
    int_0 = -1999
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    int_0 = -1067
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    int_0 = 848
    module_0.get_new_command(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    bytes_0 = b"\x16Y\xe1\xf6Fk\x07s-$\xb3\xb5\x1eD\xb0v*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    complex_0 = -892 + 687.248j
    int_0 = 2629
    module_0.get_new_command(complex_0, int_0)


def test_case_4109():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4110():
    object_0 = module_1.object()
    bytes_0 = b"\xcf\xd33.\xea\xc0\xe68\xf7${Y\x877}"
    float_0 = 19.0
    list_0 = [object_0, bytes_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    str_0 = "|%\x0c+!5n"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = True
    tuple_0 = (object_0, bool_0, bool_0)
    set_0 = {tuple_0, bool_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    int_0 = -1616
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    complex_0 = -1366.101889 + 3128.13153j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    float_0 = 2129.12369
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    str_0 = "sZ"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    bool_0 = True
    bytes_0 = b"\x0eP\xb6\xfap"
    bytes_1 = b"L\xab"
    tuple_0 = (bool_0, bytes_0, bool_0, bytes_1)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    float_0 = 2408.05
    bytes_0 = b"K\x82\x06\x90i\x940"
    set_0 = {float_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    str_0 = '|2vY$#[F0 \x0cC&9P"0&'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_4121():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4122():
    int_0 = -39
    bool_0 = False
    tuple_0 = (int_0, bool_0, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    int_0 = -2439
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    int_0 = -115
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    float_0 = -629.921
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    str_0 = "H8\x0c_qWOlBuogZ"
    int_0 = -64
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    bytes_0 = b"?E\xd1\xca[#\xc5\xefs\x88\x13\xad\xef\x80\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    str_0 = "hbU/dM$>k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    float_0 = -2343.3778
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    str_0 = "4Ak\rjWM\x0c`X-oP>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    float_0 = -1770.51653
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    int_0 = -799
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    int_0 = -2198
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    int_0 = 1066
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    int_0 = 151
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = False
    tuple_0 = (set_0, bool_0, bool_1, set_0)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    str_0 = "$<VMWA{%Gy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    int_0 = 142
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    int_0 = -78
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_4142():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4143():
    float_0 = 2206.299396
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    bytes_0 = b"\xfe\x96\xf8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    bytes_0 = b"\xa8\xae\xe0\x15\xc1\xc64"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    float_0 = 141.26
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    bytes_0 = b"\x8f\n\xb6\x99*\xa2pV"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    str_0 = "\n&RZWTs3=gvhiRD"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    complex_0 = 621.872 - 3951.82j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    bool_0 = True
    bytes_0 = b"b7\x85\r#\x8a\x048"
    str_0 = "N"
    tuple_0 = (bool_0, bytes_0, bytes_0, str_0)
    object_0 = module_1.object()
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    str_0 = "3\\(Ts"
    float_0 = -438.24
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    dict_0 = {}
    str_0 = ".'b#\\f@4R"
    bytes_0 = b"\xd2\x95\tT\xfbSC\xa6\x11\x18n\x9e\x95P"
    tuple_0 = (dict_0, str_0, bytes_0, dict_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    float_0 = -1942.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    str_0 = "Ns\x0b13t{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    float_0 = -1331.155
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    float_0 = -619.3
    module_0.match(float_0, float_0)


def test_case_4158():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4159():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    str_0 = 'VOk=0wefm"%sS\x0cUS6!\r('
    int_0 = 3142
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    str_0 = "\x0b@l<b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    float_0 = 2476.7
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = []
    tuple_0 = (dict_0, list_0, float_0)
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (object_0, object_0, bool_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    int_0 = 792
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    bytes_0 = b"P\xc6rJ\xfd\xa8\x18^\x0b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    str_0 = "3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    int_0 = -2180
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    int_0 = -1573
    set_0 = {int_0, int_0}
    dict_0 = {int_0: int_0, int_0: set_0}
    list_0 = [dict_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    str_0 = 'VWoG=!u" I}&#~'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    str_0 = "v~pG;){jh\rY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    int_0 = -1822
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    bytes_0 = b"m/\xe4\xf2n\n\xcecM"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    float_0 = 607.2
    module_0.get_new_command(float_0, float_0)


def test_case_4177():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4178():
    int_0 = -1126
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    str_0 = "X"
    str_1 = ""
    str_2 = "VvkVy"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4181():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4182():
    bytes_0 = b"\x8a\xfb\xf9\n\xd4\x8c6G"
    bytes_1 = b"\xb4P\xba_\xd4I\xdd\xd5\xb6\x9f\xe1o\xd0\x99\xeej"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_1, bool_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    bytes_0 = b"\xa9\xf0d\xcacS\xfd\x1d\xed\x92\x87\xab\x9eM\xdc\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    bytes_0 = b"\xea\xb8R\xf3\x00\xa6\x9e \xcf\xa3\xee\x9e\x89\x9f\x8e*\x01\xb6\x15"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    complex_0 = 393.1983 - 1368.988522j
    set_0 = {complex_0, complex_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    complex_0 = -3050.7995 + 414.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    str_0 = "1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    str_0 = "]xPlpx"
    tuple_0 = ()
    bytes_0 = b";\\\rx\x15\xf8\x93\xdbR\\\x00?8"
    set_0 = {tuple_0, tuple_0, str_0, tuple_0}
    tuple_1 = (tuple_0, bytes_0, set_0, str_0)
    tuple_2 = (str_0, tuple_1)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    float_0 = -4626.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    bytes_0 = b"\xfd=\x81\xeeT\x1a\xb4\x15.\x04O\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4192():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4193():
    int_0 = -1360
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    bytes_0 = b"\x87i"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    bytes_0 = b"5"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    str_0 = "m.W+z$W"
    tuple_0 = (str_0, str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    int_0 = 2103
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_4202():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4203():
    str_0 = "F,L8N"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    int_0 = 8
    module_0.get_new_command(int_0, int_0)


def test_case_4206():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4207():
    int_0 = -2479
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    float_0 = 1229.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    str_0 = "C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    str_0 = '"e:+ZTJ gU@Bzc?'
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    bytes_0 = b"\x80\xd50\xa8\xa2\xb5x\x8d\xa6~\xa0\x1b-\xbf\xfa\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    bytes_0 = b"\xea\xce"
    complex_0 = -2652.515392 - 208.74982j
    dict_0 = {
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: complex_0,
        complex_0: bytes_0,
    }
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    complex_0 = -3172.69993 - 2497j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    bytes_0 = b"*'\xda-\xa62\x95\xff_\xac>^b![\xd8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    float_0 = -1814.257115
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    complex_0 = -2397 + 1872.91j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    float_0 = -2621.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    bool_0 = True
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    float_0 = 2158.948986
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    int_0 = -2560
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    float_0 = -491.967
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    complex_0 = -41.032574 - 911.57j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    float_0 = -7.96
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    complex_0 = 3531.904166 + 837.83j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    str_0 = "`?S}]*:_hR\x0b0VHX"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    none_type_0 = None
    str_0 = "O\nJf>#*F~pQF ^"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    complex_0 = -1790.142 + 1720.374955j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    str_0 = " `+E}|vAy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    str_0 = "2Wli)7?e]Y~G"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    int_0 = 434
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    bytes_0 = b"b\x08=\xd3\xba\x14\x9a\x99\t \xc1\xdaN"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    str_0 = "\rFktWTO\x0cUh\n"
    list_0 = [str_0, str_0, str_0]
    complex_0 = 494.21 + 1896j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    float_0 = -424.979
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    bytes_0 = b"+\x13\xe82\x19\xee\xbbJfx\x16\xe7\x18\xb3\xa1,"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    bytes_0 = b"\xd7f\xb4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    int_0 = 348
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    set_0 = set()
    list_0 = [set_0]
    tuple_0 = (set_0, list_0, set_0, list_0)
    module_0.match(tuple_0, list_0)


def test_case_4244():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4245():
    bytes_0 = b"=\xb7\xa9\xf4\xcac`\xf6\xe8\xc2\xcb\xc7\x14\xe2\xca\xc9)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    str_0 = ""
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    bytes_0 = b"\xf5\xfd\xf1\xf3p\x06\x08\xd7\xa3"
    module_0.match(bytes_0, bytes_0)


def test_case_4249():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4250():
    str_0 = "#]}_+wJ6AD6):TNf%xb"
    str_1 = "\\8\\H})"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    str_0 = "H*KW4x"
    set_0 = {str_0, str_0}
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    int_0 = -2564
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    str_0 = '1m/"|Qnan~=7A;#@~Vj'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_4255():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4256():
    bytes_0 = b"\xd0p\x91\x99\xe6\x07\n\xa7O\xe4\x06G\xda\xdfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    str_0 = ":(|\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    int_0 = -924
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    int_0 = 831
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    float_0 = -1141.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    int_0 = 1722
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    bytes_0 = b"\xd9\xb4\xa7\xf3\xa6\xc2L\xffz\x17\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    str_0 = "jC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    float_0 = -95.946128
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    bytes_0 = b"\x90I/\xe6\x1f\x1bQM["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    int_0 = -503
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    bool_0 = False
    list_0 = []
    object_0 = module_1.object(*list_0)
    dict_0 = {bool_0: bool_0, object_0: list_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    int_0 = 1499
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    float_0 = 1437.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    float_0 = -3604.4
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    int_0 = -721
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    float_0 = -1314.6
    tuple_0 = (float_0,)
    dict_0 = {tuple_0: tuple_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, bool_1)


def test_case_4278():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


def test_case_4279():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4280():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    float_0 = 1121.05837
    float_1 = -1183.982
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    str_0 = "kotL}x,fT#kI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    int_0 = -2948
    set_0 = {int_0}
    list_0 = [set_0, int_0, set_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    complex_0 = 3106.015622 - 1053j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    bytes_0 = b'\x9d\xb7e\xb72^"!r\xae'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bytes_0 = b"\x8d#\x9f\x9a\xc8\xc9\xf9\xff8\xa0\xe9\x18\x1e\xb3ba-\xcf\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    bytes_0 = b"\xb6]\x14\xdf\xf5\x14S\xbf\x8f\xbeO*\xc2@q\x15\xd1\x87ki"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    bytes_0 = b"\xbc\x93\x84%\x91\xe7G\xe5\xe8k\x8bR\xa4^\x80J\xbf\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    complex_0 = -335.5 - 1504j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    bytes_0 = b"\x9a\xa1\x15"
    tuple_0 = ()
    dict_0 = {bytes_0: tuple_0, bytes_0: tuple_0}
    tuple_1 = (bytes_0, tuple_0, dict_0)
    list_0 = [tuple_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    bool_0 = True
    str_0 = "61a:#_!/F0._4iwP"
    tuple_0 = (bool_0, str_0, bool_0)
    complex_0 = -1171.64 - 3827.98j
    bool_1 = False
    tuple_1 = (complex_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    bytes_0 = b"\xa30@\xd2_\xd2![\x95\xaa\xf0Aq\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    int_0 = 1334
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    str_0 = "2 |"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    bytes_0 = b"\xe1\x90\x13\xafG\xf0\xcd\x10\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    bytes_0 = b"\xf09\x8c\xbd\xa765"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    str_0 = "7"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    bytes_0 = b"}\x18\xfcC6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    int_0 = 1795
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    int_0 = 851
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    int_0 = -3128
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    int_0 = -1719
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    bytes_0 = b"\xe5?\x97\xde`5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    int_0 = -614
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    int_0 = 132
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    float_0 = -373.857
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    int_0 = -445
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    set_0 = set()
    tuple_0 = (set_0,)
    str_0 = "j\\mJ`~FvI4EU%U\n#o*\n"
    tuple_1 = (tuple_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    bytes_0 = b"\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    str_0 = "."
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    bool_0 = True
    tuple_0 = (bool_0,)
    float_0 = -2665.0
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    float_0 = -827.234692
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, dict_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    list_1 = [tuple_0, bool_0, tuple_0, float_0]
    module_0.match(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    bytes_0 = b"(\x9f\x8c\x82\\\xd9\x02IQ3\xdb\xa1\xf47"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    int_0 = -354
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    bytes_0 = b'?"\xc03T5\xaay\xbc\xb0k\x19{(m\x1bB'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    int_0 = 2604
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    str_0 = '\n2k6D"'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    float_0 = 2012.2313
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    str_0 = "<2!Pm~}\\"
    list_0 = [str_0, str_0, str_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0, list_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    int_0 = -981
    module_0.get_new_command(int_0, int_0)


def test_case_4327():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4328():
    bytes_0 = b"\x82\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    float_0 = -2283.0199
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    bytes_0 = b"m6\xd2\x14\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    int_0 = 1489
    module_0.get_new_command(int_0, int_0)


def test_case_4332():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4333():
    int_0 = 2732
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    bytes_0 = b"\xcc\x83\x17\xc8\x8d+\xb0\xcf5L"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4335():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4336():
    str_0 = "XH<yW[&H[rt8\x0ct\x0c?}@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    int_0 = 2850
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    str_0 = ',bgDS];"SD5e$4@Cj0'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    bytes_0 = b"2,\xb2\xfc\x0bt"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    int_0 = 1764
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    int_0 = -1311
    int_1 = -1420
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    bool_0 = False
    bytes_0 = b"\xa8\x05\x1f\x07c\xc0\x92\xf0\xd3A\xf0\x18\x80\xa45"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    str_0 = '{&~\n")\\:(?x\\\x0bw5\\V'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    int_0 = 599
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    int_0 = -3457
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    float_0 = 599.928
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    str_0 = ";8OErU&O`p,((pk"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    float_0 = -2512.619
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    str_0 = "}BG%e`)JN#D}{*Y\x0c"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    str_0 = "Ix_m'}Zu$<N)~"
    bool_0 = True
    str_1 = ")\nrsKj?E;maJre}&d&Z/"
    dict_0 = {str_0: bool_0, str_1: str_0}
    module_1.object(**dict_0)


def test_case_4353():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4354():
    int_0 = -3438
    complex_0 = -1708.106483 + 3633j
    module_0.get_new_command(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    bytes_0 = b"?f\x03\xc0R\x05\xcaB%\x8f9\x00\xf0\x15\xf6\xbaT\x86\xa1"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    none_type_0 = None
    int_0 = -2225
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    float_0 = 619.56809
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    int_0 = 553
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    bytes_0 = b"\xd9\xb4\xb7\x01\x9e \xa2ge\xed\xe1\x00|L\xf4\xedF\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    bytes_0 = b"\xe7}\x8f&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    float_0 = 850.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    int_0 = 1605
    bytes_0 = b"itBv\xb4\x04\xa7\xfc\x91\xfb"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    float_0 = 1602.3
    list_0 = []
    tuple_0 = (float_0, list_0, list_0, float_0)
    dict_0 = {}
    tuple_1 = (tuple_0, dict_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


def test_case_4364():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4365():
    str_0 = ")mxQg1u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    str_0 = "P\x0b&opb>[ @m'REEW7"
    int_0 = -1430
    tuple_0 = (str_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    str_0 = "6.14~\nn7'r"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    float_0 = 1076.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    str_0 = "#j}oIh6xC=P_M@_xvm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    int_0 = -3573
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    int_0 = 3969
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    int_0 = 885
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    str_0 = "i1_S3ahW#>:,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    str_0 = "F{\\JY%IK4\tep#5ZS-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    bytes_0 = b'\xea\x1e\xca\x0b\xe2\xe8\xde\xa4Z\xba5U\xa7\x9b\x18\xab"t\x9a'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    bool_0 = True
    str_0 = "T^Hj\tID;m(H[ "
    list_0 = [bool_0, bool_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    bytes_0 = b"\xc8\x1e\xcb\xf0\x0e9\xe1\xd4aV\xe7\xe6\x13\x98@"
    complex_0 = -3271.9319 - 380.09623j
    set_0 = {bytes_0, complex_0, bytes_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_4380():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4381():
    int_0 = 2585
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    int_0 = 2690
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    object_0 = module_1.object()
    str_0 = "fo4.\\R0Bc}/"
    tuple_0 = (object_0, str_0, str_0)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    int_0 = 869
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    int_0 = -684
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    bytes_0 = b"J@\xe9S\x0c\xd7\xe2\x8f\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    str_0 = ']fC/h"Chpu A?\x0b\thN:U'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


def test_case_4390():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4391():
    bytes_0 = b"Q\xc0*X\x14\xd7\xd2\xb4+\x9b\xbde\xfaY&\xfb\xe9\xb5\xbd"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_4393():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4394():
    float_0 = 3481.545
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    bytes_0 = b"\xa1\xefmvfii>\x91\xa1f\xb9\xe1"
    bool_0 = False
    list_0 = [bool_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    bytes_0 = b"\xcc\x8dm"
    set_0 = {bytes_0, bytes_0}
    int_0 = -112
    tuple_0 = (bytes_0, set_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    int_0 = -4368
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    int_0 = -1168
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    str_0 = 'r,:!^K{z\n`mq/i)!"L'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    int_0 = -1224
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    float_0 = 2730.010557
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    float_0 = -2338.22
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    str_0 = "]:nFY\rL)=Q\n&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    str_0 = "\r)*OY*QW"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    float_0 = 2718.0922
    module_0.get_new_command(float_0, float_0)


def test_case_4406():
    pass


def test_case_4407():
    pass


def test_case_4408():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4409():
    float_0 = -474.052
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    float_0 = 1630.3655
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    int_0 = -528
    list_0 = []
    bytes_0 = b"\xef"
    float_0 = -104.71012
    tuple_0 = (int_0, list_0, bytes_0, float_0)
    module_0.match(tuple_0, int_0)


def test_case_4412():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4413():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_4415():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4416():
    int_0 = 1572
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    str_0 = "3f&8;IDB&*=&,~cMd-"
    list_0 = [str_0, str_0]
    int_0 = -4277
    tuple_0 = (list_0, int_0, list_0)
    module_0.match(tuple_0, str_0)


def test_case_4420():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4421():
    str_0 = "6|szTzGAf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    str_0 = "D\x0c<|NB0`ec0.Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    set_0 = set()
    bytes_0 = b"\xcdq"
    tuple_0 = (set_0, bytes_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    bytes_0 = b"Fh\xf3b"
    set_0 = {bytes_0, bytes_0}
    int_0 = -5044
    bool_0 = False
    tuple_0 = (bytes_0, set_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    bytes_0 = b'1R;\x90\x9e\x8a\xc4N\x8f\xfd\xde\xc8k\x9f\xe4\xd8"\xbf'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    int_0 = -467
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    str_0 = "5.BrGCt07,&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    bytes_0 = b"Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    bool_0 = True
    int_0 = 493
    tuple_0 = (bool_0, int_0)
    set_0 = {tuple_0, bool_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    str_0 = ">v5XKuut"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    int_0 = 3415
    str_0 = "gg.1~My"
    tuple_0 = (str_0,)
    tuple_1 = (int_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    none_type_0 = None
    bool_0 = False
    bytes_0 = b""
    tuple_0 = (bool_0, bool_0, bool_0, bytes_0)
    tuple_1 = (tuple_0, bool_0, bool_0)
    module_0.get_new_command(none_type_0, tuple_1)


def test_case_4435():
    pass


def test_case_4436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4437():
    float_0 = 1771.09
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    str_0 = "|t!vABv\ryDN5,q>t7"
    tuple_0 = (str_0,)
    int_0 = 259
    tuple_1 = (tuple_0, str_0, tuple_0, int_0)
    module_0.match(tuple_1, tuple_1)


def test_case_4439():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4440():
    int_0 = -4016
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    bytes_0 = b"\xef\x1d;\x94p\x14\xfd\x02[\xa37s"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    bool_0 = False
    int_0 = 830
    tuple_0 = (bool_0, bool_0, int_0)
    module_0.match(tuple_0, int_0)


def test_case_4443():
    pass


def test_case_4444():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4445():
    int_0 = -1647
    bool_0 = True
    dict_0 = {int_0: int_0, bool_0: int_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    str_0 = "\rY++6QT"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    bytes_0 = b"\x9e\x11\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    complex_0 = -1735 + 1249.343838j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    str_0 = "b\nMG^23].sQ\tmm\n'<\rq"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4452():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4453():
    int_0 = -4167
    list_0 = [int_0, int_0, int_0, int_0]
    bool_0 = False
    tuple_0 = (list_0,)
    tuple_1 = (list_0, bool_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    bytes_0 = b"\xba#?Ci\xcf\xca\xb7i^\x85\xf1\xb6DU\xe4\x91.\x9f\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    int_0 = -2400
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    complex_0 = 728.78313 + 1165.710052j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    float_0 = -1153.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    int_0 = -931
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    float_0 = 51.986343
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    bool_0 = False
    bytes_0 = b""
    float_0 = 433.0336
    tuple_0 = (bool_0, bytes_0, float_0)
    list_0 = [bool_0, float_0]
    tuple_1 = (tuple_0, list_0)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    module_1.object(*list_0)


def test_case_4462():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4463():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    bool_0 = True
    complex_0 = -349.28356 - 2519.83j
    list_0 = [bool_0, bool_0, bool_0, complex_0]
    list_1 = [list_0, list_0]
    str_0 = ""
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    int_0 = 1025
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {}
    tuple_0 = (bool_0, set_0, dict_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    complex_0 = 1150.218558 + 1815j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    str_0 = "fV=ltA#@C9auo_DRN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    int_0 = -893
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    str_0 = "qxe$*NA\tG\r2"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    str_0 = "'Y"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    str_0 = "1<iCLt%*xim{}(?N."
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    int_0 = 1216
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    bytes_0 = b"\xf7\xed\xa1\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    int_0 = -767
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    int_0 = -2896
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    int_0 = -1397
    tuple_0 = ()
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    bytes_0 = b"\xf5\x02\xa8\x8d\xbf\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    bytes_0 = b"\x84\xbc\x99;]~)\xc1I|}:\xdfS\xa4\x88%Y"
    bool_0 = False
    complex_0 = -453.3 + 165.008377j
    tuple_0 = (complex_0, bool_0, bool_0)
    str_0 = "T&okM\x0bve-`17"
    tuple_1 = (bytes_0, bool_0, tuple_0, str_0)
    module_0.match(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    int_0 = -2435
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    bytes_0 = b"\x93P\xa0\xee\xc3k"
    complex_0 = 2553.033141 - 1611.1928j
    module_0.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    complex_0 = 534.64823 + 689.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    float_0 = 1109.271
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    int_0 = 543
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    float_0 = -890.4661
    str_0 = "^+ay`Y<^["
    str_1 = "tsS\ngy'Fh}4d"
    tuple_0 = (str_0, str_1)
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    float_0 = -1733.05
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


def test_case_4489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4490():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bytes_0 = b"\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    int_0 = -3973
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


def test_case_4494():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4495():
    int_0 = -192
    complex_0 = 563.5 - 1525.6j
    tuple_0 = (int_0, complex_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    int_0 = 1760
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    int_0 = -1262
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    bytes_0 = b"]M\xaf\xb0\x9f\xc3ms\x9f\xe2%\xf4\xc3\x83n\x87\x06\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    int_0 = 33
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    str_0 = "D}8s(\r8=~t.rTIix8U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    int_0 = -5544
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    float_0 = -22.2
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    bytes_0 = b"C\x12\x16\x88a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    bytes_0 = b"\x85\xfe5|\x8c\x8f\xab"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4508():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4509():
    str_0 = "Ps7\rRaA."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    bytes_0 = b"\xd1\xff\xfc\xa0%K\x87%iK}\x12;\xd7\x14\xf0T\xd1\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    str_0 = "0' 2iZi^COe\x0b"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    bytes_0 = b'vI\x14"\x9c\x906\x8c\xd5\xae\xd0'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    float_0 = -1114.11
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    float_0 = 15.88
    complex_0 = 3898.14 - 144.925j
    str_0 = '#.}a@w9f~7c"|u)(^'
    dict_0 = {float_0: float_0, complex_0: float_0, str_0: complex_0, str_0: complex_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    float_0 = 273.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    str_0 = "hJZmG9%QyhtG\x0c'$ez5|4"
    str_1 = "0B"
    str_2 = "3.MSP!L-1"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    bytes_0 = b"\xb3\x15\x1dx\xa1!\xf4\xb0\x17\xdf_\xf2\x0c\xb8\xea\xe3\xc5K"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    str_0 = "6m*c~-\r5zYkJ{zdZ7n "
    str_1 = "CQ"
    module_0.match(str_0, str_1)


def test_case_4521():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4522():
    bool_0 = True
    int_0 = -1366
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    str_0 = " l/#H{7\x0c3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    object_0 = module_1.object()
    str_0 = "5__\x0bfp\x0bqdb,"
    list_0 = [object_0, object_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    bytes_0 = b'\xde3\x80"\x01\xeaw\x8d\x91\rY\xbf\xdfs'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    int_0 = -1714
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    int_0 = 2270
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    str_0 = "~)boH\rBl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_1, bool_1: bool_1, bool_1: bool_1, bool_1: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    bytes_0 = b"_e"
    list_0 = [bytes_0, bytes_0]
    dict_0 = {}
    str_0 = ".q$f"
    tuple_0 = (list_0, dict_0, str_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    complex_0 = 3658.6 - 2048.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    int_0 = 342
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    int_0 = -1830
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    str_0 = ":JZ+n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    bytes_0 = b"\xbf\xec\xb2\xa8\x0c\xd9\xe4\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    bytes_0 = b"\x02\xdc\x9e\x80#\xfd\xe7\x14k`\xb1\xd2\x81"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    bytes_0 = b"\x06\xdcW\xe2\xd6mt\x96\xde\xa9*C\xe2c\xbf\x8c\x12\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    int_0 = -3306
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    tuple_0 = ()
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    bytes_0 = b">\x8e\xc0\xc6\xb7(U"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    int_0 = 819
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    float_0 = 556.2365
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_4546():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4547():
    bytes_0 = b"w\xdd}v\xb3\xa4&o\xd0u\xdf\x99$\x8e\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    str_0 = "+:\\` Rq"
    str_1 = "Up\\qbJH=ielx\\2\nes?\nt"
    tuple_0 = (str_0, str_0, str_1, str_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    str_0 = 'Yai_z4!c0O"r6`:]'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    bytes_0 = b"\\<\xd8C\x96\x01u\x9fIRNK\xc3!\xf9m~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    str_0 = "rlM|a4pCll\nHB"
    str_1 = "\r:"
    dict_0 = {str_0: str_0, str_0: str_1, str_1: str_0}
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    complex_0 = 3287.799 + 72j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    bytes_0 = b"+h\xd3\x93_\x81\xbe\xb5\x80j\xf0\xb1["
    tuple_0 = ()
    set_0 = set()
    bool_0 = False
    tuple_1 = (bytes_0, tuple_0, set_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    int_0 = 357
    module_0.match(int_0, int_0)


def test_case_4556():
    pass


def test_case_4557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4558():
    bytes_0 = b"\x82\x94\xee\x9f\xe5\x11$[\x9aR\xec\x8e\xf1\xa1\x18\xcf\x1bk\x8fD"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    int_0 = -14
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    str_0 = "{AQvtcGsQv`z$bK\r_6WW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    int_0 = -3832
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    str_0 = "0;dWo=j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    bytes_0 = b"\xc9\xd8`\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    str_0 = " ;n|\rs)^9[3\\UrL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    bytes_0 = b"\x8f\x88Hv@\x1c\x0c\xa8}\xd1\xf5\x87JWC\x9e\xc7\xee-\xa4"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_4567():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4568():
    str_0 = "&+=Rhkqd\x0c5j\nKD')7iO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    int_0 = 439
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    float_0 = -636.67705
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    str_0 = "]Xsu0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    bytes_0 = b"}0\xe4\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


def test_case_4576():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4577():
    str_0 = "!k?g~=["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    float_0 = 1275.146
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    str_0 = "D%"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    complex_0 = -2595.7352 - 2984.075676j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    complex_0 = 593.2704 - 3429.23093j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    bytes_0 = b"\x8b"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    float_0 = 768.69
    int_0 = 1516
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    complex_0 = 1200 - 2606.005j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    bytes_0 = b"\xdd\xdc5\xfb\xb9\xad \xa5\x051\xd5O!9"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4589():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4590():
    none_type_0 = None
    str_0 = "xdVrq\r!R"
    set_0 = {none_type_0, none_type_0}
    str_1 = "LsRh\t%&pw"
    str_2 = "A%aVt-n]*q=Z0{\tZO"
    dict_0 = {str_0: set_0, str_1: none_type_0, str_2: str_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    int_0 = -649
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    str_0 = "%8E\x0cfXtHNyz$:&at"
    str_1 = "NT,Lc\"dc'"
    tuple_0 = (str_0, str_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    float_0 = -5275.302243
    tuple_0 = (float_0,)
    dict_0 = {tuple_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    bytes_0 = b"@\xa3vh\x9e\xba\xdb|\tk\x01U0\\\xd7\x1e8^\xbb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_4596():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4597():
    str_0 = "@\t[,|"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    int_0 = -257
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    tuple_1 = (int_0, tuple_0, set_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    int_0 = 537
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    bytes_0 = b"F\xa6\x1b\xe4!\xa6\xc6\x8c\xc1\xb1\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    int_0 = 2903
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    float_0 = 2055.75
    int_0 = -4701
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    str_0 = "fQKM7f:@v{@'<G0NUa="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    int_0 = -1436
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    int_0 = -1011
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    str_0 = ":>?[-/a!1)7NF(zi^f#="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    bytes_0 = b"\xa6"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


def test_case_4611():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4612():
    str_0 = ':GkgP")D}\x0b\x0b>'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    str_0 = "c4df8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    bytes_0 = b"n\xad\xfa\xf7\xc4t\xb9\xaa9'P\xaa,\xb9\x9e\x1d\x886\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    bytes_0 = b"\xb0\x95\ra\x91\xc3~\xba\xae].\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    int_0 = 460
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    complex_0 = -2383.087405 - 1760.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    complex_0 = 1407.8469 + 350.89j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    complex_0 = -3169.07 + 2404.1j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    bytes_0 = b'\xf1Z\xd8m.q\xe6\xe9"\x0eA\x96\xdc\xb1'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    float_0 = -15.85
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    bytes_0 = b'6\xfd"\xaf\xcf\xe0H'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    float_0 = 1267.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = True
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    bytes_0 = b"\xdf\xda\x9a\xe36jK\xc5\x9d\x06gVw\xc2\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    str_0 = "Sj.Z9lCp/A7cE~sY7w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    float_0 = -1208.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    int_0 = 2049
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    str_0 = "zhCaQKYuK=i\x0bC"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    int_0 = -1317
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    str_0 = "5`B3:[\r0k\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    str_0 = "u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    int_0 = -2188
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    complex_0 = -1140.774659 - 1040j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    float_0 = 2731.674
    str_0 = "u#}SKdAGt70\x0c&iMxoZ`"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    float_0 = -4422.913
    tuple_0 = (bool_0, set_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    float_0 = 2154.33094
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    str_0 = "-1]9j-R"
    bool_0 = True
    list_0 = [str_0, bool_0]
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: list_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    str_0 = "*]z7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    float_0 = -717.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    int_0 = 212
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    bytes_0 = b"7Q\xe5#\x98h>+u\xf84\xf7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    bytes_0 = b"Hiq\xa3\xcc\xaf\xcf|\x97H\xf4\x1d=\x16!-"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0]
    str_0 = "9,:T\nR%9LF~CM_"
    list_1 = [list_0, set_0, str_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    int_0 = -2535
    module_0.get_new_command(int_0, int_0)


def test_case_4652():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4653():
    int_0 = -967
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    bytes_0 = b"C\x0b\xbdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    bool_1 = False
    tuple_1 = (tuple_0, bool_1, bool_0)
    module_0.get_new_command(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    complex_0 = 1437.08195 - 1896.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    bytes_0 = b"~\xb9P\xb7\xfb\\"
    list_0 = [bytes_0]
    str_0 = "hA7Tr8Q7PSD"
    str_1 = "-6dc"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    bytes_0 = b"z\x882]\x07+;#\xc7\xaa\x18\x81\x9c\xd9\x12\xd7\xb5T"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    float_0 = 1854.024449
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    int_0 = -3477
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    str_0 = "eLRgpi)\r=G?JL\x0c\t{!"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    float_0 = 1252.7095
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    int_0 = 911
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    str_0 = '|("'
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_0}
    str_0 = "])f't${<@"
    tuple_0 = (dict_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    complex_0 = 270.477 - 2221.7216j
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    bytes_0 = b"\xcak\x15\x99r\xf3\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    str_0 = "j)<:1!;l2"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, str_0, tuple_0, tuple_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    float_0 = 1224.757123
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    int_0 = 420
    module_0.get_new_command(int_0, int_0)


def test_case_4674():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4675():
    int_0 = -6208
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    float_0 = 1052.07585
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    str_0 = "o<yM-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    int_0 = 2202
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    int_0 = -622
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    bytes_0 = b"\x82"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    str_0 = "O]y9B3<O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    float_0 = -1841.0
    bool_0 = False
    list_0 = [float_0]
    tuple_0 = (float_0, float_0, bool_0, list_0)
    list_1 = [tuple_0, bool_0]
    list_2 = [list_1]
    module_0.match(list_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    bytes_0 = b"\xa8\x07\xe8s\x1d\x88_\xa25"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    int_0 = -237
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    float_0 = -3046.24
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    bool_0 = True
    str_0 = "PD\\ZS>}sK+:b3QEdAVZA"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, str_0: bool_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    float_0 = -3457.7753
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    str_0 = "V/Iie{f.\x0b:Dlmm"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    int_0 = 1922
    tuple_0 = (int_0, int_0)
    int_1 = 2631
    dict_0 = {tuple_0: int_0, int_1: int_1}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    float_0 = 3192.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    str_0 = "\t()H'"
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (str_0, tuple_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    str_0 = "F|dwkP^\x0c1c&g)O<x+\n"
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    bytes_0 = b"5"
    module_0.match(bytes_0, bytes_0)


def test_case_4697():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4698():
    float_0 = -1506.704
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    bytes_0 = b"\x9af\xf2\xd4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    int_0 = 3600
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    complex_0 = -2120.150645 + 1484j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


def test_case_4702():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4703():
    bytes_0 = b"\x93\xf2\x80o\x03D\x16T.N\xea~\\"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4704():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4705():
    int_0 = 777
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    bytes_0 = b"\x01\x93\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    int_0 = 451
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    str_0 = "qe8']\t5\tc5W@!?w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    str_0 = "i:E7v9$3dD;EA&W+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    complex_0 = 4290.5935 - 1205j
    bool_0 = True
    dict_0 = {complex_0: complex_0, bool_0: bool_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    bytes_0 = b"94\xe1m\xf3\x90\xf0\x9d\x16)(\xbd-\x04\x90\xcd\xf5\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    bytes_0 = b"\x1bm]\xbe\xdbq\xd9\xaf\xb5:'\xafw\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    int_0 = 703
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


def test_case_4715():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4716():
    bytes_0 = b"jv\xae(\xccc\x89\xba\xcc\x88\xc1u\x80\xb0+"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    int_0 = 1268
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


def test_case_4719():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4720():
    float_0 = -196.14
    dict_0 = {}
    bytes_0 = b""
    tuple_0 = (float_0, dict_0, bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    bytes_0 = b"G^\x03\xa2\xb3\\\xa1\x0b\xbf\x17\x03\xc9\xe41\xa2v\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    str_0 = "<:a[8u V"
    bool_0 = True
    bool_1 = False
    str_1 = '-iA&Bh;\t+e1"k<kR'
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_1, str_1: str_1}
    module_1.object(**dict_0)


def test_case_4723():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4724():
    bytes_0 = b"\x81+\x14P\x84\x1a~\x1ed"
    bytes_1 = b'"\x9d\xe4\x94T3\xa4'
    list_0 = [bytes_0, bytes_0, bytes_1]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    complex_0 = 4826.817238 - 478.804j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    bytes_0 = b"\x12\x8f9W\xa9\xf54\xd9\xb0\xce1\xf0\x8a\x03\xb8\xc1]"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    int_0 = -62
    module_0.match(int_0, int_0)


def test_case_4728():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4729():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    tuple_0 = (bool_0, bool_0, dict_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    int_0 = -2562
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    str_0 = "H#\n7DxT0\x0c`r|<,/j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    bytes_0 = b"\xd1\x7f}\x8d\x0e\xee)\x85*\xfc\x8a\xaaS\xb1\xe3\xcc"
    list_0 = []
    dict_0 = {bytes_0: list_0}
    bool_0 = True
    tuple_0 = (dict_0, list_0, bool_0, bool_0)
    tuple_1 = (tuple_0,)
    tuple_2 = (bytes_0, list_0, tuple_1)
    module_0.get_new_command(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    int_0 = 540
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    complex_0 = -1866 - 2897.479932j
    tuple_0 = ()
    module_0.get_new_command(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    float_0 = 3220.65
    module_0.match(float_0, float_0)


def test_case_4738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4739():
    str_0 = "agZTi[Sx\x0ba+~cn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    bytes_0 = b"\x84Y"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    int_0 = 2218
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    str_0 = "0.!.0oW=qz=\r_i|{K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    str_0 = "3g3]51`aLpA7WJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    str_0 = "umHOy7)\\2a(Q"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0, set_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


def test_case_4745():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4746():
    bytes_0 = b"\x7f\x0b=[2\xe5n\xe2Z\x02\xe1\xff\x7f\x1f\x03\x88P\xdfA"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    int_0 = 322
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    bytes_0 = b"\x85sxg\xffR"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    bytes_0 = b"\xb4"
    int_0 = 4223
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    str_0 = "QM\n_{}hQXNrM.t\rao1)<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    int_0 = -3662
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    str_0 = "I!;$4]D`S`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    int_0 = -1820
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    tuple_0 = ()
    str_0 = "KWjM7n|V'~("
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    int_0 = 1459
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    str_0 = "J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    int_0 = -471
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    bytes_0 = b"\n\xdb\xac\x0e"
    module_0.match(bytes_0, bytes_0)


def test_case_4759():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4760():
    str_0 = ">Eu_VG}t\r?HuB\rL MC8*"
    module_0.get_new_command(str_0, str_0)


def test_case_4761():
    object_0 = module_1.object()


def test_case_4762():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4763():
    bytes_0 = b"\x03\xf5W\x0f?1j\x14e\xf3c\xf0\xed\xf5\xb4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


def test_case_4764():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4765():
    str_0 = "<ZlWKBt"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    str_0 = "NWJ2u8}\n?N"
    module_0.match(str_0, str_0)


def test_case_4768():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4769():
    float_0 = 2672.18
    module_0.get_new_command(float_0, float_0)


def test_case_4770():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    int_0 = -255
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    float_0 = -1995.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    bool_0 = False
    int_0 = -48
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    bytes_0 = b"To\x93\xfb\xf7$\xd8\x13\xbd\xd1\xa2\xea?S\xaa\xd0\x8d\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    bytes_0 = b"6Nh\x88k\x94\xf4u\x0c\xec\xfe\x9d6|\xd9;\xd2\x01\\"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    int_0 = 244
    bool_0 = True
    tuple_0 = (int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    int_0 = -558
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    int_0 = 3911
    list_0 = [int_0]
    list_1 = [list_0, list_0, list_0]
    str_0 = '3\n"ws{e\niD76>=GG'
    str_1 = "8z1[q"
    str_2 = '4"*SI7F#9d~BW.z'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: list_0, str_1: int_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    str_0 = "40mb#>q?r5s1S"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_4780():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4781():
    float_0 = -1691.0
    list_0 = [float_0]
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    bytes_0 = b"T\x84\xe8\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    complex_0 = -890.6986 + 783.9297j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    str_0 = "lW/St1iX>%}f}%|=~3@R"
    str_1 = "K<_bxIR\rjB"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0, str_1: bool_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    str_0 = "BB(oLwC\ntLFfE,R/."
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    float_0 = -523.917545
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    bytes_0 = b"C\x93\xa3\xd4\xbd\xdd\x90^~\xd4\xfe\x82\x06"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bytes_0 = b"kT\xec"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_4789():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4790():
    str_0 = "%+6iZ\r+~T&oe_ds!i\x0b^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    bytes_0 = b"\xd8\xb4\xdbt\x9bg]\x18s=b@:\x9f\x8e%D\xdan\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    float_0 = -696.761
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    bytes_0 = b"\xd7u"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    str_0 = "b;OH<]h$hvf"
    str_1 = "-*o2yFn~8@&>"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    float_0 = -1477.33
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    bytes_0 = b"\xc5k\xb6"
    module_0.match(bytes_0, bytes_0)


def test_case_4797():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4798():
    complex_0 = -3344 - 273.8217j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    bytes_0 = b"\xf1\xab"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    str_0 = "a)8Wc]e"
    module_0.get_new_command(str_0, str_0)


def test_case_4801():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4802():
    int_0 = 3520
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    complex_0 = 1179.274073 - 3426.922j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    bool_0 = True
    str_0 = "95~ZH|gz>_RMG"
    dict_0 = {bool_0: str_0}
    tuple_0 = (bool_0, str_0, bool_0, dict_0)
    bool_1 = True
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    int_0 = 1057
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    bytes_0 = b"\xb7\x7fB"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    int_0 = 4741
    float_0 = -55.099
    bool_0 = True
    tuple_0 = (int_0, int_0, float_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    object_0 = module_1.object()
    str_0 = "1Q\r=~?LlShA\r"
    dict_0 = {str_0: object_0, str_0: object_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    bytes_0 = b"\x80\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    int_0 = -702
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    int_0 = 522
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    float_0 = -475.4819
    module_0.get_new_command(float_0, float_0)


def test_case_4813():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4814():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    complex_0 = 27.6019 + 1521.19968j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    bytes_0 = b"\x9a\xccS\xc2;\xa9Y\x9b\xca\xa5\xffvN`\x82H"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4817():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4818():
    str_0 = "7RTj*tER,.IL},\n3A"
    tuple_0 = (str_0, str_0, str_0)
    list_0 = [str_0, str_0, str_0, tuple_0]
    module_1.object(*list_0)


def test_case_4819():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4820():
    float_0 = 909.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    int_0 = 452
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    int_0 = -1198
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    str_0 = "a\t m9/\n'l!Z0x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    str_0 = "1[sDA6T%Rj[/nX\x0c-"
    str_1 = "&u=7"
    str_2 = "O_J6TTO8"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    none_type_0 = None
    complex_0 = -2608.601 - 416.01338j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    bytes_0 = b"u\x9b\xdb\xfa\x19\xe6tU\\\x06\xc2\x8c?w\xc8\x9f\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    str_0 = 'r"-Kkz$m7Og\n'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    str_0 = "7Cn"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    int_0 = -1820
    list_0 = []
    set_0 = {int_0}
    tuple_0 = (int_0, list_0, set_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    str_0 = "7pxegGKN9M~JT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bool_1 = True
    tuple_0 = (bool_0, bool_0, list_0, bool_1)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    bytes_0 = b"{#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    int_0 = -2391
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    complex_0 = -3667.1264 + 2238.72843j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    bytes_0 = b"a"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    float_0 = -2891.496
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    int_0 = 912
    set_0 = set()
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    float_0 = -1843.6
    list_0 = [float_0]
    str_0 = "a`F<qy`2=Ds"
    int_0 = -1115
    bool_0 = False
    str_1 = "\\Ila3onQ;fv^G"
    complex_0 = -1401 + 71j
    int_1 = 2596
    bytes_0 = b"@\x90\x9a\x8e\n\xd11\xf9ZAI"
    tuple_0 = (complex_0, int_1, bytes_0)
    tuple_1 = (bool_0, tuple_0)
    dict_0 = {str_0: int_0, str_0: bool_0, str_1: tuple_1, str_0: bytes_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    none_type_0 = None
    float_0 = -2312.37
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    float_0 = -2406.4
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    bytes_0 = b"kc\xef\xb5\xd9\xcf\xf6e|\xc1\xeb/\xb6\x9bPI\xb3\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    int_0 = -903
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_4847():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4848():
    complex_0 = -81.31 + 976.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    float_0 = -449.784703
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    str_0 = "2<1"
    bytes_0 = b"?0\tov\xc3\x1e\xd0\xc3 \xc9\xf31\xa2#\xcc+\\"
    dict_0 = {str_0: str_0, bytes_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    float_0 = -4095.5137
    set_0 = {float_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    float_0 = 845.07354
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    str_0 = 'g1Ty"UU!-&>M'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    float_0 = 2060.3858
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    float_0 = 2970.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    int_0 = -1217
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    bytes_0 = b"\x18\xff\xa6s\xc9}.\xd5\xc5\xaf\x01@\xa8\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    str_0 = "WF/KncBUe6Lh'c"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    str_0 = "KtHtk%NS"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    int_0 = 90
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    none_type_0 = None
    str_0 = "N0K`a.@E=|3(8g{\r}lN9"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    bytes_0 = b"\xa7\xdd\xb3\x8b\xc8\xb7\xd8b\xceL\xcc\xc3\x8a3"
    str_0 = "fl\rrP$1Cgl"
    set_0 = {bytes_0, str_0, bytes_0}
    tuple_0 = (bytes_0, str_0, set_0)
    list_0 = [tuple_0, tuple_0, str_0, bytes_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    str_0 = 'G\x0b1."((cT\x0cB*H`E-'
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    bytes_0 = b"{\\\xab\x06I\x1c\x91a\xcd\xe8\r\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bytes_0 = b'5?D\x1d\xfa\xc9\xbd\xe2\xe7\xfe~F"\r\x07'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    int_0 = 362
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    bytes_0 = b"$t\t&G\xec!\xed9\xb0p\\:\x86&\xc0b\xea\x9c\xb7"
    tuple_0 = (bytes_0, bytes_0)
    int_0 = -3000
    list_0 = [tuple_0, int_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    str_0 = "*I%awSM<<sb+\x0b. ;,\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    float_0 = -1614.56
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    complex_0 = 1808.59044 + 392j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    bytes_0 = b"(\x0f\xf8\xc4\xddW\x05#U5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    int_0 = 432
    module_0.match(int_0, int_0)


def test_case_4874():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4875():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    int_0 = 770
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    int_0 = -923
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    str_0 = "]Jw@PiI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    int_0 = 2430
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, int_0, int_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    int_0 = -881
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    int_0 = -1958
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    bytes_0 = b"\xf6=\x97]\x19\xa1\\\x80:\xf3qA\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    list_0 = []
    bool_0 = False
    tuple_0 = (object_0, set_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    bool_0 = False
    dict_0 = {}
    str_0 = "]q7AP {v2NTL]2jNN\thG"
    tuple_0 = (bool_0, dict_0, str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    str_0 = "}!Oh$M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    str_0 = "GVRU(Jn_!~rmbZx\x0bbs"
    bytes_0 = b"bY\x8d\x1f\xa1\x96J \xe8v\x9e"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    bytes_0 = b"\xa5\x92"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


def test_case_4889():
    pass


def test_case_4890():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4891():
    int_0 = -1082
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    float_0 = 575.12241
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    bytes_0 = b"\xebl\xa1\x89\xfa\xea\x07k\xfb\xec\x03\xe5\x08"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    bytes_0 = b"\xda\x90\x95"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    float_0 = 4085.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    int_0 = -88
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    object_0 = module_1.object()
    set_0 = {object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    str_0 = "Q\no\"'"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    str_0 = "(g%]w^-Q&2TC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    int_0 = -1129
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    int_0 = 2866
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    tuple_1 = (tuple_0,)
    list_1 = [tuple_1, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    bool_0 = True
    bytes_0 = b"V\xf7\x06\xb9:\x95\xcahc,\x16q\xc7\x19j"
    module_0.match(bool_0, bytes_0)


def test_case_4905():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4906():
    str_0 = "6hDmWQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    str_0 = 'i^pIs[1?sCn8p`W"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    int_0 = -138
    set_0 = set()
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    bytes_0 = b"\x7f\xc1\x8d\\\x83\xe7\xf7\xf8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    float_0 = 403.8
    int_0 = -2106
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {float_0, int_0, int_0, tuple_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    float_0 = 2340.463684
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    complex_0 = 4377.967 - 2296.0834j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    float_0 = 97.089
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    str_0 = "LQ$@w&XaB4\\n4]{9f"
    int_0 = 459
    tuple_0 = (str_0, int_0)
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    str_0 = "=Af[;X3nHP\rEDZ"
    float_0 = -179.7
    list_0 = [str_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    float_0 = 479.83064
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    float_0 = 506.6409
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    int_0 = -1996
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    int_0 = -2300
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    bytes_0 = b">pm"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    str_0 = "X|?\t`:wl<frP4),,f"
    module_0.match(str_0, str_0)


def test_case_4924():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4925():
    str_0 = "G!`?9zO5oKKU>a[xdP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    str_0 = "iEY{yc8\x0bJ'6[=>%|fKG"
    dict_0 = {str_0: bool_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    bytes_0 = b"\xe6\xd9\x9f\x7f%sS\xc3\x89d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    complex_0 = -2307.34 + 433.891j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    str_0 = "9J@(hU@ hMF+u$qI"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    int_0 = 1404
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    str_0 = "&fG)r\\e/Ys"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    int_0 = 7
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    bytes_0 = b"\x1e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    float_0 = -1065.28
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    complex_0 = 5337.3956 - 633.622j
    set_0 = {complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    float_0 = -2611.342906
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    str_0 = 'B^E^G ^+"oe.'
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    complex_0 = 612 + 3332.18j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    float_0 = -621.091
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    int_0 = 1542
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    bytes_0 = b"\xee0\x88WI\xfbAC\xfe\x9eF\xc7D\xf8\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    str_0 = "c[]\trv,_=1*%\x0b&OLQ>>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    bytes_0 = b"w*\x10\xcfI\xf02\xdd\x02\x00\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    bytes_0 = b"\xacE|w\xf3w\x7fK"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    int_0 = 1231
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0]
    tuple_0 = (dict_0, list_0, list_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    str_0 = "%0]\t#S7fv"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4953():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = "(ikiH(]dE:/qX[eCM}{-"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    int_0 = 1197
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    int_0 = 1683
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    int_0 = 1823
    int_1 = 917
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    float_0 = 3219.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    int_0 = 1074
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    bytes_0 = b"^\xbf}}\r\xceg\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    bool_0 = False
    bytes_0 = b"OC\x19\t\xd4\xac\x19\x8e\x7f\xa0\xc9\xed\x18^*% 8"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = False
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    complex_0 = -1497 + 963.1163j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    str_0 = "-P%:t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    int_0 = -1122
    list_0 = [int_0]
    str_0 = "u|a0b\x0c{-\x0b7\x0bLA>|t_[D9"
    module_0.match(list_0, str_0)


def test_case_4966():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4967():
    str_0 = "A9hCuW2Zk*f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    str_0 = "vm1Z#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    str_0 = "[nY!\x0b%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    bytes_0 = b"\xf9\xea\xbej\x06B\xbf\xd5\xa8\xdb\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    str_0 = "nMth\x0c*3\x0c%3b\tH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    str_0 = "G"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    int_0 = -1786
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    int_0 = 2012
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    float_0 = -1924.809
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    bool_0 = False
    int_0 = 310
    tuple_0 = (bool_0, int_0, int_0)
    int_1 = 3692
    bool_1 = True
    tuple_1 = (bool_0, tuple_0, int_1, bool_1)
    module_0.match(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    int_0 = -3278
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    bytes_0 = b"\xaa\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    bytes_0 = b"G \x82.E6\xb6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_4985():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4986():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    bytes_0 = b"\xec\xdc\x9a\xabM\xfa\x84\xc5]aOV\x8e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    int_0 = 2142
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    bytes_0 = b"\x0e\x03t1\xb7\x98\xff\xe1<I\xba_\xfc\xd4\x01\x7f\xaa\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    bytes_0 = b"\xd0`\xe8\xe5F\xb3\xbf|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    float_0 = 887.29
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    str_0 = " ~gp/\nVDU~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    str_0 = "De;\nvE' "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    bytes_0 = b"\xac(*\xf47"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    float_0 = -264.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    bool_0 = True
    int_0 = 377
    list_0 = [bool_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    str_0 = "Js\rF/{\tH>;c'n[3bks"
    module_0.match(str_0, str_0)


def test_case_4998():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4999():
    int_0 = 2053
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    str_0 = "&p1` *"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    bytes_0 = b"\x82c\x1bq\xae\xf0G"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    int_0 = 771
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    int_0 = -2281
    module_0.get_new_command(int_0, int_0)


def test_case_5005():
    pass


def test_case_5006():
    pass


def test_case_5007():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5008():
    str_0 = "@,tBcP#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    str_0 = "EI_: "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    bytes_0 = b"\xb2\x8c\x9dV7\x98\x11_\x1f\xf7\xb0\x1b\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    int_0 = -56
    int_1 = 3549
    tuple_0 = (int_0, int_1, int_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    list_0 = [set_0, set_0, set_0]
    float_0 = -2090.155402
    tuple_0 = (set_0, list_0, list_0, float_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    int_0 = 1661
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    int_0 = 1501
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    bytes_0 = b"Vs:=\x15\xebMb\xf6X\xe2\xcbf\xe5\x9fX\xceQ#"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    int_0 = 1324
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_5018():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5019():
    str_0 = "X3QP9"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    int_0 = 2330
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    int_0 = 856
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    int_0 = 1744
    str_0 = "NyZYr!W:znLE%CB`i"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    int_0 = -695
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    bytes_0 = b'.\xf4!\xc6f\xc0\xfc\x89\xae\xcd\xaf"6'
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    int_0 = -3353
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    str_0 = "1~\\l#"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    float_0 = -1963.02439
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    int_0 = -718
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    bytes_0 = b"W+\x96\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    int_0 = 2354
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    complex_0 = -966 - 768.319504j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    str_0 = "c0PHW<*@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    int_0 = 628
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    int_0 = -1896
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    int_0 = -845
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    complex_0 = -228.023379 - 3777.9198j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    bytes_0 = b"\xd1\xbe\x8e c\x9du\xb9\x07\xd7s=\xe0\x9d.Y\x0fU\x9e"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    int_0 = -1760
    bool_0 = True
    dict_0 = {bool_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    bytes_0 = b"\xe7\xa9\xd1\x8c'\xb5\xf7k\xbb\xee\x1f\x17\x92\"\xd1\xbd\x82B\xa1C"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    float_0 = 620.967
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    float_0 = -829.05
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    float_0 = 968.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    bytes_0 = b"x\x16\xf6\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    int_0 = 877
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0, int_0, int_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    complex_0 = 952.04 + 3970.721j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    int_0 = -656
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    float_0 = -2291.986343
    set_0 = {float_0, float_0}
    list_0 = [set_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    bytes_0 = b"\x05|Y\xa3\xb0\x151(\xc3<Dv"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    str_0 = "n"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    int_0 = 712
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    bool_0 = False
    str_0 = "xQtt /`\x0b#ZOJJ"
    tuple_0 = (bool_0, str_0)
    int_0 = 601
    set_0 = {tuple_0, bool_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    list_0 = []
    float_0 = -51.69
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    complex_0 = -309.02 + 2625.2825j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    tuple_0 = (list_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    int_0 = 2029
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    bytes_0 = b"\x93\xa6\x8f@\xea\xf9Q|"
    complex_0 = -778.6 - 139.962909j
    bytes_1 = b"\xa8\x19~A-f\xbc\x98'(\x17"
    dict_0 = {bytes_1: complex_0, bytes_1: complex_0}
    tuple_0 = (complex_0, dict_0)
    bool_0 = False
    dict_1 = {bytes_0: tuple_0, bool_0: dict_0}
    none_type_0 = None
    module_0.match(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    bytes_0 = b"n]\x84\x95\x8a\xbe\xff\xfb\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    list_0 = []
    str_0 = "6>yjs|s~vM\nPaP7g"
    str_1 = "aunbf/\x0b_-k5"
    str_2 = "A2Rfau`sB18"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    int_0 = 910
    tuple_0 = (int_0, int_0, int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    str_0 = "RMSHQ\x0c+H4aAm6@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    complex_0 = -272 - 3731.917j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    complex_0 = 1113.9123 + 653.2j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    bytes_0 = b"\xec\xa9\x14\x8b\x8f\xeff\xcdOR\xd5\x97\x9a\xed#Jh\xcd2\xaf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    bytes_0 = b"\xca\xfd/\xe2\xf2\xbb\xc55"
    float_0 = 732.0
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    float_0 = -2923.09
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    int_0 = -745
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    int_0 = -134
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    bool_0 = False
    set_0 = set()
    dict_0 = {}
    bytes_0 = b"\\\x9b\xce\xf4\xe6t"
    tuple_0 = (bool_0, set_0, dict_0, bytes_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    str_0 = "\x0c<yL_W[#Jq$Pf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    float_0 = -1294.0
    str_0 = "\nqlw7Z7V9>"
    tuple_0 = (float_0, str_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    str_0 = "YndZ~yq*"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    bool_0 = False
    bool_1 = True
    str_0 = "V]oqd@u\t+w<QH^qr3!"
    bytes_0 = b"\xc6T4.\xfc\x11\xae\x12\xd5]\xd5A!\x94\x99|\x90i\xf4"
    tuple_0 = (bool_0, bool_1, str_0, bytes_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    int_0 = -100
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    str_0 = "7[7-@sz)|"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    none_type_0 = None
    complex_0 = -1941.05 + 249.15j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    str_0 = "QV%"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    complex_0 = 1860.6889 - 1544.91j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    list_1 = [complex_0, complex_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    bytes_0 = b"\xf7t\xa5\x13"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    str_0 = ",jby}+:G@ J\tAl<)sxpI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    tuple_0 = ()
    str_0 = "O_Ra+TQ',\" "
    list_0 = [str_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    bytes_0 = b"!\x0fKW\xb7\x04m5\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    str_0 = "{\x0cr/\x0b~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    bytes_0 = b"~\x8b\x1d\x87\x85\xb5\x13\xb5@\xd3\xc4\x8aEz0i\x8f\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    str_0 = 'YJpct`g:*"[ByU-O,'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    bytes_0 = b"\xd7\xb2"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    str_0 = "]\x0bp:\x0bN7~/B8ti}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    bytes_0 = b"\xdb\x94;"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    int_0 = 37
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    float_0 = 1519.7639
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    object_0 = module_1.object()
    str_0 = "\\Gt7N9,\\V"
    tuple_0 = (object_0, str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    str_0 = ":\x0b6=\nsR,8\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    str_0 = "vo:ewtb@\x0cp-iU/7["
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    float_0 = -201.06335
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    bytes_0 = b"\x8ao%\r\xc5\xf8l\xcd8\xe3\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    none_type_0 = None
    bytes_0 = b"\xc4\xf4\x80\x8c\xc9$l\xdf\xb62\xdd}\xedz\xd8\xac"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    int_0 = 1251
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    int_0 = 2559
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    complex_0 = 3167.767298 - 616.67909j
    set_0 = {complex_0, complex_0}
    bool_0 = True
    tuple_0 = (complex_0, set_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    complex_0 = -2209.36 + 61.78605j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    complex_0 = 3009.9 - 1324.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    str_0 = "P0ljG%f\nh="
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_1, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    bool_0 = False
    complex_0 = 1382.19616 - 505.95j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    int_0 = 12
    module_0.get_new_command(int_0, int_0)


def test_case_5122():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5123():
    bytes_0 = b"w[p\xc2\r\xf8\xf2\xb9\x90%\x04\xfd\x9a\x12\xebz\r,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    float_0 = -3064.28254
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    complex_0 = -1015 + 373.8211j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    float_0 = -269.02
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    bytes_0 = b"\xb2\xf0"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    bytes_0 = b"\xb5`\xb2\xfb\x89\x1a\x95>\xb1\xe3\x1c\xba,Z"
    list_0 = []
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    int_0 = -158
    module_0.get_new_command(int_0, int_0)


def test_case_5130():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5131():
    str_0 = "Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    str_0 = "s"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    int_0 = -1324
    dict_0 = {int_0: int_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    bytes_0 = b"\xd1\xb2\xe3\xf8\x18\xbc\xe9\x9c(\xfd\x0e\xf98\xcb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    str_0 = ">kpA"
    tuple_0 = (str_0,)
    set_0 = {tuple_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    str_0 = "Xt"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    bytes_0 = b"_\xdfpv\xe0\xb7\x10\xd3\xc2C\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    int_0 = 587
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    int_0 = -2374
    module_0.match(int_0, int_0)


def test_case_5142():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5143():
    str_0 = "wy@jC\nC]`c3S%v~z.=/\x0c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    complex_0 = -4.696907 + 510.78229j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    bytes_0 = b"\xbc\x02s\x04\xa9f\x87]I\x0e"
    int_0 = 5
    tuple_0 = ()
    tuple_1 = (bytes_0, int_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    int_0 = 1069
    tuple_0 = (int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    set_0 = {bool_0}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    int_0 = 5286
    module_0.get_new_command(int_0, int_0)


def test_case_5149():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5150():
    str_0 = "0=GEm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    float_0 = 3339.05721
    bool_0 = False
    tuple_0 = (set_0, float_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    object_0 = module_1.object()
    str_0 = "<1QE}XVW"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    int_0 = -1883
    module_0.get_new_command(int_0, int_0)


def test_case_5154():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5155():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    bytes_0 = b"\\\xfa\xc5\rudB\xe7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    int_0 = 470
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    bytes_0 = b"\x07\xa2\xe8.3=a\xa5\xe2t2\x0c\x1f\xf7\xaa\x97y\xb3|\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    str_0 = "\t!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    str_0 = "K0&=ouO;u78"
    str_1 = "q4"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    int_0 = 263
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    int_0 = -388
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    str_0 = ",M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    str_0 = "\x0b_i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    str_0 = "&slq%H!.Q<e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    bytes_0 = b"\xad\xf9g\xfb\xcd\xec\xf9 \xd0\x82\xe9\xa3\xc2"
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    str_0 = "q^(v?7)B6\r$?}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    int_0 = 6043
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    str_0 = "=5'`M+\tn\nF#\x0b\t\x0cY\"Hg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    bytes_0 = b"|9\x90+,\xeb\xd8&A\x873\xbe\xf9\xedv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    float_0 = -1001.13455
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    list_0 = []
    str_0 = "6MEIV"
    tuple_0 = (str_0, list_0)
    module_0.get_new_command(list_0, tuple_0)


def test_case_5175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5176():
    int_0 = 612
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    float_0 = -972.3787
    module_0.get_new_command(float_0, float_0)


def test_case_5178():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5179():
    bytes_0 = b'97\x96"\x12\xe8\xe4\xbc\xa9\xc9x}\t\x10\xdd8\xca\x91\xe0\xc2'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    bytes_0 = b"H\xa0\xf5\xed\xf3\xddm\\\xdc\x14\xc4 -+dL\x95\x93"
    float_0 = 1281.0
    dict_0 = {bytes_0: bytes_0, bytes_0: float_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    str_0 = "mxCe_b#J. DX(b:a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    str_0 = "7@"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


def test_case_5183():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5184():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    float_0 = 1342.1441
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    complex_0 = -170.36 + 3410.03j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    str_0 = "/ "
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    float_0 = 1915.7
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


def test_case_5189():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5190():
    complex_0 = 1113.31 + 1383.10891j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    float_0 = -723.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    int_0 = -1071
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    str_0 = "\rNy\\PBS:*InaI+?Xw"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5195():
    pass


def test_case_5196():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5197():
    str_0 = "ZForI\t\r^A)jx?ON0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    int_0 = 537
    tuple_0 = (int_0,)
    set_0 = {tuple_0, int_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    int_0 = 2215
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    str_0 = "Fry"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    str_0 = "sg`]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    complex_0 = 521.28 - 4389.969j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    str_0 = "-R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    float_0 = -2533.88685
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    bytes_0 = b"~X\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    int_0 = -2920
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    bytes_0 = b"`\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    float_0 = 423.542
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    int_0 = -2520
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    int_0 = -1078
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    int_0 = -2824
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    int_0 = 1016
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    str_0 = "u"
    list_0 = [str_0, str_0, str_0, str_0]
    str_1 = "28fAe{qZX;`}$"
    dict_0 = {str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    int_0 = -3849
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    float_0 = -4760.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    bytes_0 = b"\xf6uF}\xe1\x1b\x190\x95\xd9"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


def test_case_5217():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5218():
    str_0 = "L$, 2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    float_0 = -1395.57
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    complex_0 = 2359.5789 + 5631.9j
    tuple_0 = ()
    tuple_1 = (complex_0, tuple_0)
    int_0 = -2636
    int_1 = 731
    tuple_2 = (tuple_1, int_0, int_1)
    module_0.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    bytes_0 = b"\xedq\xe5\xc1I\xd2<\x0e\xd6\x04\xd4';\xd0\x00\x04\r}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    str_0 = "!`_hK{v$?\x0b("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    str_0 = "Nja79kL/4{`M_"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    int_0 = 1059
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    float_0 = -1640.32104
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    bytes_0 = b"i\xe8\xd5"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    int_0 = -2371
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    bool_0 = False
    bytes_0 = b"\x03F\xbb\x03x\xd1`H\xd8\xf0K\x98zEp\xc6\x89\xa3"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    int_0 = -503
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    bytes_0 = b"7!?\xe1\xd3\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_1, bool_1: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    int_0 = -5768
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    float_0 = 1964.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    str_0 = "T9lpP0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    str_0 = "7lF@Q "
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    bytes_0 = b"\xb7\xe4\x85\x8b\x82"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    int_0 = -2360
    module_0.match(int_0, int_0)


def test_case_5239():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5240():
    str_0 = "XF~j]cmR#<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    str_0 = "?;`Hi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    int_0 = 772
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    float_0 = -3495.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    object_0 = module_1.object()
    bool_0 = True
    set_0 = {object_0, bool_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    str_0 = "Nl;j:(p6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    int_0 = 3268
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    bytes_0 = b"H\xd1s\xf6\r\x12\xf2'\x11N\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    float_0 = 462.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    bytes_0 = b"\x8d\xca\x08\xd7<\xde\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    float_0 = -1489.1019
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    complex_0 = -4077.2619 - 675.135363j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    str_0 = "6V81[Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    float_0 = -1269.706803
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    str_0 = "cF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    float_0 = -1882.0049
    module_0.get_new_command(float_0, float_0)


def test_case_5256():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5257():
    float_0 = 593.3394
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    bool_0 = False
    int_0 = -241
    dict_0 = {bool_0: bool_0, int_0: int_0, bool_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    str_0 = "4<ewM5pv?\x0ci1}WBh^T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    float_0 = -40.97316
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    int_0 = 1552
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    int_0 = -2546
    module_0.get_new_command(int_0, int_0)


def test_case_5264():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5265():
    str_0 = "w4y?I;9*kCMG7 6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    int_0 = 229
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    str_0 = "9c*jzBX"
    module_0.match(str_0, str_0)


def test_case_5268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5269():
    tuple_0 = ()
    bytes_0 = b"/&!\xc5"
    tuple_1 = (tuple_0, bytes_0)
    bool_0 = True
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    bytes_0 = b"\x14\xddS\xc7x\xcb\x0f\x95"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    bytes_0 = b"\x0fB8\xeb\xbf\x13\xdb\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    str_0 = "A?P5);\r_#CEN |"
    dict_0 = {}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    bytes_0 = b"\xa1\xb1\xf4h\x19\x07\xa5h`\x90\x07\xb6d\x90\x8e\x05o"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    int_0 = 285
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    str_0 = "\x0b$w"
    str_1 = "Z\\UKp'`W~E`l>+Z1nF"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    bool_0 = True
    bytes_0 = b"\xed\x19\x16\x01\\\x81"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    bytes_0 = b"S"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    int_0 = -2252
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    float_0 = 20.81576
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    str_0 = "XsA;BAh(P-tG$"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, bool_0, tuple_0)
    list_0 = [tuple_1, tuple_1, bool_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    int_0 = -2423
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    bytes_0 = b'P\x00\xcbC5\x1c\x9cK.\x1b\xe8[7"\xf7G%D`'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    set_0 = set()
    bool_0 = False
    tuple_0 = (set_0, set_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    bytes_0 = b"\xaeX\xec\xa2l1\xac\xbd\x16\xbd\\\xc5lH\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    bytes_0 = b"7\xb9\xbcuY"
    str_0 = "/QD\r}m3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: str_0, str_0: bytes_0}
    list_0 = [bytes_0, dict_0, bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_5291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5292():
    bytes_0 = b"}H\xdb\xe4\xb0\x9f\xe3\xf1\xbb\xe4\xa2nd8^\x10\xf1\x14"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    str_0 = 'XUY\n\r"|'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    bytes_0 = b"E\x9dsE<\xb2\xf0W?X\xa4\xaa\x06\xa3g\xd9\xeb\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    int_0 = 2112
    module_0.get_new_command(int_0, int_0)


def test_case_5297():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5298():
    str_0 = "_z|Y#wF\n/["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    bytes_0 = b"("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    none_type_0 = None
    bytes_0 = b"E\xd3\x8f&\x9d\xf7\xc7U\x0e\x96v\xbc\xa8@\xbf\xe7\x17"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    complex_0 = -3662.172251 - 1504.36393j
    module_1.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    complex_0 = -126.91 + 790.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    str_0 = "gIvE~@:ug"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    str_0 = "G?;H4G"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    str_0 = "+n{~#NKtK"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    float_0 = 385.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    int_0 = -1894
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    int_0 = 1028
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    float_0 = -2594.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    bytes_0 = b"\x94o\xf5\xeb\xb5\x83\x1b\xedt\x1f\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    float_0 = 2252.42369
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    int_0 = 1950
    module_0.get_new_command(int_0, int_0)


def test_case_5314():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5315():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    int_0 = 660
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    str_0 = "1<\tY"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    float_0 = -779.21216
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    float_0 = -2063.59686
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    bytes_0 = b"XQQ\tI\xdf\x8a\x183"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    int_0 = 21
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    int_0 = -1008
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    float_0 = -246.406802
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    str_0 = "O'Y}-\"|Qci"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5325():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5326():
    int_0 = 172
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    set_0 = set()
    list_0 = []
    tuple_0 = (dict_0, bool_1, set_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    bytes_0 = b"\xad@\xc9.\x01\x1d\x18\xc4\xec%M"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    int_0 = 3984
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    list_0 = [bytes_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    bytes_0 = b"_\xe3qv\xc4{a\x8cE"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    str_0 = "\\T-Y\rY7ay]yEVbh>tx}T"
    module_0.get_new_command(str_0, str_0)


def test_case_5333():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5334():
    str_0 = "4mz8l^"
    none_type_0 = None
    str_1 = "MD5+'mH+ilgvN!"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    bytes_0 = b"\x8d6\xbf\xfe\x96\xffl\xd7f\xc3\xfa\xa3\x0ce\xb4\xf6\xec*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    bytes_0 = b"\xd2Hn\xbe\x05\xbfe\x8d\xbfn\xb6\xd9"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    bytes_0 = b"\x92\xa8\xd7c\xdcM"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = True
    list_0 = [set_0, bytes_0, set_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    int_0 = -2409
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    complex_0 = -1379.213 - 1026.04j
    set_0 = {complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    int_0 = -2989
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    int_0 = -656
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    bytes_0 = b"&\x16\x84\xe4\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    int_0 = -3737
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    complex_0 = -2401 - 1149.54072j
    set_0 = {complex_0, complex_0, complex_0}
    str_0 = "rf^v#hHQa"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    bytes_0 = b"a\xe2\xe3yR\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    str_0 = '{s"S+*'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    float_0 = 664.837
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    int_0 = 2581
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    str_0 = "#C<yMY_bqD+{j+\\h5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    int_0 = 1825
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    int_0 = 1293
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    int_0 = -1885
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    bytes_0 = b"\x8f\x8c\xa6c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    float_0 = 3616.12
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_5357():
    pass


def test_case_5358():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5359():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    bytes_0 = b"8\xbd"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    str_0 = "c;Get~0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    int_0 = 4557
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    tuple_0 = ()
    str_0 = ">\x0b3r;U"
    tuple_1 = (tuple_0, tuple_0, str_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    str_0 = "Gg4;ZBx~u\\5y\nFiu:\x0ctL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    bool_0 = False
    bytes_0 = b""
    float_0 = -517.19643
    dict_0 = {float_0: bool_0}
    tuple_0 = (bool_0, bytes_0, float_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    bytes_0 = b"\rF\x90\xfb\xc8\x1e\x08\xbb\x8a\xa7\nTI\x80\x1a3\xdf"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    str_0 = "\rM]_\x0cZ$hIVrBt"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    str_0 = "=\r#onAd}PEP(a"
    str_1 = "W# <`"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    bytes_0 = b"\x81c\x1bu_\xee\xd9\\c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    bytes_0 = b":\xd7\xfb"
    bytes_1 = b"\xc5"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    int_0 = -1714
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    bytes_0 = b"uoF\x83\xb6\r3w\xad"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    set_0 = {bool_0, bool_0, bool_1, tuple_0}
    list_0 = [set_0]
    bytes_0 = b"\x86}\xb3\x98\xef\xd9\r\xb9\xab\xaa\xd6\xf3l~\x01\x12"
    tuple_1 = (tuple_0, list_0, list_0, bytes_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    str_0 = "F^`rJUBRrE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    bytes_0 = b"\x81\xf2\xfe\x00\xa4\xbb\x14\x8b\xca"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    bool_0 = False
    str_0 = "{{GSTu~[/"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    int_0 = -1588
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    int_0 = 1594
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    int_0 = -175
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    list_0 = [tuple_0, int_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bytes_0 = b"\x05\xe2\xa5\x9f%\x1c\xf4\xd3\xf2\x9b\xf3e\xfd\xd9\xa8\x87\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    str_0 = "XKaOOX"
    float_0 = -1354.4
    dict_0 = {str_0: float_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    int_0 = -2927
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    none_type_0 = None
    bytes_0 = b"\x8e\x82&\x08\xa2\x8d\x06'\x0c:V\xa2M\xc8:9\xdf\x10J"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    str_0 = "5,>A<ikO^D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    str_0 = "vMIl"
    module_0.get_new_command(str_0, str_0)


def test_case_5388():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5389():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_5390():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5391():
    bytes_0 = b"\x1e\x82\xc9\x9f\xb4\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    bytes_0 = b"H\x00\x92\xad\x02\x0c\n\x00\xc7\xac5\xfb\xca\xd6\xe8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    float_0 = 3667.048803
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_5394():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5395():
    int_0 = -1080
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    str_0 = "v4e=Jw`h=fP^6,$\nNu"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_0}
    bool_0 = False
    tuple_0 = (str_0, dict_0, bool_0, dict_0)
    list_0 = [tuple_0]
    tuple_1 = (tuple_0, bool_0, str_0, list_0)
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: tuple_1}
    module_0.get_new_command(dict_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    int_0 = -2783
    bytes_0 = b"\xa1\x9fE\x81"
    dict_0 = {bytes_0: int_0, bytes_0: bytes_0}
    set_0 = set()
    tuple_0 = (int_0, bytes_0, dict_0, set_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    bytes_0 = b"j\x95\xe3g~{\xfd\xee\x00"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    int_0 = -1066
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    float_0 = -1165.207924
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    bytes_0 = b"6\x88]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    int_0 = 2380
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    bytes_0 = b"\xf6(\xd0\xa5\xfd\xbau\x1a\xfc\xb8\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5404():
    pass


def test_case_5405():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5406():
    int_0 = 2063
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    str_0 = "\\(ZHOka6}OFbmh"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    bytes_0 = b"{+@"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    str_0 = "CFkM`"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    bytes_0 = b"\xf91A\xf95h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    int_0 = -611
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    str_0 = "[9HN[pet"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    str_0 = 'cf06fn_E7w"~'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    str_0 = "wKIG'z\tK[l1=~\x0bc>u"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    bytes_0 = b"\xa8"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    float_0 = -4175.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    none_type_0 = None
    bytes_0 = b"J\xd7\xcb*\xd4\xa8\xeb\x00\x03\x95Km\x15\xed\xf3\x03\x859\xcc\xf8"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    bytes_0 = b"\xe4x\xa9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    int_0 = -1551
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    float_0 = 2375.40442
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    float_0 = -3983.0
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    str_0 = "@\r%'\x0bWP~bK+bSo"
    bytes_0 = b"y\xfa\xa8\xc1\x10\xbf\xcf,\x8d\x06'\xab\x98\xa9V\xcdg\x8f"
    tuple_0 = ()
    int_0 = -4456
    tuple_1 = (str_0, bytes_0, tuple_0, int_0)
    tuple_2 = (tuple_1, tuple_0)
    list_0 = [tuple_2, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    bytes_0 = b"\xfa\xc1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    int_0 = -8
    bool_0 = True
    list_0 = [int_0, int_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    bool_0 = False
    int_0 = 3537
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    float_0 = -1070.0891
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    bytes_0 = b"\x8c\xa3\xea\xed`\x88\xb9C"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5430():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5431():
    bytes_0 = b"\xd4.\xe5\x1eUUM\x86\x1f\xd2\xc6\x94\x8c\x93\x1d3\x04"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    float_0 = 862.51
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_5433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5434():
    bytes_0 = b"\x121\x12\xf8>\xf3\xcf\x82\x19\xe4\x04C"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    float_0 = 3175.06055
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_5436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5437():
    complex_0 = -5589.349183 - 3027.77j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    str_0 = "f\n~EMI,e"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    float_0 = -424.1
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    bytes_0 = b'\xae\x0edK\xa8\xa4F\xb8\xc1\x1az\xda#\xd6f"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    bytes_0 = b"A\xa5oI\x95\x88\x8fW\x89\xf0C\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    none_type_0 = None
    str_0 = "*gE*_ax0v#VQ5M/=Tq"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    bool_0 = True
    int_0 = 403
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    float_0 = 1401.17523
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    int_0 = -881
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    bool_0 = False
    str_0 = "l"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    int_0 = -1013
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    int_0 = -570
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    object_0 = module_1.object()
    bytes_0 = b"u\xb2\x19\xc7\xa7\xb3\xf3"
    bool_0 = False
    int_0 = 1500
    tuple_0 = (object_0, bytes_0, bool_0, int_0)
    dict_0 = {tuple_0: bytes_0, bool_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    int_0 = -3887
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    bytes_0 = b'"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    int_0 = 1396
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    str_0 = "NZzJ!bW7r\\*"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_5454():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5455():
    bool_0 = False
    bytes_0 = b""
    tuple_0 = (bool_0, bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    str_0 = "Njg-wrz60=PwD*mzVnWA"
    module_0.match(str_0, str_0)
