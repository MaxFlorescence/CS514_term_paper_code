# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import token as module_0
import builtins as module_1


def test_case_0():
    int_0 = 1303
    var_0 = module_0.ISTERMINAL(int_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    var_1 = module_0.ISEOF(int_0)
    assert var_1 is False
    var_2 = module_0.ISEOF(var_1)
    assert var_2 is True
    float_0 = 323.0
    var_3 = module_0.ISNONTERMINAL(int_0)
    assert var_3 is True
    var_4 = module_0.ISNONTERMINAL(var_2)
    assert var_4 is False
    var_5 = module_0.ISEOF(float_0)
    assert var_5 is False
    var_6 = module_0.ISEOF(int_0)
    assert var_6 is False
    var_7 = module_0.ISNONTERMINAL(int_0)
    assert var_7 is True
    str_0 = ";(\\+%OZd(*"
    var_8 = module_0.ISNONTERMINAL(var_1)
    assert var_8 is False
    var_9 = module_0.ISTERMINAL(var_7)
    assert var_9 is True
    tuple_0 = (var_0, var_7, var_7, str_0)
    var_10 = module_0.ISNONTERMINAL(var_7)
    assert var_10 is False
    var_11 = module_0.ISEOF(var_0)
    assert var_11 is True
    var_12 = module_0.ISEOF(tuple_0)
    assert var_12 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    list_0 = [set_0]
    list_1 = [list_0, set_0, list_0, list_0]
    module_0.ISTERMINAL(list_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    var_0 = module_0.ISEOF(bool_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    var_1 = module_0.ISEOF(var_0)
    var_2 = module_0.ISEOF(bool_0)
    assert var_2 is False
    var_3 = module_0.ISEOF(var_0)
    var_4 = module_0.ISTERMINAL(var_0)
    assert var_4 is True
    var_5 = module_0.ISEOF(var_0)
    var_6 = module_0.ISNONTERMINAL(bool_0)
    assert var_6 is False
    str_0 = "7kFeK_ze<`.~G^\t\\("
    str_1 = "(;s8LZr"
    str_2 = "%\r<S/f;cO}'"
    var_7 = module_0.ISNONTERMINAL(var_4)
    assert var_7 is False
    dict_0 = {str_0: bool_0, str_1: var_6, str_2: var_7, var_4: var_2}
    module_1.object(*var_0, **dict_0)
