# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import git_push as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"}\xddK\x16/\x8c"
    module_0.match(bytes_0, bytes_0)


def test_case_3():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b".J\x06^\xf0L[m\xda\xcb\xdd-by\xe8\xae3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "%d+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    object_0 = module_1.object()
    dict_0 = {bool_0: object_0, bool_0: object_0, object_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, bool_0]
    tuple_1 = (bool_0, tuple_0, list_0, tuple_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    float_0 = -151.6001
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "&Vx-\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    list_1 = [list_0, set_0, list_0]
    module_0.match(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b"\xee\x18Q,\xe5\x03\x10\x86\xd1\x899\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = " jX2l4CRG\x0bKx"
    str_1 = "p%(mFr>"
    set_0 = {str_0, str_1, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bytes_0 = b"\xc34\x89@e>7\xfd\xb4\xc2\xbb\x81*"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = 'YA2Qv(zOG_RH`?wb"v|'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    float_0 = -568.77497
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    int_0 = 85
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bytes_0 = b"\xbd\x9b+\x0c)\xf0\xcc|"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    float_0 = -1839.2072
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    int_0 = -2054
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bool_0 = True
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_1: bool_1, bool_1: bool_0, bool_1: bool_0}
    module_0.match(bool_0, dict_0)


def test_case_35():
    pass


@pytest.mark.xfail(strict=True)
def test_case_36():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    bool_0 = True
    tuple_0 = ()
    set_0 = {bool_0, tuple_0}
    tuple_1 = (bool_0, tuple_0, set_0)
    list_0 = []
    tuple_2 = (tuple_1, list_0, tuple_0)
    bool_1 = True
    module_0.get_new_command(tuple_2, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_39():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = "kb<"
    bytes_0 = b"\x8c\xdc"
    set_0 = set()
    tuple_0 = (str_0, bytes_0, set_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    int_0 = -2093
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b"\xd8m\xe9\xc4<\x08\xd9\xd3=_\nN"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    bytes_0 = b"\x07\x91\x03\x81\xe3\xc8&Q\xec\xde\x7f}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = "3GY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    bool_0 = True
    bytes_0 = b"\xd4\xf5e=\x9a"
    tuple_0 = (bool_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_49():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    float_0 = -2559.719556
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    str_0 = "tHBA\r%kN/K>od.j"
    bytes_0 = b"p\x89\x84\x07\x03^"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    bool_0 = True
    str_0 = "|b&\rT8D>rHRF\t8"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_54():
    pass


@pytest.mark.xfail(strict=True)
def test_case_55():
    bytes_0 = b"\xeb\x16\xd9\x1ci\x87\x1b.l9\xe2V`"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    float_0 = -895.6152
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    bytes_0 = b"\xb4\x02\x0e\x854"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    int_0 = 988
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    bytes_0 = b"\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    bytes_0 = b"\xe25\xa9"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    int_0 = 562
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.get_new_command(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_64():
    str_0 = "'(mS~H(dXGg1y}o"
    none_type_0 = None
    str_1 = "s=*pJs)"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    float_0 = -663.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    int_0 = -310
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    complex_0 = -1009.2284 + 1553.31708j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    int_0 = 46
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    str_0 = "T-EU_r}}t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    dict_0 = {bool_0: tuple_0}
    tuple_1 = (bool_0, tuple_0, dict_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_71():
    bool_0 = True
    str_0 = "3-"
    set_0 = {str_0}
    tuple_0 = (str_0, set_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    bytes_0 = b"\x80\xd3\x0e\xbeOi\xb0\xcb\x10,&\xc6,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    float_0 = 5518.45
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    int_0 = 551
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    float_0 = 1164.8
    module_0.match(float_0, float_0)


def test_case_77():
    pass


def test_case_78():
    pass


@pytest.mark.xfail(strict=True)
def test_case_79():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    float_0 = -1574.346075
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    bool_0 = True
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    int_0 = -26
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    bytes_0 = b"\xce\xdbLW\xd2\x01\x00\x94\x07\x99\xbeHv\x90\xa4\x96\xce3\xf3q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    float_0 = -5076.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    tuple_0 = ()
    int_0 = -933
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    int_0 = 3171
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    str_0 = "(^O"
    none_type_0 = None
    str_1 = "2o,\\Zx"
    str_2 = ".PW\r4B(u7"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    float_0 = -1176.106953
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    bool_0 = True
    float_0 = -2074.336594
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    bytes_0 = b"\xb4\xcc\xd3\xe2\xf0\xa6|\n\xe9\x11t\xe0\x01\xe8}\xb0)\xb0\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    int_0 = 5519
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    bytes_0 = b"\x1e\xdbd\xc3\x1f\xb0$\x84MJ\x19F\xc8P\xfb\xd1\x19X,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    complex_0 = 6347.25 - 3084j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    float_0 = 3248.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_104():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_106():
    pass


@pytest.mark.xfail(strict=True)
def test_case_107():
    str_0 = "\rf:VP]zUu(=*F6WzIov"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    int_0 = -1515
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    none_type_0 = None
    bytes_0 = b"\x8f$k[jQ\xecaoU\xf6\x12\xeaR\xb9-P\xa8Jc"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = (none_type_0, bytes_0, set_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    int_0 = -74
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    bytes_0 = b"\x86\xd3\xd6\xae\x97\x06\xfc\xba\xe0\xa4\xcf6\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    int_0 = -2970
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    str_0 = "\r 1!\\M3_/EASP{yJ9"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    bytes_0 = b"\xff$\xf8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    int_0 = -2618
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    int_0 = 1259
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    str_0 = "P~L\tY~`Cz}c4"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    float_0 = -3131.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    int_0 = 641
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    str_0 = "?pwV2\x0b?}N'-Xe)HWs'\""
    module_0.get_new_command(str_0, str_0)


def test_case_123():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_124():
    bytes_0 = b"l4\x1bd\xf3\xd0\xa9\x0b\x1eHt\xff(x\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    bytes_0 = b"\xd0"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    bytes_0 = b"M\x9a\x91~\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    float_0 = 2717.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    bytes_0 = b"\xf2-\x8eg\x9cc\xb4\xb4\x1a\xabt\x06\x9a\x0f\xd6\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    list_0 = []
    str_0 = "HsU?"
    none_type_0 = None
    str_1 = "K3O^o.^kP9N&WH\t(5\n|,"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    str_0 = "QE`t^m"
    tuple_0 = (bool_0, set_0, set_0, str_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    bytes_0 = b"\n\xc9%\x80\xd6\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    int_0 = -2395
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    str_0 = "Cq\x0c!.]w<?0<,E=}B8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    int_0 = 902
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    float_0 = 2271.3091
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bool_0 = False
    list_0 = [object_0, bool_0, dict_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    int_0 = -1927
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    float_0 = 1390.198
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    bytes_0 = b"\xa7{|\x84\xec\xb7Y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    bytes_0 = b"\x8eq\xf3O\xc5\xa5D2<\x11%\xaf\x9f\x95\x8fp\xff\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    int_0 = -3055
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    str_0 = ",D^0]]j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    int_0 = -1229
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    complex_0 = 2494.5 + 4362.6j
    int_0 = -6388
    dict_0 = {complex_0: complex_0, int_0: int_0}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    float_0 = -1166.01051
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    float_0 = 32.724208
    list_0 = [float_0, float_0]
    list_1 = [float_0, float_0, float_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    bytes_0 = b"\xe1\xf4i\xa7\x816&\xe0\x0c\xb6\x10\xe0"
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    tuple_0 = (set_0, set_0, bytes_0)
    tuple_1 = (set_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_153():
    int_0 = -2188
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    str_0 = "6jFh*-hdD(fn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    bytes_0 = b"\xbc\xfa7M\x7f\xc5a\xc1\xb7\x14S\x984\xa5\xfc}<,"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    int_0 = -1872
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    str_0 = "Izx5d_neTt29]Jliq;5m"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    bool_0 = False
    float_0 = -339.20386
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    bytes_0 = b""
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bool_0}
    str_0 = "Ya({SVXJXHx0\t#``c"
    tuple_0 = (bytes_0, set_0, bool_0, str_0)
    module_0.match(tuple_0, tuple_0)


def test_case_161():
    pass


@pytest.mark.xfail(strict=True)
def test_case_162():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


def test_case_163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_164():
    bool_0 = True
    int_0 = 3049
    tuple_0 = (bool_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    str_0 = "d`8B#V)d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    int_0 = 592
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    float_0 = 588.405314
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    int_0 = -176
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    bytes_0 = b"_\x96\x81c\xa1\xd7\xea\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    bool_0 = False
    str_0 = ",#P+]C_OYc^"
    set_0 = {bool_0, bool_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    str_0 = "ABU\rQ[NUFnxtQ&X\r\x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    bytes_0 = b"\x04\x93\xc6\x88\xaf\xc8M~\xbe\xc1(\xb1"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    float_0 = 1187.579
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_176():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_177():
    int_0 = 2172
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    str_0 = ">Bae"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(*dict_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    bytes_0 = b"K(_\xf1\x05\x8136\x98\xc0\x8e\x7f\x89\x80\xa9\xe4[\x03\xf2\xad"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    bytes_0 = b"\xbd%t\xdfl8\x9br\x0e\xbe\x01?_\x01"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_181():
    pass


@pytest.mark.xfail(strict=True)
def test_case_182():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    int_0 = 1372
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    int_0 = -3169
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    bytes_0 = b"\x95\xf7\xd5\x96\x02Q\xbf\xfd\xb5\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    str_0 = '"N$c]lI)9_'
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    float_0 = 3630.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_195():
    float_0 = -1128.239387
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    complex_0 = -655.89807 + 330.64796j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    float_0 = 3061.748
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    float_0 = -3185.513523
    dict_0 = {}
    set_0 = {float_0}
    tuple_0 = (dict_0, set_0, dict_0)
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (object_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    int_0 = 2828
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    complex_0 = -4398 + 2220.146493j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    int_0 = 1102
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    bytes_0 = b"\xc4\xd8\x19\xb1\xd7\xab\xb95\xc1q\x1c\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    int_0 = 691
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, dict_0, int_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    str_0 = "QrN55n9:`&:j'"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    bytes_0 = b"\xa7\x1e4\x18V\x01\xd8\xd0\xd8\xd0d\x939\x03\x0cR\x16\xb5V"
    list_0 = [bytes_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0, list_0]
    module_1.object(*list_1)


def test_case_214():
    pass


@pytest.mark.xfail(strict=True)
def test_case_215():
    int_0 = 1166
    str_0 = '"r6Lw'
    dict_0 = {int_0: int_0, int_0: str_0}
    tuple_0 = (dict_0, int_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    int_0 = -2665
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    str_0 = "=/?Z\n;V2ufzQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    str_0 = "RStxTc917"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    int_0 = 613
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    str_0 = "|J<-5B\x0cX5Qe5Vz%\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    int_0 = 839
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    bytes_0 = b"\xce?\xb3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    set_0 = {tuple_0}
    list_0 = [set_0, bool_0]
    tuple_1 = (list_0, bool_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    bytes_0 = b"\x05\x97G\xca\xd6\x02z|\xfa\x1c\xd4\xdc7c9\x0b"
    float_0 = 2242.5
    tuple_0 = (bytes_0, float_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    str_0 = "w~\\D 5'w[f\tRRD2>h-E"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    str_0 = "eh,L7>YSr46i, 7z\x0b=?S"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    float_0 = 2739.076
    set_0 = {float_0, float_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    float_0 = 1716.43237
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    str_0 = "`\\]Q,!C1fa*}-.*rNyn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    bytes_0 = b"\xe9Y\xbbj;\xb9\x8e\xcc\x1b\xae(\xb2[L\x90\xb8\xc0\xda"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    bytes_0 = b"\xa4\xa7\xa8'/\x81\xbe\x0b\x8cU\x96\xacu"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    str_0 = "laqk7fHV<Jnf"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    bytes_0 = b"_\xb2\xa7\xe7F\xc9\xa4\xd4gj}\xcd\xae\x13"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    int_0 = 325
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    bool_0 = False
    str_0 = ""
    tuple_0 = (bool_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    str_0 = '"iZ#`:'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    int_0 = 642
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    bytes_0 = b"\xd5\r\xcd\xe4\x93K\xfb\xbd\x10\xd3xvzR\x88N\x1e\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    str_0 = '&#~h\x0c.*"0dlFk'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    bytes_0 = b"FH6.\xfa\x06\r|\xc7g\xb8\xd9\xa4c\xabx\xae\xc5\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    bytes_0 = b"zx\xb8\xec\xddVvEj\x1b\xce\xdd\x97\xf7\x1d\xeb\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    bytes_0 = b"@\x16\xb6\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    bytes_0 = b"?\x04/\xcdE^\x1dB\xb2\x91\x02X,j\x05\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    int_0 = 1841
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    float_0 = 1438.47018
    dict_0 = {float_0: float_0, float_0: float_0}
    bytes_0 = b"\xaf\x0c\x02$V\xd3\\/?i\x85\xc1I\x03\x9b\xfb?\xe5"
    tuple_0 = (dict_0, bytes_0)
    tuple_1 = (tuple_0,)
    tuple_2 = (tuple_1,)
    list_0 = []
    tuple_3 = (tuple_2, dict_0, list_0)
    module_0.get_new_command(float_0, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_252():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    str_0 = ".8|.*o5-C0!aUO'~0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    str_0 = "U</Dc_\rbeMA3zM/\n2a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    int_0 = 1275
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    bytes_0 = b"0\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    bytes_0 = b"B"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    str_0 = "V2.H`[W+SNScd}8%T@l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    set_0 = set()
    list_0 = [set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    bytes_0 = b"]0cPt\xb1}\x8d\xd2t\x8a5\xbb\xee-\x8fS\x9f\xaa\x06"
    float_0 = 854.4
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    float_0 = 2538.2605
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    complex_0 = -619.445654 + 165.6j
    list_0 = [complex_0, complex_0, complex_0]
    str_0 = "a]9L~h+N\\22S%\t|N(\tk"
    list_1 = [list_0, str_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_263():
    int_0 = 1663
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    bytes_0 = b"\xad\xa6\xe1i\x84\xb4\x86\xc4\xdd"
    int_0 = -260
    tuple_0 = ()
    dict_0 = {bytes_0: tuple_0, tuple_0: int_0}
    tuple_1 = (bytes_0, int_0, tuple_0, dict_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_265():
    int_0 = -490
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    int_0 = 2529
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    bytes_0 = b"\x95\x9f\x01&\xbd||Cy\xef"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    float_0 = 60.203789
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    bytes_0 = b"c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    int_0 = -1320
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    float_0 = -1941.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    int_0 = -406
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    float_0 = -3204.5068
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    int_0 = 931
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    float_0 = -1775.0
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    complex_0 = 4604.986838 - 1253.34j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    bytes_0 = b"\x1a\xe1\x85\xfe\xe0\xa1\x98\x02\x9515X\x94"
    module_0.match(bytes_0, bytes_0)


def test_case_283():
    pass


@pytest.mark.xfail(strict=True)
def test_case_284():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_285():
    str_0 = "O\x0b$|;\t%%"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    bytes_0 = b"Z\x1aC\x02H\x0f\xef\x8e\xc69\xe66\xdb\xf4\xa6\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    float_0 = 1597.0
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    bytes_0 = b"Ws\xdd_\xdaw]\xc1\x86^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    bytes_0 = b"\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    float_0 = 2031.15
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    complex_0 = -778.13 + 2986.90658j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    int_0 = -55
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    bytes_0 = b"IF\xc8\xdfFn\r\x19\x8b\x0fPA"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    str_0 = "TfxV)utUx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    str_0 = "+gLwW<itZvG"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    bytes_0 = b"X\xf2}"
    bytes_1 = b"\xf0\xc1\xfc4].3\x1e\xf0"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_298():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    float_0 = -2599.6368
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    str_0 = "-oF\th{|l\tFga"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    bytes_0 = b"\x8fY\xb9\x08\xac\x8c\xa4k\x95\x89E\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    str_0 = "jJh@VS@(ZR\rGT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    int_0 = -49
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    str_0 = "J[[f\r8s("
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


def test_case_307():
    pass


def test_case_308():
    pass


@pytest.mark.xfail(strict=True)
def test_case_309():
    bytes_0 = b"3\xa3\x00[R\xcfx\xd0"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    str_0 = "7l2w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    str_0 = "v|U hVS+"
    float_0 = 8.614243
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    complex_0 = -1450.6 - 1048j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    str_0 = 'af?\r"Tj4:o'
    str_1 = "kAdm7^UlXAliXfh"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    bytes_0 = b"u\x17/z\xa6\xfb\tx\xb6;\xfb5\xc0\xec\xca\xbb\x15\xa1:\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    str_0 = "LRm5h7fR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    none_type_0 = None
    bytes_0 = b"\xb7l\x9e\xb9\xd0vp8\xb24\xa0@\xa4[\xb1"
    set_0 = {none_type_0, bytes_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    int_0 = -1551
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    str_0 = 'ha-rD\\KB"FiA-$FHC'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    float_0 = -614.716
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    str_0 = ";(J&L%|U"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    int_0 = 3052
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    str_0 = "xdz[qD-?.7M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    object_1 = module_1.object()
    module_0.get_new_command(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_326():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    str_0 = "Egi6\\>%:D$"
    bool_0 = False
    str_1 = "6qs`&\r,YX\r_BPEf"
    int_0 = -253
    dict_0 = {str_0: str_0, str_0: bool_0, str_1: bool_0, str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    bytes_0 = b"\x91<*\xec}\xb9\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    bytes_0 = b"\xa5\x82\xe5\x15d\x80\x9d\x03\xed\x98I\x01P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    str_0 = "^\n,.BOl2Ih"
    bytes_0 = b"\xba\xf6I\xdd\xecC~\xa3|"
    set_0 = {str_0, bytes_0, str_0}
    module_0.get_new_command(set_0, str_0)


def test_case_331():
    pass


@pytest.mark.xfail(strict=True)
def test_case_332():
    str_0 = "'>G~0c\n1Wm\\b*fKx\rL4r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    float_0 = 1927.238168
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    bytes_0 = b"4\x88\xee/\xdaF\xd4N\xa7m"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    bytes_0 = b"Sf\x17Z\xd7\x11\x03C\xdc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    bool_0 = False
    bytes_0 = b"<l"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    str_0 = "h(EsCusKX(A\x0cQV&Gw"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    bytes_0 = b"X\xf4\x18\xe2\xda\xce\xf4v\xceg\xb6\x8d+"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    complex_0 = 213.8479 - 762.323297j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    set_0 = set()
    bool_0 = True
    list_0 = []
    tuple_0 = (set_0, bool_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    str_0 = "\x0cc6"
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, str_0: object_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    int_0 = 854
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    bytes_0 = b"\x1b\xffD\xcd\xa5\xad\x9bj/\xd0\xa5\xe9\xc6?\x84b\x94\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_346():
    pass


@pytest.mark.xfail(strict=True)
def test_case_347():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    float_0 = -1989.65
    str_0 = "V4k?xE\x0b"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    int_0 = 3478
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [int_0, dict_0, dict_0, int_0]
    float_0 = -4138.434
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    float_0 = 1200.699
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    bytes_0 = b"\xccj\xaf\xd8\x15\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    str_0 = "O60RKB<"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    int_0 = -2158
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    bytes_0 = b"\x16"
    bool_0 = True
    dict_0 = {bool_0: bool_0, bytes_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    dict_1 = {bytes_0: bool_0}
    dict_2 = {bytes_0: bytes_0, bytes_0: dict_0, bool_0: dict_1, bool_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    complex_0 = 1003 + 2854.86953j
    module_0.match(complex_0, complex_0)


def test_case_358():
    pass


@pytest.mark.xfail(strict=True)
def test_case_359():
    bool_0 = False
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    float_0 = -95.04
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    int_0 = -172
    str_0 = "27Y"
    tuple_0 = (int_0, int_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    bytes_0 = b"$\x1f\x11y\xb9\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    bytes_0 = b"\xbfg{\xad\xb5{h\xa8j0H\xb3@\xe8w\xcam\xf8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    bytes_0 = b"U\xb1\x9a\x1e+\xc9Yd\xec\x87\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    float_0 = 4395.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    float_0 = -1936.0
    tuple_0 = (float_0,)
    dict_0 = {tuple_0: float_0, float_0: float_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    str_0 = 'R4IC5npV"!j\\oK=m$H'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    str_0 = "^xA:<U-*){P],os?"
    module_0.match(str_0, str_0)


def test_case_371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_372():
    int_0 = 4682
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    str_0 = "u4X^*)go2/1hvzy?.B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    str_0 = '["ApQ+q"{wJ'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    str_0 = "yT*;\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    float_0 = -2703.296
    tuple_0 = (float_0,)
    tuple_1 = (tuple_0, float_0, float_0, float_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    int_0 = -68
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    int_0 = 1125
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    float_0 = -4556.87162
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    str_0 = "wYR/\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    float_0 = 3000.89
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    str_0 = ""
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_384():
    pass


@pytest.mark.xfail(strict=True)
def test_case_385():
    str_0 = "X\\H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    complex_0 = 19.6 - 1906.16j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    bytes_0 = b"X"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    int_0 = -1742
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    float_0 = 477.9
    module_0.get_new_command(float_0, float_0)


def test_case_390():
    pass


@pytest.mark.xfail(strict=True)
def test_case_391():
    str_0 = "C)U"
    set_0 = {str_0, str_0, str_0, str_0}
    float_0 = 669.4
    bool_0 = False
    tuple_0 = (str_0, set_0, float_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    str_0 = ";K\\D%-+]B4e{Xz)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    float_0 = -151.2
    module_0.get_new_command(float_0, float_0)


def test_case_395():
    pass


def test_case_396():
    pass


def test_case_397():
    pass


@pytest.mark.xfail(strict=True)
def test_case_398():
    complex_0 = 1597.09 + 3413.744621j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, str_0, list_0]
    module_1.object(*list_1)


def test_case_401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_402():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "iS\r/\rBhU}C."
    tuple_0 = (bool_0, list_0, str_0)
    str_1 = ".gf\\?l6o\x0c'G{"
    dict_0 = {str_0: str_0, str_1: bool_0}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    float_0 = -120.9432
    float_1 = 359.7
    list_0 = [float_0, float_1, float_0, float_1]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    bytes_0 = b"h^\xa3c\xbd\x0c"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    str_0 = "!=%ob=.WXG%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    bytes_0 = b"\xe5A\xc5V\xd6\xbf\x85\xccP\xd2\xd2pk\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_407():
    pass


@pytest.mark.xfail(strict=True)
def test_case_408():
    int_0 = 1367
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    float_0 = -1720.80002
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    str_0 = "\n@'I$\""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    str_0 = "~?1&L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    bytes_0 = b"Xi\x10\xe0\xd1\xeePC\x9c\x05\xc8\xb4\xbb]\xc99\xc8\xec\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    bytes_0 = b'\xd8"O\xd9\xb3\xb1\x07\xfdW\x11\x17'
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    int_0 = -2043
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    int_0 = 3165
    module_0.get_new_command(int_0, int_0)


def test_case_418():
    pass


@pytest.mark.xfail(strict=True)
def test_case_419():
    str_0 = "vJZB"
    tuple_0 = (str_0,)
    object_0 = module_1.object()
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    str_0 = "BRKcb\x0b]iHq_LA"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    float_0 = 3059.76
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    bytes_0 = b"ZI\xbdqE\xdd=\xe7\x14\xcd\x9a8e\x83\x0c\x8f7\xef\xe5\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    bytes_0 = b"d\xba\x0b\xf3O\xf3u|\xd0V\x0c\x1b\xe1/\xb4\xab\x83\xef\xab"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    int_0 = 372
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_425():
    pass


@pytest.mark.xfail(strict=True)
def test_case_426():
    str_0 = "H+\x0c'cRK%C/:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    str_0 = "kc)c"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    str_0 = '"\\ gjkX"]n-h`&/i'
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    float_0 = 2622.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    str_0 = "m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    int_0 = 91
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    bytes_0 = b"\\2\xdc\xf0\xdb\xeaU\x0f8p\x19\x88$c\x0bq\xd0\xe1\x11\xfc"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    str_0 = "\n"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


def test_case_435():
    pass


@pytest.mark.xfail(strict=True)
def test_case_436():
    str_0 = "|PdNBB8J(2\x0c$k~`Sysfg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    complex_0 = -896.578394 + 2236.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_440():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    str_0 = ""
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    int_0 = -198
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    bool_0 = True
    object_0 = module_1.object()
    list_0 = [bool_0, object_0, object_0, bool_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    bytes_0 = b"y\xdd?\x19\xeaA\xd3\x8cH[\xfa1`4>\xea@\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_446():
    pass


@pytest.mark.xfail(strict=True)
def test_case_447():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_448():
    pass


@pytest.mark.xfail(strict=True)
def test_case_449():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    float_0 = -3252.321738
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    str_0 = "{UXl+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    str_0 = "+b/|"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    dict_0 = {}
    object_0 = module_1.object()
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    complex_0 = 2332.53 - 2453.0982j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    bytes_0 = b"\xb9\x8ahc7\xcc\xce\x86\x9d\x9e\x17B_\xf8E\xc8\xcaD"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bool_0)
    set_0 = {tuple_0}
    module_0.match(set_0, tuple_0)


def test_case_458():
    pass


@pytest.mark.xfail(strict=True)
def test_case_459():
    int_0 = -2062
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    int_0 = -2391
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    float_0 = 1768.733
    str_0 = "|Ve`|"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    str_0 = "aK|&n*i>Xp%"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    float_0 = -1089.0
    object_0 = module_1.object()
    module_0.get_new_command(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    float_0 = 2724.369833
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_467():
    pass


def test_case_468():
    pass


@pytest.mark.xfail(strict=True)
def test_case_469():
    int_0 = -1353
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    int_0 = -2006
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    float_0 = 978.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    str_0 = "=5[#"
    tuple_0 = (str_0,)
    float_0 = -1331.871965
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    float_0 = -1837.26
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    float_0 = 2441.458
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    bytes_0 = b"\x8ewp\t\x97\x08\xaa\xda\x83\x94Q\x9ae\xac\xd7s\xd5d\xbeq"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    bytes_0 = b"\x84\x16\x93\xc75\x95f\xe4\x91y-\x9b)\xe7\xa7po"
    tuple_0 = (bytes_0,)
    str_0 = ",/iXqni\\%"
    bool_0 = True
    tuple_1 = (tuple_0, bytes_0, str_0, bool_0)
    str_1 = "&wI\t"
    dict_0 = {tuple_1: bool_0}
    tuple_2 = (tuple_1, str_1, dict_0)
    list_0 = [tuple_2, tuple_0]
    tuple_3 = (list_0, str_0)
    module_0.get_new_command(tuple_3, list_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    bytes_0 = b"0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    int_0 = 379
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    str_0 = 'ogEg)9pv\n\r3,nO\x0b!_";'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    int_0 = -1667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    int_0 = -1864
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    complex_0 = 436 - 978.67878j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    tuple_0 = (dict_0,)
    bool_0 = True
    tuple_1 = (bool_0,)
    tuple_2 = (dict_0, tuple_0, tuple_1)
    module_0.get_new_command(tuple_2, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    int_0 = 3095
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_488():
    pass


@pytest.mark.xfail(strict=True)
def test_case_489():
    int_0 = -1901
    object_0 = module_1.object()
    module_0.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    bool_0 = False
    str_0 = "dd2\x0baTgRItjIj,A1\x0bE@"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    str_0 = "a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    bytes_0 = b"\x04_\x12\xcc\x1f\xa0d"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    set_0 = set()
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    int_0 = -903
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    str_0 = "q),53Wpt\rw,"
    set_0 = {str_0, str_0, str_0, str_0}
    bytes_0 = b"\x9c\x87\xc9"
    tuple_0 = (set_0, bytes_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    float_0 = -1614.0
    bool_0 = True
    tuple_0 = (float_0, float_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    str_0 = "KL[@]hB\r<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    float_0 = -720.19
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    str_0 = "NRWQZR"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    int_0 = -820
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    str_0 = "]H]T\r_P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    none_type_0 = None
    int_0 = 772
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    str_0 = "h($C"
    set_0 = {str_0}
    bool_0 = False
    list_0 = [str_0, set_0, set_0, set_0]
    tuple_0 = (set_0, set_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    int_0 = 3216
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    float_0 = -204.29994
    list_0 = [float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    float_0 = -4318.789282
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    complex_0 = 3272.409 - 1818.237j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    complex_0 = -2018 + 305.20181j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    float_0 = 1029.270687
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    complex_0 = -785.114997 + 1322j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    int_0 = -2030
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_0, bool_1, bool_1, bool_0}
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_515():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    float_0 = 1079.232834
    module_0.match(float_0, float_0)


def test_case_519():
    pass


@pytest.mark.xfail(strict=True)
def test_case_520():
    bytes_0 = b"\x03\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    str_0 = "s#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    bytes_0 = b"\xfa\xfe\xb6(\x1bV\xf9\xb4\xd9kMW\xd5\xc3\x822\\&\xe0f"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    list_0 = []
    complex_0 = -332.3 - 2571.9793j
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    str_0 = "L8K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    bytes_0 = b"G\x89\x8eE\xba\xd8\x1a}\xb7\xdda[\xabV\x18\x9dRq"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    bytes_0 = b"\x1b\xba\xca\xb9t\xdfr\x96{fQ]\xa8\xdc\xfe+D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    bytes_0 = b"\xfe\xbb\x9f\x92H\x848+$\xdf\x19\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    int_0 = 837
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    str_0 = 'uD"ezXew\tG+aVF'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    str_0 = "\x0cxRd4(P6\\%s_ $("
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    list_0 = []
    bytes_0 = b"\x89\xc8/\xd4\x8d\xbb8{Zj=%.\x89\xef\x1e"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(list_0, tuple_0)


def test_case_537():
    pass


@pytest.mark.xfail(strict=True)
def test_case_538():
    complex_0 = 705.918438 - 929j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    complex_0 = -770.3358 - 168.34958j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    int_0 = 136
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    str_0 = "}X-\x0c@'|\x0c"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    float_0 = -2531.0092
    float_1 = 4481.49207
    str_0 = "\n:;_ =6yR"
    tuple_0 = (float_0, float_1, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    object_0 = module_1.object()
    int_0 = 4373
    set_0 = {object_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    str_0 = '1`"w'
    set_0 = {str_0}
    list_0 = [set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    float_0 = -40.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    bool_0 = False
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    bytes_0 = b"\xdb\xbdw\x14\xc0\xb5\xb9\xed\xbcC\xadT\xf7\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    str_0 = "f\r5wky \x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    bytes_0 = b"\xaf\xff.\xb4\xc5\x87a\x11*\xde\xfc\x0e\x90\x9aFe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    str_0 = " l;0le_`l<, 8m&n!}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    bytes_0 = b"gPE\xda\xa2\xf4\x94\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    float_0 = 3618.201365
    bytes_0 = b",pe"
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    bytes_0 = b"O\xd4\xf1_\xad\xdc\x1dR\xe5\xfa\xd9bP\xc2F\xe4\xd9\x8e\x1cL"
    bool_0 = True
    list_0 = [bytes_0, bytes_0, bytes_0, bool_0]
    list_1 = [list_0, bool_0]
    float_0 = 396.9585
    module_0.match(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    bytes_0 = b"\xcd6\xa0mb\xd3,a\x94"
    list_0 = [bytes_0, bytes_0]
    str_0 = ")"
    dict_0 = {str_0: bytes_0, str_0: bytes_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    str_0 = "svjH17eW{?n6H\ra}\n"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    bool_0 = False
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    str_0 = ":WNB9>-Ipa)Tfdcpe]E"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    none_type_0 = None
    float_0 = 3457.44377
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    int_0 = 985
    set_0 = {int_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    int_0 = -5256
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_565():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    int_0 = -3383
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    str_0 = ":?^"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_568():
    pass


@pytest.mark.xfail(strict=True)
def test_case_569():
    complex_0 = -2838 + 2994j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    str_0 = ",a{+RJF^j"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    str_0 = "Hf"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    bytes_0 = b"\xb1\xb7y;\x8c\xc2\xf5f[\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    float_0 = -1218.54
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    int_0 = 1689
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    int_0 = -852
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    str_0 = "\x0cn5R6BIG\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    bytes_0 = b"\xc4.\xdd\x8c\x86\x17\xfc\x8f\xcb\xc9\xf1C%\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    bytes_0 = b"\xfd\x8f\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    int_0 = -2399
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    bytes_0 = b"\x1fU"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    bytes_0 = b"jt\xc8Vw9\xb1\x9c\x86TIm\xc8\xf55\x18\xa1\n@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    str_0 = "\x0bnhNU%v"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    str_0 = ' fwqt:"Oa _F'
    bytes_0 = b"\x9b\xe5\xbd\xc2\xddCL|o\n\x12\xc3"
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {str_0: bytes_0, bytes_0: str_0, bytes_0: tuple_0, tuple_0: bool_0}
    list_0 = [dict_0, bool_0, str_0]
    list_1 = [list_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_589():
    str_0 = "$\x0bAwu,%9;\rW^b7Ax.*Zh"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    bool_0 = True
    int_0 = -1447
    bool_1 = True
    int_1 = -2595
    tuple_0 = (bool_0, int_0, bool_1, int_1)
    dict_0 = {bool_0: tuple_0}
    module_0.match(bool_0, dict_0)


def test_case_591():
    pass


@pytest.mark.xfail(strict=True)
def test_case_592():
    str_0 = "c$0LV{%\nkB7<'p@-M^"
    bytes_0 = b"\x10ph\xf6 \xf7V"
    set_0 = {str_0, bytes_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    int_0 = -2786
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    float_0 = 1254.0
    int_0 = 179
    tuple_0 = (float_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    int_0 = -674
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    str_0 = '/! >Lu<9?r"uvk#_'
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    int_0 = 2369
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    str_0 = "\\'#s48M}T"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    str_0 = "8\n>@PzX7gr :u]UI$2?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    float_0 = 1263.468
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    str_0 = "S7r1>L4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    int_0 = 1305
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    float_0 = -2615.641414
    int_0 = 421
    tuple_0 = (float_0, int_0)
    object_0 = module_1.object()
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    str_0 = "5t\t*,9?e5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    str_0 = "EJ9zN|HG%g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    float_0 = -1776.3688
    object_0 = module_1.object()
    dict_0 = {float_0: float_0, float_0: object_0, float_0: object_0, float_0: object_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    str_0 = ']^2)UL"i]Y!D0=70\r"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    complex_0 = -1301.5 + 2606.6j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    int_0 = -2262
    module_0.get_new_command(int_0, int_0)


def test_case_613():
    pass


@pytest.mark.xfail(strict=True)
def test_case_614():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    complex_0 = 1082 + 3204.91j
    str_0 = "izS:;T.dh}"
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    float_0 = -2946.2151
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    bytes_0 = b"Q\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    bytes_0 = b"\xbf\x94\xe0\xf4\xf6ek\x92\xaf \x823\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    str_0 = "S0Oogl$;`u"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    bytes_0 = b"\xc2\xa1\xcf\x03\xaaa@s\xbajm\x92_\x95\x9a\xe1\xa8\x9d$d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    bytes_0 = b"z\xa5pF\xe4V\x83[@\xa6SU\xa9m{\xfcl\x88\xdd\x10"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    float_0 = 1063.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    str_0 = "Bv_(<"
    int_0 = 1328
    dict_0 = {str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    int_0 = 2302
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    bytes_0 = b"\xed\xc3\xb5\xcd\xf1\x9d\xdf=\xa0E5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    bytes_0 = b"\x10\\\xf6F\xd9\xe0\xc9^\xe2\xef\x87/\x1e\x9bs4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    bytes_0 = b'\x7f\xd4\xd5\x92"\x91_\xb15`'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    str_0 = "%|wR\nga\t[x>--R"
    module_0.get_new_command(str_0, str_0)


def test_case_631():
    pass


@pytest.mark.xfail(strict=True)
def test_case_632():
    int_0 = 1060
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    str_0 = "1O/ btx\nt\rRZDLmV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    complex_0 = 3776.7 - 433.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    float_0 = 220.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    float_0 = 1467.75232
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    list_0 = []
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_638():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    bytes_0 = b"\xd7\xa5Z\xb9\xd6\x80\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    str_0 = "9a0R}7[f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    bytes_0 = b"\xf6z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    int_0 = 2169
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    float_0 = 1912.56
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    str_0 = "\rJx,7OAd\rRoE.(9\x0c]\x0cN<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    bool_0 = False
    complex_0 = -2899.859428 - 812.116j
    set_0 = {bool_0, complex_0}
    list_0 = [set_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    complex_0 = -388.169 - 1298.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    int_0 = 3873
    bytes_0 = b"\xa6\xb2\x9aK\xfb\xc8\x8d\x06\xf5\xdc<<\xac\xfd3o\xa9"
    tuple_0 = (int_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_649():
    pass


@pytest.mark.xfail(strict=True)
def test_case_650():
    int_0 = -338
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    float_0 = 307.1
    tuple_0 = ()
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    int_0 = -2566
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_654():
    pass


@pytest.mark.xfail(strict=True)
def test_case_655():
    bool_0 = False
    str_0 = "]l"
    str_1 = "H["
    str_2 = "yi:ulcP`2w.#&{j';s]e"
    dict_0 = {str_0: bool_0, str_1: str_0, str_2: str_1, str_1: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    bytes_0 = b"\xd4\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    bytes_0 = b'\xfa5-"\xdem\x95\xb9\x1f\xb2\xb3\xcf7\xb6\xa7\xb6-'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    int_0 = -1438
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    bool_0 = True
    set_0 = set()
    list_0 = [set_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    bytes_0 = b"9\xed\r\x9f'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    str_0 = "D\rs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    bytes_0 = b"\xd75\xac"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    bytes_0 = b"\xaa\xab\xcf\x90\xf2\xfex\xc6\xddf\xe7\x9c~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    str_0 = "j*s*%R\\8=0"
    float_0 = -2511.7298
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    str_0 = "TQ30V}B2*9*4\\19"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    int_0 = 3452
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    int_0 = -267
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    int_0 = -1229
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    bytes_0 = b"\xd9\xf4\xff(\xc5\xcd\xaf\xb0\xc6.4\xa1\xacF^*\xc0t\xf6\xea"
    int_0 = -2020
    set_0 = set()
    float_0 = -3089.59
    tuple_0 = (bytes_0, int_0, set_0, float_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    tuple_0 = ()
    set_0 = {tuple_0}
    str_0 = "G]o.}[vg\"C\\,7'N"
    float_0 = 433.63019
    tuple_1 = (set_0, str_0, float_0, str_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    bytes_0 = b"\x9f\xb9\\O\xbe\xa2R\xbe.\xa7}\xc8z"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    float_0 = -2721.8071
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: bool_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    str_0 = "w88]z1 ;C$"
    str_1 = "q1ec0`\t"
    int_0 = 3595
    str_2 = "@}k8[#'("
    str_3 = "'mF"
    dict_0 = {str_0: str_0, str_1: int_0, str_2: str_1, str_3: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    str_0 = "\nkF%n8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    int_0 = -1934
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    bytes_0 = b"w\xcf\xd5\x11\x89F\xa7\xd4\r\xf6\xc2\x92Y;\x83\x05 \x18"
    set_0 = {bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    str_0 = "Jh@F~2_<aZvY'Hd7|"
    set_0 = {str_0}
    list_0 = [set_0, str_0, set_0, set_0]
    list_1 = [list_0, set_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    bytes_0 = b"\x087\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    bytes_0 = b"k\xbf@\xcc\xf5}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    str_0 = "{-lN\r-]#Z<,:Q$Zl_w_>"
    module_0.get_new_command(str_0, str_0)


def test_case_688():
    pass


@pytest.mark.xfail(strict=True)
def test_case_689():
    float_0 = 924.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    bytes_0 = b"{&\xfc\x1e\xc4\xf8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_692():
    pass


@pytest.mark.xfail(strict=True)
def test_case_693():
    int_0 = 683
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    float_0 = 1342.85
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    str_0 = "^"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    bytes_0 = b"\xff\xf3"
    complex_0 = -732.112 - 146.95626j
    set_0 = {bytes_0, complex_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    bytes_0 = b'\xf8\xc4\x90"n\x08\xa4\xc4\x86\xc6\xc2\xb7$\xd3\x1eh5U\xa3'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    bytes_0 = b"\xa5\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    bytes_0 = b"\xc1\xf8\x93\x9dR\x95\x9f\xaa\xa6PT"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    float_0 = 2131.93
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    int_0 = -2881
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    float_0 = 293.76655
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    float_0 = -2736.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    complex_0 = -2867.5 - 1923.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    str_0 = "\x0ct)[k0ji[b`@0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    int_0 = 158
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_709():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_710():
    int_0 = 261
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    int_0 = 1821
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    str_0 = "h,>U^hIX*m=/V"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    str_0 = "X(r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    int_0 = 14
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    int_0 = 1598
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    str_0 = "J\\\x0b\r+(Ozsqjkl)>G:e"
    int_0 = 2966
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    str_0 = 'k8, 7xqT"I.?uX'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    int_0 = -2293
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    complex_0 = 417.71 + 1973j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    int_0 = -560
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    str_0 = 'N"~J5Tye'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    int_0 = -2022
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    float_0 = -41.8931
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    bytes_0 = b"\xfe\x08\xbb\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    int_0 = 1582
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    int_0 = 2781
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_1.object(*list_0)


def test_case_733():
    pass


@pytest.mark.xfail(strict=True)
def test_case_734():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    int_0 = -3187
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    bytes_0 = b"\xd6'6\x17|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    str_0 = ",R2"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    str_0 = "U0"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    int_0 = -1321
    dict_0 = {int_0: int_0}
    bool_0 = False
    tuple_0 = (int_0, dict_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    bytes_0 = b"\xfa}2\xfa\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    int_0 = 3441
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    int_0 = -2489
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    bytes_0 = b"fJj\x95\x97D\x92N\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    int_0 = 2878
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_748():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    complex_0 = 1184.0813 + 1974.57j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    bytes_0 = b"\xffI\x04\xc1\x1b\xab$):\xf7w\x13T\xdf\xbf.\xea;\x86\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    complex_0 = 770.13311 + 1058.279j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    bytes_0 = b"1K{/\xce\xe6s\r\xd1:\xd6A>w\x18}\xf3\xacv"
    float_0 = -5875.4
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    bytes_0 = b'\xa0\x04\x94B\x8e\x8bN\xd8\xa4\x9c"8A\x98,\x08\xae\x98'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    str_0 = "c"
    int_0 = 1235
    tuple_0 = (str_0, int_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    complex_0 = 1012 + 1207.726923j
    set_0 = {complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    bool_0 = True
    str_0 = "["
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    bytes_0 = b"\xfd\xccaR\xdd*3\xe0\xc2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    str_0 = "y91Wp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    int_0 = 2240
    tuple_0 = (int_0,)
    str_0 = "u<+j$5wVHE0t+3\n6"
    tuple_1 = (tuple_0, str_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    bytes_0 = b"\x8c\x8c\xc5\xc3\xfa\x9a\xf5\xd6\xe2&\xbb\xe5\xd1HX"
    list_0 = [bytes_0, bytes_0]
    str_0 = 'U]r"t'
    str_1 = "\\"
    dict_0 = {str_0: list_0, str_0: bytes_0, str_1: str_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    int_0 = -1684
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0, int_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    float_0 = 1151.155966
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    str_0 = "Frn\tv"
    str_1 = "~>M++2dez*"
    str_2 = "Y."
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    int_0 = -77
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    str_0 = "N($m=\rvA`phWK6"
    int_0 = 3531
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    int_0 = 1583
    dict_0 = {int_0: int_0}
    dict_1 = {int_0: int_0, int_0: int_0, int_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_772():
    bytes_0 = b"M\xc5$\xea,\xe3o\x85\xf7\xc9!pj\x04\xabu@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    str_0 = "\tLOvGC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    int_0 = -692
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    bytes_0 = b"\x1d$#\xffq\xbcn\xdb\xa9\x82\x9e\x15\xdb\xee\x0e\xfe')\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    str_0 = "s4t^/`kxC3"
    module_0.match(str_0, str_0)


def test_case_777():
    pass


@pytest.mark.xfail(strict=True)
def test_case_778():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_779():
    pass


@pytest.mark.xfail(strict=True)
def test_case_780():
    str_0 = "38$<&\x0bj^1M\x0b5cPE\\oW=%"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    float_0 = 1810.119929
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    set_0 = set()
    tuple_0 = (dict_0, set_0, float_0)
    tuple_1 = (float_0, float_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    float_0 = 1855.62
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    str_0 = "Vw6M^U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    str_0 = "t3(ko=R 8$a6j"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    int_0 = -1893
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    bytes_0 = b"\xddY:\x8d\x9dJ\x1e\x15l"
    module_0.match(bytes_0, bytes_0)


def test_case_788():
    pass


@pytest.mark.xfail(strict=True)
def test_case_789():
    str_0 = "BwD?K6iI.SJwX}!\x0bvn`!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    bytes_0 = b"k\xc4\x91v\x7f\x14\xec\xf8JV\xe3T!\xc0\xa7c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    int_0 = -4801
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    str_0 = "`=c\t~b$:Lg6Cxits)1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    bool_0 = True
    tuple_1 = (dict_0, bool_0)
    module_0.match(tuple_1, bool_0)


def test_case_797():
    pass


@pytest.mark.xfail(strict=True)
def test_case_798():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_799():
    object_0 = module_1.object()


def test_case_800():
    pass


@pytest.mark.xfail(strict=True)
def test_case_801():
    bytes_0 = b"n\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    int_0 = -207
    str_0 = ".qf9g"
    dict_0 = {int_0: int_0, int_0: str_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    str_0 = "mUZQciCwLg]/>CW"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    complex_0 = -2233.38 - 3011.643j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    int_0 = 124
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    int_0 = 3417
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    str_0 = "fZ\n< )e1M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    none_type_0 = None
    float_0 = -2949.48958
    tuple_0 = (float_0, float_0)
    module_0.match(none_type_0, tuple_0)


def test_case_809():
    pass


@pytest.mark.xfail(strict=True)
def test_case_810():
    bytes_0 = b"\x85\x1a\x98"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    str_0 = "w7@Q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    str_0 = "^aT"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    bytes_0 = b"\x85_\xd3b\xdb"
    float_0 = -1800.39
    tuple_0 = (float_0,)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: tuple_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    int_0 = 2045
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    str_0 = "F@>;OA ?qP_NB,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    str_0 = ";W-$+vx'2\\Baf3YdLc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    str_0 = '=Y6"D/6q~'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    int_0 = -1368
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    str_0 = "M%WxvZ1"
    module_0.get_new_command(str_0, str_0)


def test_case_823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_824():
    str_0 = " ,xiEzf-X<7**-g=IV$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    bytes_0 = b"\xc5{\xe7TM\xb0\xcf\xdc\x0f-`8f\xe1"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    bytes_0 = b":\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    str_0 = "b_*9(fXeK~)+"
    module_0.match(str_0, str_0)


def test_case_830():
    pass


@pytest.mark.xfail(strict=True)
def test_case_831():
    list_0 = []
    list_1 = [list_0]
    list_2 = [list_1, list_0, list_0, list_1]
    none_type_0 = None
    module_0.match(list_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    str_0 = "\x0c\x0c\x0c{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    int_0 = -2717
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    int_0 = 370
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    bytes_0 = b"\x9d\xf6\x17;\x8e\x16\xfa\xaf\xcb\x98\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    float_0 = -1576.8603
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    int_0 = -4772
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    str_0 = "`^V=8\x0b\x0csa9yye3[Q\rDn"
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    bytes_0 = b"uB\xc3\x8c\xb9\x8e/\xb3\xa4\x1bmM\x9f\x13\xc6\xa2\x1c\x9bvO"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    float_0 = 912.99
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    bytes_0 = b"N\x1c\x16\xc4\x99n\xefO\xaa\t\xc4\xce\x99\x97\xde\xd9\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    float_0 = 1159.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    str_0 = "k 3[)pc~@ \\3L[ Y"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    bytes_0 = b"\r\x1f\xb2\xdf\xe5U\xf0\xc2\xd5x"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    int_0 = -96
    list_0 = [int_0, int_0, int_0, int_0]
    bytes_0 = b"E\xab|\xe2=!\xf2\xdf\xbe\xb5\xfe\xfb=?-\x80\xd0"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    int_0 = -2367
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    bytes_0 = b"!\xbc\x80n\xf5\x99\x15\xb1\x06\xa3\xf5\x9d\xad8lE"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    complex_0 = 1046.295321 + 1183.43j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    str_0 = "!w"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    str_0 = ",T4h5Mpf>A4x9"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    str_0 = "buFxw>1#0V&\"Q'jxc"
    set_0 = {str_0, str_0, str_0}
    bool_0 = False
    dict_0 = {str_0: bool_0, bool_0: bool_0}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    int_0 = -1921
    module_0.get_new_command(int_0, int_0)


def test_case_856():
    pass


@pytest.mark.xfail(strict=True)
def test_case_857():
    str_0 = '.(\rDIxZK9F3T?yD">f6'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    str_0 = "A\x0b)DTh}Y``Z\n:v/rtpC("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    bytes_0 = b"\x14\xeb\xf4\x00 F\xc0$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    bytes_0 = b"V\x1a\xb6\xd0$\x86\x94\x0b\x049\xa4\x8eG\xb9A?\x1e\xce"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    int_0 = -837
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    int_0 = -87
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    float_0 = 2315.13
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    int_0 = -649
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    bytes_0 = b"\xe9\xe3\xfd\x15\xefs\x03c\xd2\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    float_0 = -1026.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    complex_0 = 1302.402005 + 6138.68j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    complex_0 = 3631.91 - 402.2169j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    int_0 = -540
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    bytes_0 = b"Y\xae\xda\xd6W\xc6\x97\x15\xafU\r"
    list_0 = [bytes_0, bytes_0]
    bool_0 = False
    float_0 = 958.4
    tuple_0 = (list_0, bool_0, float_0)
    list_1 = [tuple_0, list_0, bool_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    complex_0 = -781.75 + 1659.82j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    bytes_0 = b"1\x92\xb8,\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    int_0 = -1307
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    int_0 = -2165
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    complex_0 = 2211.641241 - 79.16j
    complex_1 = -2115 - 702.01j
    dict_0 = {complex_0: complex_0, complex_0: complex_1, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    int_0 = -194
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    bool_0 = True
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    str_0 = "8:o"
    module_0.get_new_command(str_0, str_0)


def test_case_887():
    pass


@pytest.mark.xfail(strict=True)
def test_case_888():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    str_0 = "<{c~FcyT;}E=Myc"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    int_0 = -2604
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    bool_0 = False
    str_0 = "w6W"
    tuple_0 = (bool_0, bool_0, str_0)
    module_0.match(tuple_0, bool_0)


def test_case_892():
    pass


@pytest.mark.xfail(strict=True)
def test_case_893():
    float_0 = 2431.5165
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    float_0 = -994.71009
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    bytes_0 = b"\xfd\x12,>\x9e\x92\xfaf\xa6/e\xdb\xc6\x9el\x9eP\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    str_0 = "y[cvnw(dT\r'UPlI$6`u"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    str_0 = ":$@q9@e*6o"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    float_0 = 2415.33732
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    bytes_0 = b"&Y\xc0\xaa\x12\xebv;\xb1\nlw"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    int_0 = -1005
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    bytes_0 = b"\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    float_0 = 362.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_904():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_905():
    int_0 = -1346
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    int_0 = 1680
    str_0 = ""
    set_0 = {int_0, int_0, int_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    float_0 = -112.636978
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    int_0 = 243
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    bytes_0 = b"\xac\xdd\x83\xb5b\xec\x82j3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    list_1 = [tuple_0, bytes_0, tuple_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    bytes_0 = b"p"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    str_0 = "eHz"
    bytes_0 = b"\xa8\r"
    dict_0 = {str_0: str_0, str_0: bytes_0, bytes_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    none_type_0 = None
    complex_0 = 307.50961 - 789.775j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    str_0 = ","
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    tuple_1 = (str_0, dict_0, tuple_0, dict_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_914():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = False
    list_1 = [list_0, bool_0, bool_0, bool_1]
    tuple_0 = (list_1,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    bytes_0 = b"\x92\xa07\xa7\x16\xd4\x98\x83\x8e\x13|@^\x8b\xe2\x82\x89\xcc\xa8s"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    bytes_0 = b"\x10\xd3\xbcK"
    bytes_1 = b"8\xd7\xbc\x1f{#\xe0\xdb"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_918():
    str_0 = "Kv\tWY90?2<Td?WKX5#PC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    str_0 = ";7fd"
    module_0.get_new_command(str_0, str_0)


def test_case_920():
    pass


@pytest.mark.xfail(strict=True)
def test_case_921():
    str_0 = "AY#[N*NbWC"
    set_0 = {str_0, str_0}
    list_0 = [set_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    int_0 = 2056
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    float_0 = 783.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    int_0 = 2886
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    int_0 = 1986
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    complex_0 = 2190.3225 - 882.957575j
    bool_0 = False
    tuple_0 = (complex_0, bool_0)
    list_0 = [tuple_0, complex_0, complex_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = "9K/F\tb-yQ\x0c4u\x0b9u}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    list_0 = []
    str_0 = "<SQv8\x0c()l>"
    none_type_0 = None
    str_1 = "zg\t L!IgRZ/\r\r\\"
    str_2 = "1C>;+_w(=lz("
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    int_0 = -99
    module_0.get_new_command(int_0, int_0)


def test_case_932():
    pass


@pytest.mark.xfail(strict=True)
def test_case_933():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    int_0 = 494
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    float_0 = 1205.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    bytes_0 = b"\x1d\x93\xc1\xd0Xi5)\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    str_0 = 'y2f.A.p`~/O4s"2!'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_941():
    pass


@pytest.mark.xfail(strict=True)
def test_case_942():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    none_type_0 = None
    bytes_0 = b"\x8fB\xf5"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    float_0 = -2501.531
    str_0 = "u<|5B\x0c4(Sev9oTB%"
    str_1 = 'j!1CV\x0boq\r%\\5"5k\n_p:R'
    dict_0 = {str_0: float_0, str_1: str_0}
    module_1.object(*float_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    complex_0 = 89.1 - 1047.8j
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    int_0 = 1148
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    float_0 = 171.95659
    module_0.match(float_0, float_0)


def test_case_948():
    pass


@pytest.mark.xfail(strict=True)
def test_case_949():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    str_0 = "D)qF\x0ceP!}BO;F,qp<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    bytes_0 = b"\x11\xc46:\xf35W"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_952():
    pass


@pytest.mark.xfail(strict=True)
def test_case_953():
    str_0 = ":N?02cLKa\t6,v]8Mz}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    str_0 = "<gvDKdEY+)e\t0EHG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    str_0 = "0[$b!%`Nei\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    bytes_0 = b"\xd1\x90\x9d\x04%\x83\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    float_0 = 1008.0349
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    bytes_0 = b"\x80\x10{\xc0\xbd\x04\xa8\xeeC\x1b\xa2\xcax\x10z\x99\x8c\xe5"
    module_0.match(bytes_0, bytes_0)


def test_case_959():
    pass


@pytest.mark.xfail(strict=True)
def test_case_960():
    int_0 = 690
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    str_0 = "e|U3f+,"
    set_0 = {str_0, str_0, str_0}
    list_0 = []
    float_0 = -1698.00222
    tuple_0 = (list_0,)
    tuple_1 = (list_0, float_0, tuple_0)
    list_1 = [set_0, tuple_1]
    str_1 = '6"<o2a7?8|$n'
    bool_0 = False
    tuple_2 = (set_0, list_1, str_1, bool_0)
    module_0.match(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    int_0 = -2201
    bytes_0 = b"V\xa33\x1b\xd8\n\x87*\xd6\xc1d\xa0\xdcS\x7f%"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    bytes_0 = b"\xb6\xb5I\xfa<\x82^9p\xae'\x06"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    float_0 = -926.72639
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    float_0 = -827.28
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    str_0 = "SY?@3<T#`QG1H5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    int_0 = -1946
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    int_0 = -2635
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    str_0 = "9$C6io6:z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    int_0 = 1258
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    int_0 = 1022
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    float_0 = -3325.09
    set_0 = {float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    int_0 = 5178
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    float_0 = -925.7666
    list_0 = [float_0, float_0, float_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


def test_case_979():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_980():
    int_0 = 472
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    str_0 = "r/LT3u\tQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    int_0 = 476
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    bytes_0 = b"\xba\xb2Mx\xa2\xef\xd1\xf1\x9e."
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    int_0 = 2857
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    str_0 = "M<2hm]eK%\nY+^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    bytes_0 = b"9\xc7\xbb\xc7\xc7\x9c\xb8f\xc1Ar\xb4t\xac\x0f\xf9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    complex_0 = -1382 + 1339j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    float_0 = 79.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    float_0 = -1048.586
    int_0 = 377
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    float_0 = -2654.242137
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    int_0 = -56
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    int_0 = 2373
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    complex_0 = -2296.02253 - 584j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    str_0 = "~2^(n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    bytes_0 = b"\x94\x9c4\x8b;\xf7+\x02\t\xac\xbe(\x1e\x99\xc9\xf4\x1e1\xfa\xf2"
    str_0 = "auG"
    tuple_0 = (bytes_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    bytes_0 = b"\xab\x0fa&\x87\xa1\xf2\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    str_0 = "Qb+2-,JP#D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    str_0 = "G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    int_0 = -1034
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    str_0 = "Rc:(Fp1$eeaM3\x0cZ(\r-}4"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    str_0 = ")gwKm<%8pWx)g<4\rl|oV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    str_0 = "sFR-^'?"
    int_0 = 1065
    dict_0 = {str_0: int_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    bytes_0 = b"\x19\x1c\xd1L\x8fnJ\x02\x15J=\xfa\xbb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    complex_0 = -286 + 2339.371j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    int_0 = -290
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    str_0 = ";UK*]U({Y`l\nJ_)q}8\rA"
    module_0.get_new_command(str_0, str_0)


def test_case_1014():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1015():
    bytes_0 = b"\x01n\xf6\x0e}\x1d3"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    str_0 = "'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    int_0 = -610
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    int_0 = -1403
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    bool_0 = False
    str_0 = "\n)ZRJ_\r\r9q>b';E?"
    set_0 = {bool_0, str_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    float_0 = -2404.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    object_0 = module_1.object()
    float_0 = -1880.1095
    bool_0 = True
    tuple_0 = (float_0, float_0, bool_0)
    bool_1 = True
    tuple_1 = (object_0, tuple_0, bool_1)
    module_0.get_new_command(object_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    bytes_0 = b"\xa4\xb4\x0b\xd5L\xe7\xf9z\x0f\xe0\x0c\xb6\x0f$"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    float_0 = -1571.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    bytes_0 = b"R:"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    int_0 = -5179
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    str_0 = "#\r<g;6W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    complex_0 = -116.42747 + 3192.28j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    complex_0 = 3439 - 4264.5j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    int_0 = -3203
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bytes_0 = b"\xb3\xea\x9f\xa5\x86)\x88h\x1cE\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    int_0 = 132
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    float_0 = -3376.6612
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    int_0 = 297
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    bytes_0 = b'\x93\x12h\x0b"\x16\x01Y@\x1b\xe9\x12\x97%\x95'
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1038():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1039():
    int_0 = -316
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    bytes_0 = b"S\xfc\x865\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    bytes_0 = b"ja"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    complex_0 = 1630.6981 - 1259.3642j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    bytes_0 = b"\xf8J\xfd3\x98\n\xa70\xc1&"
    str_0 = "GZJM).A"
    tuple_0 = (bytes_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    bytes_0 = b"X\xc3"
    int_0 = 1128
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    int_0 = -1246
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    bytes_0 = b"p\x00\xab\xc1V\xe9\x1c\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    int_0 = 646
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    str_0 = "Ym~QubTf2b^iu6\x0b4e0"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    complex_0 = -16.56762 - 3643.497j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    int_0 = -212
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    str_0 = "7[H=\x0cp;9@TL~6~pXFb"
    str_1 = "/*"
    str_2 = "Bk/SOztDrWx|Q(pu"
    dict_0 = {str_0: str_1, str_2: str_0, str_1: str_0, str_0: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    str_0 = "Q/^sD]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    set_0 = set()
    list_0 = [set_0]
    tuple_0 = (set_0, set_0, list_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    bytes_0 = b"\x077\xe7\xe8u*81#\xb9\xfee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    str_0 = "(AVlU1"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    bytes_0 = b"x"
    bytes_1 = b"\xb8^\xc9\x87\xdb\xf2\xfd?|Bq\xea\xcen<\x0f\xa4<\xa7"
    tuple_0 = (bytes_0, bytes_1)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    int_0 = -3934
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_1064():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1065():
    float_0 = -935.92988
    str_0 = "Z"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    int_0 = 775
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_1067():
    pass


def test_case_1068():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1069():
    bytes_0 = b"\xb0\xd39\x80\xc1\xccL&\xed\xaf\xe5\xa5\xb3v\x19\x1d\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    bool_0 = True
    bool_1 = True
    object_0 = module_1.object()
    dict_0 = {bool_0: bool_1, bool_1: object_0, object_0: bool_1, object_0: object_0}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    int_0 = -3843
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    str_0 = '>:"67IV)+fy'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    bytes_0 = b"\x87\xc3\x87\x88"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1075():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1076():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    float_0 = 3184.12
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    bytes_0 = b"\xea\x04\x01}\xc0\x91pd\xe21\xf0"
    str_0 = "!fV57cO\x0bzL:p(<)|%gE"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, str_0: str_0}
    bool_0 = True
    list_0 = [dict_0, bool_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    int_0 = -2806
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    str_0 = "{GE93"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    bytes_0 = b"kQ\x9b#\xbd\x14\x87\x99\xa3]\\\xd1\xca;\x0b"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    float_0 = -1287.6456
    object_0 = module_1.object()
    list_0 = [float_0, object_0, float_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    int_0 = 507
    set_0 = {int_0, int_0, int_0, int_0}
    set_1 = set()
    module_0.get_new_command(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    int_0 = -323
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    none_type_0 = None
    str_0 = "F={"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    str_0 = "&X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    int_0 = 544
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    bool_0 = False
    float_0 = -1618.0
    tuple_0 = (float_0,)
    tuple_1 = (bool_0, tuple_0, bool_0)
    str_0 = "tA1HH"
    list_0 = [tuple_1, bool_0]
    tuple_2 = (bool_0, tuple_1, str_0, list_0)
    module_1.object(**tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    int_0 = 168
    bool_0 = False
    set_0 = {int_0, int_0, bool_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    bytes_0 = b"S\xe4,\x88\xd2H\xf3\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


def test_case_1096():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1097():
    float_0 = -790.304381
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    int_0 = -376
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    complex_0 = 1315.245 - 918.1903j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    float_0 = -433.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    float_0 = 1399.8759
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    float_0 = 317.33
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    int_0 = -2564
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    bytes_0 = b"\xba\x82$\x9f\x1d\x0c*5i\xb97d\xc9k"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    bytes_0 = b",\xbc\xc9\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    bytes_0 = b"\xbd1\x13|Q\x07-\xaf~\x9eY\xf52\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    int_0 = -170
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    str_0 = "t[BvYg$C_I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    bytes_0 = b"a\xd7\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bytes_0 = b"\xb9\x01\xf2g\xd8\xb5V'\xe0\x08(~~`\xb7p\xa7f\x97"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "|W1"
    int_0 = 2292
    tuple_0 = (bytes_0, dict_0, str_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    bytes_0 = b"\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    int_0 = 340
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    str_0 = ";%uk#X*$8H&l5t"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    list_0 = []
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    bytes_0 = b"\xf5\x86\xc62\x11`"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    int_0 = 1344
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    bytes_0 = b"\x91Ow\xecjR\xden\xc8U1WpX'\x00\x15"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    int_0 = 178
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    bytes_0 = b"0)\x8a"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    int_0 = -2982
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    list_0 = [dict_0, object_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    float_0 = 4139.399288
    list_0 = [float_0]
    bytes_0 = b"\x01\xa2\xc8N\xf1<\xff\x06&LJu"
    bytes_1 = b"N\xe0\xf5Zm"
    tuple_0 = (float_0, list_0, bytes_0, bytes_1)
    module_0.match(tuple_0, list_0)


def test_case_1125():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1126():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    int_0 = -2730
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    int_0 = -3300
    module_0.match(int_0, int_0)


def test_case_1129():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1130():
    bytes_0 = b"w\x98\xfb\xf0\x94\x89\x84}\x03'eJ"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1131():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1132():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    int_0 = 1150
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    int_0 = -262
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    int_0 = 4234
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    str_0 = "T1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    int_0 = -2279
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    int_0 = -2563
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    bytes_0 = b"$;\xe6\x8d\xe5n\xde\xe0\xf1{\xc9\xee\xabt\xc3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.object(**dict_0)


def test_case_1143():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1144():
    int_0 = 3150
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    int_0 = 3923
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    int_0 = 541
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    int_0 = -617
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    bool_0 = True
    bytes_0 = b"\x95"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    bytes_0 = b"\x8b\xe5\x18\x11"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    dict_0 = {}
    float_0 = -1090.584228
    list_0 = [dict_0, dict_0, float_0, dict_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    tuple_0 = ()
    str_0 = ')L*0"Nl]6,bz4'
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    str_0 = "Z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    bytes_0 = b"\xd9o\xf8Q\x9f\x8fP\xfd\x91t\xdc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    bytes_0 = b"s"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    float_0 = 2606.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    bytes_0 = b"F\xaa\x1e\xbd\xcc4\x17E\x83\xb8\x8b\xa5\xfd\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    list_0 = [tuple_0, bool_0, tuple_0, bool_1]
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    float_0 = -779.0609
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    str_0 = "R &8.lp4W0O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    bytes_0 = b"!\xf6nT.2 (v\x86_g\xfe/\x9b\xfb\x84"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    float_0 = -1282.656775
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bytes_0 = b"\xf7\xfc \xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    int_0 = -1937
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    str_0 = "HT8;-Y5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    float_0 = -3273.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    str_0 = "!sh."
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    bytes_0 = b"]F'\xfc\x86\x07\xd0a\x0f\x8b\x9c\xa1\xd1\xf61\xfb=\xf0\xe5\xbb"
    dict_0 = {}
    bool_0 = False
    tuple_0 = (bytes_0, dict_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_1172():
    pass


def test_case_1173():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1174():
    str_0 = "HQs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    str_0 = "\n\rAX-a.Qy\x0c=9]}T^2$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    str_0 = ">m4^kGR'RGAr)Mv%H"
    module_0.match(str_0, str_0)


def test_case_1177():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1178():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    bool_0 = True
    list_0 = [bool_0]
    int_0 = -1662
    set_0 = set()
    tuple_0 = (bool_0, list_0, int_0, set_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    str_0 = "kO&UYuU-e@m,h.E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    int_0 = -2022
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    str_0 = "}Vf\\bnCQ"
    bool_0 = True
    bool_1 = True
    tuple_0 = (str_0, bool_0, bool_1)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    int_0 = 4478
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    float_0 = -1102.5344
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    float_0 = 287.67939
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    str_0 = "rb3$6?]A!K.2[{p9 iV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    float_0 = -575.658
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    int_0 = 2370
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    float_0 = -1898.113373
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    bytes_0 = b"Rg\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    int_0 = 4011
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    list_0 = []
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    int_0 = -1882
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    bytes_0 = b",\xc5\x15\xbf\xee\x1f\xd15\x9fh\xb03\xbb\x82\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0]
    tuple_0 = (bool_0, set_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    int_0 = -3557
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    bool_0 = False
    bytes_0 = b""
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    bytes_0 = b"\xbb;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    str_0 = "V@3K/,gLDH"
    int_0 = -262
    str_1 = ""
    str_2 = "O~X^h_-;\\NX.5Nd"
    dict_0 = {str_0: str_0, str_0: int_0, str_1: int_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    bytes_0 = b"=\n&\x1c\r\xd1*"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    bytes_0 = b"\xf5\xbdO\xa6UuS.\xfb\\`\xf7\x7f\x05@8\xdc\xce\x88\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    complex_0 = -1810.94325 - 2259.6498j
    bool_0 = False
    dict_0 = {
        complex_0: complex_0,
        bool_0: complex_0,
        complex_0: bool_0,
        bool_0: complex_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    int_0 = -2756
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    str_0 = "]xU2c\t/Jt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    int_0 = 845
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    float_0 = 1604.6922
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    float_0 = -341.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    bytes_0 = b"\xbf\x19\x12\x8aA\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    str_0 = "zK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    bytes_0 = b"'\x12\x90\xe5\xea\xbeYa\x19\x15\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    int_0 = -1063
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    list_0 = []
    object_0 = module_1.object(*list_0)
    set_0 = {object_0}
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    int_0 = 879
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    int_0 = -404
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    int_0 = -2470
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    str_0 = "'~LBw$S:\"\tR/;cJ"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    float_0 = -5754.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    complex_0 = -1215.9 + 1318.835813j
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    float_0 = -4096.04
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    bytes_0 = b"\xfe\xc0T8\x82\x8e\x96\xe6\xe6\xbdy\x10\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    bool_0 = True
    bytes_0 = b"\xaa\xf93X\x9bK\x9f\xc3l{O\x17\x89<\x1e\xe1"
    tuple_0 = (bool_0, bytes_0)
    dict_0 = {}
    tuple_1 = (tuple_0, bytes_0, dict_0, bool_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    str_0 = "cA]E5z03Iet_"
    int_0 = 1968
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    bool_0 = False
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    bytes_0 = b"\xcd$\x1f\xae\x9f#iu\x8e\x02x\x19\x9bF-\xae\xa0\x08\xa8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    bytes_0 = b"[E\xd7\xd8,V%\xa1\xbf0\x13v\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    float_0 = -1753.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    complex_0 = -267.089 + 2512j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    int_0 = -2059
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    tuple_0 = ()
    bytes_0 = b"9];z\xda\xa6\x94\xd8"
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bytes_0 = b"\xac\xc0B"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    float_0 = -1603.079336
    list_0 = [float_0, float_0, float_0, float_0]
    str_0 = "5XFHA]vOj~\\"
    none_type_0 = None
    str_1 = "_\x0c|"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    int_0 = 1956
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_1243():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1244():
    bytes_0 = b"'\x9f8\x12\xbd\x98\x18\xe2h{0\xc1l\x89\x1bn\x14\x0b\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bytes_0 = b"\x0c5\xe3a\xb7\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    str_0 = "MOL`*_!)\r8+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    str_0 = "8LU2&\\j,pVZ,V!"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    complex_0 = -338 + 193j
    tuple_0 = (complex_0,)
    bytes_0 = b"\xf5\xcdN2FC\xa6's"
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    bytes_0 = b"\x19\x7f6\x9a\xd2\x8b\x80*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    int_0 = -1336
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    int_0 = -937
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    bytes_0 = b"\x07\xd6\x95[np\xa0\xd0\x99\xc9\x94\x13\x0fw\xb9W\x9bo\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    bytes_0 = b"\xa1\xcf\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    float_0 = -804.879
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    bytes_0 = b'(\xa2\xbe\xb3\xc5K\xa8\x81\x8a\x82L\x9445"\x8ab\x7f'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bytes_0 = b"\x9dF\xb8\x91\x1aB\xb7\xd5\xb5\x831q"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    bool_0 = True
    dict_0 = {}
    list_0 = [bool_0, dict_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    int_0 = -1138
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    int_0 = 2379
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    bytes_0 = b'\x90VQ\xcf\x8e-\x1a\xc9\xe3\x93"\xb4WXJ\x9c\xae\xd4'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    complex_0 = 936.7 - 1534j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    str_0 = "M/kV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    int_0 = 640
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    float_0 = -6017.6325
    float_1 = -1438.89
    module_0.get_new_command(float_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    str_0 = "S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    int_0 = -1739
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    bytes_0 = b"\x07."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    str_0 = "\\R86&q\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    bytes_0 = b"t\x99\xd4K"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bool_0 = True
    tuple_0 = (bool_0,)
    int_0 = 700
    set_0 = {tuple_0, int_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0, tuple_0)
    list_0 = [tuple_1, tuple_0]
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    float_0 = 2045.31524
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    float_0 = 3594.0
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1280():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1281():
    bytes_0 = b'\xdb>"'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    object_0 = module_1.object()
    bool_0 = False
    tuple_0 = (object_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1283():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1284():
    str_0 = "oiz\nGJ$lqx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    float_0 = -1272.65
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    list_0 = []
    module_1.object(**list_0)


def test_case_1287():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1288():
    str_0 = "ea7r\tDa[^l9f"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    int_0 = 2055
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    float_0 = -2353.638
    int_0 = 1682
    tuple_0 = (float_0, int_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    list_0 = []
    str_0 = "izvHd\rR4Ve#?he"
    str_1 = "NdsksCi\x0cj"
    str_2 = ".k(g2p!%gN;{"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    float_0 = 1587.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    bytes_0 = b"1\r\x038\x95\xf5\xcdy\xaaJ\xb2\xfc1]]%\xa0\x9c"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    int_0 = 1687
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    str_0 = "uf.Gl?O@ Ce@7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    bytes_0 = b"\x82\xf5\xb3\x14R!\x03\xfe\x07VC\xa1\xa2\xcc\t\xa5O"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    str_0 = 'SCvE"6<d4'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    int_0 = 772
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    complex_0 = 629 + 461.1j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    bytes_0 = b"\x92\x15\xf0\x85\x12"
    int_0 = 229
    tuple_0 = (bytes_0, int_0)
    list_0 = [tuple_0, bytes_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    int_0 = -812
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    int_0 = -54
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    int_0 = -1046
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    str_0 = "?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    complex_0 = -1406.707 + 681.708j
    bytes_0 = b"sa\xc8\x0b\xf9\xd8J\xc3\x9d\xc4p\xfd"
    dict_0 = {complex_0: complex_0, bytes_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    int_0 = -4075
    module_0.match(int_0, int_0)


def test_case_1313():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1314():
    int_0 = -1297
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    bytes_0 = b"\xce\xfd,2e\xc5\xa3\xe6\xef\xe1\xbaj\x0b\xc9\xe9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    int_0 = 1844
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    bytes_0 = b"\x1e]\xfc\xf0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    str_0 = "~_gJxcAzfe"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bytes_0 = b"\x910\x80\xaa5["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    complex_0 = -2325.91426 - 450j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    int_0 = 467
    module_0.get_new_command(int_0, int_0)


def test_case_1323():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1324():
    float_0 = 197.825
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    str_0 = "@\x0c#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    bytes_0 = b"5\x9e \xb0\xb4B"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    bytes_0 = b"\xbc\xaf\x8dS\xbd~\xaa_\x8b\x18"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    str_0 = "+o>C#RD(^q`W\r=pd(xQ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    float_0 = 1591.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    int_0 = -735
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    str_0 = "roz_%)nK6R"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    str_0 = ",klX,&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    int_0 = -1566
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1337():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    float_0 = -282.848
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    str_0 = "CP\rn#/tcEsy"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    int_0 = -1314
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    str_0 = "M\x0cCvpT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    int_0 = 3556
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    bytes_0 = b"\xb6\x90\x8d\xfb\xe1d\n\x92\xdf\x05\xacW~\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    float_0 = -1212.522402
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    str_0 = "b327nMT5{AFc\x0bN:rp[9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    bytes_0 = b"Wh\x80\xedN\xe9z\xf2*~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    str_0 = "=vRot: 8]\tgcw5b8"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    bytes_0 = b"\xc6S"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    complex_0 = 375.3 + 2225j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    str_0 = "&of"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    int_0 = 388
    set_0 = {int_0, int_0}
    list_0 = [set_0, int_0]
    bool_0 = True
    str_0 = '"Kg2m6Jgw}}'
    tuple_0 = (list_0, bool_0, list_0, str_0)
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    int_0 = 867
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    int_0 = 435
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    int_0 = 280
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    complex_0 = 502.4 - 4362.82489j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    str_0 = "WB\rf-"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    float_0 = 719.3
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_1.object(*list_0)


def test_case_1365():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1366():
    float_0 = 1035.59
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    float_0 = -1231.0
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    bytes_0 = b"\x97\xabB"
    dict_0 = {bytes_0: bytes_0}
    float_0 = 1049.7
    int_0 = -776
    list_0 = [float_0, float_0]
    tuple_0 = (int_0, list_0, bytes_0, list_0)
    float_1 = 2813.005
    set_0 = {bytes_0}
    tuple_1 = (tuple_0, float_1, set_0, list_0)
    tuple_2 = (bytes_0, dict_0, float_0, tuple_1)
    none_type_0 = None
    module_0.match(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    int_0 = 282
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    bytes_0 = b"\x92\xfdj\xdd\xf9\xa2\xae\xc8\xad\xe1\xcd\xf3\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bytes_0 = b'?ob\xd677\n"\x1d\x8c%\xe2\xa0\xc4\xb2'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    float_0 = 1780.1712
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    int_0 = -781
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    float_0 = -973.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    int_0 = 282
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    bytes_0 = b"\x18\xa6\xb3\xa6\x8e\x96kF\xb9lUGx\x0f\xc8\x1f\x8b["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    int_0 = 643
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    int_0 = -1245
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    str_0 = 'b\ta2 "EY|\nI|'
    module_0.match(str_0, str_0)


def test_case_1382():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1383():
    str_0 = "A-gEW+58&3AjP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    str_0 = "vN(_NS%f}M\x0csTW2F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    int_0 = -1942
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    str_0 = "2QRcfcz_3n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    str_0 = "T!?SeM3]by\\&.NAd82N"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    float_0 = 2167.437348
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    bytes_0 = b"m\xe0\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    str_0 = "N-#%+@\r3+6ZewM"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    complex_0 = 1869 + 1073.425996j
    set_0 = {complex_0, complex_0, complex_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    str_0 = "D+|'D<h9"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    str_0 = "^ k'q2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bytes_0 = b"o"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    bytes_0 = b"5i\xe6\xc2\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    bytes_0 = b"\x1c\xe7\rg'S\xbec"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


def test_case_1402():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1403():
    int_0 = -1814
    dict_0 = {}
    tuple_0 = (int_0, int_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


def test_case_1404():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1405():
    none_type_0 = None
    str_0 = "O5"
    list_0 = [str_0, str_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    int_0 = 595
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    bytes_0 = b"\x82\xc6_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    tuple_0 = ()
    bytes_0 = b"\x1f<,}\x04"
    bytes_1 = b"cs\x95\x96\xa7\x99.\xca\xe5I+\xd1\x07\xba"
    set_0 = {bytes_1}
    tuple_1 = (tuple_0, bytes_0, set_0)
    module_0.match(tuple_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    int_0 = 2760
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    float_0 = 748.4739
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    float_0 = 1178.316295
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    float_0 = -2584.033155
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    bytes_0 = b"u\xa9\xb9\xb9UV\x110\x9aE\xeeJ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    float_0 = 312.57266
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    str_0 = "d~?W"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    bytes_0 = b"\x01\xa26\xbb\xdb\x18\xec&$S\x0e\xf0"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


def test_case_1419():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1420():
    str_0 = "@F4`"
    int_0 = -2064
    dict_0 = {str_0: str_0, int_0: str_0, int_0: str_0, str_0: str_0}
    bytes_0 = b"\xe3\\\xca\xe1\xd4\x96\xa2\x98\xda3GZ\x1dq\xf7"
    tuple_0 = (dict_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    int_0 = -1337
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    str_0 = "GU!T8\\Odx`3K//.HX"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, str_0, str_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    bytes_0 = b"\xd5\x11\x98v6\t|\x04[\x98\x1f\x81+"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    bytes_0 = b"i\xa8\x07\ti\xaf\xcf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    str_0 = "iawDpP%G\x0b8Er\\("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    int_0 = 1749
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    int_0 = -1844
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    bytes_0 = b"\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


def test_case_1430():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1431():
    str_0 = "m9oZGsd^TtQ_r>\x0bqs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    int_0 = -862
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    bytes_0 = b""
    tuple_0 = ()
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    int_0 = -3537
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    bytes_0 = b"\x81\xa18b\xd1,[\xf8t\xc0\xc8\x8cW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    int_0 = 1597
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    list_0 = []
    module_0.match(list_0, list_0)


def test_case_1440():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1441():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    bytes_0 = b"\xde\xbd\xde~\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    str_0 = "L9\\8|X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    bytes_0 = b"\x9a\xfa\xe9\xae\xcd\xd4\x03\xaf\x11\n#s\x83>y\xb7T\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    str_0 = ""
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    complex_0 = 1562.851863 - 1155.15712j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_1448():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1449():
    float_0 = 2060.9
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    bytes_0 = b"o@Uc$\x92\xe7\x02\xab\x80\xa4\x81V\xb4\xa9H\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    int_0 = -580
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    tuple_1 = (set_0, tuple_0)
    module_0.match(tuple_1, list_0)


def test_case_1454():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1455():
    int_0 = -1370
    tuple_0 = (int_0,)
    list_0 = [int_0, int_0, tuple_0]
    tuple_1 = (tuple_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    complex_0 = 1260.2446 + 1551j
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        tuple_0: tuple_0,
        complex_0: tuple_0,
    }
    tuple_1 = (dict_0, bool_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    float_0 = 2437.39251
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    int_0 = -2311
    bytes_0 = b"\x81"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    str_0 = "&Y+GNUCqaWWV1.=k@1L`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    bool_0 = False
    bytes_0 = b"h5,\x16\xa8jDWeR\x97f\xb0\x1cLa)=\xf6"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    bytes_0 = b"\xcfYb\xa7\xbdT"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1463():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    float_0 = -2591.516
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    float_0 = -2552.329
    set_0 = {float_0, float_0}
    list_0 = [set_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    str_0 = "Lh"
    set_0 = {str_0, str_0}
    bytes_0 = b"\xf7>"
    tuple_0 = (set_0, str_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    bool_0 = False
    int_0 = -1060
    list_0 = []
    tuple_0 = (bool_0, int_0, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    int_0 = -1454
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    complex_0 = -5000.87 + 584.266j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    int_0 = -1792
    str_0 = "a]\rwPW+9$y9'6b<j z\n"
    tuple_0 = (int_0, str_0, str_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    bytes_0 = b"\xd0\xf9\xee\xbc &\xc0\x8c\x9cV\x8e\xda^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    float_0 = -5066.28728
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    int_0 = -492
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    int_0 = 3725
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    float_0 = 1205.09795
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    float_0 = -807.026
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    str_0 = "B2va}Ic"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    set_0 = set()
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    int_0 = -4976
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    int_0 = -1018
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    str_0 = "^"
    module_0.match(str_0, str_0)


def test_case_1485():
    pass


def test_case_1486():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1487():
    bytes_0 = b"\x15"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    bytes_0 = b"\x05\xb9P\xc4\xaa\xce>p\xc4\xe7|\xa7H"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    complex_0 = -1298.3645 + 2773.4402j
    set_0 = {complex_0}
    module_0.match(set_0, complex_0)


def test_case_1490():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1491():
    float_0 = 7096.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    float_0 = -2164.531
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    str_0 = '1Q0wjik_x["L\r\r'
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    int_0 = 2060
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    bytes_0 = b"o\xa6w\x90\xb6\xca\xab\x03R\xb8\xdc^\xdaM\x83\x01n\x9c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    str_0 = "^_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_1499():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1500():
    str_0 = "|cA_]w~abl`JQ*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    float_0 = -2852.123
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bool_0 = True
    float_0 = 279.2829
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_1504():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1505():
    int_0 = -2028
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    str_0 = ">]/{3$hM<uUxB4\t:-}h"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    str_0 = "EX\t#\t,;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    str_0 = "y3Qm:X\tR>4)'\t:vB0L^"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    str_0 = "{u!uwD-m'|\\xH]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    bytes_0 = b",f\x1b&\xbe\x92==\\}\xe1\x90\x1c\xe0\xb8\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    str_0 = 'mM?Z~?K=3"&mDd<%%'
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    float_0 = 1194.2
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    float_0 = 3747.834
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    float_0 = -2944.14
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    str_0 = "j>_T(bkPa>[-THcqGE&<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    str_0 = "bMj\x0c58~?(]J:"
    bytes_0 = b'c\xc6\x00\xeb\xaf08V"\xadZ\xf3\x17\x86\x9c'
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    int_0 = 1300
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    int_0 = -453
    module_0.match(int_0, int_0)


def test_case_1521():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1522():
    str_0 = "C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    int_0 = 64
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1525():
    dict_0 = {}
    str_0 = "(Pteo,q&P&J:"
    set_0 = {str_0}
    bytes_0 = b""
    tuple_0 = (str_0, set_0, bytes_0, str_0)
    list_0 = [dict_0, dict_0, tuple_0, dict_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    str_0 = "M"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


def test_case_1527():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1528():
    bytes_0 = b"&\x0b\x88\x05\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    int_0 = -2007
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    int_0 = -846
    module_0.get_new_command(int_0, int_0)


def test_case_1532():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1533():
    str_0 = 'fgasI~"z}\\O'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bytes_0 = b"\x1ef\x0c\xa8\xf1\xe5\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bool_0 = False
    bytes_0 = b"\xef\xc9p\xcb\xa3l\xfb\xba\xd3$\x19\xf6%+\xf1\xf3"
    module_0.get_new_command(bool_0, bytes_0)


def test_case_1536():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1537():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


def test_case_1539():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1540():
    int_0 = 53
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    float_0 = -1229.0
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_1542():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1543():
    float_0 = -2313.3923
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    int_0 = -2762
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    bool_0 = True
    bytes_0 = b"f?\xd0\xc4B\xdb\x0e"
    list_0 = [bool_0, bytes_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_1547():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1548():
    bytes_0 = b"xl\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    float_0 = -49.0
    module_0.match(float_0, float_0)


def test_case_1551():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1552():
    str_0 = 'x9l[G- "BE'
    tuple_0 = (str_0,)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    int_0 = 4436
    set_0 = set()
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    bytes_0 = b"\xfd\xdf\xd4@\x8a\x94#\xaa\xc8uP\xec\xf6H\r"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_1555():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1556():
    int_0 = -107
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    int_0 = -420
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    int_0 = -3594
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    float_0 = -1733.718011
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    int_0 = 2366
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    bytes_0 = b"\xf0\xc8wg\xa6\x88\x9b\xcb\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    str_0 = ">4\tEGPP2"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    float_0 = 3634.484358
    module_0.get_new_command(float_0, float_0)


def test_case_1564():
    pass


def test_case_1565():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1566():
    complex_0 = 1952.00371 + 1938.9j
    tuple_0 = (complex_0, complex_0, complex_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    str_0 = "em"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    str_0 = "+#7(p)'\x0bF5CSTRc("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    str_0 = "EyYd:\\E^FD$3acQ h"
    module_0.match(str_0, str_0)


def test_case_1571():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1572():
    str_0 = "M,{dM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    str_0 = "8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    int_0 = 1246
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    bytes_0 = b"O/\xae;\xe0\xc2\xb509\xa7\xb5\xd8m\xfa\xa4B\x9b3\xfc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1576():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bytes_0 = b"\x8d)B\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    int_0 = -1731
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    bytes_0 = b"-\xd3AgPp\xdb\xb5\xcbi\xd39[\xd3\xa7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    bytes_0 = b"z\xfby\xaa'\xdc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    bytes_0 = b"\xd0\x0c\x86\x93\xda\x0br\x90"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    bytes_0 = b"\xbbw[\xbf\x97L\xa8H"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    int_0 = -4816
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    int_0 = -2419
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    int_0 = 449
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    int_0 = -1338
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    bytes_0 = b"p\xdc\x85\xc5\xbc\x81\xc0;\x057\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bytes_0 = b""
    tuple_0 = (bytes_0, bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    complex_0 = 1416.37 - 59j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    complex_0 = 1913.11 - 2094.8523j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    str_0 = 'g_f89#"<;)_2,8=+s'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    float_0 = 1997.933
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    str_0 = "cK?},)xp{\rF]M}\t3It."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    bytes_0 = b"\x08\xca\xb3\xfbW\xfa\x98\xc3\xa5B\x0fP\x86\xceU\x93\x92\xa5c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    int_0 = 180
    float_0 = 1716.479
    tuple_0 = (int_0, float_0)
    set_0 = {tuple_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    int_0 = 413
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    float_0 = -125.378
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    int_0 = -971
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


def test_case_1602():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1603():
    str_0 = "gx+v"
    str_1 = "0#x\x0c"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1}
    module_0.match(dict_0, dict_0)


def test_case_1604():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1605():
    bytes_0 = b"N\x05\xd8In\xe1\x81"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    str_0 = ""
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    str_0 = "k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    int_0 = 2350
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    float_0 = 674.83
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    bytes_0 = b"\x07\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    str_0 = "gJ-;nH\x0cuE7>&hqNH=v/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    bytes_0 = b"e\xa6&\xd5:N\r\x0eV\x11Yo\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    str_0 = 'Y?CuZ"hARqb]'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    bytes_0 = b"?\xb7\xefo\xfe\xc5"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    set_0 = {tuple_0, bool_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    complex_0 = -398.8617 + 232.1j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    int_0 = -1634
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    int_0 = -1555
    module_0.get_new_command(int_0, int_0)


def test_case_1619():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    float_0 = -1102.57
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    complex_0 = -1834.822257 + 782.24546j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    bool_0 = False
    str_0 = "CS.g .1t"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    bytes_0 = b"G\xdf\x16qB0\xe6\xa7\x8e\xe5\xb2N\xb0\xb4\xdejN"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    float_0 = 3487.0
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    float_0 = -3527.85948
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    int_0 = 661
    str_0 = "O mvP!0w #UAwO,4+es"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    bytes_0 = b"Pf"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1629():
    pass


def test_case_1630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1631():
    bool_0 = True
    int_0 = 1614
    set_0 = {bool_0, bool_0, int_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    str_0 = "S_<-T->=yO\nFo5"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    bytes_0 = b'H/"\x82\x06f\xad\x0c\xae'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    set_0 = set()
    int_0 = -517
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    str_0 = "r3{LpSBa:|66ArH"
    module_0.match(str_0, str_0)


def test_case_1638():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1639():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_1640():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1641():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    complex_0 = -3133.959 + 2904j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    complex_0 = -1411.607598 + 3554j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    float_0 = -1530.0611
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    str_0 = "Xr|"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    int_0 = 2040
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_1650():
    pass


def test_case_1651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1652():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    tuple_0 = ()
    float_0 = 670.012
    tuple_1 = (tuple_0, float_0, float_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    float_0 = -2302.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    int_0 = -322
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    bytes_0 = b".\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    float_0 = 2087.45
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    float_0 = -4546.4
    bytes_0 = b""
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    bytes_0 = b'97\xb6\xa4\xc5s\xccL"\xec\x15n\x92\xfe'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    float_0 = -1597.5458
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    float_0 = 4077.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    bytes_0 = (
        b"\xaa]\xc4\xd1\xef\xc1\xe0\xc0\xe3\x81\xf9\xca8\x88\xe5\x1f\xc8\xad\xf1\x11"
    )
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    str_0 = "@o3%jS/%7lRj)OC6OWz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    float_0 = -30.22818
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_1666():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1667():
    int_0 = 52
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    int_0 = -376
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    int_0 = -1819
    list_0 = [int_0]
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    int_0 = -719
    module_0.get_new_command(int_0, int_0)


def test_case_1671():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1672():
    bytes_0 = b"T\xc92B\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    int_0 = 758
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    str_0 = "XR,n%l]V;GuU[k3O4r_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    complex_0 = 790 + 2972.932323j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_1678():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1679():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_1680():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1681():
    str_0 = ".8=JabWJ&tZM4!i"
    module_0.match(str_0, str_0)


def test_case_1682():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1683():
    str_0 = "bk\x0ce'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    str_0 = "\rs+r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    float_0 = 2547.52738
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    str_0 = "C,A!v@qrLdJ |EU|"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    int_0 = -2140
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    str_0 = "\tC(:.cd(u03q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    set_0 = set()
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    int_0 = 298
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    int_0 = -1167
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    int_0 = 227
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    bytes_0 = b"@t@>\xa5\xf9Pg\xd7\x8a\xb1]=\xd5\xaf\x8f\x90\xf5\xcc\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1695():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1696():
    bytes_0 = b"U]^\xa7\xc05\xc2\x93MF\x95C\x10\xab\x16\xec"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    int_0 = 5401
    bool_0 = True
    list_0 = [int_0, int_0, int_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_1698():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1699():
    bytes_0 = b"\x8b\xe8I\xac\xb9\xee\xf2\x0f\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    int_0 = 2389
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_1703():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1704():
    str_0 = "Y=' .l4k=c"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    str_0 = "2e\x0bo8sQr\x0cpu\rJ,;CGh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    str_0 = "/z:>mC@Tj~"
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0,)
    set_0 = {tuple_1}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    int_0 = 4766
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    str_0 = "$\\e&\x0c3\tjGZ2Mr!u"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    str_0 = "3IPif?#Dw'=kQiV~v(`^"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    int_0 = -11
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    int_0 = -1094
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    int_0 = 1964
    str_0 = '"7@bM'
    str_1 = "^\te\n$u<XxNDVoB\n~'N7h"
    dict_0 = {str_0: int_0, str_0: int_0, str_1: str_0}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    str_0 = "Gs5~\t*9oI=#Qz"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bytes_0 = b"\xa2\x95\xfa"
    module_0.match(bytes_0, bytes_0)


def test_case_1718():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1719():
    int_0 = 1512
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    none_type_0 = None
    complex_0 = 1652.9 + 2617.652j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    int_0 = -4541
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    int_0 = 28
    list_0 = [int_0, int_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    list_0 = []
    str_0 = "v|n9,3]tHr\r>xBodQ"
    tuple_0 = (list_0, str_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    int_0 = 47
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    float_0 = 1625.34086
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    str_0 = "LnrjZH41,!nMi$|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    int_0 = -1163
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    bytes_0 = b"\xbc\x84\xadU/\x83c\x16:\x17\xdb\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    bytes_0 = b"U6\xab\x0c\x93\x04\x1c\x08K\xe0\x1al6\xe5\xa5\xa2~\xfd"
    int_0 = 2486
    set_0 = {int_0, int_0, bytes_0}
    tuple_0 = (int_0, set_0, set_0)
    str_0 = "E/,|M#u\x0c3yl^sDkF"
    tuple_1 = (bytes_0, tuple_0, int_0, str_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    str_0 = "<C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    int_0 = 303
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    bytes_0 = b"\xde\xbeA\x10\x14P$\x8a*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bytes_0 = b"w\xa3\xd1'\xc5\xac\x19Bm\xe1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    bytes_0 = b"\xa9\x88\xa8\xbf\x02Q\xe6\x84*\xa5=\xc9q\xf0b\xfe/^\xeb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    bytes_0 = b"\xb3\xd6\x8b\xe48\xd2\xf9\xb0/\x1b\xc7\xba\xd7\xb9\x88\x97O \xa8A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    int_0 = 1653
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    bytes_0 = b"\xebgq\xf8\xadO\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    int_0 = -1551
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    bytes_0 = b'\xd5\xac"\xcbZ\xb6\xdc\xa8\xbdm\x0cU\x0fd\xa1\xf4\xfa'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bool_0 = True
    list_0 = []
    bytes_0 = b"T`\xeb\xeb\xf2-\xed9\x88w\xab"
    set_0 = {bool_0, bytes_0}
    tuple_0 = (list_0, bytes_0, bytes_0, set_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    bytes_0 = b"\x9c\xca\x93\xe6\xa6\xb1\x1d"
    object_0 = module_1.object()
    set_0 = {bytes_0, object_0, object_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    str_0 = "L1n.ccU^pp@IwgyLt\x0c/`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    str_0 = "K2++c^EF>Z6$RbR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    float_0 = 927.87277
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    str_0 = "~z)_\nh&G!/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    str_0 = "lN/H-zhl'Ms/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    bytes_0 = b">\x86\xeb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.object(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    str_0 = "Kq4{+<rXTo=$"
    str_1 = "1p"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    bool_0 = True
    float_0 = -1583.969
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    str_0 = "H?`SPD';H~'/]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    float_0 = -813.69
    bytes_0 = b"\xad\xc2\xdb\xfe\x8f[,\xe2l*\xc9_:"
    set_0 = {float_0, float_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    int_0 = -3184
    int_1 = 1092
    bool_0 = False
    tuple_1 = (set_0, int_0, int_1, bool_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    bytes_0 = b"\xceO\x01\x06[\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    bytes_0 = b"\x1f\xf7\xaa\xf8\x97"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    str_0 = "(x~iQ1TCEwKx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    float_0 = 1599.2155
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    complex_0 = -329.7 - 349.9437j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    complex_0 = 546.574 + 898.268137j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    bool_0 = False
    bytes_0 = b"\xb6\x074#=a\x9bJ6\x1e\xf7I\xbf\xda\x18\xa8"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    float_0 = 1895.467
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    str_0 = "Hzr\rK-u"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    float_0 = 993.31
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    bytes_0 = b"\xedK\x8fo\xb2\x06\xac~\x96Htr<g"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    bytes_0 = b"L\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1777():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1778():
    int_0 = -1968
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    int_0 = -470
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    float_0 = -3516.41273
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    bytes_0 = b"\xeaA\x12\xed\xaf\xa1I\xae\x15\xcar\x14b\x9c\xa6\xd2\x9ew\x89"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    str_0 = "a\t)%`+\x0b\x0b{MO)Vy{"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_1783():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1784():
    str_0 = "|I3_L:p'd0*'x^T|"
    module_0.get_new_command(str_0, str_0)


def test_case_1785():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1786():
    float_0 = -94.438
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    str_0 = "AKee"
    str_1 = "^9}J7GvrNa"
    list_0 = []
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_1: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    float_0 = 151.534
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    bool_0 = False
    bytes_0 = b"\xf4D\x9f"
    tuple_0 = (bool_0, bytes_0, bool_0)
    bool_1 = True
    bool_2 = False
    tuple_1 = (tuple_0, bool_1, bool_2, bytes_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    int_0 = 1216
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    str_0 = "'\n}\r:x7wy*ka/&8AKTYL"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1793():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1794():
    bytes_0 = b"\x1f\xbe`\x918P"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    complex_0 = 5164 - 817.22401j
    int_0 = -4547
    module_0.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    complex_0 = -279.53 - 1485.98808j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    str_0 = '7\x0c"CSGe,r>+'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    complex_0 = 818.924732 - 1545.68482j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    bytes_0 = b"\xe1\x07f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    str_0 = "(?x\rJf& Z]^B0&r`o"
    str_1 = "7|\\E=Hzw]$[Mu\r^K"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    float_0 = 19.0507
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    bytes_0 = b"\x18\x8b\x0c\x14\xf1\xbfr\x99\t(\x9d\xb5\x07zk"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bytes_0 = b"\xbeL\xd9\xd1\x8d\x9c\x81\x1e\x8dz\xc1\xce\xf3\x07"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    bytes_0 = b"\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    int_0 = 3440
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    int_0 = 19
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    bytes_0 = b"~\x95\xee\xcc[\xf3K\x9dpT\xd3\x84$\xde|\x9f\xf1h\xa6\x9f"
    int_0 = 3130
    bytes_1 = b"\x88i\xad@/\x1c\xb1\xdd"
    dict_0 = {bytes_0: bytes_0, int_0: bytes_0, bytes_0: int_0, bytes_1: int_0}
    int_1 = 540
    tuple_0 = (dict_0, bytes_1, int_1)
    float_0 = -2391.9672
    tuple_1 = (bytes_0, tuple_0, float_0, bytes_1)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    bytes_0 = b"\x0c\xff\xee\x16\x8d\ta\x04K\x9f>\x95GL\xe1\xdb\xfa\xd6\xad\xf2"
    module_1.object(*bytes_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    bytes_0 = b"\x06\xfbA\x9c\x9alT"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    float_0 = -197.714443
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    str_0 = "@\tE<9>Cm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    bytes_0 = b"\xa6\x99\xf9\xee\x1f;w\x00\x1c\xbe\xeb\xcb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    bytes_0 = b"\xde\x97\x7fL.\xb4\x1fI\xed\xa9\xdc\x88\x84\x81\xfa\xdc]\x17"
    bool_0 = False
    list_0 = [bytes_0, bytes_0, bytes_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    int_0 = -856
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    float_0 = -1511.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    complex_0 = 2327.9319 - 2873.4614j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    int_0 = 5504
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    int_0 = 3545
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    int_0 = 2413
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    int_0 = -1530
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    float_0 = -945.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    int_0 = 1082
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    int_0 = 88
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    int_0 = 1338
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    int_0 = 1459
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    bytes_0 = b"\xd4\xa0Z\xcb\x08\xba\r\xd9\x06\xab\x10\xe9p\xfa\xc4\xd0"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    str_0 = "l\\4Sq:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    none_type_0 = None
    object_0 = module_1.object()
    int_0 = 751
    tuple_0 = (object_0, int_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    str_0 = "BmiNsOul^B9"
    str_1 = "p9I\\85\n.7]\x0b,&5#\r\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    bool_0 = False
    float_0 = -94.935983
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    int_0 = 1287
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    bytes_0 = b"\xe4\xf6~\xb9_\x84E$I\xd6(\x8e\x8a\x12\r\xda\xe8\x84\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    none_type_0 = None
    int_0 = 622
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    int_0 = -964
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    int_0 = 192
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, list_0, bool_0, list_0)
    list_1 = [tuple_0, bool_0, tuple_0, tuple_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    complex_0 = -354.7 - 346.002j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    bytes_0 = b"_\xe6\x9b\xe5\xf6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    float_0 = 682.13485
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    complex_0 = 2396.564416 + 1043.77j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    str_0 = "LJ4J"
    str_1 = "o!`4?.g0M )pQy\x0bNE"
    tuple_0 = (str_0, str_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    str_0 = ":Pz\x0c3#Du!s{c]^?QuM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    bytes_0 = b"}\x0b\x9c\xb3\x19\x92"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    float_0 = -3036.0
    tuple_0 = (float_0,)
    list_0 = [tuple_0, float_0]
    module_0.match(list_0, tuple_0)


def test_case_1860():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1861():
    str_0 = "\t3xo0FE+]jtkFR!C"
    bool_0 = True
    bytes_0 = b'4$\x97Y~"\x85'
    bool_1 = True
    list_0 = [bytes_0, bool_0, bool_1]
    tuple_0 = (bytes_0, bool_1, list_0, bool_0)
    tuple_1 = (str_0, str_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    str_0 = "i-@hoz@MzQB(.>>0&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    int_0 = -1225
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1864():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1865():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    float_0 = -1983.5913
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    int_0 = -2673
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    float_0 = -362.0095
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    str_0 = "ra-FrEB$Zhv43+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    int_0 = -2151
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    bytes_0 = b"Z\xe8\xdd=W;k\xed\xa3"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    int_0 = -719
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    bool_0 = False
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    int_0 = -1051
    str_0 = "TO+nHLq\rP"
    tuple_0 = (int_0, str_0)
    set_0 = {int_0, str_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    str_0 = ";k0F^YDQ_[C\\u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    float_0 = 3529.0
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_1881():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1882():
    str_0 = "+0o*KY\rs)$>WGoMYn"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    complex_0 = 159.8 - 1101.492j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1884():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1885():
    bytes_0 = b"\xb9\xa9\xca\xb9\x1e\t\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    bool_0 = False
    complex_0 = -493.15 - 1609.2j
    set_0 = {bool_0, bool_0, complex_0}
    int_0 = 871
    list_0 = [int_0]
    bytes_0 = b"\xff\x8a\xce\x817\xc8<\xcb\xc9\xf2\xec]\xc1\xde"
    tuple_0 = (set_0, int_0, list_0, bytes_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    str_0 = "4plZ[vNSGR\\)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    bytes_0 = b"\x17\x05O\xa6\xdd\x95\x99\x86\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    str_0 = "i;y&a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    int_0 = 3199
    module_0.match(int_0, int_0)


def test_case_1892():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1893():
    str_0 = "|?"
    bytes_0 = b"\xcc\xe8\xe3UT\xf3\xe8\xd4\xcdh"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    str_0 = "Te?Dyh*~ok-<En\n\x0cT;@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    set_0 = set()
    tuple_0 = (bool_0, dict_0, set_0)
    int_0 = 132
    tuple_1 = (tuple_0, int_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    str_0 = ":\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    int_0 = 1395
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    int_0 = -1749
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    bool_0 = False
    int_0 = 1292
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    str_0 = "\rRWR_iMqm."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    str_0 = "D;AC*O+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    complex_0 = 91.9 - 188.8368j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    str_0 = "o\rU b_sxAs}pq:tb"
    list_0 = [str_0, str_0]
    tuple_0 = (str_0, str_0, str_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    int_0 = -4238
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    float_0 = -1333.9879
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    int_0 = -2595
    dict_0 = {}
    tuple_0 = (int_0, int_0, dict_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    bytes_0 = b"_!f\xce\xf0\xda\xce\x08g\xce\xf4;\xec\xde\xce \x18T"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    complex_0 = 2250.5 + 607.994j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    int_0 = 2327
    tuple_0 = ()
    list_0 = [int_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_1916():
    pass


def test_case_1917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1918():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    int_0 = -417
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    str_0 = "- \\3."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    complex_0 = 462.301 + 747j
    tuple_0 = (dict_0, complex_0, complex_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    float_0 = 1811.88368
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    str_0 = "yY8!'OrS|tk:4X!L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    complex_0 = -288.37894 + 1056.001911j
    set_0 = {complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    float_0 = 4291.786308
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    float_0 = 3631.59889
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    int_0 = 782
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    int_0 = -2159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    bytes_0 = b'"\x1d\\\x0f\xac\xff\xf8\xe5\x1b\xa8\xf1\t\x9a\xf6\x84+3\xf5'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    int_0 = -3103
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    bytes_0 = b"\xccQ/M\xdb\xee\xd1\xa8\x00\xeb\x0e\xd0Z\xf5G#=\xc8"
    int_0 = -732
    set_0 = {bytes_0, int_0, int_0, bytes_0}
    bool_0 = True
    str_0 = "SO'aep@CD!"
    bool_1 = True
    tuple_0 = (str_0, bool_1)
    tuple_1 = (set_0, bool_0, int_0, tuple_0)
    list_0 = [tuple_1, set_0, bytes_0, int_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    int_0 = 2922
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    int_0 = -2565
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    str_0 = 'z"\x0bZ5n;8O5$\rBv'
    tuple_0 = ()
    dict_0 = {str_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    str_0 = "vhX5a3)(I\r"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    bool_0 = False
    str_0 = "sD+w(yM?"
    bool_1 = False
    tuple_0 = (bool_0, str_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    bytes_0 = b"\x94\xe5s\xc8o\xcbI\x90\x0c\x1d:%"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    int_0 = -3029
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    int_0 = 552
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    complex_0 = 1637.3273 - 2611.01j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    complex_0 = -2290.7292 + 1057.33j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    float_0 = 525.098221
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    float_0 = -2895.74781
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    bytes_0 = b"\xeeE\x12\xd9d\xdb=\x9a)W\x8a\x96~'\x04\xb7(r"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    bytes_0 = b"+9W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    str_0 = "Yc4$\\u%R1UrxtH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bytes_0 = b"\x13\x06\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    float_0 = -639.699
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    bytes_0 = b"\x1d\xc0\xa8(\x93=\xd2\xdf\xee\x08\x85&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    none_type_0 = None
    int_0 = 3033
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    bytes_0 = b"\x06\x85@\xf8e|\xfc\x92\x8e\xa9\xf1Lo?\x0e}"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    bytes_0 = b"\xe5N\xe5\xa8C\xaf\x19\xde!%\x16\x7f\xb2\x92\xcc\x97"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    str_0 = "\"tR]'\tk."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    str_0 = "Hcs(`0X?\t/ a7Kn*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    str_0 = "DL`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    str_0 = "Y 'jm+UM=Pj"
    str_1 = "pxn^m>"
    dict_0 = {str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    int_0 = -961
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    none_type_0 = None
    dict_0 = {}
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (dict_0, tuple_0, bool_0)
    module_0.get_new_command(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    int_0 = 929
    module_0.match(int_0, int_0)


def test_case_1973():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1974():
    float_0 = -325.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    set_0 = set()
    list_0 = [set_0, set_0]
    str_0 = "'}Nn!Pi~0fG\"TK-fa;q"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    float_0 = 114.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    float_0 = -756.40717
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    none_type_0 = None
    bytes_0 = b"\x8cp\x1f\xe2\xa7\x0b"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    bytes_0 = b"5rs\x1a\xd8\xae"
    module_0.match(bytes_0, bytes_0)


def test_case_1980():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1981():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    bytes_0 = b">b"
    str_0 = "cLnl~E5)"
    tuple_1 = (tuple_0, dict_0, bytes_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    bytes_0 = b"a\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    bytes_0 = b"\xeb>\x99\x07\xcb\x9e\x9a\x940\xf1\x90\xe6\x0cDc\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    int_0 = -2041
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    str_0 = "`?s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    bytes_0 = b"\xc3\xba\x93\xa7\xacq\x87\\\x02\xd8\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    float_0 = -1841.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    complex_0 = 3500.689 - 1961.49j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    str_0 = "C0fOi^cz(]o#sI"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    complex_0 = 3732.5956 - 384.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    float_0 = 1755.671
    bool_0 = False
    set_0 = {float_0, bool_0, bool_0, float_0}
    list_0 = [set_0, set_0, bool_0, bool_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    float_0 = -3246.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    object_0 = module_1.object()
    tuple_0 = ()
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    none_type_0 = None
    float_0 = 488.03
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    float_0 = -4194.763
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    float_0 = -2488.43528
    bool_0 = False
    dict_0 = {float_0: float_0, float_0: float_0, float_0: bool_0}
    tuple_0 = (float_0, float_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    bool_0 = True
    str_0 = "][9pZ=l Ui!sPb]}Y"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    float_0 = 2233.962
    list_0 = []
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    int_0 = -1341
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    float_0 = -778.47118
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    str_0 = "GH70\\{X\n@qy`|{04"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    str_0 = "H^Dj-)3s/*\x0cb*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    str_0 = ""
    bool_0 = True
    bool_1 = True
    set_0 = set()
    tuple_0 = (bool_0, bool_1, set_0, bool_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    str_0 = "x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    float_0 = 46.00039
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    float_0 = 17.8596
    dict_0 = {}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (list_0, list_0, bool_0)
    tuple_2 = (tuple_1,)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    int_0 = 2914
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    float_0 = -2595.397708
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    bool_0 = True
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    str_0 = '">'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2017():
    pass


def test_case_2018():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2019():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    int_0 = -469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    float_0 = 960.793
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_2022():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2023():
    str_0 = "+?5>NkIFp.J`&\x0c"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    int_0 = 861
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    int_0 = 1944
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    dict_0 = {}
    none_type_0 = None
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    int_0 = 2921
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    str_0 = '6Y=O7\x0b-"Q\r)\\\x0cL+"[<)p'
    module_0.get_new_command(str_0, str_0)


def test_case_2029():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2030():
    str_0 = "#T'4@;Yr\\md*3"
    str_1 = 'xyjr]AK"$m&J3q~\r'
    str_2 = 'c3"48\rt'
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    str_0 = "}m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    str_0 = "U7aq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    bool_0 = False
    int_0 = 213
    dict_0 = {bool_0: bool_0, bool_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    int_0 = 1839
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    float_0 = -409.08059
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    int_0 = 7
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    complex_0 = -1477 - 1098.23399j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    complex_0 = 260.735 + 101.5173j
    bool_0 = True
    tuple_0 = (complex_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    str_0 = "Rw\n)A<L\\g\x0c].t,Y"
    str_1 = "{3%I|g1!hFEr/CXE5"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    str_0 = "U!RS<rcP&r<Z\nYy[^A"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    none_type_0 = None
    float_0 = 2651.1294
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    str_0 = "|UEJ2"
    str_1 = "\n!T"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    bytes_0 = b"\xfb\xd2X\xdbK\xaf.\xd3\xcd\x82:\xce\x81mr"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    bytes_0 = b"\xe60\xfb!\xd0\x83\xc2,\x15\xf0\xa9\xa6O\xf7\xaa\x94t"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2048():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2049():
    str_0 = "/?wr:moy]*NbLLxI"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2051():
    str_0 = "sSFxcw"
    str_1 = "0 g^\nr'O"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_1: str_1}
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    float_0 = 4565.1327
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    bytes_0 = b"\xc8\x04\x17\x8a\xe8Igh\xb9\xae?\xa1\xde3\x92\xb9\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    float_0 = -780.02513
    module_0.get_new_command(float_0, float_0)


def test_case_2056():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2057():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    str_0 = "wk~`3#=fk\nj"
    module_0.match(str_0, str_0)


def test_case_2059():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2060():
    float_0 = 1912.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    str_0 = "N_f){d\n"
    str_1 = "OY5f"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    str_0 = "x}W,}"
    bytes_0 = b"+\x12\xc2\x01$\xf9\xe44\xde\xc7"
    float_0 = 1724.4629
    tuple_0 = (str_0, bytes_0, float_0, bytes_0)
    module_1.object(**tuple_0)


def test_case_2064():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2065():
    bytes_0 = b"\xd7O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    bool_0 = True
    module_1.object(**bool_0)


def test_case_2067():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2068():
    int_0 = -1380
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    int_0 = -600
    module_0.match(int_0, int_0)


def test_case_2070():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2071():
    bytes_0 = b"a4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    str_0 = "\rp'U"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    float_0 = -3776.4488
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    str_0 = "%o\rR2  Qe3zazwrls"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    bytes_0 = b"\xc6.\xda\xa8"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    bytes_0 = b"B?\xb4\xd9\xa7\x8c\xf7\xf4\x12\xbb\xf9\x01r\xf5\xa0\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    bytes_0 = b"\xe7\xc9\xaa\xfc\xa5\xcb\x0b\xbc\xaftnu4\x0f\xac\xc3T\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


def test_case_2080():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2081():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    str_0 = "/.f=[8$vp'5U*zD~]I"
    module_0.get_new_command(str_0, str_0)


def test_case_2083():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2084():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    bytes_0 = b'\x9f\x8bF\r"\xc2"\x1d\x83\r \x12\x92\x148\n'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = False
    tuple_1 = (tuple_0, bool_0, bool_1)
    set_0 = {tuple_1, bool_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    float_0 = 86.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    complex_0 = -4427.37 - 3467j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    str_0 = ".)v 6JLeY7T^W~:"
    module_0.get_new_command(str_0, str_0)


def test_case_2090():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2091():
    int_0 = 1888
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    bytes_0 = b"\xc1\x15p\x17\xcb\x9e\x0f'|T\xb2Bx\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    bool_0 = True
    int_0 = 396
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    str_0 = "+~d4}B[5Mm,e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    int_0 = 2377
    list_0 = [int_0]
    bytes_0 = b"3[\xe5I\x99m\x0f\x08"
    tuple_0 = (int_0, list_0, int_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    complex_0 = -4237.1185 - 276.9461j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    int_0 = -2674
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    str_0 = "#&?W?@P`Ttg%qyW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    str_0 = "F}7((sQyP]V@(?Q8K)"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    str_0 = "wJ\\Ne#Ge*;40"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    dict_0 = {}
    dict_1 = {}
    module_0.get_new_command(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    int_0 = -3976
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0, bool_1, bool_0, bool_1}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    bytes_0 = b"\xc7\x94B\xaf\x8a\x86\xe6\xc2\xc7\xeb\x81v\x90."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    str_0 = "\n,|\tXoh.~P?a6q\x0b'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    str_0 = "^R2)N-I&FP"
    module_0.match(str_0, str_0)


def test_case_2110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2111():
    bool_0 = True
    str_0 = "f"
    tuple_0 = (bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    int_0 = 426
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_2114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2115():
    str_0 = "i[:\t$JPaZ^<"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    int_0 = 373
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    int_0 = -373
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2119():
    str_0 = "\\Ri?NDV#}M"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    bytes_0 = b"s\x07\n\x89l\xcd\xee\xbb\xb4\x9c:\x08\xb1u-\xf4o,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    str_0 = 'yMkD\x0b}"(|rz$Ua+<S<hF'
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    int_0 = 3005
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    bytes_0 = b"o0\x9a\xd7\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    int_0 = -1388
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    complex_0 = 32 - 552j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    int_0 = 1171
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    int_0 = 649
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: bool_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    int_0 = -2394
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    str_0 = "g#\x0bF<0\x0b=A5SH"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, tuple_0, bool_0}
    list_0 = [set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    str_0 = '\rt3O";$xM4Hm~+(cr\n?<'
    bytes_0 = b"\xe2^0l\x1f\xdf%\xc2\xa7\xec\xae\xf3\x13$\x9b\x15)\xa4"
    list_0 = [bytes_0, bytes_0, bytes_0, str_0]
    module_1.object(*list_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    float_0 = 342.2031
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    none_type_0 = None
    int_0 = -1609
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    str_0 = "4vC(}?>D"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    float_0 = -307.14385
    object_0 = module_1.object()
    module_0.match(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    str_0 = "T]\x0cublp$b9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    float_0 = 969.566
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    float_0 = -2845.223
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bytes_0 = b"]S\xd0&J\xc7~N"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2142():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2143():
    bool_0 = False
    bytes_0 = b"{\x80fv\x10\x9e\xf8\xc3"
    dict_0 = {bool_0: bool_0, bytes_0: bytes_0, bool_0: bool_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    str_0 = "vu!Zz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    bool_0 = False
    bytes_0 = b"#u\xd5V\xf5n\xf8\xc4\xa0(\xcf\xe2w"
    list_0 = []
    tuple_0 = (bool_0, bytes_0, list_0, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    str_0 = "3* A.|&f.-eJ^Py"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    int_0 = -2596
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    float_0 = -2915.295508
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    str_0 = "ky7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    complex_0 = 400.023163 - 2241.6j
    list_0 = [complex_0, complex_0]
    module_0.match(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    int_0 = 1146
    list_0 = [int_0]
    list_1 = [list_0, list_0, list_0, int_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    int_0 = -3158
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    str_0 = "8{]8((o<"
    module_0.match(str_0, str_0)


def test_case_2155():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2156():
    int_0 = -403
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    bytes_0 = b"\xee\xaaQ4b\xfer\x99\xdb\x90\xdeJ\x16"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    str_0 = "[NuzUw3{R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    bytes_0 = b"\x91\xda\xefE\xfba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    str_0 = "*x?R^pNojvK78N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    int_0 = -3389
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    float_0 = 1131.989052
    tuple_0 = ()
    set_0 = {float_0, float_0, tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    int_0 = 440
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    float_0 = 847.51744
    float_1 = -1053.36
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    float_0 = -2611.651868
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    int_0 = -2600
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    bytes_0 = b"\x93\n\x84\xe9\xf1\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_1]
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    float_0 = -1082.676
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    bytes_0 = b"\x0c\x81\x11\xd7\x0fu\x01\xa6\xb3\x8fI\xcd\x9a\xcf\xc9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    str_0 = "&~8-G"
    module_0.match(str_0, str_0)


def test_case_2174():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2175():
    bytes_0 = b".;\xe9N3.\xf7\xc8\x0e=\xd2\xeb\xce\x8e5n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    bytes_0 = b"\x07\x0f\t\xe0\x1a\x8et\xae\x84\x83\xe9"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    float_0 = -155.1
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    float_0 = 717.4187
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    int_0 = -2902
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    bool_0 = False
    bytes_0 = b"\xa3\xc0W\x0c\xfb\xc6W\xc7Z\x93\x9a7C"
    str_0 = "HpB{m>O"
    tuple_0 = (bool_0, bytes_0, str_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    bytes_0 = b"\xbdP\xa8c\xc1\xc7O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    float_0 = 572.03479
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    str_0 = "/ ^"
    int_0 = 550
    set_0 = {str_0, str_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    float_0 = 2262.747
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    int_0 = -653
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    float_0 = -1710.29
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    bytes_0 = b"\xf3\x89n`\x8e\xa0\xbbJ;\x96X<\x87p\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    str_0 = "\n9Vh|(@TA!tk@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    bytes_0 = b"\x84[\x7f\xe2l\x8a\x98\x07\xe3'\x04"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    int_0 = -1331
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    int_0 = 704
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    int_0 = -1078
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    complex_0 = -1530.6663 - 2115j
    list_0 = [complex_0, complex_0]
    dict_0 = {}
    tuple_0 = (complex_0, list_0, dict_0)
    list_1 = [tuple_0]
    module_0.match(list_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    str_0 = 'q<"sY.'
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    none_type_0 = None
    bytes_0 = b"/Zo\x1c\x94A\xef"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    str_0 = "N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    str_0 = "\x0c/Dy4G170T0kZMrzI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    bytes_0 = b"\x01W\xa2\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, object_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bool_0 = True
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    bool_0 = False
    float_0 = 2863.23031
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    tuple_0 = ()
    int_0 = -1813
    dict_0 = {tuple_0: int_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    str_0 = "W^t 4H.B[2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    bytes_0 = b"\x83\x13\xf0\xaeO\x1aM%4\xc4\x87\x9f\xddB\xcc\x04M"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    float_0 = -596.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = ()
    tuple_1 = (list_0, list_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    none_type_0 = None
    str_0 = "<#K(e9+e"
    module_0.match(none_type_0, str_0)


def test_case_2215():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2216():
    float_0 = 4888.75
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    int_0 = -533
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    int_0 = -1478
    module_0.get_new_command(int_0, int_0)


def test_case_2219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2220():
    bytes_0 = b"\xa0\xb8"
    bool_0 = False
    list_0 = [bytes_0, bytes_0, bool_0]
    tuple_0 = (bytes_0, bool_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    float_0 = 437.6
    module_0.get_new_command(float_0, float_0)


def test_case_2223():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2224():
    int_0 = -166
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    int_0 = 4016
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    bytes_0 = b"Dn\xe8\x8f\x9d\x9e\xbf\xe8}\xdbS\xc7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    bytes_0 = b"\xb9\xc8\xfb\xae`"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    float_0 = 330.0641
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    int_0 = 529
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_2231():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2232():
    int_0 = -1738
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    complex_0 = -1575.81896 - 1861.282751j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    float_0 = -686.055
    set_0 = {float_0, float_0, float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    int_0 = -1723
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    str_0 = "NJ\x0b|+]e!_v+J&"
    list_0 = [str_0, str_0, str_0]
    bytes_0 = b")%\x10\xf60"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    float_0 = 648.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    str_0 = "!3^}9ca+!3XY:xu_5ct"
    set_0 = {str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    bytes_0 = b"\x8d\xf0c\x0b\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    float_0 = -1499.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    int_0 = 2932
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    str_0 = "8,|Ji/\t847#4>'Qs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    bytes_0 = b"\xe7\xd4\x07\xf9$3\x16\xd1\xac\xd66t\xe2\xe1ck\x94d"
    object_0 = module_1.object()
    list_0 = [bytes_0, bytes_0, bytes_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    bytes_0 = b"\xe0\x8c\x07\x946\xf2W\xd9d\xd7\x94\x80="
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    bytes_0 = b"\xd4\x1d\x03L\x99\xb4\xb4&0'\xe7J\xc3\x9b\x92\x97\\\xb5"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    str_0 = "5Z\\d\t)a\t'0M"
    int_0 = 3419
    dict_0 = {int_0: int_0, str_0: int_0, int_0: int_0}
    tuple_0 = (str_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    int_0 = 1780
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    complex_0 = -3220.956104 + 1033.6326j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    str_0 = "hvoZPV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    object_0 = module_1.object()
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    float_0 = 2903.0
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    int_0 = 1850
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    bytes_0 = b"\xfdLY\x8b3\x98b"
    float_0 = -3119.9
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    str_0 = '^b*<BCIIR96 v"YU'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    int_0 = -589
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    str_0 = "|;Um;M7t{-3}N7=hQ2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    bytes_0 = b"bN%\xe4)\x96qI\x80\x96/\xd9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2262():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2263():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    float_0 = -1489.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    bytes_0 = b"\xaf\x1e\xe7\tonp\x9b\xf3S\x93\xf7T7s\xc0\xf9Q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    none_type_0 = None
    int_0 = -109
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    tuple_0 = ()
    int_0 = 354
    float_0 = 2105.291409
    bytes_0 = b"\xc1\xe7\x87\xeb\x89A?JU2\xa9\x0e\x9f\x15"
    tuple_1 = (tuple_0, int_0, float_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2270():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2271():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    str_0 = "!v\teLB2$h-]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    bytes_0 = b"\x89\x9d~h\xc6\xbd+\xd4\xd7\x91\xbc\xfaq"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    str_0 = "\n\t"
    module_0.match(str_0, str_0)


def test_case_2275():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2276():
    str_0 = 'Wu[B@"\tRtgP!?M/mt'
    str_1 = '#"\rmqC"'
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    int_0 = -574
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    bytes_0 = b"Fd\xc8d\xb5\xdb\x99\xa1]Z\xc6\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    str_0 = "s'4t6rqt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    float_0 = 2033.45143
    complex_0 = 1093.8403 - 463.8626j
    tuple_0 = (complex_0,)
    float_1 = 2595.499
    bytes_0 = b"-\x8fZP\xde\x1d\xa5"
    tuple_1 = (float_0, tuple_0, float_1, bytes_0)
    module_0.get_new_command(tuple_1, float_1)


def test_case_2281():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2282():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_0, bool_1, bool_1}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    float_0 = 1036.74574
    str_0 = "\tM"
    list_0 = [str_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    int_0 = 1076
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    int_0 = 2979
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    str_0 = "S.U&jEE\nAw83^Zf']%P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    bytes_0 = b"\xa7|z\xd4\xfa=eR\x8eS\x9e\xa2\xa5\x8e\xce\\\xd2\x9bZ\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    float_0 = -4483.86449
    module_0.get_new_command(float_0, float_0)


def test_case_2289():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2290():
    str_0 = "J&YdhZ:u`5+~ie+#9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    bytes_0 = b"\xd1b\xe328\xb4\xd0\xbey\xde"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    str_0 = ":"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    int_0 = -219
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    set_0 = set()
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    bytes_0 = b"\xc8\xa1~"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    str_0 = "}elEV)&A"
    int_0 = -750
    set_0 = {str_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    bytes_0 = b"\xf9\x8fNX\x06\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    int_0 = 1093
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    int_0 = -1041
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    float_0 = 1819.5328
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bytes_0 = b"\xa6\xb1l0\x19\x96\xd4\xf5\xdf\xbc\x0e\x124"
    list_0 = [bytes_0, bytes_0, bytes_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    float_0 = 551.4219
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    dict_0 = {tuple_0: bool_0, tuple_0: float_0, float_0: bool_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    str_0 = "z\tcO}a{r&&kkBjp7u^;|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    bytes_0 = b"0,\xd1\xf9\xe73/\xf1\xee\xf1\xe20\x92\x16"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    complex_0 = 1180.48467 + 3203.74j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    str_0 = ",!0"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    complex_0 = -1620.7476 + 696.813478j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    float_0 = 2853.219812
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    complex_0 = -970.6 + 1428.96j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    int_0 = 578
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0, int_0]
    module_0.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    int_0 = -155
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    int_0 = -208
    dict_0 = {int_0: int_0}
    tuple_0 = ()
    tuple_1 = (int_0, dict_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    none_type_0 = None
    str_0 = "\n?"
    str_1 = '\x0cf}k"[s:.VM'
    dict_0 = {str_0: none_type_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    complex_0 = -1631.2333 + 357.26j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    str_0 = "h]_eAJ\natU}#z)jR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    str_0 = "[JY1%?*?l3`S=6R"
    tuple_1 = (tuple_0, str_0, dict_0)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    str_0 = "jGAHM;EGlNl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    int_0 = 1519
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    bytes_0 = b"}\x0e)\x11\xde#\xfd{ZL"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    str_0 = "4pW,]o~3DB;Thw"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    int_0 = 1610
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    bytes_0 = b"\xc50d\xc9\xc7q!\xf6\x93$\x16\x1bFN\xa2$"
    str_0 = "Z@\nIb?|A"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    int_0 = -1307
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    str_0 = "thW!l,VV*Qy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    str_0 = "\x0bV_$Spqq?><>HPvw7pK"
    int_0 = 1589
    float_0 = 3023.354736
    tuple_0 = (str_0, int_0, int_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    int_0 = -229
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    int_0 = -119
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    float_0 = 2127.8275
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    float_0 = -2001.998969
    str_0 = "q"
    dict_0 = {}
    tuple_0 = (float_0, str_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    str_0 = "eH0k@0|y"
    set_0 = {str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    int_0 = 2018
    bytes_0 = b"\xa9\x05I\x13\xfd\x1b\xbcci\xb8"
    tuple_0 = (int_0, bytes_0, bytes_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    float_0 = -2235.6452
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0, list_0, list_0, float_0]
    list_2 = [list_1]
    module_0.match(list_2, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    float_0 = -501.0121
    set_0 = {float_0, float_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    float_0 = 3563.89056
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    str_0 = "fCK7luu#VcV0"
    bytes_0 = b"\x198\x8d\xd2FY_'\\"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    str_0 = "}}BVQ\x0bwU\\68HoY\x0c\x0b3-2"
    str_1 = "VR=\t<&v~d*HR,''> $\""
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    complex_0 = 1270.112 + 163j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    str_0 = "Q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2351():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2352():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    int_0 = -1884
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    bytes_0 = b"("
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    str_0 = "aN'v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    float_0 = -2149.092
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    bytes_0 = b";\xf8w^\x97\xa4\xefLb\x1f7\x9e\xe6\xff\xdbC\xf4\x16\xc0\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    float_0 = 392.9
    module_0.match(float_0, float_0)


def test_case_2361():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2362():
    int_0 = -2330
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    str_0 = "C\x0b"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    int_0 = 883
    tuple_0 = (int_0,)
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    bytes_0 = b"\xe5\x02"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    float_0 = 3319.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    bytes_0 = b"\xd3\x15\x91\xa3\n\xda\x1a\xb1\xb2\xe0\x16]\xdd\xeag\xeaz"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    str_0 = '!.\x0cN$qab$"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    float_0 = -1218.986403
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    bytes_0 = b"Ht\xe6D\t\xec\x0f"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    str_0 = "|Tj"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    float_0 = 2138.78
    bool_0 = True
    list_0 = [float_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    bytes_0 = b"\xa1\n\x9do\xba\\\x82$\xc7C\xd8\x9e\x8a\xcdy\x9b\xf3M"
    bool_0 = True
    int_0 = 1079
    tuple_0 = (bytes_0, bool_0, int_0)
    module_0.match(tuple_0, bytes_0)


def test_case_2375():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2376():
    bool_0 = False
    str_0 = "Ff;'g ,X"
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    str_0 = "\rcT.b#-}rCAp!"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    bytes_0 = b"V\xbfd\xb5\x07{\x98O\x0c\x87\xe7\x1d!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    float_0 = 2089.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    complex_0 = 57.8 - 785j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    complex_0 = 547 - 1505j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    int_0 = -3341
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    bytes_0 = b"\xa0\x9d\x82_\t\xbe\x9f\x7fM\xa6\x0f\xd5\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    float_0 = -277.435741
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    str_0 = "#r$n-$o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    int_0 = -4008
    int_1 = 600
    set_0 = {int_0}
    list_0 = []
    tuple_0 = (int_0, int_1, set_0, list_0)
    bytes_0 = b"H\xbb\x91`\x17\xa1\x97\x95_"
    tuple_1 = (int_0, tuple_0, bytes_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    str_0 = ""
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    int_0 = 1677
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    str_0 = "VTC]J9y:JIt"
    float_0 = -10.849
    tuple_0 = (str_0, float_0, str_0, str_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    str_0 = "'i4c(B1"
    bool_0 = False
    float_0 = 1856.854
    bool_1 = False
    tuple_0 = (str_0, bool_0, float_0, bool_1)
    list_0 = [tuple_0, bool_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    bytes_0 = b"k4\x07YJ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    int_0 = -1891
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    bool_0 = True
    object_0 = module_1.object()
    tuple_0 = (bool_0, object_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    int_0 = -4572
    list_0 = []
    bytes_0 = b"\xe4"
    tuple_0 = (int_0, list_0, bytes_0, bytes_0)
    set_0 = set()
    tuple_1 = (tuple_0, tuple_0, list_0, set_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    bytes_0 = b"\xeeV\xe3\xa1\xe6\xe3\xc79\x07\xa3\xe1\x0e"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    bool_0 = False
    bytes_0 = b" "
    module_0.get_new_command(bool_0, bytes_0)


def test_case_2405():
    pass


def test_case_2406():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2407():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, bool_0, tuple_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    bytes_0 = b"\x01\xafd\xa0\xbfLq\xca\xff\xcb\x03Q\xf2$\x98\xec\x1f\xe4"
    float_0 = 13.7
    dict_0 = {bytes_0: bytes_0, bytes_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    dict_0 = {}
    list_0 = [dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    bytes_0 = b"\xf2\xeb\xb6\xb8\nEH\xa1\x12\xa6\xaf\xaepn4"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    bytes_0 = b"\xaa6\xaf\xe5r\xbc\x9f\x80\xc4\xf0\xbb\xef\xfc\xcaR\x89\xcd\xafF\xc0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    bytes_0 = b"*#M\xe0\x02N\xcf\x90\xd8\xa9\x84\xb0\xf7K\x84\xbcq"
    bool_0 = True
    set_0 = {bytes_0, bytes_0, bytes_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    bytes_0 = b"\xccS&7w\x1f{T-\xe7+\x1aL\xfd\xe4\xad\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    float_0 = 155.0868
    complex_0 = 967.822 - 3829.96056j
    dict_0 = {
        float_0: float_0,
        float_0: complex_0,
        float_0: complex_0,
        complex_0: float_0,
    }
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    str_0 = "\x0caD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    str_0 = ".jt\tYV5\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    float_0 = 702.05885
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    float_0 = -1346.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    str_0 = "7I\nTH:1o sbHf|-"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    bytes_0 = b"\xad\xdf\x1dE|\xd0\tgR"
    module_0.match(bytes_0, bytes_0)


def test_case_2423():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2424():
    bytes_0 = b"'N\x90!\x900\x9b\xcal\xd0\xd3\x16|\xf6,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    float_0 = -2731.5
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    object_0 = module_1.object()
    list_0 = []
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    int_0 = -3598
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bytes_0 = b"\xb7\xf6D\x80\xe5\xe3\xa5"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    bool_0 = False
    object_0 = module_1.object()
    dict_0 = {bool_0: bool_0, bool_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    str_0 = "\\8J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    float_0 = 873.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    bytes_0 = b"\xbbc\xbe'jjh?G\x16s\xeb\xb0\xb8\x1d\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    complex_0 = -2815.746 - 696.7945j
    bool_0 = False
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    dict_0 = {}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    int_0 = 187
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    str_0 = 'V-Bme-nte?"A9w'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    bytes_0 = b"\xdfY\xfd\xd4rD\xe8\xb4\xd9\xe2\xa6\x0e\x9c\xe1\x0f\x96%\x89"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    str_0 = ":z<\t\tgR}/_+\nTVjS8O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_2441():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2442():
    bytes_0 = b'\x95\x95"IH\xef\x0e\x91\x85Z\xa3\xe9\x02H\xf8\x08z\xea'
    set_0 = {bytes_0, bytes_0}
    int_0 = 5586
    tuple_0 = (set_0, int_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    bytes_0 = b"\x08z"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    int_0 = -276
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    complex_0 = -3272.0783 - 2340.36j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    bytes_0 = b"j`\xa1O\xde\x8d\xba\x90U\xb9\x1f"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    str_0 = ")BM$T7]5}ip%\t"
    str_1 = "EMn\n4D:2m8"
    str_2 = ""
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    complex_0 = -3094.35 + 753.764516j
    tuple_0 = (set_0, complex_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    str_0 = "xa#w:3OS.0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    int_0 = 2192
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    int_0 = 1624
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    float_0 = -3609.07601
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    str_0 = "P4P&NeV\x0bLMPPa=2K-#D\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    complex_0 = 4456 + 1702.386936j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    bytes_0 = b"E\xe1\xf7A\xaa\x1a\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    bytes_0 = b"h\xa8\x19"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    int_0 = 107
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    bytes_0 = b"\xa0\x99\x148\xc9\x879\xa6\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    int_0 = -1151
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    bytes_0 = b'"\xce\x0bA=\xc2\x84\xd9\xe6`ZR\xb7^p\x90\xaf\xe1\x9f\xcb'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    float_0 = 1930.23744
    dict_0 = {}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    float_0 = 377.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    int_0 = 1051
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    str_0 = "b0G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    str_0 = "*4\r'&D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    float_0 = 738.01131
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    float_0 = -849.250563
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    int_0 = -1511
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    bytes_0 = b"\x8eVi'Qd?\xe5V\xc9\x0f\xc9@\xc5\xc4\xa9"
    bool_0 = True
    set_0 = {bytes_0, bool_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


def test_case_2472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2473():
    set_0 = set()
    str_0 = "95[p\nzlK"
    tuple_0 = (set_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    float_0 = 1796.81
    str_0 = "q^!F{/[>B\x0b>Kj~qA"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    bytes_0 = b"\x1a"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    float_0 = 733.5
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    bytes_0 = b'[\xcc\xa9\xd5\x85\xd2\x1er\x15\xb2\x1fb"xH\x11\x85\xc2%\x9b'
    module_0.match(bytes_0, bytes_0)


def test_case_2478():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2479():
    str_0 = "(W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    float_0 = -4642.618
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    bytes_0 = b"\xd2\xe8\xb4\x8f\xeac\x8a\x8b\x00r\xdb\x93"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bytes_0, bool_0)
    set_0 = {tuple_0, bool_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    bool_0 = True
    bytes_0 = b"\xf3\xe9\xe9\xb7n\x99\xed\x14X=W\x80\n\x85\xf8"
    set_0 = {bool_0, bool_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    str_0 = ",/j]b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    int_0 = -3124
    list_0 = [int_0, int_0]
    dict_0 = {int_0: int_0, int_0: list_0}
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    bytes_0 = b"\xcf\x0b\xb1\xbe\xcb\x8e\xdd\xbcy,F\xc6I\r\r\xc0"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bool_0: bool_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    bytes_0 = b".\x1c\xcfY\xf9Q\x05\xdbJ@\x0f\xdcs\xc0\xcc\x7f\xa9"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    bytes_0 = b"#\x87\xee\xf2"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


def test_case_2489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2490():
    bool_0 = True
    complex_0 = -1990.387 + 1064.94988j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    float_0 = -1237.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    float_0 = 6383.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    str_0 = "!m0T)QV=%_*mP_w-]\x0btE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    int_0 = 3596
    bool_0 = True
    module_0.match(int_0, bool_0)


def test_case_2495():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2496():
    bytes_0 = b"\x9d\x9b\xd7\xa0\xb1\x163\x86\r\xd0\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    int_0 = 84
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    str_0 = "\x0c[=UID"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    str_0 = "wB}KseM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    float_0 = -201.69762
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    bytes_0 = b"\x842]\x027\xa6\x7f+\xa9\xe6\xc4M\x17"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    tuple_0 = ()
    int_0 = -1952
    dict_0 = {tuple_0: tuple_0, tuple_0: int_0}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    str_0 = "R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    float_0 = 572.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bytes_0 = b"\xaa\xe0\xce\x04:\x16\ru\x9c\x84\x99\x17\x05\xf2\x9f\x9c\xc3J\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    float_0 = -2740.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    float_0 = -2466.0
    list_0 = []
    tuple_0 = (float_0, list_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    float_0 = -105.088
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    bytes_0 = b"\x02\x08~V\x0fb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    bytes_0 = b"\xec\xc3\\~"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    bytes_0 = b"M\xa1?\xfce\xdd\x0c\xaf\xfd\x96\xebRQ\x95\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    str_0 = "D=72h#I2a2R3%0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    str_0 = " v:37\tvIF<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    str_0 = "HB\"I'#6]:Pb|JG\n}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    int_0 = 3422
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    complex_0 = -18 + 5289j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    bytes_0 = b"Z\xed=\x8d\xd0\xc3\x8a&#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    int_0 = 422
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    str_0 = "c3"
    int_0 = -296
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "3 |2W<*j"
    tuple_0 = (bool_0, list_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    bytes_0 = b"\x89"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    int_0 = -2379
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    bytes_0 = b"\xaf\xd9<dn.\xcd\xfd3\x0b\xc9\x84\x10\xf4\xd4\xacA\xd7\xa3\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    float_0 = 2780.961
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    none_type_0 = None
    float_0 = -1678.45678
    module_0.match(none_type_0, float_0)


def test_case_2533():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2534():
    float_0 = 2840.357652
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    int_0 = -2093
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    int_0 = 2190
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    str_0 = "\x0c~AO`EJ,C\tES"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    bytes_0 = b"\xc3j]\xc5[\x80\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bytes_0 = b",)c\x015\x1f\xaf\xa0\xfa|\xab-2L\x9b\xc7"
    complex_0 = 22.31453 + 1525j
    bool_0 = True
    tuple_0 = (bytes_0, complex_0, bool_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    float_0 = -1492.30606
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    tuple_0 = ()
    float_0 = -451.83574
    module_0.get_new_command(tuple_0, float_0)


def test_case_2543():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2544():
    complex_0 = 4518.709465 + 2023.818811j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    str_0 = "g\x0bCI%Y.o+,t"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    str_0 = "kS'}E8!"
    set_0 = {str_0, str_0}
    set_1 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_1)


def test_case_2547():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2548():
    bytes_0 = b'\x96\xcb:b@\xac&"\xaa|\x1e\xc3]'
    int_0 = 1817
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    float_0 = -1201.05078
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_1: bool_0}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    int_0 = 1317
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_2552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2553():
    bytes_0 = b"/\xa8\xa3\xe5\xab,\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    bytes_0 = b"=\xf4k\xbb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    bool_0 = True
    str_0 = "LU6-S:JvUJP`*s9["
    float_0 = -268.0
    list_0 = [float_0, float_0, float_0]
    tuple_0 = (list_0,)
    dict_0 = {bool_0: bool_0, bool_0: str_0, str_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    str_0 = " #0#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    str_0 = ')"h`&\x0bsLdf\x0cy);/\tW'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2558():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2559():
    str_0 = "o|V\rA!s2nwr\rjL"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    bytes_0 = b"\x1d\x81\xe8M\xbcj\xa0ZHD\x974e|\x9c8\xc0#"
    module_0.match(bytes_0, bytes_0)


def test_case_2561():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2562():
    int_0 = -3151
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    int_0 = 1327
    set_0 = {int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    int_0 = 209
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    float_0 = 2338.4169
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    str_0 = "el"
    set_0 = {str_0, str_0, str_0, str_0}
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    bytes_0 = b"#\xea\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    str_0 = "HLZ8bEW+dfjS~;"
    str_1 = "|cZ?O1:t$JFU)"
    str_2 = "]-u!QEg\x0b?FM\x0c;\r\rckGy`"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_2: str_1}
    module_1.object(**dict_0)


def test_case_2570():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2571():
    float_0 = 12.516513
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    bytes_0 = b"N\x94\xbeu\x93*\xfc\x8f\xe4`yl\xad\xa6\x98\x15E\xaf"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    str_0 = 'u\x0bLV"1fT=E\x0c,'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    str_0 = "v`/irM]laDfnN"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    float_0 = -1551.7
    module_0.match(float_0, float_0)


def test_case_2577():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2578():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    bytes_0 = b"\x04\xa4~\x99\xb4~\xdc\\\xfc\xf5:\xa48O\xba\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    str_0 = "gck`b=jZCP4]Kw2=*D"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    int_0 = -466
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    str_0 = 'O(Gb"`k|v/UIQ>'
    module_0.get_new_command(str_0, str_0)


def test_case_2584():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2585():
    float_0 = -1114.1577
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    bytes_0 = b"\xae4Y\xbcB#e\xa3!8\x8b\x10\x9ev\x0e\xa9\xf3."
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    bytes_0 = b"\xea\xfc.[\xd3\xc5\x08\xe2 B\x89\x9d"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    bytes_0 = b"\xe6\x01y`\x07\x9c\x96\xc3\x01|e\xac"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    int_0 = 316
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    bool_0 = False
    bytes_0 = b"\xa7\x12\xa15\xcc5\xcd\xa20\x15\xa3\xeemC\xa6\xbf\xaf+\xd8"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    bytes_0 = b"\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    bytes_0 = b"\xcdkx.\x9a\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    float_0 = -465.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    list_0 = []
    object_0 = module_1.object()
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    str_0 = "V7TF/]co(h\t#V;]Q\ro}r"
    bytes_0 = b"\xfd{^\n\xd7\xf4(n\xa7\xdc\x9eMx\xbf\xa0"
    tuple_0 = (str_0, bytes_0)
    int_0 = 4376
    tuple_1 = (tuple_0, tuple_0, int_0)
    dict_0 = {}
    list_0 = [tuple_1, dict_0, str_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    bytes_0 = b"n\x8e^\xd5O\x1f!7l\xd71\x8d#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    complex_0 = 4041.80348 - 259j
    str_0 = ")JJIzXOS#_>1y\rKa`h)"
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    int_0 = 3327
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    int_0 = -1864
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    str_0 = "v;$?)-$u ]Mwv,y/E'\r"
    module_0.get_new_command(str_0, str_0)


def test_case_2608():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2609():
    str_0 = "5,z_d*^t0|Q%l{ I-\\"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    str_0 = "Z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    str_0 = "-\x0bI"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    bytes_0 = b"\xa3\xbd\xfa,\xf7{\xdeO\x92\x18j0\x18\xe2,a"
    bytes_1 = b"t\xb7\xc2\xd0\xe1\x82 \x9f\\\x8foS[\xdei\xe5\xd2\xa3\xce"
    set_0 = {bytes_0, bytes_1}
    list_0 = [bytes_1, bytes_0]
    tuple_0 = (set_0, list_0)
    tuple_1 = (bytes_0, set_0, tuple_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    bool_0 = False
    int_0 = 1714
    list_0 = [bool_0, int_0, bool_0]
    str_0 = "s{d\t^:eAF"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    int_0 = -3793
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    str_0 = "B)QI=PZ%](NF%=-sU/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    int_0 = 3942
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    bytes_0 = b"x\xcdp\xfd\x7f\xa6\x99#\x0c\xe6dV)M4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    bytes_0 = b"I\xd4\xc2\xd4\xdb\xf2Y\xd5\x8c}\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    float_0 = 2961.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    int_0 = 1325
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    bytes_0 = b"$nk'E(\xba\xa7\xd5\r<v\xae\xdbqXi"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    str_0 = "\x0c&a;BQ[kBm~'\x0bK&lM\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    bytes_0 = b"\xed\x05\xe2FI\\P4\x1c3\x89/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    str_0 = "vnbb."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    complex_0 = 1204.00941 + 4624.1562j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    str_0 = ">Ti7B4k\x0b:',iPn5"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    bool_0 = False
    bytes_0 = b"z\xb6\x88\xa7\x99\x0f\xaf"
    set_0 = {bool_0, bool_0, bytes_0, bytes_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    int_0 = 799
    int_1 = -680
    set_0 = {int_0, int_0, int_1, int_1}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    str_0 = "6s=?A%\n F"
    str_1 = "l\rwoxOM[~ANB<|).\\#un"
    dict_0 = {str_0: str_0, str_1: str_1}
    list_0 = [str_1, str_0, str_0, str_0]
    tuple_0 = (dict_0, dict_0, str_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_0, bool_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    int_0 = 1439
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    int_0 = 397
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    int_0 = -2546
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    float_0 = 2751.38537
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    int_0 = -2125
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    complex_0 = -131.370529 - 711.206j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    str_0 = "b&<rp{2^xJU9i?qv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    int_0 = -2953
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    tuple_0 = (dict_0, bool_0, dict_0, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    str_0 = '`y`X<0`dR%"[B6Id'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    float_0 = 897.72334
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    int_0 = 1337
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    bytes_0 = b"\xf1\x02"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    int_0 = -1243
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bytes_0 = b"\\@\xd6\xaeh\xba\x99\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    str_0 = "!"
    list_0 = [str_0, str_0, str_0, str_0]
    float_0 = -962.17
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    int_0 = 4993
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    bytes_0 = b".>\xad\xa0\xca\xf4e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    bytes_0 = b"?\xd1\xb2\xd1X$le"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    bool_0 = True
    str_0 = "mRbqW\x0b5<.9k*j~SSkz"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    int_0 = 393
    module_0.get_new_command(int_0, int_0)


def test_case_2660():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2661():
    str_0 = "8Ts8?d\r<}"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    str_0 = "y1qB*$b=IU"
    bool_0 = False
    dict_0 = {str_0: bool_0, bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    list_0 = [dict_0, dict_0, str_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    float_0 = 1000.655533
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    int_0 = -342
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    int_0 = -2109
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    str_0 = "a,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    str_0 = "]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    int_0 = -721
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    bool_0 = True
    set_0 = {bool_0}
    int_0 = 1474
    int_1 = 1045
    list_0 = [set_0, int_0, set_0, int_1]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    complex_0 = -3091.963808 - 4104.198874j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    str_0 = "^?\ne{g;M1ExU\r5aD|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    bool_0 = False
    str_0 = "/4]Va/\tOek'VH;#cu#"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: str_0, str_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    int_0 = 197
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0, dict_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_2676():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2677():
    complex_0 = -1244 - 1695.169j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    bytes_0 = b"\x94\x1c\xb2\xda\xc1ZE\x1e\x16+\xc1"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    int_0 = -1687
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    float_0 = 3142.084789
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    str_0 = '6Uv78"`V'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    float_0 = -571.013955
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    str_0 = "4?_aF7UMZ%E.\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    int_0 = -271
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    float_0 = 1647.1021
    int_0 = -352
    tuple_0 = (int_0,)
    tuple_1 = (float_0, float_0, int_0, tuple_0)
    bytes_0 = b"FdX\xd2,\x88\x95\xf6\xfa{T\xdaB^\x9f\xa2\x17\xb6"
    bytes_1 = b"\x94\xc5\x8c\xa5\xd9\xdc)\x97/@"
    tuple_2 = (tuple_1, bytes_0, bytes_1)
    module_0.get_new_command(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    bytes_0 = b"K\x15\xc2c\xca\x02\xb7\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    int_0 = 3024
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    none_type_0 = None
    bytes_0 = b"]\xc8\xf3\x93\xf0\xe0\\\x1d\x98\xc6\xee\x02\xa7\x00\x9f"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    float_0 = 1419.123272
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    int_0 = -1193
    float_0 = -394.0
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    bool_0 = False
    float_0 = 642.866
    tuple_0 = (bool_0, bool_0, float_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    bytes_0 = b"\xd2T\x81y\xdaz(\x83\xa2P"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    int_0 = -1345
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    str_0 = "tDq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    bytes_0 = b"\xdc\xdbC\xff\x13U\xe9(\xdd\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    bytes_0 = b"+\xe5S\xa3\x8c\xcc\x08;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    complex_0 = -1731.271125 + 1324.71j
    module_0.match(complex_0, complex_0)


def test_case_2699():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2700():
    bytes_0 = b"W\x96@\x95\x1e\xb0\xe9R<\xa7\xd3y\xb2kr"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    float_0 = -1034.06
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    str_0 = "M1Hmr8C8>v\nQNS"
    str_1 = "yj1HoQmnePd0ozee"
    str_2 = "=uh\\svMB"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    str_0 = 'BSTEly9r=(<m&@n"i@W.'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    bytes_0 = b"\x04\xc6?4\x15\x827\xbdrk\x89\x01."
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    str_0 = '\t"Y'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    bytes_0 = b"\x003\x96\x9f\xe3\xc6\x9eBH\x89R\xc42\xa3\x98*\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    bytes_0 = b"_\xa9|\x9bGz\xd9\x98\xc4A\x84"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    complex_0 = 2232.972 - 2402.808113j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    complex_0 = -2860.582747 + 52.2107j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    str_0 = "\x0cy)a\ramF"
    set_0 = set()
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    bytes_0 = b"\xd6,\x17H\x9fF\xba;\xa22\xfb\x89\xc8^?\xa6\xa7r-I"
    bool_0 = True
    dict_0 = {bytes_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    bool_0 = False
    str_0 = "l\t"
    str_1 = ""
    dict_0 = {str_0: bool_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    str_0 = "s.;`fTK=u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    str_0 = "G "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    str_0 = "e,Z?FNd"
    str_1 = ":v&]e>X`bo\x0bUo{Lzkz"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    bool_0 = False
    module_1.object(*bool_0)


def test_case_2721():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2722():
    float_0 = -514.8679
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    bool_0 = True
    bytes_0 = b"\xf2\xdfY\xff\xd7\xd7\xea"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    float_0 = 735.951
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    bytes_0 = b"\x8bf\xfc\x8c\xdc\x16\xc7\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    str_0 = "$j-Y\x0b7zi8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    str_0 = "ps=%<"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    float_0 = 1149.632822
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    float_0 = 1657.2
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    tuple_0 = (dict_0, float_0, float_0)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    bool_0 = True
    bytes_0 = b"NNl\xf9\xbdmk\xf3\xc6Y\x17"
    module_0.match(bool_0, bytes_0)


def test_case_2731():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2732():
    object_0 = module_1.object()
    str_0 = 'ZPQCx4"dXd'
    tuple_0 = (object_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    str_0 = '8`S5\\iYX$\x0c\t7HdPt"{-A'
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    bytes_0 = b"\x7f\x05\x88\x1c\x94"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2735():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2736():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, list_0, bool_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


def test_case_2739():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2740():
    int_0 = 1873
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    int_0 = -477
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: int_0, int_0: tuple_0}
    bytes_0 = b"\xc42]\xc6\xa3\xd2>\xb3\x9f\x1a\xa9\xd6\xaf\x9a\xa1\xea\xe5\xcb\xbc"
    tuple_1 = (tuple_0, int_0, dict_0, bytes_0)
    int_1 = -234
    tuple_2 = (tuple_1, int_1)
    module_0.get_new_command(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    str_0 = "d4\t\rF6{F|\x0cmstg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    int_0 = -2659
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    float_0 = 187.08166
    bytes_0 = b"6\xeb[\x03\xf1p3\x16R\x07^uD\x8f\xfc\xc8D\xaf\x7fc"
    tuple_0 = ()
    tuple_1 = (float_0, bytes_0, bytes_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    str_0 = "]BK$2+cQ"
    bytes_0 = b"\xd5\x01\xb4\xe1\xdd"
    list_0 = [str_0, str_0, bytes_0, str_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    none_type_0 = None
    int_0 = 565
    module_0.match(none_type_0, int_0)


def test_case_2747():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2748():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    bytes_0 = b"0\xbe\x80\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    str_0 = ">>~=-ZE$=TI38"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    float_0 = 991.80879
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    tuple_0 = ()
    bool_0 = False
    set_0 = {tuple_0, tuple_0}
    tuple_1 = (tuple_0, bool_0, set_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    str_0 = "?A&ghoS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    float_0 = -1790.51
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_1: bool_0}
    tuple_0 = (bool_0, bool_1, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    float_0 = -1562.9945
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    bytes_0 = b'\xc2\xf6\xdc\xad"^'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_2761():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2762():
    int_0 = -5036
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    bool_0 = False
    str_0 = "yL/j`KoDp"
    set_0 = {str_0, bool_0, str_0, str_0}
    dict_0 = {bool_0: bool_0, bool_0: bool_0, str_0: set_0}
    bool_1 = False
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    bytes_0 = b"\xb4"
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    list_0 = [set_0, bool_0, set_0]
    tuple_0 = (bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    int_0 = -959
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    float_0 = -2343.293767
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    float_0 = -2488.59
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    int_0 = -789
    tuple_1 = (tuple_0, int_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    str_0 = "iU"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    int_0 = -1958
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    int_0 = -105
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    str_0 = "$z/["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    str_0 = "{\x0ba^#&sD\n3VgqlPT3r1@"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    tuple_1 = (str_0, str_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    float_0 = 2742.632896
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2776():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2777():
    bytes_0 = b"\xd1r\\\x94\x9f+\xae"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    bytes_0 = b";n{m\xd8"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    int_0 = 1106
    str_0 = "<(*\n9:bL0i#X"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    float_0 = 678.355
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    int_0 = 1925
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    bytes_0 = b";)\x86\xac\xa3\x1bV\xa4y\x90C8\xd5\x88`\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    float_0 = -2600.32
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    object_0 = module_1.object()
    set_0 = {object_0}
    str_0 = ""
    tuple_0 = (set_0, set_0, str_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    tuple_0 = ()
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    int_0 = -587
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    bool_0 = True
    bytes_0 = b"\xa5\xb8"
    str_0 = "C^6\tY?-_$\x0bHdS"
    tuple_0 = (bytes_0, str_0, bool_0)
    tuple_1 = (bool_0, bytes_0, tuple_0)
    set_0 = {tuple_1}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    str_0 = "#'|(rr]?pvSw@-5x]`E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    bool_0 = True
    set_0 = {bool_0}
    str_0 = 'G7"PtV,^JUH4'
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    bytes_0 = b"]\x81\xd6\xe9\xf4\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    float_0 = 1025.906308
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    bytes_0 = b"\x1b\x12\xdey\xaezh\x1d\x90\x94-\xb5X\xf46\x9b\xa9\xb9"
    tuple_0 = (bytes_0, bytes_0, bytes_0)
    dict_0 = {tuple_0: tuple_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    str_0 = "@'~Jy.H.1Ld"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    str_0 = "Mw\tn1ojAG*yKh<+=tH"
    str_1 = "%,c(OfQ@hL"
    str_2 = "J4^,h#731KN\tB"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    int_0 = -1979
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    bytes_0 = b"!\xfax\xa8\xc3\x10<\xc9\x8a}\xd5\xd3\xe0\xf2J"
    bool_0 = False
    list_0 = [bool_0, bool_0]
    dict_0 = {bytes_0: bool_0, bytes_0: list_0}
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    bytes_0 = b'~\xcf\x8d"\x16\xb5\x91\x9c\xe4\x1d\x10\x8a'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    str_0 = ";Vv=zYs\r<OV=^e+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    float_0 = 1933.0
    int_0 = 2925
    set_0 = {float_0, int_0}
    list_0 = [set_0, set_0, int_0]
    list_1 = [set_0, int_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0, bool_1}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    str_0 = "N:qy-\\o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    float_0 = 1904.0282
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_2806():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2807():
    int_0 = 1469
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    str_0 = "oq\x0bbej@mJmW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    complex_0 = -1270.6532 + 3815.669j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    float_0 = -3329.3
    int_0 = 4449
    bool_0 = False
    tuple_0 = (float_0, int_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    bytes_0 = b"M3\x8bN\xec\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    complex_0 = -2662.1492 + 83.93j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    int_0 = -1411
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_2816():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2817():
    int_0 = 1829
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    int_0 = -1753
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    dict_0 = {}
    float_0 = 1488.68
    bool_0 = True
    tuple_0 = (dict_0, float_0, bool_0, float_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    str_0 = "lqf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    bytes_0 = b'\xfe \xbe\x18_\x8a\x16A\xb8\x05"\xfe\xeb\x173\xf8\x92'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    str_0 = "dGx{cz1YXBt S7\x0cu"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    str_0 = "/\x0b\x0c2oo"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, object_0)


def test_case_2828():
    pass


def test_case_2829():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2830():
    float_0 = -983.7029
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    bytes_0 = b"\x03\x0f\x82\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    bytes_0 = b'\x9df\x91"\xed\xf1`x{\xe3\x943\xd4\r'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    none_type_0 = None
    bytes_0 = b"o\x96\xd1>\xb4R\x9b\x19\xabu;Pu\x01\xb5\xfem\x9f"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    bytes_0 = b"\x87\xb0\xbf\xcb\xa6SW"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    float_0 = 4247.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    int_0 = -234
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    str_0 = "|@D<q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    float_0 = 2541.8576
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    int_0 = 3172
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    int_0 = 1474
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    bytes_0 = b"\xb6\xc5H\xa1\x8eA&"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2844():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2845():
    str_0 = "i#,\x0bZm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    bytes_0 = b"\x9b3-9\xe7,o\x03\xab"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    int_0 = 781
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    bytes_0 = b"\xd54\xf5/\xae\xde\x0ce\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    bool_0 = True
    bytes_0 = b'"UA\x16\x0b\x9d\x92\xed\xfb:\xed'
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bytes_0 = b"ZL\x8a\xd0\xccd~S\xc0\xf6\xed"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    complex_0 = 415.84 + 292j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    str_0 = "K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bytes_0 = b"g\x87\xc5/5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    bytes_0 = b"\xc8ev^8V\xf5\x13\xd6\xa9\xe0$\x8d\xb8l\xdc\x9f\r\x8f\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    complex_0 = -2610.17 + 755.41584j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    bytes_0 = b"\xb0\x93\xc6\x13\x9a\xf0\xf9\xd7U\xa1-\x97{\xae\x06\xef"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    float_0 = -2348.83
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    int_0 = -53
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    str_0 = 'X@"^oS_M"3T93?|'
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_2860():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2861():
    bool_0 = False
    set_0 = {bool_0}
    str_0 = ":_P .\x0b5#cC^\x0b{"
    tuple_0 = (set_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    str_0 = "u^-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    str_0 = "X.5B"
    bool_0 = True
    set_0 = {str_0, bool_0}
    list_0 = [set_0, str_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    int_0 = 2697
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    bytes_0 = b"jR\xd3<?Z\xa5\xae\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    int_0 = -830
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    set_0 = set()
    dict_0 = {}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    int_0 = -2229
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    int_0 = 1044
    module_0.match(int_0, int_0)


def test_case_2872():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2873():
    str_0 = "=h+bg|e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    bytes_0 = b"\x95,2\x08\xff\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    float_0 = -825.74951
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    int_0 = 3446
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, bool_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    bytes_0 = b"w\xef\x1dY"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2881():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2882():
    str_0 = "\nN.V;"
    int_0 = -521
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_2883():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2884():
    str_0 = "\r\n=4ZQA8+N<'"
    str_1 = "KYZ#Ho)t9^"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    int_0 = -1992
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    bytes_0 = b"M]\x1d~\xb1\x14\xba\xdd\x97:t\x0c\x93\xda_\n\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    bytes_0 = b"P\xedv\xa1\xf0\xeco\xe4m\xfa\xd7\xffl\x881\x0c\x14\xf2"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    int_0 = -3085
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    bytes_0 = b"\xc8\xd8\x916m\x8f\x18\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    int_0 = 920
    module_0.get_new_command(int_0, int_0)


def test_case_2891():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2892():
    float_0 = -2103.78
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    int_0 = -238
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    int_0 = -630
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    bytes_0 = b"\xd0\xc5]\xb7 \x94\x94\x9b\x03Z\xd7\xb2tQF"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    str_0 = ""
    list_0 = [str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    int_0 = 763
    tuple_0 = (int_0,)
    set_0 = {tuple_0, int_0, tuple_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    int_0 = -3941
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    str_0 = "M\x0cy'=t_e*)0zSC[9XY\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    bytes_0 = b"\x853\xc0\xca\xec\xeb\x0e)"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    complex_0 = 2359 - 346.764j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    float_0 = -3130.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    list_0 = []
    bool_0 = True
    bytes_0 = b"\x12\xcb\x8fKh"
    tuple_0 = (list_0, bool_0, bytes_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    int_0 = -93
    bool_0 = True
    bool_1 = True
    tuple_0 = (int_0, bool_0, int_0, bool_1)
    set_0 = {tuple_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    str_0 = '>"_}r$'
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (tuple_0, bool_0)
    dict_0 = {str_0: str_0, str_0: tuple_1, tuple_1: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_2907():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2908():
    int_0 = -1134
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    int_0 = -4346
    list_0 = [int_0, int_0, int_0, int_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    str_0 = '3-8(#Z2:Qz"v/RC\r":'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    list_0 = []
    complex_0 = 2297 - 101.801j
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    int_0 = -1948
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    int_0 = 685
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    bytes_0 = b"\xd6\xedTM\xbfI\x1d\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    str_0 = "@Ia!:^o"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    int_0 = -2532
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    bytes_0 = b"\xf5\xfcH\xa6\xf9\x7ft\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    bytes_0 = b"07\x96q8.?\x89X\xe1\x9ec\x0b\xa9\xa3\x13"
    int_0 = -932
    str_0 = "\r\n`S>Yj;A7@wVx:2\x0c`@"
    tuple_0 = (bytes_0, int_0, str_0, int_0)
    list_0 = [tuple_0, str_0, int_0, tuple_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    str_0 = "S2)"
    int_0 = 1019
    int_1 = 3183
    dict_0 = {str_0: str_0, str_0: int_1, str_0: int_1}
    tuple_0 = (str_0, int_0, dict_0, int_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    str_0 = "QYV%Ma"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    bytes_0 = b"&|\x12(1\xbb\xcc>\x1ecz\xf7b\x86j\xd4\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bool_0 = True
    list_0 = [bool_0]
    set_0 = set()
    bool_1 = False
    tuple_0 = (list_0, set_0, bool_1, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    str_0 = "fl9N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    float_0 = 762.889825
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    bytes_0 = b"y\xf2\xd7\xf9]L#\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    float_0 = 1711.549595
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    int_0 = -544
    bytes_0 = b"h\xd0\xa7\xde\x1f\xdd\xc7q\xfc\xe2"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    bytes_0 = b"\xf9\xf2|\xcf9\xbe\x82\x10\xde\xf6\xfe\x80l\xc4\xed\x8aM\xbf\n\x8d"
    list_0 = [bytes_0]
    str_0 = '4~]p4>]Q"ZeC>H\r\tY'
    str_1 = "fnkm[)G*Rt(I9qu!j8O"
    dict_0 = {str_0: list_0, str_1: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    str_0 = "Lc&iN-t}6Z/7A!y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    str_0 = "pApYw`FJf"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    str_0 = "emy}#BaI"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    bytes_0 = b"r]\x08.\xc0\x0es\xf8\x01\x14\x16\xcbm\x9b\x1a\xb3g\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    float_0 = 3581.1
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    bytes_0 = b"\xfa\xfd\x11sg\xb1e\xc5:Y\xc9\xde\x99\xec\xac\x02X8\xa0 "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    bytes_0 = b"1}\xd6\xd8\x05\x05\xc9J\x93\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bytes_0 = b"<\x9c\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    bytes_0 = b"\xee\x03\xac\x16D>\x08U\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    bool_0 = False
    float_0 = 1271.1678
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    str_0 = "jt;iEh\x0c_e)"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    bool_0 = True
    str_0 = ">GLt]|<'b@;</CaoUu,w"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    bool_0 = True
    int_0 = -2795
    tuple_0 = (bool_0, int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    str_0 = "3$<dxz_Pv`rmiM$;jT;"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    float_0 = -386.84
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    dict_0 = {}
    int_0 = 978
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    bytes_0 = b"wE\xf6\x12\x1b\xe7\xb0\xaf\xccQIh\x15\xfa\xc6.\xeb"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    complex_0 = 578.593 - 1659.392j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    str_0 = " m@QQZ\x0bK5'\t;\""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    int_0 = 2182
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    bytes_0 = b"q\x89\x80uN\x1a"
    module_0.match(bytes_0, bytes_0)


def test_case_2954():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2955():
    float_0 = 2953.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    bytes_0 = b"b\xef\xa4\xae\xe7\x14\x9c\xb2\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    list_0 = []
    str_0 = '"N'
    dict_0 = {}
    tuple_0 = (list_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    str_0 = "ULjy#uj{\x0c)"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    bool_0 = False
    str_0 = 'WTc !7^Oc"^h\t?PMD=+W'
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    bytes_0 = b"\xc6"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"\x0f\x95\xb3\xf5~\xbdF\x9fM\x9a\xe5\xfen8\xe4+H<"
    dict_0 = {tuple_0: bool_0, bool_0: bytes_0, bytes_0: bool_0, bool_0: tuple_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    none_type_0 = None
    int_0 = 1032
    int_1 = 692
    bool_0 = False
    tuple_0 = (int_0, int_1, bool_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    str_0 = 'GNAM^Dw=L2GC"cYbe'
    module_0.match(str_0, str_0)


def test_case_2964():
    pass


def test_case_2965():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2966():
    complex_0 = 87.694115 + 2746.64245j
    module_0.match(complex_0, complex_0)


def test_case_2967():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    list_1 = [list_0]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0]
    int_0 = 4
    tuple_0 = (bool_0, list_0, list_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    int_0 = -1744
    float_0 = 4733.46
    set_0 = {tuple_0}
    tuple_1 = (int_0, tuple_0, float_0, set_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    int_0 = -351
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    str_0 = "e6|l\x0bD2Gx (L+A^c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    int_0 = 2053
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    str_0 = "C@5\tGiH<dx<wgo\x0b\n/r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    bool_0 = True
    str_0 = "Vs5J(0ny"
    dict_0 = {bool_0: str_0, str_0: bool_0, bool_0: str_0, str_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    int_0 = 938
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    bytes_0 = b"\xaf"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    int_0 = -2539
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    int_0 = -1679
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    int_0 = 757
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    bytes_0 = b"\xb6Vq}@C\n"
    tuple_0 = (bytes_0,)
    bytes_1 = b"\xca\xc3\x04a\x7f"
    dict_0 = {tuple_0: tuple_0, bytes_0: bytes_0, bytes_1: tuple_0, tuple_0: bytes_1}
    int_0 = -2320
    tuple_1 = (dict_0, bytes_0, int_0, dict_0)
    module_0.get_new_command(tuple_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    int_0 = 1620
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    int_0 = -1039
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    float_0 = 725.17104
    set_0 = {float_0}
    int_0 = 1175
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    float_0 = -135.325
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    int_0 = -2694
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    bytes_0 = b"?\xec\xf5\xb7\xa6\xfac\xb1\x07\x1d\xf4\x9dP\xc2J"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    bytes_0 = b"\xbd\xd8d\r\xe8\xad\t\xce\x82\xeb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    str_0 = ':&^qM<ePO\r*u?" !IZ'
    dict_0 = {str_0: str_0}
    bool_0 = True
    tuple_0 = (dict_0, str_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    int_0 = -1433
    bytes_0 = b"\xe4D\xde\xe0\x8c\x14Z\xfcU\x0e\xaa\xba\x14\xca"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    bytes_0 = b"\xefT\xd5n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    float_0 = 1019.789089
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bool_1 = True
    tuple_0 = (bool_0, bool_1, list_0, bool_0)
    bool_2 = True
    list_1 = [list_0, tuple_0, bool_2, bool_1]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    complex_0 = 1126.4 + 1307.97j
    list_0 = [complex_0, complex_0]
    list_1 = [complex_0, list_0]
    module_0.match(list_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    float_0 = -756.6817
    set_0 = set()
    list_0 = [float_0, float_0, set_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    int_0 = -1183
    set_0 = {int_0}
    dict_0 = {}
    tuple_0 = (int_0, set_0, dict_0)
    list_0 = [tuple_0, set_0, tuple_0, dict_0]
    bytes_0 = b""
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    bytes_0 = b'y"L\x87e\xfc\tHJ'
    module_0.match(bytes_0, bytes_0)


def test_case_3004():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3005():
    bytes_0 = b"\xa6\x05\rx>\x81DB8S\xb1<"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    list_0 = []
    dict_0 = {}
    tuple_0 = (list_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    bytes_0 = b"|\x1b\x0f2\x9a\x05"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    list_0 = []
    str_0 = "82F<_k5$^l.*k?Ip>I"
    str_1 = "l"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    bytes_0 = b"\xa9f9o\xaeBd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3011():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3012():
    float_0 = -47.66
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    bytes_0 = b"\xec\x10\xf1\xa1\xf7=(\xa3\x01\\\x10$\xbf%\x92Gm\xf5\xea\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    none_type_0 = None
    float_0 = 1229.0
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    str_0 = "eE|o>h.x!j?Ao2 -u?GA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    bool_0 = False
    complex_0 = 3984.7246 + 2204.383j
    float_0 = -1050.0
    tuple_0 = (bool_0, complex_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    bytes_0 = b"3n\xab \x88\xd7\xc9\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    str_0 = "8w$VO!i7pXOp@F1#"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    int_0 = 402
    int_1 = -1648
    tuple_0 = (int_0, int_0, int_0, int_1)
    bool_0 = True
    dict_0 = {tuple_0: tuple_0, tuple_0: int_1, tuple_0: bool_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    str_0 = "vG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    int_0 = -1967
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    bool_1 = True
    list_0 = [tuple_0, bool_1, int_0, bool_0]
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    bytes_0 = b"\xd3\xa9\x89"
    module_0.match(bytes_0, bytes_0)


def test_case_3025():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3026():
    int_0 = 2306
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    str_0 = "y_\t"
    str_1 = "PLEY+`v36n"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    float_0 = 2027.946065
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    none_type_0 = None
    float_0 = 1505.86127
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    str_0 = "32x3AM~"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    int_0 = 2723
    module_0.get_new_command(int_0, int_0)


def test_case_3034():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3035():
    bytes_0 = b"m\xb7\x91\r\xf1\\F\x03"
    module_0.match(bytes_0, bytes_0)


def test_case_3036():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3037():
    str_0 = "d~X\x0bLa>!x-J"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    bytes_0 = b"c\xafZ\xb0\xfd&\x8a:\xb3("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    bytes_0 = b"\xc7~\xda\x0e\x14W\xafGe<\xb2:\x8b\xbc\xe6l"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    str_0 = "bi9\x0cSiw\x0cME.6|-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    str_0 = "\tf0[i]<+sfm\t7kMak2kV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.object(*set_0)


def test_case_3043():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3044():
    str_0 = "MA~"
    bytes_0 = b"\x89g\x84F\xb3bgc"
    set_0 = {str_0, bytes_0}
    bool_0 = True
    list_0 = [set_0, bytes_0, str_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "=SHJaZ &g\\>h"
    str_1 = "4]*ZSz>U87/"
    list_1 = []
    str_2 = "EV"
    str_3 = "kf"
    dict_0 = {str_0: str_0, str_1: list_1, str_2: str_1, str_3: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    float_0 = -358.986535
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    complex_0 = -2320.3 - 982j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    bytes_0 = b"\x06\xe4\xe8\xe3W\x1cp\xfeX\xc4\xff\x1fc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    bool_0 = False
    bytes_0 = b"\x82:1\x11\xf5\x01\xf4\x8aB\x11\x14\xd2j\x16i\xa0E"
    tuple_0 = (bytes_0,)
    dict_0 = {}
    tuple_1 = (bool_0, tuple_0, dict_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    bool_0 = True
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    bytes_0 = b"\xd6\x85\x07\x13\x1f\xc9\xbfd*\xa1\xef\xba*9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    str_0 = "/Ciil,PY/q#m~<`Du("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    int_0 = 498
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    str_0 = "\trLc\x0b5s7EY~*$r{IFr^k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    str_0 = "\\)u,S91;~WY7>kl5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    str_0 = "CtKB'm~m=\x0c7mc\"YGw"
    list_0 = [str_0, str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    bytes_0 = b"n\x05\x1dM\x9e\xcfm\x88"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    float_0 = -563.4325
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    str_0 = ",E6.'hYHy3hk^v,)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    int_0 = 2730
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    complex_0 = 1244.479016 - 1419.6575j
    module_0.match(complex_0, complex_0)


def test_case_3062():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3063():
    float_0 = -4434.56
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    int_0 = 1624
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    str_0 = "S/o(.e^HYk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    str_0 = "jh'uM >"
    str_1 = "rLVL/9=uI2Uu(8l\x0c"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    int_0 = 635
    str_0 = "MP\\|25'+iU>"
    set_0 = {int_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    bytes_0 = b"\xac\xb4\x89\xa1\xc0C\xf4"
    float_0 = -418.01898
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    int_0 = 4032
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    bytes_0 = b"Ml\xedd\xed{\xd3ik\x1d<\x19\xa6wp\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    str_0 = "1D,Qz|(^-T}G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_3074():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3075():
    int_0 = 3350
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    bytes_0 = b"\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    list_0 = []
    bytes_0 = b"\xf2ScU\x82Ttuk\xcf\x19\xfcb\x19\xad`=;{\xb1"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    str_0 = "(w!cM~\x0c'.iL*>\x0c\n\tk"
    str_1 = "&PF_\x0ckG\nX`\\uI"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: str_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    tuple_0 = ()
    str_0 = "\x0cz1r&P{~z9@<#`u0LZNa"
    set_0 = {tuple_0}
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, str_0: set_0}
    list_0 = [dict_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    bool_0 = True
    str_0 = "T?]bc=jO"
    list_0 = [bool_0, bool_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    bytes_0 = b"Z;\xabZ\x1e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


def test_case_3085():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3086():
    int_0 = -3886
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    bytes_0 = b"\x7f\xafz\xc0\x9b\x84\xf7\x8c\x90\xb0\x99"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    int_0 = 358
    module_0.get_new_command(int_0, int_0)


def test_case_3089():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3090():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    bytes_0 = b"\x9c\xf7\xba\xb2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3092():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3093():
    bytes_0 = b"8\xe3\n\xa6B"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


def test_case_3095():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3096():
    str_0 = "JNOoNOelvR /iE@r5b\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    complex_0 = 1938.16 + 4175.577j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    str_0 = "y:~H)<;9?"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    str_0 = "*50T:\tVcJ\n)VY{:4 | o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    float_0 = -1841.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    int_0 = -3164
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    str_0 = "|s `A[[#4kr.)#"
    bytes_0 = b"\x8e\xd7\xff\x9a\x80\xe0|\xb6"
    tuple_0 = (str_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    str_0 = "\x0bCZ\r;FOoV&}j5/Qs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    complex_0 = -1234.07967 + 143.67j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    int_0 = 1579
    list_0 = [int_0, int_0]
    int_1 = -4146
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    str_0 = "to~P M@*H"
    tuple_1 = (tuple_0, str_0, int_1)
    tuple_2 = (list_0, int_1, tuple_1, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    str_0 = "` D`$v3V}V,"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    int_0 = 2094
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    int_0 = -646
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    int_0 = -86
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    float_0 = -2261.51
    tuple_0 = (float_0,)
    set_0 = {tuple_0, float_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    int_0 = -2071
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    complex_0 = 480.68642 + 1254.083j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, bool_0, tuple_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    str_0 = "\\W142rb|ra%\x0c"
    module_0.match(str_0, str_0)


def test_case_3119():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3120():
    float_0 = -165.366
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    bytes_0 = b"^!\xe6%\x07y;\xbe\xeaM\xe0"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    float_0 = 1693.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    float_0 = 2253.729
    module_0.get_new_command(float_0, float_0)


def test_case_3124():
    pass


def test_case_3125():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3126():
    float_0 = -1068.7879
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    str_0 = "5/C=cq_*d\r)Xz1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    int_0 = 4403
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    float_0 = 1402.049
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    float_0 = 4722.289
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    float_0 = 2573.66425
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    str_0 = "xvq?U2\\H|i54HZB\rC\nvb"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bool_0 = False
    bytes_0 = b"\x9f\x1e\xa1\xa0\x87q\x0f\xf1\xbe"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    float_0 = -3688.98286
    tuple_0 = (float_0,)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


def test_case_3135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3136():
    float_0 = -222.04
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    str_0 = "[.\t\rMA(H1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    bytes_0 = b"\xc5\\N\xf8 \x14\x08\xbf\xcd\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    float_0 = 644.42
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    str_0 = "au/qhpuNK2"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_3141():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3142():
    str_0 = 'U{as6nP:$@d"2GM;Nd'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    str_0 = "/YM4(>&&}A,|zn["
    list_0 = []
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    complex_0 = -3341.12 - 559j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    str_0 = "cmjh.y\x0bpmPlMe"
    str_1 = "O+V-I"
    str_2 = '/].B=G"'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    complex_0 = -1003.117 - 2125.231j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    complex_0 = -1848.3628 + 99.554j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    int_0 = 3604
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    int_0 = 968
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    str_0 = "$kV).&Mx"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    str_0 = "_H{Cpi/Ty\x0bqA&4d$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    str_0 = "]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    int_0 = 4213
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    bool_0 = True
    bytes_0 = b"\xa8\t\x1b\xd8\xf1\xad\x0e\x11V\xad"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    int_0 = -746
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    int_0 = 1921
    str_0 = "{',f7\r "
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    object_0 = module_1.object()
    bool_0 = False
    dict_0 = {
        object_0: object_0,
        bool_0: object_0,
        object_0: bool_0,
        object_0: object_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    int_0 = 3536
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    int_0 = 981
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: bool_0, tuple_0: tuple_0, tuple_0: tuple_0}
    bool_1 = False
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    bytes_0 = b"k}\xfe\xb8\xb0\x8b\xf7\\\xde\x8b\xf9\xc9\xad\xa4\x1b\xfc\x8c*"
    str_0 = "Y1&"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    str_0 = "XN`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    bytes_0 = b"\x0f\xc2h\x89i\x1f/"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    str_0 = "e\r6\r4-]>"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    str_0 = "KhOf0psDt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    int_0 = 1194
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    float_0 = 1731.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    int_0 = 307
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    str_0 = ",0kHn;\nN9j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    complex_0 = 1941.784024 + 698.844j
    float_0 = 1481.74665
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        float_0: complex_0,
    }
    bytes_0 = b"HC\r"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(object_0, list_0)


def test_case_3172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3173():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    set_0 = {tuple_0}
    dict_0 = {bool_0: set_0, tuple_0: bool_1}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    float_0 = 2149.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    bytes_0 = b'\x1c.\xcf<\xe5\xe4"\x17x\x17\xcd'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    int_0 = -2703
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    int_0 = 1327
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    bytes_0 = b"\xe7k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    float_0 = 3975.597358
    str_0 = "JWe1phE7"
    tuple_0 = (str_0,)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    int_0 = -358
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    float_0 = 1918.8
    module_0.match(float_0, float_0)


def test_case_3187():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3188():
    complex_0 = 1485.9 + 3152j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    str_0 = ">CEt5o*"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    complex_0 = 626.761 - 822.696j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3192():
    int_0 = -2389
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    int_0 = 3455
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    int_0 = -1373
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    bytes_0 = b"\xe3\xc3{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    float_0 = 1647.795202
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    int_0 = -1788
    module_0.get_new_command(int_0, int_0)


def test_case_3202():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3203():
    float_0 = 2583.009002
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    none_type_0 = None
    str_0 = '{\x0b\'Mn"sC\x0bBr\t&`"a<('
    module_0.get_new_command(none_type_0, str_0)


def test_case_3205():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3206():
    int_0 = -985
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    int_0 = -1287
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    bytes_0 = b"\xd2\xc2\x15a\xa8\xe7\xd8\x9c\xde\xae\x89cN\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    bool_0 = True
    int_0 = 129
    list_0 = [bool_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    str_0 = "T<4n-g$Y"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    bytes_0 = b"S\xe3r."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    bytes_0 = b"\xdef!\xa9H\x05\x8a\xdfcR8?\x9b|\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    int_0 = -811
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    str_0 = "R(/c*m\n"
    bool_0 = True
    dict_0 = {str_0: bool_0, bool_0: bool_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    complex_0 = 3333.51745 - 2495.2j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    none_type_0 = None
    complex_0 = 845.2094 + 1509.0461j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    dict_0 = {}
    tuple_0 = (dict_0,)
    list_0 = [dict_0, dict_0, tuple_0, dict_0]
    tuple_1 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


def test_case_3220():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3221():
    int_0 = 974
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    bytes_0 = b"/\xa8\xbb\x06\x1eC\x15;\x92\xc8\x89\xe7l\xd6\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    int_0 = 1033
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    float_0 = 3640.99846
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    bytes_0 = b"\xcf\x0cU"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    str_0 = "GK}2%B(u}V638v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    complex_0 = 2057.2423 - 1534.41903j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    bytes_0 = b"\x9e\xb1D\xa0\xae_\xf6q\xe8T\xa9\xbc\x96^\xa6Z\x16\xb1\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    list_0 = []
    float_0 = -2573.143313
    bool_0 = True
    set_0 = set()
    tuple_0 = (list_0, float_0, bool_0, set_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    str_0 = "98\\M9xIQptNSs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    dict_0 = {}
    tuple_0 = (dict_0,)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    str_0 = "hX]BS9Rs0Hc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    int_0 = -621
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    set_0 = set()
    int_0 = 1816
    tuple_0 = (set_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    bytes_0 = b"c\x0f\x89j\x12"
    int_0 = 1535
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    int_0 = 3512
    str_0 = "Y<\r1\\$dJ%WaSgP"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    int_0 = -3028
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    complex_0 = -1491.65186 - 1175.88843j
    str_0 = "+"
    set_0 = {complex_0, complex_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    bytes_0 = b"3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    set_0 = set()
    bool_0 = True
    bytes_0 = b"\x9d\xdd.(5\xe4"
    tuple_0 = (set_0, bool_0, bytes_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    int_0 = 527
    float_0 = -1865.11
    bytes_0 = b'\xf6\x1a\xab\xad\xd3\xb7:\xf6S\x00"w\xd4\xe9\xa5Y\xba\x95o'
    str_0 = 'f``-\x0b"!#'
    tuple_0 = (float_0, bytes_0, str_0)
    dict_0 = {int_0: int_0, int_0: tuple_0, int_0: float_0, bytes_0: tuple_0}
    list_0 = [dict_0, dict_0, dict_0, tuple_0]
    tuple_1 = (int_0, dict_0, list_0, str_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    str_0 = "m'q"
    bool_0 = False
    list_0 = [bool_0, str_0]
    tuple_0 = (str_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    complex_0 = 1219.82427 - 1001.4842j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    int_0 = 2806
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    float_0 = -1146.33
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    float_0 = -2020.409
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    bool_0 = False
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    int_0 = 2092
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    int_0 = -382
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    bytes_0 = b"Q*\xfa\xdfP\x9d\xcb\xd6Q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    list_0 = []
    object_0 = module_1.object(*list_0)
    set_0 = {object_0, object_0}
    module_0.match(set_0, set_0)


def test_case_3258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3259():
    str_0 = "O\n(9/\x0bzZ=@:4"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    bytes_0 = b"R\xc9Me\xa1_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    int_0 = -1192
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    int_0 = -1240
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    bytes_0 = b"t-:\xeb\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    bytes_0 = b"r-\xf6\xdd7\x16"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    str_0 = 'e+N@_]")D'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    int_0 = 3618
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    str_0 = "5)j\nIlZK"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    int_0 = 1924
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    complex_0 = 4173.25 + 729.642884j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    float_0 = 2957.61086
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    bytes_0 = b".\xaa\xa6\x14?W\x90e\xc3\xd3:\xb9\x9c\xb2a\xbb\xe1b\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    bytes_0 = b"\xa83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    float_0 = 872.97
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    float_0 = -1653.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    str_0 = "bWO"
    module_0.match(str_0, str_0)


def test_case_3278():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3279():
    bytes_0 = b"\x1c("
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    int_0 = 3429
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    list_0 = []
    bytes_0 = b"r\xf4\xeb\x0c\xfc\x18"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bool_0)
    tuple_1 = ()
    dict_0 = {tuple_1: list_0}
    tuple_2 = (tuple_0, dict_0, bool_0)
    set_0 = set()
    tuple_3 = (list_0, bytes_0, tuple_2, set_0)
    module_0.get_new_command(list_0, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    bytes_0 = b"D\xdb\x06D\xa6\xfe\xdc;\x07\x9e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    bool_0 = False
    int_0 = -2247
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    str_0 = "KX<m\x0bpH`Rx3u\x0cT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    float_0 = 2282.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    bytes_0 = b"?s\x86\xb3\xffH\x99\xf8\xa1\xfb\xcc\xca!\xb9\xa7\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    int_0 = -611
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    int_0 = 3120
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    bytes_0 = b"8\xe8*\xc8?gL"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    str_0 = "j"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    str_0 = ">Mo'A/-IK*fr7.t"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


def test_case_3294():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3295():
    int_0 = 3188
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    complex_0 = 2348.7601 - 1205.2075j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    complex_0 = 1746.741 - 1270.5273j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    str_0 = "pkP+B$aup"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    str_0 = "}n6MjL>=2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    str_0 = '*20N"$WZZ'
    float_0 = 430.11
    tuple_0 = (str_0, float_0)
    int_0 = 508
    tuple_1 = (str_0, tuple_0, int_0)
    bool_0 = True
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    float_0 = -596.207
    dict_0 = {float_0: float_0}
    tuple_0 = (dict_0,)
    bool_0 = False
    dict_1 = {bool_0: bool_0}
    list_0 = [tuple_0, dict_1, float_0]
    module_1.object(*list_0, **dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    str_0 = "F\nU&2n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    complex_0 = -4244.80192 + 697j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    bool_0 = False
    str_0 = "s0AZ"
    str_1 = ""
    str_2 = "nO~&"
    dict_0 = {str_0: bool_0, str_0: str_0, str_1: str_0, str_2: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    str_0 = "+0o0AM]q@C!4{\x0b^V"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    float_0 = 2019.32
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    complex_0 = 4316 + 541.1j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    str_0 = "B`vJSAJ[~Zq^ukPNK.Y"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    float_0 = -226.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    str_0 = "PT\\cs\tH"
    tuple_0 = (str_0, str_0)
    list_0 = [str_0, str_0, str_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    float_0 = -914.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    str_0 = '"u}3K,;T>4\r_\n$X'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    int_0 = 2221
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    int_0 = -1549
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0, int_0, tuple_0, tuple_0]
    int_1 = 504
    module_0.get_new_command(list_0, int_1)


def test_case_3318():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3319():
    int_0 = -2681
    float_0 = 39.832
    str_0 = "'\r\\EAn\n`EeA1[2%\n}6n"
    bool_0 = True
    dict_0 = {int_0: int_0, float_0: str_0, int_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    int_0 = 1045
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    bytes_0 = b"\xbb\xd7\x04\x82I2\x98\xc0\xec\x9d\x05bT\x19\xeb\xd1\x94Yh\xe5"
    bool_0 = False
    list_0 = [bool_0, bytes_0]
    tuple_0 = (bytes_0, list_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    int_0 = -2418
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    bytes_0 = b"\xfd\xc0\xdb\x1fTL\xd7uaN\x87N"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    int_0 = -498
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    str_0 = 'ujZLkw<t<CB\\"/wt'
    module_0.get_new_command(str_0, str_0)


def test_case_3327():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bytes_0 = b'\xe6\xdcQ"9\xb9\xa1\x08z\x08F\x1a\xae\x91\x8c\xc7`\r\xae'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    int_0 = 1810
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    bytes_0 = b"\xc9G\xbb(\x1cA7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    int_0 = 2379
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    str_0 = 'Q[$$\nq\rXp"&8sq&74fqm'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3333():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3334():
    bytes_0 = b"\x7f\r\xcc\x0e\xeb\x90a\x8c>y\x0c\xf1\xbe\n("
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    bytes_0 = b"\xd8\x9a\xa0\xa2\x17\xfe\xd7\x7f\xece-\xe1h4\x95\x01y\xb0'"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    str_0 = 'j"4}rr'
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    str_0 = "r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    str_0 = "=a2L3\t"
    float_0 = 4252.3
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    bytes_0 = b"\xb6\xfc{\xb1\xe5\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    str_0 = "F3}KoR#xdvlt!e9GinM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    float_0 = 2625.81077
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    str_0 = ""
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    none_type_0 = None
    bytes_0 = b'\x15b/8b\x8a\xcb`\x14h"'
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    int_0 = 3041
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    int_0 = -403
    int_1 = -2676
    list_0 = [int_0, int_1, int_1, int_0]
    tuple_0 = (int_0, int_1, int_0, list_0)
    int_2 = -1978
    module_0.match(tuple_0, int_2)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    str_0 = 'M:3~<>)DF"sV:A-'
    module_0.get_new_command(str_0, str_0)


def test_case_3348():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3349():
    int_0 = -1261
    bool_0 = False
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (bool_0, set_0)
    int_1 = 1621
    dict_0 = {}
    tuple_1 = (int_0, tuple_0, int_1, dict_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    bytes_0 = b"A"
    module_0.match(bytes_0, bytes_0)


def test_case_3351():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3352():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    str_0 = ">`ak<=k>|,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    bytes_0 = b"\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    float_0 = 2553.3
    int_0 = 1521
    tuple_0 = (float_0, float_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    complex_0 = -1431 - 475.978j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bytes_0 = b"\x8e|?\xe0\xa9\x8b\x17$d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    int_0 = 667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    float_0 = -983.02
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    bytes_0 = b"\xda("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    float_0 = 2151.04
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    str_0 = "Qaq9w9vc2/>Ykfg:a"
    str_1 = "3:amfGP))iWv,-V*"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    str_0 = "XISg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    str_0 = "Cl}KpD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    str_0 = "$A(!Peg%\n!4"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    str_0 = "\njQ-h3c2!]"
    str_1 = "lK.SkJ}M"
    str_2 = "X/\\\x0ciC"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    int_0 = -1488
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    int_0 = 517
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    bytes_0 = b"\xc3\x9a\x89\x1f\x1a\xdf\\"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (list_0,)
    bool_0 = False
    tuple_1 = (tuple_0, list_0, bool_0, list_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_3371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3372():
    complex_0 = -1903.5 - 1460.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    int_0 = -995
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    str_0 = "AUpBe\x0bR"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    int_0 = -2120
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    int_0 = 814
    list_0 = [int_0]
    list_1 = [list_0, int_0, int_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    str_0 = "<5D`'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    int_0 = 1478
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    bool_0 = False
    float_0 = 789.0
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    int_0 = -287
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    bytes_0 = b"\xc8S\xd5\xc5\xf6F\xdey\xb1\xbbj\x05\xa6S\xa1[6\x8c9-"
    dict_0 = {}
    int_0 = -1530
    bool_0 = True
    tuple_0 = (bytes_0, dict_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bool_0 = False
    tuple_0 = (object_0, bool_0, object_0)
    str_0 = "ILjiKK4\\\x0cw4<mM"
    list_0 = []
    bool_1 = True
    tuple_1 = (tuple_0, str_0, list_0, bool_1)
    module_0.match(tuple_1, dict_0)


def test_case_3384():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3385():
    int_0 = -3873
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    bytes_0 = b"\xb2e\xba\t\x1d\x7fO]-\xe9\x02\xca>0M+\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    bool_0 = False
    float_0 = -3189.306
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    str_0 = "S=SMv\x0c\"3`GhOq'PfUz\\1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    str_0 = "yy#~'26>\n83']NZg"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    int_0 = -771
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    complex_0 = -2393.26 - 1638.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    bytes_0 = b"\xa0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    str_0 = "qcoi4Z6j"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    bytes_0 = b"L\xb4>\xff \xeb\x91\x98K\xfd"
    module_0.match(bytes_0, bytes_0)


def test_case_3395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3396():
    int_0 = -114
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    float_0 = 2636.61
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    str_0 = "}so[ua\x0b.<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


def test_case_3401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3402():
    str_0 = "8-"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    int_0 = -1433
    complex_0 = -4953.375 + 525.6j
    set_0 = {complex_0, int_0, int_0, complex_0}
    str_0 = 'Jk0Q"vt|.[Zwz%0\ndra('
    tuple_0 = (int_0, complex_0, set_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    int_0 = -2155
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    int_0 = -1451
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    bytes_0 = b"\xe1\xfe"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    int_0 = -2242
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    str_0 = "UB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    int_0 = 410
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    float_0 = 2677.775558
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    int_0 = 485
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bytes_0 = b"\xba\xf2C\x13\xd25\xfc\x07\x7f&\xebpf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    int_0 = 702
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    str_0 = "oi\n*U2C9L\x0bVqG/AP 2:'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    float_0 = -2102.988
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    none_type_0 = None
    int_0 = 131
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    bytes_0 = b"(\xfa\xbc=\xb2]\x92i\x99v0`\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    int_0 = -67
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    int_0 = -2765
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    bytes_0 = b"\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    bytes_0 = b"\xab\xee_\t\xa3\xcf\xf7\x87C\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    bytes_0 = b"cf\x07!"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    str_0 = " $"
    module_0.match(str_0, str_0)


def test_case_3427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3428():
    str_0 = "F_,\\,N)q|m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    complex_0 = -2826.65 + 1494.3j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    int_0 = -869
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    int_0 = 409
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_3432():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3433():
    str_0 = "W([5ku|.T\\&\t\t'Eh\r![u"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    int_0 = 2519
    float_0 = -849.958027
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    bytes_0 = b"\xd3\xda"
    str_0 = "7v2z*X9~?L;3xY%T\t"
    dict_0 = {bytes_0: bytes_0, bytes_0: str_0}
    float_0 = 2845.7901
    bytes_1 = b":;+\\M\xd7\x02\xea=fy\x0f\x9e\x84\x03\xee\x8b"
    tuple_0 = (dict_0, bytes_0, float_0, bytes_1)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    int_0 = -620
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    str_0 = "/:P_j*3O*\r}3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    int_0 = -167
    module_0.match(int_0, int_0)


def test_case_3439():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3440():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    float_0 = -2881.293
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    float_0 = 2233.44823
    bool_0 = False
    tuple_0 = (float_0, float_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    int_0 = 1501
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    float_0 = -70.651
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    int_0 = -3353
    module_0.get_new_command(int_0, int_0)


def test_case_3446():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3447():
    str_0 = " *^}:\x0cmmG[j_SR\x0b<S"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    str_0 = "pO0>XEJ\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    bytes_0 = b"\xff\xfc=\xe5\x14\\\xaa\xb3\xe3\x88\x96\ny\xc2\xd4\x01\x1b\x02"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    float_0 = 1204.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    bytes_0 = b"7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    str_0 = "DkXluIk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    complex_0 = -426.2 + 1348.4356j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    str_0 = "U'&]1"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    str_0 = "fJAP/rT-7"
    tuple_0 = (str_0,)
    bool_0 = False
    bool_1 = False
    list_0 = [str_0, str_0, bool_0]
    tuple_1 = (tuple_0, bool_0, bool_1, list_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    float_0 = 2620.67
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    bytes_0 = b"\r\x93\xa9\x85\xfd\x00q@\x1bq>\xd7Ud"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    float_0 = 2817.738
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    str_0 = "'k:"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    float_0 = -1040.235758
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    float_0 = 2044.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    float_0 = 3321.5873
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bytes_0 = b"\x15\xfc}\xf5\xab\x87l2\xa4"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    int_0 = 484
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    int_0 = -2048
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3470():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bool_0 = False
    str_0 = "IWI{\n ~yJzKy9<1\x0ciq:U"
    set_0 = {bool_0, str_0, bool_0, str_0}
    tuple_0 = (bool_0, set_0)
    dict_0 = {bool_0: bool_0, bool_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    str_0 = "reA|dDVdB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    bytes_0 = b"\xac-\xd7\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    none_type_0 = None
    bytes_0 = b"\xc3\xa1"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    set_0 = set()
    object_0 = module_1.object(*set_0)
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    str_0 = "k"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    str_0 = "jE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    float_0 = -583.52
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    bytes_0 = b"L\x0bi5\x8f\x9a\x86;\xc6\x89\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    complex_0 = -3717.703 + 452.783735j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    str_0 = "1/h\x0cT:}5*@l;l"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    str_0 = "/7m@mV/Ui"
    module_0.match(str_0, str_0)


def test_case_3483():
    pass


def test_case_3484():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3485():
    object_0 = module_1.object()
    int_0 = 294
    tuple_0 = (object_0, int_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    float_0 = 3449.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    int_0 = 2085
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    str_0 = "(4ElB\t%S3o4c<s`_t*"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    str_0 = "o'@.MzthY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    int_0 = -923
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    float_0 = 405.884
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    str_0 = "nK~Pd(sOpVM'ub\t0H"
    int_0 = -544
    dict_0 = {str_0: str_0, str_0: str_0, int_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    int_0 = 1439
    str_0 = "1?zM\r_4PPg"
    tuple_0 = (int_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    bytes_0 = b"\x14\xce\xf1Lk\xfdZhs\x05#\xf3x\x99x\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    bytes_0 = b""
    str_0 = "g"
    tuple_0 = (str_0,)
    int_0 = 2132
    str_1 = "Y\x0bS7m1N"
    tuple_1 = (bytes_0, tuple_0, int_0, str_1)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    bytes_0 = b"m\xf0\xd3\x81\x7f\xb17\xfa\x08\x14"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    bytes_0 = b"\xed\xdfH"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    int_0 = 3473
    module_0.get_new_command(int_0, int_0)


def test_case_3500():
    pass


def test_case_3501():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3502():
    bytes_0 = b"\xba]\xd5b\x1c2\xf11\xb1&\xe7\x9b7k\x06\x13\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    int_0 = -2114
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    int_0 = 3343
    list_0 = [int_0, int_0, int_0, int_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    list_0 = []
    bytes_0 = b"\xba\x00\x02_\x94\x95\xd8\x9a+\x1c"
    tuple_0 = (list_0, bytes_0)
    list_1 = [tuple_0, bytes_0, list_0, list_0]
    list_2 = [list_1, tuple_0]
    module_0.get_new_command(list_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    bytes_0 = b"aL\xd9\xa8QW\xfa\x8b\xd3q\x9d\xf5\xab\xe3L\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    bytes_0 = b"\xe4\xa8\x1cp\xf0X\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    int_0 = -1842
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [tuple_0, tuple_0, dict_0, dict_0]
    tuple_1 = (tuple_0, dict_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    int_0 = 1050
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    int_0 = 185
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    float_0 = -1733.1
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    float_0 = -2140.843
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    bytes_0 = b"y>\xe6\xf6\xfa\xba\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    int_0 = -1741
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    int_0 = 3134
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    int_0 = -201
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    bytes_0 = b"\xd6s"
    module_0.match(bytes_0, bytes_0)


def test_case_3525():
    pass


def test_case_3526():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3527():
    int_0 = 598
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


def test_case_3528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3529():
    str_0 = "DE@\n0*qD0jhY_t1,r[6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    bytes_0 = b"p\xad"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    bytes_0 = b"\xa7\xb2f\x17\xa2\x88\xdc\xce>1\x81\xfc[\xaeX\xe8s"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    float_0 = -692.859731
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    float_0 = -1502.17
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    bytes_0 = b"\xef\xdcTB\xf2\xd1\x9dLN\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    int_0 = 4704
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    bool_0 = True
    bytes_0 = b"?y\xfc/Z\xc6]\x91\xc7k"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    bool_0 = False
    dict_0 = {}
    str_0 = ""
    tuple_0 = (dict_0, str_0, bool_0)
    tuple_1 = (tuple_0, bool_0, dict_0)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    float_0 = 541.09922
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    bytes_0 = b"\x15\xbfax"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    str_0 = "n7p)"
    bytes_0 = b"d\x9ez\x8b\xac\xda1\x8a"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    complex_0 = 764.7734 + 607.794j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    bytes_0 = b"fTqW\xb4)\xcd\xb2\x86\xf4\xc0>"
    str_0 = "z]\x0bb"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    bytes_0 = b"\x80"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bytes_0 = b"^\xa03\xa0o"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    str_0 = "QL\\ll088=I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    complex_0 = 1918.815 - 412.263886j
    module_0.match(complex_0, complex_0)


def test_case_3551():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3552():
    bytes_0 = b'"\xca\xc2\xfa\xe9\xc2\x9fJ'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    bytes_0 = b"\x848\xde"
    bool_0 = True
    list_0 = []
    tuple_0 = (bytes_0, bool_0, list_0)
    module_0.match(tuple_0, bytes_0)


def test_case_3554():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3555():
    str_0 = "9ja(=I\ne7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    int_0 = -1249
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_1.object(*list_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    bool_0 = False
    int_0 = -378
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    int_0 = -1257
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    bytes_0 = b"t>\xdf\\\xbe\xd4x\xa9\x01\xda\x85w\xa0V"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    int_0 = 132
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    str_0 = "v%"
    int_0 = -2953
    dict_0 = {str_0: str_0, int_0: int_0, int_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    int_0 = 1042
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3567():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3568():
    int_0 = -2818
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    int_0 = -2347
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    bytes_0 = b"=\xf8\x972"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bytes_0 = b"\xe1R\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    str_0 = "dfEt"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    tuple_0 = ()
    bool_0 = False
    dict_0 = {bool_0: bool_0, tuple_0: bool_0, tuple_0: bool_0}
    tuple_1 = (tuple_0, tuple_0, dict_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    float_0 = 2806.45
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    int_0 = 349
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    str_0 = ""
    bool_0 = True
    tuple_0 = (str_0, bool_0, str_0)
    list_0 = [tuple_0, bool_0]
    str_1 = "wenYQ]mjUlnS"
    module_0.get_new_command(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bytes_0 = b"\xe1\xa4s\xdf\x93q(\x18ei\xae\xd1\xd8\xec"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    bytes_0 = b"\xc3-\x8b\xf7\xfd("
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    float_0 = -331.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.object(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    str_0 = "M`uB5\x0c\\T][|1\\>,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    object_0 = module_1.object()
    int_0 = 331
    set_0 = {object_0, object_0, object_0, int_0}
    module_0.match(set_0, object_0)


def test_case_3583():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3584():
    int_0 = -3673
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    str_0 = "u&]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    str_0 = "nTXL^Q$>NJU/1:KGjWv4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_3589():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3590():
    bytes_0 = b"\xfa\x10\xb2\x08\x90\xb5"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, bytes_0)


def test_case_3591():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3592():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    str_0 = "C"
    none_type_0 = None
    str_1 = "DW\r\\K\r^xa"
    str_2 = ":13`\x0b>pugoB"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    int_0 = -488
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    int_0 = -1358
    float_0 = -1015.14
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    int_0 = -278
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    complex_0 = -1642.39817 - 952.941j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    bytes_0 = b"\xb8}J\xaeT\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    int_0 = -1729
    set_0 = {int_0, int_0}
    list_0 = []
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    float_0 = 4380.63577
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    int_0 = 2487
    dict_0 = {int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    bool_0 = False
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    complex_0 = -477.8488 - 803.49j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    str_0 = "n'\x0b"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    int_0 = 3275
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    str_0 = "]SsK?|oUnQV'Y"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    bytes_0 = b"\x1e-|\xa4j\x16\x7f\x83\x92lLY\x0bw\x82"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    float_0 = -674.7834
    set_0 = set()
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    float_0 = -805.39
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    str_0 = "#z3\n)"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    bytes_0 = b'\xdd\x94\xcb\x8d2\n\xa7\xb3g0\xaf\x1a"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    bytes_0 = b"\x97\x80f=\xa6\x1a\xc2\xbb\x03$}\x96"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    bytes_0 = b"\xd0\xee\xe0'\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    int_0 = 1785
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    int_0 = 968
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3623():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3624():
    int_0 = 1156
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bytes_0 = b"O\xe0\xfe\x87 \xc3\x89\xd4\x9e;~\xdcp\x1a"
    bytes_1 = b"\xa0\xf0\xc2\xc3{!\x91t|\xfb\x86\xd4\xe8\x0f\x1aX\xab\xf4"
    tuple_0 = (bytes_0, bytes_1)
    set_0 = {tuple_0, bytes_1, tuple_0}
    module_0.get_new_command(set_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    bool_0 = True
    str_0 = "\nZY"
    tuple_0 = (bool_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    bytes_0 = b"75\x8e@\\Ed\xa7\xac\xadc\xb0\xc0yt\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    int_0 = -192
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    int_0 = 1792
    object_0 = module_1.object()
    module_0.get_new_command(int_0, object_0)


def test_case_3630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3631():
    int_0 = 125
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    str_0 = "ZAv4)1ixMc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    bytes_0 = b"$\xeef(N \xa9\x0f\xc6\xee\xd1\x14B\xd4"
    module_0.match(bytes_0, bytes_0)


def test_case_3635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3636():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    float_0 = -3729.95043
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


def test_case_3638():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3639():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    int_0 = 2024
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    int_0 = 572
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    float_0 = -574.02
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    complex_0 = -4433 - 3051.711j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    float_0 = -800.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    int_0 = 850
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    int_0 = -336
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    bytes_0 = b"\x83\xb2\xdc\xb0G\xb8;%k\xb8\x12"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_3650():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3651():
    int_0 = 2544
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    int_0 = 31
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    bytes_0 = b"?\x00\x89\xbes\xf7"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    float_0 = -1219.423287
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    str_0 = "S^\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    str_0 = "c]"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    bool_0 = False
    int_0 = 1406
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    set_0 = set()
    list_0 = []
    tuple_0 = (set_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    float_0 = 443.63
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    complex_0 = -2430 - 1189.58j
    bool_0 = True
    tuple_0 = (complex_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    float_0 = 2490.7528
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    str_0 = "\x0cU)"
    bool_0 = False
    set_0 = {bool_0, bool_0, str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    bytes_0 = b"\xb7IW\t\xdf\xae\x98\xae\x1d\xf1\x93"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    int_0 = 711
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    int_0 = 443
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = (int_0, list_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    float_0 = -177.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    bytes_0 = b"+\xeb\xa0%\xb0:\xf4\xc3\x125I\xb1k\x88\xdb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    bytes_0 = b'\xd18\x1b\xd4\xeb\x14"\x11\xce'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    complex_0 = 1783.33 - 342.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    int_0 = -935
    float_0 = 703.78
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    int_0 = -1743
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    float_0 = 77.0
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    bytes_0 = b"\x94\"u\x06/\xf4\x01\xc7'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    complex_0 = 2726.277 + 1072.7j
    module_1.object(*complex_0, **complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    str_0 = "(wHpG\n7Qs[zU"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


def test_case_3683():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3684():
    float_0 = -555.13
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    bytes_0 = b"\x85\x12\x01\xb5\x98b\xdb\xe6\x1d\xe5l\x97\xd9V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    str_0 = '6eN"'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    float_0 = -710.6613
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    bytes_0 = b"7\x9ev\xaa\xa2\xae\xa8 \xf2)\x0eVfuj\xb4<#["
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    int_0 = -1633
    list_0 = [int_0, int_0, int_0]
    str_0 = "?HT"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    dict_0 = {}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    float_0 = 2908.5684
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    int_0 = -28
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    int_0 = -1871
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    str_0 = "9x s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    int_0 = 1265
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    bytes_0 = b">\xe8"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    dict_0 = {tuple_0: tuple_0, bool_0: tuple_0, tuple_0: bool_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = "V+;\n4wLA3F^"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    bytes_0 = b"\xd9\x1a\xd8U@g\x0f\xf5I:\x8ax\x8c\x13\\v\xa0\x11Cj"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    str_0 = "R3L$-\tYP#t`_Vq>*{ou"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_3704():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3705():
    int_0 = -1631
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (object_0, object_0, bool_0)
    list_0 = [tuple_0, tuple_0, bool_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    str_0 = "L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    str_0 = "c:3f+!R@X[x\\s="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    str_0 = "{}"
    float_0 = 2976.210358
    dict_0 = {str_0: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    int_0 = -311
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    none_type_0 = None
    float_0 = 115.29
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    int_0 = 3058
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    bytes_0 = b"\x9ak(?d\xf86r\x8ay"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    str_0 = "U^3xukWRlL8c[d \x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    str_0 = "2j5ZIcEG6rnX0[rq-H"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_0]
    tuple_0 = (bool_1, bool_2, bool_0, list_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    str_0 = "I s\x0cgN4;hQ#yB?8nA&R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    set_0 = set()
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    str_0 = "hc~2/i^Y#$E`y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    str_0 = "}t\x0bgYJ|Kh?2?qx>%O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    bytes_0 = b"B\x83\xe2\xb7>\xfdN\x89\xdb\xcc0\xbb\xf6\xd7O<\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    bytes_0 = b"\x10Y\xec\xf8\rk\xbf\xbd\xef\x05Kra\x1d\x8d\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    bytes_0 = b"\xc4\xbd\x1c\x9fQ\xc9"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    float_0 = -1862.609
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    bytes_0 = b"r\x1fa\xd1\xecV\x8b=\x15\\\x8fC\xa7"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    float_0 = -679.818939
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    int_0 = 1353
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    none_type_0 = None
    float_0 = 184.0
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0, float_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    complex_0 = -446 - 512.8j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    str_0 = 'Q-"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    bytes_0 = b"}\xd2m\xae\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    bytes_0 = b'oTk\xcc\x0f\x11\xa5d\x9b(\xad"\xdf\x01Z\xc8\xe1\x11'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    int_0 = -1231
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    bytes_0 = b"\xf5\xae\xd1\x04Mjig\x10u \x9a\xd3\xba\x01)\x83\xb0"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    bool_0 = False
    bytes_0 = b"\r\xba\xf9\xfa\xd5\xd3\xe1PO#gr6x\xa2\t\x1e\x8d\x0f\x08"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    int_0 = 1157
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    bytes_0 = b"\x19\x0f\xc5\xcf\x858\x18\x19"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    str_0 = "[Ff6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    int_0 = -3126
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    bool_0 = False
    bytes_0 = b'\xdfp\xf3\t\xbc>\x9f\xaab\xaa\xa3\x96\x891h\x95\xf0"\x8b\x1b'
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    complex_0 = 1959.4 + 389.44631j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    bytes_0 = b""
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    none_type_0 = None
    bytes_0 = b";^\x16\xb4\x86s"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    complex_0 = 2387.301 - 8740j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    str_0 = '{;%LbRhRr"o./94s]\\=l'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    bytes_0 = b"\xf6FH\xe6\xbc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    int_0 = 1410
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    bytes_0 = b"`\xea\x07\xb4\x1c\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    int_0 = 937
    list_0 = [int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    bytes_0 = b"!Wa\xf0\x0b\x13\x80\xae\xfa\x02\xa7m\xa69"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    float_0 = -620.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    bytes_0 = b"\xf4a\x93\xa9\x12o"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    float_0 = -893.524
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    int_0 = -271
    bytes_0 = b"M\x90\xc2\xba\x96\xc0S\xba\xd8(\x1b\xdd\xa4\x98o\xf2@*\x08"
    tuple_0 = (bytes_0, bytes_0, int_0, int_0)
    tuple_1 = (bytes_0, int_0, int_0)
    tuple_2 = (int_0, tuple_0, tuple_1)
    module_0.get_new_command(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    int_0 = 514
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    bytes_0 = b"\xbb!\xdf\xb4\x95M,\x89\xe6\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    int_0 = -1141
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    int_0 = 1255
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    int_0 = -646
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    bytes_0 = b"\x9d\xfb\xdf$"
    list_0 = []
    module_1.object(*list_0, **bytes_0)


def test_case_3766():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3767():
    int_0 = 790
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    int_0 = 2113
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    int_0 = 1413
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    str_0 = "z^;`s\tN1<xNj"
    list_0 = [str_0]
    bytes_0 = b"\xe4\xdaSI"
    list_1 = [list_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    bool_0 = True
    list_0 = []
    tuple_0 = (bool_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    bytes_0 = b"MN\xa8\xdb<\xf8\xd5\x95!\xf9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    object_0 = module_1.object()
    int_0 = 705
    tuple_0 = (object_0, object_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    bytes_0 = b"\x00\xf3\xdfr\xa0>M\xa2$\xd8\x92O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    bytes_0 = b"\xae\xa4W\xa3\xb7\x16\xb3S\xf1\xb7\xae\xdc\xf4;e\xcb\xa23"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    bytes_0 = b"37&\xa3\\J\xf6D/V"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    bool_0 = True
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    int_0 = 2940
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    complex_0 = -831.643 + 1198.787j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    str_0 = "H#GC<\rE5N/:JTXnllo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    bytes_0 = b"Yn\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    float_0 = -768.350088
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    bytes_0 = b"8\xa7\xe1s\xffB\x9a\x12,-\xf6#\xde\xb8\x82 l\xb6\xde"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    int_0 = 1968
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3786():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3787():
    int_0 = 151
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    complex_0 = -1420.032155 - 1296.60254j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    float_0 = 351.6909
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    bytes_0 = b"\xe1\xb5\x053\xdf\x16\xa5\x17O\xda\x89w\xcePtR"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    bytes_0 = b"?K|\xe7\x90SK\xc5\xfe\x9b\xfe\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    int_0 = 176
    bool_0 = False
    int_1 = 2157
    dict_0 = {int_0: bool_0, int_0: bool_0, int_1: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    int_0 = -1225
    module_0.match(int_0, int_0)


def test_case_3794():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3795():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    float_0 = 679.5
    tuple_0 = (bool_0, dict_0, bool_0, float_0)
    list_0 = [tuple_0, bool_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    str_0 = "` UM\\t"
    dict_0 = {str_0: str_0}
    object_0 = module_1.object()
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    float_0 = -4.6178
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    str_0 = "i[\x0cc2YSj0wH.,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    int_0 = -2566
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    set_0 = set()
    int_0 = -1272
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    bytes_0 = b"0%a\xa4\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    int_0 = -2873
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    str_0 = "BN%X5(oI^X\tf5F`t,i"
    str_1 = "Vd"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    str_0 = "^lUQG\nanejp\x0b1G_%,`"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    str_0 = "P.v3rI[v"
    list_0 = [str_0, str_0]
    int_0 = 1174
    tuple_0 = (str_0, list_0, int_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    int_0 = 1113
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    float_0 = 1963.03228
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    str_0 = "\x0bM''"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    str_0 = "?tIE9B7s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    str_0 = "lm7Hq\r>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    str_0 = "-\x0c"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    int_0 = -245
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    int_0 = -63
    dict_0 = {int_0: int_0, int_0: int_0}
    bytes_0 = b"n\xe8\xee\x96\x91\x00\n82\xc6\xe3\x97"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    int_0 = -5057
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    int_0 = 595
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    complex_0 = -2842 - 2262.4j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    int_0 = 385
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    bytes_0 = b"\xf2\xe7Ka\xd1\x03\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


def test_case_3823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3824():
    complex_0 = -2151.5 + 72.90291j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    float_0 = 3454.0
    module_0.get_new_command(float_0, float_0)


def test_case_3826():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bytes_0 = b"\x82\x04\x9b\xa8\xb0\x02\xcc\x95\xab=\xde"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    float_0 = -3711.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    complex_0 = 3473.42 + 911.4636j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    int_0 = -446
    set_0 = {int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    int_0 = 202
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    str_0 = "aH6\r K5^InV~6,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    str_0 = "Qa?''!I{`%WFT4f:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    str_0 = "`#d f@mXXX\x0cn9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    float_0 = 2766.2992
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    bytes_0 = b";{\x8a|\xfd\xf0\xf8O\xba\x97\xba\xbf-}\xb3J\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    str_0 = "mwkD3ig<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    bytes_0 = b"\x02\x17\x9aM\xbd"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


def test_case_3840():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3841():
    int_0 = -1538
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    int_0 = 111
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    int_0 = 2930
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    float_0 = -649.47213
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    str_0 = "bI\t~I@u"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    object_0 = module_1.object()
    float_0 = 421.5
    dict_0 = {object_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    float_0 = -1259.807
    set_0 = {float_0, float_0}
    list_0 = [set_0]
    list_1 = []
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    int_0 = -539
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    float_0 = 247.53
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    bytes_0 = b"\x0c\xb6c\xdd\xcb"
    int_0 = -168
    module_0.match(bytes_0, int_0)


def test_case_3854():
    pass


def test_case_3855():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3856():
    bytes_0 = b"\xa5\xfa;\x00\xe3\xeaZ\xf3K\x10Bn\xe2\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    float_0 = -1249.938
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    int_0 = 2432
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    str_0 = 'M{wB)>"E*p'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    bytes_0 = b"\xfd\x1a"
    object_0 = module_1.object()
    dict_0 = {bytes_0: bytes_0, bytes_0: object_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    int_0 = 1348
    tuple_1 = (list_0, tuple_0, int_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    bytes_0 = b"2\xf6+\xdf\x9fs\xda\xb0$%\r5\x19\x1c\xf2\xf6a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    bytes_0 = b"Fq\xf9F\xf3\x1c\xc9\xa4\xf7\x05\x96\xeb\x88\x1a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    int_0 = 1834
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    bytes_0 = b"V!\x81\x15\xb2L"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    str_0 = "m]Zv"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    float_0 = -3225.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    int_0 = -3819
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: bool_0, int_0: int_0}
    list_0 = [int_0, dict_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    str_0 = "-t:*\x0b$aR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    bytes_0 = b"\xf9\x8fY\x928\x7f\xe4k\x07\x96Q\x0c\x1b\xc33"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    str_0 = "]  1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    float_0 = -277.8482
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    int_0 = 1854
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    str_0 = "PT?FN]-z2&G>(JfKIpt5"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    str_0 = "ty7O&g)zlk.Fu-~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    str_0 = "JjB{)ZgwFn3nPA*,a>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    str_0 = "OBfM)}~7x@)"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    str_0 = "\nf9OjE"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    none_type_0 = None
    bytes_0 = b"j\xc12\xf6\\yaA\x8c\xbe\xbf\x94\xa5\x92@+\xe7p\xf1"
    module_0.match(none_type_0, bytes_0)


def test_case_3881():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3882():
    float_0 = -1301.72486
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    int_0 = -1176
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    complex_0 = -2290.77591 - 2442.02j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    list_1 = [complex_0, list_0, complex_0, complex_0]
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    int_0 = 1016
    bytes_0 = b"\xf0\x9f\xdd\x1es\xb7\x90\xeb\x8eI\xa0\xd6\xcc!"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    bytes_0 = b"\xa5/\xe7o\xa0\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    complex_0 = 2707.4199 + 2474.096766j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    int_0 = -2282
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    bytes_0 = b">?\xd0`\xd0\r\xd1E\x17\xc7=\xbe\x8c\xb4\x99"
    int_0 = -4856
    str_0 = 'rI"jKJWQx\rJ4'
    dict_0 = {bytes_0: bytes_0, bytes_0: int_0, str_0: bytes_0, int_0: str_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    bytes_0 = b"\xa7\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    int_0 = 1737
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    int_0 = -3265
    tuple_0 = (int_0,)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    float_0 = -1041.99394
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    bytes_0 = b"\x81\xfd,\x069Pg\xbb\xb0Z$M~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    str_0 = "\ritE|(fHr5ut$N<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    int_0 = -2358
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    object_0 = module_1.object()
    bool_0 = True
    bool_1 = False
    bool_2 = False
    tuple_0 = (object_0, bool_0, bool_1, bool_2)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    str_0 = "xYC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    str_0 = "YmG#<u(mqm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    list_0 = []
    bytes_0 = b"\xfd5\x19[%\x9d\xaajY\x15Fp\x16"
    tuple_0 = (list_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    complex_0 = 1944.8664 - 549.1414j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    set_0 = {tuple_0, bool_0}
    tuple_1 = (set_0,)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    list_2 = [list_1]
    module_1.object(*list_2)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = ()
    tuple_1 = (tuple_0, bool_0)
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    bytes_0 = b"|\x90#\xf5,N\xbc\xf3\xc5\xaf\xcf4\xc8\xd6l\n\xb1"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    str_0 = "[kWQB\n|"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    str_0 = "l>gL er#3lG2!p{bXr]"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    int_0 = 3650
    bool_0 = True
    set_0 = {int_0, int_0, int_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    int_0 = 835
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    bytes_0 = b"\xc6\x99-H"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    int_0 = 863
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    str_0 = "l.\nx*S,]^M#og}]a]1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    int_0 = 849
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    str_0 = "-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    bytes_0 = b"\x83\xcf\xeb\xbeX\xe3\xd7\x0f\x8c\x13\xc4b\xf9?\x04"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_1]
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    int_0 = 1670
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    float_0 = 1022.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


def test_case_3927():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3928():
    float_0 = -624.8817
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    int_0 = 1400
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    str_0 = "!^!'~\x0c9;XBKaj_7K'3)J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    float_0 = -2234.83
    bytes_0 = b"\xf9\x1f\xee\xcc\xae"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    bytes_0 = b"\xd3\x88\xec\xde\xc27!\x84>6<\r\\\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    str_0 = "xk`8$$MQ69\tm3l\x0c?ajm"
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, str_0, str_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    bytes_0 = b"C\xbf\xd7\x83G\xb6<#0\xbda\xf3\xda\x19\xd3"
    set_0 = {bytes_0, bytes_0, bytes_0}
    float_0 = 506.04348
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    str_0 = "i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    float_0 = 178.427497
    float_1 = 502.05
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    float_0 = 2415.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    bytes_0 = b"\xab\xd4?\xeaI\xf3Z6\xad\xffg8\xf3m\x9e\x12\xf95>"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    int_0 = 458
    str_0 = "P"
    module_0.get_new_command(int_0, str_0)


def test_case_3941():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3942():
    int_0 = 1557
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    str_0 = "]u.qm#\x0c'g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    set_0 = set()
    bytes_0 = b"a}\x0e:O2"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    dict_0 = {}
    int_0 = -115
    tuple_0 = (dict_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    int_0 = 3487
    bool_0 = True
    tuple_0 = (int_0, int_0, bool_0)
    set_0 = {tuple_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    int_0 = 4310
    bytes_0 = b"ct"
    str_0 = "d^/"
    tuple_0 = (bytes_0, str_0)
    dict_0 = {int_0: int_0, int_0: int_0, int_0: tuple_0, tuple_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bytes_0 = b"\t\x8b\xb9\xc0*\xba\x19\xb2\x08h\xa0\xcc\x8a\xd6\xea"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    float_0 = -1142.15
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    object_0 = module_1.object()
    int_0 = -2730
    list_0 = [object_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    float_0 = 4569.0465
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    bool_0 = True
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    float_0 = 680.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    str_0 = "%O`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    complex_0 = 5436.912 + 581.32572j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    str_0 = "N!jgEuPiNt"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    bool_0 = True
    str_0 = "t{Z"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    float_0 = -111.405
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    float_0 = 465.5
    module_0.get_new_command(float_0, float_0)


def test_case_3962():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3963():
    float_0 = -1140.74736
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    none_type_0 = None
    float_0 = -442.7092
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    int_0 = -1302
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    bytes_0 = b'\x86\x82`$"\xe3@T\x80'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    bytes_0 = b"\xc3\x01\xf3-&\x10\xa7\xf6as#\x86\x87\xd0\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    none_type_0 = None
    module_1.object(*none_type_0)


def test_case_3970():
    pass


def test_case_3971():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3972():
    str_0 = ""
    bool_0 = True
    set_0 = {str_0, bool_0, str_0, bool_0}
    tuple_0 = (set_0, bool_0)
    tuple_1 = (str_0, bool_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_3973():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3974():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    str_0 = "H>9p{]V430jE-D_V\x0cK*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    str_0 = "u=T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    bytes_0 = b"\xea;]\xe8\x06\xec\xc1-\xa7\xda\x85\x0c"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    str_0 = "a{%MUX|{:eyx_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    float_0 = -584.97
    dict_0 = {}
    tuple_0 = (float_0, dict_0, dict_0)
    list_0 = [tuple_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    complex_0 = 2734.6 - 3120.519176j
    tuple_0 = ()
    module_0.get_new_command(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    none_type_0 = None
    str_0 = ""
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    bytes_0 = b"v;D\xa3\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    bytes_0 = b"mO\xda\x96\xae\xd9\xd2\x17!#,F\xecp!\x88\xcdt"
    dict_0 = {}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    str_0 = "M:SYOF7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    bool_0 = True
    object_0 = module_1.object()
    list_0 = [bool_0, bool_0, object_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    bytes_0 = b"G@\xd9\xe4<d\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    int_0 = 365
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    float_0 = -3427.241
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    complex_0 = 995.609 + 1007.31j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    bytes_0 = b"\xde"
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    bytes_0 = b"\xf1\xef\xba\xe1\xc8\xf9u"
    str_0 = "LA?YO?> 6"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    int_0 = 1421
    module_0.match(int_0, int_0)


def test_case_3999():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4000():
    str_0 = 'KP+"eN'
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    int_0 = 863
    dict_0 = {}
    tuple_0 = (dict_0, int_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    str_0 = "-qZ\nC1+h.~={H'K9@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    int_0 = -5030
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    int_0 = -82
    module_0.get_new_command(int_0, int_0)


def test_case_4005():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4006():
    bytes_0 = b"\xae\x86\xb7w1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    int_0 = -3121
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    bytes_0 = b"\xfc<\xe7\xcd\xd5\xeb\xc3\xb1\xdf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    int_0 = -1339
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    float_0 = -987.1405
    str_0 = "3q`yi3"
    list_0 = [float_0, float_0, str_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    int_0 = -2039
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    str_0 = "qZa\rk&MF"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    str_0 = " A%\\("
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    none_type_0 = None
    float_0 = 3863.54086
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    int_0 = -51
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    int_0 = -4712
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: tuple_0, bool_0: bool_0, tuple_0: tuple_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    bytes_0 = b"\xcfe\x05\xe0\xa2\x0efn^q"
    list_0 = [bytes_0, bytes_0]
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: list_0, bytes_0: bytes_0}
    list_1 = [dict_0, bytes_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    str_0 = "ZV\t\nF\x0cx~Nw`hXRM %w[H"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    complex_0 = -3464.7919 + 1776.187043j
    list_0 = [complex_0, complex_0, complex_0]
    list_1 = [list_0, complex_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    int_0 = 1666
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    bytes_0 = b"\t\xe8lTk\xe9\x96\x8e]jg\x03\xff\x08H\xbd\xddf\x96\xaf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    str_0 = "gi7%Ux@I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    str_0 = "2T}'7K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    str_0 = "-.-(/1"
    module_0.match(str_0, str_0)


def test_case_4029():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4030():
    bytes_0 = b"\xd3\xa4\x18\x0b\x87%\xd2\xd6\xe3\x97\x92 \xa8\xd6\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    str_0 = '4HushQ>")'
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    str_0 = "+QAEr(iABR9M#D|-p3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    int_0 = 909
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    int_0 = 830
    set_0 = {int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    int_0 = 115
    module_0.get_new_command(int_0, int_0)


def test_case_4037():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4038():
    int_0 = -2383
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    int_0 = -4237
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    bool_0 = True
    bool_1 = False
    bool_2 = True
    tuple_0 = (bool_0, bool_1, bool_2)
    module_0.get_new_command(tuple_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    int_0 = -233
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    str_0 = 'C"8u$xRl=L0J-z'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    complex_0 = -2324.784182 + 1689.3095j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4046():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4047():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, bool_0, bool_0, list_0]
    object_0 = module_1.object()
    module_0.match(list_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    complex_0 = 1442.7 + 1351.66983j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    bytes_0 = b"\x80-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    bytes_0 = b"K\xb3I\xd6q\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    int_0 = -1819
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    bytes_0 = b"\x81\x04djq"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    bytes_0 = b"\xe4\xd3\x92<\xa8\xb1\xa3X\xd6|@D\xf3\xfd("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    str_0 = "1"
    module_0.match(str_0, str_0)


def test_case_4055():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4056():
    bytes_0 = b"=\x8c\x0c\xab\x8c+\x0b>\x89G\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    str_0 = "pO)D KAM8[FX\nSpY#hH"
    str_1 = "reL"
    str_2 = "A)Rd5\x0c54fZv3"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    complex_0 = 2265.57 - 2828.6448j
    str_0 = "Yq21I$*\rBf"
    str_1 = ")U`$n&j"
    str_2 = "K]5F_I\tj|&[i#I\r"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: complex_0}
    module_1.object(*complex_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    str_0 = "vZvnTk?WS03z0cj"
    module_0.get_new_command(str_0, str_0)


def test_case_4060():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4061():
    bytes_0 = b"\xdb\xf0\xc8\xc3\xe9\x11x"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    bytes_0 = b'x)\xbdI\x9b\xea\xe5L"\x0c\xe7\xbb+'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bytes_0 = b"1\x04wq\x92\x12\xf7\x02\xde\x12\xd9\xee\x84\x17"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    bytes_0 = b"\rS\x12\x0bdRG{\x97\xf4\x7f\xd3["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    int_0 = 2080
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    int_0 = -2152
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    str_0 = "1IukJWJV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    float_0 = -2580.17
    module_0.match(float_0, float_0)


def test_case_4072():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4073():
    float_0 = 1205.55076
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    bytes_0 = b"\x98\xb77\x02\xc0\xebv\xfb\x19fp\xdbC\x1d\xc9\xdc\xcf\xeb\x02A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    float_0 = 993.786
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    str_0 = "\x0b0aTF27!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    str_0 = "+YLT@@O"
    int_0 = 4248
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    str_0 = "t{#"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    complex_0 = -403.8015 - 212.26j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    float_0 = -1553.7197
    bytes_0 = b"\xce\x8c\xb9\xefFlx>\xde\xab\x8f>"
    complex_0 = 1880.574 + 1490.3343j
    tuple_0 = (float_0, bytes_0, complex_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    int_0 = 799
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    str_0 = "A5R/lHTH%GlQX\x0cYR1g"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    bytes_0 = b"\xf4\xf7\xcdv\xeb\x88\xa8\xee\xe1\x8eU"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    str_0 = 'S^"b~\r'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    bytes_0 = b"\xfeU\xd4\xa4\xfb2c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    str_0 = "bg}]/Z)y\\"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    str_0 = "chKXO|"
    bytes_0 = b"\xc0\xec\xcc"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    str_0 = "aS.:N%!"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    bytes_0 = b"\xf6\xbf\x08\x06I\xed\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    float_0 = 3693.0
    set_0 = {float_0}
    int_0 = 12
    str_0 = ":BxS a"
    tuple_0 = (int_0, float_0, set_0, str_0)
    list_0 = [tuple_0, tuple_0, float_0, tuple_0]
    tuple_1 = (float_0, float_0, set_0, list_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    bool_0 = True
    int_0 = 864
    bool_1 = False
    list_0 = [bool_1]
    tuple_0 = (bool_0, int_0, list_0)
    tuple_1 = (tuple_0,)
    dict_0 = {}
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    float_0 = -483.7076
    bytes_0 = b"\xb7\xe4W\xccn\xc5\xb5\xd9\xd2\xe3\xaf\x96\x870"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    int_0 = 334
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    int_0 = 388
    module_0.match(int_0, int_0)


def test_case_4098():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4099():
    bytes_0 = b"$\xb8i$\xcb\xa1\xb9q1\xf2\xf8y"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    int_0 = 1644
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    str_0 = "hE|"
    dict_0 = {str_0: str_0}
    str_1 = ""
    tuple_0 = (str_0, dict_0, str_1)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    str_0 = "8I#Hi\x0cou-D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    str_0 = "\rNSVlynOz\\V{oM+[#u"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    dict_0 = {bool_0: list_0, bool_0: list_0}
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    bytes_0 = b"\x88L\x1e\xc9\xbc\xf8\xa7\x1f\xabSX"
    module_0.match(bytes_0, bytes_0)


def test_case_4107():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4108():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    list_0 = [tuple_0, tuple_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    int_0 = 6808
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    set_0 = set()
    list_0 = [set_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    bytes_0 = b"\xacf\xe6\xc7\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    float_0 = 2323.455
    bool_0 = False
    dict_0 = {float_0: float_0, bool_0: bool_0, float_0: bool_0, bool_0: float_0}
    tuple_0 = (float_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


def test_case_4114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4115():
    complex_0 = -19.01 - 5096.567j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    float_0 = 1468.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    int_0 = 1511
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    int_0 = -2433
    list_0 = [int_0, int_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    str_0 = "P=RF_|2lpI.:"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    bytes_0 = b"\xd1MqiP\x19\xe1\x8d\xbd"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    str_0 = '`5".=oxc+GKL2rfn,jk'
    module_0.get_new_command(str_0, str_0)


def test_case_4123():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4124():
    float_0 = 3414.36
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    int_0 = -389
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    str_0 = "eLKL'n\"2Bk)s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    str_0 = "jVE-!}SY\\$7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    int_0 = 4331
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    str_0 = "C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    bytes_0 = b"\x12\xaa\x96X\x9b\x9c\xda\xc9r\xde*\xd0\x985\x96\xf6m"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    int_0 = -4299
    tuple_0 = (int_0,)
    tuple_1 = (int_0, tuple_0)
    list_0 = [tuple_1, tuple_1, tuple_0, tuple_1]
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    bytes_0 = b"\x15%\x12\x0cngx\x0bN-\x975\x84\xf2W\xc4\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    bytes_0 = b"\xcd\x8atB\xca\x8d"
    module_0.match(bytes_0, bytes_0)


def test_case_4134():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4135():
    int_0 = 3076
    str_0 = "\t@S)Wibi2!H"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    float_0 = -69.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    int_0 = 2992
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    bytes_0 = b"\x17I}\xe5\x9fU\x9f\xfd\x14\xfb\xeb`\xd2\x01\xc4\xb9\xe6\x06\xde"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    float_0 = 1151.16542
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    float_0 = 1088.778
    float_1 = -1111.56
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    none_type_0 = None
    int_0 = 2639
    module_0.match(none_type_0, int_0)


def test_case_4142():
    object_0 = module_1.object()


def test_case_4143():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4144():
    bytes_0 = b"}0e&\x83.\xfb[Q\xa5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    float_0 = 3973.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    int_0 = -363
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    bytes_0 = b"{(\xe5\xa0\xdd=dN\xe7\xc6@\xae\xd5n\xdf1\xe3^"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    complex_0 = 1725 - 603.348j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    int_0 = 1518
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    int_0 = 1063
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    str_0 = '6LRpp "2rV%H'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    bytes_0 = b""
    bytes_1 = b"\xa5\x7f\xf1\xc6 "
    tuple_0 = (bytes_0, bytes_1, bytes_1)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    str_0 = "N.{Kk\\\x0cIKX"
    int_0 = 2116
    list_0 = []
    bool_0 = True
    tuple_0 = (str_0, int_0, list_0, bool_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    int_0 = -572
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    str_0 = "]IJ.5\x0c5\n2"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    bytes_0 = b";\xbe\xfc"
    complex_0 = 2515.615 + 400.32j
    tuple_0 = (bytes_0, complex_0)
    list_0 = [tuple_0, tuple_0, tuple_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    float_0 = 3279.387
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    complex_0 = -1871.59074 - 1357.42j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4166():
    pass


def test_case_4167():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4168():
    str_0 = 'p>:ISZlS(YRc"cU)\\W7o'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    int_0 = 1169
    str_0 = "\x0b#Ws"
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    int_0 = 5796
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    int_0 = -17
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    str_0 = "jZ ["
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    str_0 = "uN/"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    float_0 = 690.692
    bytes_0 = b"\xa67+\xa3\xd2\xa0\xa4\n\x1b\x16>\xfah\xc3\xbb\xe8\xf1:\xbb\xb1"
    list_0 = [float_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    bytes_0 = b"\xf1\xc0\xe0\xff!\x846K6\xcd\x9e\x91\x02Z'\xc4\x80\x87"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    str_0 = "B[*pwC"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    int_0 = -2265
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    int_0 = -780
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    bytes_0 = b"x\xb3K"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    bytes_0 = b"\x8e\x93\x17\xf1n\xe4Ba\xe8h\xb0\xf7\x1e\xdb\xd6\xc0 r"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    bytes_0 = b"R\xbd \xcc\xdc\xfc6\x96>\xb1\xb3\rR\xd2\x16"
    bool_0 = False
    dict_0 = {bytes_0: bool_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    int_0 = -734
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    int_0 = -978
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


def test_case_4188():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4189():
    str_0 = "A%afVwguciAZ&Z-*"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    int_0 = 5168
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    str_0 = "=>Ka\r\tv>xSYX#8w;-%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    str_0 = "]Q`'6J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    bytes_0 = b"Sj\xa8lN:"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    float_0 = 1632.6
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    float_0 = 419.3183
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    str_0 = "3z%3+ay3"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    float_0 = -1722.2
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    str_0 = "6H:u:k *80"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    bool_0 = True
    str_0 = "Z<mjz"
    none_type_0 = None
    str_1 = "m{jJ\x0b0y"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    str_0 = "p&eFDb(x"
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (str_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    str_0 = "<V($jts"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    float_0 = -3215.9341
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    float_0 = 998.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    bytes_0 = b"\x18\xc8|\xcd\x08\x9f\x1d\xc6\xebW"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    str_0 = "YKjGA8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    float_0 = -1150.221952
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    str_0 = "h?UQ\x0cu\r`,*9uNKgo`v"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    str_0 = "Y'o#-#,d"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    int_0 = 121
    module_0.match(int_0, int_0)


def test_case_4212():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4213():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    str_0 = "B3D\x0b}[+b "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    bytes_0 = b"\xae\x99@=%"
    str_0 = 'i:Ek"hxhv\rO"k1e\t\\9('
    tuple_0 = (bytes_0, bytes_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    bytes_0 = b"\xd3\x1e\xcb@o\x8cE\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    int_0 = 2091
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    str_0 = "M=xd>l}\x0c;T#DNd(7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    int_0 = -2266
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    bytes_0 = b"`\xd4$\xd34\xda\x08"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0]
    module_1.object(*list_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    int_0 = -427
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    str_0 = "\\Cx:FzS^L1=_cmdJ;XuE"
    float_0 = -1221.0
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, float_0: float_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    str_0 = "p/_ ,ez9JR46\x0bLSC"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    bytes_0 = b"\xe8\x96\xfbU\xe2\x7fk\x8fC\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    int_0 = 1652
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    bytes_0 = b"\xcb\xca/\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    bytes_0 = b";\nZB\xd4\x08:m\xa2\x9e\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    bytes_0 = b"Ck\x10_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    int_0 = 1046
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    bytes_0 = b"\t\x83\x9c\xd8B\x80\xce\xbc\xed["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    int_0 = 401
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    complex_0 = 1717.12476 - 1980.74j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    str_0 = "/IYA=jj:t<],"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    str_0 = "&E[V@[#z'RMu(\tVY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    bytes_0 = b"\xcf5\xc4qa\x7f\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    bytes_0 = b"\xb5\xb2\xbb\xf7\xb4\xa4\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    str_0 = "gS.}"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    float_0 = -1684.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    bytes_0 = b"\xd5[\xb4\xd4An\xc3\xe7\x92"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    complex_0 = -22.09511 + 1410.10882j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    str_0 = "XShHol/`5Q(&[*x4wt{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    str_0 = '/_N=`S4"x=xK)H&r!^\n)'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    bytes_0 = b"*2\x02"
    set_0 = {bytes_0}
    int_0 = 3081
    tuple_0 = (bytes_0, set_0, int_0)
    str_0 = "_e4'uhQJI5URO$;\""
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    str_0 = "P!s2wF?@51"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    int_0 = 1447
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    str_0 = "\nr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    bytes_0 = b"\xc0i'\xef\x14d\xfa\xf5^\xba\xfd\xe6\x8c\x84c\x99\xae\x9d"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4253():
    pass


def test_case_4254():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4255():
    int_0 = 1378
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    bytes_0 = b"\xf7\xf5G\xdbMN<\x01&"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    int_0 = 3838
    dict_0 = {int_0: int_0}
    tuple_0 = (dict_0, dict_0)
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    bytes_0 = b"\x1c\x16\xda\xdb\xc5\x13H\x860\x0c)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    float_0 = -954.0
    tuple_0 = ()
    tuple_1 = (float_0, tuple_0, float_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    bool_0 = False
    str_0 = "8#VgjF"
    tuple_0 = (bool_0, bool_0, str_0)
    list_0 = [tuple_0, bool_0, tuple_0, tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    complex_0 = 3198.53 - 596j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    int_0 = -503
    bytes_0 = b"\xea\x1e\xbe\xe9Tu\xfem"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    int_0 = 2118
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    object_0 = module_1.object()
    list_0 = [object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    int_0 = -280
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    int_0 = 852
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    str_0 = "+\\ccf"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4273():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4274():
    int_0 = 2340
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    float_0 = -3658.58
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    bool_0 = True
    str_0 = "\x0cR_\x0b_5YgO'Ie7B\"9}"
    tuple_0 = (bool_0, bool_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    bytes_0 = b"\t#]\x90\xf1\xdfPO\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    tuple_0 = ()
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    bytes_0 = b"\x81\xa4a~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_4282():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4283():
    complex_0 = 638.5067 - 4954.5313j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    bytes_0 = b"\xd9'"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4286():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bool_0 = True
    str_0 = "l"
    dict_0 = {str_0: str_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    bytes_0 = b"?!\xce[\xd0O\xa7\xfe2\x07:"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4289():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4290():
    str_0 = "/7]\\><}RC"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    complex_0 = 2662.32748 + 20.1227j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    int_0 = 1675
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    bytes_0 = b"\xa0\xe88r\xab0H\xe8f\xe7\xf8\x8b"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    str_0 = ";H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    bytes_0 = b"\xa8\xecS"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    str_0 = "^[W,<O0C\x0ctO*@[xlV%\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    bytes_0 = b"I\x90\xa0\x95\xbcd!\xb5\\B"
    module_0.match(bytes_0, bytes_0)


def test_case_4299():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


def test_case_4300():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4301():
    int_0 = 1424
    bool_0 = False
    list_0 = [int_0, int_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    none_type_0 = None
    float_0 = -141.18
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    str_0 = "%)YOeBrr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    str_0 = "oASU\x0c65 TZq0"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    int_0 = 1861
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    float_0 = 1165.0
    list_0 = [float_0, float_0, float_0]
    float_1 = -1191.238137
    tuple_0 = (list_0, float_1)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    str_0 = "("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    float_0 = -180.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    bytes_0 = b"\x9e"
    module_0.match(bytes_0, bytes_0)


def test_case_4310():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4311():
    float_0 = -1250.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    float_0 = 2731.028
    int_0 = -1436
    list_0 = [float_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_4313():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4314():
    int_0 = -356
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_4315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4316():
    bytes_0 = b"\xde\xd6\x11\xd1"
    tuple_0 = (bytes_0, bytes_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    bytes_0 = b"\x99\xd4\xf5\xb5\x06w\xedQ\xa2$C\xb7\x8c6\xd3\xfb\xce4\xf0"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    str_0 = "{WN$Rg\\LT;:>:`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    int_0 = -2812
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    bytes_0 = b'\xb8X$"0\r\x9e\xbb\x84\x8d\xe4\xee}6\x08L'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    bytes_0 = b"\xe9J\xbdc\x8b\xfc\x80}^\xffG\x14C"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    float_0 = 1047.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    int_0 = 1699
    module_0.match(int_0, int_0)


def test_case_4325():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4326():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    str_0 = 'g"<Z}\x0c7o-4='
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    bytes_0 = b"\x1d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    int_0 = -3151
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\xebk\xf4F\x03M\xfbD\xe1\xe8k"
    tuple_0 = (dict_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


def test_case_4334():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4335():
    float_0 = 531.0927
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    float_0 = -2046.3
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    str_0 = ""
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (str_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    complex_0 = -1623.679 + 1077.462j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    bool_0 = True
    list_0 = [bool_0]
    str_0 = "$-lf;~"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    bytes_0 = b"\x97Ym\xbb\xc3\x82\x17;\xb2\xed\xf9\xd3"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    bytes_0 = b'"*\x14\xe7[\x94\x02\xaf\x92\xb0'
    str_0 = ""
    tuple_0 = (bytes_0, str_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    float_0 = 2852.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    int_0 = 1530
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    bytes_0 = b"\x84e\xb2\xe9\x02\x8e "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    complex_0 = 501.698922 - 2146.4562j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    float_0 = -64.2
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    bytes_0 = b"\xd0\\\xc9"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    str_0 = "WL;$[OY{?KL,aIV&U=_]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    str_0 = "BK=$u.bitjkk"
    module_0.match(str_0, str_0)


def test_case_4352():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4353():
    str_0 = "ee."
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0]
    module_1.object(*list_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    bytes_0 = b"j\xc2O\xbc\x80\xd8ZD-P\x92"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    float_0 = 1944.776827
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    none_type_0 = None
    str_0 = "zmOh"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    int_0 = 1844
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    int_0 = -1792
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    str_0 = "\t5i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    float_0 = 1410.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    int_0 = 178
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    float_0 = 2394.1
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    int_0 = 1618
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    str_0 = "R)x?Pa2Dd^Jd "
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    bytes_0 = b"\xd9\x9d}\x85\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    str_0 = "}^Jt!klNro?`W.r<M"
    complex_0 = 2586.17 - 3366.13j
    dict_0 = {str_0: str_0, str_0: complex_0}
    bool_0 = True
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, dict_0)


def test_case_4367():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4368():
    str_0 = ")I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    float_0 = 2924.561
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    bytes_0 = b"q\xa0\xf2\x96\xa4\xf5S\xf0\x15)b\xfb\x93\xf4-?Q\xfa|\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    float_0 = 1860.82
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


def test_case_4372():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4373():
    str_0 = "1b,%1SV??P"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    int_0 = 1252
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    str_0 = "+5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    float_0 = 1642.00872
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    float_0 = -1490.024568
    set_0 = {float_0, float_0, float_0}
    bool_0 = False
    int_0 = 5959
    float_1 = -1958.98
    list_0 = []
    tuple_0 = (bool_0, int_0, float_1, list_0)
    tuple_1 = (float_0, set_0, tuple_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    str_0 = "B+g80B%v{7VdTGhh"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    str_0 = "Td1Fo"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    int_0 = -1688
    bool_0 = True
    list_0 = [int_0]
    tuple_0 = (int_0, bool_0, bool_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    bytes_0 = b"\x81EU\xbbkI\x9e\x85\x83"
    int_0 = 2847
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    str_0 = "U,[:z+2a1}&%(6D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    int_0 = -1114
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4386():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4387():
    float_0 = 2278.1
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_4388():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4389():
    object_0 = module_1.object()
    bytes_0 = b" \x1fc\x9de\xb3"
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    bytes_0 = b"\x9f\xc9\xc1\x083/\xdb\xae\xb5_g\x0c\xde"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4391():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4392():
    str_0 = "A\t"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    bytes_0 = b"\xbbO"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    float_0 = 3228.13864
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    int_0 = -3371
    module_0.get_new_command(int_0, int_0)


def test_case_4396():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4397():
    bytes_0 = b"D\xbb\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    bool_0 = False
    str_0 = "vQ4W>rJn0,f^XJ$~G]C"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, str_0: bool_0, str_0: str_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_4399():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4400():
    str_0 = "\t9]rm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    str_0 = "]Z9~)\rJz]|W=['6RShO"
    bool_0 = True
    list_0 = [str_0]
    tuple_0 = (str_0, str_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


def test_case_4402():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4403():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_4404():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4405():
    str_0 = "C6VD|Q'c'~!lmO>U*7\x0c3"
    bytes_0 = b"\x04\xad~\x05\x17\xb9\x9d/\xae\xa6"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    float_0 = -3505.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    int_0 = 22
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    bytes_0 = b"\xb0\x00;\xae(\x96\xb90\x0b\x04"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    bytes_0 = b"\xea\xfa\xbcy\xc4\xf8\x01\xdf\x87\xd5x\xcd\x87\x9f \xfd\x18'9C"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    float_0 = -5484.18
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    int_0 = -43
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    str_0 = "rV;5d|'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    int_0 = 633
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    str_0 = 'P%F"S<A9*'
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    none_type_0 = None
    float_0 = -2999.574
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    int_0 = 1900
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    int_0 = 3031
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    int_0 = 2984
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    int_0 = 2277
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    str_0 = "^u\nq7\nZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    float_0 = 1632.153736
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    str_0 = "3-8%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    none_type_0 = None
    bytes_0 = b"X\xa4M\xf0\xfe\x9b\xf6H\xb0D\x83\xaf\xce\x87\xc7x"
    dict_0 = {bytes_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    float_0 = 514.27525
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    float_0 = -730.0595
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    float_0 = -83.054085
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    int_0 = 3559
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    str_0 = 'Q"q'
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    int_0 = 2623
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    float_0 = -3760.986764
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    str_0 = "%S4_Og;VY2oV=E3k"
    str_1 = "(wAj[!2B4%jXalarjX"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    bytes_0 = b"I\x90\xb9\x01\xd9\xcd\xbb\x16\xcbG\x1c\xb8\xf3\x84,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    float_0 = -1150.07
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    bytes_0 = b"\xd8\xf1\xd3\x84m\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    str_0 = "3\\+\t3v"
    bytes_0 = b"\xedQk"
    bool_0 = False
    set_0 = set()
    tuple_0 = (str_0, bytes_0, bool_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    str_0 = 'aT@e <24(;Ht"'
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    str_0 = "]X2f]?#"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_4440():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4441():
    float_0 = 933.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    int_0 = -85
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_4443():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4444():
    float_0 = 4312.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    int_0 = 2086
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    float_0 = 16.0
    list_0 = [float_0, float_0, float_0]
    str_0 = ">QaW%RL`Xl4wD9OCqsl/"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    str_0 = "}FHT9*8J+<ye(O"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    complex_0 = 2262.112 - 1559.527196j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    int_0 = 2407
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    int_0 = 4141
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    str_0 = "H~2I@?\x0c&_\nb:3lW"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    float_0 = -845.8919
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    int_0 = -2954
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    bool_0 = True
    int_0 = -1715
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    str_0 = "(/:_-)FhL}H_S\\"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_4456():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4457():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    int_0 = -1794
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    str_0 = "$yJcpdz!\tGA=Z)jwr'"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    bytes_0 = b"z\xe3\xac\xd3\xc1\xd4\xae<X\xbc&\x9b3\xf9\xc1\x96=\xe5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4461():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4462():
    none_type_0 = None
    str_0 = "bL/qER("
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    float_0 = 1760.939589
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    int_0 = 424
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    bool_0 = True
    bytes_0 = b"82g"
    list_0 = [bool_0, bool_0, bool_0, bytes_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, bool_0, bool_0, tuple_0)
    list_0 = [tuple_1, tuple_0]
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    float_0 = -6322.712
    set_0 = {float_0}
    int_0 = -801
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    bytes_0 = b"\x98>!QF5\tPK\x93\xf8\xe3~ "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    complex_0 = 2666 + 1112.1898j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    str_0 = "H# y.`G%C$ViL"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    bytes_0 = b"\xd2"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    float_0 = -2482.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    bytes_0 = b"\xa8\xb4H\x06\x13\xca\x0e\xe8\x8d\xa9\xddj!\xe8\x0f\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    bytes_0 = b"\x00\x9cxw\x1e\xad\x13x\x92\x8b\xd8\x99u\x80\x84?4\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    str_0 = "P/OhUGbz)0"
    module_0.match(str_0, str_0)


def test_case_4477():
    pass


def test_case_4478():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4479():
    float_0 = 1868.317983
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = ()
    tuple_1 = (bool_0, bool_0, set_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    int_0 = -44
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    bytes_0 = b"[\x9c\xfaQ\xefA\x99[\xdct\xf3\xb9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, dict_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    int_0 = -999
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    int_0 = 3017
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    int_0 = -426
    int_1 = 1050
    int_2 = -3683
    dict_0 = {int_0: int_0, int_0: int_1, int_0: int_1, int_1: int_2}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    str_0 = ")M)ce="
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    int_0 = 1393
    module_0.match(int_0, int_0)


def test_case_4490():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bytes_0 = b"\xba\x82\xdbF\xd2\x04\xb2\xb3\xb2t\xec\x93\x1c/\x9d["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    str_0 = "a}Ne*i\\E+7\x0b7\x0cm@ p"
    bool_0 = True
    tuple_0 = (str_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    float_0 = 1017.595
    dict_0 = {float_0: float_0}
    tuple_0 = (float_0, dict_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    bytes_0 = b"\x1c\x1fg\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    complex_0 = 2041.05 + 1694.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    bytes_0 = b"\x05\r6m\xca\xfe\x05\x9d#\x8c=-Y\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    str_0 = "4\t?5@f%?ur@?pWo}!5T*"
    str_1 = "60<f@@"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    float_0 = -2984.191879
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    str_0 = "\n_O"
    str_1 = "NobN6\x0b\\t\r\t"
    int_0 = 349
    dict_0 = {str_0: str_0, str_0: str_0, str_1: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    int_0 = 686
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_4503():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    str_0 = ' "\r.R*,|_A\\'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    str_0 = "%]xv$c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    float_0 = -3071.7
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    bytes_0 = b"\xc3\x00Sa\xbbz\x0b\x07\x89\x11j\x0c\xec<s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    str_0 = "Yh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    bytes_0 = b"\x8eB\x0c\xec\xb6\xef\xa8Rk\xf4@\xcdF\xaa\xbb\xa1\xbb:4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    str_0 = "tqJ\nW$"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    bytes_0 = b"t\xed\xf5Y%\x08\x08m"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    bytes_0 = b"\xeeb\x86)\xf9X\x8f\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    int_0 = 2495
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    float_0 = -2147.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    float_0 = 272.5609
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    str_0 = "-5\tp!tzHk+NvfJOSMy3"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    int_0 = -835
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    int_0 = 2702
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    bytes_0 = b"L"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    str_0 = "lvb.~+:B\x0bd=cI*Q,"
    bool_0 = True
    bytes_0 = b"\x14\xd7\xac"
    tuple_0 = (bool_0, bytes_0)
    tuple_1 = (str_0, tuple_0, str_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    float_0 = 618.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_4525():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4526():
    bytes_0 = b"\xa7\xc2\x04\x8a\x816ZB\x99'\xd1\xd3Q\xfa\xd5\xe3\x93\xc2\xee\x95"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    str_0 = ",\\{HUc%fD45S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    str_0 = "5e('/H4^(Z/Vd"
    str_1 = '"n-j|{G;)Ngo_$'
    str_2 = "R}rNr(Zd"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    int_0 = 919
    int_1 = 1035
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    bool_0 = True
    dict_0 = {}
    list_0 = []
    tuple_0 = (bool_0, bool_0, dict_0, list_0)
    int_0 = -4259
    module_0.get_new_command(tuple_0, int_0)


def test_case_4531():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4532():
    int_0 = -2441
    list_0 = [int_0, int_0]
    bytes_0 = b""
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    int_0 = -2770
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    int_0 = -1630
    str_0 = "UJ\x0ct?{>Ei@} ]e"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    str_0 = "sBg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    complex_0 = -1655.99 + 242.8654j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    int_0 = 931
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    int_0 = -924
    float_0 = -1471.04286
    tuple_0 = (int_0, float_0)
    dict_0 = {tuple_0: float_0, int_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    none_type_0 = None
    str_0 = "vVyc^ix:9z]j5\n]#"
    module_0.get_new_command(none_type_0, str_0)


def test_case_4541():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4542():
    float_0 = 1534.159
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    int_0 = -2044
    module_0.get_new_command(int_0, int_0)


def test_case_4544():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4545():
    bytes_0 = b"\x9e\x1f\xb6uD\x12-\xbbXr\xb0\xec\xc2\xc2\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    bytes_0 = b"Wp\xaa\x11\xaf\x99=\x1d\x07\x9a|_7\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    tuple_0 = ()
    bytes_0 = b"qf(\n\xe1\xa1\x8dmy\x15q\x94"
    tuple_1 = (bytes_0, tuple_0)
    set_0 = {tuple_0, tuple_0, tuple_1, tuple_1}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    float_0 = -1593.122112
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    str_0 = "\\5d"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    int_0 = 360
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    int_0 = 1596
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    bytes_0 = b"\x9aL\x02kH\xdb2\x04\xbd\x1bhM\xe5s\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    bytes_0 = b"\xea{\xdfl8\r\x06V\xbc\x06\xb0K,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    bytes_0 = b"\xe9\xec\xde\xf5\x04O\xbb\x05\x82\x1f+v\xa6\x1c\xc5\x8e\x90A\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1, tuple_1]
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    str_0 = '"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    str_0 = "pHXK(DQ*g\\4`=jur"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    int_0 = -500
    module_0.get_new_command(int_0, int_0)


def test_case_4559():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4560():
    bytes_0 = b"\x8a\x14%\xf8L\x12\xeb\xcfV\x0e\xa2\x16\x03\xdfMG\x06\x0f\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    str_0 = "201"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    bytes_0 = b"\xec\x90]\x83P\xf1Qlm\x1a\xecF)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    float_0 = 329.321
    int_0 = 3116
    dict_0 = {float_0: float_0, float_0: int_0, int_0: int_0}
    bytes_0 = b'\x08\x1cV\xab\xe8"\xdd\x07y\xae'
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    int_0 = 1612
    str_0 = ":\\ewpuW"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, str_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    bytes_0 = b"]\xc0\xb9\xa8\xb4"
    module_0.match(bytes_0, bytes_0)


def test_case_4566():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4567():
    int_0 = 2388
    object_0 = module_1.object()
    str_0 = "42m\n"
    dict_0 = {str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    str_0 = "=HDys|Jr;pd3\\v"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    complex_0 = -1694.25324 - 906.6969j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    int_0 = -2876
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    str_0 = "|*{vRO^JF"
    module_0.get_new_command(str_0, str_0)


def test_case_4572():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4573():
    str_0 = "gqq"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4574():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4575():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    list_0 = []
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    str_0 = "}4^6"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    bytes_0 = b"\x8e\xedR\xb5R\x87\x80\x8be\xe9\x97[\xdeK\xd2w\xdf:\xb5k"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    bytes_0 = b"\x92\xf6\x02r\x03-\x81\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    int_0 = -662
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    bytes_0 = b"\xfd\xee\x0e\x04{\x10\x02\xd9\xdeTR|>\xfd\xb2\x94\xc5\xe2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    float_0 = -2925.03
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    bytes_0 = b"`$4U\x0f\xa0J\x0f\xa1<3\xd2\x1f\xfd\x01q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    int_0 = -2123
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    bytes_0 = b"\xba^J\x89\x1d\xc8\xc0,#\x88\x18\x8eG\x97"
    list_0 = [bytes_0, bytes_0]
    int_0 = -1074
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    str_0 = "'0+`7\n56"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    bytes_0 = b"BK\xe0Q\xa6M\xd6R<\xf26\x02E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    int_0 = -3795
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    bytes_0 = b"Fm\x12\x0fn\xf2\xf7\x13;*\xe7\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    bytes_0 = b'\xb4[\\"c*\x9d\xc7E\x94\xdd:'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    float_0 = 3216.43
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    str_0 = "r*\x0c/&/PJF"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    bytes_0 = b"s\x15\x02sU"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    int_0 = -433
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    str_0 = "!\n`94SF(+&Eh"
    module_0.get_new_command(str_0, str_0)


def test_case_4600():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4601():
    bytes_0 = b"W~\xb70"
    list_0 = [bytes_0, bytes_0, bytes_0]
    dict_0 = {}
    list_1 = [list_0, dict_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    float_0 = 962.53808
    dict_0 = {}
    bool_0 = False
    tuple_0 = (float_0, dict_0, bool_0, dict_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    none_type_0 = None
    float_0 = -1466.747015
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    bytes_0 = b"\xe8\xf5r\xdc\xc8\x13\xa4-=\x08\x02w\xc9\xf4J\xbc\xc6\xdc\x02u"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0, bool_0, bool_0, bool_1}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    int_0 = 634
    int_1 = 3987
    bytes_0 = b"\xec\xb0\x83\xf2\xfb\xc8C\xf9\x89"
    tuple_0 = (bytes_0,)
    list_0 = [int_0, int_1, tuple_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    none_type_0 = None
    str_0 = "|\r^Bv8m'% "
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    float_0 = -285.13196
    object_0 = module_1.object()
    module_0.get_new_command(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    float_0 = 1200.781397
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    bytes_0 = b"\x1b\xc1?\xb6N\xdfC\xf3\xd2\xb2^\xf6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4612():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4613():
    int_0 = 1679
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    str_0 = "1.b+g(^ \x0bfmI!i\tznO*n"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    set_0 = set()
    int_0 = 2991
    tuple_0 = (set_0, set_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    float_0 = -2447.494302
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    bytes_0 = b"\xa3p\xc2\xed\x8e\x9f\xf6\xe4\x8b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    none_type_0 = None
    int_0 = 995
    module_0.get_new_command(none_type_0, int_0)


def test_case_4624():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4625():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = True
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    bytes_0 = b"\xc3\xfdo`\xbcD\xd1I\xaa3,\tR\x01\x03\xfe\xda\x8e\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    str_0 = "Y}iF1|"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = {str_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    bytes_0 = b"\xec4-\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    bytes_0 = b"\xea\xdc\xa4\xeb\xb2A\x13\x08\xce9Yu\xa0\xcd\xf4u\x02A[!"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: bytes_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    int_0 = -1260
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    int_0 = -2211
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    str_0 = "HiWHfcdH0\nNdXR/"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    str_0 = "fZ\t-wOu\t\rsHnA"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    float_0 = 917.339903
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    float_0 = 2218.634
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    bytes_0 = b"\xa2\xf8&\xdb\x93\xf2uM\xb6\x0e]W\x8dv\x8c\xa2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    str_0 = "%*wnJu"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    complex_0 = -2402.94 + 4002j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    bytes_0 = b"\xe63E\x87\xf3\xb21\xeax\x9a\x9e\xbcGs\xe1\x03$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    bytes_0 = b"I\xf1\x8d3*_\xfd\xbc\x08w\x0f\x08T"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    str_0 = "gu+E|+kwp:C&+Bu2\\\x0bG&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    int_0 = 307
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    int_0 = -1870
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    object_0 = module_1.object()
    bool_0 = False
    dict_0 = {object_0: object_0, object_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    bytes_0 = b"\xaeE/\r"
    str_0 = "E-[7/.i!n"
    bool_0 = True
    int_0 = -2499
    tuple_0 = (bytes_0, str_0, bool_0, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    int_0 = -591
    str_0 = '|}pA4Tg.D%-VD"j:T-$8'
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    bytes_0 = b"\x85\xedB"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    str_0 = "#"
    bool_0 = True
    set_0 = {str_0, str_0, str_0, bool_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    float_0 = -1388.555
    list_0 = [float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    bytes_0 = b"Zf\xe2\x87\x9b\x8a\xc1\xf6\xa3j\xa1\xd4\xa5P\xaa|\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    complex_0 = 1999 - 587.73j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    int_0 = -28
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    int_0 = 985
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    int_0 = 628
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    int_0 = -1021
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    int_0 = 1131
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    str_0 = "gDky>%w"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    str_0 = "J8n(rX%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    bytes_0 = b"c\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    int_0 = -2828
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    bytes_0 = b"\xe6;\xe8\xc0\\)w"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    complex_0 = 1535.367 - 183.7661j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    bool_0 = True
    int_0 = 1164
    tuple_0 = (bool_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    bytes_0 = b"]N\x07'\x05\x7f,N\xd0@\xc2\xc3r\xfd\x9b9]3"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    bytes_0 = b"Q\xbf\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    str_0 = "=o?S9]F"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    int_0 = -771
    bytes_0 = b"\x8c\x08>\xf6\x01\x08\x02p\xccA<\xd9~\xaa\x02"
    tuple_0 = (int_0, bytes_0, int_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    str_0 = "w_?*{LOI+UY#{hC"
    str_1 = "(\t<K%c}e"
    str_2 = "4~c"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    none_type_0 = None
    int_0 = -491
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    set_0 = set()
    int_0 = 2364
    module_0.get_new_command(set_0, int_0)


def test_case_4679():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4680():
    bytes_0 = b"\xc6\x88\xb6\xa3W\x91\x96\x96\x83\xdb\x0fq\xfdE/\x0e\xdb\x83"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    float_0 = 1710.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    bool_0 = True
    str_0 = "[di&0.[k"
    tuple_0 = (str_0,)
    tuple_1 = (bool_0, str_0, tuple_0)
    dict_0 = {tuple_1: bool_0, tuple_1: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    str_0 = "0e:?g%&S%PE{>xjcz]"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    bytes_0 = b"W\x1d\xa1\xe4\xc0b\xbc\\)\x80\x0cx\x9c\n\x92"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    int_0 = 1714
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    str_0 = "I8ojGw#cR\x0c:k@^v#Xf"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    str_0 = "Z:"
    bool_0 = True
    float_0 = -3018.0
    tuple_0 = ()
    tuple_1 = (str_0, bool_0, float_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    bytes_0 = b"\x8a\x8dD\x08Jqv>\xe8\x17\xfa\xd6\x10W\x87\x977W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    bytes_0 = b"\x1c\xcb\xc5\xfbPk\xa5\xf0\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    int_0 = -455
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    bytes_0 = b"~"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    str_0 = "7i\nV@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    int_0 = -3112
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    str_0 = "9$d ^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    str_0 = "h\\Q1+J0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    str_0 = "'=\x0cCG<QI1\"|"
    bool_0 = True
    list_0 = []
    tuple_0 = (bool_0, list_0, list_0)
    dict_0 = {str_0: str_0, str_0: tuple_0}
    str_1 = "5N.(yy%y\x0c"
    tuple_1 = (str_0, dict_0, str_1, bool_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    int_0 = 3011
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    int_0 = -914
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    int_0 = 548
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    complex_0 = 940.364601 - 209.183j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    str_0 = "\x0b6m\n`rw_"
    str_1 = "uJ)W8>[.@!pNeU"
    bytes_0 = b"\xa3\x03\xfa\x07\xdd\xf9\x95\xc1\x84\x9f\xfd"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: bytes_0, str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    float_0 = 971.66444
    set_0 = set()
    bool_0 = False
    tuple_0 = (float_0, set_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    bytes_0 = b"\x86\xe5D\x15\x90W\xeb\x9b'\x0bDI\x1f\x80"
    none_type_0 = None
    list_0 = [bytes_0, none_type_0, bytes_0, none_type_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    float_0 = 986.72
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_4707():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4708():
    bytes_0 = b"\x04\xf2.\x90\x85\xbdq\xb6"
    module_0.match(bytes_0, bytes_0)


def test_case_4709():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4710():
    bytes_0 = b"\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    int_0 = 1655
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    float_0 = -2649.892433
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    complex_0 = 944 - 4369.7098j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    int_0 = 1747
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    complex_0 = 1691.42989 + 4235.358j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    float_0 = 1054.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    tuple_0 = ()
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    str_0 = "\t#fu\rm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    float_0 = 2246.874
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    str_0 = "'cDj>\nX,\x0c/"
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: str_0}
    list_0 = [dict_0, tuple_0]
    list_1 = [list_0, dict_0, list_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    int_0 = 897
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    str_0 = "~E\t>7Tjk((/C_"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    str_0 = ""
    int_0 = -2041
    set_0 = {str_0, str_0, int_0, int_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    complex_0 = -2229.1 + 483.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    int_0 = -1200
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    dict_0 = {}
    float_0 = -2236.3653
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    bytes_0 = b"\xaer7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    bytes_0 = b"HL\x92I\xa1\x08\x19\x98\xdf\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = ""
    str_1 = "e8buj\\.}{h"
    str_2 = "$aS\x0cx-^ ~*,I0\r-&1C9"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    float_0 = -381.0
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    int_0 = 293
    str_0 = "-u\t/UH~"
    tuple_0 = (int_0, str_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: str_0, tuple_0: str_0, int_0: int_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    int_0 = 998
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    int_0 = 5378
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    float_0 = -847.5
    set_0 = {float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    bytes_0 = b"^\x98R\x12\x85)]\xd4\x19.OC\r1\x93R\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    bool_0 = False
    int_0 = 2056
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    int_0 = 347
    set_0 = {int_0}
    list_0 = [int_0, set_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    float_0 = -2935.7
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    str_0 = "~\\\tVfyXu{G$t3$X#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    int_0 = 798
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    str_0 = "l\n00x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    bytes_0 = b"\xe3\x89\xd8\x0b"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    int_0 = -243
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    str_0 = "{.?DI'NK7=Fxx:"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    float_0 = -926.9
    str_0 = "$r"
    tuple_0 = (float_0, str_0, float_0, str_0)
    set_0 = set()
    tuple_1 = (tuple_0, set_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    float_0 = 1647.0
    dict_0 = {}
    bool_0 = True
    tuple_0 = (float_0, dict_0, bool_0)
    float_1 = 41.5623
    module_0.get_new_command(tuple_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    int_0 = -753
    bool_0 = True
    tuple_0 = (int_0, int_0, bool_0, bool_0)
    str_0 = "C/ 4)K;8\tAf/VTH\\q\x0cV"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    int_0 = 3666
    complex_0 = 1712.15943 - 401.9j
    tuple_0 = (int_0,)
    tuple_1 = (int_0, complex_0, tuple_0, complex_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    bytes_0 = b""
    int_0 = 833
    str_0 = "nB-{~$UhWL"
    dict_0 = {}
    tuple_0 = (bytes_0, int_0, str_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    bytes_0 = b"\xaf'\xf4_%\x13N\x89\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    int_0 = -3624
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    int_0 = -1733
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    int_0 = -642
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    str_0 = 'T8H./_vm$"O|N)E'
    str_1 = "wlR] "
    str_2 = "Vx\\)},=:Xk\r|e"
    str_3 = "u0\x0bB'\t@\x0bza3-Fw{W}ef"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_3: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    bytes_0 = b"FX\xda\x96\xf2\xe6\xdd\r\x14\x8c\xa2H"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    bytes_0 = b"7K\xd5\xfb\xaaJ\xe6#\x8c\xef"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    float_0 = 1237.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    bytes_0 = b" \xa8\x00\xdb\xfe\xa2\xe1W@\x1c\xb2\x8ce"
    bool_0 = True
    str_0 = "+rtflRF(yIK"
    dict_0 = {bool_0: str_0, str_0: bool_0, str_0: bool_0}
    tuple_0 = (bytes_0, bool_0, dict_0)
    tuple_1 = (tuple_0, bool_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    none_type_0 = None
    int_0 = -1803
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    complex_0 = -3706.1381 + 2360.44j
    bool_0 = True
    dict_0 = {complex_0: bool_0, complex_0: complex_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    str_0 = "\nD\\"
    int_0 = -1419
    dict_0 = {int_0: str_0, int_0: int_0, int_0: str_0, int_0: int_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    int_0 = 2026
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    int_0 = 3747
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    float_0 = 1398.881589
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    float_0 = 2818.67522
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    int_0 = 1406
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    bool_0 = False
    bytes_0 = b"\\\xdac~\x95\xdb;o\xe1"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    bytes_0 = b"\xc1h\xa0\xf7\x9dW\xc1{\xf5\x8cv"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    str_0 = "68$ov\x0cM=NS-F~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    bytes_0 = b"_s\xae\xc0k\xa3\xe9*uT\xb0n\xb6\xb3\xc30\xfdr:r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    bytes_0 = b"\xcb\r\x944z57u\x89\x82\xf7A\x0c\x00\xb3|"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    bytes_0 = b"d2\r#\xd2}\x8cP\xfbw\xb5\x13U\r\xa9K@}"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    int_0 = -2373
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    str_0 = "~E0y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    float_0 = 3558.38356
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    float_0 = -2037.300877
    module_0.match(float_0, float_0)


def test_case_4783():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4784():
    str_0 = "%o<S.lk3|\nY%^OOA7"
    list_0 = [str_0, str_0, str_0, str_0]
    str_1 = "-~Z5m"
    none_type_0 = None
    str_2 = ")@YzB\x0b8[O"
    dict_0 = {
        str_1: none_type_0,
        str_2: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    complex_0 = 3532.03 + 2062.4051j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    int_0 = 819
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    str_0 = "O]{ U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    int_0 = 1493
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    str_0 = '\x0cb(Ee\ngF+f&L)"\nBf'
    str_1 = ""
    str_2 = "n"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    float_0 = 2406.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    str_0 = "nMx\x0cU7~L?@_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    int_0 = -798
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    bytes_0 = b"[?\xf2\xa1\x86y\xa8\xe1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    complex_0 = 765.58056 + 5249.3295j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4795():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4796():
    str_0 = "fBzb*0\\\re"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    int_0 = -1901
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    str_0 = "\x0bq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    float_0 = 2768.79386
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    int_0 = 1462
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    str_0 = '{ns"S3r\n}8'
    module_0.get_new_command(str_0, str_0)


def test_case_4803():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4804():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    int_0 = -2711
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    bytes_0 = b"y\xa7\xbe\xa3\xfd\xda\x02\xdb\x80\xbe)G"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    int_0 = -2106
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    list_0 = []
    tuple_0 = (list_0,)
    bytes_1 = b"\x0e\xdf*\xe3S"
    bool_0 = True
    tuple_1 = (tuple_0, tuple_0, bytes_1, bool_0)
    module_0.match(set_0, tuple_1)


def test_case_4809():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4810():
    int_0 = -455
    str_0 = "Q|l5Rcx8"
    int_1 = 2806
    tuple_0 = (int_0, str_0, str_0, int_1)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    str_0 = "eD\t'n#U`dm&JmULTD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    str_0 = "T'yh(\\U@"
    str_1 = ";goj`h"
    list_0 = [str_0, str_1]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    float_0 = -85.043352
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    bytes_0 = b"\xe1`e\xde\xfa\xac|\x90"
    tuple_0 = (bytes_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    int_0 = -195
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    complex_0 = -1615 - 595.044285j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    str_0 = "*{s\tx35sdbT\nenTT+C("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    float_0 = 2396.094557
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    int_0 = 2028
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    bytes_0 = b"OLY\x90\t\x94\xad\x8e\xa9\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    int_0 = 38
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    bytes_0 = b"\x1a\xe9~\x1ea\xb4\x03|\x0bm"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    dict_0 = {tuple_0: bool_0, bytes_0: bytes_0, tuple_0: bool_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    float_0 = 359.67
    dict_0 = {}
    bytes_0 = b"\x13)\xb9\xceR\xa5\x0br"
    str_0 = "ptYdMAvIGMG"
    tuple_0 = (dict_0, bytes_0, str_0)
    tuple_1 = (tuple_0,)
    list_0 = [str_0, str_0, tuple_1]
    tuple_2 = (float_0, tuple_1, list_0, float_0)
    module_0.get_new_command(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    complex_0 = 1706.776 - 1292.793j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    int_0 = 366
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    int_0 = -701
    float_0 = -1187.0
    tuple_0 = (int_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    float_0 = 1214.55158
    set_0 = set()
    list_0 = [float_0]
    tuple_0 = (float_0, set_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    bytes_0 = b"\x89E\xb5\xdc\x89\xb5\xbeB\xa1\xbe\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    str_0 = "lC;vr3a|;n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    float_0 = 1813.77
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    str_0 = "Y0^sDT27\n^Jmc>x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    int_0 = 239
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    int_0 = -2380
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    str_0 = "x`N`Kr[D'f^y2e"
    set_0 = {str_0, str_0}
    dict_0 = {}
    tuple_0 = (str_0, set_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    int_0 = -579
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    bytes_0 = b"\xff\x8b\xfb\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    float_0 = -4056.202478
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    int_0 = -766
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    bytes_0 = b"\x80j\xa2\x84(+\xeeu\x87\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    str_0 = 'Zi"6T42KLE#5'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    bytes_0 = b"\x10\x96L"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    str_0 = "NPew6h1<\\ ]{+'yv.Ar;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    bytes_0 = b"\xe9F\xa4\x93\xe9\x9f\xe5\xa6\xd5O\xaa\xf8\xa4EP\x00\x1a*"
    str_0 = ""
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    int_0 = -3171
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    str_0 = "GuRy2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    bytes_0 = b"\xfe):\x9fd~\x84\xbcU\x07\x85p"
    int_0 = -1671
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    bytes_0 = b"\x12\xebZ\xdd)~\xc0\x92S"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    float_0 = 2558.238
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    int_0 = -1442
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    str_0 = "thfX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    int_0 = 267
    int_1 = -442
    str_0 = "Z0t:w<(+(^|"
    tuple_0 = (int_0, int_1, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    int_0 = 2178
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    tuple_0 = ()
    int_0 = -4472
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    str_0 = "jeU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    str_0 = "8=F(L!XQ&Uj-:@eB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    str_0 = 'U"UD*f'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    int_0 = -2108
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    int_0 = -879
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    int_0 = 149
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bytes_0 = b"\xd47\xad\xfa\xf93\xd5\xc5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    bytes_0 = b"\x1d(\x8b\x15'\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    bytes_0 = b"\xca\x1d\xc3\xe4\xcb\x8c\x80"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    float_0 = 4763.065
    str_0 = "eHuDq}QpN(xZ5T9"
    dict_0 = {float_0: float_0, float_0: float_0, float_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    float_0 = -5587.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    float_0 = 306.7469
    set_0 = {float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    str_0 = "\x0c(+k,hNK~Kx&wh8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    int_0 = -159
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    bytes_0 = b"\r=\x02\xf0\xd8a\x80\xb9U\x99"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    none_type_0 = None
    int_0 = 2234
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    complex_0 = -1014 + 181.5j
    bool_0 = False
    tuple_0 = (complex_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    none_type_0 = None
    str_0 = "o!XQ"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    float_0 = 870.46572
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    str_0 = "rV.pJO~L_ @"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    bytes_0 = b"e)\xa2\x18^\x1bE)\x0e\x1f-z\x00"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0, list_0, bytes_0]
    list_2 = [list_1, bytes_0, list_0, bytes_0]
    list_3 = [list_2, list_1]
    module_0.match(list_3, list_2)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    float_0 = 1263.085
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    bytes_0 = b"$\xc5]\x1c<\xd6\xa0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    int_0 = -2436
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    float_0 = -1386.304
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    bytes_0 = b"?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    str_0 = "It^"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    complex_0 = -618.8 - 191.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    int_0 = -328
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    bytes_0 = b"\x95"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    int_0 = 2535
    float_0 = 2309.6722
    dict_0 = {float_0: int_0, float_0: float_0}
    bool_0 = False
    tuple_0 = (dict_0, int_0, bool_0, float_0)
    tuple_1 = (int_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    int_0 = 973
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    int_0 = 3228
    bytes_0 = b"\x04\xaa\xb6\x9e\xa2\xf7]\xb8\xbbw\x88\xa6~Y"
    tuple_0 = (int_0, bytes_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    int_0 = -3822
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    float_0 = 979.979162
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    int_0 = 884
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    bool_0 = False
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    float_0 = 4901.026
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


def test_case_4903():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4904():
    float_0 = -2329.49
    tuple_0 = ()
    dict_0 = {float_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    str_0 = "`Lnv6ZM,)>Blw"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    int_0 = 1067
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    float_0 = -1313.051286
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "(wG~0UWo"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    bool_0 = False
    complex_0 = -1451 + 1895.4j
    dict_0 = {complex_0: bool_0}
    str_0 = ">~fVy~|\r="
    tuple_0 = (bool_0, complex_0, dict_0, str_0)
    bool_1 = False
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    complex_0 = -2690 - 3039.102043j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    str_0 = '9>"h03E-2/t\x0b>}r4|W(A'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    complex_0 = -1463.3176 + 1338.21408j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    int_0 = -1325
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    int_0 = 366
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    int_0 = 2082
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    bytes_0 = b"\xa8\xa6\xa3>3x\x9c\x81\xbd<\xd9z"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    set_0 = set()
    list_0 = []
    module_0.get_new_command(set_0, list_0)


def test_case_4918():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4919():
    str_0 = "/[v\thlFBTPUh#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.match(object_0, list_0)


def test_case_4921():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4922():
    int_0 = -801
    module_0.get_new_command(int_0, int_0)


def test_case_4923():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    bool_0 = True
    bytes_0 = b"\x92/\xdd\xa1\x99"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (bool_0, dict_0, dict_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    int_0 = -2319
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    float_0 = -731.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    bytes_0 = b"\xb6\x7f\xfb\xb9q\xa7\xe1M\x1f\xf3\xc5\x03\x12\xdf\xfb\x02\x1a\xeb"
    float_0 = 2488.8
    tuple_0 = (bytes_0, bytes_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    float_0 = 231.86
    int_0 = 2690
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    complex_0 = -2614.12 - 752j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    int_0 = 621
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    float_0 = 329.941
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    int_0 = -1841
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    float_0 = -2944.3759
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    bool_0 = True
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(bool_0, tuple_0)


def test_case_4935():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4936():
    float_0 = -1869.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    float_0 = 307.32693
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    bytes_0 = b"\xcc\xde'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    str_0 = "h\x0c"
    module_0.match(str_0, str_0)


def test_case_4940():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4941():
    str_0 = ",,.?{RMpE($jQ[>rDqa"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4942():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4943():
    complex_0 = -565.652 + 2054.9j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    dict_0 = {}
    str_0 = "py~yJ"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    int_0 = -1748
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    int_0 = -842
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    int_0 = 239
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    float_0 = -422.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    str_0 = "UG\x0b?tcA'D9J>ct=\x0cx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


def test_case_4953():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4954():
    int_0 = 1108
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    str_0 = "z2N\x0c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    str_0 = "n ~$k?nby#w"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    int_0 = 608
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    int_0 = -1697
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0, bool_0)
    int_0 = -533
    tuple_2 = (tuple_1, int_0, bool_0, tuple_0)
    module_0.match(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    int_0 = -44
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    str_0 = "rW8uVb%UU.f,]PL\\Enq"
    str_1 = "aA[_"
    dict_0 = {str_0: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    bytes_0 = b"Ve\x85LzL\x8f\xbaxYjV"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    int_0 = -4713
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    bytes_0 = b"\x07\xd4\x96\xa6"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    complex_0 = 194.46 - 1504.395656j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    int_0 = 460
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    complex_0 = 322.63799 + 539.1j
    bool_0 = False
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    list_0 = [tuple_0, bool_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    int_0 = -66
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    none_type_0 = None
    str_0 = "ljjiD(|"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    bytes_0 = b"j\x8c\xa55\x8e\x92\x19\x9dT\xda\xc1&\xea\xa3Q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    bytes_0 = b"$\x8bR\x05\xb9\xbf5w-63\x8a{\xab\xa0\x85n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    int_0 = 4515
    str_0 = "xAiBqN@kAd_ILclyTl!"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    float_0 = -4424.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    bytes_0 = b"L\x94\xda\xacW"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    str_0 = "y+4p6"
    list_0 = [str_0]
    str_1 = "d()hO|"
    dict_0 = {str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    int_0 = -2590
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    float_0 = 3122.238
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    int_0 = 2049
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    str_0 = "qGh1zD]s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    str_0 = ">k2y$cd\x0b\to`k`QP>1y+s"
    bool_0 = True
    str_1 = "hN3dZo+|55z^{k/Qk"
    str_2 = "vU`hM<V\tF4:.>,(%."
    str_3 = "PBY~*|\nRvh-Lh"
    dict_0 = {str_0: bool_0, str_1: bool_0, str_2: str_2, str_3: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    float_0 = -363.016466
    bool_0 = True
    bytes_0 = b"m\xde\xd5\x02\x8e\xbf\xed\x83"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    str_0 = "h;GaE$>WhuJU@[sl|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    int_0 = 2904
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    bytes_0 = b"1\xb8\xd0\x16>\x1c"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    complex_0 = -322.44246 + 1609.28718j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    int_0 = -1016
    none_type_0 = None
    set_0 = {none_type_0, int_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    bool_0 = True
    int_0 = 3008
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    str_0 = '"N&Wxr{26I Kve'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    float_0 = -1091.714583
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    int_0 = -2457
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    complex_0 = -1933.414637 - 3592.4441j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    str_0 = "!P\x0bQ"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    int_0 = 1589
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    float_0 = 4017.42159
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    int_0 = -1072
    dict_0 = {}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    complex_0 = 1587.869485 + 2120.0331j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    str_0 = "\t@_;^^~1Es\\L2)Rx"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    bytes_0 = b"\t[\xb4EA\x13\x9c\t~"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    bytes_0 = b"\x99\xbd\xa8\xf46\x9c\xff\xb1Ko"
    bytes_1 = b"\xcdmC\xa4\xa5\x8f:X7\x8c"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    int_0 = -125
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    bytes_0 = b">T\xda:~\\8\xd6i\xd2(\xb2\xac\xd8y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    str_0 = "-2B:\\d(GmC_:M{6F"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    str_0 = "tgNr[m+\nB%I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [dict_0, dict_0, dict_0, list_0]
    module_0.match(dict_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    str_0 = "_&RH;|+N!kU]zhK97aBX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    int_0 = 825
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    float_0 = -1025.93574
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    int_0 = 949
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    float_0 = -1659.338
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    str_0 = "\r{;c\\EJ{J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    bytes_0 = b"\x16\xa3@\xe2\xc4\xacv\xcfJ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    float_0 = -2026.0951
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    str_0 = 'Fl"\x0b9_3wg8`Nc/OcU~H\x0b'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    int_0 = 1653
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    int_0 = -5026
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    float_0 = 151.12
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    float_0 = 2471.832361
    list_0 = [float_0]
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, float_0)


def test_case_5024():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5025():
    float_0 = 2911.540715
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    str_0 = "/@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    str_0 = "B\rG75z\ny"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    tuple_1 = (bool_0,)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    str_0 = ""
    tuple_0 = (str_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    bool_0 = False
    str_0 = "3\x0b'!UCKnReys\x0b"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    str_0 = "PA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    bool_0 = True
    bytes_0 = b"y\x88\xc3`\x1d\xe2\xb5"
    tuple_0 = ()
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_1 = (bool_0, bytes_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    none_type_0 = None
    str_0 = "4|x?"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    str_0 = ".(Y=5j;T``"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    bytes_0 = b"\xf6I"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    bytes_0 = b"\xeb\xf5\xe8\x93@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    str_0 = ",-wfmA'uCWgEHKMX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    bytes_0 = b"E\x19x\x06\xa2\xf6\xd2Pl\xfc"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    int_0 = 983
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    bytes_0 = b"\x02-\x86[\xab+\x0b\xf3|\xfavs\xe6\x9ah\xec\xbc\xf9\xf6\xae"
    module_0.match(bytes_0, bytes_0)


def test_case_5042():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5043():
    str_0 = "T91j\x0b&N"
    list_0 = [str_0]
    str_1 = "rnXT+ q|"
    str_2 = "vi\\*]"
    str_3 = "\x0bVZ{T"
    dict_0 = {str_1: str_1, str_2: list_0, str_3: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    none_type_0 = None
    str_0 = "3"
    module_0.match(none_type_0, str_0)


def test_case_5046():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5047():
    int_0 = 2942
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    bytes_0 = b"\xa1Ru\x9c\x8c\x1d\x0e\r\x9dNIS"
    bool_0 = True
    bool_1 = True
    str_0 = "8Kfo^xwzn7;/R6T5"
    tuple_0 = (bytes_0, bool_0, bool_1, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    int_0 = 1140
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    set_0 = set()
    object_0 = module_1.object()
    list_0 = [set_0, set_0, object_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    bytes_0 = b"\x01\x98u\xc7\xb3@\x8b=Z,\xe1\xff1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    bytes_0 = b"ZA\x94\xdf\xcf\x15r&C~\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    bytes_0 = b"="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    str_0 = ""
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    str_0 = "9*1j2YK&%N0T.x?QH\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    object_0 = module_1.object()
    float_0 = 23.551038
    module_0.match(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    bytes_0 = b"c\xaa6r\x12b\xd4G\xd6\xf4\x15\xa7xb\xcf#"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    str_0 = ")Z`;JjgZPE]Qy_= ^XS"
    bool_0 = False
    list_0 = [str_0, bool_0, bool_0, str_0]
    list_1 = [list_0, bool_0, list_0, bool_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    int_0 = 435
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    int_0 = -1978
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    str_0 = "*Q8Zw(8@n\nonxKc%8+tW"
    module_0.match(str_0, str_0)


def test_case_5066():
    pass


def test_case_5067():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5068():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    dict_0 = {}
    list_0 = [dict_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    float_0 = 623.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    bytes_0 = b"v\xb5\xd7m^\x04\xd0~"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_5072():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5073():
    bool_0 = False
    bytes_0 = b"\xd7\xdb`|\xa3\\\xaa\xb4\x9a\x9f"
    tuple_0 = (bool_0, bool_0, bytes_0)
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    bytes_0 = b"\x19\xbe\x00g:\xd5\x88\xd6"
    module_0.match(bytes_0, bytes_0)


def test_case_5075():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5076():
    bytes_0 = b"e\xba \x08@\x1e\x07\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    complex_0 = -4381.1 + 295.36j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    str_0 = "<E'& ll"
    str_1 = "oQ\n3~5]c#"
    complex_0 = 1818.559863 - 905.08j
    dict_0 = {str_0: str_0, str_1: complex_0}
    module_1.object(**dict_0)


def test_case_5079():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5080():
    float_0 = 1951.326
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    bytes_0 = b"_\xe2h\xf8\xe0gk\xd7B\xe4\x8bu\xfe\xbb\x95\xd8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    bytes_0 = b"\x85.\xd7\xd9)?\xfc\xae\xa7\xe0\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    str_0 = "x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bytes_0 = b"\xa8\xde\xdc\xc4(\x07\r\xd6\xb7\xd7\x16\x9a\xeff\xa8\xd3\x95"
    tuple_0 = (set_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    int_0 = -2338
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    str_0 = "0oCy0-!e_cPDik1"
    int_0 = -3157
    int_1 = 1200
    bytes_0 = b"\x95\xf9EL\x006E\x84\x8dP@7(8G\xd6\xecY\xd3."
    dict_0 = {int_0: int_0, int_1: str_0, str_0: int_1, int_1: bytes_0}
    tuple_0 = (int_0, int_0, dict_0)
    tuple_1 = (str_0, tuple_0)
    module_0.match(tuple_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    int_0 = 2182
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    int_0 = -1650
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    float_0 = 1243.2583
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    complex_0 = 696.3482 + 1657j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    bytes_0 = b"\x1bu"
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0, bytes_0)
    list_0 = [tuple_1, tuple_1, tuple_0, tuple_1]
    list_1 = [list_0, list_0, bytes_0]
    module_0.match(list_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bytes_0 = b'\xde\xb9\x11,\xcb\xb6\xcd/j"t\xae'
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    bytes_0 = b"\xcc\x9c\xa7\x94\x1a-|\xc1\xbfr/MNut\x0f+\x91"
    str_0 = "<%|~+?q6miM"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    int_0 = 2340
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    int_0 = 1843
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    tuple_0 = ()
    bool_0 = False
    list_0 = [tuple_0, tuple_0, bool_0]
    tuple_1 = (list_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    str_0 = "=; "
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    int_0 = -223
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    str_0 = "tz\nZ/V1',w$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    str_0 = "uw;I/,TK!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    bool_0 = False
    bytes_0 = b"\xd7\xdfj\xb9\xa11\xdbXj\xf8#zlg\xa5\xec3q@"
    dict_0 = {bool_0: bytes_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    str_0 = ""
    bytes_0 = b"c\x904"
    tuple_0 = (str_0, bytes_0, str_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    complex_0 = -1926.35 - 2972.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    bytes_0 = b"\xd0\x99C\x07\x81J_\x0b\xcb\x1d\x9e\xdd\x8d\xe7u\x03W\xfcJk"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    int_0 = 2499
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0, int_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    str_0 = "Fx)N}vJ}A"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    float_0 = -1853.6362
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    str_0 = "X26R*=N3!FYtX("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    float_0 = 536.855
    set_0 = {float_0, float_0, float_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_5111():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5112():
    bytes_0 = b"k\x91)\r\xfc\x98-\xabI\xfa\xe1\x92S\x18\\^\x99"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    int_0 = -3878
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    int_0 = -409
    dict_0 = {int_0: int_0}
    bytes_0 = b"N<\xb9\x1a\xd8\x7f\xa8"
    list_0 = [dict_0, int_0, bytes_0, bytes_0]
    bool_0 = False
    set_0 = set()
    tuple_0 = (list_0, bool_0, set_0)
    tuple_1 = (tuple_0, int_0, tuple_0)
    tuple_2 = (tuple_1,)
    tuple_3 = (int_0, tuple_2, bool_0)
    module_0.match(tuple_3, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    float_0 = 136.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    int_0 = 404
    module_0.get_new_command(int_0, int_0)


def test_case_5118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5119():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    str_0 = '\\QYfNC"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    str_0 = "n0?THW\x0bqJpNk"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


def test_case_5122():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5123():
    dict_0 = {}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    bytes_0 = b"\x01\x1a&\x95\x1a}\x1e\xeb\xa3\xe4\xc7@\xfel\x9d[\x05\xd0\x96\xad"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    float_0 = -971.997
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    int_0 = 3334
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    str_0 = "(s],[SQeG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    str_0 = "rM+{3@vjw\\deBm)tS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    bytes_0 = b"\x83\xa8Yla\x89\xd3\xc1\xc0\xe0=\xb69\xa2\xb3\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    float_0 = 994.15427
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    int_0 = -2084
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    int_0 = -854
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    float_0 = 1478.07776
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    int_0 = 1396
    list_0 = [int_0]
    list_1 = [list_0, int_0, int_0, list_0]
    module_1.object(*list_1, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    float_0 = 2159.3915
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    complex_0 = -2304.992138 - 2868.742j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    str_0 = "S "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    int_0 = 1559
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    str_0 = "*9}gs/X$\t0 :Ijy4z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    int_0 = -3483
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    int_0 = 1152
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    float_0 = 2979.78
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    int_0 = 1038
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    complex_0 = 2570.7 + 2600.416197j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    str_0 = "{>|^\ns"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    int_0 = -126
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    bytes_0 = b")]Z\xd1\xa5\x82~\xf4\x04\xa8W\xf5\x80\x91\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    str_0 = "JLl0OpE\x0b]\r/uE4/kC\tv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    int_0 = 337
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    dict_0 = {}
    str_0 = "}IIe"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    str_0 = "[<b}%&0${'pXL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    str_0 = 'OeP}\tpI&`Y_c"4D>!A.F'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    str_0 = "?nP}5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    int_0 = 952
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    str_0 = "bN)0NB'fw0{5.8 _qQK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    bytes_0 = b"+\xc6\xa5?>\x10\xfa^\x11\xff\xaef\xbcJ\xe7h\xd2\xb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    bytes_0 = b"\x13\x82\x9b\xfc\xe0\xf7\xd41lk\x96"
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    bytes_0 = b"\x02,\xd5+\x11"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    str_0 = "<"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    complex_0 = -21.1967 + 2056j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    str_0 = '{/v41"}PY'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    str_0 = "&V%tw&81`6+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    float_0 = 3720.3
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    str_0 = "mW, 23gfs."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    bytes_0 = b"\xa49\xcf@\x18-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    int_0 = 2709
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    str_0 = "dZ]dBf"
    module_0.get_new_command(str_0, str_0)


def test_case_5172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5173():
    str_0 = "\":$G>9'].T'w>polf"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    complex_0 = 1072 - 1585.29647j
    module_0.match(complex_0, complex_0)


def test_case_5175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5176():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    int_0 = -264
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    int_0 = 3100
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    int_0 = -411
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    str_0 = "ziNi!Z;)`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    str_0 = "*N%_"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    int_0 = -1612
    tuple_1 = (list_0, int_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    float_0 = 2262.990314
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    str_0 = '\x0cz`/6\r"lTc\\,Mz'
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    int_0 = 2635
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [list_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    bytes_0 = b"\xeat\xa0b\x89Y0\x80\x18\xa1\xf4\x87"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    bytes_0 = b"\x14^E\xb4x\xf2\xabf\xcf\x0fN\xbb\x1e+\x99j\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    int_0 = -2733
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    int_0 = -1735
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    str_0 = "\x0b@aPzi$1A}\x0b\rOzL6fF{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    float_0 = 1154.27
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    bytes_0 = b"B\x9f\xf7x\xfb\x0eg\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    str_0 = ">pPq5Rc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    int_0 = 2518
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    int_0 = 2281
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    int_0 = 3560
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    int_0 = -939
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    float_0 = -29.889691
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    dict_0 = {}
    int_0 = 2815
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    complex_0 = -244.452 + 922j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    complex_0 = 9.196 - 217.7j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    str_0 = "EuDewFVFEP<Q>y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    str_0 = 'C0&"AwF5l\t'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    int_0 = -1226
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    complex_0 = 869.18 + 1146.37735j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    bytes_0 = b"\xcf\xc2\xa8\xa4#\xcfWt\xba7\x18G\x00\x8e\xf3AH\xf1\x88,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    list_0 = []
    str_0 = "A$DUfM\n"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    int_0 = -2097
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    str_0 = "9\\CAs#G}_fM+mtE:|_TR"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    float_0 = 2506.4176
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    float_0 = 2533.0
    bool_0 = True
    bool_1 = False
    dict_0 = {float_0: bool_0, bool_0: float_0, bool_1: bool_1, bool_0: bool_1}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    int_0 = 2551
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    float_0 = -2574.32258
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    none_type_0 = None
    bytes_0 = b"\\\x9d3\x9b\x88K\xed<\xa6^Z\xe7\x9a!\x14"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    complex_0 = -892.56 + 505.208198j
    bytes_0 = b'\x9b3\x7fw\x95Q,)"<z\x06\xb4'
    module_0.match(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    bytes_0 = b"\xfa\xda\xc3\xe6\xecLY\x84\x1a?\xc2\xd5\x8f\xf2\x15\x96\x81"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    bytes_0 = b'\x03\xf1\xce!\xb7^N\x11\xa3M\x15\x17\x0fkR"\x9f\xd6'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    complex_0 = -1826.966 + 2538j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    int_0 = -2485
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    bytes_0 = b"\x02\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    bytes_0 = b"~\xb7\x05\xf6f\x0eK\x93\xbe\x9a\xdb\xbd\t&\xff\xcf\xec\x13\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


def test_case_5230():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5231():
    complex_0 = -2039.69465 - 700j
    set_0 = {complex_0, complex_0}
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    bytes_0 = b"d\x89>\xce\xbb\xfa}\x0e\xc5\xe5g_\xe1d\xf3^"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    bytes_0 = b"7\x9b\r-\xbf\xde\xd0\xfe\x98\xf3\xc8\x19\xe7P Ma"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    int_0 = 1885
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    int_0 = -2326
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    none_type_0 = None
    complex_0 = -1632.5793 + 757.2j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, bool_0, bool_0]
    list_1 = [list_0, list_0, list_0]
    list_2 = []
    module_1.object(*list_1, **list_2)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    str_0 = ",X){'*\\F#q9+Y'p"
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    int_0 = 558
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    bytes_0 = b"\xef\xb1l\x19"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    int_0 = 144
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    bytes_0 = b"\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    int_0 = -1711
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    str_0 = "Larcd]w~K\nXPcoxo[T$ "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [str_0]
    list_1 = [dict_0, str_0, list_0]
    module_0.get_new_command(list_1, list_1)


def test_case_5248():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5249():
    int_0 = 363
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    str_0 = '5"Q\trER@<!D?uN'
    none_type_0 = None
    str_1 = "Y.}F"
    str_2 = "u\x0c~caK>"
    str_3 = "M?W\x0chpDd]"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    float_0 = 2857.85979
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    bytes_0 = b"E|\xe1\n_d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    bytes_0 = b"P\xf7\xd5K\xd3\xa5\x0f\xb9\x13\n?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    int_0 = -1416
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    str_0 = ""
    list_0 = [str_0]
    bool_0 = True
    bytes_0 = b"\x90\x1fDYb\xc2OC\xc51#P\xb6\xf7@\x01"
    tuple_0 = (bool_0, bytes_0, list_0, bool_0)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    float_0 = -4360.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    int_0 = 3311
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    str_0 = "-x|\\T5<S"
    module_0.get_new_command(str_0, str_0)


def test_case_5259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5260():
    int_0 = -1194
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    none_type_0 = None
    int_0 = -1038
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: set_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    bytes_0 = b"\xea\xd4,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    complex_0 = -2083.6 - 3254.89564j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    bytes_0 = b"!f\xd6*#,g\xd4'\x82\xa0\xf0\xd0S\x13\ri"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    bytes_0 = b"H\x9b\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    str_0 = "oO@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = {}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    float_0 = -772.554568
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    float_0 = 1057.149979
    module_0.match(float_0, float_0)


def test_case_5271():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5272():
    int_0 = 2336
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    bytes_0 = b""
    bytes_1 = b"\xbf*\x19'C\x92\x07\t`\x9e\xb6V\xf1\x0f\xa6\xce\xd2\xd4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_1}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    bytes_0 = b"\x9fK\xa1-#\x91;\xe9\xd3rR\x01`[\xd1\x11/\x01\xe7\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    str_0 = "QLb/]w[)e''"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    float_0 = -3507.85078
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = [dict_0, float_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    float_0 = -2745.683
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    float_0 = -1378.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    int_0 = 1470
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    bytes_0 = b"y\x0cMA\x0e\x83\xa3\xf06Lb\xa3\xd1\x84\xf9\x12\x90"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    float_0 = 1624.14278
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    tuple_1 = (tuple_0, bool_1)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    int_0 = -2135
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    str_0 = "*k"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    bytes_0 = b"$Q\xd4\xc0u\xec\x1a\xf1\xed2\xff,\x82D\x1b"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    str_0 = "="
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    int_0 = -4749
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    float_0 = -945.4408
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    int_0 = -516
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    str_0 = "=}hTE9b-,6Ylc8Y9"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    str_0 = "+M&nw"
    str_1 = '"niEfGX@^^'
    str_2 = ",]ci`\rFK#5&"
    str_3 = "'6\x0c\tcjUkRjt\\t*+f"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_3: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    str_0 = "1CH=Kc,F\x0bs!v"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    str_0 = "F 8'5]cfvpaj0A#:\nX-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    float_0 = -3729.56237
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    bytes_0 = b".h\xb6*\xa6\x00\xf1S\x93o1L\x9f\xdd\x18\x92\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    float_0 = -1106.29521
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    int_0 = 172
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    int_0 = 40
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    list_0 = []
    bool_0 = True
    tuple_0 = (list_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    str_0 = "byA/L%TAYA-]:;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    int_0 = -2096
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    int_0 = 491
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    list_0 = []
    str_0 = "k6|"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    str_0 = "0GF@pT`^J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    str_0 = 'D@s,<#"Y_G%_!kdo'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    bool_0 = False
    bytes_0 = b"g"
    str_0 = "{Rw%*6'\nO7FaK*(/m+"
    dict_0 = {bool_0: bytes_0, bool_0: bool_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    int_0 = 2456
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    int_0 = -392
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    str_0 = '^q[,"N|Ee+s)Ar'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    bytes_0 = b"\xc1<\xda\xb6\xab\xd57\xa37\xa8\xa2\t\xa5 }R\xb7\n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    float_0 = 1011.55433
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    str_0 = "YD"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    str_0 = "n:~#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    int_0 = -872
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    float_0 = -2714.431
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    int_0 = -287
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    str_0 = "LyJ=5 V[EK\r\rkcT^&iCd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    float_0 = 1652.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    int_0 = 1494
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_5328():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5329():
    bytes_0 = b"\xb8\xaa\x89\x9a\x18?\x13d\n\x19\xc7Ejl6\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    bytes_0 = b"\xf4I\x12"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    str_0 = "N3cd~(fb3RyLHK"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    str_0 = "T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    bytes_0 = b"\x8f\xc1"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    complex_0 = 684 - 804.397j
    module_0.match(complex_0, complex_0)


def test_case_5336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5337():
    str_0 = "?D]|l,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    float_0 = -937.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    str_0 = "YF&("
    bool_0 = False
    module_0.match(str_0, bool_0)


def test_case_5340():
    pass


def test_case_5341():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5342():
    bytes_0 = b"\xe2\xf1\x95\x7f\xa3\xe9\xadf\x0b\xf5\x01j_ \xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    int_0 = 234
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    dict_0 = {}
    str_0 = "hY8fo&N\t\rwt%u*fZ}"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    int_0 = 2276
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    str_0 = "Xdu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    list_1 = [list_0, list_0, list_0, object_0]
    module_1.object(*list_1)


def test_case_5348():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5349():
    int_0 = -932
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    complex_0 = 1902.9 + 120.7j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    str_0 = "c+U/1xM5)35H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    float_0 = 2650.624
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    float_0 = -2473.29
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    tuple_0 = ()
    bool_0 = True
    int_0 = -1280
    tuple_1 = (bool_0, int_0)
    dict_0 = {tuple_0: tuple_0, tuple_1: int_0, int_0: tuple_1, tuple_1: tuple_1}
    tuple_2 = (dict_0,)
    module_0.get_new_command(tuple_2, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    bytes_0 = b"\xb2\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    str_0 = "JBh?Jaq`J.=&1"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    complex_0 = 569.238566 + 1578.9416j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    int_0 = -615
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    int_0 = -996
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    float_0 = -3114.1161
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    bytes_0 = b"\xa8\xd0!\xe1"
    dict_0 = {}
    int_0 = 1013
    list_0 = []
    int_1 = -870
    tuple_0 = (dict_0, list_0, int_1)
    tuple_1 = (bytes_0, dict_0, int_0, tuple_0)
    list_1 = [tuple_1, list_0, int_1, int_1]
    module_0.get_new_command(list_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    int_0 = 1226
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    int_0 = -1870
    module_0.match(int_0, int_0)


def test_case_5365():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5366():
    bytes_0 = b'"|\x84'
    int_0 = -843
    tuple_0 = (bytes_0, int_0, bytes_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    list_0 = []
    str_0 = ":efn(N(ZZt\t[ "
    none_type_0 = None
    str_1 = "E`$ONa"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    bytes_0 = b"\x9a\xc3\x94"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_5370():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5371():
    bytes_0 = b">\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    str_0 = "|uHMB*2\tP01"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    bytes_0 = b"7\xd9u\x86i\xa4}\x84\x9c\xff\n\xf1\x1cH\xb3\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    float_0 = 1799.42458
    list_0 = [float_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    bool_0 = True
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    int_0 = 747
    set_0 = {int_0}
    module_0.match(set_0, set_0)


def test_case_5377():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5378():
    float_0 = 1192.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    str_0 = ">\t\nKFqG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    str_0 = ",| /mE3|s+{oPci>mwl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    bytes_0 = b"\xaa"
    set_0 = {bytes_0, bytes_0}
    int_0 = -1842
    tuple_0 = (bytes_0, set_0, set_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    int_0 = -3232
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    bytes_0 = b"\x88\x07p\x88\x81m\x02\xc7\x97d=SF[\x11\xe3"
    int_0 = 387
    tuple_0 = (bytes_0, int_0, int_0, int_0)
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    bytes_0 = b"\nq\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    int_0 = -2305
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_5391():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5392():
    str_0 = "\\oLfamV/_Cb*Gt\\8:Z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    int_0 = 456
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    str_0 = "\r,N0v"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    int_0 = 3237
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    bool_0 = True
    str_0 = "k"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    float_0 = -1602.207563
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    bool_0 = False
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    str_0 = "m-OkH&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    int_0 = -1825
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    str_0 = "Nklxr-Nf>P2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    str_0 = "ie#TPpIGb"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    int_0 = -1365
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    int_0 = 3582
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    str_0 = "aN7cV4l"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    str_0 = "B\nQV%5h&("
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    int_0 = -2069
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    int_0 = 157
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    str_0 = "Qk\r<_=~iK\x0c{"
    module_0.get_new_command(str_0, str_0)


def test_case_5411():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5412():
    bytes_0 = b"\xb2gQ\xabA\x97\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    float_0 = 1359.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    bytes_0 = b"\xa3}\x16\x08\x98]\xbf\x17l\x93\x1e\x8c<\tn\xa7\x85\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    float_0 = 1953.67
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    str_0 = '_KwZ7"@B'
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    int_0 = 1422
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    int_0 = 1412
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    str_0 = '|4}"%WEoC9OGT:O4\x0c'
    complex_0 = 1721.19 - 319.732416j
    tuple_0 = (str_0, str_0, complex_0)
    dict_0 = {str_0: tuple_0}
    tuple_1 = (tuple_0, str_0, dict_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    str_0 = "\r0usU4\"bc1gB\x0cXl|'[tk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    float_0 = 854.0
    dict_0 = {}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    int_0 = -167
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    bytes_0 = b"\x7f\xd80\xdb\xad\x87'"
    str_0 = "wShN; O2/G"
    tuple_0 = (bytes_0, str_0)
    list_0 = [str_0, str_0]
    tuple_1 = (tuple_0, list_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    str_0 = "TRg/7<bsg\rCs06N\x0b="
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    complex_0 = 1978.111 - 957.513j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    float_0 = -4710.542889
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    bytes_0 = b"\x84s)\xf0\x82\xf4.\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    tuple_0 = ()
    bytes_0 = b"~N\xf8\x95x_9\x11\xb1s\xbc\x9b\xf8"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    float_0 = 30.51
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    complex_0 = -2693.19 + 1040.6383j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    complex_0 = 617.6262 + 2289j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    int_0 = 429
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    int_0 = -1251
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    none_type_0 = None
    str_0 = "*{D?d@\t~F'*O-xDP$Gcx"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    float_0 = -3331.491743
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    float_0 = -315.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    int_0 = -1238
    module_0.get_new_command(int_0, int_0)


def test_case_5443():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5444():
    none_type_0 = None
    bytes_0 = b"Fir\xd6\xed\xce\xf8\x8f.r\x96\xbb\xdbh@\xb3\xf1"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    float_0 = -2271.551872
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    str_0 = "[Q9\n7d'/A)F5[y"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    bytes_0 = b"\xff'\xc3k\x92\x8ck\xa10\xfd8\xf7\x991\x88>\x9eL\x01"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    float_0 = -117.352
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    int_0 = -5364
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    str_0 = "7n)rGrNtEa\x0b`O5`wd+v"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    float_0 = 1207.46862
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    complex_0 = 2672.7157 + 2666.96j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    int_0 = -1886
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_5455():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5456():
    int_0 = 463
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    bytes_0 = b" \xc1\xb0\xd2\x90\x10G?\x86\x9589\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    str_0 = "8}E<}ZG'!(D<#%7a!V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    bytes_0 = b"w\x8d?B\x1b\x02\xc5\x96u\x9b\x81\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    str_0 = "puVpRSCfus2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    str_0 = "\nnt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    float_0 = -12.6628
    list_0 = []
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    bytes_0 = b"\xff\x16Aj~\x98=\xb2\x18SF\xa3i\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    str_0 = "VfSa$T8@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    complex_0 = -2066.424 - 332j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    complex_0 = -1660.767933 - 1318.8665j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    complex_0 = 2313.3 + 95.22849j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    bytes_0 = b"\xb8)}UT8\xf7\xd8\\\xbdJ\xd9\xb6\xcf\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    str_0 = ""
    float_0 = -963.463103
    tuple_0 = (str_0, float_0)
    bytes_0 = b"6jv\xaa}\x01\x88\xf5K\x00"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    str_0 = " F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    bytes_0 = b"q\xd8K;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    float_0 = 4325.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    bytes_0 = b"]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    int_0 = 3440
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    complex_0 = -723 - 1468.491j
    list_0 = [complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    bytes_0 = b"\xae_=\t\xc1\xa9q9^\xecq\xa9\x811\xa6r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    bytes_0 = b"_?\xa0L\xa9x\x13\xe1\x00]#\xe8^["
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    list_0 = []
    str_0 = ",*NK}Dh"
    bool_0 = False
    dict_0 = {str_0: list_0, str_0: bool_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    bytes_0 = b"\xeaZv\x05\x89^\xe4r"
    set_0 = {bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    str_0 = ",y.UC}>G'G@1VA7kz#v"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    float_0 = 4383.01
    str_0 = "\\hu(./#\nxg.ImW{(~l`#"
    list_0 = [float_0, float_0, str_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    object_0 = module_1.object()
    str_0 = ")z*#HQ8mE\n"
    dict_0 = {object_0: object_0, object_0: str_0, object_0: str_0, object_0: object_0}
    bytes_0 = b"\xc0H\x97Xb"
    tuple_0 = (dict_0, bytes_0, dict_0, dict_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    int_0 = -143
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    int_0 = 561
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    float_0 = -254.32638
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    int_0 = -1907
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    complex_0 = 808.905 + 1873.5046j
    module_0.match(complex_0, complex_0)


def test_case_5491():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5492():
    int_0 = 582
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    str_0 = '"}vF@c'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    int_0 = -1670
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    str_0 = ">s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    int_0 = 694
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    str_0 = "4?l8_*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    int_0 = -227
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    complex_0 = -2048.84 + 16.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    bytes_0 = b"U\xae\x90\x1dY4\xbf2\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    float_0 = -1165.9129
    list_0 = []
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    str_0 = "!8|7Y[AK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    str_0 = "lT>,|HZ#\\E4*kz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    str_0 = "^h"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    int_0 = -3006
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    int_0 = -923
    dict_0 = {int_0: int_0}
    set_0 = set()
    tuple_0 = (dict_0, dict_0, set_0)
    list_0 = [tuple_0, dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    float_0 = 165.2023
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    float_0 = 610.792572
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1, bool_0: bool_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    complex_0 = -4095.657 - 523.48j
    bool_0 = True
    tuple_0 = (complex_0, complex_0, complex_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_5514():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5515():
    float_0 = 1743.58
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    str_0 = "\\!n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    str_0 = "cO\\w KQ\nW!E"
    int_0 = -1280
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    str_0 = "f$@q`hMv%=-kk%ugU"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    bool_0 = True
    list_0 = []
    tuple_0 = (bool_0, list_0)
    dict_0 = {}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    int_0 = -2434
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    float_0 = -2694.89
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    str_0 = "'3it7]FE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = True
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    bytes_0 = b"\xc1\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)
