# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import cargo as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b".j\x8b\x15\xe2"
    var_0 = module_0.get_new_command(bytes_0, bytes_0)
    assert var_0 == "cargo build"
    none_type_0 = None
    var_1 = module_0.get_new_command(none_type_0, none_type_0)
    assert var_1 == "cargo build"
    bool_0 = False
    var_2 = module_0.get_new_command(bool_0, bool_0)
    assert var_2 == "cargo build"
    var_3 = module_0.get_new_command(none_type_0, none_type_0)
    assert var_3 == "cargo build"
    int_0 = -909
    var_4 = module_0.get_new_command(var_2, bool_0)
    assert var_4 == "cargo build"
    float_0 = -56.1
    var_5 = module_0.get_new_command(var_4, float_0)
    assert var_5 == "cargo build"
    var_6 = module_0.get_new_command(none_type_0, int_0)
    assert var_6 == "cargo build"
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    object_0 = module_1.object()
    str_0 = "N4EzuT"
    none_type_0 = None
    var_0 = module_0.get_new_command(none_type_0, none_type_0)
    assert var_0 == "cargo build"
    var_1 = module_0.get_new_command(str_0, none_type_0)
    assert var_1 == "cargo build"
    int_0 = 3134
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = -2411 + 2215.54969j
    none_type_0 = None
    var_0 = module_0.get_new_command(none_type_0, complex_0)
    assert var_0 == "cargo build"
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    var_0 = module_0.get_new_command(bool_0, bool_0)
    assert var_0 == "cargo build"
    var_1 = module_0.get_new_command(var_0, bool_0)
    assert var_1 == "cargo build"
    none_type_0 = None
    module_0.match(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "yJQ!~-"
    var_0 = module_0.get_new_command(str_0, str_0)
    assert var_0 == "cargo build"
    str_1 = "@"
    list_0 = [str_1, str_1]
    list_1 = [list_0]
    var_1 = module_0.get_new_command(list_1, list_0)
    assert var_1 == "cargo build"
    bool_0 = False
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    var_0 = module_0.get_new_command(bool_0, bool_0)
    assert var_0 == "cargo build"
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    module_0.match(bool_0, bool_0)
