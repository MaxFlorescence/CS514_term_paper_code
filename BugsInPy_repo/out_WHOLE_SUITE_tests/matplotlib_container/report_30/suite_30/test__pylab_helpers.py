# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import _pylab_helpers as module_0


def test_case_0():
    gcf_0 = module_0.Gcf()
    assert (
        f"{type(module_0.Gcf.get_fig_manager).__module__}.{type(module_0.Gcf.get_fig_manager).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.destroy).__module__}.{type(module_0.Gcf.destroy).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.destroy_fig).__module__}.{type(module_0.Gcf.destroy_fig).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.destroy_all).__module__}.{type(module_0.Gcf.destroy_all).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.has_fignum).__module__}.{type(module_0.Gcf.has_fignum).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.get_all_fig_managers).__module__}.{type(module_0.Gcf.get_all_fig_managers).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.get_num_fig_managers).__module__}.{type(module_0.Gcf.get_num_fig_managers).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.get_active).__module__}.{type(module_0.Gcf.get_active).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.set_active).__module__}.{type(module_0.Gcf.set_active).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.draw_all).__module__}.{type(module_0.Gcf.draw_all).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.Gcf(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "es[Bjlu.g'%FpY"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.Gcf(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.Gcf(*bool_0)


def test_case_4():
    gcf_0 = module_0.Gcf()
    assert (
        f"{type(module_0.Gcf.get_fig_manager).__module__}.{type(module_0.Gcf.get_fig_manager).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.destroy).__module__}.{type(module_0.Gcf.destroy).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.destroy_fig).__module__}.{type(module_0.Gcf.destroy_fig).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.destroy_all).__module__}.{type(module_0.Gcf.destroy_all).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.has_fignum).__module__}.{type(module_0.Gcf.has_fignum).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.get_all_fig_managers).__module__}.{type(module_0.Gcf.get_all_fig_managers).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.get_num_fig_managers).__module__}.{type(module_0.Gcf.get_num_fig_managers).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.get_active).__module__}.{type(module_0.Gcf.get_active).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.set_active).__module__}.{type(module_0.Gcf.set_active).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.draw_all).__module__}.{type(module_0.Gcf.draw_all).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "nMm]hu"
    module_0.Gcf(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    gcf_0 = module_0.Gcf(*list_0)
    assert (
        f"{type(module_0.Gcf.get_fig_manager).__module__}.{type(module_0.Gcf.get_fig_manager).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.destroy).__module__}.{type(module_0.Gcf.destroy).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.destroy_fig).__module__}.{type(module_0.Gcf.destroy_fig).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.destroy_all).__module__}.{type(module_0.Gcf.destroy_all).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.has_fignum).__module__}.{type(module_0.Gcf.has_fignum).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.get_all_fig_managers).__module__}.{type(module_0.Gcf.get_all_fig_managers).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.get_num_fig_managers).__module__}.{type(module_0.Gcf.get_num_fig_managers).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.get_active).__module__}.{type(module_0.Gcf.get_active).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.set_active).__module__}.{type(module_0.Gcf.set_active).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Gcf.draw_all).__module__}.{type(module_0.Gcf.draw_all).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    gcf_1 = module_0.Gcf()
    module_0.Gcf(*none_type_0)
