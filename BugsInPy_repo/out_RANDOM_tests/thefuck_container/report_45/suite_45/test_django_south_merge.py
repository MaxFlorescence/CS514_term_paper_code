# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import django_south_merge as module_0
import builtins as module_1


def test_case_0():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 1006
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -1402
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    complex_0 = 5190.4 - 2490.573j
    int_0 = 310
    module_0.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    set_0 = set()
    bool_0 = True
    dict_0 = {}
    tuple_0 = (set_0, set_0, bool_0, dict_0)
    list_0 = [tuple_0, bool_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    bytes_0 = b"\xf2\xf5\xe9j\xba\xabi/\xb5%\xf7\x96\xb0\xb7\xc0'"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '_D=r)",z'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    float_0 = 566.948
    set_0 = {float_0, float_0, float_0}
    dict_0 = {}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bytes_0 = b"\x9e5(\xe7.\xe8\xb6"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = '"\t\tI'
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    complex_0 = -1877.53852 - 341.541546j
    str_0 = "PmFj./"
    bool_0 = False
    tuple_0 = (complex_0, str_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    int_0 = -773
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "guVY@ dUOm|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_28():
    pass


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    int_0 = 297
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "Zfn@+7q*l3Op\r\x0c$J>S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    int_0 = -4263
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, dict_0, int_0, int_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    bytes_0 = b"\x9c\xdcKi\xceW\x10\x89\xe1\xd6\xa0\xb5\x87\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = '"6'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = "[\n<udo/u3z~"
    module_0.get_new_command(str_0, str_0)


def test_case_37():
    pass


@pytest.mark.xfail(strict=True)
def test_case_38():
    int_0 = 138
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    float_0 = 56.0975
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = "']\tKle.XoNwCZrB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    float_0 = 3226.07
    list_0 = [float_0]
    complex_0 = 2489.615 + 3384.6987j
    bool_0 = False
    tuple_0 = (float_0, list_0, complex_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    float_0 = 4471.0347
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    complex_0 = -2067.7 + 4293.427463j
    list_0 = [complex_0, complex_0, complex_0]
    str_0 = "5H\nw#ABJeW|\x0b-"
    str_1 = "%AaWC"
    bool_0 = False
    dict_0 = {str_0: complex_0, str_1: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    int_0 = 638
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    int_0 = -861
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    bytes_0 = b"\\\x9cP5G\xce\x9e;NKP\xee\x82f"
    dict_0 = {bytes_0: bytes_0}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    int_0 = -2419
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    float_0 = -1047.93
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    float_0 = 1717.209
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    bytes_0 = b"\xdex\xa1\xc4\x03\xd11\xe5\xb0`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    str_0 = 'bDV*A-"aoc\t\r!<tx5j'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    str_0 = "sSi\x0cY \nY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    int_0 = -517
    float_0 = 3071.643
    dict_0 = {int_0: int_0, float_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    bytes_0 = b"!\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    str_0 = "fT["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    bytes_0 = b"\x18*\xdf\x87H\xb9\x12\xba\x06\xefQ\xa8X\xff/\xd0<4"
    str_0 = "z#g\rR,g"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    int_0 = 863
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    bytes_0 = b"\xa7\x0e]\xf2\xef\r`v\xae\xf3+\xd0\xcdb]\xc5"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    complex_0 = -2694.22 + 1880j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    int_0 = 1110
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_66():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    bytes_0 = b"n\x1cP\x90(\xb6 \x92\x82^\xd65\xc8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    bytes_0 = b"~\xb6\xa3\xbcGrR9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    int_0 = 3790
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    str_0 = "\x0cZ'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    bytes_0 = b"wL\x83\xbc\xc7\x81u\x98\xcc\x91;W'\xde}"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    str_0 = "gawpuVx+VLCqVa`T|9"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    int_0 = 2175
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    int_0 = 2687
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    str_0 = "[H{L6D;a'WUEM6"
    complex_0 = 2524.01 + 1412.8j
    module_0.get_new_command(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    str_0 = "\rAzt}CBa"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    str_0 = "e<<M }QU]YyjI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    str_0 = 'nLm)){|"*{a\n'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    int_0 = -2459
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    str_0 = "b[|?1\x0cQk4\nZ\n\r\x0cJ(,"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    float_0 = -3177.868259
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    bytes_0 = b"W\xb3\x19G\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    str_0 = "8\x0byb>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    float_0 = 2705.0
    dict_0 = {float_0: float_0}
    int_0 = -2289
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    complex_0 = -2456 + 2983.0226j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    str_0 = "e65"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_94():
    pass


@pytest.mark.xfail(strict=True)
def test_case_95():
    int_0 = 1762
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    complex_0 = 1138.96 - 920.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    str_0 = "Lj+o!{8C"
    module_0.get_new_command(str_0, str_0)


def test_case_99():
    pass


@pytest.mark.xfail(strict=True)
def test_case_100():
    int_0 = 293
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    float_0 = -2448.0
    list_0 = [float_0, float_0]
    list_1 = [list_0, list_0, list_0]
    bool_0 = False
    tuple_0 = (list_1, bool_0)
    module_0.match(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_102():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    module_0.get_new_command(object_0, dict_0)


def test_case_105():
    pass


@pytest.mark.xfail(strict=True)
def test_case_106():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    int_0 = 289
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    str_0 = "x.90IF#P\x0bmF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    str_0 = "~uX@gpJo1N!3A|d0"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_111():
    pass


@pytest.mark.xfail(strict=True)
def test_case_112():
    bytes_0 = b"\x05\\@C^\xb1\x15\x8e\x14\xcf\x8d\xdb\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    int_0 = -1552
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    bytes_0 = b"=w\xaf\xf7\xcdh\x99b\xdd\xd2\x8e\x98e\r\xbb1="
    float_0 = -1369.872
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    bytes_0 = b"\xf3\x89=\x0cW\xe1\x87J+L\x165\xda3"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_119():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_120():
    pass


@pytest.mark.xfail(strict=True)
def test_case_121():
    float_0 = 882.2085
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    str_0 = "mzT4H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    bytes_0 = b"\xc4\x19\xb1$[\xb3\xa3\x91\x9b\xbfI'+H]k"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    int_0 = 1369
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    int_0 = -315
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    str_0 = "f/gcXuo\x0b',"
    bool_0 = True
    tuple_0 = (str_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    str_0 = "?mxSL]\nA"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    none_type_0 = None
    list_0 = []
    bytes_0 = b"'\x1b\xb2:\x80 X\xcc\xe8h\xea}\xd3d\x9d\x08\xfd\xa3\x7f"
    tuple_0 = (list_0, bytes_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    float_0 = 3080.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    str_0 = "]"
    tuple_0 = (str_0,)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    none_type_0 = None
    str_0 = "nyx <N#+fL{#7"
    tuple_0 = (str_0,)
    int_0 = -2032
    tuple_1 = (tuple_0, str_0, int_0)
    module_0.get_new_command(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_134():
    str_0 = " !*zmj`Wi~gQ]H>R\r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    bytes_0 = b"\x9d\x8f\xbdr\xcfZ\x94\xdb\xce'\x8b\x1b"
    complex_0 = 1084.979 + 362.3j
    module_0.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    float_0 = -1523.51202
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    int_0 = -368
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    int_0 = 702
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    str_0 = "<k[Ru}52ebG"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    str_0 = "%Pgu\n"
    module_0.get_new_command(str_0, str_0)


def test_case_143():
    pass


@pytest.mark.xfail(strict=True)
def test_case_144():
    int_0 = 351
    str_0 = "0r^<K/=5/*\t:"
    tuple_0 = (int_0, int_0, str_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    str_0 = "/E*`ll^DMg],\\j#B"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_146():
    pass


@pytest.mark.xfail(strict=True)
def test_case_147():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_1}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    float_0 = -1504.81238
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    bytes_0 = b"\xfaA\x91Y\x8c\x8d\xc2\xecr\x9b\x98v"
    bytes_1 = b"\xe5"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_150():
    bytes_0 = b"=w"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    complex_0 = -0.8 - 43.08j
    module_0.match(complex_0, complex_0)


def test_case_153():
    pass


@pytest.mark.xfail(strict=True)
def test_case_154():
    int_0 = -1113
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    int_0 = 1963
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    list_0 = [tuple_0, tuple_0]
    list_1 = [bool_0, tuple_0, list_0]
    list_2 = [list_0, list_1]
    module_0.match(list_2, list_1)


@pytest.mark.xfail(strict=True)
def test_case_157():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    complex_0 = 1413.957 - 3977.87j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    str_0 = "05w\x0cpxtY=nj<"
    int_0 = 2333
    tuple_0 = (str_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    bytes_0 = b'\x93\xb6\x19u \xfe\xda\x92\xe04"v:o\xe3\x95\x96^\x1b'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    str_0 = "7{6Hp^%mNGl:\rQ4ZG4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    bytes_0 = b"\xe2\x81\x92\x8c\x81_\xa7\x82\xbfW\xf0\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    float_0 = -1698.900118
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    bytes_0 = b"\xf6G8p\xb6\xa5\xeeU\xb9`\xfe\xcbM\xec\xb5\xef\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    bytes_0 = b"(AXC"
    str_0 = "`|udM~[X"
    bytes_1 = b"\xb9Vl\\y\xd7&\xb8j\x13Z\xe7\x1c\x84\x08\xa9\x08p\xfc\xf0"
    list_0 = [bytes_0, str_0, str_0, bytes_1]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    str_0 = "0e!MVI-6V5~mb>m>M?"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, str_0)


def test_case_169():
    pass


@pytest.mark.xfail(strict=True)
def test_case_170():
    str_0 = "a,OES<"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    int_0 = -337
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    int_0 = 3350
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    int_0 = -927
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    list_0 = []
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    float_0 = 2345.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    bool_0 = True
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    complex_0 = -2171.2 + 2434.098j
    bool_0 = False
    str_0 = "`:P0$P_pif`;}Ck*<`Uy"
    tuple_0 = (complex_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    str_0 = "twC[)"
    module_0.match(str_0, str_0)


def test_case_181():
    pass


@pytest.mark.xfail(strict=True)
def test_case_182():
    int_0 = 1910
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    int_0 = 190
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    str_0 = "b$TY{6H(u)a=_^LUKZ"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    bytes_0 = b"'a<\x9e.\xc6\x86\xde\xe1\xea0\xc0Z\x85h\xed\xda"
    str_0 = ":J$WO>"
    list_0 = []
    tuple_0 = (bytes_0, str_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    int_0 = -1404
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    float_0 = 1620.5
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    float_0 = -684.0
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    int_0 = -1146
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    int_0 = 791
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    complex_0 = -83.64 - 3966j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    bytes_0 = b"\xd3\x00#\xb6o9\x9f\xd9\x03e\x0cP"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    bool_0 = False
    bytes_0 = b"`b\xf9"
    int_0 = -3591
    tuple_0 = (bytes_0, bytes_0, bool_0, int_0)
    set_0 = {bool_0, bool_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    bytes_0 = b"G\x11\x82\x17\x06\xd9x\x0f\xe7H\xa3\x8b\x91l\xce\x01\xf0\x12("
    module_0.match(bytes_0, bytes_0)


def test_case_197():
    pass


@pytest.mark.xfail(strict=True)
def test_case_198():
    int_0 = 1973
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    bytes_0 = b"\xa1\x05\xa6c\x92\x83\x07\x14\x97m"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    bytes_0 = b"w.s\xd3\xc3\x99a\xaet\x7f?\xe7?)v\x95\xb0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    float_0 = 3522.049364
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    str_0 = "72R=b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    int_0 = -1216
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    float_0 = 2034.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    str_0 = "_H5C\rkn6@JRR0}!QE"
    module_0.match(str_0, str_0)


def test_case_208():
    pass


@pytest.mark.xfail(strict=True)
def test_case_209():
    complex_0 = 1860.901 - 2470.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    bytes_0 = b"\xd0;u\xd1d\x82\xe4"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    str_0 = "8<k;~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    float_0 = 973.4034
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    float_0 = 304.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bytes_0 = b"\x01\x9d\\&\xc6\xe9\x1dL<\xc5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    int_0 = -1401
    list_0 = [int_0]
    tuple_0 = ()
    set_0 = {int_0, int_0}
    tuple_1 = (list_0, list_0, tuple_0, set_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    dict_0 = {}
    str_0 = '"EC'
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    str_0 = "L|4$d-O ='G*TY\x0c,"
    str_1 = "lUC5\x0b"
    str_2 = "5i&)HNNK\x0c&swgh\x0c\t"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    bytes_0 = b"C(\x0c4'\x98\x19\xc7\x9cEQ\xef\xead\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_220():
    pass


@pytest.mark.xfail(strict=True)
def test_case_221():
    complex_0 = -2771.76 - 311.65j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    none_type_0 = None
    float_0 = 457.952383
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    int_0 = 2629
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    str_0 = "&[w)YlE!7=1;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    float_0 = -1869.38265
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    bytes_0 = b"\x04*\xfc\x12\x824A\xdb2\x16\xe6$\xf2\xf2~"
    bytes_1 = b"1\xedR\x94\rT\n\xa8O\xd6I$\xef\x14sY\xa0"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_231():
    float_0 = -1455.1588
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    bytes_0 = b"\x05\xfaI\x119\x96\xcc\x16\xcau"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    bytes_0 = b"Y\x86\xc2\xb4X\x17Y\x06\xd0\xcd\x1f\xf4\xa2\xc3b\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    int_0 = 352
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    bytes_0 = b"\x89\xbcU2\x8f\x8d\xc2\xe1\x17\xec*\xc7Lc/t,\x1d"
    bool_0 = False
    tuple_0 = (bool_0,)
    float_0 = 626.499
    tuple_1 = (bytes_0, tuple_0, bool_0, float_0)
    module_1.object(*tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_238():
    str_0 = ";(\r|94;~EM\t1\x0cN^y"
    tuple_0 = ()
    bool_0 = True
    bytes_0 = b'\xeb\xea"\xf8A\x9d\xa1\xe7'
    tuple_1 = (str_0, tuple_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_1, str_0)


def test_case_239():
    pass


@pytest.mark.xfail(strict=True)
def test_case_240():
    float_0 = -112.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    int_0 = 2060
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    int_0 = 3008
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    float_0 = -1685.105176
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    int_0 = -621
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    str_0 = '"<\\mHLv'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    float_0 = 2388.714951
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    bytes_0 = b".\x9e\xab\x96\xe3\xa6SLp\x99\x980"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    bytes_0 = b"\x97\xddh\xe9\x03Q\x117';"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    bytes_0 = b"\x83'\xf2\x01\x96\xff\xb3:\xd7"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    str_0 = "uG[[AZ:\tF\x0b\\N;"
    dict_0 = {str_0: str_0, str_0: str_0}
    dict_1 = {str_0: dict_0, str_0: dict_0, str_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_253():
    str_0 = "|~7"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    int_0 = -299
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    str_0 = "%(Me=3&s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    str_0 = 'J.."\r\\m,Qn\x0cK$tf'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    str_0 = "?\nDyFi![H\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    int_0 = 879
    bool_0 = True
    bool_1 = True
    dict_0 = {int_0: bool_0, int_0: int_0, int_0: int_0, bool_1: bool_1}
    dict_1 = {bool_1: dict_0}
    module_0.get_new_command(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_259():
    bytes_0 = b"G/\xf4\x88\xa4M"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    int_0 = 1298
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, int_0, dict_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    str_0 = "R0A^\x0cZIg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    str_0 = "of)iU^(qX\x0c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    bytes_0 = b"\nC\x18\x12B\xdel,\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    complex_0 = -75.097 + 1148j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    bool_0 = True
    float_0 = -1407.0235
    tuple_0 = (bool_0, float_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    str_0 = "8dU"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    bytes_0 = b"\x84\x08\x84\x12h.K+\x8c}+e\x7f\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    int_0 = -1380
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    bytes_0 = b"\xe6\x03\xe8\xfe1MJB\x8d\xad"
    complex_0 = -4027.4 - 2019.06j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    str_0 = "bgf}\x0b39<G*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    int_0 = 556
    tuple_0 = (bool_0, list_0, int_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    bytes_0 = b"\na97."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    bytes_0 = b"\x89\xc2\xd4\xb3\xc7r\xee\xe99"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_275():
    pass


@pytest.mark.xfail(strict=True)
def test_case_276():
    float_0 = 2137.448847
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    int_0 = -3384
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    bytes_0 = b""
    int_0 = 1543
    tuple_0 = (bytes_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_279():
    pass


@pytest.mark.xfail(strict=True)
def test_case_280():
    str_0 = "[+'9.^u7\x0b\rACu.h\n"
    bytes_0 = b"w\x80\x11W(\xe5\x8f\xba\xe1\xdeC_\x05\xe0\xfb]\x0f\xbe\xa8\x07"
    list_0 = [str_0, str_0, bytes_0, str_0]
    tuple_0 = (str_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    str_0 = "V-h7-%f\\>J|,dq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    str_0 = ">3lSl(YdIhq*cG,]{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    float_0 = 6313.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [bool_0, set_0]
    tuple_0 = (bool_0, set_0, list_0)
    dict_0 = {bool_0: bool_0, bool_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_288():
    pass


@pytest.mark.xfail(strict=True)
def test_case_289():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    bytes_0 = b"\xf2\xd3\x17x_b\x990\x89\x13"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    int_0 = -1058
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    float_0 = -2264.2937
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    int_0 = -3773
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    str_0 = "--V\r=8x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    float_0 = 1497.3391
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    str_0 = 'W"b'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    int_0 = -2239
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    int_0 = 3599
    module_0.match(int_0, int_0)


def test_case_299():
    pass


@pytest.mark.xfail(strict=True)
def test_case_300():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    str_0 = "G\\gI1E*7ogKq <gr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    str_0 = "(_>.OxSJVs7_4X\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    int_0 = -571
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    complex_0 = -2272.8 - 2630.74487j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    float_0 = 2250.461769
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    float_0 = -2133.545
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    int_0 = 1658
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    str_0 = "ftQ[,vb%"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    dict_0 = {}
    complex_0 = 2962.099631 - 2929.72j
    bytes_0 = b"Hwk\xd2\xa2\xbb\xa8\xe6y\xf3\xe5\xb5\x8a["
    int_0 = 359
    tuple_0 = (dict_0, complex_0, bytes_0, int_0)
    bool_0 = True
    list_0 = [tuple_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    complex_0 = 1712.462 - 2820.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    int_0 = -333
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    int_0 = 418
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    float_0 = -1355.29207
    module_0.match(float_0, float_0)


def test_case_316():
    pass


@pytest.mark.xfail(strict=True)
def test_case_317():
    str_0 = "Zh()[G>?|!ks="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    str_0 = "fD9=n(\t1E}/@R"
    int_0 = -2012
    bool_0 = False
    tuple_0 = (str_0, int_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    float_0 = -863.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    str_0 = "$R~zi[\x0b$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    str_0 = "D)1zM$\x0bwu43"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    list_0 = []
    str_0 = ". w#eigMhVn:!/40W"
    str_1 = "&K@"
    str_2 = "R)4=VD\x0bl`$|WafYU:%"
    dict_0 = {str_0: list_0, str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    bytes_0 = b"\xeb8\xc9;l]o$\x8fv\xc1\n;ld\x04\xf0<[/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_1, bool_0}
    bytes_0 = b"f\xfc\xa1\xd6l\xb57\xae"
    tuple_0 = (bool_0, set_0, set_0, bytes_0)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_328():
    complex_0 = -2032.5341 - 1941.86268j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    int_0 = 483
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    none_type_0 = None
    int_0 = -1566
    module_0.match(none_type_0, int_0)


def test_case_331():
    pass


@pytest.mark.xfail(strict=True)
def test_case_332():
    str_0 = ')P"Q\\S*5R[|}'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    float_0 = 2259.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    bytes_0 = b"\xfab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    float_0 = 2680.89
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    bytes_0 = b"O\xa6\xe9\xa5n\x9c\xb6\xeb\xc5"
    complex_0 = 1357.980139 + 1675.193j
    module_0.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    bytes_0 = b"\x87,\xf9\x85\x14N\xbeYI\x19V\x08\xcf\xee\xfc\x9a\xc7\xc9\x12"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    str_0 = "7\n}AzI"
    none_type_0 = None
    str_1 = "xyM;]~Lv9w$'H4n8f7{6"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    str_0 = "[;6dx}Es#jofWp \\kHq"
    float_0 = 454.0
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    dict_0 = {str_0: str_0, str_0: str_0, tuple_0: tuple_0, float_0: tuple_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    str_0 = "hv|7r&D]I\t$))'Ay%0"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    str_0 = "<Op>eqxXu{)aA3"
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    bytes_0 = b"\x92\x95\tn"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    str_0 = "#_\r-\x0cU|\x0cs2J&i+<Dr*/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    bytes_0 = b'~\xecY#\xd7\xf8\x10"'
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    bytes_0 = b"\xd0\xd4\x02}\xf2\xd7"
    bytes_1 = b"\xca\xbb\xda"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_352():
    int_0 = 2215
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    bytes_0 = b"\xb3\x9b<\xd0\xbe\xc2o\x0es\xcf`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    float_0 = -2370.40163
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    none_type_0 = None
    module_1.object(**none_type_0)


def test_case_356():
    pass


@pytest.mark.xfail(strict=True)
def test_case_357():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_358():
    pass


@pytest.mark.xfail(strict=True)
def test_case_359():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    str_0 = "O-d\x0bOT"
    str_1 = "^T"
    dict_0 = {str_0: str_1, str_1: str_0, str_1: str_0}
    bytes_0 = b"d!E\xf1\xf3\xdb\x05\xd7"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    str_0 = "-"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    complex_0 = 1532 + 121.8j
    set_0 = {complex_0, complex_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    int_0 = -1381
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    int_0 = 3631
    tuple_0 = (int_0,)
    bool_0 = False
    tuple_1 = (int_0, tuple_0, bool_0)
    module_0.match(tuple_1, int_0)


def test_case_365():
    pass


@pytest.mark.xfail(strict=True)
def test_case_366():
    float_0 = -274.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    bytes_0 = b"8N%\xf1\xd3H\x0c> \xf5\xe1\xc1\xa4\xc1"
    list_0 = [bytes_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, bytes_0)


def test_case_368():
    pass


@pytest.mark.xfail(strict=True)
def test_case_369():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    int_0 = -215
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    bytes_0 = b"+\x08\x1f:\x83\xf7\x97\xeex\xf7C"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    str_0 = "c:|y\\K\tq^j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    bytes_0 = b"\x18\t\x07L\xb4\xc3\xc9[-\xc6\x9d)\xa5"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bytes_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    bool_0 = False
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    int_0 = -1292
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    str_0 = "f)<KdudxiK-"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    bytes_0 = b"\xf2\xeb\xc9\xe4\x1eD\xbc\x1fg\x0c\xba`"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    str_0 = "i\t?"
    int_0 = -1633
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    str_0 = "[.9P5&W"
    set_0 = {str_0}
    list_0 = [set_0, str_0]
    set_1 = set()
    module_0.get_new_command(list_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_382():
    float_0 = 620.49
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    bytes_0 = b"H\xd7\xb3\x1b\xe0\xb9\xb8\xc6\xec\xde\xd1\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    bool_0 = True
    list_0 = [bool_0]
    float_0 = -656.8901
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    str_0 = "\nf)YOt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    bytes_0 = b"\xd0\xb7~\x80\x94v"
    str_0 = "?A-w|xYY/"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    str_0 = "`TZ!*F1\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    str_0 = '7|Fm"1H ]o'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    bytes_0 = b"\xf0\x95o\x93e\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    str_0 = "5qayf0NXYV\\4"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_392():
    pass


def test_case_393():
    pass


@pytest.mark.xfail(strict=True)
def test_case_394():
    bytes_0 = b"\x15n\xa5\xcd\xc0C\x18\x8f\x93\x94\xfc\xc4v\xfb\x1e\x027"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (dict_0, bytes_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    bytes_0 = b"\x01\x86"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    str_0 = "H"
    bytes_0 = b""
    tuple_0 = (str_0, str_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    int_0 = -679
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


def test_case_400():
    pass


@pytest.mark.xfail(strict=True)
def test_case_401():
    int_0 = 1985
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    set_0 = set()
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    float_0 = -513.313942
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    bytes_0 = b"\x1c\x88#\xa4\xa3)\xbf(rG]M\xc0\xd5\x13\x03\xe5\xd4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    complex_0 = 2063.848613 - 1430j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    str_0 = "f![gS|rx"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    str_0 = "DTifK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    bytes_0 = b"\x1f\xf4\x92\xa9\xaaJ\xde\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    bytes_0 = b"\x17i\xa3\xb3v\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    complex_0 = 2192.8738 - 4307.47224j
    module_0.get_new_command(complex_0, complex_0)


def test_case_411():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_412():
    float_0 = -1711.26
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0, tuple_0]
    module_0.match(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    list_0 = []
    str_0 = "md\\tu4+j~ij(|7._"
    tuple_0 = (list_0, str_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    bytes_0 = b"pq\xcfy,\xed\xfd1q\x8ca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    list_0 = [dict_0, dict_0, object_0]
    float_0 = 398.6
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    int_0 = 1989
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    int_0 = 3142
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    str_0 = "DREEvQf1\n05Zkkl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    bool_0 = False
    set_0 = set()
    tuple_0 = (set_0, set_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    str_0 = "VM~!F~#tTQ9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    int_0 = 2311
    bool_0 = False
    module_0.match(int_0, bool_0)


def test_case_422():
    pass


@pytest.mark.xfail(strict=True)
def test_case_423():
    bytes_0 = b"\xa4;\xc2"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_424():
    pass


def test_case_425():
    pass


@pytest.mark.xfail(strict=True)
def test_case_426():
    bool_0 = False
    float_0 = 1997.40348
    module_0.get_new_command(bool_0, float_0)


def test_case_427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_428():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    int_0 = -304
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    str_0 = ".^dR 3sCkiDJ\x0c\\[_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    float_0 = -3362.0
    bytes_0 = b"b1\xacc\xd1\xf6\r^\xa4Y\xdd\xea"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    str_0 = "$tP_GuFLRk%R5<:L%F"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    str_0 = "O1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    str_0 = "M"
    float_0 = -1185.682
    dict_0 = {float_0: str_0}
    list_0 = [float_0]
    tuple_0 = (str_0, float_0, dict_0, list_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


def test_case_436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_437():
    str_0 = "~>zgOeHY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    int_0 = -2433
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    int_0 = -90
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    str_0 = ""
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    int_0 = -2177
    module_0.get_new_command(int_0, int_0)


def test_case_443():
    pass


@pytest.mark.xfail(strict=True)
def test_case_444():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    bytes_0 = b"\x94s\xebT\xf5\xdf\xf0j"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    str_0 = "(Gc*"
    str_1 = "d'# F;!`"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    str_0 = "\x0c^-P{Xs\x0c6x.q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    str_0 = "^dvD9FIX`"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    float_0 = -1352.351238
    set_0 = {float_0, float_0}
    list_0 = [float_0, float_0, float_0, set_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    bool_0 = False
    int_0 = -1998
    module_0.match(bool_0, int_0)


def test_case_454():
    pass


@pytest.mark.xfail(strict=True)
def test_case_455():
    bytes_0 = b"8\xb3\x8a\xba\xd3bC\x90"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    str_0 = "Z+]J>*o*|PX><MA"
    bytes_0 = b"\xe3\xc3\x96j\xd7\xbf\x8c"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    none_type_0 = None
    str_0 = "(l}6 ZlI+EB@1\n2H0"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    float_0 = 2077.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    int_0 = -1584
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    int_0 = -1239
    set_0 = {int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    bytes_0 = b"\x1f@\xeb\x15f\x00O\x10h}\x80\xe94c%"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    bytes_0 = b"\xcf\xb0\xd7\x06\xde?Z\x82n\xb9\x8e\t\x94E\x85<"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    str_0 = "zBiVf 71pkjSS?"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    str_0 = "w~"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    int_0 = 1025
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    complex_0 = 2339.23 - 849j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    bytes_0 = b"r!\xeeD\xaeA)\xf6\x13g"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    bytes_0 = b"\xb85\xb8\x19\xdc=\xd4\xdeS8[\x12\xc8\x08{=\x16"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    str_0 = "O\rt(NwUiQ\x0c\nEj+[1&X6"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    bytes_0 = b"\xc1\xfe\r\xd1\xa7u\xde\x0c\tPm\xd6\x018\xae1\xb0"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    str_0 = "gE\rZo)10"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    float_0 = 2396.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    bytes_0 = b"%\x02E1\x1b\xfao\xb0\xc0\xfc\x91\xae\x82\xe0\xec\x86\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    str_0 = "6 /q\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    bytes_0 = b"\x8b\x05M2\x12\x9a\xfa\x01\xf7\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    str_0 = 'u=\x0bYz<"R N&v\x0b36# '
    set_0 = {str_0}
    list_0 = [set_0, str_0, str_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


def test_case_478():
    pass


@pytest.mark.xfail(strict=True)
def test_case_479():
    complex_0 = -2768.48089 - 1923.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    str_0 = '>14jqi+V4" '
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    bytes_0 = b"'\xd8\xb5\xd9f\xdf\xe1\xc4\xa8\x1a\xc2\x18x\xd2\xd4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    bytes_0 = b"v(/\x04\xb1r\x0f\xc3\xfb\xc5\x9bu\xa6D4\xa2k\x8e\xf6%"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    int_0 = 1043
    set_0 = {int_0, int_0, int_0}
    str_0 = "n4+W@H0oYD"
    bool_0 = False
    tuple_0 = (set_0, str_0, bool_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    str_0 = "4o]1W51\x0b>Ed4uw6h\\%i"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    bytes_0 = b"\x19\xf9d\xaf\x0e\xb90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    bytes_0 = b"\x7f\x9bQ\x9bj\x90v\xfai3Y\xfbV\x82\xe7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (dict_0, dict_0, bytes_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_488():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    str_0 = "R9evX|u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    int_0 = 2047
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    float_0 = 2966.9759
    bytes_0 = b"~\x84i\xc2\xd7I\xa36"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    str_0 = "sK3O_Lfv"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, list_0]
    module_1.object(*list_1, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    str_0 = "lV;.0VQ6/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    bytes_0 = b"\xaa\x94\x9fs\xe0\x8f\xa8\xb34|\xbaU\x9b\x0e:\x90l\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    str_0 = "Q4M\r2?\x0cy(o6}"
    set_0 = {str_0}
    tuple_0 = (str_0, set_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    bytes_0 = b"\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    float_0 = -598.59443
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    int_0 = 823
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    bytes_0 = b"\x9b\xe0;E\x88\xde\xd8k\xb8\xba\x87\xea)\xefbDu\xdd"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    int_0 = 353
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    float_0 = -1998.627
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    str_0 = '6]eLO.X"X2>A?<\x0bj=1_u'
    bytes_0 = b"\xb5\xf8H/Z\xe4\xb8i\x1fX\n"
    tuple_0 = ()
    tuple_1 = (str_0, bytes_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    int_0 = -2782
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    none_type_0 = None
    bytes_0 = b">\xeb\x08\x0e\x82\x8c\x9b="
    list_0 = [bytes_0, bytes_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    int_0 = 2335
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    bool_0 = False
    int_0 = 2904
    list_0 = [int_0, int_0, int_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    str_0 = "Nus*>d-8jN"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    int_0 = -938
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    str_0 = "(k)BQrt\n8%"
    bool_0 = True
    dict_0 = {}
    tuple_0 = (str_0, bool_0, dict_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    float_0 = 172.109
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    bool_0 = False
    list_0 = []
    bool_1 = True
    tuple_0 = (bool_0, list_0, bool_1, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    int_0 = -3151
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    bytes_0 = b"xD\xd8DJ+\xe2\x18\xadgRY\x90\xa34\xe0\xde\xdf\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    str_0 = "bMX/ihs8:QAO4%:hq\t+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_520():
    pass


@pytest.mark.xfail(strict=True)
def test_case_521():
    str_0 = "]1GZYys[~3F~jZC9}~P}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    str_0 = ")4"
    set_0 = {str_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    float_0 = -1808.9406
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    int_0 = 1062
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    int_0 = 1065
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    bytes_0 = b"hXT\xbb\\Z\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    int_0 = 1701
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    int_0 = 430
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    str_0 = "\\1?'&FQ\t:eXSy"
    none_type_0 = None
    str_1 = "y"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    bytes_0 = b"\x17\xe7*\xa2v)E1\x05\x81\xcf\x11\xeeE\xbe\x1d_w"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    int_0 = -1727
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    none_type_0 = None
    bytes_0 = b"p=\xbd\xfb"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    bytes_0 = b"\x0eS\xb3\x97\xaa\xd7R\x91\xd2\x99\xb6\x968\xd5\x90*J"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0}
    tuple_0 = (set_0, object_0, set_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    bytes_0 = b"1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    int_0 = -2654
    module_0.get_new_command(int_0, int_0)


def test_case_537():
    pass


@pytest.mark.xfail(strict=True)
def test_case_538():
    float_0 = -1071.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    int_0 = -318
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    bytes_0 = b"\xc9\x08\xf1\xdb\x83\xa2\x93f\xcf\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    float_0 = -1531.632555
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    bytes_0 = b"\x85\xd1\xed\xfe"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    int_0 = -2748
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    bytes_0 = b"P\x00\x806\xb3"
    int_0 = -3058
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    none_type_0 = None
    bytes_0 = b"\xb4\x80\xc8\x05\xee\x80\xb9\x8f\xaaC\xc5sx\x03\xa5\xbc\xb8\xe0"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    str_0 = "b\tvW?^3'GA4@S_8S(<("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    str_0 = "1\t+X~\\7\r?>8\\b\x0b"
    module_0.get_new_command(str_0, str_0)


def test_case_550():
    pass


@pytest.mark.xfail(strict=True)
def test_case_551():
    bool_0 = True
    str_0 = "0y2\x0cq'{5QCWM57"
    dict_0 = {str_0: bool_0}
    int_0 = 500
    tuple_0 = (bool_0, str_0, dict_0, int_0)
    bool_1 = False
    str_1 = "c7Q'"
    set_0 = {bool_1, bool_1, str_1, str_1}
    str_2 = "RmCOIqGdd~5\x0b\tq"
    tuple_1 = (tuple_0, set_0, bool_1, str_2)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    bytes_0 = b"\xd6FOk\x90"
    set_0 = set()
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    bytes_0 = b"1j%6\xb9>i^\x89"
    module_0.match(bytes_0, bytes_0)


def test_case_554():
    pass


@pytest.mark.xfail(strict=True)
def test_case_555():
    bytes_0 = b"\xb0\xf5\xb8\xc5\x9e\xbe\xb0\xc5"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    str_0 = "qa"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    str_0 = "/PSIj7f$(V"
    str_1 = "\n*CK-[-e|X"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_559():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    int_0 = -508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    int_0 = 1983
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    bytes_0 = b"\xaf\xd1\xfd;\xc3\n\xf2\x0e|\xea\xbe\xc9\xaat\x84\xefGF\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    bool_0 = True
    str_0 = "u^"
    list_0 = [bool_0]
    tuple_0 = (bool_0, bool_0, str_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    complex_0 = 552.4214 + 1929.060683j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    complex_0 = 654.991 - 467.635134j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    int_0 = 1260
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    bytes_0 = b"g\xe4\xae_.eS\x98\x99\x1b\xca9\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    bytes_0 = b"B\xef/vx\xc6t\x80\x82\x05B\xf8\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    float_0 = 2261.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    int_0 = 2248
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    bytes_0 = b"Zs\x83ZWB\x83\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    bytes_0 = b"\xf7\x82n\x16\x18\xd1,9\xad"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    bytes_0 = b"ZWi?\xbe\xbc\xdf\n,R"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    float_0 = 1470.0
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    int_0 = 967
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    bytes_0 = b'zO\xdc\xf5E"\xfe'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    str_0 = "u^BPuWW4>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    complex_0 = 628.558 - 2868.8789j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    str_0 = "WDTLp;R\r=dMcp\r9~8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_588():
    pass


def test_case_589():
    pass


@pytest.mark.xfail(strict=True)
def test_case_590():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    float_0 = -142.489
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b"\x1d\\H\xe1\x86B\xf0 V \x8b"
    bytes_1 = b"B?w\xd3\xfc1\x9f\xd49\x82t\x13"
    tuple_1 = (tuple_0, bool_0, bytes_0, bytes_1)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    dict_0 = {}
    int_0 = -1238
    bytes_0 = b'\xab"\xb8)\xf5'
    tuple_0 = (dict_0, int_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    int_0 = -477
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    bytes_0 = b"\xcd\xf6\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    str_0 = "E}s*\x0cK'-1QXU=&i4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    int_0 = -3055
    list_0 = []
    tuple_0 = (int_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    float_0 = -2288.3103
    dict_0 = {float_0: float_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    str_0 = 'W+";P\tkE\rYd18N'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    str_0 = "{b;S.dEY"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    float_0 = -2757.418
    dict_0 = {}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    int_0 = 2059
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    complex_0 = -102.73528 - 3219.24544j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    complex_0 = -2520.745 + 694.4597j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    bool_0 = True
    tuple_0 = (bool_0,)
    int_0 = 147
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    int_0 = -1386
    complex_0 = -1822.9 + 2870j
    tuple_0 = (int_0, complex_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    str_0 = ' "HynUrH)"J@mc~v\x0cH r'
    list_0 = [str_0]
    tuple_0 = (str_0, list_0)
    bytes_0 = b"\xda"
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    int_0 = 2233
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    set_0 = set()
    module_1.object(*set_0, **set_0)


def test_case_615():
    pass


@pytest.mark.xfail(strict=True)
def test_case_616():
    int_0 = -1346
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    complex_0 = 2488.66723 + 132j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    str_0 = "I\tH#l2r05mg6\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    int_0 = 3041
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0, int_0, dict_0]
    tuple_0 = (dict_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    float_0 = 4108.0
    float_1 = -385.6
    tuple_0 = (float_0, float_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    float_0 = 1953.0112
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    str_0 = "`N\rA\tTYkG4Y9!>>eV%\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    bytes_0 = b"\x0b1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    str_0 = "q9- vr!gOph+W^Y;LW"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    bool_0 = True
    int_0 = 437
    str_0 = "o."
    tuple_0 = (bool_0, int_0, str_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    str_0 = "l8gY0c9:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    str_0 = "s\x0b(L,c`f)&90s"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, tuple_0: tuple_0, str_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    int_0 = 1309
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    int_0 = 4757
    str_0 = "^Cl3\rp!u"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    str_0 = "!.AOdaGKSH~}p,Y'}"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    str_0 = "`S8XMs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    bool_0 = False
    bytes_0 = b"\xe1\x16$`\x16\xb1\x05\xb7\x94\\[\x03~\x7fG\x9e`\x85a\x8a"
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0}
    list_0 = [bytes_0, bytes_0, dict_0, dict_0]
    dict_1 = {bool_0: list_0, bytes_0: bytes_0, bool_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    bytes_0 = b'DE\xd9S\x06"\x00\xb4\xd8='
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    float_0 = 117.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    bytes_0 = b"Oxc\xf3\xe2\xca\xfc\xef@\xee\x9b\x87;X<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    float_0 = 18.4
    module_0.get_new_command(float_0, float_0)


def test_case_640():
    pass


@pytest.mark.xfail(strict=True)
def test_case_641():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    int_0 = -3127
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    bytes_0 = b"\x94\x94\xb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    bytes_0 = b"\xdb\xe9\xe7\xbc\xd9\xdb\xb4\xf8\x98Q0\x15r\xbdPV"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    float_0 = -1240.635259
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    int_0 = -1789
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    bytes_0 = b"\x960\xe0\xb7\xe6_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    str_0 = "/AWZVW{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    str_0 = "Dx]=N&.B"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_652():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, set_0, set_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    str_0 = "b4LedUg'G!d[H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    bytes_0 = b"\x98\x91\xfbV\xb9\x06\x15\xd4\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    int_0 = -1525
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    int_0 = -1291
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    bytes_0 = b"\xfbu\xd1\xe1\x99\x86\xed\xc7\xe4d\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    float_0 = -513.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    int_0 = 1945
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    str_0 = "s;HpO4NB?A_$"
    bool_0 = False
    set_0 = {str_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    int_0 = -543
    int_1 = 3193
    dict_0 = {int_0: int_0, int_1: int_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    str_0 = "S]s1\nf%y,B<C?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    int_0 = 2437
    module_0.match(int_0, int_0)


def test_case_664():
    pass


@pytest.mark.xfail(strict=True)
def test_case_665():
    none_type_0 = None
    str_0 = "%c5'\t}$"
    bytes_0 = b"\xdaT\x92F)\xfb\xa2\xf6w\xd0\xf5\xb4[\x04\xa9\x9c"
    dict_0 = {
        none_type_0: str_0,
        none_type_0: none_type_0,
        str_0: bytes_0,
        str_0: bytes_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    int_0 = -1969
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    int_0 = 107
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    int_0 = -990
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    int_0 = -387
    bytes_0 = b"\xe4\x04\xf2\xa3\x9a"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    float_0 = 409.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    str_0 = ".cN5 (~y"
    float_0 = -2668.0
    list_0 = [str_0, float_0, str_0, float_0]
    tuple_0 = (list_0, str_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    none_type_0 = None
    str_0 = ""
    str_1 = "rC\rY1ww"
    str_2 = "l>n3VV"
    str_3 = '"N5|s?tZ\t'
    set_0 = {str_3, none_type_0}
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_3: set_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    str_0 = "?px/~o:d @jU\tjo"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    float_0 = -4181.35924
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    str_0 = "V\\Ybfo0hbAR9+`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    complex_0 = -702.13 - 1688.26j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    bytes_0 = b"\x1bz\xd3\x07\xde&\n\xa6\x0f\xd4\x10u\xca\xfa\xdf"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0, bytes_0: bytes_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    str_0 = "1v\n[s\t&2H'vv4Ei9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    bytes_0 = b"\xd5\x8a)\xff|\xa8\x83'h_\xfe~\xdf\xcc\x88F\x92\xac\xbd"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    int_0 = -731
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    int_0 = 2283
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    int_0 = -1572
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_1, bool_0, bool_1, bool_0}
    tuple_0 = (set_0, bool_0)
    tuple_1 = (bool_0, bool_1, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    str_0 = "t0fRy%$_??b9 c)+<"
    str_1 = "J r&Tc"
    list_0 = [str_0, str_1, str_1, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    str_0 = "-\\'f"
    str_1 = "J\x0c"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    bytes_0 = b'j\xe1#\xfa\xab"'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    str_0 = 'qL|+j"1;r=`>H>N'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    str_0 = "!`hE8'0qeAH$Nm\nA1"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    float_0 = -1350.381317
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    bytes_0 = b"S"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    bytes_0 = b"g\xd7\x07l#\xc3{("
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, bytes_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    bool_0 = False
    bytes_0 = b"w+\x98\x1d\x0c}\xc2j"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0}
    list_0 = [dict_0, bool_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    bytes_0 = b"\x97\x1e\xb0\xb4\x98\x87\x97\xfe\x1b\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    complex_0 = 135.29327 - 3654j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    bytes_0 = b"\xe7\xae\xd3\xe9B\xe4!V\x88\x87c\xfa\xb8\x9a\xd3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    dict_0 = {}
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    str_0 = "*%^?'"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_701():
    pass


@pytest.mark.xfail(strict=True)
def test_case_702():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    float_0 = -2911.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    bytes_0 = b"\xcb4\xc2\xa3cw\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    bytes_0 = b"\x92\x8b\xbcq\x82y\xd8U"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    float_0 = 474.0231
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    bytes_0 = b"\xb8\x92\x8d\x9a\xfcj\xc1\xb6\xac\xd2F\xbb\xfdX\xc8\xbfT\x12\x86"
    module_0.match(bytes_0, bytes_0)


def test_case_710():
    pass


@pytest.mark.xfail(strict=True)
def test_case_711():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    float_0 = 953.89
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    complex_0 = -1779.3 + 2853j
    object_0 = module_1.object()
    module_0.match(complex_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    bytes_0 = b"I\x927\xdf\xd9\xff\xa0h1\x95Q\xb7M\xb3<."
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    str_0 = "["
    module_0.match(str_0, str_0)


def test_case_716():
    pass


@pytest.mark.xfail(strict=True)
def test_case_717():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    str_0 = "Wup!!$ZN\x0c)SKL>\x0b_3Drl"
    bool_0 = True
    tuple_0 = (str_0, str_0, bool_0)
    dict_0 = {tuple_0: str_0}
    float_0 = -248.45
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    bytes_0 = b"2\xe9\xf4\xce\xcfc\xfc\x00\xcc\xdd"
    list_0 = [bytes_0, bytes_0]
    dict_0 = {}
    set_0 = {bytes_0}
    tuple_0 = (list_0, list_0, dict_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    str_0 = "Wb&R$mApN|SWeh"
    module_0.get_new_command(str_0, str_0)


def test_case_721():
    pass


def test_case_722():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_723():
    bytes_0 = b"\x888}\xd0\xe5\x14\x05\x94\x02Jw\x1e \xf1\xc4z\xe8\x8d]\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    str_0 = "oyO+;m ^by/c\rv_T\x0b56"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    float_0 = 69.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    bytes_0 = b"|\xf3\xf5'\xad\xeb\xdf\xf1O\xd3\x18\xb9\xf5\xc4\x03\xe9\x9ex\x0c"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    str_0 = 'YE#B"W'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    list_0 = []
    int_0 = -713
    str_0 = "fAY1"
    str_1 = ":gZ{_/KepjQ56)uX]1L"
    tuple_0 = (list_0, int_0, str_0, str_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    str_0 = "+#ml[\\B0nmoa"
    module_0.get_new_command(str_0, str_0)


def test_case_733():
    pass


@pytest.mark.xfail(strict=True)
def test_case_734():
    bytes_0 = b"P\xab\xcc\x90\x8de\xc5\x99\x89\xea\xa7\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    float_0 = -6871.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    float_0 = 2315.663117
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    str_0 = "@7?RB.C~p'b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    str_0 = "z"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


def test_case_740():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_741():
    object_0 = module_1.object()
    float_0 = 1737.754
    int_0 = 2275
    set_0 = {float_0, int_0, int_0, object_0}
    tuple_0 = (object_0, float_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    int_0 = 1018
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    str_0 = "6Zv(;y|rw6@H&{C8>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    int_0 = 2574
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    int_0 = 1629
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    int_0 = -3875
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    str_0 = "|>,h,FtjN"
    str_1 = "^]$X19/V(t<\nBZ>Qy$:$"
    set_0 = {str_0, str_0, str_1}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    float_0 = -1051.9063
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    int_0 = 404
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    int_0 = -218
    list_0 = [int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    str_0 = "_0B2\r,uH&/"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    bytes_0 = b"\xf2O\xa4#{xr4|aK"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    float_0 = 308.9538
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    str_0 = "fC&Cag$Bm8\nYv\rddW'T"
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (str_0, str_0, bool_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    int_0 = -2783
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    none_type_0 = None
    bytes_0 = b"\x1cE\x01\x84d\x1c!\x0c2\xac8\x8c\x9a\xc4c>Oy\xf9D"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    int_0 = -1587
    str_0 = "/I61rn;Y~"
    int_1 = -1328
    tuple_0 = (int_0, str_0, int_1)
    bytes_0 = b"\xfaR\xe5`.\xc5\x96\xe2-\xed&\xf7\xc4\x85\xfaC2\xdeu4"
    dict_0 = {bytes_0: bytes_0, int_0: int_1, int_1: bytes_0, bytes_0: int_0}
    tuple_1 = (tuple_0, bytes_0, dict_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_761():
    float_0 = -84.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    none_type_0 = None
    str_0 = "*sj3U&2C~D<V*v\n9eyo"
    module_0.get_new_command(none_type_0, str_0)


def test_case_763():
    pass


@pytest.mark.xfail(strict=True)
def test_case_764():
    str_0 = "h[D"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    int_0 = -2367
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    bool_0 = False
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    int_0 = -759
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    int_0 = -1552
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    int_0 = 1442
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_772():
    float_0 = -2172.857642
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, float_0, float_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    str_0 = "*"
    str_1 = "t "
    list_0 = [str_0, str_1, str_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    int_0 = 996
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    str_0 = "[vF>I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    int_0 = -2014
    bool_0 = True
    set_0 = {bool_0, int_0, bool_0}
    bool_1 = False
    tuple_0 = (int_0, set_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_777():
    bytes_0 = b"4~\x8e;\xa8\x08\xd2\x8e0\x16\x16\x06T\xcf\x1a\x0c\x1b\xa3r\xa7"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    int_0 = 490
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    int_0 = -301
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    str_0 = "]1}dqm"
    set_0 = {str_0, str_0, str_0}
    bool_0 = False
    tuple_0 = (set_0, set_0, bool_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: tuple_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    int_0 = -1747
    int_1 = 828
    tuple_1 = (tuple_0, bool_1, int_0, int_1)
    set_0 = {tuple_1, int_1}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    bytes_0 = b"d\xf1\\\xc0\xf8NW\x88<!\x17u\xecMKc\x1c\xa3\xf9"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    complex_0 = 1458.0052 + 2134.4737j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(complex_0, list_0)


def test_case_786():
    pass


@pytest.mark.xfail(strict=True)
def test_case_787():
    bytes_0 = b"\x1d\xe7\xc07\xd4\xea\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    str_0 = "9.w<*Iwx,P\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    int_0 = -280
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_791():
    pass


@pytest.mark.xfail(strict=True)
def test_case_792():
    int_0 = -518
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    int_0 = -1660
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    int_0 = -932
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    str_0 = "yhBn>A4\rq{0>uR&o>l.U"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    complex_0 = -3189.13 + 1266.280679j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    int_0 = 1923
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    str_0 = "n*xDFi%\x0cq%B?JOJ{:="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    float_0 = 1460.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    str_0 = "tb7B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    str_0 = "-#u*1b"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    str_0 = "r)F2EARRm*fL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, set_0)


def test_case_804():
    pass


@pytest.mark.xfail(strict=True)
def test_case_805():
    str_0 = ".?9\rKI\\e+!x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    float_0 = 2535.6979
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    str_0 = "Z"
    tuple_0 = (float_0, dict_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    bytes_0 = b"v\\n>\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    int_0 = 5378
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    int_0 = -2626
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    bytes_0 = b"\xb0$\x13"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    bool_0 = False
    str_0 = "@,:t_1.b"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    bytes_0 = b"\x18\x0f2\xa8-\x85\xc2\xc3\xbd6$\xc7\xc5\xca\x05N\xa4W\xce\xa0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    int_0 = 2255
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    int_0 = 997
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [bool_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    int_0 = 314
    module_0.get_new_command(int_0, int_0)


def test_case_819():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_820():
    int_0 = -1529
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    float_0 = 271.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    str_0 = "i@gr':_tC(9=Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    float_0 = 2608.9
    module_0.get_new_command(float_0, float_0)


def test_case_824():
    pass


@pytest.mark.xfail(strict=True)
def test_case_825():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    complex_0 = 19.316632 - 571j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    bytes_0 = b"\xcb\xdb\x01"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    int_0 = 2436
    bytes_0 = b"\x89\xf5\xea\xa8z\xd9\xb2\x95"
    tuple_0 = (int_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    int_0 = -854
    module_0.match(int_0, int_0)


def test_case_829():
    pass


@pytest.mark.xfail(strict=True)
def test_case_830():
    int_0 = 3132
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    float_0 = 1657.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    str_0 = "."
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    int_0 = -2401
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    float_0 = 2730.28382
    list_0 = [float_0, float_0, float_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    float_0 = -1592.554176
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    bytes_0 = b"\xb1\x10l!\xed\xf7/C\x99\x9ek\x81\xf6\x02\x95\xc3\xeed\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    float_0 = 1482.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bytes_0 = b"\x89\x15\x03A\xb6"
    set_0 = {bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    int_0 = 299
    int_1 = -1029
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_842():
    int_0 = 188
    module_0.match(int_0, int_0)


def test_case_843():
    pass


@pytest.mark.xfail(strict=True)
def test_case_844():
    complex_0 = 553 - 1303.15234j
    module_1.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    str_0 = "8]1MU@+l-QYy]JX1Tf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    str_0 = "\x0c_&D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    float_0 = 1662.19899
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    object_0 = module_1.object()
    str_0 = "uOH@B(#g"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


def test_case_852():
    pass


def test_case_853():
    pass


@pytest.mark.xfail(strict=True)
def test_case_854():
    float_0 = -436.3316
    tuple_0 = (float_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


def test_case_855():
    pass


@pytest.mark.xfail(strict=True)
def test_case_856():
    bytes_0 = b"\x92HE\xdb\xf6>=\xf0\x8e9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    complex_0 = 2498.554 - 2372.30711j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    set_0 = set()
    str_0 = "=%^\t@io)1uRY\x0bQPg"
    module_0.get_new_command(str_0, set_0)


def test_case_860():
    pass


@pytest.mark.xfail(strict=True)
def test_case_861():
    int_0 = -609
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    bool_0 = False
    list_0 = []
    list_1 = []
    bool_1 = False
    tuple_0 = (bool_0, list_0, list_1, bool_1)
    bytes_0 = b"\ng\xac\t\x85\xeaCZ"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    bytes_0 = b"K\xdd\xc1\xa9\xf5\x0c\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    int_0 = 1208
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    bytes_0 = b"N\x07\\\x01\xb5KI\x14V\x03\xa3"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_867():
    pass


@pytest.mark.xfail(strict=True)
def test_case_868():
    int_0 = -2452
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_870():
    bytes_0 = b'\xfa\xc5\x99"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    complex_0 = -1153.543722 - 1929j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    int_0 = 3543
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    str_0 = "!"
    list_0 = [str_0]
    object_0 = module_1.object()
    list_1 = [list_0, list_0, object_0, list_0]
    module_0.match(list_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    bytes_0 = b"\xd1"
    str_0 = "nlA7l7l[Y"
    set_0 = {bytes_0}
    dict_0 = {str_0: bytes_0, bytes_0: str_0}
    tuple_0 = (bytes_0, str_0, set_0, dict_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    complex_0 = 648.952062 + 2783.74881j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    int_0 = 2621
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    str_0 = "yw`tR!fe`%[7T3^R}5\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    bytes_0 = b"\x14W\xc3\x12\xfd\xa5\xd1\xba*\x8d\x16!\xfa[y\xa8\x96\xef\xb7\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    str_0 = "l"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    str_0 = "m$<*&C%Ji9_>24,y'Zlo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    complex_0 = -3703 - 1545.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    bytes_0 = b"\x05\nmA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    int_0 = 1606
    bool_0 = False
    list_0 = [int_0, int_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    bytes_0 = b"_\xd0$\xfc\xbb\xda\xdb\xdd\x85r\x1f\xb49\xf1\x13h\x90\xbf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    bytes_0 = b"\\~)o\xaf\xccK,W\x859\x95\xb4<\xb5\x1a\x02\xd9\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    complex_0 = -609.3 - 1845.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    int_0 = 228
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    bool_0 = True
    bytes_0 = b"\xf2A~\xd3\xbc\xc2\xa6S!\xf4\x93\x8b-i"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    int_0 = -2484
    list_0 = [dict_0, dict_0, int_0]
    tuple_1 = (tuple_0, dict_0, list_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    complex_0 = 2133.905 + 398.4213j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    bytes_0 = b"\x06,N\xe0\xdf\xdf>\xee\xbb\nC\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    int_0 = 126
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_898():
    pass


@pytest.mark.xfail(strict=True)
def test_case_899():
    complex_0 = 221.57 + 782.973j
    module_0.get_new_command(complex_0, complex_0)


def test_case_900():
    pass


def test_case_901():
    pass


@pytest.mark.xfail(strict=True)
def test_case_902():
    int_0 = 74
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    complex_0 = 2973.95331 + 3468.86696j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    bytes_0 = b"\xe4ZN\xe8J{\xae\xfd\xe4]\x18\x1e\x85\xc2\xfeA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    int_0 = 3013
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: int_0, int_0: int_0, tuple_0: int_0}
    dict_1 = {tuple_0: tuple_0}
    tuple_1 = (dict_0, dict_0, dict_1, dict_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    bytes_0 = b"\xb2\x1d\x12\xc4\xbd\x08\xd1m\xcc=\xc3\x18\xd0\xbf\t\x1a\xaa\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    bytes_0 = b"'\xf1\xc1\\\x8b\x02fw\x19\rK\xfa-/\xf9a"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    str_0 = "5c:%8dWIw9y"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


def test_case_912():
    pass


@pytest.mark.xfail(strict=True)
def test_case_913():
    str_0 = "{k\nz "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    bytes_0 = b"\xb1\xb9ZqO\xa8\x8f\x1c\xff\xb0\xfd\xa2\xfe\xd4\x9aE"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    int_0 = -3905
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    int_0 = 2002
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    bytes_0 = b"\x9a\x17\xafP\xc5"
    bytes_1 = b"a\xf1\xf5\xd2!s\xb8\x1f\xb6\xe2h\x97W\x10u"
    float_0 = -97.709627
    object_0 = module_1.object()
    dict_0 = {bytes_0: float_0, bytes_1: bytes_0, object_0: bytes_0, bytes_0: bytes_1}
    tuple_0 = (bytes_0, bytes_1, float_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    bytes_0 = b"4\xf7l\xd12|\xbb\xdeX\x89\x0b\xfb\t\xdd\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    int_0 = -477
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    str_0 = "aAA3U\\^i9kQ?y~^Bl e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    int_0 = -1042
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0, int_0, int_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    int_0 = -252
    float_0 = 1598.47305
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    str_0 = "\x0b4gtsa:/N'#kA"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0]
    str_1 = "B!v91t}>}in!\nXb4"
    module_0.get_new_command(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_928():
    complex_0 = -2081 + 3919.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    int_0 = 903
    module_0.match(int_0, int_0)


def test_case_930():
    pass


@pytest.mark.xfail(strict=True)
def test_case_931():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    bytes_0 = b"\xcb\x16\xf6\xb0\xbd\xa1j+\xa4yo\xd0\x94R+\xa6.F@"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    complex_0 = 1339 + 358.7518j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    int_0 = -1869
    module_0.match(int_0, int_0)


def test_case_935():
    pass


@pytest.mark.xfail(strict=True)
def test_case_936():
    bytes_0 = b"Y=\x8c \xed\xa1\xbf\xeb\xd2\x9d\xc5AI"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    bool_0 = False
    str_0 = "%.ac;h8e"
    tuple_0 = (bool_0, str_0)
    dict_0 = {tuple_0: str_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    object_0 = module_1.object()
    set_0 = {object_0}
    object_1 = module_1.object()
    module_0.match(set_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_939():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    bool_0 = True
    complex_0 = 1000.996292 - 3346j
    set_0 = {bool_0, complex_0, complex_0}
    tuple_0 = (set_0,)
    str_0 = "&s55RU`d-:x0q'<l\\"
    list_0 = [str_0, set_0, set_0]
    bytes_0 = b"\x93H3"
    tuple_1 = (tuple_0, str_0, list_0, bytes_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_941():
    int_0 = -887
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    bytes_0 = b"'\xb3\xa7\xd2\xe58ui\xfa\x16#\x1a?\xdd\\p\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    str_0 = "(_JdOWOWi`>Y`c8?j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    bytes_0 = b"Op\xb1Uqc\x17G\xaa\x1bj\xb3\xc8N\xd13MSV "
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_945():
    pass


@pytest.mark.xfail(strict=True)
def test_case_946():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    int_0 = -1809
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    int_0 = 2868
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    bytes_0 = b"\xb8q\x16\x8d\x98\x95\xd7\xa4\xac\x1f\xb9\xbfX'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    complex_0 = 371 + 443.5648j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    str_0 = "vp4=pO'A,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    complex_0 = -1395.956 + 2777.2777j
    str_0 = "Bw}!.j="
    module_0.match(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    bytes_0 = b"\xd2\xcd@\xca\xc0\x04\xb5\xd8w\xc1\x95RJ\x0c\xfa\xa0b\x1b\xd6\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_959():
    float_0 = 5.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    str_0 = "u@:[!L\nc\x0bqGDfZ|s\n8J\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    str_0 = "}Hxx3demFFbF !Ccx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    bytes_0 = b"\xc0\x05%\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_963():
    pass


@pytest.mark.xfail(strict=True)
def test_case_964():
    bool_0 = False
    str_0 = "h'C&t2:v-SC}^0"
    bool_1 = False
    tuple_0 = (bool_0, str_0, bool_1, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_965():
    pass


@pytest.mark.xfail(strict=True)
def test_case_966():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_967():
    pass


@pytest.mark.xfail(strict=True)
def test_case_968():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    str_0 = "Cf"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    bytes_0 = b"\xd6rlEr\xcf\x1c\x80\xb4\xcf\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    int_0 = 1032
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    complex_0 = -360.8064 - 4121.88j
    bool_0 = True
    tuple_0 = (complex_0, complex_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    int_0 = 2304
    str_0 = "[A*K0DPX\x0bjH.}{7TT4|]"
    dict_0 = {str_0: str_0}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    int_0 = 3230
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    bytes_0 = b"\x90\xdd\x93W\xf1\xd0\xf1\x98\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    float_0 = 622.87
    module_0.get_new_command(float_0, float_0)


def test_case_979():
    pass


@pytest.mark.xfail(strict=True)
def test_case_980():
    bool_0 = True
    int_0 = 649
    tuple_0 = (bool_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_981():
    pass


@pytest.mark.xfail(strict=True)
def test_case_982():
    int_0 = -2075
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    str_0 = "L1^91 .AK)WW8ta[F_Qn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    str_0 = "vYlEDe0/lYE\rT>]J\x0cTc["
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    float_0 = 3844.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    bytes_0 = b"Z\x1e\x8c"
    bytes_1 = b"\x01x9+xt\xc9\xec?"
    dict_0 = {bytes_0: bytes_1, bytes_0: bytes_1, bytes_1: bytes_1, bytes_1: bytes_1}
    module_0.match(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_987():
    int_0 = 496
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    bytes_0 = b'\x10\x97\xc3\xd2\xcd\x0b"\xb3\x9a\x1e\xd9\x00e~\xe1\x95\x92\x1e\xb1'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    bytes_0 = b"\xa0O\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    bytes_0 = b"\xfcDS7\xca;\xea\x98\xc2Pm\x19?\x8d"
    list_0 = [bytes_0, bytes_0]
    str_0 = ">epaz'O\x0cevB"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    float_0 = -786.81
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    str_0 = "6i\tNwA36>?.Gy>gI2@mq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    bytes_0 = b"4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    bool_0 = False
    bytes_0 = b"l\xb6\xab\xd0\xa5H\xa1\x7f\x1aL\x03Ic\xae\xfd\xcf\xca"
    set_0 = set()
    tuple_0 = (bool_0, bytes_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    bytes_0 = b"\xe2\x9fa"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    str_0 = "=}\r&;M1e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    int_0 = 3061
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    str_0 = "~q&qq5LM_%'Ag\n"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    str_0 = "@]l="
    module_0.match(str_0, str_0)


def test_case_1004():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1005():
    int_0 = 2155
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    float_0 = -1065.901
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    str_0 = "xy%G+t-G "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    bytes_0 = b"\xb0\xeb\xcbW\xb7\x90*\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    complex_0 = -996.8936 + 298j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.object(*list_0, **complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    bytes_0 = b"gp\x92?}\xde\xca<YL)\xb8Q\x07\x9f\xfd\xdd\xccm"
    module_0.match(bytes_0, bytes_0)


def test_case_1012():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1013():
    int_0 = -963
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    float_0 = 1164.464
    bool_0 = True
    list_0 = [float_0, float_0, bool_0, bool_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    bytes_0 = b"\xe0\x17\x12\xed1\x04_\xf5re"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    float_0 = -2259.59498
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    str_0 = "$C\n?(MoexO6 \\\\'H';"
    bytes_0 = b"\x12\x7f\xef\xdc\xcd"
    tuple_0 = (bytes_0, str_0)
    float_0 = -2103.5
    tuple_1 = (str_0, tuple_0, float_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    str_0 = "\r}\n["
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    int_0 = 113
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    int_0 = -254
    object_0 = module_1.object()
    module_0.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    bytes_0 = b"\xde\xd8\xe4W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    bytes_0 = b"\xf2\x86\x11\xc7m\xc2\x86f\xd42\xcc\xd7^\xf3:"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    float_0 = 472.635386
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    bytes_0 = b"m\x8b\x896\x92\xc5\x9a\xec"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    bytes_0 = b"$\x88\xd6\x9c\x0c\x13\xd1\x8a\xf2\xd2\x88QT\xcds\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    bytes_0 = b"~?\x90\xb1q\xe6\xf6\x14\xa4\x8c\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    str_0 = "V^uRMSa(C\tjKlJPzz"
    complex_0 = -3189 + 5360j
    module_0.get_new_command(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    bytes_0 = b"C\x89\x85-x\x12E\x0f\x89\x9c\xe4;\xc3>\xa1\xf1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    int_0 = 1213
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    int_0 = 2902
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


def test_case_1035():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1036():
    bytes_0 = b"\r\xfbP\xa6\xb6\xac\xd7\x83M\xf9\xa2"
    bytes_1 = b"\xec\x841"
    int_0 = 2771
    list_0 = [bytes_1, bytes_1]
    tuple_0 = (bytes_0, bytes_0, bytes_0, list_0)
    tuple_1 = (bytes_0, bytes_1, int_0, tuple_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    int_0 = 140
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    float_0 = -924.484751
    module_0.get_new_command(float_0, float_0)


def test_case_1039():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1040():
    int_0 = -1431
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    object_0 = module_1.object()
    list_0 = [object_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    int_0 = 366
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    str_0 = "oWF{v\x0b\x0c(MB-iPW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    str_0 = "@o]e@:L"
    str_1 = "9b>|4sUErj4r:"
    set_0 = {str_0, str_0, str_1, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    int_0 = 614
    dict_0 = {int_0: int_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    tuple_1 = (int_0, int_0, tuple_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    float_0 = -379.644
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0, list_0, float_0]
    module_1.object(*list_1)


def test_case_1048():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1049():
    bytes_0 = b";\xdc\xa4\xbe\xd4\xc8\x95\xff\xbd\xc2\x1e\x16e/\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    float_0 = 602.52
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    int_0 = -2460
    str_0 = "zYA+ZsP#E"
    int_1 = -334
    tuple_0 = (int_0, str_0, int_1, int_1)
    module_0.match(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    bytes_0 = b"C\xaf\xd0\x80P\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    int_0 = -3692
    tuple_0 = ()
    dict_0 = {int_0: int_0, int_0: tuple_0, tuple_0: int_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    str_0 = '#s/t8<"bez`\tm\rrA]\n+'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    int_0 = -2018
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0, bool_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    bytes_0 = b"A.Z*\x9aU\xad\xe4\xd5f\xc0*"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    bytes_0 = b"v\xae\xbe\x88\xd6\xf5\x07\xbe#&]\xe4\x90\xf9\x96\xbc\xc8\xf8\x00/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    bytes_0 = b"\xc0\xe3\x8a\xe7\xf2w\xe2"
    float_0 = 3545.5514
    tuple_0 = (bytes_0, float_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    complex_0 = 2095.3684 - 796j
    set_0 = {complex_0}
    bytes_0 = b"\xc5+"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    int_0 = 1257
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    bytes_0 = b"\x1c\x0b\x0fD1\xbf'C\x03hp\xcc\x1b\xe3"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    str_0 = "AV}h.f06\rS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    str_0 = "1YuW1Lb2Rkh0\nx8z7W\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    bytes_0 = b"\xfe"
    bytes_1 = b"f"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    float_0 = -237.098
    module_0.get_new_command(float_0, float_0)


def test_case_1076():
    pass


def test_case_1077():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1078():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    bytes_0 = b"/\x97\xbf\x165\x17\x06;\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    str_0 = 'M(T-Sy#"v'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    complex_0 = 1711.3444 + 806j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    str_0 = "ikLA( \x0col"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    str_0 = "B|{4|X|1j6aC9MhkT"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    complex_0 = -224.685 - 1952.6j
    str_0 = "@,$~"
    tuple_0 = (complex_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    bytes_0 = b"\xad\x08+\xc8\xd5p\xa0$s\xca{E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    str_0 = "8m_.(ww0_[o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    tuple_0 = ()
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    bytes_0 = b"\xbc\xce>\x98\xb1\x97\xc3\xe4Za\xb9"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    bytes_0 = b"\x90%\xe0JHH\xc2\x06b&\x86h\\q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    float_0 = -3289.026
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    bytes_0 = b"=G\xe4\xc2\x16\xce\xc8\xae\t\x86\xc4\xd4"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    bytes_0 = b"\xd8\xfd\xc9$@\x0f[6zW\r'\xc3\x06\xe6\xd6z\xc8"
    set_0 = {bytes_0, bytes_0, bytes_0}
    bool_0 = True
    tuple_0 = (bytes_0, set_0, bool_0)
    bytes_1 = b"\x97\xa3\x99\xf0\xb4]\xc1\x03\xdb\xcc\x01#z\xe1\xe1\xc0"
    module_0.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [list_0, dict_0, dict_0]
    module_0.get_new_command(dict_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    str_0 = "ucF[%*.pxhY@* "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    bytes_0 = b"\xa1\x08t\x1d\xf7V\x8f\x80"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    str_0 = 'Qu#0^vk3"Z6}$'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    bool_0 = False
    complex_0 = -1029.686271 + 301.6j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    str_0 = '3?"\nI'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    bytes_0 = b"\xfb>\xd5?\xeb=\xf85\x9d\xc7\xad\x7f\xc7\xeb\xb5\x02"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    int_0 = 4059
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    bytes_0 = b"bs\n\x90\xde\xdcv\xe8QO\xa6\xdaGkZ\xb3\x91\xaca\x86"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    bytes_0 = b"\xeb\x8f\xf4\xd5}\t\x85\x1cQ\x9a\xfex\xe6\x0b\xf0/="
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    str_0 = "Xmo"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    float_0 = -664.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    bytes_0 = b"*<\x879\x14>\x84\x19\x92\xe2j\xf6\xd1k\xd7\x94j\x03"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_1111():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1112():
    bool_0 = True
    complex_0 = 409.3157 - 1432.2j
    bool_1 = False
    tuple_0 = (bool_0, complex_0, complex_0, bool_1)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    bytes_0 = b"\xfcd\xa8`\x12\x97\x91\x97r\xa3\xed?"
    module_0.match(bytes_0, bytes_0)


def test_case_1114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1115():
    float_0 = -1981.38173
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    int_0 = -140
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    str_0 = "SDAV]BSO.M[%//hT7u.'"
    none_type_0 = None
    str_1 = "Q>nz&ci=b@%4[#$"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    set_0 = set()
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_1120():
    pass


def test_case_1121():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1122():
    int_0 = 1847
    module_0.match(int_0, int_0)


def test_case_1123():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1124():
    int_0 = -628
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    str_0 = ""
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


def test_case_1127():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1128():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(bool_0, tuple_0)


def test_case_1129():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1130():
    int_0 = -765
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    int_0 = 2085
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    object_0 = module_1.object()
    complex_0 = -694 - 446.86106j
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, bool_0, set_0)
    tuple_1 = (object_0, complex_0, tuple_0, set_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    object_0 = module_1.object()
    bytes_0 = b"7;H\x0e&*\xabY(\x05\xb3\xfa\xd3\x0e\xc2\xaf\x9a5"
    module_0.get_new_command(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    str_0 = "\t5uqT?btzZg&|2> "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    str_0 = ",W8}HJ`UD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    bytes_0 = b"\tH\xbc\xc6ma\xfd\x08/\xa6\xf1Ny\xf2\xc6~\xfe\x7f[,"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    float_0 = -2177.316203
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    str_0 = "zDlr"
    int_0 = -1578
    dict_0 = {str_0: str_0, str_0: int_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    bytes_0 = b"\xd17\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    int_0 = -1809
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    str_0 = "0*O2A'fY[Z1&7Os3'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    str_0 = "`P'/j[yBj)*)W8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    str_0 = "\\>6~&h 3\\tbK"
    int_0 = -3087
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    set_0 = set()
    str_0 = "6RCH-4dxf$##&Icwq4"
    tuple_0 = (set_0, str_0)
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (list_0,)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    str_0 = "_TPi\nGK.:zZZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    int_0 = -1065
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1150():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1151():
    bytes_0 = b"\xa4\xda^\x90\xe5V6:r\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    int_0 = 3108
    int_1 = 1038
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    str_0 = 'I1?i|c-[S"|:m'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = []
    tuple_0 = (str_0, dict_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    bytes_0 = b"\xad\xc4\xf3\x03\xf4\x91X["
    list_0 = [bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    bool_0 = False
    int_0 = -738
    tuple_0 = (bool_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    str_0 = "&![{B{\x0c)IOoQ_D~,Ka6"
    str_1 = "="
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    str_2 = "&h"
    bytes_0 = b"\x8a\xc1V1}\xce\x96\xddD"
    dict_1 = {str_0: str_0, str_1: dict_0, str_1: str_0, str_2: bytes_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    complex_0 = -2395.0905 - 773.234j
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {complex_0, tuple_0, tuple_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    float_0 = -4779.02
    tuple_0 = (float_0,)
    set_0 = {tuple_0}
    tuple_1 = (set_0,)
    list_0 = [tuple_1, set_0, tuple_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    str_0 = "^]%y?\x0c)XQ\x0c.s-69;at"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = ()
    dict_0 = {}
    tuple_1 = (list_0, tuple_0, dict_0, bool_0)
    float_0 = 402.53
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    none_type_0 = None
    set_0 = set()
    int_0 = 2066
    list_0 = [none_type_0, int_0]
    tuple_0 = (set_0, none_type_0, set_0, list_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bytes_0 = b"\x9e\x18\xa2\x12\x81p\x07\xb4\x85\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1166():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1167():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    int_0 = -2756
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    int_0 = 164
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    int_0 = 3542
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    float_0 = 1584.77708
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    bytes_0 = b"\ts\xcc\x9d\xef\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    int_0 = -1119
    str_0 = "m_qRq"
    bytes_0 = b"]\x89\xfbq\x05{~["
    tuple_0 = (int_0, str_0, int_0, bytes_0)
    list_0 = [bytes_0, str_0, int_0]
    tuple_1 = (tuple_0, list_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    str_0 = "a3o$YD}Baz$!&7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    str_0 = '/L(Z7jv_x-)!"$vfO'
    set_0 = set()
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    complex_0 = 1813.949348 + 1664.836j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    bool_0 = False
    int_0 = 725
    tuple_0 = (bool_0, int_0)
    set_0 = {tuple_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    bytes_0 = b"\xf3\xf3I\x04v_\xff\xffP\x17\xe1\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    str_0 = "Y"
    set_0 = {str_0, str_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    float_0 = 1453.1869
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    str_0 = "]HP:UbiR#HQh|TI3h"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    int_0 = 1907
    dict_0 = {int_0: int_0}
    str_0 = "V\\V"
    tuple_0 = (int_0, dict_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    bytes_0 = b"c\xbc\xb9);`,\x0c\xfa\x10'\x8a^\xbe\xa7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    int_0 = -884
    set_0 = {int_0, int_0, int_0}
    dict_0 = {int_0: set_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    int_0 = -866
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    int_0 = 2398
    bool_0 = False
    set_0 = {int_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_1190():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1191():
    bytes_0 = b"\\\x97\xdb\xf5\x88\x83x\x9d\xb4\x8e|\xc9\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    complex_0 = -2510.51185 - 2211.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    str_0 = "7} ()?\nqek*\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


def test_case_1195():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1196():
    float_0 = 1397.484097
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    str_0 = "5wby"
    module_0.match(str_0, str_0)


def test_case_1198():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1199():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    str_0 = "_*Jv;Au?9$I"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    bytes_0 = b"\xa7\x8b\xd6\xdb8\x185f\xbd\xc3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    str_0 = " ;Q^@8Ax"
    str_1 = "9GR,G\n\x0bMCn^Z"
    bytes_0 = b"l\xb1S2e\x86\xdb\xa8\xd3\x86\xd6\xce\xde\xaa?"
    bytes_1 = b"\x17\x98T\xeb-l"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: bytes_0, str_0: bytes_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    object_0 = module_1.object()
    bool_0 = False
    dict_0 = {object_0: object_0, object_0: bool_0}
    bool_1 = True
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    str_0 = "nS:1 ;;=2h"
    bytes_0 = b"\xa8\x88D"
    dict_0 = {str_0: str_0, str_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    bytes_0 = b";_\x92\xee\xd0\x81\xd0\xc2\x8e\xd2U\xd7Zs\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    str_0 = "^U"
    float_0 = 77.297496
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    str_0 = "\nLwa6Hzm$cDu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    complex_0 = 570.306 - 2067.9525j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    complex_0 = -979.382 - 2013.072574j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    bytes_0 = b"N\x87*T*\xc9\x1b}\xc5\xe8\x9cQ\xd8"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    bytes_0 = b"\xea\x9c"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    bytes_0 = b"M\xae#\xf9\xeb\xdc\xe1w\xc4b2\xd6\xf2\x0e_\x11f"
    int_0 = 1269
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    complex_0 = 1160.64 - 2765.64187j
    set_0 = {complex_0, complex_0, complex_0}
    bytes_0 = b"\x836>\xb5\xcb-q\xe5"
    str_0 = "JZyVz y"
    tuple_0 = (set_0, set_0, bytes_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    str_0 = "j\t>EJNB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    float_0 = 3100.35
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = []
    tuple_0 = ()
    tuple_1 = (dict_0, list_0, tuple_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    float_0 = -1214.554
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    bytes_0 = b'\xb6\xe1\xcc;r1\x82\xc1Vw\xee"\xa6'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    int_0 = 493
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    bool_0 = True
    int_0 = 2680
    module_0.get_new_command(bool_0, int_0)


def test_case_1225():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1226():
    bytes_0 = b"\xfc\x91\xa6QuYw\xb7\xd0\x13\x16\xa3`"
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(bytes_0, object_0)


def test_case_1227():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1228():
    int_0 = 2666
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    none_type_0 = None
    int_0 = 3141
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    str_0 = "*m);xs54N!-HuH16+e&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    int_0 = 891
    list_0 = [int_0, int_0]
    str_0 = 'H")>jQ5!X2pNhV;(I'
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    int_0 = -1373
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: none_type_0}
    tuple_0 = (bool_0, bool_1, dict_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    bytes_0 = b"\xa8\xad\x8d5\ne\x18\xb9\x1c\xb9\xe5\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    complex_0 = -5.5 + 653.316069j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_0.match(list_1, bool_0)


def test_case_1237():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1238():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    str_0 = "Yr}ft4,qz"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    int_0 = -1324
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    complex_0 = 3897.5451 + 2543j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    complex_0 = 22.544 - 2463.66155j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    list_2 = [list_1]
    list_3 = []
    module_0.match(list_2, list_3)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    int_0 = -1168
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1247():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1248():
    bytes_0 = b"\x18\xd8\xaa\x7fd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    float_0 = 1176.987
    tuple_0 = (float_0,)
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    int_0 = 3427
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    bool_0 = True
    bytes_0 = b"\xcb\xbe\xc9\xca\x93Pl\x89\x84"
    dict_0 = {bool_0: bool_0, bytes_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    tuple_1 = (tuple_0,)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    float_0 = -2099.84
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    bytes_0 = b'1\x1b"\xe3Q\xbd\xcd\x97`\x95W\xf0\xf5xj\xf5\xa1\xeb\xd4\xaf'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    str_0 = "W:L>_![/Rn-f},\\5\rn5;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    int_0 = -1167
    bool_0 = True
    dict_0 = {int_0: int_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    int_0 = 2083
    bytes_0 = b"\xaa\x13\x16\xad\x1d*L\xdc\xd1"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    bytes_0 = b"w\x972\x114\x7fgO\xd6<\x9f\xd9\x08.\xb5O{\xc8"
    complex_0 = -218 + 3677.5001j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    float_0 = 221.3
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    int_0 = -700
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_1261():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1262():
    int_0 = 1204
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    float_0 = 788.72252
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    str_0 = 'N:Km3"wd\x0bG*H'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    str_0 = "1\x0bi3If"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    int_0 = 1304
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    bool_0 = False
    bytes_0 = b"\xc4O\xf1XM"
    object_0 = module_1.object()
    set_0 = {object_0, bytes_0, bool_0}
    tuple_0 = (bool_0, bytes_0, set_0)
    bytes_1 = b"\x04\x01\xf4\xb6c\xf3q\xce"
    tuple_1 = (tuple_0, bytes_1, bool_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    int_0 = 4754
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    int_0 = -303
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bytes_0 = b"\xd5\x0f'\x1e\xa7\x84\xd2\x9bD\xfc\xdb\xcfF\xe1\xc4\\"
    str_0 = 'V\\ b&)v"r|J'
    str_1 = "iwWK'VnCImrp'i#"
    dict_0 = {bytes_0: str_0, bytes_0: str_1}
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    int_0 = -5387
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    int_0 = 1772
    module_0.match(int_0, int_0)


def test_case_1279():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1280():
    int_0 = -532
    dict_0 = {int_0: int_0, int_0: int_0}
    str_0 = "pE1$C#"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    int_0 = 1563
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    bytes_0 = b"\x94\xff\xca\x82Wm\xe8\xaac\x08o\x1c"
    bool_0 = False
    bytes_1 = b"_\x06\x0ew>%R\x80D\xd1\x03\xa3"
    set_0 = {bytes_1, bool_0}
    list_0 = [set_0, bool_0]
    str_0 = "Qz>"
    tuple_0 = (bool_0, list_0, str_0, bool_0)
    tuple_1 = (bytes_0, tuple_0, tuple_0, list_0)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    int_0 = 311
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    complex_0 = 1807.2442 - 3197.825j
    int_0 = 919
    module_0.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    float_0 = 1550.87369
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    int_0 = -2899
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    str_0 = "7Wt6n(zO\tX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    bytes_0 = b"i\x85\xc2\xcd\xd9\x97\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    bytes_0 = b"_O\x9f7+\x81"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    int_0 = -2354
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    str_0 = "mfl\x0clF0HT-_S]nFmE+dV"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    float_0 = 224.107
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    complex_0 = -1548.571 + 1329.523257j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    str_0 = "p#VLt."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    str_0 = 'WS"cUc/I/k\r,'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    str_0 = "e&rhV96K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    float_0 = -2342.874
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    int_0 = 3726
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    str_0 = "'"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    float_0 = 808.33134
    list_0 = [float_0, float_0, float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    bytes_0 = b"\xb4'k\x86"
    bytes_1 = b"bl\x97\xfb\xd2/Q\xd7\t\xd7.\xe8\xfaN\xa9\xd6N"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    int_0 = 464
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    set_0 = set()
    list_0 = [set_0, set_0]
    tuple_0 = (set_0, list_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    bytes_0 = b"&\x8e%\xbc\x95*\xf2\xb9\x7f\x9a\xd0\xef\xf4p\xeb\xd1\x19\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    str_0 = "]]r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    str_0 = "O\x0b=EzZVL^9 {"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    bytes_0 = b"\xe0Y(\xec*o\x14s\xeb\xb0\xd7\xf3\x8f\xd9:,"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1312():
    complex_0 = -230.169974 - 726.84j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    complex_0 = -1180.084 + 1011.95929j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    int_0 = -4977
    str_0 = "}X`4`oh6X0Ims{!qa&?'"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


def test_case_1318():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1319():
    str_0 = "{coH!j3kY*DAFFn"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    str_0 = "zAK\t3Qpuhp"
    float_0 = -956.38
    bool_0 = True
    int_0 = -879
    tuple_0 = (str_0, float_0, bool_0, int_0)
    list_0 = [tuple_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    bool_0 = True
    dict_0 = {}
    list_0 = [bool_0, dict_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_1322():
    pass


def test_case_1323():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1324():
    int_0 = 282
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    str_0 = "s4JCtJ\\rfBo}"
    none_type_0 = None
    str_1 = "IBV3.\x0cWg\tR)8f"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    str_0 = "`0"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    bytes_0 = b"\xc7\x03\x7f9\xe5\xca\xee\xa7\x010\xd2\xbc\xf3\x82\xe9\x0f\xdb\xc1\xec"
    bool_0 = False
    int_0 = -2896
    str_0 = "yk. \\%uvvXnjKvK~Q/"
    dict_0 = {bytes_0: bool_0, bytes_0: bytes_0, int_0: str_0, bool_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    int_0 = 580
    module_0.match(int_0, int_0)


def test_case_1330():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1331():
    int_0 = 147
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    int_0 = 1709
    list_0 = [int_0, int_0]
    complex_0 = 395.181 + 397j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    bytes_0 = b"\xbf,\x8a\xc3\xf9\xe9\x1fL\xc1\xbc"
    complex_0 = 1780.5433 - 3747j
    list_0 = [bytes_0, complex_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    bytes_0 = b"\xff\xe6rS\xce\xbb\xd4\x14\xfb\x03\xb6#\x9a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    complex_0 = 3217.3 - 772.39j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    int_0 = -1162
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    bytes_0 = b"\x08>\t\x0f\x82-\xa2\xd4}\xe7\xdb\xfd\x02\xda\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    int_0 = -998
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    bytes_0 = b"\xb8\x8eO0\xab^\xb2Qj\x15\xa2\x8c\x17$y\x9aD\xca\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    int_0 = 1102
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    str_0 = "P"
    int_0 = 3225
    tuple_0 = (str_0, int_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    str_0 = "*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    bytes_0 = b"\x15a\xcb\xb9\x0f\x17n\xfbz"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    str_0 = "E"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    int_0 = 2685
    list_0 = [int_0]
    list_1 = [list_0]
    tuple_0 = ()
    bytes_0 = b"\x17a\x0e\x18"
    tuple_1 = (tuple_0, bytes_0, bytes_0)
    tuple_2 = (list_1, tuple_1, list_1, tuple_0)
    list_2 = [tuple_2]
    module_0.match(list_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    str_0 = ";/yDz#"
    list_0 = [str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    str_0 = "#Z"
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    bool_0 = True
    str_0 = "JaX9"
    str_1 = 'zQS\x0c"(qO.=N?'
    dict_0 = {str_1: bool_0}
    tuple_0 = ()
    tuple_1 = (str_0, str_1, dict_0, tuple_0)
    dict_1 = {bool_0: tuple_1}
    module_0.match(dict_1, str_0)


def test_case_1352():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1353():
    int_0 = -108
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    bytes_0 = b"\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    str_0 = "HHs0Gs#y"
    complex_0 = -126.622 + 405.63j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    float_0 = 1076.178121
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    bool_0 = False
    str_0 = ")X"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    none_type_0 = None
    complex_0 = -3319.452 + 1684.5j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    str_0 = ".q2o,I=bdsspu99|vE!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    str_0 = 'Q\x0cvJogD\\\\8G"\\v'
    str_1 = "UE3clcU-[r;A:\x0b"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    int_0 = -1378
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    float_0 = -1823.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    bytes_0 = b"\x04(\xfb\xda={\xc5\x8c<\x0b\xc5"
    module_1.object(*bytes_0)


def test_case_1367():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1368():
    float_0 = 3305.657921
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    str_0 = "|\ryuB4o("
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bool_0, bool_0, bool_0, dict_0)
    int_0 = 221
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    int_0 = -5
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    int_0 = 1072
    str_0 = 'K4\x0baAc:"Hf8yi?fk\r\r'
    module_0.get_new_command(int_0, str_0)


def test_case_1373():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1374():
    int_0 = -2375
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    int_0 = 1562
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    str_0 = "nG*fs=<%L)\tRmGw6NK"
    float_0 = -1459.8541
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    bytes_0 = b"\xd4H\xfcrPq"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    object_0 = module_1.object()
    str_0 = "\n}:-9'o'1Y-\t"
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    str_0 = "T_Gj%<\x0c\n]I4SaSkS'\t2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    float_0 = 2191.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    int_0 = 187
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    int_0 = -3929
    module_0.match(int_0, int_0)


def test_case_1384():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1385():
    bytes_0 = b"\xe4\x1e\xc1N\xcc\x0byg\xce\x81\xaa7!\x07\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    float_0 = 2380.0
    set_0 = {float_0}
    dict_0 = {float_0: set_0}
    tuple_0 = (dict_0, dict_0)
    tuple_1 = (set_0, tuple_0, tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    bytes_0 = b"|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    bytes_0 = b"J\xff-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    complex_0 = -669.5 - 2960.8187j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    float_0 = 2191.437
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    str_0 = "7C"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    int_0 = -332
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    float_0 = -887.84
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    bool_0 = True
    str_0 = "Wmm9{~iiFB-R3b\\x\\P"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


def test_case_1397():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1398():
    str_0 = "7.r\x0ce-e4dV@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bytes_0 = b"\x8e8\t76Q\x04L\x83\xfe\x05\x00\xffL\xc8\xe1\xdf\xc9k"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    int_0 = -283
    list_0 = [int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    int_0 = 3422
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    bytes_0 = b"\xf7\x1dyc\x87\xd5~\xf2S[\x8e\xcd\xfe\xa3s\xf8\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    bytes_0 = b"\x07\x8f\xf8H}l\xa1\xdf\x8b\xf4-"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    str_0 = "&_="
    bytes_0 = b"\xc0\xce\xe1\xd4\x18\x84\x8a\x0f\xb6ybc\xc9"
    tuple_0 = (str_0, bytes_0, str_0)
    tuple_1 = (str_0, tuple_0)
    dict_0 = {tuple_1: tuple_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    complex_0 = -1764.687717 + 2180.06313j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    bool_0 = False
    bool_1 = True
    bytes_0 = b""
    tuple_0 = (bool_0, bool_1, bytes_0)
    tuple_1 = (tuple_0, tuple_0)
    set_0 = {tuple_0, bool_1, bool_0}
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    str_0 = 'B7u@BxsA%DFk0C"ytN^'
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    int_0 = 1794
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    str_0 = "-W-VS6 \x0bLMv{W%NQU6I"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    bytes_0 = b"J.\xffS\xc5\xe9\xf5\xef\xb5\x84\xea\xb0<\xcfD9\x07\xff- "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    str_0 = "\x0bbbhw-~Z\x0b"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    bool_0 = False
    str_0 = "n@VP"
    str_1 = "K@"
    tuple_0 = (bool_0, str_0, str_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    float_0 = 1252.46041
    int_0 = 221
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    bytes_0 = b""
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    str_0 = "SrMpz!uf`+"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    int_0 = 1359
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    list_0 = []
    object_0 = module_1.object()
    list_1 = [list_0, object_0]
    module_0.match(list_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    float_0 = -3301.6475
    int_0 = 1132
    tuple_0 = ()
    tuple_1 = (float_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    str_0 = 'rf6y-&SheF*"s'
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    float_0 = 1658.481
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    int_0 = 169
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    float_0 = 1570.18
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    str_0 = "$N'\"wx|M<$t\nt"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    float_0 = -2538.756
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    int_0 = 765
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    complex_0 = 3862.2 - 104j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


def test_case_1433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1434():
    bytes_0 = b"\xe5!\xff\x07\xc6\xab\x86\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    int_0 = -4231
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    complex_0 = 176.668 + 2776j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    bytes_0 = b"'\xf0B\xb9i\xc99#}\xb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    str_0 = "E=G4P"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    str_0 = "^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    complex_0 = -2382.3 - 2692.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    str_0 = 'fOK2(}LbwBaWN~,"O'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    str_0 = "w/L4Mqn:fmKRkQBzE@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    int_0 = -685
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    int_0 = 894
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    str_0 = "zuw,7T$"
    module_0.match(str_0, str_0)


def test_case_1448():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bytes_0 = b"\xcf\x18+\xe8O\xc4\x0f\x916\xab]G\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    str_0 = "`{k\\J_i>~Z%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    str_0 = 'eHjv|jfIzi*7QE"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    str_0 = "_~8l\\{-z#p+ "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    bytes_0 = b"\xbc\x90\x89\xda6l%\xca\xc5kc\xb8\x96\xec-\x98\xab\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    float_0 = -629.3
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_1455():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1456():
    int_0 = 2178
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    float_0 = 1676.308859
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    none_type_0 = None
    complex_0 = -1852.11 + 3136.874288j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    int_0 = -3403
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    bool_0 = True
    bytes_0 = b" \xb5a\xc7\xea\x16t\x8c\xbd\x83\xfbdV\xb0\xcf"
    module_0.get_new_command(bool_0, bytes_0)


def test_case_1462():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1463():
    int_0 = 752
    dict_0 = {}
    tuple_0 = (int_0, dict_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    int_0 = 1763
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    str_0 = "lY?5@AULxgs@'Q:VR$"
    bytes_0 = b"\xb9-\x95J\xb3\x01L\xf8\xff\x12\xda\x81\xd9\x01\xe8\x92\xba\x9b"
    int_0 = 520
    tuple_0 = (str_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    str_0 = ":'z="
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    str_0 = "BM:_c\x0b{J:\tl.J"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, set_0, str_0, set_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    bytes_0 = b"\xcd\xc4\x9b\x1d\x9d]\xdaD\xf7\x07\x1e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    str_0 = "\x0b%v-jx|5`Ndpt]}a_J"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    int_0 = -1133
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    str_0 = "O[t#Cy="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    float_0 = 825.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    str_0 = "J.an|v0UlzOifG75"
    set_0 = {str_0, str_0, str_0}
    bytes_0 = b"\x1a\xa0:\x99\x86,\xde"
    tuple_0 = (set_0, bytes_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: tuple_0, str_0: set_0}
    str_1 = "nF\x0b5\r%j\x0cK3l"
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    str_0 = 'XK,z"y>$0\nbF\r4A%;'
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    bytes_0 = b"\x8de9\x16\xcc\xae\xa7\xda\x9f~]\x903\xd8\x82\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    str_0 = " ,m[:W_=w^w>1gR(;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bytes_0 = b"N~9\xa4\xe6\x90;h\xa6\x9b\xd3\x06\xea"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    int_0 = 1027
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    int_0 = -908
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = True
    tuple_1 = (int_0, int_0, tuple_0, bool_1)
    module_0.match(tuple_1, tuple_0)


def test_case_1483():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1484():
    str_0 = "/5;.vk"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    int_0 = -1215
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    bytes_0 = b"Nb_6\x803un\xdc\xe6u;\xb3\xdf\x1fH\x07Q\xba\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    str_0 = "#:v]Xix%nR>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    str_0 = "\x0b  \\,\r4>6a"
    set_0 = {str_0, str_0, str_0, str_0}
    float_0 = -2040.2
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    int_0 = -717
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    bytes_0 = b"\xdd\x1a\xa4\x86\xe1\xd2\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    bytes_0 = b"Y&wR\xc2\x19\xed\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    float_0 = -4618.26016
    set_0 = {float_0, float_0, float_0, float_0}
    tuple_0 = (set_0, float_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    int_0 = -1341
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


def test_case_1496():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1497():
    int_0 = 755
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    str_0 = "n8\x0bS\\9Eu"
    str_1 = "rH%WK^*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    str_0 = "-l!f"
    list_0 = [str_0, str_0]
    str_1 = "5I\x0c+wx>g7(F8 Z"
    str_2 = "FLl!='xUx3H>Y-pj"
    dict_0 = {str_1: str_1, str_0: str_0, str_2: str_2, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    bytes_0 = b"\x10\xf9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (tuple_0, dict_0, bool_0)
    tuple_2 = (dict_0, tuple_1)
    module_0.match(tuple_2, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    str_0 = "5@0`iC#RAhw"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bytes_0 = b":\xd1A\xe6\xa6,\\\xad\x18\xd0\x94\xda@\x1c6\xbb\x17\xb9\xe6\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    bytes_0 = b"}1\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    bytes_0 = b" RX3\x10\xb5\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    bytes_0 = b"\x98\xb2B\xf2g\x1b\xc2s\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    bytes_0 = b"\xea}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    str_0 = "Jw"
    bool_0 = True
    tuple_0 = (str_0, str_0, bool_0, str_0)
    set_0 = {tuple_0, bool_0, bool_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    str_0 = "(W#("
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    float_0 = -3288.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    int_0 = 1366
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    float_0 = 2080.49217
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    dict_0 = {}
    bool_0 = True
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    str_0 = '"ub'
    module_0.match(str_0, str_0)


def test_case_1516():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1517():
    bytes_0 = b"\xefJ\x0c9\xe6\xa1\xaa"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    int_0 = 1053
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    complex_0 = 2087 - 2754.1025j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1520():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1521():
    set_0 = set()
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    str_0 = "6F%r"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    bytes_0 = b"]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    str_0 = "tS(3ia2t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    str_0 = "+!\n,Jhd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    str_0 = "WHtKL4IG%nQ=K>NpS"
    list_0 = []
    int_0 = -1049
    tuple_0 = (str_0, list_0, int_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    bytes_0 = b"\xb3!V\xfa\x94$\xb5\x81\\7\xfbQ\xf0:!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    none_type_0 = None
    str_0 = 'KD>"EYXlHHR'
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    list_0 = []
    str_0 = "elu"
    int_0 = -1073
    tuple_0 = (list_0, str_0, int_0, str_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    float_0 = -2512.2239
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    float_0 = -4085.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    float_0 = 1098.0
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    str_0 = "U\x0cw"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    int_0 = -2713
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_1540():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1541():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    none_type_0 = None
    bytes_0 = b"\xc8#\x8d\xd7\x97\x14\xb4\xeb"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_1,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    str_0 = "x3XQRqsFn~w2FBB/`1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    object_0 = module_1.object()
    bool_0 = True
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    bytes_0 = b"k1\xb08\xd0\xfe\xe1\xa6~\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    str_0 = "bgdCR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    int_0 = -153
    list_0 = [int_0]
    module_1.object(*list_0)


def test_case_1549():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1550():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    float_0 = -2203.567457
    set_0 = {float_0}
    float_1 = -493.3705
    module_0.get_new_command(set_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    bytes_0 = b"\xa2\x1e\xfa\xd3v\xe1\x83\x81E\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    int_0 = 776
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_1556():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1557():
    float_0 = -1158.5356
    dict_0 = {float_0: float_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    bytes_0 = b""
    float_0 = -3007.3812
    module_0.match(bytes_0, float_0)


def test_case_1561():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1562():
    float_0 = -1355.56368
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    bytes_0 = b"_\x95\x93\xaf\xa3\xb1\xc6\x88\xf9\xd5B\x94\x11\x97@\xbb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    int_0 = 167
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    none_type_0 = None
    bytes_0 = b""
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    str_0 = "N1[9e"
    set_0 = {str_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    str_0 = "3np@b"
    str_1 = "5!eu\re."
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, str_1: object_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    float_0 = 3773.7
    str_0 = "(6gyp;w;S"
    list_0 = [float_0, float_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    str_0 = "~*qSiHS_J"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    int_0 = 33
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bytes_0 = b"U1\x0bN\xb3\r\xa6I\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    bytes_0 = b">O\xa7\xbbs\xe9\xde\x0e\xd5j\x00\xf2\xc7\x92\xf0"
    module_0.match(bytes_0, bytes_0)


def test_case_1575():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1576():
    str_0 = "pJM*HL2eQd&$wXSi cY*"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


def test_case_1577():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1578():
    str_0 = "L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    int_0 = -1508
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    tuple_0 = ()
    module_1.object(*tuple_0, **tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    str_0 = "^|hbR=}DZI*7aB"
    none_type_0 = None
    str_1 = ""
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    str_0 = "qWbt`uT!O19r-"
    str_1 = "7ta#"
    dict_0 = {str_0: str_1, str_1: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    int_0 = 986
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bytes_0 = b"'\xf5\x98.\x07\x8a\xd5S\xf3\x93\xa4\x1a-x\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    int_0 = -1419
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    int_0 = 3563
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    int_0 = 957
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    bytes_0 = b"2\x16\xbc\x9b\x9d\x1bG\x87\xf5\x94\xcb\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bool_0 = False
    tuple_0 = ()
    float_0 = -2637.08
    set_0 = {bool_0, bool_0, tuple_0, float_0}
    tuple_1 = (bool_0, tuple_0, set_0, bool_0)
    list_0 = [tuple_1, tuple_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    bytes_0 = b"uO\xa3 &"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1592():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1593():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    str_0 = "\nE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    complex_0 = 1636.6 - 155.2664j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    none_type_0 = None
    str_0 = "Lv\x0cz%'"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    float_0 = 3259.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    int_0 = 872
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    str_0 = "HS"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    bytes_0 = b"d\x97\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    int_0 = -2827
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    str_0 = "SE1|ve30B{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    str_0 = "1GR&_"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    object_0 = module_1.object()
    module_1.object(*object_0)


def test_case_1607():
    pass


def test_case_1608():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1609():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    str_0 = "Jdl}XW=]f"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    int_0 = 1646
    set_0 = {int_0, int_0, int_0, int_0}
    str_0 = "3O0{~KIh"
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (str_0, bool_0, tuple_0)
    module_0.match(set_0, tuple_1)


def test_case_1612():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1613():
    complex_0 = -516.553 - 1761.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    bytes_0 = b",lO\x9b"
    list_0 = [bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    float_0 = -380.68423
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    bytes_0 = b"\xcb\x85L\xd3\x99z9$\xec\xc4\x9e\xc7"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    int_0 = -4512
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    str_0 = "-bCvt[_^YR9W>B|"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    int_0 = -983
    object_0 = module_1.object()
    list_0 = [int_0, object_0]
    dict_0 = {}
    tuple_0 = (dict_0, int_0, list_0)
    tuple_1 = (list_0, tuple_0, dict_0, dict_0)
    module_0.get_new_command(tuple_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    bytes_0 = b"B\xce\x8a\xe7@"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    float_0 = -1393.356648
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [float_0]
    tuple_1 = (float_0, tuple_0, list_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    float_0 = 4141.835302
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    bool_0 = False
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    int_0 = -744
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    none_type_0 = None
    str_0 = "o.0k?+mC\t'?"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    complex_0 = 373.6 - 2781.2329j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    str_0 = "-eYmpX@<So79Re"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    bytes_0 = b"\xd5\x1f\x07\x93P\xbez\xc7\xdb\xc1\x82b2\x00\x84)\xe2\xbe\x87S"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    bytes_0 = b"\x85"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bytes_0 = b"\x05U[9\xc9Y?\xa6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    int_0 = 4879
    bool_0 = True
    list_0 = [bool_0, int_0]
    tuple_0 = (list_0, list_0)
    float_0 = 220.97
    tuple_1 = (int_0, bool_0, tuple_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    bytes_0 = b"r\xc4\xf4bQg\xb0\xefp\xc5\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    float_0 = -255.053
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0, dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    int_0 = -873
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    dict_0 = {}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


def test_case_1645():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1646():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    bytes_0 = b"\xb3\x08X\xc4\x15="
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    int_0 = -5080
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    bytes_0 = b"\x88\xb8\xc4=F\x08\x1bV\x1a\xdc\x88\xac:\x94\xac0\xaf5R\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    str_0 = "ZF_>-n*nZB/"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1651():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1652():
    bytes_0 = b"\xbc\xe2\xedg.V\x93\xb8\xba9*fT[\xf9\xd3\x7f\xc2K\x05"
    dict_0 = {bytes_0: bytes_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    str_0 = "#9i8W:S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    str_0 = "H\\c\x0bz\ts17~TuCLr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    bytes_0 = b"\x9f\xf2\xe2li\xbc_\x16\x00\xd7\xf5fE\xdb\x96\x89\xa9[\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    complex_0 = -33.56171 - 3295.15241j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    float_0 = 4555.9851
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    str_0 = "k%bLw6[0f! "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    str_0 = "\\d,MIEUh?(G3p\nM\t\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bytes_0 = b"\xf1\x89I\n\xd1\xa1\xb5\x94U\xeb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    bytes_0 = b"dk\x07\x9b8\x8a\xbd\xa9\xc6\xf3\x1fFc\x84\x8d\xf5|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    int_0 = 2981
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    str_0 = "WCo"
    str_1 = "X{|@k!"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    int_0 = 1423
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    str_0 = "N0q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    int_0 = -500
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    bytes_0 = b"C\x90WO\xed\x81t\x9a\xd5\xd6\xcdg\xcf[V\xe2\xdf\xef[\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    float_0 = -430.22825
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    str_0 = "13lB:qYJsI kUY"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    bytes_0 = b"\xff\x8eI\xcd<"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bytes_0 = b"\x14Y\xdc\xe0'?\xe8\xf5XE=\x80"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    int_0 = 321
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    int_0 = -1486
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    object_0 = module_1.object()
    str_0 = 'o"Vp/FgFj|`zTkR'
    str_1 = ".G)oj\ruHimT*!rg>Il3"
    str_2 = ".'x^2tt\x0b7\tQ&"
    dict_0 = {str_0: object_0, str_1: object_0, str_2: object_0}
    module_1.object(*object_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    int_0 = 1053
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    float_0 = -1026.54521
    module_0.get_new_command(float_0, float_0)


def test_case_1679():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1680():
    int_0 = -93
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    str_0 = ")WSB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    complex_0 = -2612.620225 + 3018.325488j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    complex_0 = 3621.13333 - 1271.3635j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    str_0 = "i2/cL^Z+49AOom![sAH["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    str_0 = "nNT[z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    complex_0 = -2980.7209 - 194.875389j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    bytes_0 = b"d\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    bool_0 = True
    bool_1 = True
    str_0 = "P,<pqWBU$.1(7{h"
    bool_2 = False
    tuple_0 = (bool_0, bool_1, str_0, bool_2)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    complex_0 = -3090.87052 + 4076.3368j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    bytes_0 = b"\x07\xc2i$\xd84"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    str_0 = "6\x0c}\tdg^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    int_0 = 1267
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    complex_0 = 1217.295721 - 658.59j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1697():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1698():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bytes_0 = b"\x82d\xc2\x98"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    int_0 = 2614
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    int_0 = -5684
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    bytes_0 = b" \x92\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    list_0 = []
    str_0 = "Bf"
    tuple_0 = (list_0, list_0, str_0, list_0)
    tuple_1 = (list_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    none_type_0 = None
    int_0 = 3315
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    int_0 = 1832
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    bool_0 = False
    bool_1 = False
    set_0 = set()
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    tuple_0 = (bool_0, bool_1, set_0, dict_0)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    float_0 = -1198.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    bytes_0 = b"\x03\x1a\x87\xbc\xbex"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    bytes_0 = b"\x92\x12X\x9b\x00Q\xe7\xb0\x0f$z\xbe^\x90\xfa"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    str_0 = "~H"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: tuple_0, str_0: str_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    int_0 = -1478
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    int_0 = -1982
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    str_0 = "!UuoY$.V5FbF|g(LB\\"
    module_0.match(str_0, str_0)


def test_case_1719():
    pass


def test_case_1720():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1721():
    int_0 = -1703
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    int_0 = -1813
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    int_0 = 4199
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1, bool_1: bool_1, bool_0: bool_1}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


def test_case_1728():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1729():
    float_0 = 483.611
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    str_0 = ")H7U{/jZ{'!8Z(}4Em5b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    bytes_0 = b"/q\xc0)\xb8\xbc\xe2Y)\xea\xd8\xbf"
    bytes_1 = b"5d\xcc!\xb0b>Y\xa5\xb3"
    module_0.match(bytes_0, bytes_1)


def test_case_1732():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1733():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    float_0 = 2315.526793
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    str_0 = "\\p6!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    str_0 = "S"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    str_0 = " %|&vdPIQ ,|)6{G9X"
    module_0.get_new_command(str_0, str_0)


def test_case_1738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1739():
    str_0 = "`=sc^="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    str_0 = "^!K9>&@8\nRIlZJx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bytes_0 = b"jn\xba\xb1\xa3R\xe8m\xe9\xc0\x9f4W\xb4\x8c2\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    list_0 = []
    object_0 = module_1.object(*list_0)
    set_0 = {object_0, object_0, object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    str_0 = "%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    bytes_0 = b"\x9c$\xc9|\xc3\xab\x7f\xc6$\xc1j[\xf9\xbb\xbd/"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1745():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1746():
    float_0 = -1942.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    str_0 = "{\r>7\r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    bytes_0 = b"I,\xb7\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    bytes_0 = b"\xda\xe9\x04\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    int_0 = 1333
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    str_0 = ",?Uid*6lhydM"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    complex_0 = 1398.318826 + 809j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    int_0 = -1079
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    str_0 = "N"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    str_0 = "9$d>lm^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    str_0 = "Ee:M@}]OquX 3&5]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    bytes_0 = b"\xfa[3\x98\xec\xe0\x8a\x8e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    int_0 = -1040
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    bytes_0 = b"~\xe6\xbe\xccy"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    str_0 = "<YX|;aco_=0/"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    int_0 = -998
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    float_0 = -2841.854
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    bytes_0 = b"o\x1d\xc5?\xba\x1f\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    int_0 = -2053
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    str_0 = "\":H{t+~xOILK{z'/Wb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    bytes_0 = b"\xba\x11\x9aVz\xb8B\xc4\xc7\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    bytes_0 = b"\xbd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    int_0 = 359
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    int_0 = -70
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    str_0 = "pQMyZ:AS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    float_0 = -2764.787
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    str_0 = ",^W].0ZH ~p"
    bytes_0 = b"\x14S9\x1d\xb04\x84B\xed\x1f\xf9\x8d\xef\xf1\xffSRB\xfb\x07"
    module_0.get_new_command(str_0, bytes_0)


def test_case_1778():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1779():
    float_0 = -240.747466
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    float_0 = -1156.2106
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    int_0 = -5634
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    bytes_0 = b"\xba"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1783():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1784():
    bytes_0 = b"k\xfd\x95z\x05H\x1a\x91\x07'\xd3\xa4"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    list_0 = []
    object_0 = module_1.object(*list_0)
    set_0 = {object_0, object_0}
    module_0.match(object_0, set_0)


def test_case_1786():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1787():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    int_0 = -2736
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    complex_0 = -236.251413 + 1905.130601j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    float_0 = -357.298597
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    str_0 = " "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0, dict_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    float_0 = 340.7798
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    str_0 = "\\Q%o"
    str_1 = ">ChMRGtcS%"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    str_0 = 'FC\x0b"u^[|*+gP[ISk[4'
    list_0 = [str_0]
    dict_0 = {str_0: list_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    bool_0 = False
    tuple_0 = (bool_0,)
    str_0 = "2ke`=W{4/\x0cF\tQ|"
    tuple_1 = (bool_0, str_0)
    dict_0 = {tuple_0: bool_0, tuple_1: str_0, str_0: bool_0, tuple_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    float_0 = 237.548
    list_0 = [float_0, float_0]
    tuple_0 = (list_0,)
    module_0.match(float_0, tuple_0)


def test_case_1797():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1798():
    float_0 = 3293.873
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    complex_0 = 502.1985 - 4633.03j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    str_0 = "[aYtR]"
    bool_0 = True
    bool_1 = True
    set_0 = {str_0, bool_1, str_0}
    list_0 = [bool_0, str_0]
    tuple_0 = (str_0, bool_0, set_0, list_0)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    bool_0 = True
    bytes_0 = b">-B\x8c\x82\x82{\xe6\xa9"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bytes_0: bool_0}
    list_0 = []
    tuple_0 = (bool_0, bool_0, dict_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    bytes_0 = b"Xy\xd7\xd2\x18"
    set_0 = {bytes_0}
    list_0 = [set_0, bytes_0]
    list_1 = [set_0, set_0, list_0, set_0]
    module_1.object(*list_1, **list_1)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    str_0 = ""
    set_0 = {str_0}
    dict_0 = {}
    float_0 = -2282.0
    tuple_0 = (str_0, str_0, dict_0, float_0)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bytes_0 = b"P\xd5%\xaf`\xb8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    int_0 = 2629
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    str_0 = "i\x0b'"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    bool_0 = False
    int_0 = 19
    dict_0 = {bool_0: int_0}
    bool_1 = True
    list_0 = [dict_0, bool_1]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    str_0 = "vt\x0bH\x0cflhg\n@$stfz@oIT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    str_0 = "uyp>8_J8l\x0c:{VCQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    bytes_0 = b"\x02\xf0\x06T\xc5D\xa3\x94\x02x|u\x9cz\xc6 "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    int_0 = -1112
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    bool_0 = False
    bytes_0 = b"mC\x17O\x9c\xe9\x9c\x1d\x01\x81it\x94\xc8"
    dict_0 = {bool_0: bytes_0, bool_0: bytes_0, bool_0: bytes_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_1816():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1817():
    str_0 = "\\9ait}T\nGR3zOf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    int_0 = 4526
    bool_0 = True
    float_0 = -2109.8148
    tuple_0 = (int_0, bool_0, float_0)
    int_1 = 1844
    int_2 = -645
    dict_0 = {tuple_0: int_1, int_2: int_1, float_0: int_2}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    bytes_0 = b"\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    bytes_0 = b"\xc6\xf2T\xe5B)\xaccg\x00\x1c\x1c\x06\xad\xb2\xf4\xd3\xd5*\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    bool_0 = True
    list_0 = [bool_0]
    str_0 = "CTum}{<3B;T[NCst^F;"
    none_type_0 = None
    str_1 = "XH5Dif9_0CSJZn>aG"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    str_0 = "v@S\rmoR"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    int_0 = -14
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_1826():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1827():
    int_0 = 3849
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    bytes_0 = b"\xc2b\xca\xa4\x14>~R\x12\xf0\x08\x85\x8ev\xf6\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    object_0 = module_1.object()
    tuple_0 = ()
    set_0 = {tuple_0, object_0}
    tuple_1 = (object_0, object_0, set_0)
    list_0 = [object_0, tuple_1, object_0, set_0]
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    int_0 = -34
    bool_0 = True
    str_0 = "WLqR)^_PI:hO>Z"
    int_1 = -351
    tuple_0 = (int_0, bool_0, str_0, int_1)
    list_0 = []
    bytes_0 = b"&\xa3\xc8\x1fT\x88\xdf\xae_"
    tuple_1 = (int_0, tuple_0, list_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    str_0 = ".s;Ap["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    str_0 = "$f_idMs"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    float_0 = 1262.38827
    module_0.get_new_command(float_0, float_0)


def test_case_1838():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1839():
    float_0 = -894.178207
    int_0 = -102
    set_0 = {int_0, int_0, int_0}
    bool_0 = False
    dict_0 = {bool_0: int_0}
    tuple_0 = (float_0, bool_0, dict_0)
    tuple_1 = (int_0, set_0, tuple_0)
    module_0.match(float_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "W]"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    bytes_0 = b"aR\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    str_0 = "isl[x(\x0cF;g?&jP4YM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    bytes_0 = b"7\x02 \x97]\xcb\x9d\xd6~\x9a\x85-W\xe1\x0e\xea"
    module_0.match(bytes_0, bytes_0)


def test_case_1847():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1848():
    float_0 = 1219.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    none_type_0 = None
    str_0 = 'a"gAwQ*TEQB2].b\x0b$v'
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    str_0 = "H@[D3h<gZy\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    str_0 = "3\x0b"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


def test_case_1852():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1853():
    str_0 = "fJUq;G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    str_0 = "*U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    int_0 = 3224
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    str_0 = "T"
    module_0.get_new_command(str_0, str_0)


def test_case_1857():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1858():
    int_0 = 2796
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    str_0 = "QD(v'B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    int_0 = 836
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    none_type_0 = None
    float_0 = -910.537359
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    str_0 = "Gl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    int_0 = 4260
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    int_0 = 627
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    complex_0 = -2159.56 + 2842.252j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    list_1 = [list_0, list_0, tuple_0, tuple_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    complex_0 = 983.97404 + 2296.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bytes_0 = b"\x17\xa3\x0cC\xbc\x15\x90\x0cy^\x9d+\x948\xe9\x82@\xefw\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    complex_0 = 1237.98 + 1470.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bytes_0 = b'"<\xbbz\xf6\x1b\xd0\xd9s\x7f#\xcd\xc87\xdb\xe5k\x8c\xad'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    bytes_0 = b"\x90#"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    bytes_0 = b"\xd7\xdb\xba\xdc\xcb\xa7\x0c[\x87\xee\xcf\xab\xb4,C"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    bytes_0 = b"\x9a\xcdT\xab#\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    int_0 = 135
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    int_0 = 1679
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = False
    tuple_0 = (set_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    bytes_0 = b"!\xfc\x82\x11\xbeN\xe2\xd8\x88\x13\x9a(\xf4a|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    bytes_0 = b"\xf9T\xc5\xf6M\xecB\x8fQm\\\xaa\xae\x00\x13\xfa\x17O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    int_0 = -2014
    list_0 = [int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    float_0 = 2267.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    int_0 = 241
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    bytes_0 = b"3$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    str_0 = ":c\ne}7%K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    bool_0 = False
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    str_0 = "G?q"
    str_1 = 'G"ffDo\tZcTtj`NT6/X'
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    bytes_0 = b"\r,k\xfc\xeaYDcSCt{\xe4\x9f\xf6\xc5\xb2Lu"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    int_0 = 4064
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    bytes_0 = b"\xf4\xea\xef\xff\x8fz\x0f\xccH8~<\x0e\xf2\xcf"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    int_0 = -1856
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    int_0 = -1287
    int_1 = -2196
    bytes_0 = b"\t"
    bool_0 = False
    tuple_0 = (int_0, int_1, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    int_0 = 1745
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    str_0 = "{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    bool_0 = False
    bytes_0 = b"\xde\xbd\x8b!\x8a"
    tuple_0 = (bool_0, bytes_0)
    complex_0 = 830.8 + 1421.8054j
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    str_0 = "27M\n6;83H(FBM_Yd`+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    bytes_0 = b"\x15"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (bytes_0, bool_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    str_0 = "5G"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    int_0 = 436
    module_0.get_new_command(int_0, int_0)


def test_case_1907():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1908():
    float_0 = 4304.9895
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    str_0 = "aB|I?<Cm@aGG7V"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    bytes_0 = b"\xa4\xf5&0s"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    int_0 = -249
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, int_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    float_0 = 3430.32969
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    bytes_0 = b"\x17\xae\tp(\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    float_0 = -2520.25
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    int_0 = -774
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    int_0 = -596
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    bool_0 = False
    int_0 = -1832
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    int_0 = -1901
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    float_0 = 107.04049
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    str_0 = "\tMv2<o'$<:NS8"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    str_0 = "Wo;v|>}+!KP}s]Dt89]l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    int_0 = 2244
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    bytes_0 = b"\xda\xda\xb3\xd9\x84R\x13q\xeb\xf9x\xa9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    dict_1 = {bytes_0: dict_0}
    module_1.object(*dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    str_0 = "\t}1_=4\x0cM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    bool_0 = False
    float_0 = -999.8
    dict_0 = {bool_0: float_0, float_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    str_0 = "\tb~n7E"
    set_0 = set()
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    float_0 = -3124.7
    bytes_0 = b"[\x1c\x04\xc8\x19\x89\x8f\x8c9"
    bytes_1 = b""
    tuple_0 = (float_0, set_0, bytes_0, bytes_1)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    int_0 = 898
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    int_0 = -1717
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    bytes_0 = b"\x8d\xef>z\x00X|n-\x1e\t\xd9\x92\xbd\xf3\xc87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    bytes_0 = b"Es\x1d\t\xfdq\x17\xddO\xaa0\xb1\xe8\xc339\xc1\xcd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    int_0 = 2201
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    int_0 = -1168
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    str_0 = "c7?\n{ru^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    str_0 = "WZ?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


def test_case_1940():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1941():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    float_0 = -1226.835
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    bytes_0 = b"\x9d\x89\xaeZo@X\xdb\xe8\xe5}\xaa\x08\xc7"
    list_0 = [bytes_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


def test_case_1945():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1946():
    bytes_0 = b";\xd8\x8aR\xa2\x91\x11c\x19"
    bool_0 = True
    set_0 = {bytes_0, bytes_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    float_0 = 3262.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    int_0 = 4095
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    float_0 = -2120.756
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    str_0 = "cjR=/n\x0cH`w&"
    set_0 = {str_0, str_0}
    str_1 = ""
    module_0.get_new_command(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    none_type_0 = None
    int_0 = 2310
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    int_0 = 2943
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    int_0 = 289
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    int_0 = 391
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    int_0 = -241
    bytes_0 = b"\xb4?O\xc4\xee\x97\xab"
    float_0 = -2315.96185
    tuple_0 = (int_0, bytes_0, float_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    str_0 = "W/%$]H@y)BT1V"
    int_0 = 2322
    tuple_0 = (str_0, int_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    int_0 = -543
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    complex_0 = -1449.957 - 997.2732j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    bytes_0 = b"u\xad\x81\xba\x0b7MvA\x18\x88\xec"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


def test_case_1962():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1963():
    int_0 = 716
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    bytes_0 = b"\x07r@4\x8fs\x11$jE\xc8"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    float_0 = -888.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    bytes_0 = b".\\_}\x1f\xe7(a%[\x95\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    bytes_0 = b"*\xbc,\xff-\xf8\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    bytes_0 = b"\xe2;5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    int_0 = 2349
    int_1 = 462
    module_0.get_new_command(int_0, int_1)


def test_case_1970():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1971():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    dict_0 = {bool_0: tuple_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    str_0 = "B\x0coM8a6<k:!$\tx/A4dc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    int_0 = -2876
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    complex_0 = 292.78098 - 4174.87j
    set_0 = {complex_0, complex_0}
    int_0 = 2133
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    bytes_0 = b"\x03\xf7\x8a1q\x90S"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    int_0 = 775
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    bytes_0 = b"\xc3\xce\x18\xc9{\xfd4\xf5jE7\xaf\x950B\xb3%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    bytes_0 = b"QQ\x87\xf29"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    bool_0 = False
    float_0 = 2423.652307
    set_0 = {float_0, float_0, bool_0}
    int_0 = -1766
    tuple_0 = (set_0, int_0, bool_0)
    str_0 = ""
    tuple_1 = (tuple_0, str_0)
    module_0.match(bool_0, tuple_1)


def test_case_1981():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1982():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    list_0 = []
    object_0 = module_1.object(*list_0)
    tuple_0 = (object_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    str_0 = "\tLWn"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    complex_0 = -486.42 - 677.6j
    object_0 = module_1.object()
    module_0.get_new_command(complex_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    int_0 = 650
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    bytes_0 = b"\xcd\xe8gy\xc5I\xf2\x94\x082\x81\x1fr\xd5\xd6\x976"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    int_0 = -1792
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    str_0 = "#c0Zv$T\rDe"
    set_0 = {str_0, str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    bool_0 = False
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [bool_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "yoCZG=tb,E\r51N!w5N/8"
    none_type_0 = None
    str_1 = 'Zx\to=+",'
    str_2 = ""
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    str_0 = '.t25!>w"'
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: bool_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    bool_0 = True
    bytes_0 = b"xu\xd47\x01)\xec\xa8\xfd\xd0"
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bytes_0: bool_0, bool_1: bool_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    bytes_0 = b"U]\xd6J\x02/\x94\xdc\x8f\x1e "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    str_0 = "UX?\r"
    bool_0 = True
    float_0 = 1651.546028
    tuple_0 = (str_0, bool_0, float_0)
    dict_0 = {tuple_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_1996():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1997():
    str_0 = "#Ju_eM\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    str_0 = "t\n\x0b:6;|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    int_0 = -1541
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    none_type_0 = None
    int_0 = -2792
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    int_0 = 1437
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    int_0 = -2199
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    none_type_0 = None
    str_0 = "g^e4"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    bytes_0 = b"n\xde\xb4V;\x9a["
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    bytes_0 = b'q\xae\n\xc9\\"\x84\xdb\xdf\xd8'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    str_0 = "so3n=/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    str_0 = "HB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    bytes_0 = b"d\xfa\x07\xdf\xa2Df\xe0;\xd4wb\xaf\x11o"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    float_0 = -1830.594261
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0, dict_0, float_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    str_0 = "@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    bytes_0 = b"#\\\x9b\x1e\x12\xef\xba J\x81\xd1@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    int_0 = 393
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    str_0 = "eIc"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, bool_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    bytes_0 = b"\xf4\xc7\xa3\x0f?\\VD\xd6\xd9\x1av\x94d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [bool_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    float_0 = -3216.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_2022():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2023():
    int_0 = 1520
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    bytes_0 = b"%\xb1\xb9\xbe\x00\x15[4\xc2\xaa\x90"
    float_0 = 2937.1434
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    int_0 = 1060
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    bytes_0 = b";m\xa0\x19!\xffu:\x06\x06\x89\x1c\xf3\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    complex_0 = -333.1 - 327.50337j
    str_0 = "]*T{;EM;"
    bool_0 = True
    bool_1 = False
    tuple_0 = (complex_0, str_0, bool_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    float_0 = 144.272
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    bytes_0 = b"\xd7\x98\xdd\x15{\x03"
    bool_0 = False
    dict_0 = {bytes_0: bool_0, bool_0: bool_0, bool_0: bytes_0, bool_0: bool_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    str_0 = "H3IZBBHIO,D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    bytes_0 = b'x"\xab\xfa>\x1f\xee\x14A\xec\xdf\xd8\xc0\x00\x1dK\xf3m-'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    str_0 = "w)RMc4."
    str_1 = "5\x0c"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


def test_case_2033():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2034():
    int_0 = -328
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, int_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    int_0 = -1948
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    int_0 = 1450
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    bytes_0 = b"I]\x89\x13\xcc\x8b>`\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    float_0 = 13.8771
    list_0 = [float_0]
    bytes_0 = b"\x02P\xfcv\x1a"
    set_0 = set()
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (list_0, bytes_0, set_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    int_0 = -803
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    bytes_0 = b"\xbe\x05=\x01d\xbaG\x1c\x83\x04`z\xee\xeaG\xaf\xccY\x98\xed"
    module_0.match(bytes_0, bytes_0)


def test_case_2042():
    pass


def test_case_2043():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2044():
    int_0 = -3336
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    int_0 = 3214
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    int_0 = 1366
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    bytes_0 = b"\x02-\xc3>\x83\xb9\x1d-7\x13w\xdc"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    str_0 = " CP5h5RaowhDvi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    float_0 = -2091.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    int_0 = 5039
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    bytes_0 = b"\x9bmF\xb9\x03\x93-,\x0e\n6\xad\x9c\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    str_0 = "LtkbG-)HN"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    str_0 = ")`tc-,17RnbOc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    int_0 = -638
    list_0 = [int_0, int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    int_0 = -1929
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    float_0 = -1951.0
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bool_0 = True
    int_0 = -933
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    int_0 = -1833
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    float_0 = 2947.696
    set_0 = {float_0}
    bool_0 = True
    list_0 = [bool_0, set_0]
    tuple_0 = (set_0, bool_0, list_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    float_0 = 4.6
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    str_0 = ".w*b5]zYQ|W"
    float_0 = 2808.0
    bool_0 = True
    str_1 = 't*}Y\tM"Tx\x0bm\x0b>&'
    tuple_0 = (str_0, float_0, bool_0, str_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    bytes_0 = b"\xdd\x13\xd0\x1aS\xe0\x84\x89\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    int_0 = -1609
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    str_0 = "v)"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    float_0 = -1585.95701
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    int_0 = -1063
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    bytes_0 = b"\n\xfc@>\xfbdLbKF\xc8"
    int_0 = -622
    tuple_0 = (bytes_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    complex_0 = -947 - 527.96387j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    bool_0 = True
    list_0 = [dict_0, dict_0, bool_0, dict_0]
    bool_1 = True
    tuple_0 = (list_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    tuple_0 = ()
    bool_0 = True
    str_0 = '\x0bCuCl"N|ddBvg(u#'
    tuple_1 = (tuple_0, bool_0, bool_0, str_0)
    list_0 = [tuple_1, tuple_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    str_0 = '[5"VY\r8'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    int_0 = -867
    float_0 = 2271.69
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    str_0 = 'w]U~Ox?{o?Q"Cl@u'
    module_0.match(str_0, str_0)


def test_case_2081():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2082():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    bytes_0 = b"eO\x17\x05\x8c\xe7\x02\xffs\x13"
    int_0 = 1162
    tuple_2 = (tuple_1, bytes_0, int_0)
    module_0.get_new_command(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    float_0 = 683.07
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    bytes_0 = b"y\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    int_0 = -647
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    float_0 = -99.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    int_0 = 72
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2091():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2092():
    int_0 = -364
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [int_0, dict_0, int_0, int_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    complex_0 = 331.3 - 1135.029205j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    bytes_0 = b"\x02\x91#~X\x1b\xcd\xcb\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    float_0 = -3107.9046
    int_0 = 103
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    int_0 = -2074
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    int_0 = 2888
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    str_0 = "vbC<R"
    module_0.match(str_0, str_0)


def test_case_2100():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2101():
    float_0 = 562.7
    set_0 = {float_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    str_0 = "rX:]>} "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    bool_0 = True
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    str_0 = "^y\x0b^q!W{(k=8Ullopt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    int_0 = -2761
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    int_0 = 3
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    str_0 = '1!(@RqzCb_hST?>"*e'
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    object_0 = module_1.object()
    set_0 = {object_0}
    tuple_0 = (object_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    str_0 = "q"
    tuple_0 = (str_0,)
    tuple_1 = (str_0, tuple_0)
    module_1.object(**tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    bytes_0 = b"\xc3pC\xba\x1f\xb4\xd5\xa2-\xad\xd3"
    module_1.object(**bytes_0)


def test_case_2111():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2112():
    str_0 = "4\x0cf`&0/bL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    float_0 = 3348.037
    module_0.get_new_command(float_0, float_0)


def test_case_2114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2115():
    int_0 = -3057
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    str_0 = "(cf^QT,E1V|xYU"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    bytes_0 = b"\x99\xc1]\x15\xcb+\xb3\x9c\x93c5L\xdc0rN'\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    bytes_0 = b"VG-\x89\n\\\xfa0\x8dL\xa5\x10\x95"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    str_0 = "L/*gbhBo~(JN{;?%_W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    bytes_0 = b"\x17\x8d\xfb\xb9qm\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    str_0 = "bNCP6AY&>T/u5'^|"
    int_0 = 2663
    set_0 = {int_0, str_0}
    tuple_0 = (str_0, int_0, set_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_2122():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2123():
    bytes_0 = b"'\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2124():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2125():
    int_0 = 2619
    module_0.match(int_0, int_0)


def test_case_2126():
    pass


def test_case_2127():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2128():
    complex_0 = 2203.69406 - 1311.5865j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    str_0 = "\\l[9,x8!N)khvDo\\"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    float_0 = 3712.92105
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    bytes_0 = b"\xd4\xbb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    bytes_0 = b"\xaf\xe1\x03"
    dict_0 = {}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    str_0 = "qCp :bn\t("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    bytes_0 = b"W\x1dyj\xe6\xa5\xc5\xc5DH\xd1"
    module_0.match(bytes_0, bytes_0)


def test_case_2136():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2137():
    str_0 = "TwNIqGYO=b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    bytes_0 = b"/\x05\xf3\xdd\xecJ6Z\x8c\x1f\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    str_0 = "J0=\x0c^bKX~4`l+\n;OawZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    bytes_0 = b"{\xb1\xd4m\x84\xb4\x94\x1b\xbf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bytes_0 = b"\x92\xea"
    str_0 = "K-/nfOoVC\r`gmMy"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    bool_0 = False
    str_0 = "Z9F~t\x0c|~"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    float_0 = -2748.28975
    str_0 = "z0<Olw&]eFyf:"
    tuple_0 = (float_0, str_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    bytes_0 = b"\xb5\xfb\x88\xc6N\x89\x89"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2145():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2146():
    int_0 = 1825
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    bytes_0 = b"\x02\x9a_\xdb\x80\xac\x1a\x052\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    complex_0 = 2137.78 - 147j
    set_0 = {complex_0, complex_0}
    bytes_0 = b"P\xef\xbc\xec"
    str_0 = "UiE@d"
    tuple_0 = (set_0, bytes_0, str_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    str_0 = "\\|q\"|E4k^zQp\\'6 &"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    bool_0 = False
    str_0 = "8a*<&MS\r"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    str_0 = "<("
    set_0 = set()
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    float_0 = 991.15
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    complex_0 = 457 + 3342j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    float_0 = 1258.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    float_0 = -1805.52901
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    bytes_0 = b"_\t1_\x1c\x853A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    float_0 = -1262.6
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    float_0 = 4365.2219
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    int_0 = -3452
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    complex_0 = -180.986396 + 2632.15j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_2166():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2167():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    bool_0 = True
    list_0 = []
    int_0 = -2133
    tuple_0 = (list_0, int_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    str_0 = ",2X\x0cdx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2171():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2172():
    str_0 = "*C&CV>bc1=<E:? Xe<v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    none_type_0 = None
    int_0 = 617
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    bytes_0 = b"x\x08V\x8f\x1b\x8b\xe9\xa3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    str_0 = "/S}f@/"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    complex_0 = -1264.298832 - 4206j
    list_0 = [complex_0]
    str_0 = "&]M/>XfuOZk%gi"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    str_0 = "n%tQd8,G"
    float_0 = 1099.57298
    dict_0 = {str_0: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    int_0 = 2922
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    bytes_0 = b"\xdb9N0u\x0c8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    bytes_0 = b"\x15k"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2182():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2183():
    bytes_0 = b"SI=\xcd\x07\xc0"
    object_0 = module_1.object()
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, object_0: object_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    float_0 = 3134.64521
    int_0 = -2465
    tuple_0 = (float_0, int_0)
    int_1 = -932
    set_0 = {tuple_0, int_1, int_1}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    bytes_0 = b"\x82/x\x86\xf9\xa3\x14W\xf5"
    module_0.match(bytes_0, bytes_0)


def test_case_2186():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2187():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    float_0 = 1410.5
    complex_0 = 87.51571 - 1066.867626j
    module_0.get_new_command(float_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    str_0 = "a\x0bx~<;MZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    float_0 = -1483.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    int_0 = 2321
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    bytes_0 = b"Z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    str_0 = "~!\x0c9`[aZ\x0bx67 ]q,XM"
    str_1 = "LF,jq#s"
    set_0 = {str_0, str_1}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    int_0 = -2568
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    int_0 = -2732
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    int_0 = 739
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    none_type_0 = None
    int_0 = 3125
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    int_0 = -3550
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    str_0 = 'I\\! "S\x0b\t2N?VCC#VD%].'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    bool_0 = False
    bytes_0 = b"\x19Q\xd6\\\xef\xf8_o$"
    set_0 = {bool_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    float_0 = -194.37676
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    bytes_0 = b"\xa9f\xb8\xc8\xb6\xe2\xc9\xd2Y\xd5I\xbc\xe1\x8e\xc8'\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    str_0 = "VaL$J8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    bytes_0 = b"\xf5\xe3q>\xdf\xc7\xd9\xf8g\x88\xff\xe3\xeb\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    float_0 = -279.32
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    str_0 = "@0E\x0bX'OH#)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    str_0 = "})O<^qw:plx]!{\x0cz5MRs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    int_0 = -317
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    str_0 = '"v#b~+[wEMRt6U`='
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    complex_0 = 353.39 - 2690.581j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    bytes_0 = b"0v\xf1\xbd%\xa8\xf6\xaa!!i\xac9K"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    int_0 = -1832
    module_0.match(int_0, int_0)


def test_case_2217():
    pass


def test_case_2218():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2219():
    int_0 = 1443
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    list_0 = []
    object_0 = module_1.object(*list_0)
    dict_0 = {object_0: list_0}
    module_0.match(dict_0, list_0)


def test_case_2221():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2222():
    float_0 = 132.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    int_0 = 497
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0]
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    complex_0 = -1593.28663 - 1881j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    int_0 = -151
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    int_0 = -1416
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    float_0 = -71.22
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    dict_0 = {}
    bool_0 = False
    list_0 = [bool_0, dict_0]
    tuple_0 = (dict_0, bool_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    float_0 = 2739.4117
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    str_0 = "\rpL="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    float_0 = -1076.215602
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    str_0 = "\t3S9:B{92Z4~"
    bytes_0 = b"\xbf\xa6{\r}_\xa4\x0e"
    dict_0 = {str_0: bytes_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    int_0 = 3226
    bool_0 = True
    set_0 = set()
    tuple_0 = (int_0, bool_0, set_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    complex_0 = 1197.749854 - 2033.841j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    str_0 = "\x0c^X.A\nxG5'0\rfyns'F<S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    str_0 = ">\n\r+&|%\x0cg\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    int_0 = 621
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    none_type_0 = None
    str_0 = "){8\tna7j?_!A:3Hw0"
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    int_0 = 387
    str_0 = " :YDY9"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    bytes_0 = b"\x0fP\xf6\xb2\xe3\xfc\x0e\x1a\n\xb8\xd4\x96\xb2m\x08\x1d\x10"
    complex_0 = -1784.13743 - 59.14j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    bool_0 = False
    complex_0 = 1689.347049 - 396.210661j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    complex_0 = 763.1277 - 2596.7712j
    set_0 = {complex_0}
    bytes_0 = b"\xbc\xd9\xf9\x80\xf6\xc6\x06\x98?-\xa2"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    int_0 = 583
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    str_0 = "tOb>PB11J2y1TR4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    str_0 = "-Y`@6:h=FjAl|\rF$9`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    bytes_0 = b"[\xc6\xeb\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    str_0 = "O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    float_0 = 878.2
    bool_0 = False
    tuple_0 = (float_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    float_0 = 1757.626
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    str_0 = "#`{Xdf!V=mKi"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    str_0 = "[t?_\t`oy$GAq{fA}7.t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    int_0 = 1396
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    float_0 = 712.39865
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    int_0 = -2195
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    int_0 = 499
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    int_0 = -971
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    int_0 = 4096
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    int_0 = 1586
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    float_0 = -793.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    bytes_0 = b"\xc9{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    bool_0 = True
    str_0 = "9Eu(>;)U"
    dict_0 = {bool_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    complex_0 = 728.40743 - 990.93j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    bool_0 = False
    bytes_0 = b"\x14E\xf1\xea\xec`x"
    set_0 = {bool_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    float_0 = 98.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    bytes_0 = b"\xdei\x19\xbay\x94\x11=\x03P\xa3\xbe\xc9\xaaBG"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    str_0 = "%mry=I^"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    str_0 = "E?kZ12gWm\r"
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    str_0 = "-32s(O(/BW?q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    str_0 = "1["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    set_0 = set()
    list_0 = []
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    float_0 = -1264.1
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    str_0 = "Q6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    bytes_0 = b"\xcb-\xf2\x1eV\xb2\x06K\x00'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    complex_0 = -553.6 - 1043.3077j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    bytes_0 = b"K\x93\xc4\x1f\xcf<\x13,;\x061\xc9\x11\xf4O\xd6\x1c\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


def test_case_2285():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2286():
    int_0 = -1508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    tuple_0 = ()
    bytes_0 = b"\x9eu\xfb\x95"
    set_0 = set()
    tuple_1 = (tuple_0, bytes_0, set_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    str_0 = "s"
    module_0.match(str_0, str_0)


def test_case_2289():
    pass


def test_case_2290():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2291():
    list_0 = []
    object_0 = module_1.object(*list_0)
    dict_0 = {object_0: list_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    int_0 = 1190
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    float_0 = 1156.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    complex_0 = 3268.914 + 1328.32226j
    str_0 = "&0hbTGP0"
    list_0 = [complex_0, complex_0, str_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    int_0 = 738
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    str_0 = "7=p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    int_0 = 3199
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    float_0 = 19.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    float_0 = 3210.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    int_0 = 1345
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    bytes_0 = b"\x12(\xad\xc6#\xa5\x19\xd7\xa3\xaf\xa2\xf17\xd6*O\x82\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    float_0 = 1378.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    str_0 = "\nW1rQ^OL<8^xb^G$5rM?"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, bool_0: bool_0}
    bool_1 = True
    tuple_0 = (str_0, dict_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    float_0 = -45.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    complex_0 = 1665.2206 + 2521j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    int_0 = -681
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    str_0 = "7,\r3G\x0bRZ<LjK602"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    float_0 = -1510.74
    set_0 = set()
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    bytes_0 = b"S\xb2\x0b-Ib/oar"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    bytes_0 = b"\x87Hc\xe3\x88z*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    int_0 = 862
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    bool_0 = True
    str_0 = '"Z[a(-'
    int_0 = -679
    tuple_0 = (bool_0, str_0, bool_0, int_0)
    bool_1 = False
    list_0 = [tuple_0, bool_1, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0)
    bool_1 = False
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    bytes_0 = b"\x85\xc6\x08\xd6#\x073\xf1\xdf\xb81\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2318():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2319():
    int_0 = -2777
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    int_0 = -306
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    float_0 = -1537.828837
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    int_0 = -4390
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    float_0 = 612.43099
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    bytes_0 = b"\xc8\x00\xe7M=\x9d]\x0f$"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(set_0, list_0)


def test_case_2329():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2330():
    int_0 = -1944
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    float_0 = 1927.98
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    complex_0 = -2471 + 1809.41j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    bytes_0 = b"\x9d\\\x1e\xb9\xd1P_\x8fwO\x03\xb0\x1f\x1aEY\x80U"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    str_0 = "r_KP!8|(NXN=\x0c4=]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    complex_0 = 509.6 + 489.521915j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    str_0 = "Yec"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    str_0 = "v3U7gdrcI"
    str_1 = "D+>2EelK"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    float_0 = 1060.88934
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    bytes_0 = b"C\x06\x82Q\xf7\xc8\xbd3W\xbbjK\x15\xf0\xee"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    float_0 = -122.519913
    int_0 = 3380
    dict_0 = {}
    list_0 = [int_0, int_0, float_0, dict_0]
    tuple_0 = (float_0, int_0, list_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    int_0 = 3212
    module_0.match(int_0, int_0)


def test_case_2346():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2347():
    str_0 = "h-fu."
    str_1 = "r~=7Z"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    float_0 = 1364.96138
    bytes_0 = b"T\xae_u\xe7T9\xe4\xcb\x15\x03"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    int_0 = -1702
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    float_0 = -251.902955
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    str_0 = "{46+"
    bytes_0 = b"\x86Q\x0b,\x13\xfcT2\xbb\xf7\xe3\xe5\x93\xeb\x01\xda\xfc"
    bool_0 = True
    set_0 = set()
    tuple_0 = (set_0, bytes_0, set_0)
    str_1 = "H:Lo2szf>"
    tuple_1 = (bytes_0, bytes_0, tuple_0, str_1)
    tuple_2 = (str_0, bytes_0, bool_0, tuple_1)
    module_0.get_new_command(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    float_0 = -2308.9808
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    str_0 = "h|#{S\\U/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    bytes_0 = b";Y\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    str_0 = "`>}U-"
    bytes_0 = b"1,'|\xb4'\x83\x1d\x95\x1e,\x98\"\x12\x1a~\x0b"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    str_0 = "hw}J9[_s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    str_0 = 'W`"etaL~7uJ'
    module_0.match(str_0, str_0)


def test_case_2361():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2362():
    bool_0 = False
    bool_1 = True
    int_0 = -859
    int_1 = 573
    tuple_0 = (int_0, int_1)
    bool_2 = True
    bool_3 = False
    tuple_1 = (tuple_0, int_0, bool_2, bool_3)
    tuple_2 = (bool_0, bool_1, int_0, tuple_1)
    module_0.get_new_command(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    int_0 = 1811
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    str_0 = "Y!Vqo[fZ81W0\\"
    str_1 = "nA\rzcQz99O[ki^<!"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    float_0 = -4113.3
    str_0 = "gR"
    list_0 = [str_0, str_0, float_0, float_0]
    tuple_0 = (float_0, float_0, str_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    int_0 = -987
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    int_0 = 764
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    bytes_0 = b" \x1eF\x80\x0e\xaa<\xb1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    float_0 = 2784.232
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    float_0 = -2269.583
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    str_0 = "_;lfyOMMi<`$\n;6R"
    bytes_0 = b"\xe0G\xe7*\xae\xa4\x80n\xdd\xee\xd7_\xc9Q"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    int_0 = 1141
    bytes_0 = b"\x8c"
    tuple_0 = (bool_0, int_0, bytes_0)
    tuple_1 = (int_0, tuple_0)
    module_0.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    float_0 = 939.023281
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    str_0 = 'l%Q"\x0b'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    str_0 = "<+rq>QA4R^h6QlA}k-\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    bool_0 = False
    float_0 = 2677.1
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    float_0 = -1930.0761
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    float_0 = -2421.911
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    int_0 = -2164
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, dict_0]
    bool_1 = True
    module_0.get_new_command(list_0, bool_1)


def test_case_2386():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2387():
    float_0 = -794.77
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    str_0 = "97_\x0c\tG[ZPMda"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    bytes_0 = b"\xfa\x1f\x03\x06\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    int_0 = 1093
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    str_0 = "@{li[9BnrO"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    int_0 = 452
    str_0 = "y`N\nHy"
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0,)
    list_0 = [tuple_0, str_0]
    tuple_2 = (int_0, tuple_1, tuple_0, list_0)
    int_1 = -3751
    module_0.match(tuple_2, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    int_0 = 1477
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    int_0 = 506
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    int_0 = -1254
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    str_0 = "SF|h5.+5F*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    str_0 = 'p$5@wpa#4"[m\\Al;D'
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_2400():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2401():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    str_0 = "yI?Sabr.f*`\\sm:\rIK"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    float_0 = -504.304
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    bytes_0 = b"U\x82\xf8\x8e\xb8>\x11^>\x14\xbcn\x7f\xabsv"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    int_0 = -1577
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    int_0 = 2403
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    str_0 = "ACg*kx8d`I\t:\t"
    str_1 = "-N@ECi@{;bs5F92"
    str_2 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    bytes_0 = b"\x1e\xf3\x97\xd8r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    int_0 = 2138
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    int_0 = 2407
    int_1 = 819
    module_0.match(int_0, int_1)


def test_case_2413():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2414():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    str_0 = "?k>!dO>=Iwt}P.\"&D2'%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    int_0 = -1234
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    bytes_0 = b"\xa1\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    bytes_0 = b"a\xe1\xfe\xffi\\"
    int_0 = -415
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    str_0 = 'j"e;d g\x0c0A@9jKM/N s'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    int_0 = 2775
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    none_type_0 = None
    bytes_0 = b"\x0c'RS"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    bool_0 = True
    list_0 = []
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\xf9\xf1?\xe1I\x11\xdf\xcc\xf8\xd6\xf4\xda(\x97\xc6"
    tuple_0 = (bytes_0, list_0, set_0)
    tuple_1 = (bool_0, list_0, set_0, tuple_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    str_0 = "xK^tn5L\x0b>m"
    bool_0 = False
    list_0 = [bool_0, bool_0, str_0]
    dict_0 = {str_0: str_0, bool_0: list_0, str_0: list_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_0, bool_1}
    str_0 = "eFv%"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    complex_0 = -521 - 854.0337j
    int_0 = 828
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    int_0 = 110
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    bytes_0 = b"\xbd\xf1\xa6\x01\xc9+\x0b\x01u+A\x00\x07;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    bytes_0 = b"\xfa\xb47"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = []
    str_0 = "l7Z;d %o>wa"
    tuple_0 = (list_0, str_0)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    str_0 = "cZ}jz$q_Dk1"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    bytes_0 = b"a\x9b\xa8:\x04\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    complex_0 = 4087.17 - 1222j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    bytes_0 = b"c\xf7\xd8\t\x86\x94\xdd\xf8_\xf9O\xdf\xcb\x01\xd8"
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    int_0 = 1570
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    str_0 = "[mu*6p]5\x0c:Z\t?)bQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    int_0 = 2116
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    int_0 = 2256
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    bytes_0 = b"E"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    float_0 = 1086.8
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    str_0 = "?CR}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    str_0 = "zt1?W"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    int_0 = -1442
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    complex_0 = -2478 + 1103.682426j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    int_0 = 2610
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    object_0 = module_1.object()
    bytes_0 = b"R\xabq'E\x03\x11U\x0e/"
    int_0 = 450
    list_0 = [object_0, object_0, bytes_0, int_0]
    tuple_0 = (object_0, bytes_0, int_0, list_0)
    float_0 = 2077.2
    tuple_1 = (tuple_0, tuple_0, list_0, float_0)
    list_1 = [tuple_1]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    bytes_0 = b"\xc48\x81\xb8\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    int_0 = -823
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    int_0 = -27
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    bool_0 = True
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


def test_case_2456():
    pass


def test_case_2457():
    pass


def test_case_2458():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2459():
    str_0 = "LZR\tJ\x0c3e_d,jmqts2d'V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    str_0 = "F\n9VY"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    int_0 = -1125
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    bytes_0 = b"A\x9d\xc8LS+\xe9\xf37\xed\xef\x15\x87\x01\x82W\xed\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    str_0 = "U8vX4@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    complex_0 = 3856.6194 - 1346.926j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    int_0 = 287
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    int_0 = -524
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    complex_0 = 380.82302 - 655j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    bool_0 = False
    bool_1 = False
    tuple_0 = ()
    tuple_1 = (bool_0, bool_1, tuple_0, tuple_0)
    list_0 = [tuple_1, tuple_0]
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    float_0 = 516.76561
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    bytes_0 = b"P\x00\x81\xbbm\xb9v\x9f\xe0g\xc6\xcbU\x1b\x88)\xfa\n\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    float_0 = -1923.389665
    int_0 = -636
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    int_0 = -1195
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    bytes_0 = b"K\x07\x85"
    float_0 = -1258.31
    tuple_0 = (bytes_0, float_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    float_0 = 1014.7891
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    str_0 = "dFTg\\Zt5`pn!uW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    complex_0 = -229.56 + 391.0032j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    bytes_0 = b"\x1an\xdb\xa2wk\x18\xaeK3\xc6\xc0U\xccC\xa9U"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    none_type_0 = None
    bytes_0 = b"\xedt\xcd\xea"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    str_0 = "]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    bytes_0 = b"\xb0\x15\xad\xb5"
    module_0.match(bytes_0, bytes_0)


def test_case_2482():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2483():
    none_type_0 = None
    str_0 = "3>]l."
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    bytes_0 = b"\xbb\xf6&\xa9~\xf2&g\xa2*\xffn\xbd\xdc\xd2,\x1e\xcb_\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    float_0 = -952.8429
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    int_0 = 627
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    int_0 = 3392
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    bytes_0 = b"\xc2\xe4\xce\xde\xbe\xe5\xa9/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    int_0 = 2471
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    str_0 = ">km~}F?=-,[-Hm5"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    bool_0 = False
    bytes_0 = b"\xbb\x8co\xf3Gy\xc9~\x80\x10ERs+\x19?&\xc6\xc4"
    tuple_0 = (bool_0, bool_0, bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


def test_case_2494():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2495():
    none_type_0 = None
    str_0 = "N\x0bmAr#M'"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    bytes_0 = b"NW\nIC\xafs\xf8\xf2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    float_0 = -141.2
    module_0.get_new_command(float_0, float_0)


def test_case_2498():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2499():
    int_0 = -283
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    bytes_0 = b"q\x18\x14H\xcf\xfd\xe4kd\x856\x00\x06\xd3"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    bytes_0 = b"\xaf\x12\xf3\xd6\x84CI{\x8a\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    int_0 = 85
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    bytes_0 = b"\xba\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    complex_0 = -2968.33 + 126.1023j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bool_0 = True
    bytes_0 = b"\xce\xcf\xe2>X\x04\xd6\xf3\x91#Q\xc8\xec"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    int_0 = 117
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    bytes_0 = b"-2\xd6\x9c\xa9\xb3\x9c\xb2\\"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    none_type_0 = None
    str_0 = "E$?-(Oey0\ri\tJS"
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    str_0 = "M6VQRa<0:gp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    str_0 = "2R0g9+VqyS4Pk"
    str_1 = "\r.l[`ZT2v_"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    int_0 = -3144
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    bytes_0 = b"\xa5[\xcf\x06\xc2d\x14\x8b\xe1\xb2\xaa^\x12\xbcR\x918M\x1d"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2517():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2518():
    int_0 = 706
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    int_0 = -2121
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    none_type_0 = None
    int_0 = 1771
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    str_0 = ",+#^%\tQTF\x0c=.Zsv'8{%"
    int_0 = -2210
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    bytes_0 = b"\xef\x80\x16$/r\xd7\x02\x987\x19\x06\x9b\xe7h"
    module_0.match(bytes_0, bytes_0)


def test_case_2524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2525():
    tuple_0 = ()
    bytes_0 = b"\xd5!\xcbZ7[\xc0\xb97\x15\x1d\n\xd1SU\x19\xd8\x9c"
    bool_0 = True
    dict_0 = {tuple_0: tuple_0, bytes_0: tuple_0, bytes_0: bytes_0, bool_0: tuple_0}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    bytes_0 = b"kp\xf31\x12"
    bool_0 = False
    dict_0 = {bytes_0: bool_0, bool_0: bool_0, bytes_0: bool_0, bytes_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    int_0 = 1746
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    bool_0 = True
    set_0 = {bool_0}
    int_0 = 4057
    str_0 = "SMdDfEh"
    dict_0 = {bool_0: str_0}
    tuple_0 = (set_0, set_0, int_0, dict_0)
    list_0 = [int_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    str_0 = "F*3$nWs\rr[\n2t\x0c]r\\g/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    object_0 = module_1.object()
    set_0 = {object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    str_0 = "]k$aV 2{uW2~MD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    str_0 = "TUL[<Z"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    bool_0 = True
    int_0 = -495
    bytes_0 = b"_`\xa6\xfbG\x88"
    dict_0 = {bool_0: bool_0, bool_0: int_0, bool_0: int_0, bytes_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    int_0 = 2383
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    int_0 = -1931
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    int_0 = 1610
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    int_0 = 797
    module_0.get_new_command(int_0, int_0)


def test_case_2540():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2541():
    str_0 = "TH6PN<|F@Icda7.6RE,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    int_0 = -1830
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    str_0 = "FPWS^A"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    int_0 = -929
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    int_0 = 991
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    bytes_0 = b"\xc0y\xfc\x82V\x95i{/\x7f\xcb\xe1h\xa0"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    bytes_0 = b"\xe1\x18\x81&\x7fu@\xb2\xc5\xf3\xd3\xdak1\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    float_0 = -1303.0
    bytes_0 = b"\xd2+q\xf4\x1f@\xe9\x11\xcc\x8e\xc1\xaa\x1a\x9dH\\#\x0c"
    set_0 = {float_0, bytes_0, bytes_0, float_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    str_0 = '%n^"m\\n&IbUoy-Ja J'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    bytes_0 = b"\x0e\xa0#\xd1\xaf\xd9}\x97\xb2Sp\xf3t\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    bytes_0 = b";w\x15\n\x1ak+\xc9Pw\xdf4"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    bytes_0 = b"\x07"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    complex_0 = -1308.2 + 844j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    int_0 = 465
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    float_0 = 2643.019
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    int_0 = 1446
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    int_0 = -1953
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    int_0 = -52
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    int_0 = 2765
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    int_0 = -1386
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    int_0 = 1057
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    none_type_0 = None
    bytes_0 = b"p\xc3\x98\xed#\x1dNu\xf6\x1f\x95\xa0\xd4\x08\xd5\xb4"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_2570():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2571():
    none_type_0 = None
    str_0 = "\tpO\x0bL}K}#>a"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    int_0 = 3388
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0, bool_0, tuple_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    str_0 = "O} "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    float_0 = -1664.01264
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    complex_0 = 6254.61 - 1848.73j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2579():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    str_0 = "y7V;M5~"
    module_0.get_new_command(str_0, str_0)


def test_case_2581():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2582():
    bytes_0 = b"?\xe7y\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0, list_0, tuple_0]
    list_2 = [list_1, list_0]
    none_type_0 = None
    module_0.get_new_command(list_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    set_0 = set()
    tuple_0 = (set_0,)
    bytes_0 = b"\x80(\xefO\xabW\x96h\x9cg|"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    bytes_0 = b"\xbd5I^[vdoP\x0c\xe1wo\x11\x16\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    str_0 = "3w)$.C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    str_0 = "T;HpDO;';l%#"
    str_1 = '"J-'
    str_2 = 'DY">@sp}Rf5M;wn'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    str_0 = "a-2h1i)qXeJ^!o=Q~[W"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    int_0 = 4040
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    bytes_0 = b"\xeei/$\xb5\xbd\xa1Tr\x95\x0e=*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    list_1 = [list_0, list_0, dict_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    str_0 = "Fd 'L's{s\x0bs  ~7\ny3bu"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    float_0 = -1335.73822
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    str_0 = "u9>3\tfQ}Mai&,}<f ~"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    float_0 = -1208.3
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    object_0 = module_1.object()
    str_0 = "K[%~jJ~Q<^t0q]a8X"
    int_0 = -1588
    tuple_0 = (object_0, str_0, int_0)
    tuple_1 = (tuple_0, int_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    bytes_0 = b"=\xd3\x1d.\xa7\xa1!\x96t\xa1\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    bytes_0 = b"\n\xf8\xbe\xe8\x1a\x0b\xa1\xe7db\xdf\x82/"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    float_0 = 2741.402
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    str_0 = "el/y'Ult{6|"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    bytes_0 = b"\x10\x1b\xef.\xb5\xf6\x97\xaa\xc0\x96\xa5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_2603():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2604():
    str_0 = "}s`#T-+>P~`3JI2Hvg$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    bytes_0 = b"L\x14p\x9c\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    str_0 = ")@HP|x|}ZA49/'`kh`n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    int_0 = -769
    bytes_0 = b""
    dict_0 = {int_0: int_0, int_0: bytes_0}
    tuple_0 = (int_0, dict_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bytes_0 = b"^\xa9\xc3\xb4\xeb8u\xa6\xbc?"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    bytes_0 = b"\xb2\xb2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    float_0 = -1873.585082
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    int_0 = -2321
    complex_0 = -5158.397881 + 1865.1j
    module_0.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    bytes_0 = b"\x01\x16\\\xf9\xca\xa2\xc6\xa3S1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    str_0 = "v$,*|'"
    int_0 = 2185
    bytes_0 = b"\xf93\xf0"
    tuple_0 = (str_0, int_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    float_0 = 1232.9913
    dict_0 = {float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, dict_0)
    module_0.match(tuple_0, tuple_0)


def test_case_2616():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2617():
    str_0 = "2z\\|Re6(lr#<z\x0bbj`&7J"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = False
    tuple_0 = (dict_0, str_0, dict_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    complex_0 = -3360.89579 + 1418.383939j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    str_0 = "$u"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


def test_case_2620():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2621():
    tuple_0 = ()
    complex_0 = 777.8 + 2070.900578j
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    int_0 = -5069
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    int_0 = 1952
    int_1 = -532
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    bool_0 = False
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    int_0 = -479
    module_0.match(int_0, int_0)


def test_case_2626():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2627():
    bytes_0 = b"lDP\xaa\ng\x85\xfdm\x973\x85}Z\x1a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


def test_case_2629():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2630():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    str_0 = "feyvDbLm]=jXL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    str_0 = "y"
    module_0.match(str_0, str_0)


def test_case_2633():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2634():
    str_0 = "DC("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    str_0 = "\\},e1Z+pS"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    bytes_0 = b"\xf4 E\xbf\x88\xbd\x89\x16\xf0\xd7f\xd3\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    bool_0 = False
    int_0 = 2446
    tuple_0 = (bool_0, int_0)
    set_0 = {tuple_0, tuple_0, tuple_0, bool_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    float_0 = -2868.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    bytes_0 = b"m\x0f\xf1\xa1"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    int_0 = 12
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    object_0 = module_1.object()
    int_0 = -4277
    module_0.get_new_command(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    float_0 = -828.23446
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    str_0 = "`Vp4[>\"vYe'dp?J:QJ~a"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    int_0 = 1478
    float_0 = 1922.292677
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    bytes_0 = b"\xcb\xc8\x1f\x9b\x96-f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2649():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2650():
    str_0 = "+^)]u?@~cB\x0c)2e"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    float_0 = 2842.0
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    complex_0 = -1466.21064 - 890.398529j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    bytes_0 = b"\xf8z\xc6\x8as\xdf\x01`\x87\x11W\xc9\xef2\x1b"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    bytes_1 = b"\x08@\x10\xa5\x7f\xf9y\xa6\xca\xaaa"
    tuple_1 = (tuple_0, set_0, bytes_1, tuple_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    float_0 = -1604.76554
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    int_0 = 1680
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    str_0 = "\r\\//SCm\nDZS$~c5_o_K&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    complex_0 = 314.66461 - 1409.69006j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    str_0 = "h@/.`iXt$%@#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    int_0 = 171
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    none_type_0 = None
    float_0 = 1960.366913
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    str_0 = "]g:&\x0c]n2 .enzwVv'(3"
    str_1 = ":SblS"
    str_2 = "i6N4"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    str_0 = '%,=FTK%s#"5V24c'
    str_1 = ""
    int_0 = 621
    dict_0 = {str_0: str_0, str_1: int_0, str_1: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    int_0 = -1144
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    str_0 = "\r87\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    bytes_0 = b"=Dx\xd1L"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    str_0 = '>IM_Y:\x0ba\\ wDg+CL"G'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    float_0 = -102.021
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    str_0 = "c4m"
    module_0.match(str_0, str_0)


def test_case_2671():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2672():
    float_0 = -2318.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    int_0 = -565
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    bytes_0 = b'\x9c\xc2"\x07<\xca\\\xa55L\xbfg\x07\xeb^m\xcd\xc3\xc1\xe8'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    str_0 = "np9|!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    str_0 = "RI`(R|f3\\[As\r)|x@"
    str_1 = "G\r*^rGPAg \n"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    int_0 = 2862
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    int_0 = 990
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    bytes_0 = b"\xfe\xbfQ\x90\x07\x1c\xf0\x94`k'Nd\xe2\xcc\x00\xf7\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    bool_0 = False
    bytes_0 = b"\xd0\xdf\xe4+\xce\x1bt"
    list_0 = [bool_0, bool_0, bool_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    float_0 = -1709.68363
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    complex_0 = -253.6032 + 12.75417j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    int_0 = 3795
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    str_0 = "\\xXfsj0,I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    int_0 = -3855
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    complex_0 = -36 - 464.2253j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    int_0 = 605
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    complex_0 = 3250.009288 - 324.71483j
    str_0 = "{oPCB!BM^&Ez=K_="
    tuple_0 = (str_0,)
    dict_0 = {complex_0: complex_0, complex_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    str_0 = "yJ@91"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    int_0 = 446
    bytes_0 = b"\x9f%N\xd9\x8c\x16\xafKi*MX"
    tuple_0 = (bytes_0,)
    bool_0 = True
    str_0 = "@"
    tuple_1 = (int_0, tuple_0, bool_0, str_0)
    tuple_2 = (tuple_1,)
    module_0.match(int_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    bool_0 = True
    bytes_0 = b"\x9dy\xdc\xc5\xf5\xce\r\xe2?\x84UN\xaeMr\xa7=\x9b)"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    str_0 = "yzr"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    str_0 = ",\x0ct^!-\x0c\x0b>WH'?p+E^dS["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    int_0 = -2356
    module_0.get_new_command(int_0, int_0)


def test_case_2700():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2701():
    int_0 = 1793
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    int_0 = -2117
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    int_0 = -1559
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    complex_0 = -1536.3518 + 710.136767j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    int_0 = -1358
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    int_0 = 1041
    float_0 = 2908.250303
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    int_0 = -3509
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {bool_0, tuple_0, bool_0}
    str_0 = "K&lolJ+Y,"
    tuple_1 = (tuple_0, set_0, bool_0, str_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    bytes_0 = b"\x0e\x02\xea))M"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    bytes_0 = b"w\x1cM.\x8a\xd4i"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    str_0 = "!cJu{w5(W\x0cY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    str_0 = "G\x0cH9i\x0bAb;`XZm9+1lC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    bytes_0 = b"\x08\x94\x13U\xf4\x9fF\x12\xa5\xee\x91\xdb\nQ\xf5E\x81\x9ae"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    str_0 = "u|dnqMiL"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    str_0 = "FImm`G03wEU^c ]rh"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    float_0 = -1962.23
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    bytes_0 = b"\x95\xa1p+\x8b\xa8\xa2\xfc)r\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = []
    bytes_0 = b"\x07Y\xaa\x12\xadU\x00]F\xbf\xda\x8e\x96\xeds\xf9"
    tuple_0 = (set_0, list_0, bytes_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    str_0 = ')s^^"p d7|\x0b\x0bd8W.'
    module_0.get_new_command(str_0, str_0)


def test_case_2723():
    pass


def test_case_2724():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2725():
    bytes_0 = b"t\xcd\xf6\x10\xbb5X\xbc\xcc\x84\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    int_0 = 594
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    int_0 = 754
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    complex_0 = 306 + 865.0569j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    str_0 = "-~~,_fC$#|~7"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    str_0 = "'M&"
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    str_0 = "<$2_9\"5\\a|Z'2tb='L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    bytes_0 = b"a\xf9\xe7\xe7b\xd9\x84~*\xde\xf5\xc5\xe1\xfb<\x0c\xb2a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    int_0 = 157
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    bytes_0 = b'\xdf\xd7\x81\xe4\xa2\x8d"9l;'
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    float_0 = 915.77
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    str_0 = "O}2G#AmrM\x0cp>"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [str_0, list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    int_0 = 2966
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    int_0 = 27
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    complex_0 = -502.726 - 713j
    set_0 = {complex_0, complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    float_0 = 3646.426
    complex_0 = -956.43286 + 2545j
    tuple_0 = (complex_0,)
    int_0 = -98
    tuple_1 = (float_0, float_0, tuple_0, int_0)
    int_1 = -2066
    module_0.get_new_command(tuple_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    bytes_0 = b"\x84"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    float_0 = -2748.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    int_0 = -2474
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    int_0 = 2711
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    int_0 = 625
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    int_0 = 1830
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    str_0 = "Rj %0p6)A\":!`I\x0b(*'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    str_0 = 'T2nUZiyW"f*av3L|6'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    str_0 = "-g[=UVf#1k6'Qc/2"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    bytes_0 = b"\x06"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2755():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2756():
    bytes_0 = b"\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    int_0 = -517
    module_0.match(int_0, int_0)


def test_case_2758():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2759():
    int_0 = 78
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    bytes_0 = b"2h\xe4\x1dG~\xd2\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2761():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2762():
    str_0 = "WXGvE6]`2Z$:a <l"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    complex_0 = 3013 - 1427.41079j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    bytes_0 = b"\xb0\x8fo\x16\xcd\x9f\x13"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    int_0 = -1468
    complex_0 = -1971.001735 + 842j
    module_0.get_new_command(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    int_0 = -2130
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    int_0 = 3281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    str_0 = "\x0ceW3<xe[LqG)g"
    str_1 = "QhKVUUU9z}2,: 5"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


def test_case_2770():
    pass


def test_case_2771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2772():
    int_0 = -2448
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    int_0 = 3578
    bytes_0 = b"\x98\x9e%\x1e:\xeej,[\x8f"
    tuple_0 = (int_0, int_0, int_0, bytes_0)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [bool_0, bool_0, set_0]
    str_0 = "S"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    float_0 = 275.129543
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    str_0 = ".\x0b,E~2"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    int_0 = -1465
    float_0 = -1951.62162
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    str_0 = ":=#\x0b4buR$#]r'\x0b8>\""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    str_0 = "`\nPvMTh_nNMu[Ucg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    bool_0 = True
    str_0 = "TKvJH%l"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    none_type_0 = None
    bytes_0 = b"\x81!"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    complex_0 = -2337 + 2888.6945j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    bytes_0 = b"l\xb3\xbb\x90\xfa\xb1\xe5\xd4\xfe/,\xf2\xc1D\xa3>\xa5\x04"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    str_0 = '&&YzsQgVl\x0c~\x0c`)_m\\"'
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    complex_0 = -849.8302 - 243.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    float_0 = 860.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    str_0 = "fJ"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    set_0 = {tuple_0, tuple_0, str_0, bool_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    str_0 = "/I?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    int_0 = -968
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    str_0 = "\rMS;Q6\x0b$'V^0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    bool_0 = False
    bytes_0 = b"9\x15\xadF\xc2A\xbd\x967#1\xd0\x10\xef\x86"
    bytes_1 = b"\x9b\xd4\x15\x10k\xd4e\\O\xc3\x03\x03"
    tuple_0 = (bool_0, bytes_0, bytes_1)
    tuple_1 = (tuple_0, bytes_1, bytes_1)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    int_0 = 2167
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    float_0 = -2265.329502
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    str_0 = ")rxj%i"
    bool_0 = False
    tuple_0 = (str_0, bool_0, str_0)
    set_0 = {tuple_0, bool_0, tuple_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    float_0 = -2355.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    str_0 = '& Y7+uCk-we~Y\n%U"c9'
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    bytes_0 = b";Y\x8e\x16O41\xadkI@\x88"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2802():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2803():
    float_0 = 1514.163
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    float_0 = -86.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    str_0 = "\t5H,=8}n&8R>w#:tU+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    str_0 = "M6gG.b2iiKjq`l6)\\_#"
    module_0.get_new_command(str_0, str_0)


def test_case_2808():
    pass


def test_case_2809():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2810():
    bytes_0 = b'\xa0\x17\xbf\xde\n\x83&\xf0\x92Z<"\xdf{\x11v\xc6R'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    int_0 = 1131
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    complex_0 = -1213.4049 - 389.66j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    str_0 = "6c5E.h-\t!j|"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    str_0 = "?hwK"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    bytes_0 = b"\xc8\x01r\xe2\x87\xf2\xb7a\x05\x00\n\xb3\xf8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    float_0 = 3005.65745
    bool_0 = True
    tuple_0 = (float_0, float_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_2819():
    pass


def test_case_2820():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2821():
    int_0 = 648
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    bytes_0 = b"J\xd5\x18*n\xc0\x92%f\x7f&\xb1d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    str_0 = "&|*KE22h1*V\x0c{V!vE<\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    tuple_0 = ()
    str_0 = "`!=1SZ)^#b5`7G"
    set_0 = {str_0, str_0, str_0, str_0}
    bool_0 = True
    tuple_1 = (tuple_0, set_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    str_0 = "fqDgm^nV3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    int_0 = 247
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_2829():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2830():
    int_0 = 515
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    bytes_0 = b"\x1a\xd1\xa00\x02\xbd\xa6\x0e\xe5'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    int_0 = 2200
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    int_0 = -942
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    complex_0 = 1087.26155 + 2556j
    bytes_0 = b"\x91~c"
    tuple_0 = (complex_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    complex_0 = -4614.968 - 163.643j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    int_0 = 3558
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    float_0 = 1544.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    int_0 = -3733
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    float_0 = -331.208
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    str_0 = "#rLj8&oZc(8rL~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    float_0 = -600.9839
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    complex_0 = 1433.1383 + 2748j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_2845():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2846():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    bytes_0 = b"\xbd\x85\x889w\xa87\x7f\xe0\x1e\xf9n\xa1,\x94\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    int_0 = -452
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    bytes_0 = b"\xdd7\xc6\x88r\xbe\xbe\x97%\xf7\x15\xcdq"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    str_0 = "q|\x0c\x0c6("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    float_0 = -294.04
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bytes_0 = b"\xe9\x80\x85I\xea\xc4w\xc1\xbd\xd3\x81\x1f-b\x01]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    bytes_0 = b"\xad\xe7U\xa6\xc2\x93"
    float_0 = -443.807
    tuple_0 = (bytes_0, bytes_0, float_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    str_0 = "H"
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0, str_0, str_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    bytes_0 = b"\xce\x83\x9f\xfd\xa1\xe3\xcd\x85|<\xc1N=\xa0{\xdf\x99S\x8a"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    bytes_0 = b"\x86\xef\xdc;\x1a\xed\xd4f\xc9\x8c(\x1c\x8bD2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    str_0 = '7R**Uk@oKx+U"0AYW'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    bytes_0 = b"r\xd4\x14\xd7\x12!R\x1dy\xad=Y"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    bool_0 = False
    str_0 = "b0kz#0*J'7\\OtsF|"
    str_1 = "#\t]o,c"
    tuple_0 = (bool_0, str_0, str_1, str_1)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    bool_0 = False
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    bytes_0 = b"\x93\xe4\xb0\xb2\x05\xa1\xc8\x93\xc7U\xf7B\xc0\x15\xaf5\xba:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    none_type_0 = None
    str_0 = "P:_XEPJ`a']HU-4h>4<"
    str_1 = ":V)sk}v>Bs\\"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: str_1}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    float_0 = -992.0
    module_0.match(float_0, float_0)


def test_case_2867():
    pass


def test_case_2868():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2869():
    float_0 = 864.704
    dict_0 = {float_0: float_0}
    tuple_0 = (float_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    str_0 = "Fx%y1Oji,q13"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    complex_0 = -2584.60069 + 1029.8j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    tuple_0 = ()
    int_0 = -320
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    bool_0 = True
    str_0 = "uGTr"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    str_0 = "P4o_lw"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    float_0 = -1177.4412
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    str_0 = " NK&ZyLv?."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    int_0 = 1897
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    float_0 = 611.558909
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    float_0 = 2214.99
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    bytes_0 = b"\x17,YtO\x19c\xb0c%.\xfc\xb5\xf0\xf7\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    int_0 = -28
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    bytes_0 = b"\xb1\xa7r\x12\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    list_0 = []
    list_1 = [list_0, list_0]
    str_0 = "$M\n}["
    dict_0 = {str_0: list_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    int_0 = -1622
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    bytes_0 = b"\x8a\xc5\xb6<?\x15\xe8\xab\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    float_0 = -165.475
    module_0.match(float_0, float_0)


def test_case_2889():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2890():
    int_0 = 160
    module_0.get_new_command(int_0, int_0)


def test_case_2891():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2892():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    float_0 = 862.4435
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    int_0 = -610
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    int_0 = -1246
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    float_0 = 5783.92859
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    bytes_0 = b"&\xfbSWc\xa3\xc0\x12\xfc\x0b\xbc\xc3\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2898():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2899():
    int_0 = -1138
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    int_0 = 3525
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    int_0 = 717
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    str_0 = "eo^){2Rh=2c<IXS.7Fc/"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    bytes_0 = b"\xc4\xc1\xe4\x8b\xc3\xd9\xc5j\xbf\x038"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    str_0 = ";0'MBp"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    bytes_0 = b"\x0fj#3I\x83\xba\xca\xaf\x11\xd2\xd8RG\x12,|[\xe1"
    module_0.match(bytes_0, bytes_0)


def test_case_2906():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2907():
    float_0 = 2157.92329
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    float_0 = 1695.0
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    bytes_0 = b"\xbe\xed\xa8\xbc\xf9\xcc$dz\xe6dy\xd1\x89\xb7\x03\xad"
    str_0 = "3"
    set_0 = {bytes_0, bytes_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    complex_0 = 1686.3913 - 1933.74j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    int_0 = -1634
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bytes_0 = b"V\x81(\x08\xee\x9f\x0b\xfa\x8a\n\xc7}\xdd\x0f\x9b\xa3{c\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    float_0 = 3268.88312
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_2916():
    pass


def test_case_2917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2918():
    none_type_0 = None
    dict_0 = {}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    str_0 = ':&"`y)m_zpYlyOu$/'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    bytes_0 = b"\xd9D\xde4\xb2\xa7\x02"
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (bytes_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    str_0 = "LDS[[iF<="
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    int_0 = 947
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    bytes_0 = b"\xd3\x16\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    complex_0 = 980.834 - 649.537682j
    set_0 = {complex_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    str_0 = 'liWg5vW:ij"IE1m'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    str_0 = "CYMCcPVmX"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    str_0 = "\\+\x0b-kr&g|vDD_j!+5("
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    str_0 = "v,P\x0c1ZF'Pe'>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    float_0 = -187.373
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    int_0 = 1693
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    complex_0 = -1247.589 - 3388.105j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    int_0 = -591
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    float_0 = 1210.69
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


def test_case_2935():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2936():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    complex_0 = 1814.8565 + 1089.4781j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    str_0 = "69Zt)p]$\rVU?[~@H)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    float_0 = 1161.1497
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    complex_0 = 416.214 - 2612.906j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    int_0 = 780
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    int_0 = 1776
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_2943():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2944():
    int_0 = -3823
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    complex_0 = 1851.501 + 831.0359j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    str_0 = "Z$U=m&2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    bytes_0 = b"Tp\xe2\x8a\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    int_0 = 891
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    int_0 = -19
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    bytes_0 = b"Y\x1e3.\x04g\xa4\xa9\xbf\xa3\xa1Y)\x03\xeb*\xb9[\xa8\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2953():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    int_0 = -3030
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    bytes_0 = b"\x15\x11D\xb5\x88\xebd\xc0\xf2a#\x11^5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    bytes_0 = b"\x1d\xfb\xbe\x1dL\x9aV&@"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    bytes_0 = b"\xb1\xb4\xe9\xe1\xf1\x10\xe0\x132("
    str_0 = "\",'!a>]K%4|"
    tuple_0 = (bytes_0, str_0, bytes_0)
    bytes_1 = b"\x94d\xea\xcb,KX\x18L\x1c\xa1\t\xec]S\xe9C"
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    str_0 = "4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    bytes_0 = b"\xc9\xf4\xac\x89e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    str_0 = "\nG={ hBbi^)q^kj,!,J"
    str_1 = "hcC2kAAa06XJ/91uE,r@"
    dict_0 = {str_0: list_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    str_0 = "u-@"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


def test_case_2963():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2964():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    complex_0 = -1844.12 - 313.684887j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    str_0 = "'Iyk\rxjP3>3wC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    float_0 = 3521.785015
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    str_0 = "xK.T\rO?Q,L6{T\\c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2969():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2970():
    str_0 = "5)?Q>W.4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    bytes_0 = b"\xdc\x01\x1a\x11po^n\xbfs\x13\xdc\x8aL\xcd<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    int_0 = 3234
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    float_0 = -482.500819
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    float_0 = 128.82097
    list_0 = [float_0]
    tuple_0 = ()
    tuple_1 = (list_0, list_0, float_0, tuple_0)
    list_1 = [tuple_1, tuple_1, list_0, tuple_1]
    list_2 = [list_1]
    none_type_0 = None
    module_0.match(list_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    str_0 = "Gp"
    module_0.match(str_0, str_0)


def test_case_2977():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2978():
    bool_0 = False
    list_0 = [bool_0]
    int_0 = 2279
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    str_0 = 'T)0|>d^m"'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    int_0 = -2564
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    str_0 = "\rO|HBoJu\x0cS"
    str_1 = "BAx`[?$/\x0bz'{d5S "
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    none_type_0 = None
    str_0 = "5zV}c"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    bytes_0 = b"G\x07\x99"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0, set_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    bool_0 = True
    int_0 = -2307
    dict_0 = {bool_0: int_0, bool_0: int_0, int_0: bool_0}
    bool_1 = True
    set_0 = {int_0, int_0, bool_1}
    tuple_0 = (bool_0, dict_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


def test_case_2988():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2989():
    float_0 = 2763.82
    bytes_0 = b"\x0f\xf4O,\xb6h~\xc9\xbf\x86\xd7\xae\xfb\xebtv\\1"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(bool_0, dict_0)


def test_case_2991():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2992():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    float_0 = 49.0
    str_0 = "=?wsnnZ;TK"
    set_0 = {float_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    bytes_0 = b"e\x15\xe2\xdc\xe6\x82+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    bytes_0 = b"Z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    str_0 = 't@\nA",N'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    bool_0 = True
    complex_0 = 3541.7757 + 1654.29j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    str_0 = "8mrpO-Qd\x0b7K{5x\x0bR B\n."
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0)
    list_0 = [tuple_1, tuple_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_2999():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3000():
    int_0 = -3687
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    int_0 = 620
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    bytes_0 = b"$\xbcL\xf0hjk?Y\xf4\xb4\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    str_0 = "z1Ps"
    module_0.get_new_command(str_0, str_0)


def test_case_3004():
    pass


def test_case_3005():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3006():
    float_0 = -807.875151
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_3007():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3008():
    bytes_0 = b"\\@\x15\x0f"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    float_0 = -2044.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    bytes_0 = b"R"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3011():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3012():
    bool_0 = False
    str_0 = "0\x0chB&2\x0cF"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    bytes_0 = b"\x92\x065"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    str_0 = "rH"
    tuple_0 = (str_0, str_0)
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    int_0 = -975
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    list_0 = []
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    float_0 = 1209.87
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    bytes_0 = b"\x843D\xd3\xb2\x83P\xb2}\xe6\x12\xa7\x7f\x0f\xbdblM"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    bytes_0 = b"\x9c\xd0_\xc5\xcc\x94nSx\xae\xa7\xfc,`\x94Y#2\xb9|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    int_0 = 6
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3022():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3023():
    str_0 = ")7+#?V78Y3?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    bytes_0 = b"!a^\x00\xad\x9c\xfb\xefe\xad\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    float_0 = -3257.35
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    complex_0 = -1778.474628 + 4326.76j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    str_0 = "]Bk8o,@w/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    int_0 = 1127
    module_0.match(int_0, int_0)


def test_case_3030():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3031():
    float_0 = 553.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    float_0 = 355.649873
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    int_0 = -41
    dict_0 = {bool_0: list_0, bool_0: int_0}
    set_0 = set()
    tuple_0 = (bool_0, list_0, dict_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    complex_0 = 3988.8 + 3914j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    int_0 = 866
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    bytes_0 = b"\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    str_0 = '>I)..\x0b?<K@d"|ztE'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    int_0 = 1627
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    str_0 = "+cBh9s1E(aT!%"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    str_0 = "+; bo?:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    str_0 = "CVnE;27+4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    str_0 = "(Pi:Vc[;1,[ <,Q>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    int_0 = 83
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    complex_0 = -4839.9 + 1465.745j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    str_0 = '^%,1Q;.n "D'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    bytes_0 = b"\x9f7\x8f\xea\x00\xb2\xf3\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    int_0 = 638
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    str_0 = ")UcXd"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    int_0 = 123
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    float_0 = 1639.96
    dict_0 = {float_0: float_0, float_0: float_0}
    bytes_0 = b"\x98\xd3\xad\xc7\x17\x8e\x1d\xa0\x95&"
    tuple_0 = (dict_0, bytes_0, dict_0)
    list_0 = [tuple_0, bytes_0]
    bool_0 = True
    tuple_1 = (float_0, tuple_0, list_0, bool_0)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    int_0 = 1835
    bool_0 = True
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    bytes_0 = b"=k\x1fp\x1d`\xe2\x07\x81\x7f\x9d\x82\x03\xe3\xf7\x86hp"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3061():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3062():
    float_0 = 2158.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    float_0 = 2231.7459
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    complex_0 = -1214.78 - 2347j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    str_0 = "=GQWNQgm(w7 3|v1rdsd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    str_0 = "(65Z9H\\\tlfwF>94"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


def test_case_3067():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3068():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    complex_0 = 390.333 + 2326.8908j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    bytes_0 = b"c\xba\x1f\x96\x01t[\x8a%\xfe0\x18\x0e\xfa\xe9|\x0c\xdcE"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    complex_0 = 1969.88 - 518.912j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    float_0 = 80.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    bool_0 = False
    bytes_0 = b" "
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    int_0 = 246
    bytes_0 = b"\x8c\x02"
    set_0 = {bytes_0, int_0, int_0, int_0}
    tuple_0 = (int_0, bytes_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    str_0 = "5$\x0ca\r/$y6<?y"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    float_0 = 2044.1
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    bytes_0 = b"\xacG"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3079():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3080():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    float_0 = 1622.333623
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    int_0 = -303
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    float_0 = -1638.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    tuple_0 = ()
    str_0 = "VnG/Y?LIGV"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    bytes_0 = b"~\xce\xdf\x9b\x81"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    int_0 = 1713
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    bool_0 = True
    str_0 = "\x0cxdKUEdwL+\x0b#IaoW"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    str_0 = "drRg=a@?99})T0|\nYO9"
    list_0 = []
    int_0 = -3070
    tuple_0 = (str_0, list_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_3089():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3090():
    bytes_0 = b'{\xd5j.2"h"I\xf5s\xb9F\xddO\x0ek6'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    int_0 = -286
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    str_0 = "*&u4D;"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: tuple_0, str_0: tuple_0, tuple_0: str_0, str_0: str_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    int_0 = -339
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    str_0 = ""
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    int_0 = 1363
    tuple_0 = (int_0, int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    str_0 = 'X$\x0cNf}|\nRy6F@^"ug$'
    module_0.match(str_0, str_0)


def test_case_3101():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3102():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    bool_0 = True
    bytes_0 = b"\xaf\x19jF\xd3i\x1c&"
    list_0 = [bool_0, bool_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    bytes_0 = b"z\r>\x91\x98\xb0\xcer\x99\xb2;\x8b\xd8sc^[_]\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    none_type_0 = None
    int_0 = -2877
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    complex_0 = 2518.6 + 113.714435j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    str_0 = "Sj\\"
    set_0 = {str_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    bool_0 = True
    list_0 = []
    bool_1 = False
    bool_2 = False
    tuple_0 = (list_0, bool_0, bool_1, bool_2)
    dict_0 = {bool_0: tuple_0, bool_0: list_0}
    module_0.match(dict_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    str_0 = "\ro%}g9yh9.F!\rnQ3\x0coS6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = ()
    tuple_1 = (bool_0, bool_0, dict_0, tuple_0)
    tuple_2 = (tuple_1,)
    str_0 = "eF\nv/qxDVVMtn}w3(sk"
    module_0.match(tuple_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    complex_0 = 390.1836 + 25.725391j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    float_0 = 1378.67
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    str_0 = ";\n)|=8:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    float_0 = 550.0
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    int_0 = -2008
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    str_0 = "`_9c`{INq:47@eh.)M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    float_0 = 1272.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    float_0 = -252.994
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    str_0 = "?b"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    bytes_0 = b"\xb6\xde\x8f\xd4i\x1c\t"
    tuple_0 = (str_0, dict_0, bytes_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    int_0 = -469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    int_0 = 1711
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    float_0 = 534.53
    set_0 = {float_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    bytes_0 = b"\xf9h\xe3\xe5\xda\xc0N\xab\x9e\xd6|(1\x1c\\\xbf(\xe2\x8ed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    int_0 = 2322
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    str_0 = "w{ZWh{*z[l3OHs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    int_0 = 2747
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    int_0 = -1452
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    int_0 = 995
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    str_0 = "."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    float_0 = -796.936
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    str_0 = ":[ "
    str_1 = 'I*YIpU@,*taO"Q+/Tl+k'
    set_0 = {str_0, str_0, str_1, str_0}
    list_0 = [set_0, str_0, str_1]
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    list_0 = []
    object_0 = module_1.object()
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    str_0 = "X@-vUmS="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    bytes_0 = b"g\xb57R\xb0\xb0\x9f>\x0e6\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    str_0 = '&Q]ZY9K!N"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    dict_0 = {}
    object_0 = module_1.object(*dict_0, **dict_0)
    module_0.get_new_command(object_0, object_0)


def test_case_3145():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3146():
    str_0 = "9TK\x0cZpBd\r&[CxA"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3147():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3148():
    complex_0 = 2234 - 3270.7j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    float_0 = 3532.035
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    int_0 = 1689
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    bytes_0 = b")Z\xa0SN`\x87\x95\x99\x94\xe9V5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    str_0 = "kG~\r4R,D#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    bytes_0 = b"z\x01\xf2\xc0T\x07\xba\x1e\x00\xe83t\xef1\xab\xf4\x8f\x06"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3156():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3157():
    bytes_0 = b"\xc3\xa9\x04xJ\xafI\xcb\x89+\xf2-O\x10Q\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    str_0 = "{LS\n!>srb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    float_0 = 662.0451
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    bytes_0 = b"|\xe9R\xce\x98\xdd5\xdcMw"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    complex_0 = -1419.70481 - 694j
    bool_0 = False
    tuple_0 = (complex_0, bool_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    int_0 = -1104
    bool_0 = True
    str_0 = ":G$M("
    tuple_0 = (int_0, int_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    bytes_0 = b"\xb4\xef\x8c\xb4K\x915\xe6\xfa\xd3Q\xec\xf1Y\xa3n<\x1e"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    str_0 = ";c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    bytes_0 = b"\xca\x80\xb6\xba\xe5X\xb5?\x85\x19\xea!\x81\x13r\xd9\xa0\x84"
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    float_0 = 754.14
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    bool_0 = False
    str_0 = "M"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    float_0 = -2400.676788
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    float_0 = -1745.622
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    int_0 = -2518
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


def test_case_3174():
    pass


def test_case_3175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3176():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    float_0 = 4772.62
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_3179():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    int_0 = -2015
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    tuple_0 = ()
    int_0 = -2946
    bool_0 = True
    tuple_1 = (tuple_0, int_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    str_0 = "JR_?Jwn$^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    int_0 = -2914
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    int_0 = 1246
    set_0 = {int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_3186():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3187():
    int_0 = 3033
    module_0.get_new_command(int_0, int_0)


def test_case_3188():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3189():
    float_0 = -4794.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    str_0 = ".OYv_"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    bytes_0 = b"(\x13x\xec%\nu\xd3\x1e\x84H\xf0nfA/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    str_0 = "\x0bT::u"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    int_0 = -1462
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    float_0 = -923.4878
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    int_0 = 247
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    bytes_0 = b"rBF\x02\x1a\xe6\x16\xea\xeec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    bytes_0 = b"I\xb9\xf8U\x13\n\r\xe3/\xc4D_\x8a\xfb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    int_0 = -2377
    module_0.get_new_command(int_0, int_0)


def test_case_3200():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3201():
    str_0 = "mfXz;,|#B)Nf[yV;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    int_0 = 1176
    str_0 = "^TLMf:y=\n"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    bytes_0 = b"\xc9\xd3\xc4\xdc\xefz\x0eF\xb2\xb8&\x9f "
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    int_0 = -68
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    float_0 = -905.538174
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    tuple_0 = ()
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


def test_case_3209():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3210():
    int_0 = -2797
    bool_0 = True
    set_0 = {int_0}
    tuple_0 = (int_0, bool_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    bytes_0 = b"L\"'\x0e\xb5>\xdf\x85NOq\xd2\xed\xcf\x82\x14]\x8a\x9e"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


def test_case_3212():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3213():
    str_0 = "dSEV"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    str_0 = 'gHI,|("-K";".KNLwG7'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    int_0 = -423
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    int_0 = 6144
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    float_0 = 1051.62907
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    none_type_0 = None
    bytes_0 = b"S\xef\xb8\xa3/7p\x1b\xb0_"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    int_0 = 147
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    str_0 = "?c=&|<9'0c4yLCKN"
    tuple_0 = (object_0, set_0, str_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    int_0 = 2551
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    int_0 = -628
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    float_0 = -2389.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    str_0 = 'dn\\N,"\nCk;?k\\@>h'
    set_0 = {str_0, str_0}
    list_0 = [set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    int_0 = -60
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    bytes_0 = b"\xd9v\x82\xec$j\x0c\x05\xa5\x19\x05"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3231():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3232():
    str_0 = "tuEVM*ZOp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    int_0 = -5255
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    bool_0 = True
    str_0 = "c <25eTk/w"
    list_0 = [str_0, str_0]
    bool_1 = False
    tuple_0 = (str_0, list_0, bool_1)
    tuple_1 = (bool_0, str_0, tuple_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    bytes_0 = b"D4\xba\xaf\x86\x1dU\x8b\x86]\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    set_0 = set()
    bytes_0 = b"\x92\xf6\x0b\xcaB?"
    list_0 = [set_0, bytes_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    str_0 = '`g\rlh"\tb\\'
    str_1 = "X"
    dict_0 = {str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    str_0 = "&, >mGw?,"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    bytes_0 = b"/\x96\x87%d\xc2\xfd\x8d\xedc~\xbd"
    list_0 = [bytes_0, bytes_0]
    str_0 = "&'^6gle"
    tuple_0 = (str_0, list_0)
    tuple_1 = (bytes_0, list_0, tuple_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    float_0 = 1321.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    str_0 = "L]B{yrz|v&Hz97"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    float_0 = -3268.3927
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    int_0 = 1104
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    bytes_0 = b"\x80}\xfe\x89fq\xdfZ\xb4\xddX\x01\xc9F\xab\x9f4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    int_0 = -38
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    int_0 = 1508
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    int_0 = -235
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    bytes_0 = b"\x8c\xb4\x80\xb6\x06f\xc6+\x8eg\x19H\xc4\xb2^B[\xf5\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    int_0 = -1881
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    float_0 = 1718.4446
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    float_0 = -1065.0
    set_0 = {float_0, float_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    bytes_0 = b"j\xf05!\x05\x83\xa5n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    str_0 = ",'aCYk5mbQc^\\.7>d"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    str_0 = "\tzg"
    bool_0 = True
    module_0.match(bool_0, str_0)


def test_case_3258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3259():
    str_0 = 'X@D3C\tVGU|."`&2)XivW'
    list_0 = []
    float_0 = -2291.774335
    tuple_0 = (str_0, list_0, list_0, float_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    bytes_0 = b"\x11\x8a\x98\xf1\xe4\xb3+\x94\xa9\xb7\xdc\xd7\x10"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    int_0 = -114
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    bytes_0 = b"\x96\xf2\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    float_0 = -883.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    int_0 = 3993
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    str_0 = "#$jm_oHh"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    str_0 = "zR!':=2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    str_0 = "{}.~FLVNf6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    str_0 = "kEnk9\\nacj>"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    float_0 = 2732.38
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    int_0 = -180
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    int_0 = -1323
    set_0 = set()
    tuple_0 = (int_0, set_0, int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    bytes_0 = b"\x1e\xd7\x1c\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    int_0 = 4386
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    bool_0 = True
    int_0 = 394
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    bytes_0 = b"\xf35\xfa\xda\xffS\x15\xcbm\xab\x06\x96\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    int_0 = -7381
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    float_0 = 3356.3675
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    none_type_0 = None
    float_0 = 1222.3824
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {float_0, none_type_0, none_type_0, tuple_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    bytes_0 = b"\x90!\x91\x81\xfa\x1eA"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    str_0 = "hjJD8N|\n)(@kK`g"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    float_0 = -4019.9308
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    bytes_0 = b"<{\x0b!\xa8\xac\xe47\xd2\x07h\xa5\x91\x1c\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    int_0 = -255
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    str_0 = "%uC33%\\Y)h@"
    float_0 = -688.007632
    tuple_0 = (str_0, float_0)
    float_1 = -880.03904
    dict_0 = {tuple_0: tuple_0, tuple_0: float_1, float_1: float_1}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    int_0 = -2839
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    int_0 = 2627
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    bytes_0 = b"\x18\xb7o\xdc\xa0\x9d\xa2J\xf4\xf4k\xce\x05e\xf5\x8eM"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    complex_0 = -271.340737 - 3833.404j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    str_0 = "3\"i'ZL\n\x0c1mX@"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    int_0 = 4213
    set_0 = {int_0}
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    int_0 = 1389
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    str_0 = "K"
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: str_0, str_0: bool_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    int_0 = 1612
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    bytes_0 = b"6\xce\x9b\xd3a\xaf\x80\x1d\x07\x04P\xc0\x19\x0f%\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    int_0 = 1921
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\x1d\xc8\xed`\xf1\xc9\x8abS\xc8\x90<_"
    tuple_0 = (bool_0, list_0, bytes_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    float_0 = -3035.69
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    set_0 = set()
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    none_type_0 = None
    bytes_0 = b"J\xb2\x03\xa7G\xa5\xc2l\xb9\xb8\xb9T\x93"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    int_0 = -289
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    complex_0 = 1467 + 2594j
    set_0 = {complex_0, complex_0, complex_0}
    complex_1 = 301.0412 - 1327.98674j
    tuple_0 = (set_0, complex_1)
    module_0.get_new_command(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    str_0 = "@6*;_Wg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    bytes_0 = b"\xc7L\xeav<\xaa\x058Ps\x02\x18\xdf|sj\xac\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    bytes_0 = b"\x0e\x83\xbc\xaf\x17\xfd\x04\x1f^\xa13U@QI"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    bytes_0 = b"Q&\xe5#\x86\x9b\xb7\xd5\x8bAA\x1c\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_3314():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3315():
    bytes_0 = b"+"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


def test_case_3316():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3317():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, bool_0, list_0, list_0)
    list_1 = [tuple_0, bool_0]
    str_0 = "\\C@~%xd|r"
    dict_0 = {str_0: list_1}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    str_0 = "K&=n6OV=@oKf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    none_type_0 = None
    complex_0 = -3681.3877 + 2229j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    int_0 = 2822
    module_0.get_new_command(int_0, int_0)


def test_case_3321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3322():
    int_0 = 541
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    str_0 = "dd#?"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    int_0 = -1250
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    complex_0 = -433.994 + 1699.475333j
    int_0 = -772
    bool_0 = True
    dict_0 = {complex_0: complex_0, complex_0: int_0, int_0: int_0, int_0: bool_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    float_0 = -4095.033212
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    str_0 = "g*\x0bkZ&m?2\x0c8,"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bytes_0 = b"'\xb3\xb8\xbd\xaap\xad\xf1o\xe9z\x14\x95\x93"
    int_0 = 599
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    list_0 = []
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    int_0 = -3178
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    int_0 = -1387
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    float_0 = -697.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    float_0 = 2079.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    float_0 = 2413.4316
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    int_0 = -886
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    str_0 = "/Lw7Ilj{|mNQO%z"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    int_0 = -742
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    bytes_0 = b"Y\xfd\x81c\xb1\x02\xb9\x96V\xfbz\xab4?"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    float_0 = 1744.70115
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0, tuple_0: bool_0, tuple_0: bool_0, bool_0: bool_0}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    int_0 = -81
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    complex_0 = -2259.31216 + 494j
    bool_0 = True
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    float_0 = -413.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    complex_0 = -633 + 1836.1j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    bool_0 = True
    float_0 = -1377.57
    set_0 = {float_0, bool_0, float_0}
    bytes_0 = b"\xdc\xbc\x98\xf8\xa9\xc1\xf8}\x14\xf3=\xd34d\x04K\xd9E\x9b\x18"
    tuple_0 = (float_0, set_0, bytes_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    str_0 = "1\x0cb\\i5IoT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    int_0 = 1001
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    bytes_0 = b"B\x00"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    int_0 = -2285
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    bytes_0 = b"F\xb1|\xd4\xd5\xe7\xbe+\xd80\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    bytes_0 = b"#\xfe\xff\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    list_0 = []
    str_0 = 'T:^?gV.Yxi@1`Hc2"'
    str_1 = '"\x0bM<\t&|'
    str_2 = "x|t*baz\\{"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    bool_0 = False
    bytes_0 = b"\xca\xff\x84\x1b\x19\x86\xc9/\xcb\xa6\xe7$"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bytes_0 = b"\xf0\x17\x91\x93\xb7q\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    bytes_0 = b"Xt\xc8\xe3\xe8\xe4\x15\x9b\x17{\xe6\x91A\xf28f+\xb0\xef"
    bool_0 = True
    set_0 = {bytes_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    bytes_0 = b"\xf3"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    bytes_0 = b"\xd4\x9d\x9dfz\xd9qT\x18\xb1\xa1\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    float_0 = 1526.7
    list_0 = [float_0]
    dict_0 = {}
    tuple_0 = (list_0, dict_0, dict_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    str_0 = "y@#+QD\t r(DFlgl'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    int_0 = -2221
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    bytes_0 = b"\xc8\xb5\x86\xbf\xb4\xd3\xb2qG\x82!Vq\xe9X\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    float_0 = -1201.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    bytes_0 = b"\x04\xca\xf6\x94\xca\xff0\xa5i\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    str_0 = '0nVP"E!,'
    bytes_0 = b"PG\x03"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    str_0 = "H&-"
    int_0 = 2838
    tuple_0 = (list_0, str_0, int_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    float_0 = 1474.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    bytes_0 = b"n\xde\x04`\\\xfa\x02\xbf\x1fs"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    str_0 = "C,a]z/0jGbS~v0o"
    list_0 = [str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    bytes_0 = b"}\xae\xfexX\x8bCY\x02\xc5\xfe_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    int_0 = 52
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [bool_0, bool_0, bool_0, set_0]
    tuple_0 = (bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    bytes_0 = b"\xfb\x00\xdd\xe6<\xe7\xc1\xb4\x96\xa3\xd2x\x18\x82p"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    float_0 = -400.5901
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    str_0 = "csM;&J44["
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_3382():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3383():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    bool_0 = False
    str_0 = "\x0c3}Ze$lF\rv@T"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    int_0 = -621
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    none_type_0 = None
    complex_0 = 934.947282 - 2121.0465j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    bytes_0 = b"Qg\x1f\x9e\xf4\x1d?\xbe\x94\x0bTs#\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    float_0 = -942.47828
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    str_0 = "G4#1>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    int_0 = 3369
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    str_0 = ":h"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    str_0 = "VI1-"
    module_0.get_new_command(str_0, str_0)


def test_case_3393():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3394():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    int_0 = -2961
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    int_0 = -1975
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    int_0 = 1214
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    float_0 = 230.70228
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    bool_0 = True
    list_0 = []
    tuple_0 = (list_0, list_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    int_0 = -290
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    int_0 = -2676
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    bytes_0 = b"\xb0bl#8\x83\x9e\xf4D"
    int_0 = -1105
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    str_0 = ""
    tuple_0 = (bytes_0, int_0, set_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    str_0 = "|0$gD@`2\\..i"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    float_0 = -2107.361
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    float_0 = 2681.619
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    int_0 = -73
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    int_0 = 430
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    complex_0 = 1245 + 2281.196j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    float_0 = -3815.08
    bytes_0 = b"\xdc\xbb#\xb9\xc7"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    float_0 = -1084.582103
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    str_0 = "Y$JFN"
    module_0.match(str_0, str_0)


def test_case_3416():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3417():
    str_0 = "^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    float_0 = 2954.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    bool_0 = True
    int_0 = -1945
    tuple_0 = (bool_0, bool_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    str_0 = '"+\\H7%ZToZWuvW7! $] '
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    int_0 = -2709
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (int_0, int_0, bool_0, tuple_0)
    dict_0 = {tuple_1: tuple_0, tuple_1: int_0, bool_0: bool_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    int_0 = -119
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    float_0 = 353.0
    module_0.get_new_command(float_0, float_0)


def test_case_3424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3425():
    float_0 = 2692.08
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    str_0 = "3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    complex_0 = -1294.999 - 1060.652016j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    complex_0 = 841.024 - 1797.2j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    int_0 = -3788
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    dict_1 = {}
    module_0.get_new_command(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    complex_0 = -553.767664 - 3394j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    str_0 = "T5|Myf7$_\\9OG4y^F"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    float_0 = -430.33
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    complex_0 = 853.6 + 1542j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    bytes_0 = b"u\xb6s\xfa\x99\xea\xc2v\xf4\x83\xa5\xec\xe1"
    module_0.match(bytes_0, bytes_0)


def test_case_3440():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3441():
    str_0 = "Tm|4iZ]"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_3442():
    pass


def test_case_3443():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3444():
    float_0 = -2987.235994
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    int_0 = 229
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    int_0 = -1073
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    str_0 = " IQ36U9tEmQbntm"
    str_1 = "H{\x0cSHJz_6{X[[&"
    dict_0 = {str_0: bool_0, str_1: set_0}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    int_0 = 2481
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    float_0 = -402.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    bytes_0 = b"\x9dK{\xaaS\x95%\x80+,_"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    bytes_0 = b"\x9fM\x97<6h\x07\x1d\n\xcd\xef{u\xf3\xd3\x97Z\x87"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    str_0 = "Z<3=3J@D\x0b8x\\!\ti"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    bool_0 = True
    bytes_0 = b"i\xcd\x00\x90\n\x94y5j\xf0\xeaX\x15\x92"
    tuple_0 = (bool_0, bytes_0, bytes_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    str_0 = "]c,;qh#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    int_0 = -26
    set_0 = {int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    int_0 = 1253
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    complex_0 = -248.1 - 1364.6607j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    int_0 = -1795
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3460():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3461():
    str_0 = "l\n@o#&B?~|8]/Rda"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    str_0 = "n?eX$#k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    bytes_0 = b"\x99j\xea@\xaeO"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    int_0 = -1466
    tuple_0 = (int_0,)
    object_0 = module_1.object()
    dict_0 = {tuple_0: int_0, object_0: int_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    str_0 = ""
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    str_0 = "xn\t<"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    bytes_0 = b"!X\xc85\xda\x02"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    bytes_0 = b"\xfc\x9e\x80\x9f`mZ\xea\x17m\xf9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    float_0 = 5022.4
    module_0.match(float_0, float_0)


def test_case_3472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3473():
    int_0 = 2516
    bytes_0 = b'Qa\x8b_P.\x1c\xe9\xffX\xac#"\rl:3 \x15'
    tuple_0 = (int_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    int_0 = -2005
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    bytes_0 = b"#\xf5D;\xb04\xd9\x89\xb1\x01\xa4\xe9}\xde\x82\x8b}\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    bytes_0 = b"\xd1#"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    str_0 = "#"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [str_0, dict_0, dict_0]
    tuple_0 = (dict_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_3481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3482():
    int_0 = 2033
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    str_0 = ",,`%HC\n6gB_%!>2#5O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    float_0 = 3214.758
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


def test_case_3486():
    pass


def test_case_3487():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3488():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_3489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3490():
    bytes_0 = b"o\x1bW\xc6\x06G)\xcd\xeff\xe9($\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    bytes_0 = b"I\xb6\xc0jE\xb1\x0f\xe7\xf0\x81\xa4\x04\xd4\x9b\x0eBO"
    list_0 = [bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    int_0 = -2499
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    int_0 = 1097
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    set_0 = set()
    list_0 = [set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    bytes_0 = b"\x8c\xb6G\x94\x13FVhi\xc2\x8b^d\nI\x82<"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    float_0 = 2797.48
    set_0 = {float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    bytes_0 = b"\x00"
    module_0.match(bytes_0, bytes_0)


def test_case_3499():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3500():
    float_0 = -320.629
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    str_0 = ";q\x0czZ0\n#~$Ba5)Fvh"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    int_0 = -96
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    int_0 = -1711
    bytes_0 = b"\xeb2\xd3:\x04\xec(g"
    bytes_1 = b"1\x12\xbaz\x8f\x93"
    tuple_0 = (int_0, bytes_0, bytes_1)
    module_0.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    str_0 = "HZ"
    set_0 = {str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    none_type_0 = None
    bytes_0 = b"\xb7\xa3tK\xde"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    bytes_0 = b"J\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    float_0 = 1694.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    float_0 = 110.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    int_0 = -781
    int_1 = 2633
    tuple_0 = (int_0, int_1)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    float_0 = -2569.0816
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    bytes_0 = b"m"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    str_0 = "C.JRLN2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    bool_0 = False
    complex_0 = 1395 + 187j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    complex_0 = 3565.77 - 1756.924464j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    int_0 = 3661
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    complex_0 = 2483.7875 + 1548.9j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    str_0 = "ku<zD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    bytes_0 = b"G\x90*7\xc4\xc6]\x9c"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    int_0 = 536
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bytes_0 = b"\xa5RG\xd5\xf1\xc1s"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    str_0 = "lM8$2dr"
    module_0.get_new_command(str_0, str_0)


def test_case_3524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3525():
    int_0 = -908
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    int_0 = -1541
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    bytes_0 = b"\xf7\xb7X\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    float_0 = 556.407661
    tuple_0 = (float_0,)
    dict_0 = {}
    dict_1 = {tuple_0: tuple_0, float_0: dict_0, tuple_0: float_0}
    tuple_1 = (float_0, tuple_0, float_0, dict_1)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    bytes_0 = b'V\x94\xbe/\xf3\x1b\x98%J\xb2\xbe\xa3"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    str_0 = 'C:uI=fvrz+-R]uiA"?Y'
    str_1 = "fcMXYhA;f"
    str_2 = "/t)`\x0cOZxu[y)x_<(X\rXp"
    str_3 = "v&@\\HK<d@WB5~up=4zf"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_3: str_3}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    bytes_0 = b"p\x9d\x10Q\xa4x0\x1d\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    str_0 = ":G53\rxI$s?: u"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    int_0 = 800
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    str_0 = "Q"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0, str_0, dict_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, list_0)


def test_case_3537():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3538():
    str_0 = "\np1A.)E<23\x0c}k\x0b7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    int_0 = -1696
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (int_0, bool_0, int_0, tuple_0)
    bool_1 = False
    bytes_0 = b".\xa7[\x9a\x1b\x07\xd6\xf6="
    set_0 = {bool_1, bytes_0, bool_1, tuple_1}
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    int_0 = -303
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    bytes_0 = b"\xfb\xdcn#\x96$/d\x19&\xe8\xc5\xcf\xf5?\xd6\x084\x18x"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    dict_0 = {}
    bytes_0 = b"\xa0\x04\x93\xf8x\x05\x9b\xec;r\x0f\x12S\xc9\xa4\xa1\x8c\x8a0"
    tuple_0 = (bytes_0,)
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    float_0 = 1383.238
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    int_0 = -537
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    str_0 = "T$"
    list_0 = [str_0, str_0, str_0, str_0]
    float_0 = 1088.0
    list_1 = [str_0, list_0, float_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    str_0 = "B||B"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bool_0 = True
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    int_0 = -424
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    bytes_0 = b"\x11\x08\x98\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    int_0 = -3000
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    str_0 = "eM[%)hZ7T'~>j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    bool_0 = False
    object_0 = module_1.object()
    list_0 = [bool_0, bool_0, object_0, bool_0]
    list_1 = [list_0, bool_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    bytes_0 = b"*3\x1d\xf7\x92"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


def test_case_3555():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3556():
    int_0 = 1275
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    bytes_0 = b"\x9d~K\xd6\xed\xdd\xda\xf5m.\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


def test_case_3560():
    pass


def test_case_3561():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3562():
    str_0 = "E|"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    int_0 = -202
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    complex_0 = -406.1 + 2022.07j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    int_0 = 1799
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    int_0 = 1286
    bool_0 = True
    bytes_0 = b"\x11\x03G\x9fY2\x07\xb7x\xd4\xdb\xddv"
    tuple_0 = (int_0, bool_0, bytes_0)
    list_0 = [tuple_0]
    tuple_1 = (tuple_0, bool_0, list_0, tuple_0)
    list_1 = [tuple_1]
    module_0.get_new_command(list_1, int_0)


def test_case_3569():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3570():
    int_0 = 258
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    str_0 = "&hK 7AYp1JQ-+F"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    complex_0 = -2907.575057 + 249.9328j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    str_0 = "_:\\SM"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bool_0 = True
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (bool_0, bool_0, set_0)
    int_0 = -4511
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    none_type_0 = None
    bytes_0 = b"\xbf\x8a\xc1\xa0 \xe1\xc0B\xa0\x8c\xce\xd6\x9c\xa2n"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    int_0 = 526
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    bytes_0 = b'\xc8\xfa"W\x16"ay\xd0\xc4\xc2(\xe8'
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    int_0 = -3598
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    bytes_0 = b"TC\x13\x08\x9e\x90:Kr\xe4\x13"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    bytes_0 = b"\xe2*?\xc4E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    int_0 = 3747
    str_0 = "6\\"
    dict_0 = {str_0: str_0}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    bytes_0 = b"\xe4J\xda"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_3587():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3588():
    float_0 = -763.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    int_0 = 481
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    bytes_0 = b"\x8e\xac\xeaB\xf5\xbd\xd8\xac\xc8~\xd7\xe0"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    str_0 = "jO"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    int_0 = 1056
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    str_0 = "6w&go\\XUmL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    bytes_0 = b"Yx'\xc7q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    float_0 = 4009.314841
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    float_0 = -1069.662947
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    str_0 = 'Y",;w'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    str_0 = "35n6w0x$ml_'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    int_0 = -486
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    bytes_0 = b"\x0b\xe2\xb8\x02\xda(\xb4\xdc\xf0\xaf\x94\x8c\xf8\xb9\x88\xd2"
    float_0 = -1372.92183
    bytes_1 = b"b|\x88\xcf\x7f\x93=y\x89\xd2\xac\xcf\xe8\xfb\x014\xa3\xa2A"
    tuple_0 = (bytes_0, float_0, bytes_0, bytes_1)
    module_0.match(tuple_0, bytes_0)


def test_case_3602():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3603():
    bytes_0 = b"\xa6\xab8\xc4H\xb9B\x01bv\xcd^\x97\xc0^\x8f\x05\x8f\xf3+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    str_0 = "-~kv0k$Uy'48J"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    float_0 = -217.9154
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    int_0 = 948
    bytes_0 = b"\xeb\x9dT\x8d\xd3*GMi!E"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bool_0)
    tuple_1 = (int_0, int_0, bytes_0, tuple_0)
    tuple_2 = (int_0, tuple_1)
    module_0.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    float_0 = -2301.89272
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    bytes_0 = b"\x11\x81\xa6Q"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    float_0 = 219.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    complex_0 = 591 - 1249.864j
    tuple_0 = ()
    int_0 = -791
    tuple_1 = (complex_0, complex_0, tuple_0, int_0)
    list_0 = [tuple_1, complex_0, tuple_0, tuple_1]
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "Oj\nG_[\x0bT$ty8k"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    none_type_0 = None
    bytes_0 = b"\xff\xb5$\xff%\xfa"
    bytes_1 = b""
    tuple_0 = (bytes_0, bytes_1)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    object_0 = module_1.object()
    list_0 = []
    list_1 = [object_0, list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    str_0 = "F<Q"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    bytes_0 = b"\xc2\xb4\xe1\xc9j\xd9)+\xd4\xb6"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    int_0 = 2119
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    bytes_0 = b"Z%\xb4\xddc\x9cG\xfa-\xa4\x0c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    float_0 = 484.32
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    int_0 = 1170
    module_0.match(int_0, int_0)


def test_case_3624():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3625():
    str_0 = "])\\1 D)KQ.V "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    float_0 = 467.52
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    int_0 = 4128
    float_0 = -2819.645836
    tuple_0 = (int_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    str_0 = "5=Z]/\x0b`rRY;s"
    list_0 = [str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    bytes_0 = b"\xbf\xfd;"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    str_0 = "E23YPB,P/E'7Is\"jL8"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    int_0 = 937
    module_0.match(int_0, int_0)


def test_case_3633():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3634():
    none_type_0 = None
    int_0 = 397
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    float_0 = -783.0
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    int_0 = 1199
    tuple_0 = (int_0,)
    complex_0 = 1925.1969 - 677.682945j
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    str_0 = "%g"
    float_0 = -1340.0
    set_0 = {str_0, str_0}
    float_1 = 34.439684
    tuple_0 = (str_0, float_0, set_0, float_1)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    bytes_0 = b"\xe1h\xb8\xff\x1b\xe5\xcd\xe3\x0e\xb2_@\xce\xb5nh"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    str_0 = "kK0X$cI\\|x0d>w?]"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    float_0 = -2861.28
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    none_type_0 = None
    bytes_0 = b"\xff\xeeGM\x16\x81"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    bytes_0 = b"\x10N\x05\xd8w\x07\x1eX?\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    str_0 = "w"
    tuple_0 = ()
    list_0 = []
    bytes_0 = b"\x95\xd58\x19\xeakN]\xf5\x90\xe6\xe2"
    bool_0 = True
    tuple_1 = (tuple_0, list_0, bytes_0, bool_0)
    list_1 = [list_0]
    str_1 = "'-~sO("
    tuple_2 = (str_0, tuple_1, list_1, str_1)
    module_0.get_new_command(tuple_2, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    float_0 = 3546.14
    float_1 = 1381.1
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    bytes_0 = b"\t*\xcdf\x98\x89\xca3\xfe\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    str_0 = "L\t~W?MjuyO=-y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    bytes_0 = b"\x0b\xab\rw\xd17\x8c\xcb\xbar\xb2\x14"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    str_0 = "T&O!ayTv7HKzAD+fz"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


def test_case_3650():
    pass


def test_case_3651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3652():
    float_0 = 2846.7
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    bytes_0 = b"\x124\x90\xf3\x87\xab\x7f\xe7\x02pg"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    str_0 = "r4/M"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    str_0 = "(XfH[WwyA[DN@~<OPAR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    bytes_0 = b"\xaei\xf94"
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (bool_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    str_0 = "ot;S$Hskut$|Dvg"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3659():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3660():
    str_0 = "4\x0b("
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_3661():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3662():
    float_0 = -354.15
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    bool_0 = False
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    complex_0 = 1048.22412 + 1744.671j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    bytes_0 = b"\xed\x95\x80\x0f\xa5\x84\x9a\xe1\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    str_0 = "C^{J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    bytes_0 = b"Ts\xcc\xad\x18Q\xbd\x8d<\xb2\xeb\x96\x9b\xcaH"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    str_0 = 'sur)"KQ|U'
    str_1 = " w]b:Zo{9dBmh|7"
    str_2 = "\x0b\rzrVba5e"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    float_0 = 2092.90433
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    complex_0 = -303.7297 + 937.5j
    float_0 = -2840.752
    str_0 = "Zy\t\rR_E`\x0c]"
    tuple_0 = (complex_0, float_0, str_0, complex_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    int_0 = 2528
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    bytes_0 = b"\xa6\x96\xc37B\xa9\xec\xeb\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    int_0 = -1463
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    int_0 = 2890
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    int_0 = 795
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    str_0 = "1hrDSv)\x0bEdvr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = []
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    str_0 = "2C\tK*i\x0bi\t?'#8&k\x0c"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    int_0 = -1716
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


def test_case_3684():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3685():
    int_0 = -711
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    object_0 = module_1.object()
    float_0 = -962.3091
    module_0.match(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    int_0 = 1247
    module_0.match(int_0, int_0)


def test_case_3688():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3689():
    int_0 = 226
    tuple_0 = ()
    tuple_1 = (int_0, tuple_0)
    str_0 = "E'=ydsyg\x0c}.E?->"
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: tuple_1, str_0: bool_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    bool_0 = True
    int_0 = 1258
    list_0 = [bool_0, bool_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    int_0 = -3268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    bytes_0 = b'\xe2\xd0\xb9S\xf0"\x08;Im\x83m\xff'
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


def test_case_3693():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3694():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    float_0 = 1197.153505
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    str_0 = "I"
    module_0.match(str_0, str_0)


def test_case_3697():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3698():
    complex_0 = -4118 - 2201.3j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    str_0 = ",=37\ruDbcp++i~h"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    bytes_0 = b"S"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    int_0 = 1726
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    str_0 = "a&rg\x0cHY?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    bool_0 = True
    complex_0 = 942 + 4920.74j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    int_0 = -4313
    bytes_0 = b"\xa1\xe6\x9d~\xb4"
    dict_0 = {int_0: int_0, int_0: bytes_0, int_0: int_0, int_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    int_0 = -384
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    int_0 = 140
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    int_0 = -1196
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    list_0 = []
    list_1 = [list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    str_0 = "d[*-:"
    float_0 = 1354.0
    str_1 = "C>EQN0"
    int_0 = -1089
    tuple_0 = (int_0, str_0)
    tuple_1 = (str_0, float_0, str_1, tuple_0)
    list_0 = [tuple_1, tuple_1, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    str_0 = "@*C*'uPMp>\\iWe[Ld"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    str_0 = "M> p2&uJ"
    str_1 = "j\tZD"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


def test_case_3712():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3713():
    complex_0 = 726.5644 - 1528.74j
    list_0 = [complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    none_type_0 = None
    tuple_0 = ()
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    str_0 = "bz3"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


def test_case_3716():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3717():
    float_0 = 2678.339
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    float_0 = 454.546662
    set_0 = {float_0, float_0, float_0}
    bytes_0 = b"\xb8\xdaz:'\x0c\x17\rf"
    tuple_0 = (float_0, set_0, bytes_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    str_0 = "]iv?(!4ol(m q#,"
    str_1 = "|-{9x%V"
    bytes_0 = b"\xaf\x88\x03\x97\xa9\xd5\xc3@\xb7"
    dict_0 = {str_0: str_0, str_1: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    float_0 = -2554.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    float_0 = -2846.558404
    set_0 = {float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    str_0 = "E%arHQ[i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    str_0 = "!\x0bTS1\r=K94n];\\q["
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    float_0 = 1938.825
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, bool_0, bool_1, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    bytes_0 = b"e\x17"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    complex_0 = -3581.991 + 1189j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    str_0 = "'lTa.oF6-3j`BFH "
    list_0 = [str_0, str_0, str_0]
    str_1 = "9{ gZHBb+kJ"
    int_0 = -812
    tuple_0 = (str_0, list_0, str_1, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    int_0 = 288
    module_0.get_new_command(int_0, int_0)


def test_case_3731():
    object_0 = module_1.object()


def test_case_3732():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3733():
    float_0 = -389.836019
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    float_0 = -1906.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    bytes_0 = b"!\xb1\xcduM\xac\xae.\xa7\x86n{\xd2\xe3\x8a\xe0c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    str_0 = "#"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    float_0 = -186.37
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = ""
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    str_0 = "'\"l;DcVT%O%8$\\k]wc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    str_0 = "1}u0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    int_0 = -4
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    int_0 = -477
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    bytes_0 = b"\xf6H\x19\xb0\r\xe3\x19K"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    none_type_0 = None
    float_0 = -304.0
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    set_0 = {tuple_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    str_0 = "b!d(3i3o%Q`0^PVrk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    str_0 = "m;%"
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    complex_0 = -5066 + 1446.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    complex_0 = -493.2 + 1868.26j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    float_0 = -97.43
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    float_0 = 1428.2554
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    float_0 = -493.183
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    float_0 = 1801.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    str_0 = "l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    int_0 = 1113
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    str_0 = "~@uc-."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    complex_0 = 1435.262 - 5049.83j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    float_0 = 2438.894
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    float_0 = 2629.05
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    float_0 = -2130.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    object_0 = module_1.object()
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    bytes_0 = b"\x8d"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    float_0 = -1915.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    int_0 = -1411
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    int_0 = 599
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    str_0 = "wFX{&s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    complex_0 = -659.307209 + 1865.6409j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    bytes_0 = b"W\x84Q\xea:\\\xae/\xe6u`\x81\xde\x91\xcc\xa4c\x82;\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = False
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    bytes_0 = b'\xfd\xb0\xe3<"\xc4\x83\x0e1\xd1\x90\xe50\x86\xe1\x12\xde\r'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    str_0 = " sz\t()5@#b?&G"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    str_0 = "LY6%X"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    int_0 = -597
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    int_0 = -5635
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    str_0 = ""
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    str_0 = " gYO2cY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    int_0 = 5170
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    complex_0 = -6278.8 - 162.86j
    int_0 = 1154
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        int_0: complex_0,
    }
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    str_0 = "Q%+^t6]_xu*\x0c+fWqj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    int_0 = -5132
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    str_0 = "/5-(t\t='-0wyy%x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    bytes_0 = b"\x86\x85\x04\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    bytes_0 = b'3\x8a\xc9\n\x7f\xf5\xfe\xfd\xff\x05b\xe7\x87L\x85"\xb6'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    bytes_0 = b"\xda\xe5\x9a"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    int_0 = -985
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    complex_0 = 1513.4908 + 3810.739j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    int_0 = -3030
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    bytes_0 = b"\xe5o\xdb\xa7W\n}\xb5\xf5\xd7\xa7\x95\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    float_0 = 1814.59299
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    int_0 = -498
    float_0 = 344.22
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    complex_0 = -208.2 + 760.17315j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    int_0 = 2360
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    int_0 = 1024
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    int_0 = 568
    bytes_0 = b"P\x10\xa5\xb7\xfc"
    dict_0 = {int_0: int_0, int_0: int_0, bytes_0: bytes_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    complex_0 = 5336.63219 + 2222.788j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    int_0 = 680
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    bytes_0 = b"\xde\x96y#[\xda"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    int_0 = -2265
    bytes_0 = b"\xde\xd7\xe3\xdd@\xc2/\x04\xb3\xdc\xa8d]\x9c\x97\xf8\xdan\xd3\x0e"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    float_0 = 98.386
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    bytes_0 = b"\x82\xfb\xb1!\x14\xdc\x8cqd\x0c\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    float_0 = 2073.584997
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    int_0 = -1304
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    str_0 = "z!zc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    bytes_0 = b"\xde\xe1\x9b\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    str_0 = "L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    float_0 = 1614.084
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    complex_0 = -3546.56307 - 3636.28117j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    float_0 = -709.0
    tuple_0 = (float_0,)
    bool_0 = True
    bytes_0 = b"\x08\xaeU\xfdE\x06-\x87\x80"
    tuple_1 = (tuple_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    str_0 = ","
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    none_type_0 = None
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    str_0 = "9]\\I:+1GI"
    module_0.match(str_0, str_0)


def test_case_3823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3824():
    bytes_0 = b"F?\xcb\x84\xed\x8c\xce\xfa\xef\xa9\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    bytes_0 = b"s|9\x0bl\xfeS\xeb\xae\xf8D8\xbc\x04\xa3"
    dict_0 = {bytes_0: bytes_0}
    bytes_1 = b"\x08\xa8\xadU$\xb4\xa3"
    float_0 = -799.38
    tuple_0 = (dict_0, bytes_1, float_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    bytes_0 = b"\xd5\x98<\x92N\xedh=\x0e}\x90k\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    int_0 = -149
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    float_0 = 1954.96319
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    int_0 = 459
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3832():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3833():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    float_0 = -2443.5197
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    bool_0 = False
    bool_1 = False
    int_0 = -644
    tuple_0 = (bool_1, int_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    str_0 = "v]p9lLgP\\Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    float_0 = 1453.512
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    str_0 = "$6"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    str_0 = "/eKpw\x0b|A8o@s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    int_0 = 4082
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    float_0 = -221.44
    tuple_0 = (dict_0, bool_0, float_0, bool_0)
    bytes_0 = b"\xdaB\xf2\xd9\x07j\xd9\x19"
    tuple_1 = (tuple_0, bytes_0)
    list_0 = [tuple_1, bytes_0, dict_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    bytes_0 = b"\x8f\xe2S\xc8Z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    int_0 = -2305
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    float_0 = 1926.41
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    str_0 = "Mvyw|w\nzwI"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    int_0 = -732
    int_1 = 59
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_1}
    bytes_0 = b"\xea"
    tuple_0 = (dict_0, bytes_0)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    str_0 = "7HV[DV'%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    bytes_0 = b"7\xc0\x9c\xed;\xd8y*\xa2"
    set_0 = {bytes_0}
    list_0 = [bytes_0, bytes_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bytes_0 = b"\x18\x8e\xf5\xddn3\xe8\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    int_0 = 1802
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    int_0 = -3842
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    int_0 = 3865
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    int_0 = -807
    str_0 = "[\r\x0c3,U<6"
    tuple_1 = (int_0, str_0)
    module_0.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    tuple_0 = ()
    bytes_0 = b"9K\x1d\xfc\xfa\x89B\xde\xa5\xcf"
    tuple_1 = (tuple_0, bytes_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    bytes_0 = b"\x97\xa59"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    str_0 = "uX]]e:\ri#0\t*TZAe`"
    str_1 = "EP"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    int_0 = -84
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    bytes_0 = b"\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0, set_0, set_0]
    module_0.get_new_command(set_0, list_0)


def test_case_3862():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3863():
    str_0 = "\r"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    int_0 = -740
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    str_0 = "[\x0cH++\r1d`\ns~("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3866():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3867():
    float_0 = 2047.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    bytes_0 = b""
    str_0 = "[waLb`d'7_"
    module_0.get_new_command(bytes_0, str_0)


def test_case_3869():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3870():
    bytes_0 = b"\x8d\x8ad3N\xe20\xedj\xfe?\xaa\x9e\xa3l\xb9\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    str_0 = '"QLd\tyX]7`"4\x0bQ$kP'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    bytes_0 = b"K\xf7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    str_0 = "$^;yQ|KCuEzumOc"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    bytes_0 = b"\xff\x97W\x99\x84\x19"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    float_0 = -285.25141
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3875():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3876():
    complex_0 = -4618.038368 + 109.130635j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    float_0 = 421.95
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    int_0 = 952
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    bytes_0 = b"t\xc6\xb6\xeb\xe5\x95v\x0b\xa9"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    int_0 = -1671
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3881():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3882():
    bytes_0 = b"\x02a\x12\x8a\x05.\xf0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    str_0 = "rE^q(:6+X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    float_0 = -26.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    bytes_0 = b"\xf2\x1e\x1b\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    str_0 = "C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    float_0 = 1356.16185
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    float_0 = -3325.25
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    str_0 = "@\x0bG)v?.p}DA+;F\nP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    int_0 = 301
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    bytes_0 = b"%\x8dO\x01\xd3\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    int_0 = -2301
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    float_0 = 1292.1119
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    bytes_0 = b"-"
    set_0 = {bytes_0}
    bytes_1 = b"-u\x8a\x98\xd2\xa7YfA3k$\xf5\x940xe21x"
    module_0.match(set_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    bytes_0 = b":a\xdb\x8c\xda\xb6\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    str_0 = "L=Q\x0cluf:SWW{*BGXr"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    int_0 = 4716
    module_0.match(int_0, int_0)


def test_case_3900():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3901():
    complex_0 = 1375.8 - 249.7089j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    int_0 = -63
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    float_0 = -277.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    str_0 = '5A8R"9=Dx\x0c!J'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    int_0 = 1323
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    int_0 = -4421
    bytes_0 = b""
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    str_0 = "g~jiseqcCt:>$j#"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    bytes_0 = b"=\xa4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    str_0 = "~u/r3W.'5Hb"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    str_0 = "8b."
    module_0.get_new_command(str_0, str_0)


def test_case_3915():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3916():
    float_0 = -1194.92961
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    int_0 = 2815
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    bytes_0 = b"\xbb\xb7\x93W\x88\x07\xaaJW\x9f:\xf2\xe0^R\xde\x7fr"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    float_0 = -804.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    float_0 = 2644.956102
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    complex_0 = -6 - 1163.718923j
    dict_0 = {}
    int_0 = -2560
    tuple_0 = (complex_0, dict_0, dict_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    bool_0 = False
    str_0 = "j7:c\x0cR>n/=>m"
    set_0 = {bool_0, bool_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    float_0 = 1957.3612
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    bytes_0 = b"\xc7H\xec\xaa\xb1>\x1d\xdeSi\xc8R\x86`"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    float_0 = 183.0
    list_0 = [float_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    bytes_0 = b"c\x06\x87\xb6&W\xd7&\xae\x87\n\x99\xa5Y s\xa3"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3928():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3929():
    int_0 = -3175
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    float_0 = 359.7
    module_0.get_new_command(float_0, float_0)


def test_case_3932():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3933():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    int_0 = 3549
    int_1 = -568
    list_0 = [int_0, int_1, int_0, int_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    bytes_0 = b"o\xa8\xc1a\x96h\xab\\\xd9\x8eKoR"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    int_0 = -1556
    str_0 = ""
    str_1 = "&-8{'Q@ y~R&51x(,\x0b"
    dict_0 = {str_0: int_0, str_1: str_1, str_0: str_0}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    str_0 = "PY\rn|.e"
    float_0 = -1858.770225
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    str_0 = "n>c?=O5a"
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [str_0, object_0, str_0]
    list_2 = [list_1, object_0, list_0]
    module_1.object(*list_2, **object_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    float_0 = -2561.170512
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    bool_0 = False
    tuple_0 = ()
    list_0 = [bool_0, tuple_0, bool_0]
    bool_1 = True
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    float_0 = 3553.6917
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    int_0 = 70
    list_0 = [int_0, int_0, int_0]
    set_0 = set()
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    float_0 = -2678.508887
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    bytes_0 = b"\xd4\xa7\x99\x0f\x94q\x90\xf7e'\xb6\x98OP\xc2o0b"
    module_0.match(bytes_0, bytes_0)


def test_case_3945():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3946():
    bytes_0 = b"\x9c\x03\xd5\xdd785\x02D\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    str_0 = "QeSwX\tF7uLRvH\x0bJ7"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    int_0 = 770
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    complex_0 = -544.719 - 1504.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    bytes_0 = b"2\xa6\xcd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    str_0 = ""
    int_0 = -2433
    bytes_0 = b"\x7f\xfcO\xd7/\xd1\xab"
    tuple_0 = (int_0, bytes_0)
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    int_0 = -1551
    bytes_0 = b"\xef\xef\x00f\\V\x97F\xc2\xb8\x04%\xf2\xa8\x05\xca\xf7\xbf\x90\x82"
    tuple_0 = (int_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    float_0 = -5987.74615
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    int_0 = 2396
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    bytes_0 = b"\xf2d\xdb54\x8c(\xe5\rl\x18\x8ey\xc3\xa9\xe8\xa3'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    str_0 = "ylUj<{]Z\x0c1,"
    module_0.match(str_0, str_0)


def test_case_3959():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3960():
    float_0 = -1089.89
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    int_0 = 4080
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    bytes_0 = b"\xd7Bl\xdf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    str_0 = "R*[v1jf"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    bytes_0 = b"/=\xb1\x86\xbb\x9c\x14\xbe\xfb\x12k\xce\xb4u\x13lL\x89\xa2"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    int_0 = 289
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    int_0 = -103
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    int_0 = -2546
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    bool_0 = True
    complex_0 = 1689.8 - 1032.351j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    bytes_0 = b"\xc7\xfa\x04rv\xd8P\xe93M\x84N"
    str_0 = "qVo@u+PO fUX"
    dict_0 = {}
    str_1 = "j)]H"
    list_0 = [dict_0, str_1, dict_0]
    tuple_0 = (str_0, str_0, list_0)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    int_0 = -5458
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    bytes_0 = b"\x8b\x0c\x8f\x9bC5\\\xacr\x13\x9d\xfe\xd8\xae\x82f]v6*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    int_0 = -104
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    bytes_0 = b"\x86\x1b \xb8'\xb9\xfcD\x0b\xfds\xa6\x1d_\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    bytes_0 = b"]$\xe7\x83\xbf5\x02c\xcd\xb0W_\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    bytes_0 = b"q6a\x16\xae"
    tuple_0 = (bool_0, bool_1, bool_2, bytes_0)
    module_0.match(tuple_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    bytes_0 = b"8xc\xe2\xb5\xd7c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    none_type_0 = None
    dict_0 = {}
    module_1.object(*none_type_0, **dict_0)


def test_case_3980():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3981():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    complex_0 = 2888.2324 + 2962.915064j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    str_0 = "8q{0IrN+|O`^\t}5Mub'i"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    list_0 = [tuple_0]
    list_1 = [list_0, tuple_0, bool_1]
    module_0.get_new_command(list_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    none_type_0 = None
    int_0 = 788
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    bytes_0 = b"\xba\xf4]8@\xc3\x93}<w\x03"
    bool_0 = True
    bool_1 = True
    tuple_0 = (bytes_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    bytes_0 = b"\xff\x1c^+Ab\x15\xe4\x8b1\r\xe32"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    bytes_0 = b"\x1bm\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    complex_0 = -1165 - 239.3881j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    int_0 = 2103
    set_0 = {int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    bytes_0 = b"\x8a?\xc3\x95\xbd\xb6`h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    str_0 = "{F^"
    tuple_2 = (tuple_1, str_0)
    tuple_3 = (tuple_2,)
    module_0.get_new_command(tuple_3, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    bool_0 = True
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    str_0 = "Yb,*@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    str_0 = "20W36uv#-w$iua.D|K;7"
    int_0 = -1835
    tuple_0 = (str_0, str_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    float_0 = 1463.584818
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    int_0 = -613
    float_0 = -2242.0134
    list_0 = [float_0, int_0]
    str_0 = "xlHUkZY"
    tuple_0 = (list_0, int_0, str_0, str_0)
    module_0.get_new_command(int_0, tuple_0)


def test_case_3998():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3999():
    str_0 = "\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    str_0 = "G?nu0r,o3(=VL R\tv8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    bytes_0 = b"\x0e_\xa3CI_\xd7L\xfb\xf0"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    int_0 = 173
    bool_0 = False
    dict_0 = {int_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    int_0 = 5906
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    bytes_0 = b"\tS\xc3\xed[\x99\xfe U"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    int_0 = -2175
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, object_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    str_0 = "-Nu)<=@[B/m<%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    bool_0 = True
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    str_0 = "9 )^'VyU"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    float_0 = -1140.037
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    str_0 = 'c]\r@`hg"sfu|D1d'
    module_0.get_new_command(str_0, str_0)


def test_case_4014():
    pass


def test_case_4015():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4016():
    bytes_0 = b"7M4\x1e&\tV"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    int_0 = -904
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    str_0 = "euaAg.W2*Y*c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    bytes_0 = b"\x97Y\xfa\x1d\xe2\xa4\xb5\x12\xc2D\x8be9%\xc4\x18\x0c\x95\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    str_0 = "&bv1Da<{\rA;z"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    int_0 = 2024
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    int_0 = -1248
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    str_0 = "\r$Z1(QPqzO@!\r:P("
    float_0 = -1258.47
    tuple_0 = (str_0, float_0)
    int_0 = 1736
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    object_0 = module_1.object()
    str_0 = "u\r;"
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    float_0 = 945.3
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    complex_0 = 1337.30209 + 1108.72968j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    int_0 = 1348
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    bytes_0 = b"\xcc\xbd\xb9\xfa\xbc5\x84\x93S\xfe\xef\x91\xdbt\xfd"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    int_0 = 715
    module_1.object(*int_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    bytes_0 = b"\xe8-\xe2-\x98\xec\xb8\x8b#\xda"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    str_0 = "]A~.]BT2"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    float_0 = -728.626
    bytes_0 = b"\xfaH;\xa6k"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    complex_0 = 1882.2 - 3108.633j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    bytes_0 = b"a\xfd\xc3\x19s\xb2\x9d\r\xb1i\xd35"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    int_0 = 5845
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    str_0 = "Vkll}"
    bytes_0 = b"of\x1b\x8a\xe6/\x0c^"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    str_0 = "4-]a-;!VeMQkz?\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    float_0 = 278.354
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    list_0 = [tuple_0, bool_0, dict_0, bool_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4044():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4045():
    int_0 = 1249
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = True
    dict_0 = {object_0: object_0}
    tuple_0 = (int_0, object_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = False
    module_0.get_new_command(list_0, bool_1)


def test_case_4047():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4048():
    complex_0 = -1203.6907 - 4101.36j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    int_0 = 420
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    str_0 = "-_\x0b\rq/\tB<e>hR11)"
    str_1 = "(9fU2"
    str_2 = ""
    str_3 = "CT|1voeG;%[5%"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_3: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    bytes_0 = b"zZ>d\x0e\x85\x9a\xc8\xcf\xbed1\xe8\xfd@M\xb2\r\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    bool_0 = False
    complex_0 = 1400.563 - 1122.76j
    module_0.get_new_command(bool_0, complex_0)


def test_case_4054():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4055():
    str_0 = "g\r2lN\x0bP"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    complex_0 = -424.784 - 2253.817436j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    bytes_0 = b"T"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    str_0 = "\n\\[`Q!%"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    int_0 = 2146
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    int_0 = -2642
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    int_0 = 1272
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    str_0 = "u},:3e"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bytes_0 = b"\x9c\x11/w\xbeY\xa5O\n\xcc\x8aTl\x94\x80\x0f\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    float_0 = 2473.121671
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    int_0 = -523
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    str_0 = ";>~CrA]gD%Lfc}hj.D"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    float_0 = 474.1
    module_0.get_new_command(float_0, float_0)


def test_case_4068():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4069():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    bytes_0 = b"\x08@\x9bk\x0e\xaf\xf3#x\xde\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    int_0 = 346
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    complex_0 = 1272.9 - 475.3j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    float_0 = 3174.34702
    none_type_0 = None
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    float_0 = -3061.9233
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    int_0 = -334
    bool_0 = True
    complex_0 = 408.18 - 634.82703j
    dict_0 = {int_0: int_0, int_0: int_0, bool_0: complex_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    int_0 = 591
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


def test_case_4082():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4083():
    float_0 = 3178.0
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    int_0 = -2979
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    str_0 = "XL0Pq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    int_0 = 3147
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    str_0 = "|[6}"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    str_0 = ">\x0bFAp(*j"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    int_0 = 896
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    str_0 = "G%O&,A\nT3"
    module_0.get_new_command(str_0, str_0)


def test_case_4092():
    pass


def test_case_4093():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4094():
    int_0 = 1338
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    complex_0 = -2630.8503 + 3827.22126j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    int_0 = -857
    module_0.match(int_0, int_0)


def test_case_4097():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4098():
    bytes_0 = b"\x92\x8e-\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    float_0 = 1369.621893
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    int_0 = -1285
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    int_0 = -1567
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    bytes_0 = b"o\x978:\x08\x8a\x83y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    bytes_0 = b']\x89\xe1\xfel\xd3\xd7q~"\xfeM\xe2\x92\x0f\xbe\rv'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    str_0 = "rs +Ferh~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    complex_0 = 1984.23221 - 706.409j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    int_0 = 1405
    bytes_0 = b"\xca\xf8C\xcdzl\xe2"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (dict_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    complex_0 = 2780 - 871.936j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    float_0 = 2112.3325
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_4111():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4112():
    float_0 = 2691.49
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    complex_0 = -1208.0092 + 756.9069j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_4115():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4116():
    bytes_0 = b"(\x08j\xb1\xf8K+ \xda\xab\xb6\xc5\xc9g5\x96#\x19\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    bool_0 = True
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    bytes_0 = b"\x9b"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    int_0 = 2575
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    str_0 = "1x("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    str_0 = "st-.6;NC`r#r&FmUne"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    int_0 = 2496
    str_0 = "w(Bc4|Pay/,\x0c"
    int_1 = -3722
    dict_0 = {int_0: str_0, int_0: int_1}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    bool_0 = True
    int_0 = -1558
    list_0 = [bool_0, bool_0, bool_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    str_0 = "Oad"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    float_0 = -45.228707
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    float_0 = 1663.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    bytes_0 = b"\xb3\x08\x92\r@\xcb\xef\xd8&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    int_0 = 1140
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    float_0 = 906.886
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    bool_0 = False
    bool_1 = False
    bytes_0 = b"\x1b"
    tuple_0 = (bool_1, bool_1, bytes_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    int_0 = -474
    tuple_0 = (int_0, int_0, int_0, int_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    bytes_0 = b"\xc6\xdd\x7f\xf1"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    str_0 = ":h"
    set_0 = set()
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    float_0 = -2261.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    str_0 = "D*fh|/#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    int_0 = 336
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    str_0 = "<pvJ=?^q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    complex_0 = 267.49 - 2307.4906j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    str_0 = "D!64Gz\nn\x0cbX\\C"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    list_0 = []
    str_0 = "Q2$N\r=aZsv&}\nQi/x\x0c-"
    str_1 = "`A>qg"
    dict_0 = {str_0: list_0, str_1: str_1, str_0: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    bytes_0 = b"\xb1\xe2\x12_\x9a\xb7\x83\x00.\xc4\x0bT\x18\xbf\xa8\x92"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4145():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4146():
    int_0 = 1471
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    int_0 = -4424
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    bool_0 = False
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    float_0 = -1919.03
    dict_0 = {float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    float_0 = -2181.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    float_0 = -3022.5272
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    float_0 = 1426.55138
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    str_0 = "Eq6T56y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    complex_0 = 2238.19 - 5295.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    complex_0 = -1868 + 7387j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    none_type_0 = None
    bytes_0 = b"\x8ec\xff\xb49\xd4\x97\xab\x0c\xdd\x15"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    int_0 = 319
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


def test_case_4159():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4160():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    str_0 = '+CU:hF-"f'
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    int_0 = 3806
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    int_0 = 1646
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


def test_case_4167():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4168():
    str_0 = "8ssVK\x0c\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    complex_0 = -798.016 - 1988.6458j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    float_0 = -3753.545
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    complex_0 = -543.9864 - 852.4j
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    float_0 = 1099.219
    tuple_0 = (complex_0, list_1, float_0, complex_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    float_0 = -2814.6627
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    float_0 = 769.07
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    int_0 = 1387
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    bytes_0 = b"\xc3\xe7e3T\xb4\x83\xd1\xcc\x94GW\xf6^"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = []
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    complex_0 = -5209.8 - 1815.483j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    bytes_0 = b"\xf0nB\xaf\xdeu\xc1\x1b\xf1\x12\x92\x06"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    str_0 = "BvB*ufWxEG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    int_0 = -1087
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    str_0 = "ldI1\r[t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    str_0 = "t\x0b#d??"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    int_0 = -258
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    str_0 = "Vw)S\tQul'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    int_0 = 3532
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    int_0 = -333
    bytes_0 = b"\xb5\xd5@\xce\xe8\x1b\xd3o\x87\x1d*O\xe8"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    int_0 = -3476
    module_0.get_new_command(int_0, int_0)


def test_case_4191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4192():
    complex_0 = -2908.186834 + 215.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    float_0 = 2381.458
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    int_0 = 3226
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    float_0 = -799.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    str_0 = "03p"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    int_0 = 160
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    int_0 = -1936
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    float_0 = -839.263495
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    float_0 = 2403.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    bytes_0 = b"\xda\n\xa2rm\x80g}\x8a"
    bool_0 = False
    bool_1 = False
    list_0 = [bytes_0, bytes_0, bool_1, bool_1]
    int_0 = 463
    set_0 = {bytes_0, int_0, bytes_0}
    tuple_0 = (bool_0, list_0, int_0, set_0)
    tuple_1 = (bytes_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    float_0 = 1576.41
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    bytes_0 = b"\xe8\x0b\xe9\xc7IH\xfd\xdd\x1a\x07\x05"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    bytes_0 = b"\xa7"
    dict_0 = {}
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: dict_0, bytes_0: bytes_0}
    list_0 = [dict_1, dict_1]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    int_0 = 36
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    str_0 = 'J"hjIII"GP'
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    int_0 = 2279
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    int_0 = 346
    tuple_0 = (int_0, int_0)
    bool_0 = False
    dict_0 = {int_0: int_0, tuple_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    int_0 = 2267
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    bool_0 = False
    float_0 = 17.375724
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    bytes_0 = b"\xcd\x0fx\xed\x05\x02\xdf\x01;\xf0!\x92l\xfex\xe0Y~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    none_type_0 = None
    str_0 = "4o;vI!DJ.urXQ] hY+Q"
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0,)
    module_0.match(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    float_0 = 2446.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    int_0 = -1075
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    complex_0 = -2393.77818 + 1292.37355j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    int_0 = 1900
    int_1 = -3322
    bytes_0 = b"2?\x85\xab\x18\x87\xe6\x14\xe2^\xa1x\x89\xa9;\xe55\xc9\xf4\xc3"
    list_0 = [int_0, int_1, bytes_0]
    tuple_0 = (bytes_0, list_0)
    tuple_1 = (int_0, int_1, bytes_0, tuple_0)
    bool_0 = True
    bytes_1 = b" 0\xd7\xf1c\x1dRgY"
    list_1 = [int_0, bool_0, list_0, bytes_1]
    module_0.get_new_command(tuple_1, list_1)


def test_case_4220():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4221():
    bytes_0 = b"[\xe1Z\xca\x9f\xde\x0e\xdbZEp\x9b\x848\x85\xad\x08\x19"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


def test_case_4223():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4224():
    bytes_0 = b"\xd8\x0e\x11\xee\x14\x01j\x0fb\xb5\x12\xf0"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_4226():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4227():
    float_0 = 990.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    str_0 = 'U\x0cC"5W%%o`V,t/CP[~7'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    int_0 = -3009
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    int_0 = 1058
    tuple_0 = (int_0,)
    bool_0 = False
    set_0 = {int_0}
    tuple_1 = (tuple_0, int_0, bool_0, set_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    float_0 = -1162.51
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    int_0 = -79
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    bytes_0 = b"a\xdd\xbd\xc2\xafj\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    str_0 = "KU+T.Kv\t-/)t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    bytes_0 = b"\xaax0\xc0:\xcfo\xa4\xe8\x03m\xa9i\xad\xf7\xc9\x93\x9a\xe9C"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    none_type_0 = None
    complex_0 = 1885.2355 - 974j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    bytes_0 = b"\x19\xb8K\xd5\x886?\x87\x94/\x88\r\x01v\x9e\x0b`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    str_0 = "#s$t\x0bnNz+6WJ+p"
    module_0.match(str_0, str_0)


def test_case_4239():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4240():
    int_0 = -1515
    list_0 = [int_0, int_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    str_0 = "s"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    none_type_0 = None
    int_0 = -2730
    tuple_0 = (int_0,)
    set_0 = {none_type_0, none_type_0, tuple_0, tuple_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    str_0 = "l5xkWjH;"
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (str_0, tuple_0, bool_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    bytes_0 = b"\xebk\x81W\x89\xb6V\x9f\xbb\xdd\xc7\xc8\x93\x10f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    int_0 = 3536
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    str_0 = 'i0zK;"8>Pon$j%bIH\x0b.d'
    int_0 = 1040
    tuple_0 = (str_0, int_0, int_0, str_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    int_0 = 1339
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    complex_0 = -2460.20797 + 2155.058j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    bool_0 = True
    tuple_0 = ()
    int_0 = 988
    tuple_1 = (bool_0, tuple_0, int_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    float_0 = 2203.757
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    int_0 = 3942
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    int_0 = 118
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    int_0 = 1612
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    int_0 = 2689
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    bytes_0 = b"\xbe\x94\x80\xff05XY "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    bytes_0 = b"?\xbdC21&\x10\xdcqt\xa2\xcd\xa8~_R"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4260():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4261():
    str_0 = "%5yV"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    bytes_0 = b'\xa4\xe2j\xcf\xc3\xf8"\xd0\xf1\xad[\xc9\x85\x0f\xba\xbd'
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    int_0 = -1163
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    str_0 = "+DqBjHa"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    str_0 = "$*]uLgNT3>0}Ub$"
    module_0.match(str_0, str_0)


def test_case_4267():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4268():
    int_0 = 107
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    int_0 = 1048
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    bytes_0 = b"\xa5\xae\xbdw\x1f\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    str_0 = "f)x;/hyp"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4272():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4273():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    str_0 = "2kc"
    str_1 = "W/b:N3q.8"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    bytes_0 = b"E\xcc}\x1c\xc4\x12<;\x06\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    bytes_0 = b"\xe75\\\xc8@\x07\xbe\x7f\xef\xf6P\xda"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    list_2 = [list_1]
    list_3 = [list_2, bytes_0, list_0]
    str_0 = ",5"
    dict_0 = {str_0: list_3}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    int_0 = 3593
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    str_0 = "2*2t3r`[~/~^\x0c6)39"
    module_0.match(str_0, str_0)


def test_case_4279():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4280():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    int_0 = 881
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    float_0 = 1904.06
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bool_1 = True
    int_0 = 2626
    bytes_0 = b"\xa9m\xa5Zh\xd3%6\x04\xde8\x811\x7ft-w"
    tuple_0 = (dict_0, bool_1, int_0, bytes_0)
    bool_2 = True
    module_0.match(tuple_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    str_0 = "\nAJk"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    float_0 = 1746.01435
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    str_0 = "uSKpoG:> *C+!{|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    bytes_0 = b""
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    bytes_0 = b"\xa2!\xdf+F"
    str_0 = "~PHcwA:3J]tqZkl4J>"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    int_0 = -482
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    bytes_0 = b"L\xb41"
    module_0.match(bytes_0, bytes_0)


def test_case_4292():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4293():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    bytes_0 = b"\x90J+\x02\xe2\xb6HW>"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    str_0 = "&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    str_0 = "AOA0GkgXjtGc1"
    str_1 = "$iD2]kAvk\x0cuHH~\n"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    complex_0 = 87.757012 - 1909.27626j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    bytes_0 = b"w[]y?"
    list_0 = [bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    float_0 = 1794.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    bytes_0 = b"\xf9\nj\xe8Ku"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    int_0 = -1011
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    int_0 = 2328
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = (int_0, int_0, int_0, list_0)
    bool_0 = False
    tuple_1 = (int_0, tuple_0, bool_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    int_0 = -502
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    bytes_0 = b"W\xab"
    bool_0 = False
    list_0 = [bytes_0, bool_0, bool_0]
    str_0 = 'o:][Gl+--f(:u^IwB{"T'
    tuple_0 = (list_0, bool_0, str_0)
    int_0 = 2121
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    bytes_0 = b"\x19"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    str_0 = "'\r fA?{j$Q<"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    int_0 = -85
    int_1 = -87
    dict_0 = {int_0: int_0, int_0: int_1}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    object_0 = module_1.object()
    str_0 = "P+tT0k=0q"
    tuple_0 = (object_0, str_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    complex_0 = 12.3 + 3795.841j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    set_0 = set()
    tuple_0 = (set_0,)
    bytes_0 = b"\x14\xbd\x82\xdb}\xe3\xa2\x8d\x93\xefB\x10b4MO\x19\x0e"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    int_0 = -2924
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


def test_case_4313():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4314():
    bytes_0 = b"\x9a\x95\xe1\xae,\xfb6("
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    float_0 = -1669.09
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    int_0 = -1502
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    float_0 = 5533.149
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    str_0 = "yQ<\x0c\x0bT3^.thY."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    str_0 = "LT~VC=lP.ZakF{["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    str_0 = "\x0bsUm:3"
    bytes_0 = b"\x12{\xb0"
    dict_0 = {str_0: bytes_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    bytes_0 = b"\x08\xb4\x1c8\xbf\x9f)\xdb\x02\x82Q\xe2\xb9\xae\x82DA\xda\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    bytes_0 = b"\xb8\xd3\x91s\xb7\x9f\x7fB\xbc\xe9p<Q\x82\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0}
    tuple_1 = (bool_0, tuple_0, dict_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    bytes_0 = b"\xe4'\x07\xe8\xb81\xd6\x194\xf4\x11\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    bytes_0 = b"2\xbd\x88V\xd7\xdb\xd1f\xd8\x0e\xf5\xe2["
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    complex_0 = 70.77 + 416.885j
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    tuple_1 = (complex_0, tuple_0)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    bytes_0 = b"~\x16\x1c\x99\xe5 %"
    int_0 = 949
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    bytes_0 = b"\xb4'"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    str_0 = "o.S[6JMVqG"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    float_0 = -554.047771
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    bytes_0 = b"^\x0f\xd3\x13\x1c\r\xaf\xd0\xd8}\xaePl\x88\xe8\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    str_0 = "1X+XSOs "
    str_1 = 'QA+4[n7_, `9`ak2\x0c"'
    set_0 = {str_0, str_0, str_0, str_1}
    tuple_0 = (str_0, str_0, str_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    float_0 = -681.501838
    int_0 = 2376
    tuple_0 = (float_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    int_0 = 778
    bool_0 = True
    list_0 = [int_0, int_0, int_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    str_0 = ""
    list_0 = [str_0]
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    str_0 = '>6"l?*l3_\x0cF)Kvd'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    bytes_0 = b"-5G\x96\x07\xc2R\x00=2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    int_0 = -1030
    bytes_0 = b"+c\xc9I\xb9~x\x1c\xdf\x8d+O\x82"
    tuple_0 = (int_0, bytes_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    float_0 = -2882.685584
    dict_0 = {float_0: float_0}
    bytes_0 = b""
    tuple_0 = (dict_0, bytes_0, dict_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    int_0 = 851
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    complex_0 = 272 - 3517.575j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    dict_0 = {}
    bytes_0 = b"\xc7[\x8a\x03Q\xed\x89qs\x82\x91\xb3d\x1e\x0b"
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    float_0 = -2083.64
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    float_0 = 528.855
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    int_0 = 379
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    int_0 = 613
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    bool_0 = True
    int_0 = -624
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    int_0 = 6
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    str_0 = "]I"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    bytes_0 = b"\xd9FoM;\x87\x19\x17D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    float_0 = -589.9
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0, list_0, float_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    int_0 = -1114
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    int_0 = 3588
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    str_0 = "%*dM'# %dwT"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    str_0 = "Cq<mh#|2i'r\n];T\\L\nk"
    module_0.match(str_0, str_0)


def test_case_4358():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4359():
    complex_0 = -862.33153 + 2945.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    int_0 = -3668
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    int_0 = -6271
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    float_0 = -2063.84004
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    float_0 = -4354.84528
    tuple_0 = (float_0,)
    tuple_1 = (tuple_0,)
    complex_0 = 885.712892 - 1272j
    dict_0 = {tuple_1: float_0, float_0: tuple_1, complex_0: complex_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    int_0 = -1043
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    bytes_0 = b"\xfc\x7f\xe27\xe3\x00\x8av\xed!v\xb1y\xda\xb20\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    float_0 = -2969.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    bytes_0 = b"\xb0\xf9\xe7\x95n'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    tuple_0 = ()
    bytes_0 = b"\xd1\xdc\x92mr\xaf\x83>"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    float_0 = 449.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    str_0 = "z:Fi\n1sy|.6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    float_0 = -312.237
    module_0.get_new_command(float_0, float_0)


def test_case_4372():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4373():
    bool_0 = False
    int_0 = -1617
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    bytes_0 = b"\xd18h\x95\xdb\x12`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    dict_0 = {}
    bytes_0 = b"*\xa5\xa2\xc4\x92"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    list_0 = []
    int_0 = 5553
    set_0 = set()
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: bool_0}
    tuple_0 = (list_0, int_0, set_0, dict_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    int_0 = -167
    module_0.match(int_0, int_0)


def test_case_4378():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4379():
    int_0 = -328
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    str_0 = "_\r--@BW#\x0cN!u`Tv&"
    float_0 = 788.3
    dict_0 = {str_0: str_0, str_0: str_0, float_0: float_0, str_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    str_0 = 'n!o "g$T#9=7/'
    str_1 = "|X6x"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    str_0 = "ku q}P~HXcx}p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    int_0 = -368
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    str_0 = "P\rBTHg"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    int_0 = 787
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    int_0 = -1319
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    bytes_0 = b"qx0J\x15V+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = False
    tuple_0 = (set_0, bool_0, bool_1)
    dict_0 = {}
    str_0 = "=#8xw0yP\tL;'h=<z<kG"
    tuple_1 = (tuple_0, set_0, dict_0, str_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    bytes_0 = b"`\r\xa4W\xdeL\xff\xc5\xa6\x12{\xc9\xedI#pd\xdb\x12~"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    float_0 = -2115.3552
    float_1 = -1306.1
    module_0.get_new_command(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    str_0 = "[Zw}fKPE:W5c"
    bool_0 = False
    bool_1 = True
    list_0 = [str_0, str_0, bool_0, bool_1]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    complex_0 = 2674.4875 + 12.4j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    bytes_0 = b"\xdf\xdba]\xfd\xadT\xefp\x93\x9d$\xd4\xaf^\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    int_0 = -2023
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_4395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4396():
    set_0 = set()
    str_0 = ";6(hy.hzdFKzC)-4hD"
    list_0 = [set_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    int_0 = -625
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    complex_0 = -1801.406698 + 620.1j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    int_0 = -995
    bytes_0 = b"\xca\x1b"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    int_0 = -2067
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    str_0 = "(p\t]3sbF&1n<WjXC<"
    none_type_0 = None
    str_1 = "'\tA|trp:+u\x0cRAAbhwV"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    str_0 = "IXC87r4@:|lx"
    int_0 = -1365
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    bytes_0 = b"\x98,\xd13\xae\xd2\xcd\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    bytes_0 = b"\x8b\xef\x9d\xc3\x9b\xb3\xf9n\r\xa8\x83\x80\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    bytes_0 = b"\xca\xdf\xc3\x9e\x1aj\xa8#Q\xee\x88\x93\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    bytes_0 = b"\x9c\xf6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    complex_0 = -617.1 - 996.45j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    complex_0 = 5175.5 - 149.181876j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    float_0 = -1968.189
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    str_0 = "llaI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    str_0 = ")XT-\tnFZH&cahn]C"
    list_0 = []
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    str_0 = "`Y4E#hB)Y5}X="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    dict_0 = {}
    str_0 = "xaJ,@\r) 0Ag1]9"
    bool_0 = False
    tuple_0 = (dict_0, str_0, bool_0, bool_0)
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    bytes_0 = b"$/u\x16\x84\x1b\xd3\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    str_0 = ";=$]p)lY7W\x0cJ3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    str_0 = "9dbEky"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    bytes_0 = b"\xca\xce\xcaF\xaf\xed=\xc0\xeeZ"
    set_0 = {bytes_0, bytes_0, bytes_0}
    bytes_1 = b"R\xf2\xdb\xa2crKi"
    module_0.match(set_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    int_0 = -629
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    str_0 = "ezk`jaRj#-\t';[8E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    bytes_0 = b"\xf5\xaag\xd0\xa3g\xda\x00\xc0\xcb\xb2\xf9t\xb2\xce\xad\xaa\x07"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    complex_0 = 1502.958 + 664.4433j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    str_0 = "YK/f0HjL5d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    float_0 = 2758.311
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    bytes_0 = b"n\x11\xbf\x81/\xca\x1e`\x83"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    bytes_0 = b"*TtZ"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    int_0 = 1152
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    float_0 = -59.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    bool_0 = False
    complex_0 = 2108.3 - 2072.999252j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    str_0 = " %[/\\QNEc6AFy.bMt3"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    int_0 = -1012
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    int_0 = -4538
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    int_0 = -2668
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    bytes_0 = b"T\xeb\x11\xed\xad\xb80\x8e\xc0\x10\xd3\xac\xdco\xee\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    str_0 = "]%;pMr[_bJ.<<e>a>p"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    str_0 = "[^Yg>[GNI"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    float_0 = 2126.919
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4446():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4447():
    int_0 = 267
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    complex_0 = 1382.5373 - 3139.39j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    str_0 = "|OW"
    bytes_0 = b"\xb0i"
    dict_0 = {str_0: str_0, str_0: bytes_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    str_0 = "'Of"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    float_0 = 74.0
    float_1 = 3169.118629
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_4453():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4454():
    bytes_0 = b"\x1c\x08\\[\xea$h\x7f\xc9"
    bool_0 = True
    bool_1 = True
    tuple_0 = (bytes_0, bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


def test_case_4455():
    pass


def test_case_4456():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4457():
    int_0 = 2803
    module_0.get_new_command(int_0, int_0)


def test_case_4458():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4459():
    int_0 = -2196
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    bool_0 = False
    int_0 = 4185
    tuple_0 = (bool_0, bool_0, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    str_0 = "3=#y}-nDdeI"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_4462():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4463():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    bytes_0 = b"0\xd7\xcc\x82F\xed\xcc\xa3\xc8b\xd8\xb9\xd7\xfb\xd7\x85$"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4465():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4466():
    int_0 = -1654
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    bytes_0 = b"Za.\xe0\xb7pf\x8e\xf2\xf8T=\xc86\xc13c"
    str_0 = "fp,24\x0bc"
    tuple_0 = (bytes_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = True
    tuple_0 = (object_0, bool_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    str_0 = "Fogt)hl=`8"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    str_0 = "1fd!Q\\8D$/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    none_type_0 = None
    float_0 = 584.244748
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0, float_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    str_0 = "qU<K1m454uAtD0J=Ri"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    complex_0 = 2518.7 - 2288.00692j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    str_0 = '\x0c#\\J\nM"RMbXsY>b33'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    int_0 = -631
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    complex_0 = -9.415 + 1656.86j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    bytes_0 = b"7s3\x8fy\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    int_0 = 608
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4479():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4480():
    bytes_0 = b"\x15\x14Y\xa0,\x11\x84\x7f\x14\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    none_type_0 = None
    complex_0 = -330.6 + 3945.941j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    bool_0 = False
    bytes_0 = b"'\x1cce\xa5z\x7f\x0f\x8d\xc4\xfeJ\x13S<"
    bool_1 = False
    tuple_0 = (bytes_0, bool_1)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    str_0 = "7_v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    float_0 = 2491.8365
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    str_0 = "ckZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    float_0 = -2295.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    int_0 = -1815
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    int_0 = 664
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    none_type_0 = None
    bytes_0 = b"\x16\x7f\x94.\xaaU3\x83"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    float_0 = 1980.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    str_0 = "YIk* dPu_"
    int_0 = -1085
    list_0 = [int_0, int_0, int_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    int_0 = 1961
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    str_0 = "aKgg?{d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    int_0 = 1921
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    int_0 = 686
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    int_0 = -2519
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    int_0 = 956
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    bytes_0 = b"\x13"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    none_type_0 = None
    str_0 = "F'%dqY&"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    bytes_0 = b"6Y\xfaz\xe6Kt\xf1\x12\xd1\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    complex_0 = -5135.31728 + 1355.5228j
    str_0 = "6lY+<yxWl*\x0b0"
    none_type_0 = None
    str_1 = "<-N"
    str_2 = "1@d;dJgz"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(*complex_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    str_0 = "2l<L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    bytes_0 = b'D:\xcb\x87\x03"&W'
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (list_0, bytes_0, list_0)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_4505():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4506():
    int_0 = -1651
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    int_0 = -3181
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    bytes_0 = b"$\x08\x818\xc2Xg=:\xc5\x07\xe4*"
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, object_0: dict_0, object_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    int_0 = 2025
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    int_0 = 1916
    str_0 = "-'"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    complex_0 = 76.106 - 1517.13j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    bytes_0 = b""
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    bytes_0 = b"B\x8bdQEc\x83g~\xd9W\x95\xd6(\x18\x11"
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bytes_0, bool_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    bytes_0 = b"\x97\xde\x92\xd1\xb8N\x8cr\xcc\xaa\xbc\x12)\x95\xe7\xe6"
    module_0.match(bytes_0, bytes_0)


def test_case_4515():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4516():
    str_0 = "7\x0cbm*![ &j|Rt~@16hs:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    complex_0 = 2077 + 1034.1j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    str_0 = '\rpN]8^Br"95w.qT'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    bytes_0 = b"\xf1\x8f'}\x17\xeb\x04\xfc-\xc8\x1c\xb2\xdd7\xab\xbeT"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    str_0 = "B(IywZfV-z["
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    complex_0 = -3018.306 - 538.8j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    bytes_0 = b"\xf1.\x8d`\x9eCO\xc3\x857\xc9*\x12\xa66\xc0\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    str_0 = "kaE~%3*'\x0c "
    str_1 = "s;$~\x0b\\ZYD"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    bytes_0 = b"\x8f "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    str_0 = "ljqDxgC@m>GS1k$%63i'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    int_0 = -975
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    float_0 = -47.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    str_0 = "DanqCuU\ncn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    str_0 = "EQ(,^\nMg+ix"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    float_0 = -2465.040123
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    bytes_0 = b"\xb0"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    float_0 = 2700.34
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    int_0 = -2431
    float_0 = -1410.20856
    tuple_0 = (int_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    complex_0 = 2424.668639 + 2249.483736j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    bool_0 = False
    int_0 = -2914
    set_0 = {bool_0}
    int_1 = -4067
    tuple_0 = (bool_0, int_0, set_0, int_1)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    bytes_0 = b">\xd2\xcc\xab\xd6\x07\x93\\\xca\xc3\xd2\x05\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    int_0 = 1429
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    int_0 = 181
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    str_0 = "fV/Y2a{U~@~P1w5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    str_0 = "&}@4]K\rT-,20))TZ{"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    bytes_0 = b"U\xa9\x1a\xa0]\xb1x\xb4\x90\x0f"
    bytes_1 = b"\xa7\xdd\x84\xb6(Q\x86O\xe7"
    int_0 = -1352
    dict_0 = {bytes_0: bytes_0, bytes_1: bytes_0, bytes_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    int_0 = 765
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    str_0 = "A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    str_0 = "r^_g^fFIC\rn2"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    float_0 = 1890.44777
    module_0.get_new_command(float_0, float_0)


def test_case_4549():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4550():
    complex_0 = -2818.4 + 1279.87309j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    str_0 = "4rF7]"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


def test_case_4552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4553():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    bytes_0 = b"\xe5\xfb\x9c\x1d\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    int_0 = 3365
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    bytes_0 = b"j\x1b\xf5\xe6\xe1\x8ev"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    int_0 = 776
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    float_0 = -2880.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    str_0 = "9tyRZml/#"
    set_0 = {str_0}
    list_0 = [str_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    float_0 = -3010.60246
    module_0.get_new_command(float_0, float_0)


def test_case_4561():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4562():
    complex_0 = 2202.48368 + 586.21493j
    bool_0 = False
    list_0 = [complex_0, bool_0]
    list_1 = [list_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    object_0 = module_1.object()
    float_0 = 3624.597
    module_0.get_new_command(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    str_0 = "G`_at(\\nxln=_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    float_0 = -2327.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    int_0 = 3145
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    str_0 = "M3UGXdE!@[y88~LF{"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    bytes_0 = b"2I\x8c%\xb5"
    int_0 = 2347
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    float_0 = -3391.6898
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    int_0 = 1781
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    bytes_0 = b"*\x87n\xcd\x91aj\xc1;j\x1e\xc2\x08\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    str_0 = "y/*JO6_{)&HWy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    int_0 = 284
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    bytes_0 = b"\xcf~\x1b\xb9,\x07s\x8d$n\xb8Dk\x13\xb6\xc40\r;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    bytes_0 = b"\x94y\x1c\x8a\xa0m\x88i\xfb*\x7fgu\xee"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    str_0 = 'n\x0cJ}NYhAf"aw`\r+|^_z'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    str_1 = "tG#[|{>:`F;"
    bool_0 = True
    tuple_0 = (dict_0, str_1, bool_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    str_0 = "KycA&.l)WZ$&ln"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    float_0 = 539.94949
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    str_0 = ",&W6L7Hu8=9?j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    complex_0 = -2035.927 - 2605.61208j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4585():
    pass


def test_case_4586():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4587():
    bytes_0 = b"_zI"
    int_0 = -4527
    list_0 = [bytes_0, int_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    int_0 = -2686
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    bytes_0 = b"\\+\xec\xbd\xeb\xe9X\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    bytes_0 = b"\xd0\xb6R,\xce9\x10\xc3\x84\xbb\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    bytes_0 = b"7;,\x05P~\x93\xe1\xe2\x81\xa1\xb7\xa5\xafF"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    str_0 = "0u&,J\n5kJ<u u#/DHs"
    complex_0 = 1939.098 + 776.86227j
    tuple_0 = (str_0, complex_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    bytes_0 = b'\x1b\xe9"\xa9"\xcf'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    bytes_0 = b"\xc1q~KD[\xbc\xd78\x8c\x8cm\xc8+z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    bool_0 = True
    list_0 = [bool_0]
    str_0 = ""
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    float_0 = 422.77792
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    int_0 = 1402
    bytes_0 = b"\xd8\x15\x98\xad\xde\xd4\xdd\xb8!\x90\xe2\xb1u"
    tuple_0 = (int_0, int_0, bytes_0)
    dict_0 = {int_0: tuple_0}
    list_0 = [dict_0, dict_0, int_0, bytes_0]
    module_0.match(list_0, list_0)


def test_case_4598():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4599():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    bytes_0 = b"j\xde\xea9\xe1\xd6&s1\xee\xe3\t\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    str_0 = "fC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    str_0 = "@$4MPu%U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    bool_0 = True
    set_0 = set()
    float_0 = 487.4
    tuple_0 = (bool_0, set_0, float_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    int_0 = 4243
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    bytes_0 = b"\xca{\xe1\xba\x92\xb0\xfc\xd1\xce\xea\xb3\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    bytes_0 = b"U\xcd=\x84r\x8c\\W\xeb/@\xa6\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4609():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4610():
    int_0 = -2016
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    bytes_0 = b"\xd8\xe2\xb5\xc9},\xe8\r\r\xf0O\xd9\xb4\xb1V\x81b\xe3"
    tuple_0 = (dict_0, bytes_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    complex_0 = 980.8 + 617j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    int_0 = -186
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    str_0 = "~0Mg|.^O+-iKL3bb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    int_0 = -1795
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    str_0 = "8Hr\x0b<zEYyb~zZ},"
    list_0 = [str_0, str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    complex_0 = 6689.589 + 466.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    str_0 = "S\x0b/m\\>\rmMe2\\'Mg"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    int_0 = -1991
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    complex_0 = 1797.18991 - 706.1j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    int_0 = 2009
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    int_0 = -666
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    int_0 = 1523
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    bytes_0 = b"+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    str_0 = "{&Av&I"
    str_1 = "J?mvNN[~-8-"
    str_2 = "-\rmv=y"
    dict_0 = {str_0: list_0, str_1: str_0, str_2: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    bytes_0 = b"\n\x1b\x81@"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    float_0 = 854.48151
    bool_0 = False
    tuple_1 = (tuple_0, float_0, bool_0, tuple_0)
    float_1 = -117.530093
    module_0.get_new_command(tuple_1, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    float_0 = -1396.372089
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    str_0 = '=dk2j:n"\rS_g;'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    int_0 = 1631
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    int_0 = 1125
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    int_0 = 52
    tuple_0 = (int_0, int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    object_0 = module_1.object()
    bytes_0 = b"\xf0\xe1\x1ei\xfa"
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    bytes_0 = b"\xce\xa7s\x16\xd3\x8f\xef\xeb\x83\x7f\x9ey\x02\x83"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    bool_0 = False
    float_0 = 3412.453
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    bytes_0 = b"H\xd7\xd7\xa3\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    int_0 = -2214
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    str_0 = ""
    dict_0 = {}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    complex_0 = -1728.28 + 1229.614335j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    float_0 = 2544.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    str_0 = "z,XU@7N,Nr\nUGB-ui#\r"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    str_0 = "[F0ydY`8xRL*\r]P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    str_0 = "{R5*O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    str_0 = 'u(6\rsb"[Kx.'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    int_0 = -2087
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    bytes_0 = b"T`\x91\x94\x11\x90?\xd0\xd6\xb5\xa6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    bytes_0 = b"$\x9cf\xe3\x1c\xdf|\xb3:\xf3\xf4~\xb8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    int_0 = -1449
    bytes_0 = b"\x81\x96J\xeb\x00im\\\xe3\x8c\x86P9\xc8\xd8\xd66"
    list_0 = [int_0, int_0, bytes_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    float_0 = 529.0358
    int_0 = -2201
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    bytes_0 = b"\xed\xa8I\x92`v"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    int_0 = -1669
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    complex_0 = 206.561 - 2340j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    int_0 = -2414
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    float_0 = -1944.695
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0, tuple_0, tuple_0, bool_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    str_0 = "t1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    bytes_0 = b"\xe9\xe9\xfbV\x0c\x98\x94\xf5\x0ch\xb2\xc6l\x0fa\xb0\xa0\xa8\xb8\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4666():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4667():
    bytes_0 = b"\xa9\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    str_0 = "=9X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    float_0 = -2179.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    bytes_0 = b"E\t\xb4\x18\x93\xa7zp\xc5G\x0e\xc7.l\r\xec"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    float_0 = 1779.1966
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    bytes_0 = b"\x04"
    bool_0 = False
    bytes_1 = b"\x8c\xc5\x1e\xbcI7\x9c>\xabm\xbeM\xa5(%"
    dict_0 = {bytes_0: bytes_1, bool_0: bytes_1}
    dict_1 = {bytes_1: dict_0}
    tuple_0 = (bytes_0, bool_0, bytes_1, dict_1)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    str_0 = "\tYI]G *n#"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    str_0 = "S:\tu"
    module_0.get_new_command(str_0, str_0)


def test_case_4675():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4676():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    bytes_0 = b"\x93\te\xd6?l"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_4678():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4679():
    int_0 = 2930
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    complex_0 = -1539.435871 + 2109.27j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    bytes_0 = b"\xeer\x9fg\x00\x08\xe9\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    float_0 = 1078.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    complex_0 = -1360.176 + 1883.5525j
    bool_0 = True
    tuple_0 = (complex_0, complex_0, complex_0, bool_0)
    list_0 = [tuple_0, complex_0, tuple_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    str_0 = "o;ECbB}x5$=K3qK}#C(\r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    none_type_0 = None
    int_0 = -1597
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    none_type_0 = None
    str_0 = "fZ]&H#Q"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    int_0 = 3540
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    bytes_0 = b"b\xad\x17\x0c(b_\xa1\xc5_\xb7\xc0\xcc\xd8"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    bool_0 = False
    bytes_0 = b"\xd9\x91m'\xb5\x9e\x99\x1e\x0f\x0e\x14\x16\xb2"
    tuple_0 = (bool_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    bytes_0 = b"\x8f\xa9\xa8\xca\xe5\x0c\x04Y_HB\xe20"
    module_0.match(bytes_0, bytes_0)


def test_case_4694():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4695():
    str_0 = "B;xuha5A"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    bytes_0 = b"\x96\x12N;k\x15\xfak^4]F\xd3\xc0\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    bytes_0 = b"\xcf\t\x81\xd0z$\xe3\x83\x17\x8e\x82\x0f\xa1(:\xda\x148"
    list_0 = []
    tuple_0 = (bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    str_0 = "*$\x0c_fu6hJQl+&v"
    module_0.match(str_0, str_0)


def test_case_4699():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4700():
    str_0 = "-@Y$>1VBc'Mw|IRq%"
    int_0 = 3817
    dict_0 = {int_0: str_0, str_0: int_0, int_0: str_0, str_0: int_0}
    bool_0 = False
    tuple_0 = (str_0, int_0, dict_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    bytes_0 = b"\x04\xa7a\xba\xbd\x06'@\xb4A\xf8\xaf\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    object_0 = module_1.object()
    complex_0 = 396.92 + 1782.9j
    module_0.get_new_command(object_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    str_0 = "Ou'4D/n7Ol"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    str_0 = "@("
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    float_0 = 1375.362286
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    float_0 = -4275.44
    dict_0 = {}
    list_0 = [float_0, dict_0, float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    none_type_0 = None
    bytes_0 = b"\xcd\xe3%"
    module_0.match(none_type_0, bytes_0)


def test_case_4709():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4710():
    complex_0 = 662.6533 + 1936j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    float_0 = 3075.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    str_0 = "g]WXt#iNh\n>d2r]fZ:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    float_0 = 3220.3
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    bytes_0 = b"ZD\xcd\xd7'\x9a]_\xc7\"y\x1dN\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    int_0 = 123
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    str_0 = "mh7PmS"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    str_0 = "wy\"l52'`Ssqwjx"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    complex_0 = 906.52 - 618.57j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    none_type_0 = None
    int_0 = -3698
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    str_0 = "aW)z"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


def test_case_4722():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4723():
    int_0 = -760
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    int_0 = 710
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    str_0 = "OUs5sLg1"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    bool_0 = True
    bool_1 = True
    int_0 = -623
    list_0 = [bool_0, bool_0, int_0, bool_0]
    tuple_0 = (bool_0, bool_1, int_0, list_0)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    str_0 = "di0\x0c0SpdgOb=>Kt+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    bytes_0 = b",^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    int_0 = -729
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


def test_case_4733():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4734():
    str_0 = "K6f?sx=`h)<\t^i}$Kvk"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    int_0 = 2699
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    bytes_0 = b"\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    int_0 = -1466
    complex_0 = -794.247 - 701.795j
    module_0.get_new_command(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    int_0 = -570
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    int_0 = 3858
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    str_0 = "\r]%(1-m.Am"
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    bytes_0 = b"\xf3\xd8*\xb0n\xff\x06\xcc\xb6\xfbi\x15\x96;%\x99HL\xa7"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    bytes_0 = b"\xf5\x16f\xefs\x88\xf3\x0e5\x89\xb05\x9b\xf4\xdf`\xb9\xfd\x95\xec"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    float_0 = -3445.8771
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    bytes_0 = b"\xe6E\xdfgn?\x1c^J\xa1\xcf\xeft\x99"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    str_0 = ":]\\>oxF!;UDga"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    str_0 = "Iok"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    int_0 = -2836
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    float_0 = -185.64367
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    str_0 = "K6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    bool_0 = False
    int_0 = 1079
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    str_0 = "nHPcG#\r_1tC\\Lz"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    str_0 = "?N;A_X9(>Dtf["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    int_0 = -2888
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    bytes_0 = b"\xb2(G\x9c \xad\x069\x83\xc3ru\xe0;\xfd"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    bytes_0 = b"\x1bS"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    int_0 = -1101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    float_0 = 354.7357
    bool_0 = False
    str_0 = "gG2j<m9D7!'"
    tuple_0 = (bool_0, str_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.match(float_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    bytes_0 = b"\x10y\xdc\xdc\xdb\xf8k\x02\xbcc\xb4\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    complex_0 = -4921.644 - 428.78825j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    complex_0 = 165.678 + 571.97399j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    bytes_0 = b"n\x82"
    module_0.match(bytes_0, bytes_0)


def test_case_4765():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4766():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    float_0 = -4118.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    float_0 = 2612.0478
    module_0.get_new_command(float_0, float_0)


def test_case_4769():
    pass


def test_case_4770():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4771():
    int_0 = 165
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    str_0 = "4\\K<-&>s}8a4Zn"
    int_0 = -872
    module_0.get_new_command(str_0, int_0)


def test_case_4773():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4774():
    int_0 = -2267
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    bytes_0 = b"\xf8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    complex_0 = -311 + 533.9937j
    str_0 = "s:#JWr\\4JT\x0bi>2=`V"
    module_0.match(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    int_0 = 864
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4778():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4779():
    complex_0 = -1085 + 4872.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    bytes_0 = b"\x0b\x80#U\x19\x0e "
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    str_0 = '\r/7S[b`rBYT"h@'
    module_0.get_new_command(str_0, str_0)


def test_case_4785():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4786():
    bytes_0 = b"\xb2\x04\xc6\r:\xc4\x03\xc9L\x04\xe9Jn\xc6:\xd7u"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    object_0 = module_1.object()
    bytes_0 = b"\xb4\xe4\xd5W\xb1}d\xa9)\x9a"
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        bytes_0: object_0,
    }
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    str_0 = "(I0}>YfeH3GA$YI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    int_0 = -4967
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    int_0 = 103
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    str_0 = "\x0cst"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    float_0 = -1018.7213
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    bytes_0 = b"|0\x96Q\xfd\xbdWU#D|ws\xd6"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    float_0 = 209.312
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    bytes_0 = b"\xe6\x9dZu\xb6\xd4\x88\xfb\xa2T\xab\xd8I\x90\x91\xf7\xe7\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    str_0 = "aed8=cv`Vw^l_8%"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    float_0 = -1773.0
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    bytes_0 = b"#\x94\x85\xc6g\xb9\xe9-d\x1d\xfb\xdfW\xf97"
    bytes_1 = b"\xe7\x17\xee\xce\x93c,\xf5W\x93v\xcf\x8aH(\x14\xe4\x97\x90!"
    int_0 = 2047
    tuple_0 = (bytes_1, int_0)
    tuple_1 = (bytes_0, tuple_0)
    set_0 = {tuple_1}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    str_0 = "#Yy,Er)U,ZgT,cR\x0cU1Vl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    str_0 = "n mK4Jv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    int_0 = 635
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    bytes_0 = b"]\x08\xe1\ro\x96_\xa9\xba.\xf6\x1e\xd9P"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    int_0 = 2159
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    int_0 = -1262
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    str_0 = "V=P^PLCn4;="
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    str_0 = "Dnr5dod6H{VKLB"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    complex_0 = 1532.712083 - 488.5j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    bytes_0 = b"%\xc7\xcb\x9b\xe3^\x99Ic\xb4\x8b\x83Y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    float_0 = -1691.872
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    str_0 = "E.TLs1~#|JK-6\r["
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    float_0 = -1928.0331
    module_0.match(float_0, float_0)


def test_case_4815():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4816():
    int_0 = -572
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    float_0 = -1054.0224
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    int_0 = 722
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    float_0 = -816.9974
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    str_0 = "9=niWQR&3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    complex_0 = -668.061 - 332.558639j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    int_0 = 1275
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4824():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4825():
    bytes_0 = b"\xda]Wt\xbc\x802\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    int_0 = -5044
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    float_0 = -2995.088595
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    int_0 = 3867
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    bytes_0 = b"AB"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    str_0 = "_]7nu"
    complex_0 = -2149.668875 - 1032.76j
    tuple_0 = (str_0, complex_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    int_0 = -547
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    str_0 = "bEyXnq"
    tuple_0 = (str_0,)
    int_0 = 39
    tuple_1 = (tuple_0, int_0, str_0)
    list_0 = [tuple_1, str_0, tuple_0, str_0]
    int_1 = 2573
    module_0.get_new_command(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    int_0 = 1799
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    set_0 = set()
    list_0 = [set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    list_0 = []
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (list_0, bool_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    str_0 = "_\\8z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    float_0 = -2207.12437
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    int_0 = 317
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    complex_0 = -377.98603 - 509.79j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


def test_case_4842():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4843():
    float_0 = -299.7055
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    str_0 = ";bC1/EGS)D%kX@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    int_0 = 2038
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    str_0 = "\t4o]gkh/UBT-caZcg-"
    list_0 = [str_0]
    module_1.object(*list_0)


def test_case_4848():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4849():
    bytes_0 = b"pH\xe3\x8d8x]\x0cJ\x8b$\x03\x88\xee\xb7\xa74BO\xc0"
    module_0.match(bytes_0, bytes_0)


def test_case_4850():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4851():
    bytes_0 = b"|X\xcd\xc3X!U\x8c\xb0\x7f\x11\xb1`\xeb\xe3"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    str_0 = "-o{;2_P3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    str_0 = "Lu:&DJ\x0c;&8V?e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    float_0 = 1658.28
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    complex_0 = -647.778851 + 1753.62138j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    float_0 = -64.76285
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    float_0 = 2761.876299
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    int_0 = -1421
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    complex_0 = -3038.68 - 4066.09j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    bytes_0 = b"\xc0=\xc8\xfc\xe1\xf7\x97y\x85\xf0%\x7f\xff\xa5\x98R"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    int_0 = -115
    module_0.match(int_0, int_0)


def test_case_4862():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4863():
    bytes_0 = b"g\xa7w2\x00I\x9cJ\xd3\xb7\x9fO"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    bytes_0 = b"\xdd\xd2\xfb7*\xaf\xc7qL:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    bytes_0 = b"\xcc\x9b\xc2\xf5\xcdk\xdb\xaf_\xcc\xec\xc8\x1e\x99\xce\xea7\x83\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bytes_0 = b"Zl\x05N#\xbcF\xc5H\xec\xee:1\xe9A\x04\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    bytes_0 = b"\xcdJ&P\xc4"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    int_0 = -464
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    float_0 = 2183.310378
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    int_0 = -538
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    str_0 = "~"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    bytes_0 = b"\x12\xfb\x96A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    bytes_0 = b"\xad"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    bytes_0 = b"\xc6\xceB\xa3\x93\xf9\xf4\xb5\xc2\xa04"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    int_0 = -835
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    float_0 = 199.85541
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    int_0 = 466
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    float_0 = 1588.521826
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    complex_0 = -2056.84309 - 1347.043j
    bool_0 = False
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    float_0 = -6605.33814
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    str_0 = "JcL,0oU'Zt,Gr:BV=F^P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    int_0 = 627
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    float_0 = 580.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_4890():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4891():
    str_0 = '"&:5<G\n_J>\n\nu ay\nG'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    str_0 = " O{\rEru/X IyciK19t"
    float_0 = -1138.685
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    str_0 = 'kU"d(W'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    bytes_0 = b"\xd9\xe0\xebm\xe9\xbeY\x8a\xabj\x19XM"
    list_0 = [bytes_0]
    complex_0 = -1016.43 + 160.283j
    tuple_0 = (bytes_0, complex_0)
    int_0 = 676
    tuple_1 = (bytes_0, list_0, tuple_0, int_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    int_0 = -1398
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    float_0 = 237.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    float_0 = -3695.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    str_0 = "-xX)oH{X\n</w:1[I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    str_0 = "^7LUk\\M`TEW?1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    bytes_0 = b"\xef\xc2\r\x98\xc3\xc4\xdc\xce!\x9e\xef\xff:\xdaa\x0b\xfc\xa8\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    int_0 = -3118
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    complex_0 = -2982 - 694.091j
    bytes_0 = b"\x84\xcaC\xd8\xcbm"
    module_0.get_new_command(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    float_0 = -2096.9
    list_0 = [float_0]
    int_0 = -2042
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    int_0 = 1486
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    float_0 = 1856.2596
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    complex_0 = 2406.106882 - 1391.34j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    bytes_0 = b"\xb0\xbd\x0e\x96j\xa8\x85\xfa#>\x9c'\xce\x9e\xa7%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    bytes_0 = b"\x05)\x8e?/1~\x92\x1f\xb0v\xc8\x02Z\xbdN\n\x08h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, set_0)


def test_case_4912():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4913():
    bytes_0 = b"i\x13\xa1F\xf6$7\xed\xf3c\x8d\xc7\xd4t\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    bool_0 = False
    complex_0 = -402.037 - 206j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    str_0 = "!En-fnhzP*"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    str_0 = "{)C\x0ba|lO)*0:b{nG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    float_0 = -1441.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    int_0 = -326
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    bytes_0 = b"\xb6Mm"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    int_0 = -295
    int_1 = 595
    tuple_0 = (list_0, int_0, int_0, int_1)
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    str_0 = "#P\x0bZb\x0b1"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, set_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_4921():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4922():
    bytes_0 = b"\xf2\xd6\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    int_0 = 1788
    float_0 = 5109.94
    dict_0 = {int_0: int_0, float_0: int_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    bool_0 = False
    str_0 = ";\x0c$>yM-`\x0bqZPH$"
    set_0 = {bool_0, bool_0, bool_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    bool_2 = False
    tuple_0 = (bool_0, list_0, bool_1, bool_2)
    list_1 = [tuple_0]
    module_0.match(list_1, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    bool_0 = False
    bytes_0 = b"\x183c\xa5\x15\xb7[\xa3=\x1dN\xc0\xfb\xae!\xa5\xe1["
    set_0 = set()
    tuple_0 = (bool_0, bytes_0, set_0, set_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    complex_0 = -1746.2541 - 1968.869j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    bytes_0 = b"J\x1d\x04|Q\xb6\x92v"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    int_0 = -2233
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    bytes_0 = b'b\xdd\x7fA\xfc|\xb0\xfa\xa8"\xaa\xa44\xb2\xc5i\x90'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    str_0 = "lv3q:_R.0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    str_0 = "Q3\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    complex_0 = 965.83 - 382.08276j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    int_0 = -6244
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    str_0 = "\n+0C6&L4O$j<7DMx[<\\"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    float_0 = -95.974598
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    float_0 = -232.232
    set_0 = {float_0}
    list_0 = [float_0, float_0, set_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    str_0 = "CP($/{\x0c"
    module_0.match(str_0, str_0)


def test_case_4940():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4941():
    bytes_0 = b",1\x97\xabH\x1djV\x11\x89\x16\xdde%\xbb\xcc\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    bytes_0 = b"Y\xbd\x03\x86'4\xf4\x1a\x7fP\xa6\x92\xba\xba\xaac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    bytes_0 = b"\x1e\x8d\x96\xea\x7f_\x19c\xc32\xd6U<\xc4n\xf0\xa1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    bytes_0 = b"n\xa2\x08\xbf0C\xec\xbbC]\xe5D\x15A\xd18J3b\xf1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    float_0 = -2374.48
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    int_0 = -1784
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    str_0 = "u/FM&=(Pjj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    bytes_0 = b"r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    int_0 = -1485
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    float_0 = -327.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    int_0 = -1834
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    str_0 = "^#=fj!8g=u:^i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = "7k!Ey=)g.kjcR*\x0b"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    int_0 = 1474
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    complex_0 = 2169.948 + 2571.52j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    str_0 = 'h;M/(@,7"2hC~'
    list_0 = [str_0]
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    int_0 = -1825
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    float_0 = -1055.6657
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    str_0 = 'b,8q\x0cXMyIq"jb*n,03'
    module_0.get_new_command(str_0, str_0)


def test_case_4961():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4962():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    int_0 = -1824
    module_0.get_new_command(int_0, int_0)


def test_case_4964():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4965():
    str_0 = "U["
    int_0 = -631
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    bytes_0 = b"\x00\x13\xd6\xbb\xfd\xb7Q\xa5\xcfN\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    int_0 = -1144
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    bytes_0 = b"\xa6\x90"
    str_0 = ')g"{{2Gx{ih'
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    bytes_0 = b"\xf2+\xba\xa0!%{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    int_0 = 304
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    complex_0 = -1272.53 - 168.2j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    str_0 = "~3_S(x"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    float_0 = -5014.412356
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    str_0 = "9\x0cK"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    bytes_0 = b"A\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    float_0 = -1132.4152
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    complex_0 = -3467.0733 - 1712.8058j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4982():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4983():
    bytes_0 = b"i\xad\xee"
    tuple_0 = (bytes_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    str_0 = "\r4;<l<Vm{oo0"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    int_0 = -2537
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    bytes_0 = b"R\x8b\xd3s\xeb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    object_0 = module_1.object()
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    int_0 = 800
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    int_0 = -2969
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    str_0 = "v<eC&AV\x0b26//R|v[\tJ"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    float_0 = -268.92
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    str_0 = "\x0bT1Z$eSjPo(VH"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    str_0 = "K}@r\rb5|?N80"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    bytes_0 = b"\x84s\xdaT\xc9;b\x12"
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    int_0 = -2747
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    int_0 = 3015
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    int_0 = 718
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    object_0 = module_1.object()
    list_0 = [object_0]
    tuple_0 = (object_0, list_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    bytes_0 = b"\xd6\xd2m\x0c\x85b(V\x9d\xde\xc1\x14\xce\xc0`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    complex_0 = 5035.699 + 1219.794271j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    bool_0 = True
    complex_0 = -3728.8 + 2744j
    tuple_0 = (bool_0, complex_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    float_0 = 148.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


def test_case_5004():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5005():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    bool_0 = False
    dict_0 = {}
    int_0 = 2587
    bytes_0 = b"\x15:\xaf\t\xc6\xc0\xad\xc4eLK\xd3\xcd\xfb-H\xe0\xed"
    tuple_0 = (bool_0, dict_0, int_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    bytes_0 = b"b\xabG\xcb\xc5d\x99"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    int_0 = 3048
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    float_0 = -2778.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    bytes_0 = b"\xb6}\xd85\xad"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    complex_0 = 3318.71279 + 2888.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    str_0 = "U@%%1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    int_0 = 1754
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_5014():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5015():
    str_0 = "0\\g,(\n\nm`'5}5lhAn!"
    list_0 = []
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    list_0 = []
    list_1 = [list_0]
    str_0 = "#]|"
    dict_0 = {str_0: list_1, str_0: str_0, str_0: list_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    float_0 = 654.6571
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    float_0 = -654.7
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    float_0 = 2575.0
    module_0.match(float_0, float_0)


def test_case_5021():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5022():
    float_0 = 254.69
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    int_0 = -1714
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    bytes_0 = b"\xf2\xde\xee\x1e\x9cR;3\xa8\xc2\xdf\xf7\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    int_0 = 546
    str_0 = "Jd*!Wje"
    tuple_0 = (int_0, str_0)
    set_0 = {tuple_0}
    tuple_1 = (set_0,)
    bool_0 = False
    tuple_2 = (tuple_1, bool_0)
    module_0.match(tuple_2, set_0)


def test_case_5027():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5028():
    complex_0 = 1101.483 - 2190.946j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    int_0 = -807
    bool_0 = True
    float_0 = -6284.934
    set_0 = {int_0, bool_0, float_0, bool_0}
    str_0 = ""
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    str_0 = "]-6ge*{e&8"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_5031():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5032():
    bytes_0 = b"\xb9K\xf3<;#\xe6\xf1\x1e\xdah%\x03-\xe2\xb3\\j\x84"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    bytes_0 = b"u"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    str_0 = "OIK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    int_0 = 835
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    str_0 = "y9RyC)<f]?z- G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    float_0 = -3180.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    str_0 = "bE|-LT'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    str_0 = "6L\r1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    bytes_0 = b"\x0f7s\x0c\xc0@pe\xd6\xe8Z\xee\xc5f\xbb\xa6\x9f\xc1\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    int_0 = -5910
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    complex_0 = -3285.1028 - 628.322419j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    str_0 = 'h\\\x0c9F9bxK#P\n1K?"CuZ'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    int_0 = -959
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_5048():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5049():
    int_0 = -4928
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    str_0 = "ip<sm.4pSaMym"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    str_0 = "X+79_w~:*8T)t\n\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    str_0 = "S<~'\rm:K>s1)rID[$"
    float_0 = -2806.0
    bool_0 = True
    tuple_0 = (str_0, float_0, bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    bytes_0 = b"\x92\xa2u\x02T\x89\xf2n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    list_1 = [list_0, bool_1, bool_0]
    dict_0 = {bool_0: bool_1, bool_1: list_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    float_0 = 169.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    complex_0 = -4009.61201 + 297.55j
    module_0.match(complex_0, complex_0)


def test_case_5059():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5060():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    float_0 = -3403.174407
    object_0 = module_1.object()
    module_0.match(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    int_0 = -3884
    str_0 = "z\x0bhdL\x0cE@\\l?%t|]q\\"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    float_0 = -251.01
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    bytes_0 = b"\xf9\xea\xc3rk\x8e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    complex_0 = 2748.2 - 2586.0131j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    int_0 = -1144
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    float_0 = -305.873851
    module_0.match(float_0, float_0)


def test_case_5069():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5070():
    str_0 = "z/y5zZZ+*h&G\ru|"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    complex_0 = 2581.633 + 413.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    bytes_0 = b"\x11(\x99\xbf\xc3\xdc\xab\xd4\xaa\xdb\xa1\xd5\xd4\xf9\x85c\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    bytes_0 = b"\xa1"
    set_0 = set()
    int_0 = 1726
    tuple_0 = (bytes_0, set_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_1, bool_1: bool_1, bool_1: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    str_0 = "g&O<0d\x0be"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    int_0 = -1012
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    int_0 = -413
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    int_0 = -2222
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    str_0 = "2^ j\x0c\\7bQiv^/`N?"
    module_0.match(str_0, str_0)


def test_case_5080():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5081():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    float_0 = 4279.7
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    float_0 = -492.2
    str_0 = "cx}#cK=>\x0bqQS1\t#\x0c}"
    str_1 = "T."
    str_2 = "7bdmdJ{Up>-\r|\x0bi3"
    dict_0 = {str_0: str_0, str_1: float_0, str_2: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    int_0 = -1728
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    int_0 = -1496
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    bytes_0 = b"\xba\xf0Mx\xe6.\xfcX;\x91\x1a\x96=(N\xd8\xa5"
    int_0 = -2576
    set_0 = {int_0, int_0, bytes_0, int_0}
    dict_0 = {bytes_0: set_0, int_0: bytes_0, bytes_0: set_0}
    module_0.get_new_command(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    bytes_0 = b"\xe1\xda\x84\x8c{\x91\xca\x92\x87U\xc87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    bytes_0 = b"1\xdc\x9cl\xcf6C\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    float_0 = 3060.24
    str_0 = "O~5}-Z0jMO3VD1"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    str_0 = "D\t'F->QL6L4S6~"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    complex_0 = -1008.04 + 1143.82j
    tuple_0 = (complex_0,)
    dict_0 = {tuple_0: tuple_0, complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    float_0 = 160.598
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    int_0 = -2647
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_5095():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5096():
    complex_0 = -1027.6 - 2820j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    str_0 = "on"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    float_0 = 980.44
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    int_0 = -617
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    float_0 = 1205.835812
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    float_0 = -670.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    int_0 = -318
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    int_0 = 4949
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    bytes_0 = b"\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    int_0 = 4606
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    int_0 = 1688
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    int_0 = -1864
    bytes_0 = b"\x8b"
    dict_0 = {bytes_0: int_0, bytes_0: int_0, int_0: bytes_0}
    tuple_0 = (int_0, bytes_0, dict_0, int_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    float_0 = 598.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    float_0 = 182.488
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    str_0 = "8$\x0cL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    int_0 = -259
    str_0 = "=\r\n\r@)=o7"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    bytes_0 = b"\xe2\x0b\xd7\x84N"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    float_0 = 2779.323
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    str_0 = "9li*O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    str_0 = "^jD-?R\\C+?r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    float_0 = 3306.151
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    bytes_0 = b"\xdf\x10X\xdd<8!Z/!\xbe\x9e\xcc\x97x"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    bytes_0 = b"\xdap\xa6\x0cp\xc6\x99|"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    str_0 = "k)@*`!?0):6K6~Y={"
    list_1 = [list_0, list_0, str_0]
    module_0.match(list_1, bytes_0)


def test_case_5121():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5122():
    str_0 = "s2)(0V3V=H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_5124():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5125():
    list_0 = []
    str_0 = "^U'Q CR\x0b&$%9r# "
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    complex_0 = 668 + 982.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    int_0 = 524
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    str_0 = "5db\x0bCE4:W4?\rVdZ%KXTo"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "$5r"
    dict_0 = {str_0: str_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    int_0 = 1105
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    str_0 = "MVC&sDaB]vbPHi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    str_0 = 'y6pcnV"Q\x0bC'
    bytes_0 = b"0\x94z\x11\x98_"
    set_0 = {str_0, str_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    str_0 = "mJOV(\tqS*=Owk`se"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    dict_0 = {}
    tuple_0 = ()
    float_0 = -859.0
    tuple_1 = (dict_0, tuple_0, float_0)
    list_0 = [tuple_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    int_0 = -176
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    bytes_0 = b"\x8b"
    bytes_1 = b"m\xa1\x89"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    bytes_0 = b"B\x96\x85"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    bytes_0 = b"?\x92\x0e\x08\x03\xfc^)"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    int_0 = -1242
    bytes_0 = b"1\xc5\xd4\xaf\xfbJ\xa2\xdc.\xaeO%\x18\\\xb7\x9d3\xc22"
    set_0 = {int_0, bytes_0, bytes_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    bytes_0 = b"\xe8\x85m\xba\x98\xcf\xcc*\x1c\xd9\xf3:ff"
    dict_0 = {}
    bool_0 = True
    tuple_0 = (bytes_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    str_0 = "Z"
    bool_0 = True
    bool_1 = False
    set_0 = set()
    tuple_0 = (str_0, bool_0, bool_1, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    float_0 = 2166.9919
    int_0 = -1382
    list_0 = [float_0, int_0]
    tuple_0 = (float_0, int_0, list_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    bool_0 = True
    str_0 = "=ewd;(a,"
    list_0 = []
    tuple_0 = (bool_0, str_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    int_0 = -4681
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    bytes_0 = b"\xdc\xb5<4L\x1b\xccj"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    str_0 = "?h.xzI()I|9$c"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    str_0 = "?v\rmO'CP4WQ('G"
    str_1 = "fqP"
    tuple_0 = (str_0, str_1)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    int_0 = -4175
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    int_0 = -2432
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    str_0 = "L;M-SU1yr"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    str_0 = "5Qi{ASCYgAF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    float_0 = 488.2286
    str_0 = "0(Bg_.,d%C2inOu"
    bytes_0 = b"\xa5#Q"
    dict_0 = {str_0: bytes_0, str_0: bytes_0}
    module_1.object(*float_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    complex_0 = -2226.01882 - 277.212j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    float_0 = 850.402
    int_0 = 4676
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    int_0 = 454
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    bytes_0 = b"\x0c\x16B\xa7\xa4}\xc3pk\x84\xbc\x8bM\xd4p\xcc \x1a\xf1"
    float_0 = 1912.490089
    tuple_0 = ()
    int_0 = -1228
    tuple_1 = (float_0, tuple_0, int_0)
    module_0.match(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    int_0 = 522
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    int_0 = 623
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    str_0 = 'O}"j1xLX'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    str_0 = "y\\>1gh"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    tuple_1 = (str_0, set_0, tuple_0)
    bytes_0 = b'"\x0f\x15g\xae\xc3{\xb6W\xb4\x88\x98OC\xa1'
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    bytes_0 = b"47\xa5\x93\x94\x914\x85\xb8{\xba\xf2\x0f\xce\x90\x9b\xdb?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    int_0 = -1553
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    bytes_0 = b"\x11\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    object_0 = module_1.object()
    bytes_0 = b"\x1a"
    list_0 = [object_0, bytes_0]
    int_0 = -4024
    tuple_0 = (int_0,)
    dict_0 = {int_0: bytes_0}
    list_1 = [list_0, tuple_0, dict_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    int_0 = -787
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    str_0 = "?Te`@cZ4om\\k..]J66Kt"
    bool_0 = False
    bytes_0 = b""
    dict_0 = {str_0: bool_0, bool_0: bool_0, str_0: bytes_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_5175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5176():
    none_type_0 = None
    bool_0 = True
    dict_0 = {none_type_0: none_type_0, none_type_0: bool_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    bytes_0 = b"\x18\x8ab\xb5\x8b\xf4z+"
    list_0 = [bytes_0, bytes_0, bytes_0]
    int_0 = -815
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    complex_0 = 15.614468 - 829.7854j
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    int_0 = 2478
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    bytes_0 = b"\xder\xb6F_\x88#\xd1\xc8\x8bW\xa1<\x94\xdc\xbe*\xc3k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    complex_0 = -2582 - 1267.48j
    module_1.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    bytes_0 = b"-\xfd~\x1e\xd4`\xf0\xa8%\xa6\xfe\xaeD"
    int_0 = 1200
    tuple_0 = (bytes_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    str_0 = "qb"
    module_0.get_new_command(str_0, str_0)


def test_case_5184():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5185():
    complex_0 = -1917.406878 - 1534.32j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    str_0 = "emvxq=\r\tiMk-\x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5187():
    pass


def test_case_5188():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5189():
    bytes_0 = b"\xb2\xc8R\x92\x996\x8b\x9du\xd7\x00\x98\x01\x9a\x9dy\x84p"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    bool_0 = False
    int_0 = 784
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    str_0 = '84"V4\n*Hv0TTO?V\\x'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    float_0 = -1092.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    float_0 = -2033.289409
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    str_0 = "nTav"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    dict_0 = {}
    set_0 = set()
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    bytes_0 = b"$r\x98\x1f\xf9$"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    str_0 = '"a8~fbi}])q PWi<'
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    float_0 = -2690.99
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    bytes_0 = b"0~1\x9a\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    bytes_0 = b"d\x12\xa7\xa7U\x9d\n\x1c\xe5\xc1L\xee\x9c\xd7 :v"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    bytes_0 = b"\x8bE\x0c\x83RvC\x12\x01\x1bb\x1f5\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5204():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5205():
    int_0 = 476
    module_0.get_new_command(int_0, int_0)


def test_case_5206():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5207():
    int_0 = 2918
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    complex_0 = 1871.53691 - 2197.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    str_0 = '8Bn"F0yv fVza7\x0cFBc'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    bytes_0 = b"8\xea\x93\xd4\xb2+F4\x0eH~m\xb2\x8c\x90\xe9x\xb8M\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    bool_0 = False
    float_0 = -440.54
    set_0 = {bool_0, float_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    str_0 = 'Gh%",sKW9V1#cJ\x0bc6'
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    int_0 = 722
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    bytes_0 = b"\xe8\xad#r\xaag47\xb2\xeaj\\\x81\xbc\xab\xe1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    int_0 = -1310
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    complex_0 = -2708.8135 + 904.60902j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    int_0 = -2400
    str_0 = "k:bp7Y3 ([7o!,ApL"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    bytes_0 = b"\xbf\xdbe\x86S2\x11"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    bool_0 = False
    int_0 = -1974
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    str_0 = "n,4SG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    int_0 = -70
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    str_0 = ""
    module_0.match(str_0, str_0)


def test_case_5228():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5229():
    int_0 = 1394
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    bytes_0 = b"b\x0fL7o"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    int_0 = 609
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    bytes_0 = b"u/\xca\xcd\xba\x1b?e\x8e\xac"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    bytes_0 = b"N^\x08\xb0\xb0<\x91,\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    int_0 = -16
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    none_type_0 = None
    int_0 = 579
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    str_0 = "!!#?"
    str_1 = "_?&h'FuWsX;5"
    bytes_0 = b"4]\x01\xd9\x89\x91\xabN\xdccs\x04\xe1\xe5"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    complex_0 = -881.596709 + 913.75j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    bytes_0 = b"\xf1\xbbH\xd7o)\xbc\x05"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    str_0 = "uvsQ]v<mN6/(4n=.#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    int_0 = -481
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    str_0 = "==WTt+Z@A&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: list_0, bool_0: bool_0}
    float_0 = 875.2296
    set_0 = set()
    tuple_0 = (dict_0, float_0, dict_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    float_0 = -1305.317
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    float_0 = -484.0
    list_0 = [float_0]
    list_1 = [list_0, float_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    float_0 = 292.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    complex_0 = 854.775 + 4097j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    str_0 = "vY"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    bytes_0 = b"\x8c2\x03\xe0=M#\x80\x0f\xf1\x9f\\\x91\xce\xf6\xa6\rbZ"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    bytes_0 = b"\xdf\x85\xd2\xfefO\x8f,\xaf\xaf!5#\xe1\x82\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    tuple_0 = (list_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    float_0 = 957.73023
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    bool_0 = True
    bytes_0 = b"\xd2gR\x9ec*?\xea\x0b\x0bC("
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    float_0 = 1684.110472
    dict_0 = {}
    tuple_0 = (float_0, dict_0, float_0)
    tuple_1 = ()
    list_0 = [tuple_0, tuple_1]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    str_0 = "&\tO%}mdxu4@;WqVy"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    str_0 = "fOp\x0c5.\x0cq=}s/"
    tuple_0 = (str_0,)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    bytes_0 = b"\x00"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    tuple_1 = ()
    dict_0 = {bool_0: tuple_0, tuple_1: tuple_0}
    str_0 = "4kc?9i\\pg>\x0bA/jeOd{C"
    tuple_2 = (tuple_0, dict_0, str_0, dict_0)
    module_0.get_new_command(tuple_2, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0, dict_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    bytes_0 = b"C"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_5265():
    pass


def test_case_5266():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5267():
    int_0 = -182
    module_0.get_new_command(int_0, int_0)


def test_case_5268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5269():
    float_0 = 670.971517
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    float_0 = 2129.8821
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    int_0 = 2986
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    str_0 = "\rD`lphZ-$])>5^cwmoC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    str_0 = "\x0b,C\x0b3\\{/J~VF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    int_0 = 599
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    int_0 = 1854
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    str_0 = "_\x0bP&vED,QkGKN<:SC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    int_0 = -1451
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    bool_0 = True
    int_0 = -1008
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    float_0 = -384.962
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    bool_0 = True
    str_0 = "mS,]\n@2SV"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    complex_0 = 2082.14 + 497.515j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    float_0 = -4391.03
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    object_0 = module_1.object()
    bytes_0 = b"\xfb\xc1\xe2\xbbI*\xfeO\x1a\xbd\xd0\\\xec"
    tuple_0 = (object_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    float_0 = -1383.826421
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    str_0 = "F3_L$"
    bool_0 = False
    int_0 = -2230
    tuple_0 = (str_0, bool_0, int_0, int_0)
    set_0 = {tuple_0, bool_0, str_0, int_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    str_0 = "PB*?@+|!3X>\\fuiK:0d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    str_0 = "btUCM! Lb\x0cGpZ\x0bq{)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    str_0 = "UA^R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    int_0 = 2863
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


def test_case_5291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5292():
    int_0 = 2547
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    list_0 = []
    tuple_0 = (list_0,)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0, bool_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    bytes_0 = b"-\xdc\xc37\\n\xed\xd0L\xedp.\xba"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    int_0 = 870
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    str_0 = ".\x0crO1]XgK\x0cz4.1|&N/"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    float_0 = -797.46315
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    str_0 = "}G.bpF"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    bytes_0 = b"\xe9\xba\x1e\xa64\x7fif\x90\xc4#\xe0\xc8\x9b\x9c\xb7W\x8a\x8b\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    bytes_0 = b"Rj\xe8\xbeF\x89C\xb8\xb5\x96\x81*-\xe5~"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    bytes_0 = b"LbM\xd5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    bytes_0 = b"s"
    float_0 = -3776.0
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    int_0 = 1499
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    bytes_0 = b"\xc2\x8717\xdd\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0]
    str_0 = "T!"
    tuple_0 = (list_1, str_0)
    module_0.match(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    float_0 = -3510.4
    dict_0 = {float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    bytes_0 = b"F4D\x8c\x1e\xd1\nO|\xdf\xd2\xd6\x8a\xf5\xbf]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    int_0 = -699
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    int_0 = 979
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    bytes_0 = b"{\xc5\x1e\xeaO\xa50gs"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    str_0 = ",bDXDqzpy oE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    float_0 = -2681.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    int_0 = -1074
    bytes_0 = b"\x8cK[\xa7\xfc\x8f\xe5\x16\xe1\xa3\x8f&\x86!\xac\xde\xc7V"
    tuple_0 = (int_0, bytes_0, int_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    bytes_0 = b"\x88-\xac$\x17O\xae\xa5\xf9K\xed\x8a\x87\xb6\t_"
    int_0 = -1502
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    float_0 = -324.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    bytes_0 = b"\x90\xab\xad\xe2\x04\n\xe8Y\xd0\x83\xab\x12\xbf44\x06"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    int_0 = 885
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    int_0 = -2710
    str_0 = "4\n={V"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    bytes_0 = b"\x17mS.\xb7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    bytes_0 = b"\xe1>xlm\xb4\xbb{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    str_0 = '!k0o\r\t ,h"='
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    str_0 = "6L4>hSkYYG\\"
    bytes_0 = b"\xcb0\xd0\x83"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    str_0 = "';\\Ail2J\\^6\r_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    bytes_0 = b"g\x86[\xbf\xca\xc11M\x08:"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    bool_0 = True
    str_0 = ""
    module_0.get_new_command(bool_0, str_0)


def test_case_5329():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5330():
    int_0 = 2631
    module_0.get_new_command(int_0, int_0)


def test_case_5331():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5332():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    float_0 = 571.0
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    object_0 = module_1.object()
    list_0 = [dict_0, bool_0, object_0]
    bytes_0 = b"?\x04\xd5\x99\rV\xb0\xe0>t\x86\x9b"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    bytes_0 = b"\xbc\xc9\x056\xd7;\xfe\xec\x8dKSS6\xdb\x9a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    str_0 = "[\tI6&J'8QF\r9D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    complex_0 = 2193.40824 + 1635.53j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    int_0 = -144
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    float_0 = 1141.93
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_5341():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5342():
    float_0 = 1435.346457
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    bytes_0 = b"\xfa\xf8ES\xc5\xa0\x1d\xf0\xe9L\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    bytes_0 = b"\x13l\xec\xdaj3\x92\x1c63@\x08xb+0\xc8\t\xf1\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    bytes_0 = b"=\x97\xeb?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    float_0 = -553.48372
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    int_0 = -1404
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    float_0 = -2445.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    str_0 = "L\n!Wnw==I"
    set_0 = {str_0}
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


def test_case_5351():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5352():
    bytes_0 = b"\xbf\xb6\x99)\xf0\xfd\x13P\xbe\xe5\xaa\xbc+;\xd7\xc4P\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    complex_0 = -1295.3271 + 2826.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    str_0 = "&jEO42Z5lSmM"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    str_0 = ",!Xvg-zxKI#a0\rD>1"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    float_0 = 1676.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    bool_0 = False
    int_0 = -1485
    tuple_0 = (bool_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    int_0 = -365
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    bytes_0 = b"\x03]Q\n\x87r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    bytes_0 = b"h\x07d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    int_0 = 2361
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    bytes_0 = b"\xe6\xa09\xf5\xb5\xf6\x04\xacT?\x95\xb8,\x83\xfd\xc8n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    bytes_0 = b"\x03E\xa57\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    int_0 = -1054
    int_1 = -176
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b"\xedB\x0b\x95\x1d\xa4\x8a\xdd\xbb"
    str_0 = "lA2[* >Z\x0b>-T"
    set_0 = {int_0, bytes_0, int_0, int_0}
    tuple_1 = (tuple_0, bytes_0, str_0, set_0)
    tuple_2 = (int_0, int_1, tuple_1)
    module_0.match(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    str_0 = "tN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    int_0 = -1733
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    str_0 = "61U>e&+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    str_0 = "P1-/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    bytes_0 = b"Fd\xb5\xc1\xd9v\x13Gga\xd7\xc6\x88\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    str_0 = '3aj"l_DFJAIiv64*m(3"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    float_0 = -1466.592
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    dict_0 = {}
    object_0 = module_1.object()
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    int_0 = 905
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    int_0 = 2576
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    complex_0 = -2039.21623 - 2032.943j
    tuple_0 = (complex_0, complex_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    int_0 = -2615
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    str_0 = "l+V=SZmVQ~&a8mq@XB"
    bytes_0 = b""
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    float_0 = 2505.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    int_0 = 4178
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    int_0 = -1055
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bytes_0 = b":\xe6\xa9&|0\x94,\xe0\xcd\xcc+"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    str_0 = "l_XR%-J6EXy\n\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    complex_0 = -830.39 + 498j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    none_type_0 = None
    int_0 = -2402
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    bytes_0 = b"\x1c'\xcd\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    str_0 = "XC|lup`NI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    int_0 = -25
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    int_0 = 5471
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    str_0 = "="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    tuple_0 = ()
    list_0 = [tuple_0]
    str_0 = "pYXW[<8zD"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    bytes_0 = b"\x12"
    module_0.match(bytes_0, bytes_0)


def test_case_5393():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5394():
    bytes_0 = b".)k~\xd86s\x1f#\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    bytes_0 = b"F\xc8A\x9e&M\xe3\xf0L\x9a\xd1\xd9\xd0\xb0\x85\xfe\xd1\xe8\x89"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5397():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5398():
    int_0 = 3932
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    float_0 = 388.80245
    str_0 = "&"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    bytes_0 = b"m\xe7\xa7\x02\xc1\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5402():
    pass


def test_case_5403():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5404():
    int_0 = -1380
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    str_0 = "FWMxr"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    none_type_0 = None
    tuple_0 = ()
    list_0 = [none_type_0, none_type_0]
    list_1 = [list_0]
    tuple_1 = (tuple_0, tuple_0, list_1)
    module_0.match(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    int_0 = 1104
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    int_0 = 2775
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    bytes_0 = b"\x8f\xdc\x12i\xaa\xe8L\xfb`r\xe1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    list_0 = []
    dict_0 = {}
    tuple_0 = (list_0, list_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    float_0 = -1392.386
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    bytes_0 = b"*h#1\xc0\x7f\xa8#\xc9\x16\x1e\xfc\x9a\xcd(\x0e9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    float_0 = -3851.27
    tuple_0 = (float_0,)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_0]
    module_0.match(list_0, bool_1)


def test_case_5416():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5417():
    int_0 = -178
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    str_0 = "<\tWD6W/JV8gcKwV"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    str_0 = "U\x0bu)lvG6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    str_0 = "z+zw]j58([]4w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    float_0 = -2563.45
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    str_0 = ":\n%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    float_0 = -2271.391672
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    str_0 = "d\\Szv\n1\x0b>-jC{"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    str_0 = "!}qr'j\\"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0, str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_5427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5428():
    str_0 = "tG<>u\x0c7"
    bytes_0 = b"A"
    float_0 = -2402.65558
    complex_0 = -1849.625 + 603.85j
    tuple_0 = (str_0, bytes_0, float_0, complex_0)
    set_0 = {float_0, float_0, str_0, tuple_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\x9e7\xdf\xa4\xdb\xeb\xcab*jd\xb5\x82"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    int_0 = 2962
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    int_0 = 4028
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    int_0 = 2454
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    str_0 = "8}7l0rA%!,W"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    list_0 = [tuple_0, str_0, bool_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    float_0 = -635.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "'Wgf|*Rs>XF'2"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    int_0 = -2107
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    bytes_0 = b"p\xdc\xbe\xeb\x91"
    tuple_0 = (bytes_0, bytes_0, bytes_0)
    set_0 = {bytes_0, bytes_0, bytes_0, tuple_0}
    tuple_1 = (tuple_0, set_0, set_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    bool_0 = False
    tuple_0 = (bool_0,)
    int_0 = -375
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    str_0 = ",K?H'dF;=\teRz\nP\""
    module_0.match(str_0, str_0)


def test_case_5443():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5444():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    bytes_0 = b"L\\H\x06Tf\x91\x9a"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    str_0 = "9\\M2%b5#>[:c"
    str_1 = "MqDeJ[Im@"
    str_2 = "y."
    str_3 = "c%k,DK}gpbN;dt0g,O\n"
    dict_0 = {}
    int_0 = -734
    bool_0 = True
    tuple_0 = (str_3, dict_0, int_0, bool_0)
    dict_1 = {str_0: str_0, str_1: str_1, str_2: str_2, str_1: tuple_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    str_0 = "4LA+L@+TfloI?O9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    bool_0 = False
    list_0 = [bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    int_0 = 1209
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    str_0 = "fe8j5rykes3=:6)*\\"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    str_0 = "\nhy=%P-;bkB"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    float_0 = 973.02365
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    float_0 = 294.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


def test_case_5455():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5456():
    int_0 = -494
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    str_0 = "\\}}6JB\nr?*{JrmB) YK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    bytes_0 = b"\xe6J\xd0{\xdd\xdd'3m\xde\xd3x\x17\xc1\xa8~\x8f\xdc\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    complex_0 = 198.1 - 2474.7691j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    str_0 = "V5L\t=/Vs/Ig'~?J"
    str_1 = 'W&~"]y'
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    int_0 = -361
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    float_0 = -3273.073
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    int_0 = -305
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    object_0 = module_1.object()
    float_0 = 1837.705
    set_0 = {object_0, object_0, object_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    bytes_0 = b"Tv\xe9\xec\x9f\xf9k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    str_0 = "1Z=wS[>U]7uC}"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    float_0 = 1028.177
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_5469():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5470():
    object_0 = module_1.object()
    tuple_0 = ()
    tuple_1 = (object_0, tuple_0)
    list_0 = [object_0, object_0, tuple_1]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    str_0 = "T,"
    bytes_0 = b"\xfe\xe9F\xc7.-wL\xe9\xb8/"
    int_0 = -828
    tuple_0 = (str_0, bytes_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_5472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5473():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    int_0 = -4076
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    int_0 = 3378
    list_0 = [int_0]
    tuple_0 = (int_0, list_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    int_0 = 1864
    int_1 = -678
    list_0 = [int_0, int_0, int_1]
    module_0.match(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    bytes_0 = b"a\x04+\x8b\xe9G\xdbQjC\xf00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    str_0 = "H}C\r"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    int_0 = -1273
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    bytes_0 = b"\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    bytes_0 = b'_\xe8=\x8f"0^\xc8\xe8%'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    str_0 = "f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    bytes_0 = b"u\xac\x12v\xe0X\nB\x00Z"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = -2723
    tuple_0 = (bytes_0, dict_0, int_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    int_0 = -475
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    int_0 = 183
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    bytes_0 = b"\x1c\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    bytes_0 = b"f\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    str_0 = "-{t','XueJ?;/_I\"\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    bytes_0 = b"\xd7\x12`\x10_\xcbU*dP8\xed\xa4\xdf\x1eZH\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    str_0 = "nrswu)W?1yb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    int_0 = -1686
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    str_0 = "8O]mN9uToQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    float_0 = -833.83795
    module_0.match(float_0, float_0)


def test_case_5496():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5497():
    bytes_0 = b"\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    str_0 = "'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    int_0 = 1368
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    int_0 = -1618
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    str_0 = "eEi5@@+2Y[0_Li\ny5Zi8"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    float_0 = -1169.7475
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    int_0 = -3743
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    float_0 = 3062.58831
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    bytes_0 = b'\xc6\xe8aA\xf6\xa7\xb0X\x84\xa8l\x11\x83Y\x96~\x9aP"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    str_0 = "\t.LY9$e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    str_0 = "cX1tp/=n"
    list_0 = [str_0, str_0]
    str_1 = "fh?AF>jq"
    module_0.match(list_0, str_1)


def test_case_5510():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5511():
    str_0 = "IWpvTeF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    str_0 = "1&J2.\tu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    str_0 = " EVo7Bj$8Y% \n`hx\x0cv>#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    str_0 = "TD<\tb)s"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    list_0 = []
    str_0 = "|"
    dict_0 = {str_0: list_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    str_0 = "><7Lf)\r,5"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    bytes_0 = b"Gk"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    str_0 = "X\t?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    int_0 = 1853
    set_0 = {int_0, int_0, int_0, int_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    none_type_0 = None
    bool_0 = False
    str_0 = 'A&b"FyX}.\t'
    list_0 = [none_type_0]
    bytes_0 = b""
    tuple_0 = (bool_0, str_0, list_0, bytes_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    bytes_0 = b"\x1a\x07\xf2\xe2]W\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    int_0 = -681
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    bool_0 = False
    str_0 = "9,VP]Y/!kg'D^#K"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    bytes_0 = b"\xe6<\x81\xc1\xf9\xa7\n\x16\xcc\x91\xa9\xb6\xd4\xbb0G\x17{\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    bytes_0 = b"A\xe9\x8b\t\xb8uS\xc0\x99>\xad\xce"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    bytes_0 = b"\x9d\xac\xec\xc4n\xc1yT\x012\x88\x97+\xf1\xf4^`N^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    str_0 = "zs;4Mu"
    tuple_0 = (str_0,)
    int_0 = -2157
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    bool_0 = False
    str_0 = "ya~\x0c'"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    set_0 = set()
    bool_0 = True
    bytes_0 = b"P>k\xa2\x8eO\x0e\x81S\xd0\x1avz@\xac\xd8\x00\xcd\xf8"
    bool_1 = False
    tuple_0 = (bool_1,)
    tuple_1 = (tuple_0, bool_1)
    tuple_2 = (bool_0, bytes_0, tuple_1, bool_1)
    tuple_3 = (set_0, set_0, tuple_2)
    none_type_0 = None
    module_0.get_new_command(tuple_3, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    none_type_0 = None
    bytes_0 = b"\x94=`\xc1d\x99\xed\x83\xedq\xba\xa1\x96\x91\xef\xfd\xe3W\xda"
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    bytes_0 = b"\xecJ{\x9d@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    int_0 = 1535
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    bytes_0 = b"&\x070M\x07\xd0\x13{\x8a\x8c\xcf\x94\x96\xf2;\xe1xJ\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    str_0 = "SaFr\x0c"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    float_0 = -2433.0479
    module_0.get_new_command(float_0, float_0)


def test_case_5538():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5539():
    bytes_0 = b"\xf6E\xb8\xf0\x17#\xd2\x0f\n4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    list_0 = []
    object_0 = module_1.object(*list_0)
    complex_0 = -215 - 172j
    tuple_0 = (complex_0,)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    int_0 = -985
    object_0 = module_1.object()
    set_0 = {object_0}
    str_0 = "+rt>7abuT"
    tuple_0 = (str_0,)
    list_0 = [int_0, set_0, tuple_0, set_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    int_0 = -2789
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    str_0 = '` pZ"xd.8vU7do2'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    str_0 = "2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    str_0 = "xI4\x0b6Zmm>:,mN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, object_0)


def test_case_5547():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5548():
    float_0 = 3944.242
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    complex_0 = -271.47 + 561.6647j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    list_0 = [set_0, object_0, set_0, object_0]
    list_1 = [list_0, object_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    bytes_0 = b"\xaaT\xed\xfd\xdd\xa6\x97S<!\xceK%\xd9q\xbc\t"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    str_0 = "'6w\r+'CZn\"[G&\x0b\\~V>>\x0c"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    bytes_0 = b"I\xf3\xb1I<q\x9d\xdc\xad\x8e5|\x1eA\x9b}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    int_0 = 5038
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    complex_0 = 1851.53108 - 803j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    int_0 = 939
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    str_0 = "!gST"
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = False
    set_1 = set()
    set_2 = set()
    list_0 = [set_1, bool_1, set_2]
    tuple_0 = (bool_1, list_0, str_0)
    tuple_1 = (bool_0, set_0, tuple_0)
    tuple_2 = (str_0, tuple_1)
    int_0 = 1587
    module_0.match(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_5561():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5562():
    str_0 = "X,~<SIpm\x0bM\x0cZ*"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    int_0 = 93
    dict_0 = {int_0: int_0}
    bytes_0 = b"\x0en\xae<\x04\xea"
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    float_0 = -4371.722
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    float_0 = -687.4
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    bytes_0 = b"\xc9\x88\xd7}\x85fr\xdfY\xbc=\xe0\x01\xf4B\xac\xf8\xbc"
    module_0.match(bytes_0, bytes_0)


def test_case_5568():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5569():
    str_0 = "_@50\x0c-TW?R !9"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    complex_0 = 4500.456185 + 18.069j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    complex_0 = -42.53 + 3670.631j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    bytes_0 = b"s\n\xc5jW\xec[\x05\xdc\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    int_0 = -1968
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, list_0)


def test_case_5575():
    object_0 = module_1.object()


def test_case_5576():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5577():
    str_0 = "X=>wVK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    str_0 = '"aFOaPY\x0bh Zod\x0c0'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    bytes_0 = b"B"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5583():
    bytes_0 = b"#\x9c\xed\xe3\\\xb54U4\xafzV(?\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5584():
    complex_0 = 3425.7763 - 1005.4948j
    int_0 = 624
    module_0.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    str_0 = "I]+%piE"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    str_0 = "F'_FrJRlrE)}ryAUq"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    float_0 = 1199.6993
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    int_0 = -1989
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    module_0.get_new_command(object_0, object_0)


def test_case_5590():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5591():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5592():
    none_type_0 = None
    str_0 = "nb"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5593():
    int_0 = -4000
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    int_0 = 164
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    str_0 = "\niN@gX/sQS]k/"
    bool_0 = False
    tuple_0 = (dict_0, str_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    str_0 = "sC9.|D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    bytes_0 = b"MJ\xc4O\xdd\xc9\x95\x91\xa2\x85\xb5"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    str_0 = "*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    bytes_0 = b"\x8c\n\x90\xcbc9\x92Z{4\xe5\x16\x900\xf6\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    str_0 = "IRK)w7ye!zAK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    dict_0 = {bool_0: bool_0}
    bool_1 = False
    tuple_0 = (set_0, dict_0, bool_0, bool_1)
    list_0 = []
    tuple_1 = (bool_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    bytes_0 = b"\x12\x9eC\xeef-\xee8Z\xf7~\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5603():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5604():
    float_0 = 3265.647
    int_0 = -728
    tuple_0 = (float_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    int_0 = 2706
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    int_0 = 2211
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    bytes_0 = b"r\x9c%\x117\xe4\xde"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5609():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5610():
    int_0 = 2554
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    bytes_0 = b"\xfc\xe5`A\x01\r0\xd6\xcd\x1e\xe3\n\xd2\x91\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5612():
    bytes_0 = b"\x9a\xfcU\x8a2\x07\xdf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5613():
    bytes_0 = b"{\x1f\x9bR<D\x81\x8d\x84Y\xed\x9d\x0bj\xe3=*\x19"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    int_0 = 2107
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    float_0 = 1881.44003
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    bytes_0 = b"W!\xc9yH<\xa2\x14\xeb\xeb"
    list_0 = []
    int_0 = 4016
    tuple_0 = (bytes_0, bytes_0, list_0, int_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = True
    tuple_0 = (set_0, bool_1)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    bytes_0 = b"\x11\xb8}\x1e\xa8\x17"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    str_0 = ";#1B{M0fZ5014!GJ>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5620():
    dict_0 = {}
    tuple_0 = ()
    list_0 = [dict_0, dict_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    str_0 = "kxZ\\&@F!y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    complex_0 = -246.9 - 977.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    int_0 = -1180
    tuple_0 = (int_0,)
    list_0 = [int_0]
    bytes_0 = b"\x84\x92GA\xbcD\xbe\xec\x8d"
    tuple_1 = (tuple_0, list_0, bytes_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


def test_case_5624():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5625():
    bytes_0 = b"\xfb\xe3\xeeT/l"
    int_0 = -1770
    tuple_0 = (bytes_0, int_0, bytes_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5627():
    int_0 = -3476
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    int_0 = -1028
    bytes_0 = b"\x1f\x9a\xe8\xa2"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5629():
    list_0 = []
    complex_0 = -716.38 + 2435.52j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5631():
    str_0 = "vn8"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5632():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5633():
    int_0 = 616
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5634():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5635():
    int_0 = -857
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5636():
    bool_0 = False
    bytes_0 = b".\x93\xca\x8b\xba#\xeb8\xa37}\x87r\x8a\x86\xc7\xda"
    list_0 = [bytes_0, bytes_0]
    dict_0 = {}
    int_0 = -537
    tuple_0 = (bool_0, list_0, dict_0, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    float_0 = -550.714
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    bool_0 = False
    float_0 = -1856.59
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5639():
    int_0 = 1561
    module_0.get_new_command(int_0, int_0)


def test_case_5640():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5641():
    int_0 = 1502
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5642():
    int_0 = -2529
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5643():
    float_0 = 1848.889
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5644():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5645():
    str_0 = "+d9DYR\x0b"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0, dict_0)
    bool_0 = True
    list_0 = [str_0, tuple_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_5646():
    set_0 = set()
    object_0 = module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_5647():
    float_0 = -827.51
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5648():
    int_0 = 1416
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5649():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [bool_0, list_0, bool_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5650():
    bytes_0 = b"\x8f|"
    module_0.match(bytes_0, bytes_0)


def test_case_5651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5652():
    int_0 = 2348
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5653():
    object_0 = module_1.object()
    object_1 = module_1.object()
    set_0 = set()
    tuple_0 = (object_0, object_1, set_0)
    module_0.match(tuple_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_5654():
    float_0 = 184.449
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5655():
    str_0 = "1s#/1-;b#y "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5656():
    int_0 = 3593
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5657():
    bytes_0 = b"^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5658():
    bytes_0 = b"\xaf\xa8/\xf4\x1f\xae@\xde\xcdn\xd8\xeb\x84E\xbb\xb1\xf1\xe2\xaa\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5659():
    str_0 = ":]L_V+"
    bool_0 = True
    tuple_0 = (str_0, bool_0, str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5660():
    float_0 = -3313.595
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5661():
    str_0 = "?\\l*w7u9g$b\t8~hQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5662():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5663():
    str_0 = "^YAv9V=`wa_Lkr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5664():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.match(object_0, object_1)


def test_case_5665():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5666():
    str_0 = "\rc+SS9-D,\n:a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5667():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5668():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5669():
    int_0 = 852
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5670():
    bytes_0 = b"\xcb\xd8\xba$\x90\xb4\x0f\x11G58\x19"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5671():
    float_0 = 1759.4944
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5672():
    bytes_0 = b"\x93\x91\xe8\x8b\xd8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5673():
    float_0 = 1212.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5674():
    str_0 = ">U\\kB"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5675():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_5676():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5677():
    int_0 = 268
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5678():
    float_0 = 2039.2448
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5679():
    object_0 = module_1.object()
    float_0 = 658.505768
    module_0.match(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5680():
    int_0 = -1346
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5681():
    bytes_0 = b"\xe4(\xec\xebLJuOI\x92A\xcd\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5682():
    int_0 = -1120
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5683():
    bytes_0 = b"!At\xf1\xc4\x12\xf9B\x1c\xdc@\x94\xfa\x05\rBKC"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5684():
    str_0 = "e`\x0c@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5685():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5686():
    tuple_0 = ()
    object_0 = module_1.object()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5687():
    set_0 = set()
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5688():
    str_0 = "y$,l.U$Z'eg[#%18L\nc~"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5689():
    int_0 = 1747
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5690():
    int_0 = -1684
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5691():
    bytes_0 = b""
    set_0 = set()
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5692():
    bytes_0 = b"\xdd+\x8b~\xb2#\xff\xed\xa9\x8b\xae\xccz\xc0\xce2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5693():
    bool_0 = True
    set_0 = {bool_0}
    bool_1 = True
    tuple_0 = (bool_0, set_0, bool_1, bool_0)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5694():
    bytes_0 = b"*y"
    module_0.match(bytes_0, bytes_0)


def test_case_5695():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5696():
    float_0 = 829.673
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5697():
    str_0 = "rM4Y,k>^<y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5698():
    int_0 = -1785
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5699():
    float_0 = 1084.247
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5700():
    complex_0 = -2365.403 - 30.91841j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5701():
    str_0 = "Woe0OK^'"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_5702():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5703():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5704():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5705():
    str_0 = "{m@ 1==k|Z6LvU#d[J("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5706():
    int_0 = 1508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5707():
    int_0 = 3573
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5708():
    bytes_0 = b'\xf4\xea\xb9\x92\xe8\r\x9fPz\xe5"'
    bool_0 = True
    list_0 = []
    tuple_0 = (bytes_0, bool_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5709():
    bytes_0 = b"\x11\xd7yR\xa3\xaa\xbf\xc2\xca\x12\xc8\xc6!*n\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5710():
    str_0 = "1b.n(11{"
    bool_0 = False
    str_1 = 'gkV}*}~&:u"OuFbP'
    str_2 = "jnY|m;("
    dict_0 = {str_0: bool_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5711():
    bytes_0 = b"\x905\xf9\x90\x02\x87\xdb\xc2DM\x1c\x88\xd0\xaf$\xd5$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5712():
    float_0 = 1478.282506
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5713():
    str_0 = "@e0N\">Fs'f{}vAdLVd$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5714():
    bytes_0 = b"\x11\x90a\xe95\x1ez"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5715():
    float_0 = -1609.0021
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5716():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    int_0 = 518
    module_0.get_new_command(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5717():
    bytes_0 = b"Z\xc0\xd4.m\r\xcaJ\xfd\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5718():
    int_0 = 1770
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5719():
    bytes_0 = b"\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5720():
    str_0 = "$U&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5721():
    float_0 = 2565.63
    list_0 = [float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5722():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5723():
    str_0 = "hc\x0c|l\nSN$Y\x0cdt<OMvL4_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5724():
    str_0 = "AoU)_"
    float_0 = 5122.78873
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5725():
    int_0 = 4291
    str_0 = 'umtL<eJ\tQ5 \r"IK'
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5726():
    bytes_0 = b"@\xb8\x1a:K\xd9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5727():
    bytes_0 = b"\xf2\xdf\xdf\xc4\xf6\x12\x7f\x98\xea\xdc?\xbf(\xdb"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5728():
    bytes_0 = b"\x03\xdfi\xe1\x17\x8f\x96\x8a"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5729():
    str_0 = '6`2OtC$;gTQ?"/W\t?'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5730():
    int_0 = -1914
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5731():
    str_0 = ">t\\^W "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5732():
    str_0 = "~`3D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5733():
    int_0 = -513
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5734():
    none_type_0 = None
    bytes_0 = b"O\x0f\xec\xb0\xfak\x89\x89(\x1f\x15Y\xd9\x0b\x87\xce\x08\xb3"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5735():
    complex_0 = -219.7 - 1422.43418j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5736():
    str_0 = "Sd]0lg<EY\tdYl[z.@h^L"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5737():
    bool_0 = False
    bytes_0 = b"\x08/\x04\x9d\x19\x85\xca\xaeCs"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5738():
    int_0 = -734
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5739():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_5740():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5741():
    str_0 = "g'T=1\x0b"
    object_0 = module_1.object()
    dict_0 = {str_0: object_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5742():
    str_0 = "#kPk;\n8t?|^Y;=q\\P"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5743():
    bytes_0 = b"[0\xc6\xb1\xd4bm\xb7\xe2\x0eP\xb5\x03\x19\x86xv"
    dict_0 = {bytes_0: bytes_0}
    bool_0 = False
    str_0 = "\x0bH-n"
    tuple_0 = (dict_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5744():
    bool_0 = True
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5745():
    str_0 = "5AS]8"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5746():
    int_0 = 1357
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5747():
    str_0 = "d+%\tm\x0c*~KdIG\t7^@(\x0c*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5748():
    bytes_0 = b"9\xe9\x8fE\xb4\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5749():
    complex_0 = 633.561 + 2430j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5750():
    bytes_0 = b"\x86Mh\xe0\x100\x90\xcfH\x91\x96\x8d"
    list_0 = [bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5751():
    int_0 = -3847
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5752():
    float_0 = -1251.1
    none_type_0 = None
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5753():
    tuple_0 = ()
    str_0 = "st<OB`v9yKj\x0c"
    tuple_1 = (str_0,)
    tuple_2 = (tuple_0, str_0, tuple_1)
    module_0.get_new_command(tuple_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5754():
    float_0 = 3330.665391
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5755():
    int_0 = 3198
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5756():
    int_0 = 157
    list_0 = [int_0, int_0]
    list_1 = [int_0, int_0, list_0]
    str_0 = "`"
    str_1 = "Wa\\`SaU91"
    str_2 = "qZ'4(Zv1~5,AR9D"
    dict_0 = {str_0: list_1, str_1: str_1, str_1: list_1, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5757():
    bytes_0 = b"\xb4n?\x8e\xbbiH"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


def test_case_5758():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5759():
    bytes_0 = b"5b\xc6;\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5760():
    bytes_0 = b"\x9efD\xe6\xa0\xad"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5761():
    str_0 = "Wy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5762():
    int_0 = -1006
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5763():
    float_0 = -2157.1379
    set_0 = {float_0, float_0}
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: set_0}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5764():
    int_0 = -454
    int_1 = 1062
    dict_0 = {int_0: int_1, int_1: int_1}
    tuple_0 = (int_0, int_1, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5765():
    int_0 = -645
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5766():
    int_0 = 2175
    set_0 = set()
    tuple_0 = (set_0, int_0, int_0, int_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5767():
    str_0 = "+B{Xa<S,x~)"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5768():
    str_0 = "GG)R6YbMZgNqN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5769():
    int_0 = 729
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5770():
    bytes_0 = b"\xfb6\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5772():
    bytes_0 = b"QRy:}rcQ%\xccV4t\xd0\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5773():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5774():
    int_0 = -364
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5775():
    int_0 = 1818
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5776():
    bytes_0 = b"\n\xa7\x19\xa5a(ggs\xb72\x19>Xt\x01\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5777():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5778():
    int_0 = 2072
    dict_0 = {int_0: int_0}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0, dict_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5779():
    list_0 = []
    complex_0 = -3314.047906 + 467.892j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5780():
    str_0 = "fWLm"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5781():
    str_0 = "7ZLMFXb,b]rhr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5782():
    int_0 = 1419
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5783():
    float_0 = 2322.4588
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5784():
    bytes_0 = b"\x94\xe76"
    object_0 = module_1.object()
    dict_0 = {bytes_0: bytes_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5785():
    complex_0 = -880.89 - 0.871818j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5786():
    str_0 = "BUyyV'NYt3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5787():
    int_0 = 237
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5788():
    str_0 = ")(R&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5789():
    complex_0 = -1786.5341 + 2083.20478j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5790():
    float_0 = 2177.63
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5791():
    complex_0 = -1114.52 + 4077.464j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5792():
    bytes_0 = b"\x14\xac\xaf\xc6\x9cL\xf9\xd9\xc72"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5793():
    bytes_0 = b"E\x1ck\xa9\x90\x00@t\xf9\xb6\xbc\xa7\x12"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5794():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5795():
    none_type_0 = None
    bytes_0 = b"r\xc0Fn\xa1\x06@"
    module_0.get_new_command(none_type_0, bytes_0)


def test_case_5796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5797():
    float_0 = 4630.7683
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5798():
    float_0 = -480.3517
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5799():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5800():
    bool_0 = True
    bytes_0 = b"_\x10\xd0\xa9\xb4\xca\xa8\x86\xe6`\x85\xc5\xc6\x1e\x83X"
    tuple_0 = (bool_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5801():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5802():
    bytes_0 = b"\xe3\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5803():
    bytes_0 = b"\x1d\x085\xc4W\x07"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5804():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5805():
    int_0 = 3857
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5806():
    int_0 = 2792
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5807():
    str_0 = "P8%YX\\1MY\\gtW\x0biU+"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5808():
    int_0 = -602
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5809():
    int_0 = 4315
    bytes_0 = b"q\x99\xc1\x85]\xf0\xc6\xaa=\n\xb5\x1dyUD\xb4"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5810():
    bytes_0 = b'n\xcfz"5R\x13\xb0\xf3D}?D"\xdc\xf1\x181'
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5811():
    pass


def test_case_5812():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5813():
    str_0 = "Wc.2}"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5814():
    int_0 = 805
    int_1 = -1066
    bytes_0 = b"h\xf1Q\xb6s\xe2\xed\x0bU,@\x0506"
    tuple_0 = (int_0, int_1, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5815():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, list_0)


def test_case_5816():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5817():
    bytes_0 = b"D"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


def test_case_5818():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5819():
    int_0 = 3165
    float_0 = 2476.383938
    tuple_0 = (int_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5820():
    none_type_0 = None
    bytes_0 = b"y\xb4\x13\x9d\x1d\x890\x83\xea\x81\x8b\xe5\xa74m}6"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5821():
    float_0 = 92.59
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5822():
    int_0 = 3599
    bool_0 = False
    dict_0 = {bool_0: bool_0, int_0: int_0}
    int_1 = 1067
    tuple_0 = ()
    list_0 = [tuple_0]
    tuple_1 = (int_0, dict_0, int_1, list_0)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, tuple_2)


def test_case_5823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5824():
    float_0 = 3184.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5825():
    str_0 = "#>F34C8+,zCoJt.{x?\r6"
    none_type_0 = None
    str_1 = ""
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


def test_case_5826():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5827():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5828():
    int_0 = -3934
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5829():
    str_0 = "{l\nvo?Ik:m@PN]8db"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5830():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5831():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5832():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5833():
    bytes_0 = b"\xfe'/\x03Q\x7f\x0e\xf9\x7f~\x92s\xa1"
    bool_0 = True
    bytes_1 = b"\\\xab"
    tuple_0 = (bytes_0, bool_0, bytes_1)
    module_0.match(tuple_0, bytes_0)


def test_case_5834():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5835():
    complex_0 = 1037.7164 - 2377.96j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5836():
    bytes_0 = b"vP\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5837():
    bytes_0 = b"\x88y\xa1`y\x90\xea\x16:.9\n\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5838():
    str_0 = ";j$oawambayZSEQ\x0brG~x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5839():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5840():
    bytes_0 = b"\xfeF\xa2Q\xc9\xb8\x88\xdf\xaa@su\x01\x07\r\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5841():
    bytes_0 = b"\x9d\xe1"
    module_0.match(bytes_0, bytes_0)


def test_case_5842():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5843():
    bytes_0 = b"k\xedA/\x06\xed\xcb}C"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5844():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5845():
    int_0 = -683
    str_0 = '+]rg@;?7 rOR\x0b?"6IIF'
    tuple_0 = (int_0, str_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5846():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_5847():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5848():
    str_0 = "p$cr'XCN&8xwY-%pi"
    list_0 = [str_0, str_0]
    module_1.object(*list_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_5849():
    str_0 = "<:uFUmu-kw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5850():
    bytes_0 = b'\x85\xe2\xaaQ\xd0-yg_\xc0"\xb37'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5851():
    bool_0 = True
    int_0 = 463
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5852():
    float_0 = 4498.8878
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5853():
    float_0 = -1736.77
    tuple_0 = (float_0,)
    int_0 = -2648
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5854():
    float_0 = -4323.83454
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5855():
    int_0 = -436
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5856():
    int_0 = -343
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5857():
    str_0 = "5Tw{"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5858():
    int_0 = 1577
    float_0 = 3159.06252
    tuple_0 = (int_0, int_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5859():
    bytes_0 = b"5y4\xdc\x82\xd1%\x8e*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5860():
    int_0 = -1473
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5861():
    bytes_0 = b"(\x96e\xcdF\xc3D\xc4\xc8N^O\x0f\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5862():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5863():
    bytes_0 = b"\xdf\xa1\xa8\xbc\xf8\x98\xd2lOHv\xa7\x02S\x82\xa5\xaa"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5864():
    int_0 = 176
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5865():
    int_0 = 57
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5866():
    bytes_0 = b"6I"
    tuple_0 = (bytes_0,)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


def test_case_5867():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5868():
    bytes_0 = b"\xe0\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5869():
    float_0 = 5060.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5870():
    float_0 = 311.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5871():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5872():
    complex_0 = -165.13132 + 3390.995j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5873():
    int_0 = 1611
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5874():
    bytes_0 = b"{A\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5875():
    int_0 = -1523
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5876():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5877():
    str_0 = "\ns,o"
    list_0 = [str_0]
    str_1 = "\nY&x1dz;"
    dict_0 = {str_0: list_0, str_1: str_1}
    module_1.object(**dict_0)


def test_case_5878():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5879():
    bytes_0 = b"\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5880():
    float_0 = -1761.4
    dict_0 = {float_0: float_0, float_0: float_0}
    bool_0 = True
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5881():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5882():
    int_0 = -2310
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5883():
    bytes_0 = b"\xe6\xf5\xbf\xb6\xf2\xea\xf7,\xf5|s\xcc\x06v"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5884():
    float_0 = 1396.74478
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5885():
    str_0 = "&\x0bR~4uIZ;e"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5886():
    int_0 = 2228
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5887():
    object_0 = module_1.object()
    set_0 = {object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5888():
    bytes_0 = b"\xf0<\xdb\x8f\x17T-&F\xe2\xb8U\xb9I\x1b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5889():
    bytes_0 = b"(\xd3\x07u\xe1\x91\xa1\x88\xe1h\xfa\x0b\xcb\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5890():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5891():
    int_0 = 1406
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5892():
    bool_0 = False
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5893():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5894():
    int_0 = -161
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5895():
    int_0 = 3384
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5896():
    str_0 = "Mz[/.AHz8.}\x0b;n)VI3"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5897():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5898():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5899():
    float_0 = 2210.074378
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5900():
    int_0 = -1329
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5901():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5902():
    int_0 = 489
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5903():
    int_0 = -4955
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5904():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


def test_case_5905():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5906():
    int_0 = 2165
    int_1 = 1451
    tuple_0 = (int_0, int_0, int_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5907():
    str_0 = "Myv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5908():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = "1\x0b$u\x0bF9H&HKR3&c"
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5909():
    int_0 = -776
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5910():
    set_0 = set()
    dict_0 = {}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5911():
    bytes_0 = b'\x8c\xaaD\xba\xa10Rr"\x80/'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5912():
    bytes_0 = b"1\x9eS\xe0\xfa\x8e\x03\xc4jD\x97\x8c\xae!\xa4^\xa6\x97\xc5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5913():
    str_0 = "Yft|LxNJ0GV3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5914():
    int_0 = -2827
    str_0 = "7Jit"
    dict_0 = {}
    tuple_0 = (int_0, str_0, dict_0)
    list_0 = [tuple_0]
    int_1 = 3293
    module_0.get_new_command(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5915():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5916():
    complex_0 = 2885 + 3607.93j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5917():
    int_0 = -3564
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


def test_case_5918():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5919():
    int_0 = -1443
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5920():
    int_0 = 834
    module_0.match(int_0, int_0)


def test_case_5921():
    pass


def test_case_5922():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5923():
    str_0 = ""
    str_1 = "/\n#7]ctV3"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5924():
    str_0 = "fI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5925():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5926():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5927():
    bytes_0 = b"\xd8\xd4Z\xfe\xf4}\xa1\xca\x85\x8bS\xa2\xe2\xe4\x83\xc3\r\xb2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [bytes_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5928():
    int_0 = 1939
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5929():
    int_0 = 2920
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5930():
    int_0 = -1255
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5931():
    bytes_0 = b"yy\xf6%\xfcN\xb7\x8dQ\xdc\xae\x80\xd9)hq\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5932():
    bytes_0 = b"\x93%KK\x93\xec\xef\xc3^\xb5\xbcmv\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5933():
    bytes_0 = b"[\xef}b\xea\xc9\xebg,RL\\?p"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5934():
    int_0 = 7194
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5935():
    int_0 = 566
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5936():
    float_0 = 77.974264
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5937():
    str_0 = "P"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5938():
    bytes_0 = b"\xd2,voN)]\n\xbe\x89\xb7J"
    int_0 = 1575
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, int_0, list_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5939():
    float_0 = -308.5819
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5940():
    str_0 = "CMh{\x0c`NDdM@^ll~CGtLm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5941():
    bool_0 = False
    str_0 = 'HY8Hm"\tKi'
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5942():
    int_0 = 1142
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5943():
    bytes_0 = b"\xef.Ct\xa6\x04\x04Z]\r\xe2\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5944():
    float_0 = -2650.835
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5945():
    str_0 = "V?G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5946():
    complex_0 = 498.12267 + 2464.1503j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5947():
    str_0 = "XB;]%eC`2.Mo'KjXRe"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (str_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5948():
    int_0 = -1939
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5949():
    bool_0 = False
    bytes_0 = b"\x94i\xb5g\x17\x01\xa5"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5950():
    bytes_0 = b"i\xae\x12\xe0{\xb9?\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5951():
    int_0 = 13
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    tuple_2 = ()
    dict_0 = {tuple_1: tuple_0, tuple_1: tuple_0, int_0: tuple_2, tuple_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5952():
    bool_0 = False
    str_0 = "a[q#c!vzW wY2!EZ<(?o"
    tuple_0 = (bool_0, str_0)
    dict_0 = {tuple_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_5953():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5954():
    bytes_0 = b"\xaeD\xa1\x83~\xbc$\x88P\x91\x92{\x82\xd4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5955():
    complex_0 = 2428.1634 - 371.741j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5956():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, set_0]
    tuple_0 = (list_0,)
    list_1 = [bool_0, list_0, list_0, list_0]
    module_0.get_new_command(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5957():
    str_0 = ""
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5958():
    bytes_0 = b"\x82\xd8O\x9c\x94\x93"
    bool_0 = False
    list_0 = [bytes_0, bytes_0, bytes_0, bool_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5959():
    str_0 = "&ymld)C\x0b\ny75:"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5960():
    int_0 = -1081
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5961():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5962():
    str_0 = "-\x0c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5963():
    int_0 = -3615
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5964():
    bytes_0 = b"C\x024Ir:F\x01\x02\x07\x12\x83\xa1M\xf4iBD"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5965():
    float_0 = 2038.1509
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5966():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5967():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_5968():
    pass


def test_case_5969():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5970():
    float_0 = 1353.81
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5971():
    bytes_0 = b"\xbc\xa5\x14\xfb\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5972():
    bytes_0 = b"\xa5\xbd\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5973():
    int_0 = 2152
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5974():
    bytes_0 = b"v \x9c0=\xbfg\xd7w\x05\xcd\xbb\x1f1_\x1e\xc4\xdbZ\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5975():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5976():
    complex_0 = 2462 + 119j
    dict_0 = {complex_0: complex_0}
    module_0.match(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5977():
    complex_0 = -1377.35258 - 988j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5978():
    float_0 = -57.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5979():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5980():
    bytes_0 = b"\xd8\xacX\x80rg\xd4\x12\tJ\x1c\xc3\x1f\xff\xe5}\xc3\xab"
    int_0 = -2311
    tuple_0 = (bytes_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5981():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5982():
    bytes_0 = b"0\x81_\x92\x93,\xda\xcb\xcf\xf6=\xb6q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5983():
    int_0 = 1768
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5984():
    none_type_0 = None
    bool_0 = True
    bytes_0 = b"\xe6UES\x8d\xca;L8l\x18j\x109\x1d=_\xdd"
    tuple_0 = (bytes_0, bool_0)
    list_0 = [none_type_0, bool_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5985():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5986():
    bool_0 = False
    bytes_0 = b"\x0fH\xb9%{`\x8bNt\xa1\xa2B\xf6\xc0v|"
    bool_1 = True
    int_0 = 1840
    tuple_0 = (bool_0, bytes_0, bool_1, int_0)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5987():
    int_0 = -5779
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5988():
    float_0 = 4152.13
    list_0 = [float_0, float_0, float_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5989():
    list_0 = []
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5990():
    str_0 = "SqVz{1J/S+\x0b8.J#be!"
    str_1 = ':"6|rh? V#5@\nZ%5gjE>'
    str_2 = "LDQh%Ub,."
    tuple_0 = (str_0,)
    dict_0 = {str_0: str_0, str_1: str_0, str_2: tuple_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5991():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5992():
    int_0 = 2671
    bool_0 = False
    set_0 = {int_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5993():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5994():
    bytes_0 = b"'\\\xfc\xe6\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5995():
    tuple_0 = ()
    bytes_0 = b"\xe6S/\xeb\xcd\xfb\xcd<\x93"
    dict_0 = {tuple_0: tuple_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_1 = (bytes_0, tuple_0, bytes_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5996():
    int_0 = -94
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5997():
    int_0 = 2828
    bytes_0 = b"\xad\x90\xc1\x7f34\xd9\xa7\xa7nS"
    bool_0 = True
    tuple_0 = (int_0, bytes_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5998():
    str_0 = "y}\n%/3'8gLrG8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5999():
    int_0 = 2862
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6000():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_6001():
    str_0 = "CxC3+*\t9JB{A&wwdsc\n\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6002():
    float_0 = 92.6
    tuple_0 = (float_0, float_0, float_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6003():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


def test_case_6004():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6005():
    bytes_0 = b"M\xa0i:\x8aEy"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6006():
    float_0 = 26.819
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6007():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_6008():
    bytes_0 = b"\xd5\x0b\n\xe8\x1c^\x95\xb8o@F\xaca"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6009():
    int_0 = 3696
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6010():
    bytes_0 = b"\xd8\xb8\xbev\xd0L\x10\xed\x7f/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6011():
    bytes_0 = b"_\xd6\x9f;y\x81]\"\xe5\x1f>\xf4\x0b-\xac\xc1'\xe9\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6012():
    int_0 = 2548
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6013():
    float_0 = -1231.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6014():
    int_0 = 730
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6015():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6016():
    bytes_0 = b"\xbd\x088;\xe6k\x83\xe6h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6017():
    float_0 = 1522.85
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6018():
    str_0 = "Rri4>#JJ`7"
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = 1692
    str_1 = "\\~acmD]F{]"
    tuple_0 = (set_0, int_0, str_1)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6019():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"\x91y<@;\xa2\xeb@\xc21"
    list_1 = [list_0, list_0, bytes_0, bool_0]
    str_0 = "&&D8NX|ha"
    dict_0 = {str_0: bool_0, str_0: list_1}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6020():
    bytes_0 = b"\x0eeg>\xa7\x015"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6021():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0]
    tuple_0 = (list_0,)
    tuple_1 = (dict_0, tuple_0)
    str_0 = "|B[gtPO#[ds-z}@c)JlC"
    list_1 = [str_0]
    module_0.match(tuple_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_6022():
    str_0 = "S{g?P0)\tlcDAoKI h5J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6023():
    int_0 = 3647
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6024():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6025():
    float_0 = -1700.79604
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6026():
    bytes_0 = b"\xb6t\x1c\x87{\xe9\xdd?\xfe[\xe7\x1a"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6027():
    bytes_0 = b":\x85,}s=M\x98\xe36"
    bytes_1 = b"0Z\xf5\xcdc\x03"
    tuple_0 = (bytes_1,)
    tuple_1 = (tuple_0, bytes_0)
    list_0 = [bytes_0, tuple_1, bytes_0, bytes_1]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6028():
    int_0 = 3073
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6029():
    str_0 = "Ob(`sAp"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6030():
    bytes_0 = b">3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6031():
    str_0 = "J\x0cS1|&oDlZ"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_6032():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6033():
    str_0 = "<t1$t-N(\t{wa{\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6034():
    bool_0 = True
    bytes_0 = b"\xed|5\xa5\x19\x1a\x94\xaf\xa6Y\x97$\xea"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6035():
    bytes_0 = b"\x8c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6036():
    bytes_0 = b"\n\xc2\x0fq\xf9KN\xc5l?\xd7\xab\xcf\xec\xc8\xa4s\xfe\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6037():
    bytes_0 = b"UvW\xc2'G\xd5\xd4\x8c\xbd\xf3^%\xee\xc3\x9a\x99\xc2>("
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6038():
    int_0 = -5147
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6039():
    str_0 = "D8+R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6040():
    int_0 = 272
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6041():
    bytes_0 = b"}\xf6\x11\xff\xcd\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6042():
    str_0 = "O}2SCy}F t{$"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6043():
    bytes_0 = b"\x06\xc9$\xd1\xba&(Yt"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6044():
    float_0 = 1385.290094
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6045():
    bool_0 = False
    int_0 = 1669
    dict_0 = {int_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6046():
    int_0 = -1329
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6047():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6048():
    bytes_0 = b"\xcf?\x0fu\xaf\x82\xb8%\x8fI\xaf\xbbU\x15="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6049():
    float_0 = 1806.869125
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6050():
    str_0 = "o*qA)pwJv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6051():
    str_0 = 'zZ9g"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6052():
    str_0 = "xko-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6053():
    bytes_0 = b"Q\x08\x8e\x12\xcb#\x1f\x7f\xc2i\x0f.\xcd\x17\xe0"
    int_0 = 545
    tuple_0 = (bytes_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6054():
    str_0 = '1-E]ohb~DsD2"Xe'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6055():
    int_0 = -3430
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6056():
    str_0 = "i`=lX=a/mQ{#("
    str_1 = "U|Xkh"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_6057():
    float_0 = -1828.424
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6058():
    bytes_0 = b"ps\xf5\x97\n3\xd9j\x1da\xaf\x93\xc0U2\xe0\xb2\xeb\xee\xf8"
    list_0 = [bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6059():
    str_0 = "C8/v\r\t(sgSu4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6060():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6061():
    str_0 = "x=K/<~{[vs9m^b"
    bytes_0 = b"\xcfp`"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6062():
    float_0 = -1740.0668
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6063():
    bool_0 = False
    object_0 = module_1.object()
    str_0 = "K}^\x0c"
    list_0 = [bool_0, object_0, object_0]
    tuple_0 = (bool_0, object_0, str_0, list_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6064():
    int_0 = 1793
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6065():
    bytes_0 = b"\xec\xd1\x8cN\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6066():
    int_0 = -902
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6067():
    str_0 = "?i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6068():
    float_0 = 1716.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6069():
    int_0 = 1544
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6070():
    str_0 = "{0l^*"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6071():
    int_0 = -2098
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6072():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6073():
    int_0 = -701
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6074():
    float_0 = -478.378211
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6075():
    bytes_0 = b"\x8a\x1b\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6076():
    int_0 = -42
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6077():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


def test_case_6078():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6079():
    str_0 = "c<$'g S8X-$h\\\x0cu0\n(;"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6080():
    bytes_0 = b"zB\xae\x08\xc8y\xa5\xa3,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6081():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6082():
    int_0 = -4172
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6083():
    complex_0 = -3834.4 + 228j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_6084():
    complex_0 = 371.6599 - 885.056757j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_6085():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6086():
    complex_0 = -1385.079 + 2645j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6087():
    int_0 = 2205
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6088():
    bytes_0 = b"\nz\xe2MX\xa0V\x86\xc0;Cl\xf3\xeb"
    bool_0 = False
    float_0 = -498.3
    dict_0 = {bool_0: bytes_0, bool_0: bytes_0, float_0: bool_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6089():
    str_0 = "\x0c"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6090():
    int_0 = 1781
    module_0.match(int_0, int_0)


def test_case_6091():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6092():
    int_0 = -1939
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6093():
    str_0 = "~-P#BSB#:11e_ ("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6094():
    bytes_0 = b"4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6095():
    str_0 = "rw;O*4S4p\x0b>zJsp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6096():
    bytes_0 = b"\xb6\x18\xd8k\x84:\x151\x83A\x13\x92@`"
    module_0.match(bytes_0, bytes_0)


def test_case_6097():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6098():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_1, bool_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6099():
    int_0 = -2420
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


def test_case_6100():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6101():
    str_0 = "vN"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6102():
    int_0 = 1768
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6103():
    int_0 = -2856
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6104():
    bytes_0 = b"\x89\xe7\x0cqw\xc8\x1bc\xdf\xde\xbf\x92\xd4T\xa1w"
    bytes_1 = b"\xabo"
    module_0.match(bytes_0, bytes_1)


def test_case_6105():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6106():
    str_0 = "y)8/oa2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6107():
    float_0 = 2736.588117
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6108():
    float_0 = 1144.2908
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6109():
    bool_0 = True
    bytes_0 = b"`\xa6\x13\x90\x9a@'+"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6110():
    bytes_0 = b"*\n\xbaN\x0b<,z\x13\x9b\x8ac\x8b\xe2\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6111():
    complex_0 = 196.6 + 2666.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_6112():
    int_0 = 327
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6113():
    int_0 = -841
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6114():
    int_0 = 2599
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6115():
    complex_0 = 3169.68911 - 978.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_6116():
    int_0 = 3276
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6117():
    bytes_0 = b"\x07\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6118():
    float_0 = 800.53934
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6119():
    bytes_0 = b"t\x0b$\xd0\xf9\x8cL\xdc\x8f\xdd\xb1\x96\xcd\x8b\xe6\xffr\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6120():
    complex_0 = -384.93165 - 4525.952072j
    bytes_0 = b"_\x80<\x8de\xd8\xe0+\x18\xeaZV"
    complex_1 = -989.8921 - 2149.282j
    tuple_0 = (complex_0, bytes_0, bytes_0, complex_1)
    dict_0 = {}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6121():
    object_0 = module_1.object()
    list_0 = []
    bytes_0 = b"\xd3h[@EJ9H\xe1"
    tuple_0 = (list_0, bytes_0)
    tuple_1 = (object_0, tuple_0, list_0)
    bool_0 = False
    tuple_2 = (object_0, tuple_1, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6122():
    bool_0 = False
    str_0 = 'i"'
    list_0 = [str_0]
    tuple_0 = (bool_0, bool_0, str_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6123():
    int_0 = 1653
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6124():
    int_0 = -1698
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6125():
    str_0 = "\x0bS5)]@4|%]%sZQSSA,* "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6126():
    bytes_0 = b"\xae\xb3\x064+\x90\xd6T\xe3\x8c\xcb\xb3\x19\x89\xbdl"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6127():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6128():
    int_0 = 2619
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6129():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6130():
    str_0 = "N"
    module_0.get_new_command(str_0, str_0)


def test_case_6131():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6132():
    float_0 = -1079.434065
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6133():
    bytes_0 = b"\xf8"
    set_0 = set()
    module_0.match(bytes_0, set_0)


def test_case_6134():
    pass


def test_case_6135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6136():
    bytes_0 = b"V\xcaF"
    module_0.get_new_command(bytes_0, bytes_0)
