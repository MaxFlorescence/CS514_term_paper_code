# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import irish_morphology_helpers as module_0
import builtins as module_1


def test_case_0():
    float_0 = -688.61837
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_1():
    complex_0 = 3291.91955 - 3329.5j
    tuple_0 = (complex_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "GnMEu"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "GnMEu"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.deduplicate(str_0)
    assert var_1 == "GnMEu"
    var_2 = module_0.deduplicate(str_0)
    assert var_2 == "GnMEu"
    var_3 = module_0.devoice(var_2)
    assert var_3 == "GnMEu"
    var_4 = module_0.deduplicate(var_3)
    assert var_4 == "GnMEu"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is True
    var_6 = module_0.deduplicate(var_4)
    assert var_6 == "GnMEu"
    var_7 = module_0.ends_dentals(str_0)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_3)
    assert var_8 is False
    dict_0 = {str_0: var_8, var_7: var_8}
    var_9 = module_0.deduplicate(str_0)
    assert var_9 == "GnMEu"
    module_0.ends_dentals(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.deduplicate(bool_0)


def test_case_4():
    str_0 = "g"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.deduplicate(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.deduplicate(var_0)
    var_2 = module_0.devoice(list_0)
    list_1 = [list_0]
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.deduplicate(var_0)
    var_5 = module_0.devoice(list_1)
    var_6 = module_0.devoice(var_1)
    var_7 = module_0.starts_with_vowel(var_0)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_4)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_0)
    assert var_9 is False


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"w\xa3z\xf6\xc6"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = ""
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"w\xa3z\xf6\xc6"
    module_1.object(**var_2)


@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    list_0 = [set_0, set_0]
    var_0 = module_0.deduplicate(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_with_vowel(set_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ""
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    module_1.object(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "nava&\x0c.6\nZKOfWs("
    var_0 = module_0.devoice(str_0)
    assert var_0 == "nava&\x0c.6\nZKOfWs("
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.deduplicate(var_0)
    assert var_2 == "nava&\x0c.6\nZKOfWs("
    var_3 = module_0.devoice(str_0)
    assert var_3 == "nava&\x0c.6\nZKOfWs("
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    bool_0 = False
    module_0.starts_with_vowel(bool_0)


def test_case_9():
    str_0 = "Q>k^n=8P3^^"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "Q>k^n=8P3^^"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.deduplicate(var_0)
    assert var_3 == "Q>k^n=8P3^^"
    var_4 = module_0.devoice(var_3)
    assert var_4 == "Q>k^n=8P3^^"
    var_5 = module_0.devoice(var_0)
    assert var_5 == "Q>k^n=8P3^^"
    var_6 = module_0.deduplicate(var_5)
    assert var_6 == "Q>k^n=8P3^^"
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "//_#7/rXI_v\rcuq\x0b?\x0bvt"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is True
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(str_0)
    var_2 = module_0.devoice(str_0)
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is True
    str_1 = "N[D,GEQQ&q4"
    bytes_0 = b"\xb6("
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\xb6("
    var_6 = module_0.deduplicate(str_1)
    assert var_6 == "N[D,GEQQ&q4"
    var_7 = module_0.devoice(str_1)
    assert var_7 == "N[D,GEQQ&q4"
    var_8 = module_0.ends_with_vowel(str_0)
    assert var_8 is False
    module_0.devoice(var_4)
