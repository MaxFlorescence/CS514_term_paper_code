# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import util as module_0
import re as module_1
import inspect as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.Configurable()


@pytest.mark.xfail(strict=True)
def test_case_1():
    object_dict_0 = module_0.ObjectDict()
    module_0.import_object(object_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    gzip_decompressor_0 = module_0.GzipDecompressor()
    assert (
        f"{type(gzip_decompressor_0).__module__}.{type(gzip_decompressor_0).__qualname__}"
        == "util.GzipDecompressor"
    )
    assert (
        f"{type(gzip_decompressor_0.decompressobj).__module__}.{type(gzip_decompressor_0.decompressobj).__qualname__}"
        == "zlib.Decompress"
    )
    assert (
        f"{type(module_0.GzipDecompressor.unconsumed_tail).__module__}.{type(module_0.GzipDecompressor.unconsumed_tail).__qualname__}"
        == "builtins.property"
    )
    module_0.errno_from_exception(gzip_decompressor_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    regex_flag_0 = module_1.RegexFlag.DOTALL
    var_0 = regex_flag_0.__repr__()
    var_1 = module_0.import_object(var_0)
    assert var_1 == module_1.RegexFlag.DOTALL
    class_found_exception_0 = module_2.ClassFoundException(*var_0)
    var_2 = module_0.errno_from_exception(class_found_exception_0)
    assert var_2 == "r"
    module_0.ArgReplacer(regex_flag_0, var_0)


def test_case_4():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    var_0 = regex_flag_0.__repr__()
    var_1 = module_0.import_object(var_0)
    assert var_1 == module_1.RegexFlag.DEBUG
    class_found_exception_0 = module_2.ClassFoundException(*var_0)
    var_2 = module_0.errno_from_exception(class_found_exception_0)
    assert var_2 == "r"
    object_dict_0 = module_0.ObjectDict()
    var_3 = var_0.casefold()
    object_dict_1 = module_0.ObjectDict()
    bytes_0 = b""
    var_4 = object_dict_1.__setattr__(bytes_0, var_0)
    assert len(object_dict_1) == 1
    var_5 = var_3.__iter__()
    with pytest.raises(ImportError):
        module_0.import_object(var_3)


def test_case_5():
    gzip_decompressor_0 = module_0.GzipDecompressor()
    assert (
        f"{type(gzip_decompressor_0).__module__}.{type(gzip_decompressor_0).__qualname__}"
        == "util.GzipDecompressor"
    )
    assert (
        f"{type(gzip_decompressor_0.decompressobj).__module__}.{type(gzip_decompressor_0.decompressobj).__qualname__}"
        == "zlib.Decompress"
    )
    assert (
        f"{type(module_0.GzipDecompressor.unconsumed_tail).__module__}.{type(module_0.GzipDecompressor.unconsumed_tail).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_6():
    gzip_decompressor_0 = module_0.GzipDecompressor()
    assert (
        f"{type(gzip_decompressor_0).__module__}.{type(gzip_decompressor_0).__qualname__}"
        == "util.GzipDecompressor"
    )
    assert (
        f"{type(gzip_decompressor_0.decompressobj).__module__}.{type(gzip_decompressor_0.decompressobj).__qualname__}"
        == "zlib.Decompress"
    )
    assert (
        f"{type(module_0.GzipDecompressor.unconsumed_tail).__module__}.{type(module_0.GzipDecompressor.unconsumed_tail).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_0.doctests()
    gzip_decompressor_0.decompress(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    gzip_decompressor_0 = module_0.GzipDecompressor()
    assert (
        f"{type(gzip_decompressor_0).__module__}.{type(gzip_decompressor_0).__qualname__}"
        == "util.GzipDecompressor"
    )
    assert (
        f"{type(gzip_decompressor_0.decompressobj).__module__}.{type(gzip_decompressor_0.decompressobj).__qualname__}"
        == "zlib.Decompress"
    )
    assert (
        f"{type(module_0.GzipDecompressor.unconsumed_tail).__module__}.{type(module_0.GzipDecompressor.unconsumed_tail).__qualname__}"
        == "builtins.property"
    )
    var_0 = gzip_decompressor_0.flush()
    module_0.errno_from_exception(var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    var_0 = regex_flag_0.__repr__()
    var_1 = module_0.import_object(var_0)
    assert var_1 == module_1.RegexFlag.MULTILINE
    var_2 = module_0.u(var_0)
    module_0.errno_from_exception(var_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    regex_flag_0 = module_1.RegexFlag.DOTALL
    var_0 = regex_flag_0.__repr__()
    var_1 = module_0.import_object(var_0)
    assert var_1 == module_1.RegexFlag.DOTALL
    class_found_exception_0 = module_2.ClassFoundException()
    var_2 = module_0.errno_from_exception(class_found_exception_0)
    none_type_0 = None
    module_0.timedelta_to_seconds(none_type_0)


def test_case_10():
    var_0 = module_0.doctests()


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "$PtF$\rk$XR"
    module_0.import_object(str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    gzip_decompressor_0 = module_0.GzipDecompressor()
    assert (
        f"{type(gzip_decompressor_0).__module__}.{type(gzip_decompressor_0).__qualname__}"
        == "util.GzipDecompressor"
    )
    assert (
        f"{type(gzip_decompressor_0.decompressobj).__module__}.{type(gzip_decompressor_0.decompressobj).__qualname__}"
        == "zlib.Decompress"
    )
    assert (
        f"{type(module_0.GzipDecompressor.unconsumed_tail).__module__}.{type(module_0.GzipDecompressor.unconsumed_tail).__qualname__}"
        == "builtins.property"
    )
    var_0 = gzip_decompressor_0.__repr__()
    module_0.import_object(var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_0.doctests()
    arg_replacer_0 = module_0.ArgReplacer(var_0, var_0)
    assert (
        f"{type(arg_replacer_0).__module__}.{type(arg_replacer_0).__qualname__}"
        == "util.ArgReplacer"
    )
    assert arg_replacer_0.arg_pos is None
    arg_replacer_0.get_old_value(var_0, arg_replacer_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_0.doctests()
    object_dict_0 = module_0.ObjectDict()
    object_dict_0.__getattr__(object_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_0.doctests()
    arg_replacer_0 = module_0.ArgReplacer(var_0, var_0)
    assert (
        f"{type(arg_replacer_0).__module__}.{type(arg_replacer_0).__qualname__}"
        == "util.ArgReplacer"
    )
    assert arg_replacer_0.arg_pos is None
    arg_replacer_0.replace(arg_replacer_0, var_0, arg_replacer_0)


def test_case_16():
    class_found_exception_0 = module_2.ClassFoundException()
    var_0 = module_0.errno_from_exception(class_found_exception_0)


def test_case_17():
    regex_flag_0 = module_1.RegexFlag.DOTALL
    var_0 = regex_flag_0.__repr__()
    var_1 = module_0.import_object(var_0)
    assert var_1 == module_1.RegexFlag.DOTALL
    class_found_exception_0 = module_2.ClassFoundException(*var_0)
    var_2 = module_0.errno_from_exception(class_found_exception_0)
    assert var_2 == "r"


def test_case_18():
    regex_flag_0 = module_1.RegexFlag.DOTALL
    var_0 = regex_flag_0.__repr__()
    var_1 = var_0.casefold()
    with pytest.raises(ImportError):
        module_0.import_object(var_1)


@pytest.mark.xfail(strict=True)
def test_case_19():
    gzip_decompressor_0 = module_0.GzipDecompressor()
    assert (
        f"{type(gzip_decompressor_0).__module__}.{type(gzip_decompressor_0).__qualname__}"
        == "util.GzipDecompressor"
    )
    assert (
        f"{type(gzip_decompressor_0.decompressobj).__module__}.{type(gzip_decompressor_0.decompressobj).__qualname__}"
        == "zlib.Decompress"
    )
    assert (
        f"{type(module_0.GzipDecompressor.unconsumed_tail).__module__}.{type(module_0.GzipDecompressor.unconsumed_tail).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_2.getmembers(gzip_decompressor_0)
    module_0.ArgReplacer(var_0, var_0)
