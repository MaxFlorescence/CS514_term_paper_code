# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import cpp11 as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -4343
    int_1 = 3875
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -497.4677
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xb5o\x86z\xf1\x10\xfat8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1877
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ";N7y+1O\tB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -591
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    str_0 = "j: U7l6Pn&`2p\x0bKm"
    float_0 = -1096.453
    dict_0 = {str_0: float_0}
    module_1.object(*list_0, **dict_0)


def test_case_7():
    pass


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "G@>~HA 6,)i+5PrPuu"
    none_type_0 = None
    str_1 = "+ _0 \nAG"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\x1a\xe7;\xea\x85\x8f\x93\xaaci\xf6\xce\x13\xec!\x01&\xe02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    tuple_0 = ()
    int_0 = -2193
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    float_0 = -1507.9342
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b"\x02MoJ\x05\xd2\xbc;\xa7\xe58\x1a\x02\x9a\xdc\xd1\x0b5\xc4\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = -87
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = ",mM)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "1:cElX,$go\rAW="
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    int_0 = 315
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b"J\xb8\xeeg\xfd1\x14"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "G+\nkc}1w4k*> ]y.\\Jh"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = "VHWW>f&N<!\n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = "9^^_K:sKC($\n@"
    list_0 = [str_0, str_0, str_0]
    dict_0 = {str_0: list_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    int_0 = 2138
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = False
    float_0 = -1508.6143
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    bytes_0 = b"\xc4&8\x99\xdd\xc6\xa0\x94\x0c\xf0Y\t~\x06\xb4\xfe\xe9\xcc\xf8\xbc"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    int_0 = 3550
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    int_0 = 347
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    float_0 = 2151.1107
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = "!d1{GV-"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    bytes_0 = b"\x98\xf1[v\xb4z\x9cc7\xf7\xc7\xc4J\xeb\xafe"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    set_0 = set()
    object_0 = module_1.object()
    str_0 = "ig4LK&YO3"
    set_1 = {object_0, object_0, str_0, object_0}
    module_0.match(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_41():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [none_type_0, none_type_0, none_type_0, tuple_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_44():
    pass


@pytest.mark.xfail(strict=True)
def test_case_45():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bytes_0 = b"^\xf5\x14\xa5rU"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    int_0 = 1454
    float_0 = -2473.67
    set_0 = {int_0, int_0, float_0}
    module_0.match(int_0, set_0)


def test_case_50():
    pass


@pytest.mark.xfail(strict=True)
def test_case_51():
    str_0 = "dm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    str_0 = "4Cb>\rs4_A70B@ca=w;,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    float_0 = 2836.20832
    str_0 = "W'&yH3P}0djMz'#4"
    set_0 = {float_0, str_0, float_0, str_0}
    str_1 = ""
    tuple_0 = (str_1, set_0, float_0)
    bool_0 = True
    tuple_1 = (set_0, tuple_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    str_0 = "q$-K\\M!PP[n!"
    complex_0 = -1969.744 - 2108.38834j
    bool_0 = False
    tuple_0 = (str_0, complex_0, bool_0)
    set_0 = {tuple_0, str_0, complex_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = "Xhb"
    list_0 = [str_0]
    dict_0 = {str_0: str_0, str_0: list_0}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    bytes_0 = b"\xc7\xed\x02\x05\xe7\xe0]K"
    str_0 = "By}[$RJ{S2"
    tuple_0 = (bytes_0, str_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    int_0 = 1470
    list_0 = [int_0, int_0, int_0, int_0]
    set_0 = {int_0}
    tuple_0 = (set_0,)
    tuple_1 = (int_0, list_0, tuple_0, set_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    int_0 = 47
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    bytes_0 = b"\x06\x9c\xef \rO\xa9]3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    bytes_0 = b"dor\xb8\x16\xa7\xfc{IJ\xebK\x9f4)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    complex_0 = 1607.529048 + 3335.61306j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    int_0 = -350
    float_0 = 1123.0
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    str_0 = "S,.8\trP%^M'`6])$(."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    int_0 = -1146
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    int_0 = 2382
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    complex_0 = 2523 + 483j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    bytes_0 = b"\x1a/c1\xcb\xa2E\xdf\xdb\xbbF\xb0\x934"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    bytes_0 = b"\xf5\xff\xb26Q\x17\xe3d\xc8\xb3\x0e\xdf\xdf\xc6\xda\xa4}"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_77():
    pass


@pytest.mark.xfail(strict=True)
def test_case_78():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    bool_0 = True
    float_0 = 2201.322453
    int_0 = -451
    tuple_0 = (bool_0, float_0, int_0)
    dict_0 = {tuple_0: int_0, int_0: bool_0}
    bool_1 = False
    tuple_1 = (dict_0, bool_1, bool_1)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    bytes_0 = b"\xd5\x1c\xaf*\xac\xaex\xe7\xca"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    list_0 = []
    list_1 = []
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_84():
    complex_0 = 3466.3 + 557.65454j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    bool_0 = False
    complex_0 = -773.4 + 1344.0395j
    module_0.get_new_command(bool_0, complex_0)


def test_case_86():
    pass


@pytest.mark.xfail(strict=True)
def test_case_87():
    bytes_0 = b"\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    int_0 = 1088
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    int_0 = -297
    list_0 = [int_0]
    tuple_0 = (int_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    int_0 = -280
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    int_0 = 978
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    int_0 = 2645
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    str_0 = "\x0b]Olp|~dx-QgOz"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    str_0 = 'TkLW#"p!\x0cry\n\t)'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    int_0 = -3705
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    str_0 = "&yvS+F/Tw,SA9QiGVq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_100():
    pass


@pytest.mark.xfail(strict=True)
def test_case_101():
    bool_0 = True
    complex_0 = -4571.8 + 517.707j
    tuple_0 = (bool_0, complex_0)
    list_0 = [tuple_0, complex_0, complex_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    int_0 = -1734
    list_0 = [int_0, int_0]
    str_0 = ")A3s6N>;jpYC0"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    int_0 = -2056
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    complex_0 = 945.010329 + 1741.112749j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_106():
    pass


@pytest.mark.xfail(strict=True)
def test_case_107():
    int_0 = 843
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    int_0 = 1525
    module_0.match(int_0, int_0)


def test_case_109():
    pass


@pytest.mark.xfail(strict=True)
def test_case_110():
    bytes_0 = b'"\xa0\x8ew\xcbr\xfb'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    bytes_0 = b"\xa0S\x86\xa7\x8df"
    float_0 = -948.2
    module_0.get_new_command(bytes_0, float_0)


def test_case_112():
    pass


@pytest.mark.xfail(strict=True)
def test_case_113():
    complex_0 = -4417.7 - 3069j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    str_0 = "AJ9K!\r}dl2CMy:R^,"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    float_0 = -3350.18
    set_0 = {float_0, float_0, float_0}
    tuple_0 = (set_0,)
    bool_0 = True
    int_0 = -3413
    tuple_1 = (tuple_0, bool_0, float_0, int_0)
    module_0.get_new_command(float_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_117():
    str_0 = "#CpX\x0b<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    float_0 = -1475.9395
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    none_type_0 = None
    int_0 = -2336
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    str_0 = "LJ~*(@NS"
    int_0 = -3387
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    float_0 = 2129.77
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [tuple_0, tuple_0, dict_0, dict_0]
    list_1 = [dict_0, dict_0, list_0, dict_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_124():
    int_0 = -2262
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    str_0 = "8^>k#/?h6M6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    float_0 = 1433.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    bytes_0 = b"\xa6ZvYK\xb5C\xd8\x8aXi\xeb\xf2\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    int_0 = 64
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0}
    list_0 = [set_0, dict_0]
    tuple_0 = (list_0, set_0)
    float_0 = -1647.384523
    int_0 = 1560
    tuple_1 = (tuple_0, float_0, int_0, list_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    int_0 = 1330
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    float_0 = -4641.922265
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, float_0)


def test_case_133():
    pass


@pytest.mark.xfail(strict=True)
def test_case_134():
    none_type_0 = None
    str_0 = "AZ8yVsHA}QnC<"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    str_0 = "$u^\tl_+0]QR\x0b"
    str_1 = "nrQ30[\\$(s*Xpm*"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: bool_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    str_0 = "{0_q][+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    bytes_0 = b"6\xa5er\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    none_type_0 = None
    str_0 = "OVsMJ*kF6w,c'"
    dict_0 = {str_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    bytes_0 = b"l\xe0\x07\xc7\x99\x94\xc6X"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    int_0 = -2932
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    bytes_0 = b"i\x9c\xee\t\xb6\xed\xb7\x85\x8eq"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    int_0 = -1444
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    int_0 = 1401
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    str_0 = "As){)"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    str_0 = "5\t`o5>F7SV~yPd<M"
    bool_0 = False
    set_0 = {str_0, bool_0, str_0, bool_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    str_0 = "l;$gAqm_k\n83.0 ?U"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    str_0 = "g[%J_4MmHal2D>7"
    list_0 = []
    float_0 = 585.0
    str_1 = "{+&[&Wx3E,ZObN&J"
    tuple_0 = (str_0, list_0, float_0, str_1)
    module_0.match(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_155():
    int_0 = -725
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    float_0 = 614.96693
    set_0 = {float_0, float_0, float_0}
    bytes_0 = b"\xa9r.K\xf98kr\xaf\xf5\xd7\xae\xcb\x9b\xc7\xc9\x1bz\xc9"
    tuple_0 = (set_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    int_0 = -1401
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    int_0 = -1358
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    str_0 = "p"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    bool_0 = True
    str_0 = "/XDVBX^5FM\x0cpt<4'"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    int_0 = 1443
    module_0.match(int_0, int_0)


def test_case_164():
    pass


@pytest.mark.xfail(strict=True)
def test_case_165():
    bytes_0 = b"\xce$\x04Qk\xa6\xd2\x8eG\x9b\x9d\x00\x1b\x08\rN\xc6b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    int_0 = 639
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    bytes_0 = b"W\xbf\x0e\xaa/\xbc),\xa0\xeau\xed\xa1I"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    str_0 = "T>#jG|(f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    complex_0 = 3261.87 + 456.634948j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    int_0 = 424
    module_0.match(int_0, int_0)


def test_case_171():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_172():
    str_0 = "ut@:Ll\n\\+U3Iwo}ZnH7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    int_0 = -377
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    int_0 = -1331
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    bytes_0 = b"\x06#f\x1c<\x9d\xc6\x0f\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    float_0 = 1958.43568
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    str_0 = "6\rNepKx6KBbCl~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    bytes_0 = b"\x16\xa1QVHF\x8b\x19\xd9\xfcbq\xf9\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    bytes_0 = b"\xafa\xce\x9e\xbfK\x15\x86\xa9kY\x8b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    float_0 = 1511.50351
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    bool_0 = False
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    str_0 = "d;9FsLij"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    str_0 = ".Oq^kgb=p|>!v2"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    int_0 = 1573
    float_0 = 409.4858
    set_0 = set()
    tuple_0 = (int_0, float_0, set_0, set_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    str_0 = "{\n#*\tvU>2SmWu&ftHq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    str_0 = "^.{QY;Nt$+8wi#"
    module_0.match(str_0, str_0)


def test_case_192():
    pass


def test_case_193():
    pass


@pytest.mark.xfail(strict=True)
def test_case_194():
    bytes_0 = b"\x9d\xed\xf24\xbap\xef\xa7\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    int_0 = 95
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


def test_case_198():
    pass


@pytest.mark.xfail(strict=True)
def test_case_199():
    float_0 = 1540.196
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    str_0 = "*kx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    bytes_0 = b"\x89I\x08 T\x93\xc9\xff\x98&\x95\x10\x17\x18"
    complex_0 = -3866.15 + 2788.3j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    int_0 = 128
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    none_type_0 = None
    int_0 = -1893
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    int_0 = -2450
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    int_0 = -351
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    int_0 = 2307
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    int_0 = -2133
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    int_0 = 21
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    str_0 = ",D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    float_0 = -302.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    int_0 = -1305
    object_0 = module_1.object()
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    int_0 = 1437
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_220():
    pass


@pytest.mark.xfail(strict=True)
def test_case_221():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    bytes_0 = b"\x07\xd9[e6\xb171"
    bool_0 = True
    bytes_1 = b"P^*"
    tuple_0 = (bytes_0, bool_0, bytes_1)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    bytes_0 = b"\xcb\x17\xea\xfb\xd0u\xff\x11A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    str_0 = '-"DOzi<o\\\nG1'
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: str_0, bool_0: bool_0, str_0: str_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    complex_0 = -1028.120871 - 2316.892j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    dict_1 = {object_0: object_0}
    list_0 = [dict_1, object_0, object_0, dict_1]
    list_1 = [list_0, dict_0, object_0]
    module_0.match(list_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_229():
    int_0 = 2340
    list_0 = [int_0, int_0]
    tuple_0 = (int_0, int_0, list_0, int_0)
    bool_0 = False
    tuple_1 = (tuple_0, int_0, list_0, bool_0)
    tuple_2 = (tuple_1,)
    bool_1 = False
    module_0.match(tuple_2, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_230():
    bytes_0 = b"\x87~e\x1b\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    float_0 = 65.0
    int_0 = -78
    set_0 = {float_0, int_0}
    module_0.match(set_0, set_0)


def test_case_232():
    pass


@pytest.mark.xfail(strict=True)
def test_case_233():
    int_0 = 2222
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    float_0 = -1611.109562
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    int_0 = -4716
    float_0 = -2871.517178
    bool_0 = False
    tuple_0 = (int_0, float_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    int_0 = -2794
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    int_0 = -1090
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    bytes_0 = b"\xff\xf6\xde`\x03\x89\xc6_"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_239():
    pass


@pytest.mark.xfail(strict=True)
def test_case_240():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_242():
    pass


@pytest.mark.xfail(strict=True)
def test_case_243():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    float_0 = -1003.958488
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    float_0 = 3324.46273
    module_0.get_new_command(float_0, float_0)


def test_case_247():
    pass


@pytest.mark.xfail(strict=True)
def test_case_248():
    complex_0 = -2364.99 - 440j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    str_0 = ",.z_KoVX61={8SoFJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    int_0 = -2399
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    int_0 = 2427
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    int_0 = 141
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    bytes_0 = b"5C\xdb\xaa\xf0A"
    set_0 = {bytes_0, bytes_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    int_0 = 7
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    int_0 = 313
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


def test_case_259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_260():
    str_0 = "\tu5a@[@2TF "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    float_0 = -2498.989
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    str_0 = "Qdw\nD,"
    str_1 = " sL0[9MPgJ0MS.EG}Z\r/"
    list_0 = [str_0, str_1, str_1]
    list_1 = [list_0, list_0]
    module_0.match(list_1, str_0)


def test_case_265():
    pass


@pytest.mark.xfail(strict=True)
def test_case_266():
    str_0 = "T2rT=p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    str_0 = "eS\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    int_0 = 472
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    str_0 = "ppzs|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    float_0 = -479.951
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    complex_0 = -423.57 - 2514.7j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    int_0 = -86
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    bytes_0 = b"\xc9,\xe7\xdd\x98\xbf\n\xe2\xafPk\x04C\x7f\xb8\xbc\x08\x15\x9d"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    set_0 = set()
    int_0 = -428
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    bytes_0 = b"M\xc9l$\xf4\x80A\x98\x8c\t\x7f\xc8\x18y\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    str_0 = "Ko5A~4b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    bool_0 = True
    complex_0 = 922.9 - 2766.093395j
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, complex_0: bool_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    int_0 = -68
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0, int_0, int_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_282():
    bool_0 = True
    int_0 = 108
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    int_0 = 1083
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    complex_0 = -7744.76 - 492.9047j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    float_0 = 706.568
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    list_0 = [tuple_0, tuple_0, bool_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    int_0 = -539
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    str_0 = "A\x0c)-{\x0bf\t_ft"
    module_0.match(str_0, str_0)


def test_case_289():
    pass


@pytest.mark.xfail(strict=True)
def test_case_290():
    float_0 = -4059.989559
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    int_0 = 1480
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    bool_0 = True
    int_0 = -6772
    module_0.get_new_command(bool_0, int_0)


def test_case_293():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_294():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    str_0 = "k{j\nFe40(CP!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    none_type_0 = None
    bytes_0 = b"X\xad\x06\\\xbf>\xaa\x9b\xa2e\x83\xfa\x01\x1a5O"
    module_0.get_new_command(none_type_0, bytes_0)


def test_case_297():
    pass


def test_case_298():
    pass


@pytest.mark.xfail(strict=True)
def test_case_299():
    int_0 = 182
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    str_0 = "/Z)V8ndA#+kf~mDR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    dict_0 = {}
    int_0 = 2633
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    int_0 = -2433
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    str_0 = "t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    int_0 = -1454
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    float_0 = 2884.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    bool_0 = True
    int_0 = -2466
    tuple_0 = (bool_0, int_0, int_0)
    bool_1 = True
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_309():
    list_0 = []
    list_1 = [list_0]
    list_2 = [list_1]
    module_0.match(list_2, list_1)


@pytest.mark.xfail(strict=True)
def test_case_310():
    bytes_0 = b"\x9e\xd2\r\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    str_0 = "6\ns^u6#H>(\x0b\n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    str_0 = "`+Zh%_54,79,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    str_0 = "~}(lZFM-ghPsd\nzK?+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    str_0 = ")&u,S\x0c<-.V\tzwS\ro"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    str_0 = "a("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\xe6XC!\tT\xd8_\xe6-}"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    int_0 = -3451
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    str_0 = "s*i2SPlzjOf'T"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    int_0 = 124
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_324():
    pass


@pytest.mark.xfail(strict=True)
def test_case_325():
    str_0 = "~^ZVPUi="
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    str_0 = "bt eC2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    int_0 = 289
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    int_0 = 130
    module_0.get_new_command(int_0, int_0)


def test_case_330():
    pass


@pytest.mark.xfail(strict=True)
def test_case_331():
    bytes_0 = b"R\x9b\xb2\x9b*\xc4\xcf\xd6\xb4!\x12p\xf7\x110J\x81\xe7S"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    int_0 = -185
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    int_0 = 2178
    str_0 = "{cN]-Jgg&A"
    list_0 = [int_0, str_0]
    tuple_0 = (int_0, str_0, str_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    float_0 = 869.45429
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    bytes_0 = b"NC^y\xf2\x8b\xe2[?\x96;\x9b\xc6\xbd\x92\xd5\xebk\xe5\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    bytes_0 = b"U\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    int_0 = 1856
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    bytes_0 = b"\x86F\xd2\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    complex_0 = 1519.374 + 736.5j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    str_0 = "7Rrvqw_IM"
    tuple_0 = ()
    bytes_0 = b'\x1c\xf3\xed\xf1\x82Y\xde\x92\xd9N`_\xc1\x8f_\xde"n\x0f\x9d'
    tuple_1 = (str_0, tuple_0, bytes_0)
    tuple_2 = (tuple_1, bytes_0)
    dict_0 = {tuple_2: str_0, tuple_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    bytes_0 = b'\xcd\xba\x8d\xbc\xaa\xaeG\xfe\xa8"v2s'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    bool_0 = False
    bool_1 = True
    int_0 = -1424
    bytes_0 = b"\xc6\xb9\xf5\xc0"
    tuple_0 = (bool_0, bool_1, int_0, bytes_0)
    dict_0 = {tuple_0: bool_1}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    str_0 = "s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    bytes_0 = b"\xd9\xf6$"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = False
    complex_0 = -714.52 - 3645.20653j
    tuple_0 = (dict_0, bool_0, complex_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    str_0 = ",;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    str_0 = "[_`F}NS5n\rGv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    int_0 = -440
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    float_0 = 574.3319
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    int_0 = 4072
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    str_0 = "8gGHw\nls,M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    bytes_0 = b"\xac\x9d\xbc\t7\xdbOw\xb7\xc9\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    int_0 = 1286
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    bytes_0 = b"{\xf6k\xb3D\xd2>\x9d\xf2\xfd\xc1\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    int_0 = 139
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    bytes_0 = b"\xe5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    int_0 = 310
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    bytes_0 = b"\x8b\x96\x8d>\xb6\xcd\t\xb8\x84"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    bytes_0 = b"\x07@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    str_0 = ">.w$rmzO`esC"
    module_0.match(str_0, str_0)


def test_case_366():
    pass


@pytest.mark.xfail(strict=True)
def test_case_367():
    float_0 = -2671.73
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.object(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    str_0 = "4+\x0b'k<=u9Gd)"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    int_0 = -809
    list_0 = [int_0, int_0]
    list_1 = []
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_372():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1, bool_1]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    bytes_0 = b"\x7f2\x8c\xdf\x83\xf2"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    complex_0 = 2791.98 + 399.9j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    int_0 = 853
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    str_0 = "q{.qtos\x0b%E>4Y=q``5?"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    none_type_0 = None
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    int_0 = -2885
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    str_0 = "JHv5Ry\\"
    bytes_0 = b"\xcc\xa3\xd6"
    tuple_0 = (str_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    complex_0 = -1730.54372 + 193.3288j
    list_0 = [complex_0]
    module_0.get_new_command(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    int_0 = 622
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    int_0 = 2126
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    int_0 = 126
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    int_0 = 1912
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    str_0 = "mq4u$+6C3;~l\\S\nZ,}"
    module_0.match(str_0, str_0)


def test_case_390():
    pass


@pytest.mark.xfail(strict=True)
def test_case_391():
    complex_0 = 3837.78 - 1392.95972j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    int_0 = -2870
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    str_0 = "0"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    str_0 = "m6_-r}\rym;1K~2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    bytes_0 = b"\x01A\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    str_0 = "`;Zny17fK p,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    bytes_0 = b'\\\xafh\x16\x89\xd1\x10q\x02\xd4\x1dW\xdd\x18E\xed"?\xd9h'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    bytes_0 = b"]9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    str_0 = 'M"2*]'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    float_0 = 1545.79416
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    int_0 = 62
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_1}
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_405():
    str_0 = "lyxq\t 9U\x0bai"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = False
    bool_2 = False
    tuple_0 = (bool_2,)
    tuple_1 = (bool_0, set_0, bool_1, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    bytes_0 = b"\xf3\xe2L4\x9a$L\x15\xe2\x02\x85@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


def test_case_409():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_410():
    str_0 = ".gOLDd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    int_0 = 4099
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    int_0 = -748
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    str_0 = "LSSHrtP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    float_0 = 2573.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    int_0 = 681
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    float_0 = -1744.256
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    int_0 = 602
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    str_0 = "jw-`mX-=@Y-X<a\r"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_420():
    pass


@pytest.mark.xfail(strict=True)
def test_case_421():
    int_0 = -1220
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    bytes_0 = b"\xf7\xceJ\xc06M\xc5\x03\x0b("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    str_0 = "IosR1|0yK[9\x0cje-;iL"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    str_0 = "2c\x0cRN6m|b=;O$20QJ>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    bytes_0 = b"\xd4;#\xb6P \xe7\xef4x\xdb/\xd1J"
    bool_0 = False
    list_0 = [bytes_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    bytes_0 = b"\xc7\xff\xedn"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    str_0 = "zqEY"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    bytes_0 = b"\xde\x08\xd3I\xb6U\xcb\x04\xb9)R^;\x82\xcd<\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    str_0 = "@521cW<?\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    float_0 = -689.8
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    bytes_0 = b">"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    int_0 = -1530
    module_0.match(int_0, int_0)


def test_case_434():
    pass


@pytest.mark.xfail(strict=True)
def test_case_435():
    int_0 = 4112
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    str_0 = "P-\\jY$AC&yUy#<|:w-S'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    int_0 = 2058
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    int_0 = 1804
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    str_0 = "9S'Vk2vR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    bool_0 = False
    int_0 = 3203
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    str_0 = "R;23T|u4h|X&&</G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    int_0 = 1750
    module_0.get_new_command(int_0, int_0)


def test_case_444():
    pass


@pytest.mark.xfail(strict=True)
def test_case_445():
    int_0 = 2499
    str_0 = "yo)-l2sAR,\x0c\x0c= N"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    float_0 = -2072.34
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    bytes_0 = b"q\xe2\x9fb\x1c\xd4\xc7Or{\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    bytes_0 = b"\xc06\xfb\x95\xb7\x94\x92\x88O\xb0_ds"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    bytes_0 = b"jx\xa6\x9aB\xf1<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    bytes_0 = b"\xcc\xbc\x13\x0e\xf6!\x00\x89"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    dict_0 = {}
    object_0 = module_1.object(*dict_0, **dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    int_0 = -879
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    int_0 = 796
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    str_0 = "Bi\tn)yp 7p5)gM "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    complex_0 = -1986.636364 + 1478.7j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    float_0 = 475.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    int_0 = -2522
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    int_0 = -651
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    bool_0 = False
    int_0 = 47
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    str_0 = "h\x0cGB\nvHSBY-X$"
    module_0.get_new_command(str_0, str_0)


def test_case_465():
    pass


@pytest.mark.xfail(strict=True)
def test_case_466():
    str_0 = "uH3?i"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    int_0 = -264
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    dict_0 = {}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    complex_0 = 110.8 - 958.509717j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    bytes_0 = b"\x11\x82]x\x82P\x01\xdf\x0f>\xfb\xdd78\xd3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    bytes_0 = b"\x0c\xfaA\x122ZB\x08\xd5;\xc2\xff$\x15\xdf\xd5\x03\xf1"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    str_0 = "_1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    bytes_0 = b"e:\xf3\xc6S&\xb3\x9dss\x19\xadJ\xd5\x82\x11,\xda\x9f%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    list_0 = []
    str_0 = "n\\eMiy?"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    bytes_0 = b"\xb3\x98\xf2\xe3\x01I\xa0\xb6lY{_\xf3d\x01\xe2\x97\xdfn"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    bytes_0 = b"\\\x18\xder"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    list_0 = [set_0, set_0, object_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    str_0 = "\x0bn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    str_0 = ":k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    bytes_0 = b"\x80mb\xbc\x00N"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    float_0 = -228.1254
    module_0.get_new_command(float_0, float_0)


def test_case_486():
    pass


@pytest.mark.xfail(strict=True)
def test_case_487():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    bytes_0 = b"MQk\x96\x1e\x86\x0e\xdd\x91\xce\x1b\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    str_0 = ")/r~in0AYiv<c6R}#R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    int_0 = 129
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    int_0 = -455
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    str_0 = "P"
    str_1 = ">EHK^coP%Jdw\n\\\x0b"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


def test_case_494():
    object_0 = module_1.object()


def test_case_495():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    str_0 = "f5tAkcO.nv)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    int_0 = 1102
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    bytes_0 = b"\xadS-\xc9T\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    str_0 = "KwspU@>Jm7Ms"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    bytes_0 = b"\x91\t\xc9\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    str_0 = "T $,c"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    int_0 = -1674
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    str_0 = "~[kNOzx\r-"
    str_1 = "rwFB41HgG"
    str_2 = "sH:\"UV'4%"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    complex_0 = 1114.3 + 3692.270242j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    str_0 = "J\x0b>Ky\x0b4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    int_0 = 2735
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    bytes_0 = b"\xa1\xb6\xb2B\xa7\x851\x95"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    bytes_0 = b"\xd3l{\x8d\x85"
    complex_0 = 965.63 - 4784.462062j
    module_0.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    int_0 = 1484
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0, set_0, bool_0, set_0]
    str_0 = "mu}1]^!6\rpUq+NI*6"
    str_1 = "x\x0c&9J\nQ"
    str_2 = "\t+w~86ygI\\TUNJ#u"
    dict_0 = {str_0: list_0, str_1: str_0, str_2: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    int_0 = 516
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    complex_0 = 3736.23057 - 3042.7411j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    int_0 = -268
    module_0.get_new_command(int_0, int_0)


def test_case_518():
    pass


@pytest.mark.xfail(strict=True)
def test_case_519():
    int_0 = -1168
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    str_0 = "\x0cmc"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    bytes_0 = b"1MEk\xf3-\xad."
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    bytes_0 = b"\xfb\x96\x94\x7f\xf3\xe1\x1es\xc3<\xfd\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    str_0 = "OaKt,3@<M7de`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    set_0 = set()
    bytes_0 = b"i\t\xc5\x86\xfa.\xec\x01\x88"
    tuple_0 = (set_0, bytes_0, set_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    float_0 = 759.0
    module_0.match(float_0, float_0)


def test_case_527():
    pass


@pytest.mark.xfail(strict=True)
def test_case_528():
    complex_0 = -2551.9203 + 354j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    int_0 = -471
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "%hQ\nl%nb8\r<v1UvSW."
    tuple_0 = (list_0, str_0, str_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_530():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    int_0 = 212
    bytes_0 = b"\x91%\xda\x9bG\xf5e\x81ia\xf3\x1a\x12\xcd\xe5"
    set_0 = set()
    tuple_0 = (set_0,)
    tuple_1 = (int_0, bytes_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_532():
    str_0 = "p:j:E|'rL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    int_0 = 998
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    str_0 = "btf)g&GI30KcZ=lkh88"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    str_0 = "J5p:h]+eYOHoZ?g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    int_0 = -2342
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    str_0 = "lov^&\\|j4\r\x0bnz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    str_0 = "W\t\tkr;l^Z#;c-rnVub"
    int_0 = -1204
    tuple_0 = (str_0,)
    tuple_1 = (str_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_539():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    bytes_0 = b"\x9a\xcb\xd8G/?X\xbc\xfc\xc5t\xc0\xb2\xfdK\x96\x9f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    bytes_0 = b"\xbf.\xeb\xf3\xf6v\x04\xe5\x03Z\xbfD\xfd\x90"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_543():
    pass


@pytest.mark.xfail(strict=True)
def test_case_544():
    bytes_0 = b"\x95\x02\x02\xcd\xfc\xf9\xf1\xcc\xc1\x80^\xbd_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    str_0 = "I:a"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    bytes_0 = b"K4,\xb2K\x04\x82>\x10\x1ew\xf1\xc5"
    str_0 = "c~_<pS6rP>D\tm\rj"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*bytes_0, **dict_0)


def test_case_547():
    pass


@pytest.mark.xfail(strict=True)
def test_case_548():
    str_0 = "\t8?f{e%n$CS~Bn"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    bytes_0 = b"\x8a\xbb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    str_0 = "_W(90Y-mOMU~]mh"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


def test_case_552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_553():
    float_0 = 7.39
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    str_0 = "No\tCdb0jwd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    str_0 = "n\n]&L~~3vG]\\$y|8{:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    int_0 = -3226
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    bool_1 = True
    list_0 = [tuple_0, bool_0, bool_1, bool_1]
    module_0.match(list_0, list_0)


def test_case_558():
    pass


@pytest.mark.xfail(strict=True)
def test_case_559():
    int_0 = 1167
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    complex_0 = 1265.3 - 1760.4043j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    none_type_0 = None
    module_1.object(**none_type_0)


def test_case_562():
    pass


@pytest.mark.xfail(strict=True)
def test_case_563():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    bytes_0 = b"z\xc0+rK\x15\xe8\xcczEx>B\xd3B5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    bytes_0 = b"\xa7\x1cZ\xf2\xc1\xaa\xb5F\xa2\xdf\xadz!"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    bytes_0 = b"\xebE:\xa4'\xff\t\xa0p\x05\x02\xe3s\xd80"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    bytes_0 = b"`\xbd\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    str_0 = "8 "
    module_0.match(str_0, str_0)


def test_case_569():
    pass


@pytest.mark.xfail(strict=True)
def test_case_570():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    bool_0 = True
    bytes_0 = b"\xab\xdb\xe4\x02\xc82\x88P\xcd\xd36"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    str_0 = "67N-DWzC-]~X(|J6q="
    int_0 = 481
    dict_0 = {str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    int_0 = -737
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    str_0 = "\r;ua$F&Z >262j\\JzLbA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    float_0 = 1184.46812
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    set_0 = set()
    object_0 = module_1.object()
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    str_0 = "njr"
    str_1 = "v@8qHX\\@6$&w"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1, str_1: str_0}
    str_2 = "xzN8"
    dict_1 = {str_0: str_0, str_0: str_0, str_1: dict_0, str_2: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_578():
    str_0 = "6Xue3wJ"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    str_0 = "Cxx*yOz!5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    complex_0 = 2147.877 + 1777.657j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    bool_0 = False
    str_0 = ""
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    int_0 = -386
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    int_0 = -115
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    int_0 = 1215
    module_0.get_new_command(int_0, int_0)


def test_case_588():
    pass


@pytest.mark.xfail(strict=True)
def test_case_589():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    int_0 = 473
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    bool_0 = False
    bool_1 = True
    str_0 = '^\rr\x0bj<u6.69e"'
    tuple_0 = (bool_0, bool_1, str_0)
    module_0.match(tuple_0, bool_1)


def test_case_593():
    pass


@pytest.mark.xfail(strict=True)
def test_case_594():
    float_0 = 1541.1867
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    str_0 = "B!z>y_LT"
    list_0 = [str_0, str_0, str_0]
    module_0.match(str_0, list_0)


def test_case_597():
    pass


@pytest.mark.xfail(strict=True)
def test_case_598():
    int_0 = 2025
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    int_0 = -1011
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    str_0 = 'eRyp`z@@1\\7$["a\x0b@'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    str_0 = "=+Gn{>SzPD9,WE\n[b}\x0b_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    str_0 = "sv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0, bool_0, dict_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    str_0 = "L!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    str_0 = "eA_)4rIvahtq7^)}y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    float_0 = 1920.6597
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    str_0 = "IjV;m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    str_0 = "HGf<\x0bYJ0\rR %'["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    complex_0 = 370.627 - 459.294797j
    bytes_0 = b"\x86\x81Z'"
    complex_1 = 477.71153 - 3523.276j
    tuple_0 = (complex_0, bytes_0, complex_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    str_0 = "V[:QXr<b_\rG\tKcvp`MFu"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    int_0 = -2572
    set_0 = {int_0}
    tuple_0 = (int_0, set_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    int_0 = 886
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    bytes_0 = b"\xefO8;\xf1uO7E4\xc6\x91O\xfe["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, bool_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    float_0 = -825.19
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    complex_0 = 484.594545 + 61j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    int_0 = 717
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    str_0 = "v"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    int_0 = -1503
    str_0 = "T"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    complex_0 = 200.669337 + 2628j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    float_0 = 766.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    bytes_0 = b"~\xa8\xe6\xb8\xed5n+na~\x91"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    float_0 = 645.55
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    bytes_0 = b"\x98l\x0f\x94*~\xdc\xf7x7\x1f\xfb\x9eQD\xfa\xcd\x8e\xbf\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    float_0 = 360.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    bytes_0 = b"S\xa24f\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    int_0 = 1539
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    str_0 = "pFI\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    str_0 = "2x~}.OTEV\n'7"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    str_0 = ')~P3>ABsS["(_l$K3'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    str_0 = '*>2Eve8Iw[hrp"s0AM}!'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    bytes_0 = b"\xfd*&\xfb\x12\xdd\xa4\xe5$d\x19"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    float_0 = 1299.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    str_0 = "'YJ/eMO"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    float_0 = 3302.821
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    str_0 = '_<HCQX@@8"+'
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    bytes_0 = b"p\xaf\xc4\x98\xf6[\xc1\xc7\x85(\x84x)\x03\xb1\x8a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    bytes_0 = b"\xe5\xc7\xf5\x89@\xb4\xee"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    str_0 = ">VO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    int_0 = 3393
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    int_0 = 2064
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    bool_0 = False
    list_2 = [list_1, list_1, list_0, bool_0]
    module_0.match(list_2, bool_0)


def test_case_649():
    pass


@pytest.mark.xfail(strict=True)
def test_case_650():
    float_0 = -783.74
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    complex_0 = -275 - 544.577j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    str_0 = "}?xz"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    complex_0 = 1520.329 - 956.1916j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    bytes_0 = b'\xd8=\\j\xe2\xf7"\xd1#\x01\x06_e\x1d'
    list_0 = [bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    bytes_0 = b"\xfa\xf7\xeaOR\xde\x9e6A\xea&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    bool_0 = True
    int_0 = -1851
    set_0 = {bool_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    int_0 = 1360
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    str_0 = "ty[\x0b0G@-6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    str_0 = "b|YI o|g,wi_O:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    int_0 = -206
    module_0.get_new_command(int_0, int_0)


def test_case_663():
    pass


@pytest.mark.xfail(strict=True)
def test_case_664():
    int_0 = 661
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    list_0 = []
    str_0 = ""
    str_1 = ""
    dict_0 = {str_0: list_0, str_1: str_1, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    str_0 = "VY`2b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    str_0 = "qI$=vm\x0b:Uy~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (list_0, bool_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    float_0 = -2721.14
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    bytes_0 = b"\xbe=\xcdZJ;\xa9\xcc\xd7\x9bl8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    bytes_0 = b"\xe6U|\x92\xf2\x00\xdb&"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_673():
    pass


@pytest.mark.xfail(strict=True)
def test_case_674():
    str_0 = ":3,_IdZTe7,QDe&80\\"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    int_0 = -2857
    float_0 = -2974.93
    complex_0 = -1945.79 - 948.10044j
    list_0 = [int_0, float_0, complex_0, complex_0]
    int_1 = -2848
    tuple_0 = (list_0, int_1, int_1)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    bytes_0 = b"=\xcad\x08-%\n{\x83\xce\xe3\xd9r\xcdk\xf6|\xa8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    int_0 = 1007
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    int_0 = 856
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    str_0 = ":JOrYRFc,A"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    int_0 = 1424
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    str_0 = "hw#GaXp"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    int_0 = -22
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    bytes_0 = b"l\xfe\xcd_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, tuple_0: tuple_0, bool_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    int_0 = -744
    set_0 = {int_0}
    str_0 = '"GDIbP63[yM'
    tuple_0 = (set_0, int_0, str_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    bytes_0 = b"J\xf4-\x91RZ\xf9\xe6p'/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    bytes_0 = b"\xa1\xa6\x8eI\x896h\x87\x9b\xb3/\xed\x8b\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    str_0 = "Q.dr?NhE~UOD\x0cOR"
    int_0 = 1373
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    bytes_0 = b"L\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    float_0 = 2939.503229
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_699():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    str_0 = "?-R)A20jlB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    bytes_0 = b"\xad="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    int_0 = -4120
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    bool_0 = True
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    float_0 = -844.45
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_709():
    pass


@pytest.mark.xfail(strict=True)
def test_case_710():
    int_0 = -1422
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    int_0 = 2058
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    bytes_0 = b"\xe5\x93\xca\x90u\xc5\x7f\x9f\xb7\xb3H\x91S\xb5N"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    int_0 = 3907
    str_0 = 'QJ1U,o|(y(|x!"'
    dict_0 = {int_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    str_0 = '"\r'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    complex_0 = -917.303706 + 2209.65j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    str_0 = "H5aP*\\ (~hQ-5Lh3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    int_0 = 4733
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    str_0 = "`[\\>N9m"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    int_0 = 75
    module_0.match(int_0, int_0)


def test_case_722():
    pass


@pytest.mark.xfail(strict=True)
def test_case_723():
    int_0 = 2096
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    str_0 = '."*mv&TP|\x0cqL_D'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    int_0 = 4157
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    str_0 = "aV\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    float_0 = 3311.63976
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0]
    float_1 = -2114.291611
    module_0.match(list_1, float_1)


@pytest.mark.xfail(strict=True)
def test_case_728():
    int_0 = 1618
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    float_0 = -4750.06725
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    float_0 = -1795.40521
    tuple_0 = (set_0, set_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    int_0 = 397
    int_1 = -998
    dict_0 = {int_0: int_0, int_0: int_1}
    tuple_0 = ()
    tuple_1 = (int_0, int_1, dict_0, tuple_0)
    list_0 = [tuple_1, tuple_0]
    bytes_0 = b"\xa4G\xc1G\x88"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_733():
    pass


@pytest.mark.xfail(strict=True)
def test_case_734():
    int_0 = -428
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    int_0 = -1617
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    list_0 = []
    bool_0 = False
    dict_0 = {}
    tuple_0 = (list_0, bool_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    bytes_0 = b"\xa1\xbf\x91\xa6\xb1\x0b\xf1zK\x8a_X\xe4\xb4\xd4;\xa6\xd3\xda\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    int_0 = 1464
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    int_0 = -1848
    list_0 = []
    dict_0 = {int_0: int_0, int_0: list_0}
    list_1 = [int_0, dict_0]
    bool_0 = False
    tuple_0 = (int_0, list_1, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    complex_0 = -1902.44 + 788.843j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    bytes_0 = b"\xa2\x94$9\xe9\xc7\xfa}\xc8dyDtn\\\x89O"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


def test_case_743():
    pass


@pytest.mark.xfail(strict=True)
def test_case_744():
    int_0 = -1456
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    bytes_0 = b"\x90\x15W#\x1c\xe8\xc10\xda\xc4\xb1\xfe~6_\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    float_0 = 1710.79344
    module_0.get_new_command(float_0, float_0)


def test_case_747():
    pass


@pytest.mark.xfail(strict=True)
def test_case_748():
    str_0 = "\x0b(Z\\^w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    bytes_0 = b"S\xc6YH"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_750():
    pass


@pytest.mark.xfail(strict=True)
def test_case_751():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    bool_0 = True
    dict_0 = {}
    int_0 = 3735
    tuple_0 = (bool_0, dict_0, bool_0, int_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    float_0 = 290.045971
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    dict_0 = {}
    bytes_0 = b"\xd4C]\xde|Xb\xeb"
    tuple_0 = (dict_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    float_0 = 430.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    int_0 = 91
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    bytes_0 = b"\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    int_0 = 3811
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    complex_0 = -349.46918 - 660.823j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    bytes_0 = b"x\x9b\xba\xbb\x80\x96G\xd5\x16\x1b\xe8\x01+[\xe2!\xe7q"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    int_0 = 2244
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    float_0 = -846.933
    module_0.match(float_0, float_0)


def test_case_764():
    pass


@pytest.mark.xfail(strict=True)
def test_case_765():
    none_type_0 = None
    bool_0 = False
    str_0 = "zxjt0B8AW"
    tuple_0 = (bool_0, str_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    int_0 = -3315
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    complex_0 = 346.089902 - 1215j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    complex_0 = -1881.09843 - 1041.21j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    float_0 = 742.926924
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    int_0 = -2539
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    none_type_0 = None
    bytes_0 = b"\x17\x87\x1a\xb1\xd0\xd6\x93\n,\xd3h"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    bytes_0 = b"\xce\xb1\xb5\xff\xe3\xf6u\xb6\n\xdd-\xacxs"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    bool_0 = False
    int_0 = 362
    tuple_0 = (bool_0, int_0)
    dict_0 = {bool_0: bool_0}
    str_0 = "9[@YEc"
    tuple_1 = (tuple_0, dict_0, dict_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    int_0 = 2221
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    float_0 = 1926.791743
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    int_0 = 1563
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    int_0 = -2069
    bool_0 = False
    str_0 = "N\r#{"
    tuple_0 = (int_0, bool_0, str_0)
    set_0 = set()
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    str_0 = "<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    float_0 = -3269.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    complex_0 = 226.5161 - 1415.39j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    str_0 = "q\rYy|\r"
    str_1 = ""
    str_2 = "'=|mi)K"
    dict_0 = {str_0: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    str_0 = 'Txma%Py<P8!I2t"Zuo'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    bool_0 = False
    str_0 = "wX"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


def test_case_789():
    pass


@pytest.mark.xfail(strict=True)
def test_case_790():
    str_0 = "a"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    str_0 = "[q,2)w,E8\x0bZeQO;K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    str_0 = "*5}I%`iz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    bytes_0 = b"\x8d\x93\xf4\xb2\x90vQ\x85%\xd26\xfa\xf5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    int_0 = -1625
    module_0.get_new_command(int_0, int_0)


def test_case_795():
    pass


def test_case_796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_797():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    float_0 = -358.1
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    complex_0 = -1414.7 + 80.17j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    bytes_0 = b"e\xd0\x17\xa4Z\xd1\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    int_0 = -1564
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    float_0 = -383.84475
    bytes_0 = b"2\xec\xd3!\x01''\\C\x1b"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    int_0 = -385
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    int_0 = -1923
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    str_0 = "m=Zk|b$75kv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    float_0 = 2101.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    bytes_0 = b"\xf6\xba,Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    int_0 = -490
    tuple_0 = ()
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_811():
    pass


@pytest.mark.xfail(strict=True)
def test_case_812():
    str_0 = 's"m6$_rbOJ50I7'
    module_0.get_new_command(str_0, str_0)


def test_case_813():
    pass


@pytest.mark.xfail(strict=True)
def test_case_814():
    float_0 = 5136.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    str_0 = "^pn\reJ"
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (str_0, str_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_817():
    bytes_0 = b"\x98\xa24\x96s\xbb\xbc\xa3\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    str_0 = "keO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    bytes_0 = b"(\x11\xee\xa8N@\xa7\xae\xee\xefv\x8e\xf7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    int_0 = 152
    complex_0 = 1065 + 211.485191j
    tuple_0 = (int_0, complex_0)
    str_0 = "&E hOt"
    tuple_1 = (tuple_0, str_0)
    dict_0 = {tuple_1: tuple_1}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    bytes_0 = b"8I`\xdb\xf5"
    set_0 = {bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    float_0 = -2543.3895
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    bytes_0 = b"\x8a0Oj\x9d\x01\xd7\x17\xc8W]V\x1a;"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    complex_0 = -2183.45467 + 158.6075j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    int_0 = -910
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    bool_0 = False
    dict_0 = {}
    module_0.match(bool_0, dict_0)


def test_case_831():
    pass


def test_case_832():
    pass


@pytest.mark.xfail(strict=True)
def test_case_833():
    str_0 = '0]E.a)XC*q{g>Tv"}'
    module_0.match(str_0, str_0)


def test_case_834():
    pass


@pytest.mark.xfail(strict=True)
def test_case_835():
    float_0 = 2515.96
    module_0.get_new_command(float_0, float_0)


def test_case_836():
    pass


@pytest.mark.xfail(strict=True)
def test_case_837():
    float_0 = -4021.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    str_0 = ".4\x0bzvtB7p:7=O|BCE;H\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    str_0 = "d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    bytes_0 = b"K\xc0\x94v"
    list_0 = [bytes_0]
    module_1.object(*list_0)


def test_case_843():
    pass


@pytest.mark.xfail(strict=True)
def test_case_844():
    str_0 = "BkV(n"
    bytes_0 = b"\xedk\x92)\xcf\xb1Z"
    module_0.match(str_0, bytes_0)


def test_case_845():
    pass


@pytest.mark.xfail(strict=True)
def test_case_846():
    int_0 = -58
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    bytes_0 = b"\xeaC>\x0b\xb2'\x90\xc9*\x1bA^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    float_0 = 1354.745
    str_0 = "1^oCPg%Y<4Iq\x0c"
    module_0.match(float_0, str_0)


def test_case_849():
    pass


@pytest.mark.xfail(strict=True)
def test_case_850():
    bytes_0 = b"u\xe0)\x19zA\xc2\xda\xbe\xe4\x1e\x90\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    bytes_0 = b"\x02Q\xa3\x06\xd7T\x108"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    str_0 = "Yto`C\nPlC#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    int_0 = -2215
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    bytes_0 = b"B6\xdd'v\xa7\x05\"\xe0\x01xk\x7f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_858():
    pass


def test_case_859():
    pass


@pytest.mark.xfail(strict=True)
def test_case_860():
    str_0 = "U\rJ\t:?.U}Kgto<'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    str_0 = ".b+_>RO'?QQ!3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    bytes_0 = b"\xa8EY?t\xe0\x94\xber\x06\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    float_0 = -634.0
    module_0.match(float_0, float_0)


def test_case_864():
    pass


@pytest.mark.xfail(strict=True)
def test_case_865():
    bytes_0 = b"\n\xd4\xa5D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    bool_0 = False
    bytes_0 = b"u\xe5\xb5\xc0M"
    dict_0 = {bool_0: bytes_0, bytes_0: bool_0}
    list_0 = [dict_0]
    bool_1 = False
    module_0.get_new_command(list_0, bool_1)


def test_case_867():
    pass


@pytest.mark.xfail(strict=True)
def test_case_868():
    bool_0 = False
    str_0 = ")#,\x0b;'[g4&frw+@XQ"
    bytes_0 = b"\xd5\t\xe0\x05c?\xb5\xf9,P\xcb\x00\x8ck"
    tuple_0 = (bool_0, str_0, bytes_0)
    int_0 = 486
    tuple_1 = (bool_0, tuple_0, int_0)
    module_0.match(tuple_1, str_0)


def test_case_869():
    pass


@pytest.mark.xfail(strict=True)
def test_case_870():
    int_0 = 374
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    str_0 = "w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    int_0 = -1991
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    int_0 = -627
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    bytes_0 = b"\xa7`\x95\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    complex_0 = -3476.6232 - 2435j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    str_0 = 'Iag"G5;VM,'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    float_0 = 105.001264
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    bytes_0 = b"\xee>\xe5\xa1g:\x83P\x0ei%\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    int_0 = 2827
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    float_0 = -4012.479815
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    int_0 = -916
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    bytes_0 = b"\xb9\\\xc9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    int_0 = -1217
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    int_0 = 2140
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, dict_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    str_0 = "v\x0b 4n\\i7B-*kB>^0t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    int_0 = -3114
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    str_0 = "4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    str_0 = "Q\r4\x0bp_i$lws$|[q-kx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    bool_0 = True
    float_0 = 2206.7
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    complex_0 = -649.8 + 360j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(complex_0, set_0)


def test_case_894():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_895():
    bytes_0 = b"\xdd\xef\x17\xa5\x85\xe9/\xa3\x82?\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    tuple_0 = ()
    bytes_0 = b"\xc7\xef\xf8?\x0b\xc8"
    tuple_1 = (tuple_0, bytes_0, bytes_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    str_0 = "L/3`q_E%JlSo["
    none_type_0 = None
    str_1 = 'W:uuF<,;"VY\x0c'
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    float_0 = 1194.447
    tuple_0 = (float_0, float_0)
    dict_0 = {tuple_0: float_0}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_901():
    pass


@pytest.mark.xfail(strict=True)
def test_case_902():
    bytes_0 = b"\xf1\xe7X\xf5\xe2G\xd7\xa7\xe6\xcbSoMK\x1c/\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    int_0 = 1920
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    str_0 = "?E3bW]l>?a@$pO@5j"
    bytes_0 = b"*\xce\xf8cO\x8aL4\xf7\xe5\xa2o\x8c/"
    tuple_0 = (bytes_0,)
    tuple_1 = (str_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    float_0 = 1481.386954
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    int_0 = 697
    list_0 = [int_0]
    int_1 = 2794
    module_0.get_new_command(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_908():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    bytes_0 = b"V^S\xf43..\xe0\x13`vH\x08\x02\x8e\x17\xbf~\x80\xf9"
    int_0 = -2024
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    int_0 = 1169
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    str_0 = "4@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    bytes_0 = b"G\xc2-&t\x93\\\x90\x9f^\xde@\x8f\xbbN\x8aVN\xcf\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    int_0 = -2433
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    bytes_0 = b"\xd2'\xff\xec\xfc\x94bS\xf8\xe8\x15\xea\x975T"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    bool_0 = False
    str_0 = "-5uR=l"
    tuple_0 = (str_0,)
    list_0 = [bool_0, bool_0, bool_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


def test_case_917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_918():
    bytes_0 = b"r\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    int_0 = -3556
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    float_0 = 531.30311
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    int_0 = 300
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    list_0 = []
    tuple_0 = (list_0,)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0, list_0, bool_0)
    set_0 = {bool_0}
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    bytes_0 = b"\x10O\xc3N\x88?\x97\xb9C\x94\xcb\xf5\x0597\xc2\x90\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    int_0 = -1942
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    str_0 = "/^441z1\n;&A:Ucr"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    int_0 = 1311
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    str_0 = "P="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = "mn^}<\rr9?m|Ih5%)Ha["
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    int_0 = 199
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    bytes_0 = b"\xcdL\xb6\nSF\x9d\xa6\xdeV\xdd\x7f\xcb\xde\xf3\xb5"
    int_0 = 458
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    bytes_0 = b"N\xda\x8a9D\xee\xef\x12E\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    bytes_0 = b"\xc6\xc3=\r\xaet \xa2\x12\x94\xdb\xf8\xeej\xe9\x928"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    str_0 = 'ip"^[KGG\\+1D >-8'
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = "Agv?m[gV:(Us%gPC4"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    float_0 = 3868.8796
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    str_0 = 'x qD$I[\tZAQkp*TG"kg'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_939():
    pass


@pytest.mark.xfail(strict=True)
def test_case_940():
    int_0 = -658
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    float_0 = -465.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    none_type_0 = None
    tuple_0 = ()
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    int_0 = -1543
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    bytes_0 = b"\xe6\xe8\x1b\x80\x88e\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    str_0 = "QzgK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    complex_0 = -1237.5 + 2834.5458j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    complex_0 = 5893.3594 + 597.7975j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    int_0 = -1688
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    str_0 = "EB2JFJY3w_Ck:A{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    float_0 = 3360.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    float_0 = -2943.783019
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    bytes_0 = b"u\x8dB\x18\x89\xff\xff\xf46\x9c\x86\x17\xf5\x98\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    str_0 = "^/N>13Al#1bO\nc/(B^KC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    bytes_0 = b"\xd3dN\x14\xb3\xc3\x92\x15\xb9"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    str_0 = "65j;uR7XezK%B43i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    bytes_0 = b"\x938\xfd\x90\xc4\xb5\xb3\xe2u"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    bytes_0 = b"\x1e@.\xe9h\x1a"
    str_0 = "n\x0cUJ%"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    int_0 = 505
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    str_0 = "0Ush>T9\r|0Bzsz"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    str_0 = "TY)b@a\rJtkL+& \t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    str_0 = "haG\x0bIk}0D_b)qUg~T=3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    int_0 = 308
    float_0 = -3585.721
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    str_0 = "`P,M\rsaIFE"
    str_1 = "@`l"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    str_0 = "#S7)r"
    none_type_0 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    float_0 = 1096.514
    module_0.match(float_0, float_0)


def test_case_968():
    pass


@pytest.mark.xfail(strict=True)
def test_case_969():
    bool_0 = False
    tuple_0 = ()
    int_0 = -2909
    tuple_1 = (bool_0, tuple_0, int_0, tuple_0)
    dict_0 = {tuple_1: int_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_971():
    pass


@pytest.mark.xfail(strict=True)
def test_case_972():
    str_0 = "a,"
    set_0 = {str_0, str_0}
    complex_0 = 1883.317 - 3644j
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    int_0 = -321
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    bytes_0 = b"U\xdc\x7f\x1eR\xec\xe6n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    str_0 = "iVVe "
    str_1 = 'Dh\tUJo+"2GKv;6^H`'
    dict_0 = {str_0: str_1, str_1: str_0, str_1: str_1, str_1: str_1}
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_976():
    str_0 = ".6[J\\v'#?>\r\x0bo94"
    int_0 = 5520
    list_0 = [str_0, int_0, str_0, str_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    str_0 = "J|9Ibv|7g\tflo="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    str_0 = "9K:>I\r{DY3t.fWK"
    str_1 = "EGB5v};!byTx'"
    str_2 = "\n=^.\tzP55UW$\\"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    bytes_0 = b"\xdd\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_982():
    pass


@pytest.mark.xfail(strict=True)
def test_case_983():
    float_0 = -1204.8
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    int_0 = 2163
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    str_0 = "["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    tuple_0 = ()
    dict_0 = {}
    object_0 = module_1.object(*tuple_0, **dict_0)
    dict_1 = {object_0: tuple_0, object_0: dict_0}
    tuple_1 = (dict_1, dict_1, tuple_0)
    module_0.match(tuple_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_987():
    int_0 = -1991
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    str_0 = "uPtZnysO"
    str_1 = ""
    str_2 = "ssSEj)x@l\x0c48"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    int_0 = -1538
    module_0.match(int_0, int_0)


def test_case_990():
    pass


@pytest.mark.xfail(strict=True)
def test_case_991():
    bytes_0 = b"\xa9\x1a\x84SR\x91@4[\x80TD\xcdYW0a\x97\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    bytes_0 = b"\xf4\x1aZ\xf1da\x04\xc7\x07\x0c\xdf\xea)\xafJ"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    float_0 = -1272.005
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    str_0 = "&}n\rpO<g1E2\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    float_0 = -108.91381
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    str_0 = "D|HFVF,zx]4e}#0yq"
    dict_0 = {}
    str_1 = "Y}TCp2 (w"
    tuple_0 = (dict_0, str_0, str_1)
    int_0 = 3239
    float_0 = -1818.230427
    tuple_1 = (str_0, tuple_0, int_0, float_0)
    module_0.match(str_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_998():
    str_0 = "^#Zzc.1`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    int_0 = 3052
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    int_0 = -1373
    str_0 = "7dl6\t2Ix"
    str_1 = "J|]7DROKTk/{E{\r9m?~c"
    dict_0 = {str_0: int_0, str_1: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    float_0 = 351.35414
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    int_0 = -1690
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    str_0 = "ZcKJ=:$Nh'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    bytes_0 = b"!\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    bool_0 = True
    object_0 = module_1.object()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    str_0 = "iCu6QQpC;X s/<1gu"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    complex_0 = 2723.6 - 1042.99j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    bytes_0 = b")\xb3,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    float_0 = 787.69407
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    bytes_0 = b"Q"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


def test_case_1013():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1014():
    str_0 = "K!c-!T\x0c"
    bool_0 = False
    str_1 = "ZR~\x0cag{V"
    str_2 = '1\nIcZ-"v^h'
    dict_0 = {str_0: bool_0, str_1: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    bytes_0 = b"\xa7F\x92:"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1016():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1017():
    str_0 = "+R}@X"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    int_0 = -1021
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    bytes_0 = b"-\x80&\xae\x9aE\x88n\x9b\x04"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    bytes_0 = b"C>\xa9\x06\xfd\x15\x17M`"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bytes_0 = b"\x8f\xd1\x02\xf1<\x92\x03\xa721\xe6\xb0\xa2<\xc2\xed\xb6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "FYF"
    bool_0 = False
    tuple_0 = (dict_0, str_0, bool_0, bool_0)
    tuple_1 = (bytes_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    str_0 = "Pf$CP#B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    str_0 = "\x0c7re&w"
    str_1 = "Pg!>rCGhV8wp?"
    str_2 = "B^d"
    dict_0 = {str_0: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    str_0 = "53ml6Ee.ao"
    module_0.match(str_0, str_0)


def test_case_1025():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1026():
    bytes_0 = b"\xf1\xe4\xd0\x0e\xbd\xae\xb8t\xbd\x140n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    float_0 = -944.69211
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    bytes_0 = b"\xd4b\xe9\n\xceh\x9a\xd41\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    int_0 = 2005
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: list_0, bool_0: bool_0, bool_0: list_0}
    set_0 = set()
    tuple_0 = (bool_0, dict_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    str_0 = "z=}KQCclIF"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    complex_0 = -2584.715819 + 1287.987238j
    set_0 = {complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    int_0 = 1632
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    str_0 = ")G~\rFph,Bb3_IRI"
    str_1 = "]z(yeda'1F`X_%"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    bytes_0 = b"\x10\x84y\xae\nG\xf3#\xb0\x1b\x7f\xaa\x12\xd2\x1f\xd9\xce\x1b\x14\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    object_0 = module_1.object()
    float_0 = 526.0
    int_0 = 604
    int_1 = 66
    tuple_0 = (object_0, float_0, int_0, int_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    int_0 = 47
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    str_0 = "@hi)\\\x0bjZu\\|?"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    bytes_0 = b"E\xd1\x90\xa4\x13\xb3\xa77\xda"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    str_0 = "ye@~\n{6r9-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    int_0 = -613
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    bytes_0 = b"\x06\xd7\xebz\x9a`'D"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    bytes_0 = b"=\xba\xd68\x1a\x9b7\x9df"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    bool_0 = False
    bool_1 = False
    float_0 = -1450.37
    tuple_0 = (bool_1, bool_0, bool_1, float_0)
    list_0 = [float_0]
    tuple_1 = (bool_0, tuple_0, list_0)
    list_1 = [tuple_1]
    bool_2 = False
    module_0.get_new_command(list_1, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    int_0 = 1267
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    bytes_0 = b"}\xea\x06\x91J\rn\x13|\x17:\x06O\x9a\x10\x91Z\xf1\xd8\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    float_0 = -690.403286
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    int_0 = 2422
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    complex_0 = 4087 - 484.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    str_0 = "4&!zys\t|:iV\nw01R"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1059():
    int_0 = -2682
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    bool_0 = False
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    int_0 = -1788
    module_0.match(int_0, int_0)


def test_case_1062():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1063():
    complex_0 = -2181.7473 - 2713.3j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    str_0 = "Vy([^5~j/w@^G,D2"
    tuple_0 = ()
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    float_0 = 1171.24808
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    bytes_0 = b"Mq_)#\x96C\xe1S"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    complex_0 = 1423.96109 - 1560.29376j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    none_type_0 = None
    int_0 = 1921
    tuple_0 = (int_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    str_0 = "8oy,M=uk77dW@8}"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    float_0 = -943.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    int_0 = 1584
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    str_0 = "j$k>4"
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0)
    list_0 = [tuple_0, tuple_0, bool_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    str_0 = 'u>}cWg\nx\x0cA,"qA'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_1: bool_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    str_0 = ".~CA8y-SV2cj<;"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    bytes_0 = b"B\x12j\x03\x11i\xef#\x9b;\x00\xe7\xdb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    int_0 = -621
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    float_0 = -2809.61594
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    bytes_0 = b"q\xa8Jn3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    bool_0 = True
    str_0 = "\t.@!gOQ{ 1VH"
    tuple_0 = (str_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    int_0 = -248
    str_0 = ""
    tuple_0 = (int_0, int_0, str_0)
    str_1 = "g{D%BK_Q%3#}G]1)ZzQU"
    tuple_1 = (tuple_0, int_0, str_0, str_1)
    list_0 = []
    dict_0 = {tuple_1: tuple_0, str_0: str_1, str_0: list_0, tuple_1: str_1}
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    bytes_0 = b"t\xff\xa6\xf3&\xe3=\xba\x02Y\x03\xfbk7|K\xa5\xfco"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    int_0 = 1035
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    bytes_0 = b"Y'W\xa7\xb0?<\xd2JH\"\x8c*Bg\xc5\x11\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    str_0 = "fk$s=}vT6i'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    bytes_0 = b"\x06\xc7_\xabDhp$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    str_0 = "`#]Y n;qEB-TKB!'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    bytes_0 = b"\xc1 \x08\x9b=\x98$\xb7\xa7\xbd\xe1\xb8Tx\x0e\x80\x96\x13\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1093():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1094():
    complex_0 = 547.798 - 1450.348j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    str_0 = "Bag"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    int_0 = -15
    list_0 = [int_0]
    list_1 = [list_0, int_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    int_0 = 272
    str_0 = "a&.eH9)nr"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    int_0 = -397
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    int_0 = 2988
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    bytes_0 = b"\xb6"
    str_0 = "~3ckv+Q^kX/"
    str_1 = "D_W8l}\r"
    bool_0 = False
    tuple_0 = (bytes_0, str_0, str_1, bool_0)
    str_2 = ">`@>V5hXq#}ooV0V"
    module_0.get_new_command(tuple_0, str_2)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    int_0 = 3076
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    complex_0 = -3588 - 3817.52131j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    bytes_0 = b"\x1c\x8c"
    str_0 = 'Ok"[{$\\Ej@|g'
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    bytes_0 = b"\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    bytes_0 = b"\x9f\x9e\x9eQ\xc2\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    int_0 = -165
    bool_0 = True
    bool_1 = True
    int_1 = 1352
    bool_2 = False
    tuple_0 = (int_1, bool_2)
    tuple_1 = (int_0, bool_0, bool_1, tuple_0)
    dict_0 = {bool_0: bool_1, int_0: bool_0, int_0: tuple_1}
    tuple_2 = (int_0, tuple_1, dict_0, int_1)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    complex_0 = 106.834 + 59.578j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    int_0 = -1979
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    complex_0 = -1255.501 + 203.65j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    bool_0 = True
    int_0 = 555
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    float_0 = 3203.8243
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    int_0 = -524
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    str_0 = " #vsk21>\\L^P|3_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    bytes_0 = b"\x1er\x9f3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    complex_0 = 1108.4 + 871.459217j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    str_0 = " >"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    str_0 = "\nv=3N\x0cH0GFz"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    float_0 = -1025.3184
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    bytes_0 = b"\xd0|\xec\xcb\xbc\xbf\x0fo"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    float_0 = -3057.633553
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    int_0 = -20
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    none_type_0 = None
    bytes_0 = b"\xaa-\xfe\\\x8asf~*\x8e4\x94g\xbeVF\xdb-"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    int_0 = -2581
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    str_0 = "]Z`t;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    int_0 = -388
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    bytes_0 = b"\x06@\xe8\x92\x12S\xacW"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1139():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1140():
    int_0 = 2543
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    int_0 = -1916
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    int_0 = 1380
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    float_0 = -2455.278719
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    float_0 = 21.376
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    float_0 = -869.46426
    tuple_0 = (float_0,)
    tuple_1 = (tuple_0,)
    set_0 = {tuple_1}
    module_0.match(set_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    int_0 = 1707
    list_0 = [int_0]
    str_0 = 'A"\x0c'
    dict_0 = {str_0: list_0, str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    str_0 = "f\t@*xnn"
    set_0 = {str_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    bool_0 = False
    int_0 = 69
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    bytes_0 = b"\x078\xbbo\x01\xb3\x18\xd9\xee\xdf\x16\xa9\x8c "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    complex_0 = 2049.8733 - 3185.6j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    bytes_0 = b"\x93\xe6EOY\x02\x10X\x99B\\\x82\xee\x84\x19\xcd\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    str_0 = 'O(rZvIV%{h^cG"[4*TdY'
    str_1 = "P"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    bytes_0 = b"PE\x98T\xbdz\x07\xe6~\xa1"
    float_0 = -2701.947116
    float_1 = -228.0
    tuple_0 = (bytes_0, float_0, float_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    float_0 = 7000.0
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


def test_case_1156():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1157():
    float_0 = -2793.527574
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    bytes_0 = b"\xc9\xc3H\x0b\xd1n"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


def test_case_1159():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1160():
    float_0 = 376.0
    set_0 = {float_0}
    module_0.match(set_0, float_0)


def test_case_1161():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1162():
    bytes_0 = b"sB\xda4Qp\xef\x07"
    bool_0 = True
    list_0 = [bytes_0, bytes_0, bool_0, bytes_0]
    tuple_0 = (bytes_0, bytes_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    int_0 = -4357
    set_0 = {int_0}
    bytes_0 = b"\x85\xac\x9e\xf6\xfe7\r\xa4\xa7\xab>T"
    list_0 = [set_0, set_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    str_0 = "*!iZ Byz9.EOGX ^:10l"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


def test_case_1165():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1166():
    bytes_0 = b'\xe8\x0f\xb0\xa5\xfc\x0e\x89\x9afm\x84\x08V/^0"\xc9'
    module_0.match(bytes_0, bytes_0)


def test_case_1167():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1168():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    int_0 = 262
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


def test_case_1170():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1171():
    bytes_0 = b"[\x99\n\xb7\xf7-nV\xbdAz\x9e\xff5\x12\x95n\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    bytes_0 = b"e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1173():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1174():
    complex_0 = 2962.4 - 965.165795j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    int_0 = 4923
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    int_0 = -1111
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    int_0 = 1343
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    str_0 = "vkp%.N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    str_0 = "N;o0\t&\x0b|0\\wz>J~ b"
    set_0 = {str_0, str_0, str_0, str_0}
    str_1 = "?=>e"
    module_0.match(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    complex_0 = -904 + 724j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    int_0 = 1326
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    bytes_0 = b")\x0c\x11u\xb3\xd4"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    str_0 = "\t\nN-("
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    complex_0 = 2024.114 - 488.85j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    bytes_0 = b"\xf7\xbe\x02\xffCl\x12],\x9c\xae52\x12\r0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    float_0 = -1590.0
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, float_0)


def test_case_1188():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1189():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    str_0 = "[&@I2+5~hW"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    none_type_0 = None
    complex_0 = -3681.065 - 214j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    bool_0 = False
    list_0 = [bool_0]
    bytes_0 = b"+\x90\x07\xb8\xb2\x81\xbb\x10#\xe49\xaa?|"
    tuple_0 = (list_0, list_0, bytes_0)
    list_1 = [tuple_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bytes_0 = b"\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    float_0 = -1148.13962
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    int_0 = -2264
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    int_0 = 651
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    float_0 = 3083.63196
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    bytes_0 = b"\xf3\xf6\xc7x\xa71ly"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    int_0 = -1682
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    bytes_0 = b"\xbev\xfeG.<\x84\x06c\x9bN\x8f\x89n\xdf\xc5\xa2\x19\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    bytes_0 = b"(\xfb\x1bt\xa3\xb5\xfe\x1b\x8b\x0f#\x96\xd7\x81\x05\xa2\x02\xf5o$"
    list_0 = [bytes_0, bytes_0, bytes_0]
    set_0 = set()
    bool_0 = False
    tuple_0 = (set_0, bool_0, set_0)
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    bytes_0 = b'\x98\x03\xb4;\xdf\x1e\xe5\xf0\xdc\xe3\x81=";\xd5i\xe7t\xaaw'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    bytes_0 = b"70M\xd2p\x13\x84\xf77,,`"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_1207():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1208():
    bytes_0 = b"\x94\xbep\xae\x9ba\xc6\xd7\xec"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    int_0 = -859
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    complex_0 = -1564.8901 + 522.79j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    complex_0 = -911.429463 - 2747.32j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    dict_0 = {object_0: list_0}
    int_0 = 363
    list_1 = [dict_0, int_0, int_0]
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    int_0 = -803
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    int_0 = -1744
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    complex_0 = -324.4 - 1746.560848j
    dict_0 = {}
    bool_0 = False
    tuple_0 = (complex_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, complex_0)


def test_case_1218():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1219():
    bool_0 = False
    int_0 = -4103
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    float_0 = 495.68
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    bytes_0 = b"\n\xb4s\x0bM\x114s^;\xd1\x12\x19\xd96N\xe9\xfe>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    bool_0 = False
    bytes_0 = b"\x06\xe9W)\x84[\x12~\r\xdfY\xc4\xd7|\x88wN3\xf5"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    int_0 = -264
    tuple_0 = (int_0, int_0)
    set_0 = set()
    tuple_1 = (int_0, tuple_0, set_0, set_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    complex_0 = 1942.42 + 4044.04j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    bytes_0 = b"\xaa\xd8\xae1\xd1\x11!\xaa\xaf\xbd\xe3\xf7'\xd6\xab,so$I"
    float_0 = -504.682644
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    bytes_0 = b"O\x06*\xa5sb#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, bool_0, bool_0]
    str_0 = ""
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bytes_0 = b"\xc3:\xce\x88\x0c\xc1z\x98\x9d\x14\xf3\xda]/m\xa6\xea\xd6\xf2`"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    str_0 = "^O.0tF(W~rPfPPEddj"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    str_0 = "~5"
    int_0 = 2
    object_0 = module_1.object()
    tuple_0 = (str_0, int_0, object_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    str_0 = "\ncFa.v{z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    float_0 = -695.013
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    int_0 = 1888
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    int_0 = -886
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    float_0 = 274.12
    module_0.match(float_0, float_0)


def test_case_1242():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1243():
    complex_0 = -1885.63248 + 773j
    tuple_0 = ()
    module_0.match(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    bytes_0 = b"lw\x8b\xec\x9fx'\xfd:"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bytes_0 = b"A"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    int_0 = 1692
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    int_0 = -4731
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    int_0 = 420
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    float_0 = -3031.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    int_0 = -5502
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    str_0 = ")LQWZ"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    complex_0 = 1531.834261 + 1635.330819j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    bytes_0 = b"\xd0+'\xd4\xeb\xf1n\xaat"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    bool_0 = False
    bytes_0 = b"\x8f}\xda\x96\x05v\x08\x80\xf9DN\x08r"
    dict_0 = {bytes_0: bool_0, bytes_0: bool_0}
    tuple_0 = (bool_0, bytes_0, dict_0)
    list_0 = [dict_0]
    module_0.get_new_command(tuple_0, list_0)


def test_case_1257():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1258():
    none_type_0 = None
    str_0 = "bG|>w<tPgwu"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bytes_0 = b"V\xf3\xf0!i"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bytes_0 = b"\xacnM"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    str_0 = "|2DsXc["
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    str_0 = "R~bm_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    none_type_0 = None
    str_0 = "Bk{"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    int_0 = -521
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    str_0 = 'ax`h^Rt8\rI\x0be"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    int_0 = -1915
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    bytes_0 = b"\xfd\x14"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    str_0 = "GZ`]h"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    int_0 = -2211
    module_0.get_new_command(int_0, int_0)


def test_case_1274():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1275():
    bytes_0 = b"\x95\xee\x0c\xf0\xb5\x0fc\xe8\xf5\xa6\xce\xbcD\xda"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bytes_0 = b'\xae\xd22VO"\xcb\xaf6\xb4MC'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    bytes_0 = b"m\xff\na\xa5&6\xd4\xc3\xf8\r\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    bytes_0 = b"\xa6\xc6>W@\xd4Cn\xc9L\x94\xcc\xdaT"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    float_0 = 1552.96618
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    float_0 = -441.55022
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    str_0 = "`\nu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    bytes_0 = b"\x08\xdd\x9d\x02u\xd8\x80"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    str_0 = "1+.%w<z\x0cI%\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    bytes_0 = b"\xf6 \xe2\xc7\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, list_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    str_0 = "u/)pgwO%OQvpya)G(|"
    str_1 = ")~O+ pVl:#m>qVF)7vn\r"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    bytes_0 = b"zx5\x067I.\xc0\x8f\x89\xf8\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    str_0 = "2MNZ\x0bNz?2S"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    int_0 = -3111
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    bytes_0 = b"\xe8Z\xda\xf0\xf9]'FVU\x01"
    str_0 = "dS0{*9^N\n"
    list_0 = [bytes_0, str_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    float_0 = 2050.333
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    set_0 = set()
    int_0 = 1055
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    float_0 = -4928.326605
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    bytes_0 = b"\xbf\xdeYC-\xaf\x0c\xde\xd7W\x12@\xb8:8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    object_0 = module_1.object()
    bytes_0 = b"\xaa6\xcbo\xee\x0e\xb95\xea1\xb8\x1c\xd4\x90"
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    str_0 = '%]{"\x0cxA\r<m'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    float_0 = -1453.395812
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    int_0 = 2542
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    float_0 = -1736.47
    list_0 = [float_0, float_0, float_0, float_0]
    dict_0 = {float_0: float_0}
    tuple_0 = (float_0, list_0, float_0, dict_0)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    int_0 = -590
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    bytes_0 = b"w\x94\x87\xd9\x9cx'h\xec*\x90\x08\xf0\xc6\x07\xa4\x12?\x9e\xca"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    str_0 = "T1b1f|ZO;X|\x0b;4d8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    float_0 = -590.91
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    int_0 = 3340
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


def test_case_1311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1312():
    bytes_0 = b"\xee\x81\xda\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    float_0 = -1870.39
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    str_0 = "l\\vP'5`\"_k1cw5i^}e3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    str_0 = ""
    bytes_0 = b"Q\xd9B\xa4\xc6\x158\xddX5%Pw\xcb\x85"
    bool_0 = True
    set_0 = {str_0, bool_0, bool_0}
    tuple_0 = (bytes_0, set_0)
    tuple_1 = (str_0, bytes_0, tuple_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    int_0 = 1244
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


def test_case_1317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1318():
    complex_0 = 2899.73545 - 175j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    complex_0 = 1406.94519 - 1555.344j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    complex_0 = 1124.97 + 4200.103943j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    float_0 = -97.220223
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    str_0 = "Irhy:Pm.Nv"
    dict_0 = {str_0: str_0, str_0: str_0}
    str_1 = "/SA8vpbYsXU#Oo5|\x0bX5"
    module_0.match(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    float_0 = 1923.04564
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    str_0 = "Lm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    str_0 = "0%[fF#\x0b1{w2=Wlhe"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    str_0 = "n"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    str_0 = ""
    bool_0 = True
    tuple_0 = (str_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_1332():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1333():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    bytes_0 = b"\x8d\xefX"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    int_0 = -2431
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    int_0 = -900
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    tuple_0 = ()
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    str_0 = "_414"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_1345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1346():
    bytes_0 = b"\x92\xce\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    str_0 = "G6["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    bytes_0 = b"\xf1K\xaa\xa4+\xe9Wp\xb3\xdf\x1as\x83~\x0e#\xea]\xda\xd6"
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    bytes_0 = b"u\xd7\x91\xfa\xda\x0b\xcf\xac\x96Cc"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    int_0 = -1170
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = "dwW1==ef^\ny<"
    tuple_0 = (bool_0, bool_0, dict_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    str_0 = "=F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    str_0 = "#9]Vjq'IJg/B[OQg72i$"
    list_0 = [str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    int_0 = 704
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    float_0 = 2385.84
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bytes_0 = b"\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    str_0 = "\x0b\r'evz/pkh^DY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    bytes_0 = b"\xf2\x0b\xff\xb1\x03e\\\xc7H\x1d\xb9J\xf2"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    bytes_0 = b"\xb2)\x83N2t\xfc\x10\x9e\xea\x17\xe1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    int_0 = -349
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    int_0 = -1797
    module_0.match(int_0, int_0)


def test_case_1364():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1365():
    int_0 = -3065
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    int_0 = -1298
    bytes_0 = b"\xadaxM\xefo\xd6\xb3N\x96aM\x0e_"
    set_0 = {int_0, int_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    int_0 = -3825
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    int_0 = -370
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    int_0 = 1922
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    str_0 = "~K\t.W4fQ:2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    bytes_0 = b"\xb3\xc1,\xc4"
    float_0 = 2322.9085
    list_0 = [bytes_0, bytes_0, bytes_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    str_0 = "@.Qy#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    float_0 = -1496.06
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    bytes_0 = b"\xdc\x88\xe0\x0c\x04\xedV\xe2v\n\xec?\xdc\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    int_0 = -1745
    str_0 = "}NQ:z.`C\x0bq^"
    bytes_0 = b"\xad\xbe\xcaCNd}`c;"
    tuple_0 = (str_0, bytes_0)
    tuple_1 = (int_0, tuple_0)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    bytes_0 = b"\xad)\xa2\xf3XMj\x8e\xee\\#\xfc"
    module_0.match(bytes_0, bytes_0)


def test_case_1381():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1382():
    list_0 = []
    bool_0 = False
    list_1 = [list_0, list_0, bool_0]
    module_0.match(list_1, list_0)


def test_case_1383():
    pass


def test_case_1384():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1385():
    str_0 = "abR7ImGx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    str_0 = "L3^oCgT&-x\\x"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    int_0 = -1314
    module_0.match(int_0, int_0)


def test_case_1388():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1389():
    bytes_0 = b"\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    int_0 = -525
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    float_0 = 1571.9913
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    float_0 = -6695.93118
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    float_0 = -1527.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    complex_0 = -1120.42 - 3646.645j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    int_0 = -2436
    set_0 = {int_0, int_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    str_0 = 'qnx"J2&o\nLaVQ'
    module_0.match(str_0, str_0)


def test_case_1401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1402():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    float_0 = -320.93
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    float_0 = 501.965
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    float_0 = -955.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    int_0 = 1100
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    int_0 = -834
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    str_0 = "2cPzbFrS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    str_0 = "1I}6,\r,P'ugR#r$|"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    str_0 = "NgwuM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    bytes_0 = b"\xec\x9c\xd1\x8e\x8e\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    complex_0 = -2437.3389 - 3705j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    bytes_0 = b"s*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    int_0 = 3107
    list_0 = [int_0]
    list_1 = [list_0, int_0, int_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    int_0 = -2867
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    bytes_0 = b"\xef\xcc|t\x83\xd9\x0c:\x81 8\x9aE\xa1\x82Q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    int_0 = 1566
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    bytes_0 = b"\xe7\x1cV&D\xda\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    str_0 = "r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    bytes_0 = b"i\xcb\xaeH\rX\xd4\xccA\x9b\x98\x16\xddZom\x88\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    int_0 = 131
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    str_0 = "4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    set_0 = set()
    int_0 = 1658
    bool_0 = True
    float_0 = -3296.7313
    tuple_0 = (int_0, bool_0, int_0, float_0)
    tuple_1 = (set_0, tuple_0, int_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    str_0 = ':m0Y6:m]\rzp"}^'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    float_0 = 2382.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    int_0 = -1092
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    bytes_0 = b"\x1f\xe1[C\x0b\xd6\xdb|\t/.\xe6\x1b'\xccH\xfd\x1d\xb6"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    none_type_0 = None
    bytes_0 = b"\x9f\x06\xc8<\xe0\x91t\x01\xa8\xa9\x96\x87<q|\x93"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    str_0 = "mjz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    bytes_0 = b"\xad"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    bytes_0 = b"\xf3)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    int_0 = -1968
    str_0 = "A>(wCK:"
    set_0 = set()
    tuple_0 = (int_0, str_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    int_0 = 93
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    int_0 = 748
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    int_0 = -2177
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    bytes_0 = b"^o\x87M\xdbO,\xf5156\xa3\xe2P0\xd4\xaf\xf4\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    complex_0 = 537.135144 - 2460.31466j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    str_0 = 'Zj6G!m"5<Euy'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    set_0 = set()
    bool_0 = True
    list_0 = [bool_0, set_0, bool_0, set_0]
    tuple_0 = (set_0, bool_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    str_0 = "Pl{'z\nA4dW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    str_0 = "@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    int_0 = -133
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    int_0 = -2318
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    int_0 = -1026
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    int_0 = -3483
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    str_0 = 'xP",~MN,G'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    int_0 = -781
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    bytes_0 = b"\xb8\xda\x05\xec\xef\x83\xb5\x89\xd2\xf1\xa6\x0c\x18\x9fr\xa3\x06\xbdBR"
    int_0 = -240
    tuple_0 = (bytes_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    none_type_0 = None
    int_0 = -2371
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    str_0 = "dY\x0cG'"
    int_0 = 621
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    str_0 = "&OZ/!"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    float_0 = 521.33
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    int_0 = -5018
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    str_0 = "mqMh_J"
    none_type_0 = None
    str_1 = "7hZ'muqfMso ';~g#"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    bytes_0 = b"\xd3\x1a\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    int_0 = 1363
    module_0.get_new_command(int_0, int_0)


def test_case_1463():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1464():
    float_0 = -725.40896
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    float_0 = -3555.915817
    object_0 = module_1.object()
    module_0.get_new_command(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    int_0 = -2440
    bytes_0 = b"\x95\xfc\x130:\xdev\xc1\xac2F\x04\xb8\x97\x13)"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    str_0 = "];'JqA\"86s \tof]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    none_type_0 = None
    int_0 = -2083
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    float_0 = 1299.1976
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    str_0 = "4UETv]|iC(T5wm"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    bytes_0 = b"7\xcc\xfb\x8cA\x15\xb3\xae\xdbR\xb7\xc3\x91"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    str_0 = "]p0e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    str_0 = "0?oz_rF|FH,KX"
    str_1 = "L]}PHX1jB-M\x0b"
    dict_0 = {str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    str_0 = "#@QHgCxQe1Z#xx)ptI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    str_0 = "plrLTDi[1<X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    float_0 = -396.312
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    complex_0 = -1802 - 944.08805j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1482():
    str_0 = "4)u|>? EG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    bytes_0 = b"\xd9\x01\xf8["
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    list_0 = []
    str_0 = "CC<QXXMZpa9'=h"
    str_1 = "&e5p4:nD#u^0]r>6Z>)s"
    str_2 = "x\r/d%R9#q<>4E"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: list_0, str_2: str_2}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    str_0 = "5s\\\r"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    bytes_0 = b"\x1b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    str_0 = "P&\t_`4T^7kP\\~>k/~H"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


def test_case_1489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1490():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_1493():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bool_0 = True
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    int_0 = 599
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    bytes_0 = b"d\x16\xae\x9b&\xd4\x10-oR\xadj\xd3\xa9\xc1\xa1\x81k\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    int_0 = -2250
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    int_0 = -96
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    bytes_0 = b"c\x94\xc2(\xe8\x7f}\x15\x8ei\xa30\x9aC\xbb1\x9eAl\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\xbc\xedw"
    tuple_0 = (set_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    float_0 = -1461.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    float_0 = -1008.9231
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    tuple_1 = ()
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    float_0 = 2736.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    bytes_0 = b"\xcfZ`\x11\xc3gGX\xdc\x8cT"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    bytes_0 = b"fW*\xd4\x98\xc0\x93\x06\xc9q\xef@\xb1o\xc8\xb3\x01\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    dict_0 = {}
    str_0 = "Cy6\tTK@sZ>m05D;1FhlT"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    str_0 = "V>BE^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    bytes_0 = b";\xe9YQ\xb4\xc6\x86\xaa\xd8$\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    str_0 = "f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    complex_0 = 3559 - 56j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    int_0 = 430
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    str_0 = ",w1rH@LEIS"
    int_0 = -273
    dict_0 = {str_0: int_0, str_0: int_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    bytes_0 = b"#\xecT\xd4\t\xff\xd4f\xd6F\x10"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    int_0 = -1197
    bool_0 = True
    set_0 = {int_0, int_0, bool_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    int_0 = -535
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    float_0 = -3242.9
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


def test_case_1524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1525():
    str_0 = ".~n\x0c2)uJ{FT9-xk_}W"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    bytes_0 = b".\xb4[\xfa\xd35!\xd8_m9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    int_0 = 1407
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    str_0 = "*?p-mu-\x0bQk.;rF~9.D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    str_0 = "|m\nIrm19Y$"
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    float_0 = -982.478055
    list_0 = [float_0, float_0, float_0, float_0]
    str_0 = "@$`V$\tQ:"
    str_1 = "Y)p"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    list_0 = []
    str_0 = "r!$]\r"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bool_0 = True
    int_0 = -412
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    str_0 = "V,(0%<)2j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    complex_0 = -2809.918649 - 922.308919j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    bytes_0 = b"\x12\x14:\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1538():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1539():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    float_0 = 3272.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    str_0 = "d{JXgy*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    int_0 = -1080
    module_0.get_new_command(int_0, int_0)


def test_case_1544():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1545():
    bytes_0 = b"\xbd"
    str_0 = "@sEXe\x0c@CJPW\x0c"
    bytes_1 = b"\x83\xe2?"
    tuple_0 = (bytes_1,)
    tuple_1 = (bytes_0, str_0, bytes_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    int_0 = 1239
    int_1 = -2353
    list_0 = [int_0, int_1, int_1, int_1]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    int_0 = -163
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    bytes_0 = b"("
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    int_0 = -644
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    int_0 = 896
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    int_0 = -6832
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    bool_0 = True
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    bytes_0 = b"\x91\xbdFx\x1b\x9e5\x12O$\\\xb2\x1f\xec\xf7i(\xe8\xee}"
    module_0.match(bytes_0, bytes_0)


def test_case_1554():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1555():
    float_0 = 3120.76
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    str_0 = "CWs|K|<?r^x6*La"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    bytes_0 = b"\x1e\x9e\xdd\xb8\xf7Y"
    module_0.match(bytes_0, bytes_0)


def test_case_1558():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1559():
    str_0 = "q]Ed9.$McR>HW&x7U+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    bool_0 = False
    float_0 = -856.7403
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    complex_0 = 948.31438 + 1106.935j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    int_0 = 229
    object_0 = module_1.object()
    module_0.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    object_0 = module_1.object()
    set_0 = {object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    int_0 = 2481
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0, tuple_0, int_0, int_0]
    tuple_1 = (tuple_0, list_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    int_0 = -1491
    float_0 = -4616.18897
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    bytes_0 = b"\x0e;\xc1\xeb\x82\xaa!d\xb9\xd4\x1f\xe8"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bytes_0 = b"\x03\xc7\xe0\xa1>w\xd6\x18\x08X\xec\x98\xc8M\xec\x04\xd1|\xf0;"
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    bytes_0 = b"\xdc-\x15\x00\xe1\xc4\xd2\x13\x8a\xe1\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    str_0 = "M&-{2xV<`m'*e@_\\5"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    float_0 = -1283.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    str_0 = "-Jd^i'e1"
    str_1 = "teMBY`2-$M%zc\t>NM}U3"
    list_0 = [str_1]
    str_2 = "`F1JVva|0@BXQ ;Hm>\\Y"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: list_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    str_0 = "+8S"
    module_0.match(str_0, str_0)


def test_case_1573():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1574():
    bytes_0 = b"\xe3\xdb\x19\xfd\xcaz*\x10\xc6\x04a\x03\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    complex_0 = -2629.4523 + 1122.218j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    int_0 = -371
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    bytes_0 = b"\x9fx\x8f\xef\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    int_0 = 4475
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    str_0 = "Si,qoeeh>A{9W&cp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    bool_0 = True
    tuple_0 = (list_0, object_0, bool_0)
    tuple_1 = (list_0, tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    int_0 = 491
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    int_0 = -1464
    bool_0 = True
    module_0.match(int_0, bool_0)


def test_case_1586():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1587():
    bytes_0 = b"T\xca\xec0\x03\x9d|\xa1\xe5f\x8f4"
    float_0 = 3220.41
    list_0 = [bytes_0, float_0, float_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    bytes_0 = b"\xb2\x15\xb3\xe7\xc1\xe7Lm\xff5a\n\xfa`\x1a|H\x81\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    float_0 = -495.343
    complex_0 = 759.585525 + 2434.7517j
    bool_0 = False
    dict_0 = {float_0: complex_0, bool_0: complex_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    str_0 = '^`V _cy".!-\r.=w%Gza'
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    str_1 = "@qWp2c"
    str_2 = "0G1I[^omq,ckp"
    str_3 = "TG69LpMS:&,h"
    dict_0 = {str_1: str_1, str_2: str_1, str_3: tuple_0, str_0: tuple_0}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    bytes_0 = b"\x8a\x0f\x95\xec\xa2\xbc\xa3\x070"
    str_0 = "H\x0cJ$tu"
    set_0 = set()
    tuple_0 = (bytes_0, bytes_0, str_0, set_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    int_0 = 684
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    str_0 = "\tXC"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    bytes_0 = b":\xc7\xc2W\xf8T\x04jw{K\x87-\x15yj\x86\x83\xb3\xb8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1597():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1598():
    str_0 = "/N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    int_0 = 948
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    float_0 = -1119.2
    str_0 = "[X\x0cv9>eD:"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    str_0 = ";%HViEf)@vI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    bytes_0 = b"\xbb\xa5\\^"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    bytes_0 = b"\xce\x9cE~\xc8\x07!\xb0\xcf\xcc\x07\xf3\xeaXO\xc8\xcd\xc6\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    float_0 = -937.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_1607():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1608():
    bytes_0 = b"\x03Za\x1c\x9fZGu\xf7g\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    bytes_0 = b"\x94/@\x9a"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    int_0 = 152
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    complex_0 = 881.2781 + 1065.17101j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    int_0 = -4894
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    complex_0 = 399.193757 + 659j
    set_0 = {complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    int_0 = 12
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    float_0 = -346.6296
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    bytes_0 = b"\x95\xd4\xa9_?\xad$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    int_0 = 2317
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    int_0 = -595
    int_1 = 495
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    complex_0 = -1673.79689 + 1648.33j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    bytes_0 = b"\xc3\xcc\xd4\xf0\x9b\x9c\xf6\xa2q\xc1\xc76!R\x82\xcf"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, bytes_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    bytes_0 = b"\xc9\xb5\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    int_0 = 2027
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    str_0 = "D;920J`0"
    set_0 = set()
    tuple_0 = (str_0, set_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    bool_0 = False
    float_0 = -274.0
    dict_0 = {bool_0: bool_0, bool_0: float_0, float_0: float_0, float_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    complex_0 = -1739 + 1398.559006j
    module_1.object(**complex_0)


def test_case_1629():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1630():
    int_0 = 2486
    float_0 = -691.8167
    dict_0 = {int_0: int_0, float_0: float_0}
    dict_1 = {}
    tuple_0 = (dict_0, dict_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_1631():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1632():
    bytes_0 = b'\xf2\x86\xe4\x1e^\x18\x05\xa4"6\xae\xbf'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    complex_0 = 920.70643 - 2744.1j
    module_0.match(complex_0, complex_0)


def test_case_1634():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1635():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bytes_0 = b"\xf9\xbd\xb2s\x85\xfe\x03\x0622\x11\x01WGU\r\xd4ga"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    float_0 = -4353.25
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    int_0 = -1241
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    dict_0 = {}
    bool_0 = False
    module_0.match(dict_0, bool_0)


def test_case_1643():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1644():
    float_0 = -4248.276369
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    str_0 = "\nWWCUoG{bf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    float_0 = 2157.864
    str_0 = "/yg_3>"
    dict_0 = {float_0: float_0, float_0: str_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    float_0 = -495.43696
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b'"R\x86\xf6\x97@'
    tuple_1 = (tuple_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    str_0 = 'stM"p>!KNJ+'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    list_0 = []
    float_0 = 917.5
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    str_0 = "uu"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    int_0 = -6475
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    bytes_0 = b"\xa9\xdd(B\xd2\x82\x9a\x07B"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1655():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1656():
    none_type_0 = None
    float_0 = 720.225173
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    float_0 = 755.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    int_0 = 2638
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    str_0 = "d"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    float_0 = -333.46118
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    str_0 = "3z!8D80<\\\x0cKGet#W5\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    str_0 = '!YgsLBB\rls|2{i\r("c'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    float_0 = -9.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    bytes_0 = b"\x0c4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    float_0 = 2590.978399
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    complex_0 = -1410.120085 + 2784.4263j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    float_0 = -662.06
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    complex_0 = -271.1831 - 5320.860775j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    complex_0 = 2772.88541 - 1254j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    int_0 = 634
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    bytes_0 = b"7\xb2\xb0\x12\ni]\xad+\x05N}\xaea\xa7\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    bytes_0 = b"\xa3\xb9\xa9Q\xd1\x98|\x97\xfe`G\x8b\x03\xaf\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    bool_0 = True
    list_0 = []
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    dict_0 = {}
    bytes_0 = b"\x1ayT\xf3\x8b\xcc\xe9\xfbT\xa2E\xcd"
    int_0 = -1699
    list_0 = []
    tuple_0 = (bytes_0, int_0, list_0)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1683():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1684():
    bytes_0 = b"\xa9\xe0(\xaaH\xa3\xd45 \xe0.4\xad\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    complex_0 = -955.592673 - 2321.76645j
    complex_1 = 1332.57 - 4890.15j
    module_0.get_new_command(complex_0, complex_1)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    float_0 = -1220.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    bytes_0 = b"\xeb"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    bytes_0 = b"\xb3F\x1e7\xd3\xef`+5U\x08%%)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    dict_1 = {object_0: object_0}
    module_0.match(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    bytes_0 = b"\xa7\x93\x05\xd5\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    int_0 = 1249
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    complex_0 = 6570.1521 - 2292.175j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    bytes_0 = b"\x88=\xab|\xd8I|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    bytes_0 = b"\x1e\\\x90\xeb6\x12d*\x07\ra\xa2y"
    bytes_1 = b"\x85\x87b\xf6P\xafjV/2"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    str_0 = "Txg^1Go?r\rxss+_tbf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    int_0 = -1844
    tuple_0 = (int_0,)
    bytes_0 = b"yB\xa5\x1f\x10\x18W"
    tuple_1 = (tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    str_0 = 'NlRt>~%"r\rb9i\x0b^Fj'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    str_0 = "SEJpu\x0bK+"
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1, tuple_0, str_0, tuple_1]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    int_0 = 634
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    str_0 = "fRfY LRxb`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    int_0 = 3028
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    int_0 = 462
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    str_0 = ".S.@INuxCF:8<"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    int_0 = 563
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    tuple_1 = (int_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    int_0 = 219
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    float_0 = -178.850762
    module_0.get_new_command(float_0, float_0)


def test_case_1712():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1713():
    bytes_0 = b"\xc3h \xf1\xb9\xe1\xd7r\x83\x84Q\xc1"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    bytes_0 = b"\xaeFo\x07\xdd\x8d"
    module_0.match(bytes_0, bytes_0)


def test_case_1715():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1716():
    none_type_0 = None
    int_0 = -908
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bytes_0 = b"H\x9b\xf8\xb2\x0f\nA1\x9eJ\x1a\xd6\x10\xc7\x11\xa5\x97W\xd0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    str_0 = "C[uVT1b1X)>e]M0r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    complex_0 = -53.963393 + 2164.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = []
    tuple_0 = (dict_0, bool_0, list_0, bool_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    str_0 = "m%\x0bw5GODs>+;VZ@Fn^Hh"
    module_0.get_new_command(str_0, str_0)


def test_case_1723():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1724():
    bytes_0 = b"P)R\xbf\xbe\x82\xff2I\xf9\xdbA696O\xa6\x9a\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1725():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1726():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    float_0 = 232.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    int_0 = -1422
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bytes_0 = b"\x1d\xb4\xf0\xb9!8B\x0e\xdf\xfb\xea?"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


def test_case_1734():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1735():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    int_0 = 2404
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bool_0, int_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    bytes_0 = b"\x01a\xb7\x17\xba\xb6\xef\x1d\xac\r\xf6\xee\x8c\xbck"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    complex_0 = 834.362 + 2153.63j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    bytes_0 = b"\xc9"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0, list_0, bytes_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    str_0 = "L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    complex_0 = 1562.3491 - 1294.29j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    bytes_0 = b"yO\xbci\t\xd9\xbcVr\xe6\xe4K;\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    bytes_0 = b"33q\xf1E\x02\xeb\x08\xaa\x86\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    float_0 = -152.0
    list_0 = [set_0, tuple_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_1, bool_1)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    float_0 = -1428.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    int_0 = 607
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    bool_0 = True
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    complex_0 = -296.15409 + 488j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    str_0 = "3p-!c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    float_0 = 2475.336949
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    bool_0 = False
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    float_0 = -41.6552
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    str_0 = "}4zy%Ju3U<Tdy90y?`t"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    bytes_0 = b"?^W\xa1]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    int_0 = 3994
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    str_0 = "h {c[;m"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    float_0 = -965.12316
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    float_0 = -908.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    complex_0 = 2953.196175 + 4889.4755j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    int_0 = 2018
    bytes_0 = b"V\xe2\xd6\xcd\xdb\xb6\xf2\xcc\xf1k\xfad\xce\xcfs\xe7f"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    complex_0 = -2217 + 97.921j
    str_0 = "m\\<aJcox!$3"
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    int_0 = -349
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    bytes_0 = b'\x1b\xf1\xc5\x9a"&Y\xa5\xf7\xf9\x8e\xd5\x88'
    str_0 = "\x0b9jDBE\nzt@SY4*4G\n\x0c"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    str_0 = 's]V{e\\W8L\r|F*f"2'
    module_0.match(str_0, str_0)


def test_case_1771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1772():
    int_0 = 3070
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    float_0 = -1206.6766
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    float_0 = 1483.785
    list_0 = []
    str_0 = "[b#i"
    bool_0 = False
    tuple_0 = (list_0, str_0, bool_0)
    tuple_1 = (tuple_0, bool_0)
    module_0.match(float_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    float_0 = -241.60973
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    str_0 = "r:0pn8h*"
    str_1 = "^+F-qS'~b"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    complex_0 = -2553.14 + 2414.996j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    bool_0 = True
    int_0 = 3510
    module_0.get_new_command(bool_0, int_0)


def test_case_1779():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1780():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    str_0 = "r!ZVfe"
    none_type_0 = None
    str_1 = "qb"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    bool_0 = True
    bool_1 = False
    set_0 = set()
    tuple_0 = (bool_0, bool_1, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    int_0 = 196
    float_0 = 1022.56
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    bool_0 = False
    float_0 = 597.2526
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    set_0 = set()
    float_0 = 237.0
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    bool_0 = True
    str_0 = "e6"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    int_0 = -2024
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    bool_0 = False
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    int_0 = 2534
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    float_0 = 1397.6041
    tuple_0 = (float_0, float_0)
    dict_0 = {tuple_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    bool_0 = True
    int_0 = -832
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    str_0 = "\nV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    str_0 = "\x0bJD]Ey"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    int_0 = 1180
    module_0.match(int_0, int_0)


def test_case_1800():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


def test_case_1801():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1802():
    bool_0 = True
    str_0 = "o1YrZ!3h\r"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    int_0 = -1827
    set_0 = set()
    module_0.get_new_command(int_0, set_0)


def test_case_1805():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1806():
    none_type_0 = None
    complex_0 = -800.5791 - 1722.99867j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    bytes_0 = b"0f\xf6\x87\\\x8eo\x97Oi"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    str_0 = "\ne~cq%"
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    bytes_0 = b"3\xcd\x9f\xa7\xf5B\x02@"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    str_0 = "\r,hM`<DX'hH-t"
    str_1 = "qno=?\x0c[A"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    bool_0 = False
    float_0 = -2591.2
    tuple_0 = (bool_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1814():
    pass


def test_case_1815():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1816():
    bytes_0 = b"h\x19\xfc\xc06\xdd\xa6\t\xcc\x96\xbd\xc9\x7f\xef\xca\xb6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    float_0 = 2214.460579
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    int_0 = 2305
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    float_0 = -816.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    bytes_0 = b"\x81\x9aZ\xb5Y"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    int_0 = -1988
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    bool_0 = True
    float_0 = 2687.0
    tuple_0 = (bool_0, bool_0, float_0, bool_0)
    list_0 = [tuple_0, float_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    bytes_0 = b"k\x06\xbe\x04n\xb14i\xe7\xed\x97"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1824():
    pass


def test_case_1825():
    pass


def test_case_1826():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1827():
    int_0 = -1210
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    str_0 = "}41\x0c87B\x0ccz#,2UbR.."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    bool_0 = True
    bytes_0 = b"\xe51\x10\xcd\x01D\x04:\xf5\xdf\xd6\xd1\x84?;"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    str_0 = ".ZAiGJl!\\p'Q&@"
    str_1 = "\nY@7O"
    tuple_0 = (str_0, str_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    float_0 = -560.33815
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    int_0 = 225
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    int_0 = -244
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    float_0 = 454.7251
    set_0 = {float_0, float_0}
    list_0 = [set_0, float_0, set_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    bytes_0 = b"\xb7\x17\xce\xe8\xf2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    none_type_0 = None
    bytes_0 = b"\x8dSHK\xa7DU\x98\x1b0@\x90\xd2"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    tuple_0 = (list_1,)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    str_0 = "O]/udk4LK\rc#5\t'n*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    int_0 = -1917
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0, tuple_0)
    int_1 = -817
    module_0.get_new_command(tuple_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    float_0 = 1268.82
    list_0 = [float_0, float_0, float_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    bytes_0 = b"\x02}\xfe\xbc{s\xd3\xdaPp\x07"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    int_0 = -1701
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    int_0 = -400
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    complex_0 = 220.593 + 459.4j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    bytes_0 = b"\xe0\x08\xfb\x89\xce\x03\x12\x86\xbf\xfc\xa2\x811\x05"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    int_0 = 4053
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    float_0 = 2215.56224
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_1851():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1852():
    str_0 = "1g)P1luOmoU/{6x5v3"
    module_0.match(str_0, str_0)


def test_case_1853():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1854():
    bool_0 = False
    str_0 = "?E-7<\x0by"
    bytes_0 = b"Q\xbf\x10\x87k\x1d7"
    int_0 = 898
    tuple_0 = (str_0, bytes_0, int_0)
    str_1 = "Z5e`\t32Y{|s"
    tuple_1 = (bool_0, tuple_0, str_0, str_1)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    str_0 = "]HeNOM=uT=;"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    complex_0 = -1489.26244 + 1316j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    bytes_0 = b"6o/y\xeb\xa9\t\xcb \xcc\xe0\xae\xd1\xf7.\x1b\xc0\xa7;\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    int_0 = 616
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    bytes_0 = b"Y\xbf$\x86D\xbc"
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    tuple_1 = (bytes_0, tuple_0, set_0)
    list_0 = [tuple_1, bytes_0, set_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    bytes_0 = b"\x91\xb2P\xf6\x1f^A\x86\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    tuple_0 = ()
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    str_0 = "PflL25(MYC\t#]F"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    complex_0 = 4555.447 - 1254.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    str_0 = "J1"
    bool_0 = False
    float_0 = 3201.051319
    tuple_0 = (str_0, bool_0, float_0, str_0)
    module_0.match(tuple_0, tuple_0)


def test_case_1866():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1867():
    str_0 = '/"W'
    bool_0 = False
    str_1 = "R"
    list_0 = []
    tuple_0 = (str_0, bool_0, str_1, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bytes_0 = b"+\x0e\x94\xdf\x9cM\xf1\xad\xad9\xfb\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    int_0 = 957
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    float_0 = -2154.18555
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    int_0 = -1707
    str_0 = ""
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    complex_0 = 4525 + 367.699j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    int_0 = 896
    tuple_0 = (int_0, int_0)
    complex_0 = 3395.2 - 2658j
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    int_0 = 701
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    int_0 = 3231
    bytes_0 = b'"\xda\xd6\xf9\x12\x9c\x16\xc5\xfb,'
    tuple_0 = (int_0, bytes_0)
    str_0 = ">f"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    float_0 = 1608.558341
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


def test_case_1884():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1885():
    str_0 = "1gU.C`^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    int_0 = -984
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    str_0 = "]:HGt<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    float_0 = -1249.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


def test_case_1889():
    pass


def test_case_1890():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1891():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (bool_0, bool_0, set_0, set_0)
    list_0 = [tuple_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    float_0 = -3390.59824
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    int_0 = 560
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = False
    tuple_0 = (dict_0, int_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    int_0 = -370
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    bytes_0 = b";\xa8o|\xa2\xe2h\xf5\r"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    bytes_0 = b"\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0, bool_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    float_0 = 487.638
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    float_0 = 288.838326
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    int_0 = 79
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    int_0 = -1678
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    int_0 = -838
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    float_0 = 2177.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    float_0 = 150.723249
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    bytes_0 = b"\xbbS0\xc0\xcc\xf8\xd0"
    tuple_0 = (bytes_0,)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    int_0 = 2907
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    int_0 = 283
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    complex_0 = -205.20933 + 3639.828j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    str_0 = "Xw6OJ9A)"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    bytes_0 = b"\x943\x12\xba\xfb-r\xf2l`\r\x82\x8c\xe9;^\x11\xea&4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    str_0 = "~K4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    complex_0 = 749.68139 - 1233.3248j
    float_0 = -983.95546
    module_0.match(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    int_0 = 1980
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    str_0 = "U}-Q&=x\x0c':lr\t#Dof%;"
    module_0.get_new_command(str_0, str_0)


def test_case_1916():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1917():
    bytes_0 = b"w\x90"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    bytes_0 = b"\xb0\xecI\xc9\xee\xf34\xfd ?\xec\xf3\x08\xbfV\x92\xd2\x11"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    bytes_0 = b"\x9b\x9d\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    float_0 = -1553.8
    tuple_0 = ()
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    float_0 = -2646.3562
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    complex_0 = -3287.5 + 642j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    bytes_0 = b"cp\x1b"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    bytes_0 = b"K^\xb6\xa57\xabx\x91f#h\xefT\xcf\xb1\x0c\xc6\x93C"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    str_0 = "Z)DfCfJh72=j.I1oL."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    str_0 = ",pfQG6(XPqbXU1Rl77Hg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    str_0 = '"L'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    float_0 = -532.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    complex_0 = 3260 + 1228.2j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1931():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1932():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_0}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    int_0 = 2352
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    str_0 = "v~25h@W|Y(^|\rh"
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    int_0 = 1923
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    int_0 = 1703
    tuple_0 = ()
    dict_0 = {int_0: int_0, int_0: tuple_0, tuple_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    float_0 = 737.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    str_0 = "x{)i+,m}\x0c`25E\n@p{I\\%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    str_0 = ")R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    int_0 = -2724
    list_0 = [int_0, int_0, int_0]
    bytes_0 = b"\xdc"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    str_0 = "]BBkD"
    module_0.match(str_0, str_0)


def test_case_1945():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1946():
    int_0 = -2461
    module_0.match(int_0, int_0)


def test_case_1947():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1948():
    int_0 = -536
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: list_0, bool_0: list_0, bool_0: bool_0}
    list_1 = [bool_0, bool_0, dict_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    bytes_0 = b"\xfb\xd1Xi\xd0\xc1\xcc\xcf\xb9\x8c\rv"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    int_0 = 2882
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    int_0 = 2113
    int_1 = 712
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    str_0 = "][B L4V`]6dh=%&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, set_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_1956():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1957():
    bytes_0 = b"\x8c\xc4\x15\xf3!\xf2A\x1ck"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


def test_case_1958():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1959():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_1960():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1961():
    int_0 = -2316
    int_1 = 4271
    str_0 = "c\x0ci(#%r'"
    tuple_0 = (int_0, int_1, str_0)
    module_0.match(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    complex_0 = 2196.5219 - 4260.01j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1963():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1964():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "1p~P~~\rO"
    dict_0 = {str_0: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    int_0 = 4544
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    float_0 = 2426.16
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    bytes_0 = b'*9\xe4\xa1\xec!S"C4\xf4'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    str_0 = "i5/!TN\r,`JoF?/as6"
    module_0.match(str_0, str_0)


def test_case_1971():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1972():
    str_0 = "o\n$Dy_xO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    float_0 = 692.8702
    int_0 = 974
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    bytes_0 = b"\xa7e\x16\xae\x0fv\xe4\x06\x18\xce4\xc0\xbf\x8f\x9c;u"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    str_0 = "}=<6ks6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    int_0 = -1025
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    dict_0 = {}
    list_0 = [dict_0]
    tuple_0 = (list_0, dict_0)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (tuple_0, list_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    float_0 = -806.39378
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    int_0 = -389
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    bytes_0 = b"X[\xbc@\xf8n\xc72\xef\x8a\x90\x10\xc4\xd2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    int_0 = -1374
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    bytes_0 = b">\xd1\xe6\xb14"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1986():
    object_0 = module_1.object()


def test_case_1987():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1988():
    int_0 = 4
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    int_0 = -1751
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    str_0 = 'GyO"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    bytes_0 = b"\xcdk\xa0\xe1\xa1\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    float_0 = 385.884
    module_0.get_new_command(float_0, float_0)


def test_case_1995():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1996():
    float_0 = 2129.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    str_0 = 'ze %vHQky9V$BST"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    bool_0 = False
    str_0 = 'b:LD-;s*}1m"'
    set_0 = {str_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, str_0, set_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    int_0 = 118
    tuple_0 = (int_0,)
    bytes_0 = b"g\x948\x17\xcb\xfc\xd3\xc9\xc4_\xb1L\xee\xb2'"
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    float_0 = -136.971526
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    bytes_0 = b"e34@3\xc3\xca\x9bG\xdd\xa2\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    bytes_0 = b'L\xd2\xf0V\x1fXsA\x9b9Z"\xd6\x15\xcd\xbf'
    bool_0 = True
    dict_0 = {bytes_0: bool_0, bytes_0: bytes_0, bytes_0: bool_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    str_0 = "xG'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    float_0 = -3621.00329
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    str_0 = '_"w[L[aBE]3&1rw{wYq'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    int_0 = -1009
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    int_0 = -1791
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    bytes_0 = b"u,\x9c\xb5\x9c\xa1F\x00Z\xe8\x8b\x89\xd0'd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    complex_0 = -2856.556 - 865.209305j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    bytes_0 = b"\xc7\xe9\x94\xaa}\x86]\xde\xcaY@ "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    bytes_0 = b"\xe8\xb3%\\\xf2\xe8\xf6\xde\xfc\xc3\xd2\xa8z\xf4\xdb\x8f\xdd\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    bytes_0 = b"\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    bytes_0 = b"]\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    int_0 = 1026
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    str_0 = "n$at_ %\t"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    bytes_0 = b"\x15\xf7\x80B~\xac{\x8e.\xa8\\\xe2\xbde\xd0z\xb3\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    str_0 = "n:1|"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    none_type_0 = None
    str_0 = "y0,kxn|YyjP O{S"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    str_0 = "AS\r3&0kuS1Bx0&3ZJQnX"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    int_0 = -2881
    int_1 = -3863
    tuple_0 = (int_0, int_1)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    int_0 = -1148
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    float_0 = -1769.34
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    float_0 = -2092.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    bytes_0 = b"Y\xbfs\x1bhw\x85\xd8\x03\xe2\xb5\x99\x80\xd7C\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    bytes_0 = b"\xa1\x18\x9b\x1ac\x9f\xdc\x19/\x87"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    tuple_0 = ()
    bool_0 = True
    dict_0 = {bool_0: tuple_0, bool_0: bool_0, tuple_0: tuple_0}
    bool_1 = True
    tuple_1 = (tuple_0, dict_0, bool_1, bool_1)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    str_0 = "ylF<:^n\\Ku'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    float_0 = 112.2541
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    str_0 = "ssb&C=S4\x0cr-vd~"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    float_0 = -1764.192
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    str_0 = "32Mxy/X|y-@"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    list_0 = [dict_0, object_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    int_0 = 1094
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    int_0 = 3823
    module_0.match(int_0, int_0)


def test_case_2041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2042():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    float_0 = 2057.787
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bytes_0 = b"\xe5\x16i\\k\n\x14_\x01\x85\xef\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    complex_0 = 543.4 + 2417.718645j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    int_0 = 2535
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    int_0 = 1135
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    float_0 = 1475.7
    float_1 = 254.7
    module_0.get_new_command(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    bool_0 = False
    tuple_0 = (bool_0,)
    str_0 = "X;zn&Jn&`/@+Ma~C:X"
    module_0.get_new_command(tuple_0, str_0)


def test_case_2051():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2052():
    bytes_0 = b'\x06\xeaC1{\xaeC\x8c\xa6\xb6\xd1\xfe"\xa8\x8bV\xc0s$'
    bytes_1 = b"t\r4V!sL\xe5\x16{\xe0\n\x082\xa1&"
    set_0 = set()
    tuple_0 = (set_0,)
    tuple_1 = (bytes_0, bytes_1, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    str_0 = "?}(TsM2uO$a"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_2054():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2055():
    str_0 = "Kz'9>be(:]SF@u"
    float_0 = -1712.77
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    float_0 = 4630.004684
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    str_0 = "Y-#!u4n/dHU*1?=-zIyy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    int_0 = 482
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    float_0 = 900.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bytes_0 = b"*R\xc9\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    str_0 = "MB$Y*|b9Jf{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    int_0 = 2973
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    bytes_0 = b"\xd4v\x10\xf3\xe8\x17\x08y[9z3\x97\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    bytes_0 = b"\xe9d3\x03\xde\xd8\xc6\x18\xd44w^\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    bytes_0 = b"\x11\x05r\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    bytes_0 = b"\xe2\xbb\xc5\x88\x81\x1a\xe2/\x8bs&\\\x8d&G\x88\xa9\x0b\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    int_0 = 3383
    tuple_0 = (int_0,)
    bool_0 = True
    bool_1 = False
    tuple_1 = (bool_0, bool_1, int_0, bool_0)
    list_0 = [tuple_0, int_0, tuple_1]
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    int_0 = -534
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    none_type_0 = None
    bytes_0 = b"\xc4^N\x08\xf1$g\\"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    str_0 = "%A\x0ba!*]-PG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    float_0 = 3600.0
    list_0 = []
    bool_0 = True
    tuple_0 = (float_0, list_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    int_0 = 1734
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    complex_0 = -1053.668678 + 3010.964348j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    str_0 = "nb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    str_0 = "\nZ05&<UGS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    complex_0 = -239.811845 - 2404.962j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    str_0 = "/v}p\rc#il4[~CGw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    str_0 = "3:ny`?}"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    int_0 = 1008
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    int_0 = 914
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    object_0 = module_1.object()
    list_0 = []
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    bytes_0 = b"\xed\xd9\xe2\xf4\xed\r\xc9w\xd3Y\xdc\xdej["
    dict_0 = {bytes_0: bytes_0}
    str_0 = "\tmL/L"
    bool_0 = False
    tuple_0 = (dict_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    str_0 = "f-&^w>j<d~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    str_0 = "MXi69Zl*[EF>`hDeGPF"
    set_0 = set()
    str_1 = "\t"
    dict_0 = {str_0: set_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    bytes_0 = b"m\xcbV\xd8R\xda\xd0\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    int_0 = -901
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    bytes_0 = b"\xdd\xb9\xd6\xfd\x97\x8f\xd3\xc4\xadh[\xe8\xb2\x0c0\xc3\x82"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    float_0 = -764.02
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    int_0 = 3449
    int_1 = 2341
    str_0 = "P@6t$1"
    tuple_0 = (int_0, int_1, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    bytes_0 = b"\xa9\x06\x81\t\xbbX\xed*\x1dR\xf7%\x8a\xb5\xec1X\t\xca\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    int_0 = 3146
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    set_0 = set()
    object_0 = module_1.object()
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    str_0 = "x:7py110.lci"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    float_0 = -1861.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    str_0 = "\\ASO,lT&uI"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    float_0 = 442.0
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    float_0 = -1707.40778
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    complex_0 = 2228.26347 + 304.71491j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    str_0 = "M^p"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    float_0 = 691.77
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    bytes_0 = b"\x17\x86\xa3\x0b\xa38\xe3#8\x16[h\xb5\xf7\xbbb\xb3\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    bytes_0 = b"\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    bytes_0 = b">\x89\xc7\x83\xac_KR_\xc2\xe3\xfd2\xda}\x01ql\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    int_0 = 2846
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    int_0 = -2983
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    int_0 = -4538
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    int_0 = 1536
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    int_0 = -3028
    module_0.match(int_0, int_0)


def test_case_2116():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2117():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    str_0 = "NoW bF'/,T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    float_0 = -262.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    int_0 = 3677
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    bool_0 = False
    str_0 = "nc)"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: str_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    str_0 = 'vx".LJg%"[J'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    bytes_0 = b"j\xa4\xd7\xf1I\x03\x83Y\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    dict_0 = {}
    list_0 = [dict_0]
    tuple_0 = (dict_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    str_0 = "YDp:;Ml(UqQ00^"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    int_0 = -4205
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2127():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2128():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    int_0 = -1559
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    bytes_0 = b"\x94\xc8K\xf6\x1f\xc8\xec\xe9\xf7\x17H\x1e\xce\xdec;i\xe3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    float_0 = 106.903426
    set_0 = {float_0, float_0, float_0}
    bytes_0 = b"n\xdcC\x8adm70\xa7\xa9\x8d>ov"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    float_0 = -854.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    str_0 = "4T\t}Tei=\x0cva"
    module_0.get_new_command(str_0, str_0)


def test_case_2135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2136():
    bytes_0 = b"\t\x9dvJS\xe0\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    bool_0 = True
    complex_0 = 2635.879315 - 664.44819j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    bytes_0 = b"\x85.\xd3E}%\x97"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2139():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2140():
    bytes_0 = b"Q_\xe0\x94\xf9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    str_0 = "\t=f/lFCJ!vQZbC1#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    bytes_0 = b"\x06\xa0\t/"
    int_0 = 757
    tuple_0 = (bytes_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    str_0 = '0jK~wx=5Jl"'
    list_0 = [str_0]
    tuple_0 = (str_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    bytes_0 = b"\xce\xc7\x80.:\x824\xd7\xc3\x90\xe9\x00\x90\x0e9C\x81\x16F\xd4"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    bytes_0 = b"+w\xe07.\xd7S+\xc7\xd1\x01R"
    int_0 = 6080
    list_0 = [int_0, int_0, int_0]
    list_1 = [int_0, list_0]
    tuple_0 = (bytes_0, int_0, list_1, list_0)
    list_2 = [tuple_0, list_1, int_0]
    module_0.get_new_command(list_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    bytes_0 = b"\xe9'@\xa9\x16\x06\xf8\xdet\xfa\x7f\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    int_0 = -2218
    none_type_0 = None
    module_1.object(*int_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    object_0 = module_1.object()
    bytes_0 = b"\x88\xdb\xdd\xdbg\xc7\x12\xeb\x15\xe6\x1aS"
    list_0 = [object_0, object_0, object_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    str_0 = "d,(a%z;W2N!2+Ub-*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    str_0 = "y:;Dy;5s)kJi|Re0=6e>"
    set_0 = {str_0}
    list_0 = [set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    bytes_0 = b"*\xf4l\xe3\xf7\xb9\x07\xe9\xd4\x99\xb9\x03\x01\x1d\x1ee1YF\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    bytes_0 = b"\xb6\xea\xeb\xa2\xe8\xe9%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    str_0 = "oVwnI`-.R{NKf/sN.ar-"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    str_0 = "9Sr\t>}@+R$K5<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    none_type_0 = None
    bytes_0 = b"\\;\xc3\xbd7#\x8aF\x98A+"
    module_0.match(none_type_0, bytes_0)


def test_case_2160():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2161():
    bytes_0 = b"uw`\xe9\xde\x04*\x82\xde *\x90\x93\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    complex_0 = -1731 - 2155j
    str_0 = "\x0c]u7Fz$G"
    list_0 = [complex_0, str_0, complex_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    none_type_0 = None
    bytes_0 = b"<\xad\x0f\xb6G\xe1\xee\x9f\xc2\x1c\xbe\xd7\xb11\xc7!\xb4i\xe7L"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    complex_0 = -1428.55715 + 3057.075j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    str_0 = 'q^u69Zl(WBe[{\\)$\n"21'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    str_0 = "p#npTy<C;?(i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    int_0 = 546
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    bytes_0 = b"S\xa2\xfb\x0f\xae\x9edP\xfc\xd4\xeb+j"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    str_0 = '*R>hst,{e"oj?'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    bytes_0 = b"\xd4&\xd6:Fg\xf3Z\x14\x88\xccg?/"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    int_0 = 1903
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    str_0 = '*<u>(LbX0w"B+\\'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    bytes_0 = b"\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    float_0 = 758.4919
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    bytes_0 = b"\xe7\xaa\xd2\x97\xd3/+\xa6\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2179():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2180():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    bytes_0 = b"i\xc1'\x11\xba\xce\xc65\x02\xf9\x03\xa6>"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    bytes_0 = b"R\x9f\x0eT8\x8c#\x19R\x07\x0ff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    float_0 = -298.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    str_0 = ">3#a$[GOk9q@r^\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    bytes_0 = b"h\x99"
    bool_0 = True
    bytes_1 = b"\xae\xc6\xc8f\xb7"
    tuple_0 = (bytes_0, bool_0, bytes_1)
    float_0 = -314.369
    list_0 = [tuple_0, bytes_1, float_0, float_0]
    str_0 = "J^hg{:7K"
    str_1 = "Swu&H ,'fd :u)u"
    dict_0 = {str_0: bool_0, str_0: float_0, str_0: bytes_1, str_1: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    float_0 = -600.015
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    bytes_0 = b"+\x1frO\xbb\x12SU$\x99\xfd\xb5H\xf7F\xbe\x85\xe5"
    bool_0 = True
    set_0 = {bytes_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    int_0 = 643
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    int_0 = 553
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    int_0 = -5771
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    bytes_0 = b"w<o\x0c\x19\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    str_0 = "_%ID;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    int_0 = -969
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    str_0 = "~}3TU2BJ?Fj]K "
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    bytes_0 = b"\x93\x1c\x94)\xa1`\x192E\x89\x17\x8b\x120\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    none_type_0 = None
    bytes_0 = b"\xa7P\xc9\x1a\xbbi"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    int_0 = 927
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    str_0 = "\rx>;\x0b<% p"
    list_0 = [str_0, str_0]
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


def test_case_2201():
    pass


def test_case_2202():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2203():
    list_0 = []
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    int_0 = 208
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    str_0 = "0Njnqik2wb"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    bytes_0 = b"\xf6\xc5\xff\x1b\x99/\xfe\xe0\xc3\xbd\x87\xf4\x978"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    bool_0 = False
    str_0 = "AVzM"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    float_0 = 1529.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    str_0 = "{DwO)\nG[N&^2x-4q&0>s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    int_0 = -524
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: bool_0, int_0: bool_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    int_0 = -490
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    bytes_0 = b"'\xd1\xa5\xc5\xcbp\x1e\xdaS\xf9\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    none_type_0 = None
    bytes_0 = b""
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    str_0 = "i^SLG/AExwV\\C1<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    bytes_0 = b"\xc2]d\x0b[\xcc\xb31\xd0\x06D\xdb\xd8\xbb\x95\x0b"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    float_0 = -116.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    int_0 = -2432
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    float_0 = -904.29674
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    bytes_0 = b"\x9f\x9e\x07eX\xc3\xb6\x89\xeaC/F{\xc4t\x1a\xfb"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_2225():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2226():
    int_0 = 1302
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    complex_0 = -672.963 - 580.6j
    complex_1 = -316 + 1648.98716j
    module_0.get_new_command(complex_0, complex_1)


def test_case_2228():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2229():
    bytes_0 = b"\x86\x12\x9d9\xa8v,\xb5\xc9\x0e\xb6\x03\xe8\x80\xf9\xbf\xc1\xa9\xb8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    str_0 = "nq"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2231():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2232():
    bytes_0 = b"\xaa\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    int_0 = 2475
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    str_0 = ",L1r`W*8P%CB5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    float_0 = 375.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    float_0 = 5476.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    bytes_0 = b"\xa9\xff\x87\x17\xf7ow\xcb,\xac\xe4\x1a^\xf2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0, dict_0)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    float_0 = -3379.108504
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    int_0 = -1469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    bytes_0 = b"U(\xe3\xf8A\x1c\x7f\x10\xb4*<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    str_0 = "\x0bv}.\\\"'o/L<r7[=jq"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    str_0 = "f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, set_0)


def test_case_2245():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2246():
    bytes_0 = b"\xd1O\x8f\xed?\xb5&=1\xfc\xd7(\xc9\xd4\xaab!\x08"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    str_0 = "t\r\x0b=p^J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    int_0 = 1196
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    bytes_0 = b"O\x8e\xd0\xf3(c)\xc7.\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    str_0 = "Z\x0cWV?j\\<?`\t\r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    str_0 = "-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    set_0 = set()
    list_0 = [set_0, set_0]
    str_0 = ""
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    bytes_0 = b"\x9eQ\xb4\x1e?\xab\x93\x93"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    object_0 = module_1.object()
    list_0 = [object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    complex_0 = -892.27 - 1858j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2259():
    str_0 = "Yd4=lR|h(?"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, bool_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    bytes_0 = b"\x8cn`\xe2\xce1~\x9b\xf8N\x8a\xe8\x90\x87z\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    bytes_0 = b"\xf4\x83\x1f\xef\xf6^UZmE\xd5i \xcc\xfd\xfc3-<q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    str_0 = "C\x0bOwG;SjY )TKw:7"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    str_0 = "2M/POxP@q!F`"
    float_0 = -1567.724
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    str_0 = "ZgzY0cAq^=c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    str_0 = ">q4I("
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    str_0 = 'wg*q"|^6F3^L 3'
    dict_0 = {str_0: str_0}
    bool_0 = True
    tuple_0 = (dict_0, bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    complex_0 = -113.118157 + 403.56j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    bool_0 = False
    int_0 = -146
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    str_0 = "I^1A\txtF?lt3[vJCLt~ "
    int_0 = -28
    set_0 = {str_0, str_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    str_0 = "lS*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    int_0 = -1070
    int_1 = -931
    tuple_0 = (int_0, int_1)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    str_0 = "[]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    float_0 = 1088.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    float_0 = 1568.68
    module_0.get_new_command(float_0, float_0)


def test_case_2279():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2280():
    float_0 = 1022.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    int_0 = 57
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: bool_0}
    module_0.match(dict_0, int_0)


def test_case_2282():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2283():
    str_0 = "a-Gp"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    int_0 = -2283
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    str_0 = "Aa{Z45S*5mZ8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    str_0 = '6"M|]3'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    float_0 = 1151.48
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    int_0 = 1205
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2292():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    complex_0 = 3107 - 2613.991j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    bytes_0 = b"@\xab&i/E\xba\xa1,\x1b4nq\xc1\x08Ab\xcc\xba\xe7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    float_0 = -4379.984
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    int_0 = -472
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0, tuple_0: bool_0, tuple_0: tuple_0, tuple_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    str_0 = "&W7AG&^W,-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    bytes_0 = b"wy\xfb\x83\x88\x92\xe5\xd4"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    none_type_0 = None
    bool_0 = True
    str_0 = "0p?/+F(3F+KE$"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(none_type_0, tuple_0)


def test_case_2301():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2302():
    int_0 = -2050
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    bytes_0 = b"\x16_%\xef\x82=='4\"\x17\xaa_\xc5\xdf\x85i\xd5\x9b\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bytes_0 = b"\x87\xedM\x9awJ+L?gq\xbcq\xe8\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    str_0 = "r,)UEEYT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    float_0 = -1633.20646
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    set_0 = set()
    str_0 = "J/eJ0l"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    str_0 = ".4x#nu67"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    str_0 = "INkun\\?4s"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    int_0 = 382
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    str_0 = "bvL1my.Hh_lfBcB"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    bytes_0 = b"\xf1\x0e\xd2,\xf8\x10\xe4a\x1b\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    str_0 = "q#fu\x0b\"'~LkCD\x0cy<Y75-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    int_0 = -1189
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = ""
    str_1 = "X,?H~dS0"
    str_2 = "UbL1|xOzVV_-t`+"
    dict_0 = {str_0: int_0, str_0: str_0, str_1: int_0, str_2: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    int_0 = -356
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    bytes_0 = b"\x1d\xa2\xe0\xd6q\x91\xf6bmk\x80\x08\xc6V\x1bB\xeb\xf7\rS"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    str_0 = "nT=m"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    bytes_0 = b"\x91\xf7n\xb4\x0e\x0f\x184v_\xb7\x13\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    bytes_0 = b"\xe9c\xd3\xc1(\xc5r\xa0\xde\xc7\xd3;&\xbf\xb8\xa1\xd2\xeb\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    str_0 = "^Y87*d]ud"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    str_0 = "*DOlw6#D{*1f#\t\nz"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    int_0 = -1372
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    float_0 = 1005.924365
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    float_0 = -2241.7003
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    str_0 = "n\n]{lEiJB"
    str_1 = "5\x0bQoV[|'s"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    str_0 = "gOc.yApi_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    float_0 = -2102.5064
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    float_0 = 1728.484
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    complex_0 = 1750 - 1192j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    bytes_0 = b"w#\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    str_0 = 'f82"W*Du'
    float_0 = 2211.0097
    dict_0 = {str_0: float_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_2339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2340():
    bytes_0 = b"h\x06\x14\xd0\xf2\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    int_0 = -4000
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: int_0, bool_0: int_0, bool_0: int_0}
    tuple_0 = (dict_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    int_0 = 3496
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    bytes_0 = b"\xfa\xb40\xdc\x9d\x14A"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    bool_0 = False
    tuple_0 = (bool_0,)
    str_0 = 'KQi&~i"c'
    str_1 = "G"
    str_2 = "1>>K\x0cAHL~T_"
    str_3 = "1Auo\x0b\t-YLt\x0cl>"
    dict_0 = {str_0: tuple_0, str_1: str_1, str_2: str_2, str_3: bool_0}
    module_1.object(**dict_0)


def test_case_2345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2346():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    bytes_0 = b"\r\xa1\xccp9c\x96\x8f\x87\xcd\x9az\x88N\x9c=\xber\xcea"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    int_0 = 1359
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    float_0 = -335.975
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    int_0 = 457
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    int_0 = 312
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    bytes_0 = b"\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    int_0 = -2350
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    int_0 = 26
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    bytes_0 = b"\xa3Z/\xe4\xc7\xbc+\x9e\x84a"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    int_0 = -2116
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    str_0 = "\x0b'GF0IF%544S("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    bytes_0 = b"_\xc7\xe0cBs\xb1^\xb8nb+6p\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    bool_0 = False
    bytes_0 = b"\x9eC\xd8E\xbf\xc6xG\x91|>\x91\x89\x86\xf3\xdc\xcf\x80\x81\xa7"
    tuple_0 = (bytes_0, bool_0)
    dict_0 = {bool_0: tuple_0}
    int_0 = -4103
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    str_0 = "d,d|:$xv<3;"
    module_0.match(str_0, str_0)


def test_case_2361():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2362():
    str_0 = "OW(616ID|aQ14\t_f"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    str_0 = "!1<]oR8Gt^6v~/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    complex_0 = -393.784118 - 814.2253j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    dict_0 = {}
    list_0 = [dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    object_0 = module_1.object()
    int_0 = -2326
    set_0 = {object_0, object_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    str_0 = "}*\x0c6_]&d9 WWn3N%Vs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {}
    bytes_0 = b'6\xa4O\xf9\xfe\xc7"~\x9f\xa18\x97F'
    tuple_0 = (set_0, dict_0, set_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    int_0 = -1737
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    complex_0 = 1531.35 - 286.94j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    bytes_0 = b"\xc4m\xa4\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    str_0 = "yZ,-{T|[ \rv6"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    str_0 = "*2A2(HA\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    float_0 = 2957.265813
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    complex_0 = 4586 - 1848.8j
    tuple_1 = (tuple_0, complex_0, float_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    int_0 = 866
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    float_0 = 1073.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    str_0 = "O5[) \x0brABO_m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    bytes_0 = b"\x17\xfb\x13\x17\x1a\xe2\x13<\xd3\xe7\xeb\x98\xa9z\xb5\xc6\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2382():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2383():
    str_0 = ""
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    str_0 = "Q*U05[|cs/;)k;"
    str_1 = "\x0c[+}>WA|s->w\rF7~y6"
    int_0 = 47
    str_2 = "vlV?yH"
    str_3 = "_=B7+ V>Z:wXrW"
    dict_0 = {str_0: str_0, str_1: int_0, str_2: str_1, str_3: str_1}
    module_1.object(**dict_0)


def test_case_2386():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2387():
    int_0 = 1165
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    bytes_0 = b"}O\xf4\xfb\x95#J\xdaE\x8b\x15\xba*?\xe6\x14\x0c\x87"
    tuple_0 = ()
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    str_0 = "K7Cv@E81J)Ltj3;q[C5r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    float_0 = -1223.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    int_0 = -3227
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    complex_0 = -2050.612 - 7.219011j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    complex_0 = 2069.389181 + 1554j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    bytes_0 = b"kGO\xa8T\xe2J\xf0\xf1#\xf6<\xcb\xabO&a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    float_0 = 1729.092317
    str_0 = "X,'\x0ci;NQwz\x0br\n,|"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    int_0 = 3767
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    complex_0 = 2570.978 + 1392.936996j
    tuple_0 = (complex_0,)
    list_0 = [tuple_0, tuple_0, complex_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    float_0 = -136.012
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    bytes_0 = b"\xbd\x90S\x99B\x05\x1f\xb6\x87\xb5\xfa\xd6\xc4\xfd2\x8d3\xde\x9bv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    str_0 = 'v5."]'
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: object_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    str_0 = 'vX"D*g\n~S{F:y\n7q~j'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    str_0 = "~ysJP3I:4S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    int_0 = -1027
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    str_0 = "]R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    float_0 = -2627.115
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    int_0 = 724
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    str_0 = ">%*RQ% "
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    int_0 = 4248
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    str_0 = "x$Aimy'9\x0bH"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    str_0 = "!HfH\r-.rO"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2416():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2417():
    str_0 = ")bOHK=]#M]u*9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    bytes_0 = b"\x150\x9a\x1b\xb1\xf9\xd8\x0eS'\xc8\n'\xfa\xf4C<u\x1e{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    int_0 = 2960
    tuple_0 = (set_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    int_0 = -778
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    bytes_0 = b"\x02\xa2f\x97\xaf<sX"
    str_0 = "?ln^vLk^ir=KP"
    float_0 = -2077.4
    tuple_0 = (bytes_0, str_0, float_0)
    tuple_1 = (bytes_0, tuple_0, str_0)
    object_0 = module_1.object()
    module_0.get_new_command(tuple_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    bytes_0 = b"IC\xc7F"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    tuple_0 = ()
    bytes_0 = b"\xf7\xc0M\xec4K\xc5\xf4\xe9\x18\x97\xae\x19\xea\x8b"
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_2425():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2426():
    float_0 = 1641.04
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    int_0 = -1053
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bytes_0 = b"\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    complex_0 = 486.4625 - 2543j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    bytes_0 = b"x\x1a\xf8I\xb3YL\x833\xd7E\x8a\x13\xb6+\xae"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    int_0 = 1118
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    float_0 = 2581.0
    str_0 = "a<(k\nAB<<&"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    bytes_0 = b";x\xb6\xd4d\x17E\xef\x181\x1c\x06\xed\xccY\xb8\xcaD"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    bytes_0 = b"\xd7\\\xeaZ>B\xd2\x83\x8aj\xc6\xfbL\xc5\x16"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    int_0 = 1267
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    str_0 = "S{_+pwXLDGBU6w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    str_0 = "yxy"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    bytes_0 = b"\x97L\xcb\xb7\xe9\xad'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    int_0 = 2436
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    bytes_0 = b"\xd2\xa2\x95\x08\x13\xc7\rRm\xb2\xda)\xa7\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    int_0 = 1047
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    int_0 = 589
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    bytes_0 = b"\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    bytes_0 = b"\xbevA\x9a"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    bytes_0 = b"\xa8\x818Y\x14\xe4\xb3g\xda\x1d\xe5\xa3\x8c\xb1Q#\xf5!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    str_0 = "}=t99BD[|Kmj\rl:"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    str_0 = 'W!xgq\x0bQ0[n@9epmjJl"W'
    module_0.match(str_0, str_0)


def test_case_2450():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2451():
    float_0 = -516.0
    float_1 = -102.686121
    list_0 = [float_0, float_1]
    module_0.get_new_command(list_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    str_0 = "P+F"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    bytes_0 = b"\xa86<\xa5\xab"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    bytes_0 = b"X\x87fc\x04\x82\xc8_\xaf\xda\x8c\xb4uc\xe2\xa1(+\xdf"
    bytes_1 = b"p\x13\xe4:\xe1\xde\xad\xc4\x8d\x96\xff"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    str_0 = "9q&*}zUrk~\x0b[m8U4)"
    module_0.get_new_command(str_0, str_0)


def test_case_2456():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2457():
    bytes_0 = b"9\xa5y\x99\xa4`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    int_0 = 1400
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    float_0 = 381.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    int_0 = 1650
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    complex_0 = -426.63 + 3270j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    float_0 = -1081.4762
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    str_0 = "o#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    str_0 = ">&SD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    bytes_0 = b"\x86\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    complex_0 = -2258.805 + 1071j
    int_0 = -2294
    set_0 = {complex_0, complex_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    int_0 = 2989
    str_0 = ".V2KP5DM"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    str_0 = '@g6Dsoh,"M+W'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    bool_0 = False
    str_0 = "?1mBb\nK{k"
    dict_0 = {bool_0: bool_0, bool_0: str_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    float_0 = -467.798382
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    int_0 = -707
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    bytes_0 = b"\xb4$\x84\x1b\t[\x80\xfb\xecb\x93\x8d\t\xb7\x1f"
    list_0 = [bytes_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    complex_0 = -2362.56 - 608.25j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    bytes_0 = b"\x1a\xc3h\x1fw3?\xebb\xc4\x1fx\xc8\x84y"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    bool_0 = False
    str_0 = "b}0tZ *"
    tuple_0 = (set_0, bool_0, str_0, bool_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    str_0 = "gv)*{w+?P?H1ibzbg&\\"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    int_0 = 388
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    str_0 = "wRU}\tHzI7n+/G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    str_0 = "rP\\xW$%Vmd"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0,)
    tuple_1 = (tuple_0, tuple_0, dict_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    float_0 = 627.6787
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    int_0 = -3288
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    complex_0 = 608.512596 - 2228.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    float_0 = 369.9639
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    bytes_0 = b'|\xd7\x97\xb3>b"\x9c\xb3\xd0\xd1XJ\xb1'
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    str_0 = "p\tF`V<|#BqTo#Cr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    str_0 = "\r%jD8}!j\t*\x0c~LfX#M"
    dict_0 = {str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    bytes_0 = b"\x03k\xeb\xa5\xf2\xe2Id\x97\x9e\x01\x01\x0c\x90\x02\xfe"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    int_0 = 167
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    bytes_0 = b'\x14c\xad\xfb\xf0"\x8b\xeb\x06'
    module_0.match(bytes_0, bytes_0)


def test_case_2496():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    bytes_0 = b'\x91E\xaf\xbasFm\x95\xd1F\x03\xbe\xca"\x8b\xce\xd8\x9e:'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    str_0 = "~9SSL<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    bytes_0 = b"A\x04\x17Oxy\xa4\x14\xa3@\xda:\xfaO\x98v-\xb6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    int_0 = -540
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    float_0 = -1908.0672
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    complex_0 = -1081.32 + 3078.3325j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    int_0 = -505
    module_0.match(set_0, int_0)


def test_case_2508():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2509():
    str_0 = ""
    int_0 = 4026
    module_0.match(str_0, int_0)


def test_case_2510():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2511():
    str_0 = "0!FG:WUigO$;Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    tuple_0 = ()
    bytes_0 = b"\xa97\x0f\xde\x82\xeaP\x9d9>"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    int_0 = 2663
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_2514():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2515():
    int_0 = 673
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    bytes_0 = b"\xfeM\x86Z\xdc\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    int_0 = 343
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    float_0 = -512.8
    set_0 = {float_0, float_0, float_0}
    str_0 = ";>,F]"
    tuple_0 = (set_0, float_0, str_0, str_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    float_0 = -1671.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    str_0 = "hV-9xy^q_sC.=4.{!&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    int_0 = -2088
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    int_0 = 4138
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    int_0 = -559
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    float_0 = -2285.46
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    bytes_0 = b"I\xbb\xf5\\\xd3R\xf0\x89"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    int_0 = -1643
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    str_0 = "r} "
    bytes_0 = b"\xf0\xd2\x18\xe4\x90)>\x8f\xfaU`\x10\xdc\x89+\x8fE$"
    tuple_0 = (str_0, str_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    int_0 = 1411
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    str_0 = "Q}1{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    int_0 = 4551
    bool_0 = False
    tuple_0 = (int_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    complex_0 = -1608.7942 - 1924.994371j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    bytes_0 = b"\x96\x94\x95\xf7i\xf5\xdc\xd0\xdd-\xbe\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    bytes_0 = b"ai\xcb\x06\x9d\xada\x1a7\xb3\xc0\x11\x00\xfa\x14\xac\xcc\xb7\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    int_0 = 675
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    int_0 = 102
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    bytes_0 = b"\x00g\x99\xd4"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    float_0 = -776.29
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bytes_0 = b"\xa6:3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    bytes_0 = b"\xb57\xe3\r)\x94vx\xaf\x88\xd5\xe9#,>9\x9e"
    dict_0 = {}
    tuple_0 = (bytes_0, dict_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    int_0 = -5396
    float_0 = 767.127762
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    str_0 = "tmJYS6"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    none_type_0 = None
    str_0 = "O@RpMTwNDV"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    int_0 = -1503
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    int_0 = 3750
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    bytes_0 = b"\xa5\xa3u\tN\x95bl N\xa9\x03r\xd0Ht\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    complex_0 = -2671 + 2143.77487j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    bytes_0 = b"\xc9v\x9fNh\xa8\xcd\xf3(\xbe\xc9-\x01s0l+"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    int_0 = 1639
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    str_0 = "6!w"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    bytes_0 = b"t\x1e\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    str_0 = 'vtx@{ed*J%xx`Pp",'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    str_0 = "?+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    str_0 = "bm<-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    str_0 = "{~(an|@sRzm@f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    bytes_0 = b"\xe4]\xeaPn\xf0\xd5\x13\x7f\xfd\x94C\r*"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    bytes_0 = b"\xc8\x8c\x10\xd3\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    bytes_0 = b"\x7fT"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    str_0 = "wL[pKc\n7Sbikq]y\x0c\rR"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    str_0 = ",dx:}LI=Bz0j1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    int_0 = -1435
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    str_0 = "T:t>18wI\nBQ"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    set_0 = set()
    str_0 = 'FYz(`V"'
    object_0 = module_1.object()
    tuple_0 = (set_0, str_0, str_0, object_0)
    list_0 = [tuple_0, set_0, set_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    int_0 = -2059
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    str_0 = "8P]SxD?xy':s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    bytes_0 = b"\x18\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    float_0 = -805.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    float_0 = 740.8
    bytes_0 = b""
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    float_0 = -5405.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    bytes_0 = b"~\xc8\xd3\x8ci\x10\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    float_0 = 1784.97
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    bytes_0 = b"\x1c<\xac\x89\xe8\t\x82%\xc7\xda\x13\xd2\x15"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    str_0 = "h!XOz]&P+g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    float_0 = 2032.818
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    float_0 = -2330.286
    str_0 = "I"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    float_0 = 143.976847
    module_0.match(float_0, float_0)


def test_case_2579():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2580():
    int_0 = 582
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    bytes_0 = b"Xq\x8e\x8bE\x8a\xbd~(>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    int_0 = 3679
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bytes_0 = b"\x83\xb5J\x98?\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    int_0 = -1930
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    int_0 = -808
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    tuple_0 = ()
    str_0 = "m\"l~2eW@OhS\\'(u,u+b["
    tuple_1 = (tuple_0, str_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    float_0 = 579.718085
    list_0 = [float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    str_0 = "  <'vlkAeF% WC\x0b-psD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    bytes_0 = b"}\xeb\xcd\x8eY\x07\x14\x8bt\x1cnI\xc6%\x1e^]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    int_0 = -4608
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    int_0 = -1414
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    bytes_0 = b".\xa1Z\x96`tk{?3\x02"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    str_0 = "|\x0c%8jwEoS=w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    bytes_0 = b"\xd2\x0emb\xd2\xafX\xe1\x86\x8f\xec\x1bw"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    str_0 = "U\x0cXJq1k}#|=*\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    int_0 = 608
    float_0 = 2341.98
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    float_0 = 2945.91613
    tuple_0 = ()
    bytes_0 = b"`\x12\x01\xcbe\x85*F\x8c\xf2"
    tuple_1 = (float_0, tuple_0, float_0, bytes_0)
    dict_0 = {tuple_1: float_0, float_0: tuple_1, tuple_1: float_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    bytes_0 = b"\xdc\r1\x01\xe3b&\x87\t\xda$\xa5\x97\x97\x00\x0b\x0f\x0f.\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    str_0 = "5{=Acr7Y7x]k2M0 %N"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, list_0, bool_0)
    tuple_1 = (list_0, tuple_0, tuple_0, bool_0)
    list_1 = [tuple_1, tuple_0, tuple_1, tuple_1]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    object_0 = module_1.object()
    set_0 = set()
    tuple_0 = (set_0, set_0, set_0, object_0)
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    bytes_0 = b""
    set_0 = {bytes_0}
    list_0 = [set_0, set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bytes_0 = b"\x1d!i \x8b\xe7\xa2h\xaa\xab\x18\xd85]*l\xd9\xb3p\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    int_0 = 450
    tuple_0 = (int_0,)
    set_0 = {tuple_0, int_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    bytes_0 = b"\xba\xfc4\xa9\xca\xd3\x8e\xfb\xe3f\xef\x8b\x8dR\xaf\xef\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    int_0 = -5206
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    complex_0 = 3110 + 827.4604j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    bytes_0 = b"&\x8dd \xc2\xbf\xf3\xe1\xee+F\x9b\xf1oK\x06S%(\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    str_0 = "yvR>By2oR:czwYf,'f9b"
    bool_0 = True
    set_0 = {str_0, bool_0}
    bytes_0 = b'q\xbd"\x82\xb7 L\x19\xfe\xed@\xb0'
    tuple_0 = (str_0, bool_0, set_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    float_0 = 1343.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    int_0 = 3573
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    str_0 = "7K"
    int_0 = -113
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    int_0 = -3009
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    str_0 = "{q?\x0be4P<5e+S_"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


def test_case_2622():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2623():
    float_0 = -2614.001
    bytes_0 = b"F\xd90\xca\xb0\x96\xb8\x11\xb3x\xcc\xb7\xcc\xb1\xcf.\x8f\xb7\xb5I"
    tuple_0 = (float_0, bytes_0)
    set_0 = {tuple_0}
    list_0 = [set_0, bytes_0, bytes_0, tuple_0]
    module_0.get_new_command(list_0, float_0)


def test_case_2624():
    pass


def test_case_2625():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2626():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    float_0 = -2761.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    float_0 = -1741.5605
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    int_0 = -2551
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    str_0 = "<g2w,l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    str_0 = 'IW=D]i%c<1\r2"\x0cU\x0c('
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    complex_0 = 2748.5667 - 463.765j
    list_0 = [complex_0, complex_0, complex_0]
    tuple_0 = (complex_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    str_0 = "m:W+'"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    float_0 = 4089.419879
    int_0 = 1373
    list_0 = [float_0, float_0, float_0, int_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    int_0 = -512
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    int_0 = 4033
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2637():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2638():
    str_0 = "Q"
    set_0 = {str_0, str_0, str_0}
    float_0 = 127.963
    tuple_0 = (str_0, set_0, float_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    str_0 = "X7E7A\nLD+"
    list_0 = [str_0]
    module_1.object(*list_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    bytes_0 = b"\xe3\x91\xbc\xe2a\xe2\xbaC&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    bytes_0 = b"\x82\xf6\x9b\xe9\x03\x9e\x0f\xa7\x8c\xd02^E\xa5\t\xf0}"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    str_0 = "0Wb!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    object_0 = module_1.object()
    bytes_0 = b"\xc4H"
    module_0.get_new_command(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    int_0 = -780
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    bytes_0 = b"xg\xb4\xe4NV'\xb8\x98\xa2\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    bool_0 = False
    bytes_0 = b"6\x1e\xc3\xcaQ\xbc\xae\xbd\xe2\xfb\xf9]h\xe0E0 j\x9f"
    tuple_0 = (bool_0, bool_0, bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    list_0 = []
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    str_0 = 'TK?l"!TJs'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    int_0 = 147
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    int_0 = -833
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    str_0 = "#bS5ojxYK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    float_0 = -3055.22
    str_0 = "{.rZ\x0bII|"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    bytes_0 = b"\x96\xb59s\x9edH\xf3\x91\x9c*"
    int_0 = -1054
    list_0 = [bytes_0, int_0, bytes_0]
    tuple_0 = (bytes_0, int_0, list_0)
    bytes_1 = b"8\xaa\\\x83,\xf4\x9b\xf0\x19s\xc2\xa9"
    tuple_1 = ()
    tuple_2 = (tuple_0, bytes_1, tuple_1)
    module_0.match(tuple_2, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    int_0 = 2084
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    int_0 = -2011
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    int_0 = 544
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    str_0 = "i>YWA4EwN(3B1w+X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    int_0 = 980
    complex_0 = 2793.5 - 4907.701533j
    tuple_0 = (int_0, complex_0)
    dict_0 = {tuple_0: tuple_0, int_0: int_0, complex_0: complex_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    bytes_0 = b"\xd1\x91YT\xa9\xbd|O4\x80:\xa0\xf5kp\xa0\x0b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    str_0 = "2_vL`\x0bp~/KRK+}"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    str_0 = '<O*yUh<+}o"\te6-T'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    str_0 = "% N,&NrH@0PkDSls"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    float_0 = 270.722983
    list_0 = [float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    none_type_0 = None
    int_0 = -1586
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    int_0 = 3093
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    float_0 = -3181.109
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    str_0 = "}B@P"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    str_0 = "POB<=1&6~~LY|l#%OT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    int_0 = -2137
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    complex_0 = -1070.064 - 1009.19319j
    module_0.match(complex_0, complex_0)


def test_case_2673():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2674():
    bool_0 = True
    float_0 = -1225.7
    dict_0 = {bool_0: bool_0, bool_0: bool_0, float_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_2675():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2676():
    str_0 = "jQ[$RNV 8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    float_0 = -2678.08
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    str_0 = "c,a2"
    bytes_0 = b"(aJ\xd1\xb7\x8a\xa4Q\xcb\x12\xbb2\rYEY\xb3P\xc3/"
    tuple_0 = (str_0, bytes_0)
    set_0 = {tuple_0, str_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    float_0 = 1302.48
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    str_0 = "tB!X\t?J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    bool_0 = False
    float_0 = -601.0
    str_0 = "x!\x0bP>2p)ZP"
    bool_1 = False
    tuple_0 = (bool_1,)
    tuple_1 = (bool_0, float_0, str_0, tuple_0)
    module_1.object(*tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    str_0 = "GXf3.L}M+5JSu"
    set_0 = {str_0}
    bytes_0 = b"\x86\xdf"
    tuple_0 = (str_0, str_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    int_0 = -1897
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_2685():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2686():
    complex_0 = -2008 + 2382.43928j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    float_0 = -3597.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    float_0 = -1704.11
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    str_0 = "7%6h\ns/_T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    bytes_0 = b"\x15\xc2B"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    bytes_0 = b"3H\xdb\xf8e\x98\xd5/X\xfc\x89-Y.\x91\x1d\xc5\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    str_0 = "Q$}^Upc3N,nq{:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    int_0 = -3083
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    int_0 = 509
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    int_0 = 1159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    int_0 = 1232
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    bytes_0 = b"_\xc9s\xd2U\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    float_0 = -2184.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    int_0 = -1128
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    str_0 = "!c^GSA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    str_0 = "!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    str_0 = "[vd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    float_0 = 2617.024
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    str_0 = '"$#WM/fsL4hxs.&v4}f'
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    int_0 = -2714
    tuple_0 = ()
    list_0 = [int_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    str_0 = "X\r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2708():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2709():
    complex_0 = -685.8 - 2325.6j
    module_1.object(*complex_0, **complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    str_0 = "DaI&|!_e=5"
    int_0 = -561
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    int_0 = 635
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    float_0 = 2574.83
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    str_0 = "x_"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


def test_case_2714():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2715():
    str_0 = "*l)I)cjg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    float_0 = 2108.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    int_0 = 3935
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


def test_case_2719():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2720():
    bytes_0 = b"\xd2\xf4\xbb\xac\xe8\xa9\x19@m"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    int_0 = -2498
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    bytes_0 = b"\xdb\x86\x14\xdf\xd48"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    bytes_0 = b"\x134\xed\xeav\xd21\xb0\xc2\x9a\xb1\xf8\x86\xb2\rW"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    str_0 = ':j>*"*3@zr.0*4p1'
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    bytes_0 = b"e\x07]\xcb\xe1\xd4Gn\xcc\xcf\xda\x1b\x91\xbc\xeb\xa9\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    str_0 = "/OpIe-j\x0c3bYNBoTle"
    int_0 = 1441
    set_0 = {str_0, int_0, str_0, int_0}
    list_0 = [str_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    float_0 = 2765.6976
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


def test_case_2730():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2731():
    float_0 = -1117.0
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    int_0 = -1714
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    float_0 = -2744.60988
    tuple_0 = (float_0,)
    tuple_1 = (float_0, float_0, float_0)
    bool_0 = True
    dict_0 = {tuple_0: tuple_1, tuple_1: tuple_0, tuple_1: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    bytes_0 = b"\xc4\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    bytes_0 = b"\x1d\xc1|\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    float_0 = -1229.596
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    bytes_0 = b"\x83'0J\xe8\x97\xba"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    complex_0 = 1666.0049 - 265.887j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    complex_0 = -2270.3 + 380.084287j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    int_0 = -3301
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    str_0 = "ID6MYJ*bz\n\r5}E.*W6q;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    int_0 = -2012
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    bytes_0 = b"\xac\xdf3\xaen\xf6\xebJ\x0c\x92>[7S\x10p\x93"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    bytes_0 = b"\xee\x9d\x8f\xb5\xe4\x88\x9e\x81j\x81\xc3T \x05\x18\xb8\xc0"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    str_0 = "5\\AJ4J@k6.x<5"
    list_0 = [str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    str_0 = "UL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    int_0 = -856
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    str_0 = "#9G:q`\n|tKQJ*<9YM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    float_0 = -2564.37556
    module_0.match(float_0, float_0)


def test_case_2755():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2756():
    str_0 = "LkToevf*<eo#"
    str_1 = "o"
    str_2 = "yE&hg>!&#t5"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    float_0 = -33.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    bool_0 = False
    str_0 = "vYMjH"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    int_0 = 596
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    none_type_0 = None
    int_0 = -3941
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    bytes_0 = b"\x92\xeb\x10\x1b\xf2\x92\xbe\n\x06\x92\xba\xc0\xa6\x8e*\r#7Ji"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


def test_case_2767():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2768():
    str_0 = "4Fd^ErHuN6/P4D7O+ks&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    bytes_0 = b"\xd2}VQ\xa9\x91\xf7\x18\x8e\x18\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    bytes_0 = b'v\xd8"e\xab\x9c\x02\xb3\x97\xebv\xd41n\x0c\x9d\xa7'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    str_0 = "\tB:P@&!."
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    str_0 = "//EJKs|gxf"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_2774():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2775():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    int_0 = 4490
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    float_0 = 3312.941
    module_0.get_new_command(float_0, float_0)


def test_case_2778():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2779():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    bytes_0 = b"\x87d\xfb8\xa9\xeeB\r\xa1\x9d\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    complex_0 = 1933.1 - 960.3137j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = ()
    int_0 = 689
    tuple_1 = (set_0, bool_0, tuple_0, int_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    int_0 = 1569
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    none_type_0 = None
    int_0 = -357
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    bytes_0 = b"\x02!\xc0\xc2\xf0\xb0\x86w'N\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    str_0 = "G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    bytes_0 = b"\xb6\xdbC"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    int_0 = 1672
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    bytes_0 = b"\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    int_0 = 92
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_2792():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2793():
    bytes_0 = b"\xdcP\x82\x91\x91\xbaN\xec!\x18j\xb3\xc8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    int_0 = 1224
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    bytes_0 = b"\x130\x91\xe0\x99\xf0\x89O\xaf*\xaa\xe8\xc2X"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    str_0 = "=riS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    str_0 = "t!"
    module_0.match(str_0, str_0)


def test_case_2800():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2801():
    float_0 = 784.6113
    set_0 = {float_0, float_0}
    list_0 = [set_0, float_0, float_0, float_0]
    str_0 = "W"
    module_0.get_new_command(list_0, str_0)


def test_case_2802():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2803():
    str_0 = "+0D"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    str_0 = 'S U"}h\\1t'
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    float_0 = 1525.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2807():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2808():
    str_0 = "hgap`"
    str_1 = "<1\x0b{Ulj ^n2/Q+zG"
    str_2 = "|"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    complex_0 = 4204.2092 - 1975.8j
    bool_0 = False
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    complex_0 = 2182.9 + 1021.5837j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    bytes_0 = b"~\x9a\x06d\xad\x8dq"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    int_0 = 1210
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    int_0 = 1415
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    bytes_0 = b"\x99\x83 U\x84\xf2\x8a\x91E)x\x00\x94\x9d\xb9\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    str_0 = "E3myLm:<LnU<MElde3b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    bytes_0 = b"\xa2\xd3\x88\x11M\xa6c@K1\xfa\xbbE?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    complex_0 = -349.53551 - 1730.75j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2821():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2822():
    str_0 = '?D-q-yZw"G"U?\ny4'
    module_0.match(str_0, str_0)


def test_case_2823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2824():
    bytes_0 = b"\x0c\xe2\xfbl;?\x04\x8f\x9bv\xf0\xe2\xb6\xdf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    bytes_0 = b"\x13^G\xa1&NT\x84^\xbd\xb2\xf6F\xc5aE(\x0cdK"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    int_0 = -2554
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    int_0 = -4150
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    str_0 = ";K"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_2829():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2830():
    set_0 = set()
    list_0 = [set_0, set_0]
    str_0 = ".ufb`F+:*(zEo[%^"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    int_0 = 1936
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_2832():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2833():
    bytes_0 = b'\xe9\x7f\x88\xce\xf5"m\x12\xbd\xb3\xde\x1f\xa4;X\x15\x10\x8c\xc04'
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bool_0: bool_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    str_0 = 'ml2\t"+Xp'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_1,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    str_0 = "M;Z"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bytes_0 = b"54\x19\xf3J\xd0\xe7\x06/\x11\xfb\x98Y4k\xf0,\xb9\xc6\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    float_0 = 2953.18
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    str_0 = "XUug<C|c`*8hc\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    str_0 = "-Yy-t\t/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    bytes_0 = b"\xc7\xdfT`7\xf4O\xc5"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    bytes_0 = b"K\x8f\xfc\xbcz\xec\xc4\x1b\x9d\x0cf\xad\xe4\xb5w.\xddT=\xf4"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    str_0 = '*X2ccNi=VSB&i"z1X'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    int_0 = 1419
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    bytes_0 = b"\rj2\x99.F\xc8\x88o\x04\xd8Sp\x11\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    str_0 = "aY`<-sVQ*h4s.R:@?e"
    set_0 = set()
    int_0 = 1715
    tuple_0 = (str_0, set_0, int_0)
    module_0.match(tuple_0, int_0)


def test_case_2849():
    pass


def test_case_2850():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2851():
    int_0 = 3979
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    str_0 = "9!^'4]FZ-VuLt?:ULiK6"
    module_0.get_new_command(str_0, str_0)


def test_case_2853():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2854():
    str_0 = "YxxH9>3o73I&3n1=mKl<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    float_0 = 1324.1
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    int_0 = 686
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    int_0 = 2758
    tuple_0 = ()
    list_0 = [int_0, tuple_0, int_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    int_0 = -989
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    bytes_0 = b"\x11\xa9\xf2;\xbd\xd1"
    int_0 = 1807
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


def test_case_2862():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2863():
    bool_0 = False
    bytes_0 = b"\xa6\x17\xc0H?\x1e3\xabmm\xe9\xaf\xe0@\xe3\x0e)\x12g\x03"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    complex_0 = 2314 + 1599.47j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    bool_0 = True
    bytes_0 = b"@6\x18"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    int_0 = 1938
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    dict_0 = {}
    bool_0 = True
    module_0.get_new_command(bool_0, dict_0)


def test_case_2868():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2869():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_2870():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2871():
    object_0 = module_1.object()
    int_0 = -3846
    dict_0 = {object_0: object_0, object_0: object_0}
    tuple_0 = (int_0, object_0)
    tuple_1 = (object_0, int_0, dict_0, tuple_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    list_0 = []
    str_0 = "ZJZT!qTsd~>^]r0cGDy9"
    str_1 = "i?"
    dict_0 = {str_0: str_0, str_0: list_0, str_1: list_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    str_0 = "he"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    float_0 = -392.050875
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    int_0 = 882
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    bytes_0 = b"\xa2\xbf\xb4\xe5\xfcp\x124\xf8\xdd\xbc\x89b8\x7f\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    str_0 = "f4"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    bytes_0 = b'*"\xd3T\xfd\x94f\x19w\xc7\xb1\xd8\x08wG\xfd/\xa3\xea'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    float_0 = -135.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    str_0 = "Bm1P,[sYhv&-2$^|a=g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


def test_case_2882():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2883():
    bool_0 = False
    int_0 = -2049
    tuple_0 = (bool_0, bool_0, int_0, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    int_0 = 2035
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    str_0 = "\x0c-P{{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_1.object(*list_1, **list_1)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    int_0 = 379
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {int_0, int_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    str_0 = "F3!"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    bytes_0 = b"\x8d\xe6\x8e\x19=\xcb"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    complex_0 = -1137.2 + 568.8j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    str_0 = "NW,cDE}HK&I^IS +2y\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    str_0 = "\\\x0b\\Ce&SOkDC|YW"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_2897():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2898():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    list_1 = [list_0, tuple_0]
    module_0.get_new_command(list_1, tuple_0)


def test_case_2899():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2900():
    bytes_0 = b"\x9d\xb7\xea\x8a\xee>\xf53@\xf8pR\x1e\xe8r4\xa3@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    complex_0 = -3189 + 1101j
    bool_0 = True
    int_0 = 1744
    tuple_0 = (bool_0, int_0)
    tuple_1 = (tuple_0,)
    module_0.match(complex_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    str_0 = "+1RP?>}#9ess{. =l"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    bool_0 = False
    str_0 = "wd' iX2Gc4?7nJ,"
    bytes_0 = b"\xfe\xe9r\xd9s\xeb\xac"
    tuple_0 = (bool_0, str_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    int_0 = -2985
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    str_0 = "f"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    float_0 = -1165.82
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    str_0 = ',"G{\x0bvcQkV<>CLPI'
    float_0 = 3829.572
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    str_0 = "?f/\t*{H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    bytes_0 = b"\xe6EX1)^\xd6Y\xaf\xab~\x98=X"
    module_0.match(bytes_0, bytes_0)


def test_case_2914():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2915():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    complex_0 = -482 - 1050.22j
    dict_0 = {complex_0: complex_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    bytes_0 = b"\xdbg\xfa2>\x06\xc2`\xd5F\xfc\xe9\xb9,MM"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    complex_0 = -82.6513 - 1348.19493j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    str_0 = "Cp39fIeLlkNL]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_0}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    float_0 = -817.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    complex_0 = -455.9 - 1788.6j
    module_0.match(complex_0, complex_0)


def test_case_2924():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2925():
    float_0 = -357.0
    bool_0 = False
    list_0 = [float_0, float_0, float_0, bool_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    object_0 = module_1.object()
    list_0 = [object_0]
    list_1 = [list_0, list_0, object_0]
    module_0.match(list_1, list_1)


def test_case_2927():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2928():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    str_0 = "]/nC\x0bvc8"
    list_0 = [str_0]
    str_1 = "*vK="
    module_0.match(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    bytes_0 = b"\x1a+\rl"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    int_0 = 847
    int_1 = 33
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    bool_0 = True
    bytes_0 = b"\xf1\xb5p\xce\xbf"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    bytes_0 = b'Y\x8f\xf6"'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    str_0 = "Db &\nkghv4 EY#]JN\x0c"
    dict_0 = {str_0: str_0, str_0: str_0}
    object_0 = module_1.object()
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    str_0 = "v^@eL^K\t6jR\x0cUU@sBcUv"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    bytes_0 = b"\xfd\xd3_\x02\x9c\xdb\xf2\xcc^z\xda\xb4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    int_0 = -806
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bytes_0 = b"\x925\x0f*\xf6\xea7"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    str_0 = "gCVP\rl>"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    float_0 = 3993.3
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    bytes_0 = b"\xb1\xbc\xa2\xf9K\xde\xc5\xfb}\xb7\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    complex_0 = -2226.96 - 1981.882j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    str_0 = "SJ+e;PFm\n#)2"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


def test_case_2947():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2948():
    float_0 = -1591.077531
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    float_0 = -1138.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    int_0 = -5268
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    bytes_0 = b"y\x0c\xd1\x1ci\xbc\x12\xfa\xab\x93\x16\n:*\x18\x81\x98\xa8:"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    str_0 = "<[F\"?Atdky'Z62Du"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bytes_0 = b"\x08<\xd7p8\xdf\xb2\x8ab"
    object_0 = module_1.object()
    module_0.get_new_command(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    str_0 = "rf-yq^|"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    bytes_0 = b"\x82\xe8\xbb\xb5V?eF"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    bytes_0 = b"\xda\xf4\xb6S\xec\xedOY\xce\xe8\x8f\xf0\xdbe"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    list_0 = []
    tuple_0 = (list_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    int_0 = 2199
    module_0.get_new_command(int_0, int_0)


def test_case_2960():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2961():
    bytes_0 = b"\x80\x18\xbdW\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    int_0 = 2423
    module_0.match(int_0, int_0)


def test_case_2964():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2965():
    float_0 = -1141.95272
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    bool_0 = False
    str_0 = "Z"
    dict_0 = {bool_0: bool_0, str_0: bool_0, str_0: str_0, str_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    str_0 = ""
    bool_0 = True
    float_0 = -1226.9861
    list_0 = [str_0, bool_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    str_0 = ";A7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    bytes_0 = b"Y\xc50\x0eY\xe3\x083\xbc\x81]\xfa\x02\xcc&/l\xbb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    bytes_0 = b"~\xebpf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    bytes_0 = b"\x9cM\x9e|]\x83\xec\x15\xed\xb0\x07'&5\x1cpe\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    int_0 = 87
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    complex_0 = -521 + 1570.177803j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    str_0 = ")3b<Mzq>M;_}(\n{\x0c\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    float_0 = -1643.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_2977():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2978():
    str_0 = "CYg.D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    float_0 = 1947.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    int_0 = -75
    object_0 = module_1.object()
    dict_0 = {int_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    str_0 = "WuU+\tr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


def test_case_2984():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2985():
    bytes_0 = b"\xb2%\xd4Q\x04\x99\x10\x87\xe3Xk"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    str_0 = "Dl\\"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    bytes_0 = b"\x15\x87\xe5=\x89\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    bytes_0 = b"\x14\x00J\x8d\xe24"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    object_0 = module_1.object()
    complex_0 = -2647.4 - 227.12j
    module_0.get_new_command(object_0, complex_0)


def test_case_2990():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2991():
    int_0 = 102
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    bool_0 = False
    tuple_0 = (bool_0,)
    object_0 = module_1.object()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, bool_0: object_0, tuple_0: object_0}
    float_0 = 420.115
    list_0 = [dict_0, float_0, object_0, bool_0]
    list_1 = [object_0, dict_0, float_0, tuple_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    str_0 = "8G#v2RcYRe&RoRR$>5"
    str_1 = "- !\r{s-$,9`"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    list_0 = [dict_0, dict_0, bool_1, bool_1]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    str_0 = "P-&J$:A\\ org>/"
    list_0 = [str_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    bytes_0 = b"x"
    module_0.match(bytes_0, bytes_0)


def test_case_2998():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2999():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_3000():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3001():
    str_0 = "D|\n]&HA_c\x0b05=RD\\uk/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    int_0 = 784
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    float_0 = -1284.52
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    int_0 = 1349
    tuple_0 = (int_0, int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    list_0 = []
    list_1 = [list_0]
    list_2 = [list_1, list_0]
    module_0.get_new_command(list_2, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    int_0 = 1358
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    float_0 = 3175.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    bytes_0 = b"\xbb\xd8\xa0C\x15\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    int_0 = 772
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    float_0 = -822.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    bytes_0 = b"\x169\xd6-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    str_0 = "6S_+b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    bytes_0 = b"\x8f\xe4\xab\xa1\x98\xd8\xe8\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    str_0 = "%Xb0tU-2/\n>&eC>[h"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    float_0 = -1601.55
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    str_0 = "9P|~UD,?rw95J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    str_0 = '<"\n5;9LA~eFl3xf2'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    none_type_0 = None
    int_0 = -788
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    bytes_0 = b"\x03\xd9\xa8\xf1\xd6\xdcSO\x87\x92\xbc\xfa\xa9WO\xff\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    none_type_0 = None
    bool_0 = False
    list_0 = []
    bool_1 = True
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0, bool_1: bool_0}
    bool_2 = True
    tuple_0 = (list_0, dict_0, bool_2, list_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    str_0 = "P"
    list_0 = [str_0, str_0]
    bool_0 = True
    tuple_0 = (str_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    bytes_0 = b"S\x05\xd5\x11\x92\x9f2m\x1e\xdf|\xb5\x15r\x082"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    int_0 = -1959
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    int_0 = 1191
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3030():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3031():
    tuple_0 = ()
    str_0 = "%B}J(a}tHl2z-$"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    bytes_0 = b")\xb0\xac[\xc5\xa9\x06]\xb8\x86\xd6\xe5\xa9\xe6&\x13\xc4f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    str_0 = "Rpx1~br->.u2"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    str_0 = "!}<s/>;\nO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    int_0 = -2155
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    bytes_0 = b"m\x052"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    str_0 = "]8e_^2}/rXgk+6JoN"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    bytes_0 = b"$\xa2\xc16"
    int_0 = 6194
    tuple_0 = (bytes_0, int_0)
    list_0 = [tuple_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    bool_0 = True
    float_0 = 2028.437451
    bool_1 = False
    set_0 = {float_0, bool_1, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    int_0 = 2311
    float_0 = -346.02
    list_0 = [int_0, int_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    int_0 = 989
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    float_0 = 1099.693284
    tuple_0 = (float_0,)
    dict_0 = {}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    str_0 = "K>GCV\tBk+T KsR\x0bxxmR"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    str_0 = "TQ?d@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    bytes_0 = b"\x13T\xe5A}\xd1\x81\xdb\xec\xb1\xf2\xa9_~?\xd0\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    str_0 = ".WMP"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_3051():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3052():
    int_0 = 748
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    str_0 = "45+O1s$N9~0r*C"
    module_0.match(str_0, str_0)


def test_case_3055():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3056():
    int_0 = 2125
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    str_0 = "$Ycw|7&TQj\x0b"
    str_1 = "32bNU"
    str_2 = "Y_\x0c)"
    str_3 = "jr1;*PE"
    dict_0 = {str_1: str_0, str_2: str_2, str_3: str_1, str_1: str_0}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    bytes_0 = b"\x0bO"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    bytes_0 = b"\x93\x04M\xdc\xf4"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    str_0 = "~B=*34pG9Kd4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    complex_0 = 2110.8 + 2318.01j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    bytes_0 = b"U\x94q\x81yh\x1a\x94\x141P'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    str_0 = "v=|kS1wC#.3Uq&I"
    bytes_0 = b":\xae"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    str_0 = 'Z\t/|s"&F2Hx'
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    bytes_0 = b"a\x86TC\x9c\xf8\xfc\xc8e*\xbe\xec\xf4-\xcbP\xceC\x1b#"
    set_0 = set()
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    float_0 = 571.88
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    float_0 = 1920.69
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    bytes_0 = b"\x8b\x11\r\xee\xfb\xc1\xed8\x98\xb0\x8cyL\xe5\x1a~\x7fP\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    bytes_0 = b"\x929\x17\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    int_0 = -340
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    int_0 = 2222
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    bytes_0 = b"\x94\xdb\x15 \xcd\x82}"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    bytes_0 = b"}\x04\xda\xaf&\x12\xba\x98N\x80_P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    float_0 = 309.22
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    str_0 = "W3D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    int_0 = 1005
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    str_0 = "ZN#,s8G.I/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    float_0 = -1984.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    int_0 = 1709
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    tuple_0 = ()
    str_0 = "*9eDQ+I#\r2bLEN["
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    bytes_0 = b"\x0eUl]\x1dl\x04\xd3\xb1\xadnV\xb5\x17\\>\xc2\xec\xd7-"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    int_0 = 2626
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3084():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3085():
    bytes_0 = b"x\xb0\x13?!\xe4\x88\xdeG\x13\xcf\x19\xe16\xa4\x85\xba\xc5\xfa\x86"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3086():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3087():
    bytes_0 = b"]\xd2\x82lG\n\xa6\xfa$\x85\xe0\xa5jzjD\xf3V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    bytes_0 = b"\xc4\xc1\xde\xa7M\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    str_0 = ")_3kj:\n\n\x0bW%yA\x0b}f{0O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    dict_0 = {}
    float_0 = 1622.296
    tuple_0 = (dict_0, float_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    float_0 = -1048.78245
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    str_0 = "_w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    str_0 = "3/qC:V_Lzl8V}CE00$U<"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    int_0 = 723
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    complex_0 = 2948 + 574j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    bytes_0 = b"7\xa0\xf3\xac\xa294}\xf8\xc5|\xbc\x80\x07"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    bool_0 = False
    int_0 = 211
    bytes_0 = b";\xf7a\xa7F=s\xb7\xb1\xc4\xa8V\xa1\xe9o"
    tuple_0 = (int_0, bytes_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    str_0 = '"4lf<yo%\\'
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    int_0 = -1074
    int_1 = 1297
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    dict_1 = {object_0: object_0}
    module_0.match(dict_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    str_0 = "zDyxz&"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    int_0 = -138
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    int_0 = 693
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


def test_case_3109():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3110():
    bytes_0 = b"\x0f\x1a\x02z\x8d\xb3"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_3111():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3112():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    dict_0 = {}
    tuple_0 = ()
    tuple_1 = (dict_0, tuple_0, dict_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    bytes_0 = b"\x17\xb0\xec(\x0eh\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    bytes_0 = b"L\xf8\xf1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    int_0 = -3304
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    float_0 = -303.377
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    bytes_0 = b"\xaf}\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    bytes_0 = b"\xf7\xaa\xc3C/\x0fFC\xbe~H\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    object_0 = module_1.object()
    float_0 = 805.4731
    module_0.get_new_command(object_0, float_0)


def test_case_3122():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    int_0 = -2896
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    str_0 = "E$g}yt,\r_wT\rm"
    module_0.get_new_command(str_0, str_0)


def test_case_3125():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3126():
    bytes_0 = b"\x07\xea\xc4\xa1*\xe5\x92\xaa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    bool_0 = True
    int_0 = 313
    float_0 = -1910.11
    tuple_0 = (bool_0, int_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    bool_0 = False
    bytes_0 = b"\x02\x8e(\x9d\xf9\xb6\xca\x86C"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    bytes_0 = b"\x92=\xa0\x84\xf3\x11\x95a~4\x04\x1c\x8a"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    float_0 = -791.105584
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    int_0 = 2656
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    int_0 = 854
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    list_1 = [list_0, list_0, object_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    bytes_0 = b"\x0b\\\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    int_0 = 4223
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    str_0 = "/\x0b.qd@kL"
    int_0 = -1384
    tuple_0 = (str_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    int_0 = 1258
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    bytes_0 = b"\t\x1e\x1eG^g\x08\xafs\x85\xadA\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    int_0 = 2988
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    float_0 = -975.39943
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    tuple_0 = ()
    int_0 = 545
    tuple_1 = (tuple_0, tuple_0, int_0)
    dict_0 = {tuple_1: tuple_1, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    complex_0 = 1099.766 - 329j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    complex_0 = 803.619 + 3092.51288j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    complex_0 = -1387.810881 - 220.002j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    list_0 = []
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    module_0.match(tuple_0, list_0)


def test_case_3147():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3148():
    int_0 = -912
    module_0.get_new_command(int_0, int_0)


def test_case_3149():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3150():
    float_0 = 853.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    int_0 = -1065
    module_0.match(int_0, int_0)


def test_case_3152():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3153():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_0: bool_1, bool_1: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    int_0 = 1333
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    str_0 = "i8<q-|AN d|z^\x0cyLo"
    tuple_0 = (str_0,)
    list_0 = [tuple_0]
    tuple_1 = (list_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    int_0 = -3712
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    int_0 = 1138
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    bytes_0 = b"\xec\x8dy\x89:\xb7>\xae "
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    int_0 = 270
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    bytes_0 = b"\x1f\x15\xe3\xa5\xc7\xcaBa\xf8\x99\x0f\xd3\x10Q\x1d7"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    float_0 = -327.11781
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    int_0 = 425
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    complex_0 = 3031.5 - 127j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    str_0 = "Ii] j$p=~sp ,"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    bytes_0 = b"\xd7\n\x97D\x8aL\x1c2\xf8_|\xaa\x87Ah\x9fw"
    bool_0 = False
    list_0 = [bytes_0, bool_0, bool_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    bytes_0 = b"\xb78\xd0\x18\xa1_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    float_0 = 2627.6
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    int_0 = 307
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    bytes_0 = b"\xffGS\xd8G\xceu\xd6P\xf6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = False
    tuple_0 = (bytes_0, dict_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    bytes_0 = b"\x90\x12+\x1eL\xb7\r\xc3\x8e+^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    str_0 = "f[?f\x0b!C^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    str_0 = "sel\t:xP 59?zf+z4+U"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    int_0 = 676
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    list_0 = [tuple_0, tuple_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    bytes_0 = b"\x15"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    str_0 = "|Z'<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    float_0 = 853.0
    set_0 = {float_0, float_0, float_0}
    complex_0 = -393.9 - 855.4j
    module_0.get_new_command(set_0, complex_0)


def test_case_3181():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3182():
    int_0 = -3262
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    int_0 = -306
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    str_0 = "2N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    bytes_0 = b"$<\x85\xec"
    list_0 = []
    tuple_0 = (bytes_0, list_0, list_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    int_0 = -135
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    bytes_0 = b"\x9f\x0f\xc7\xfd$8]\xe0\x12K\xa5\xb5+C"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, dict_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    float_0 = -1181.3147
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    str_0 = "\rA=T(8"
    module_0.get_new_command(str_0, str_0)


def test_case_3191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3192():
    str_0 = "?AxxV\x0b#bqu6&3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    str_0 = "R\tLXRXb^+bE7$/1"
    list_0 = [str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    int_0 = 1155
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    str_0 = ";J6}+\x0ciH\x0c'|;~W3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    str_0 = "Ktrq7}X^Lk\n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    bytes_0 = b"\x92\xd0\x91\xbe\xceR"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    int_0 = -1804
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    int_0 = -680
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    bool_0 = True
    str_0 = "\x0c"
    tuple_0 = (bool_0, str_0)
    int_0 = 899
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    complex_0 = -958.05835 + 1195.6887j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    int_0 = 1943
    set_0 = {int_0, int_0}
    tuple_0 = (set_0,)
    list_0 = [tuple_0, tuple_0, int_0, tuple_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    str_0 = "+$N"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    bytes_0 = b"\x9ca\xc5\x87Y\xe5\x05^\xb3\x92}\x93\rm\xf3\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    str_0 = "$dT3%%MBng)t >eI6~L="
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_3211():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3212():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    bytes_0 = b"s"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    int_0 = 2259
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    str_0 = "foBMht'CADa"
    dict_0 = {str_0: str_0, str_0: str_0}
    bytes_0 = b"\x82%\xf77"
    tuple_0 = (dict_0, str_0, bytes_0)
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    str_0 = 'TxA$QjH"JCJo'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    int_0 = -1646
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    bytes_0 = b"\x1c\xbd\x1a}OPw\xeb\x85*\xdc\x16"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    int_0 = 1467
    bytes_0 = b"\x0c|\\"
    tuple_0 = (int_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    str_0 = "N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    bytes_0 = b"\xff\x06.\x18p\xc6\xe9\xd8\xe0\x85*\xc8\x8f\x91\xd6^H3\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    bytes_0 = b"\xde\xd9\xff\x9cA\xbak\x06\xe2L\xd9\n\x89\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    float_0 = -756.996
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    bytes_0 = b"\x92\x83\x88\xbc\xa9\x01"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    bytes_0 = b"A\xb0\x9d\xf0\x91\xe4\xcf5\x85\xac<\xc6\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    int_0 = 1656
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    str_0 = "9e_F.e]"
    bool_0 = True
    tuple_0 = (dict_0, str_0, bool_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    bytes_0 = b"\xa7\xd9\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    complex_0 = -2067.7349 - 14.0898j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    str_0 = "s J8])T$0BGb\x0c,/1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    int_0 = 2849
    list_0 = []
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    int_0 = 764
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    str_0 = "\r*rU=Dx\x0cbH51{_`/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    bytes_0 = b"J\x06t\x90\xaf\xcb\x06N\x14\xa9\xe3WJ"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    int_0 = -658
    str_0 = "3|Af("
    bytes_0 = b"\x0b\x87\xc4\x81|R\x04ffB\xce\x02\x0eW9F\xbf\x1b\x85"
    tuple_0 = (int_0, int_0, str_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    int_0 = 401
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    str_0 = "N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    int_0 = -138
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    float_0 = 2650.8698
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    str_0 = "&mgP+;.`?r]VWJPG80"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    str_0 = "_z405/?<4~y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    int_0 = 4030
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    int_0 = -142
    module_0.get_new_command(int_0, int_0)


def test_case_3247():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3248():
    str_0 = "hUe`bzY;\n5\x0cIN\x0c'"
    str_1 = "2?JJ}#}hDd1QW+d&"
    str_2 = "e;*|6NE1$cBukODPf3"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    float_0 = 1729.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    bytes_0 = b"\xcb\xdd\xcb\xc6\x80R\xf2\x87\x03v\x179\x19m"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    str_0 = "/UH]>1%>eZtDOio"
    int_0 = -1729
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    bytes_0 = b"\x98\\4\xce\x0f_\xf5\xa5\xf7A$9\x19"
    str_0 = "\rQKma\\&(%Xx(?I\x0b"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    complex_0 = 1928.189821 + 3430.57j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    int_0 = 6
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    float_0 = -1575.0315
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    int_0 = -1027
    list_0 = []
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, list_0, dict_0, dict_0)
    complex_0 = 361.1 + 427.7j
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    complex_0 = 737.4 + 1007.91671j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


def test_case_3258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3259():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    none_type_0 = None
    str_0 = "$355A6pl)x="
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    str_0 = "GO[XW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    str_0 = " z7YQ0mzS\nE-{8'v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    str_0 = "`a6=&q.(S\t<6.5#8q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    str_0 = "q\r[`vd;9\\nBr_w(~c:8"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    str_0 = " MCsIXHqlFE\nfU?W>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    str_0 = "??nGC(JA:4T2<H"
    int_0 = -3193
    dict_0 = {str_0: int_0, str_0: str_0, int_0: str_0}
    module_1.object(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    str_0 = "Q[C?]~\x0c|<Y<'/<AcP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    int_0 = -3199
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    str_0 = '5\x0c)"PrnN!='
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    str_0 = "&"
    module_0.get_new_command(str_0, str_0)


def test_case_3273():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3274():
    int_0 = -3657
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    float_0 = -1625.326
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    float_0 = -1854.0
    module_0.match(float_0, float_0)


def test_case_3278():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3279():
    bool_0 = False
    complex_0 = 3141.5324 + 893.639077j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    bytes_0 = b"F\xe85#X\xc6H\xe6"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    str_0 = "6%\r{ YF&V HZA"
    str_1 = "IjXT1hA~wx!)R"
    str_2 = ""
    dict_0 = {str_0: list_0, str_1: list_0, str_0: list_0, str_2: str_2}
    module_1.object(*list_0, **dict_0)


def test_case_3281():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3282():
    int_0 = 816
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    bytes_0 = b"\x89\x84\xce\xf6\xc0i\xf2\xf5\x14\xa7\x9c\xa2\xff"
    dict_0 = {}
    tuple_0 = (bytes_0, bytes_0, dict_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    int_0 = -1048
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    float_0 = -821.95
    dict_0 = {float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    bytes_0 = b"\xcd\xc0\x1fY\xf4"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    str_0 = "*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    bool_0 = False
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    int_0 = -807
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_3291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3292():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    float_0 = -2678.547
    module_0.match(float_0, float_0)


def test_case_3294():
    pass


def test_case_3295():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3296():
    bytes_0 = b"qn\x94U\xcb\xc2\xc6\xf3\x81X"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    str_0 = "MU8!1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    bool_0 = True
    bytes_0 = b"\xb3\x8b1\x88\xdd\x11\xd9\x06V\x0e\xb0T\xe02xq\xf8?B"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    complex_0 = 4277.187 + 2150.33j
    module_0.match(complex_0, complex_0)


def test_case_3300():
    pass


def test_case_3301():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3302():
    float_0 = -5609.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    str_0 = "4%,0zEOk#_kR'f"
    int_0 = -1040
    dict_0 = {str_0: str_0, str_0: str_0, int_0: int_0, int_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    int_0 = -1050
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    bytes_0 = b'\x92\x14\x9fm\xbf\xf7"\xecKJvf'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    int_0 = -2540
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    bytes_0 = b"\xab\xc3\xcd\xfcOf4\x08_\xda\xc1\x88\x88\xc2\xb3"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    bytes_0 = b"} \x93k;\xd7\xe2\x00;\x83\x8f\xeb!\x06?"
    int_0 = -336
    module_0.get_new_command(bytes_0, int_0)


def test_case_3309():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3310():
    bytes_0 = b"\xb1\xf0\xee\xe6\x0f\x0c\x02\xc94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    bool_0 = True
    str_0 = "cnHA"
    dict_0 = {bool_0: bool_0, str_0: str_0}
    tuple_0 = (bool_0, str_0, dict_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    bytes_0 = b"\x9f2\xeex\x84\x82\xfd\x1fAy\xb7\xcbW_\x1bpr"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    complex_0 = 1375.05 + 940.196j
    list_0 = [complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bytes_0 = b"q\xac3H\x8ez\xc8\n\xb9F"
    list_0 = [object_0, bytes_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    int_0 = -604
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    str_0 = "Bo9b~5"
    list_0 = [str_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    str_0 = "S\r\x0ceL+XQp\\Z"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    str_0 = "2D%kiy\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    float_0 = -2076.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    str_0 = ";EDnO5_4c%j]GMa8Xu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    float_0 = -131.652685
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    int_0 = -1183
    bool_0 = True
    tuple_0 = (int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    int_0 = 3778
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    str_0 = "-MM\\f0z 2}zJ"
    bytes_0 = b"\x80j\xe4#\xf8\xa1h\x14"
    dict_0 = {str_0: bytes_0, bytes_0: str_0, str_0: bytes_0}
    tuple_0 = (str_0, bytes_0, dict_0)
    int_0 = 678
    tuple_1 = (tuple_0, tuple_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    int_0 = 606
    set_0 = {int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    complex_0 = -540 + 1424.78j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    complex_0 = -821.7858 + 2557.358535j
    list_0 = [complex_0]
    module_0.get_new_command(complex_0, list_0)


def test_case_3331():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3332():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    str_0 = "yF0@R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    str_0 = "Q>m?5Z 6=\nzB:/L"
    module_0.match(str_0, str_0)


def test_case_3335():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3336():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    none_type_0 = None
    int_0 = -363
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    str_0 = "5P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    bool_0 = False
    complex_0 = -2364.656 + 3036j
    dict_0 = {bool_0: bool_0, complex_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    int_0 = -2706
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    int_0 = -983
    tuple_0 = (bool_0, dict_0, bool_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    int_0 = 1193
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_3346():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3347():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [list_0, object_0]
    module_0.get_new_command(object_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    int_0 = -1529
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    str_0 = "y0I<#qgRqt{6t4:G@"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    complex_0 = -1406.382694 - 3247.699659j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


def test_case_3352():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3353():
    dict_0 = {}
    bytes_0 = b"\x19\xd8\x11\xcf\x19\xe4u\xee\x99\xb001z\xef\xcf\xcf<\x89"
    tuple_0 = (dict_0, bytes_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    bytes_0 = b"En\xc7Gi9\xba"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, set_0)
    str_0 = "7#9o"
    tuple_1 = (tuple_0, str_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    float_0 = 2511.45355
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    float_0 = 314.0
    int_0 = -2323
    list_0 = [float_0, int_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    str_0 = ""
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    bytes_0 = b"\xae\xd1\x8aA/sn$\x9f)b\x9a\xa7\r\xf9*\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    bytes_0 = b"Kw\xc9\x93\xfd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    int_0 = -3268
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    str_0 = "T#%,\\tu#$,6&NG"
    list_0 = [str_0, str_0, str_0, str_0]
    str_1 = ">d7_%V%%+TU-{vJw"
    list_1 = [str_1, str_1, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    bytes_0 = b"\xe0\xef&'L\x8b\xebh\x13\x90\x19\xdbn\x14\xcdu\xa0\x16T\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    str_0 = "t!W"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    list_0 = []
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    float_0 = -1983.012785
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    bytes_0 = b"Ye"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    int_0 = 1576
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    int_0 = -150
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


def test_case_3374():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3375():
    float_0 = 1314.75277
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    str_0 = "6!oD>2S5\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    str_0 = "`\tBG !)A8N/\x0cAW|/j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    bytes_0 = b"u\t\xe6M\xacH\xa5\xb9\xdc\xf4x\xce\xc9u\xa4\x12\xe8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    str_0 = "`eeL6FeOqdk:kQ)20X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    str_0 = "=!alo"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    str_0 = "!m\x0cbPA\x0b!oxEkmMJL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    bytes_0 = b"_3\xafA\x19\xcf\x94\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    bool_0 = True
    module_1.object(**bool_0)


def test_case_3384():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3385():
    complex_0 = 1258.7198 - 1928.79936j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    bytes_0 = b"\xad\xbeS\xe6o\x9e\x1a\xfc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    int_0 = -552
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0, dict_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    bytes_0 = b"\xb6\r\x10\xb4\xf9\xd5+\x89\x89@\x9c\x1c5\xd9v\xb7+\xdb"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, set_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    bool_0 = False
    complex_0 = 2687.47 - 459.11j
    list_0 = []
    tuple_0 = (bool_0, complex_0, list_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    bytes_0 = b"\xac\xed\x9c\xbb\x1c|\xc8\xd3ZB\x93\xb4\xa2X\x8a\x88\xa19"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    float_0 = 4325.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    int_0 = -714
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    str_0 = "?s,[;Yqw?3IjqGE[=e"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    int_0 = -1495
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    bytes_0 = b"0i$?\x8d\xff\xea7\xd9Y\x06\xdd7\xab\xe9\x9b\xc1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3398():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3399():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    int_0 = -1618
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    int_0 = -225
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    int_0 = 3767
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    str_0 = "p\ti|rRb8~F=}A\t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    bytes_0 = b"\xea;\x9cs\x00\x05$t%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    int_0 = -852
    tuple_0 = (int_0, int_0)
    set_0 = {tuple_0, int_0, int_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    int_0 = -1584
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    int_0 = -201
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    int_0 = -1
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    str_0 = "SHku`p{*239_9m}3I^\x0c8"
    list_0 = [str_0, str_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    bytes_0 = b"0\x18\xd2\xf8\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    bytes_0 = b"\x8a\x90\x8d\xd6J{9\x8a\x0c\x04\xe4\x10'\x89u"
    module_0.match(bytes_0, bytes_0)


def test_case_3416():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3417():
    int_0 = 3452
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    float_0 = -514.74
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    str_0 = "*>(1u(RZi3o#VH@jkTEu"
    float_0 = -75.5775
    dict_0 = {}
    tuple_0 = ()
    tuple_1 = (dict_0, str_0, tuple_0, float_0)
    bool_0 = False
    tuple_2 = (str_0, float_0, tuple_1, bool_0)
    module_0.match(tuple_2, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    str_0 = "@ k0.%(]@"
    bytes_0 = b"A\xd2@e\x17\xaa\x83\xa7&\xeb6+K_B\r"
    complex_0 = -1309.4727 - 1833.22782j
    float_0 = -5961.78
    tuple_0 = (bytes_0, complex_0, float_0)
    int_0 = -2257
    dict_0 = {str_0: tuple_0, str_0: str_0, str_0: int_0}
    module_1.object(**dict_0)


def test_case_3422():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3423():
    bytes_0 = b"\xb2\xd8\xd8\x15\x05\xd8`5"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3425():
    bytes_0 = b"c\x89\x0f\xba\x99"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    float_0 = 852.955
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    bytes_0 = b"\xa8\x08\xcc\x1c\xa7\xe0I\x16\xc8\x8b\x1a\x9b\x16\x0e\xfb\xe1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    complex_0 = 1943.4895 + 2977j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    int_0 = -1197
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    int_0 = 3760
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    bytes_0 = b"[\xae\xd9\x0f\xa8T$b\x8f\r\x8fP\xe9\x00\xf7\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    object_0 = module_1.object()
    int_0 = -638
    dict_0 = {int_0: int_0, int_0: object_0, object_0: object_0}
    tuple_0 = (object_0, int_0, dict_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    object_0 = module_1.object()
    bool_0 = False
    tuple_0 = (object_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    bytes_0 = b".2<Hy\xb8\x10\xc7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3443():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3444():
    bytes_0 = b"+\xbd\xa2nF3\xf1\xac\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    bytes_0 = b"\x13\xb5\x13\xa0\x04Kgp:\x14%\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    int_0 = 5684
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    int_0 = 3102
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    bytes_0 = b"\xf7\xf1hY"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    str_0 = "b)1Q9cbe^l@-`jo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    int_0 = 1574
    module_0.match(int_0, int_0)


def test_case_3453():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3454():
    int_0 = 1690
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    float_0 = 3505.63
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    list_0 = []
    set_0 = set()
    list_1 = [list_0, list_0, set_0, set_0]
    tuple_0 = (list_1,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    str_0 = "fY?;IVA\x0bA\tZq Ue^W"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    int_0 = -103
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    complex_0 = -571.405 - 1091.8982j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    bytes_0 = b"<9&!\xb5\xa8T\xc0<D0=\x9f\x02\x1c\xfe\xd5\xaeN\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    int_0 = 1096
    list_0 = [int_0, int_0]
    int_1 = -2194
    str_0 = 'y|H<"t^rZ[s'
    tuple_0 = (int_0, list_0, int_1, str_0)
    set_0 = {str_0, int_0}
    tuple_1 = (int_0, tuple_0, set_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    int_0 = 0
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    str_0 = "_u)!]BAOg}\r"
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    int_0 = 189
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bool_0 = True
    tuple_0 = ()
    bytes_0 = b""
    tuple_1 = (bool_0, tuple_0, bytes_0)
    dict_0 = {tuple_1: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    int_0 = -276
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    bytes_0 = b"1*\x90\x16vA\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    int_0 = -1970
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    str_0 = "xmzI=A|}U\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    bytes_0 = b""
    int_0 = 4591
    tuple_0 = (bytes_0, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    int_0 = -1308
    tuple_0 = (int_0,)
    bool_0 = True
    bool_1 = True
    dict_0 = {int_0: bool_0, bool_0: bool_1}
    tuple_1 = (tuple_0, bool_0, dict_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    str_0 = "nt;~(3AZ-WsuH\r]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    complex_0 = 3144 - 2067.49262j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    str_0 = "dk.O Ivx4\x0c\\d*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    bytes_0 = b"\xfb{\xcejb[\x85\x1dO\xee\xe2\xed\xdc\x85X\xa2\x93h\xd4\xb8"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    bytes_0 = b"\x03\xd7\x94XR\xd3<\x98\x8bM6\xec\x1b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    str_0 = "KqP\nOer~E8\t|+"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    int_0 = -2246
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    str_0 = "O05;\x0bsq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    int_0 = 722
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    bytes_0 = b"g\xea\x85A\xacY\x8a\xe1\xbcFo?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    none_type_0 = None
    str_0 = "~\r"
    dict_0 = {str_0: str_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    bytes_0 = b"*\x96\x1bV\xc9:\x93\xe5\xec\x15\x1f\xa2\xf1_\x9e9\xd5\x01\x13"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    str_0 = "qP4:G"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    bytes_0 = b"\xf7\xef\xe0\xb0\xdb\xcf\x16\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    str_0 = "\tMhN+nX1\x0c$0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    bool_0 = True
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    str_0 = "xUgH:~54r\tty5h[aAq9/"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    str_0 = ".uFF>\nvcn_eRD{ahR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    bytes_0 = b"\xad\x82\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    bool_0 = True
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    bytes_0 = b"\xed\xe89@\x12\xcf\xf2\x15`"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    bytes_0 = b"\xe1\xa3\x9e\x91\xa1\x1a\xc4 \xb8zLL\xb3\xd0\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    float_0 = -5613.37
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    float_0 = -221.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    int_0 = 1011
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    int_0 = -1250
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    bool_0 = True
    str_0 = "sV<C~+;\\{vTpl?Y"
    tuple_0 = (bool_0, str_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_3506():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3507():
    complex_0 = -558 + 1842.71j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    float_0 = -1695.19
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    int_0 = -3449
    tuple_0 = ()
    dict_0 = {int_0: tuple_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    str_0 = "igT"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    str_0 = "|vn"
    str_1 = "ZUMQxYs{87v__a["
    dict_0 = {str_0: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    str_0 = "Xl0UexDf>K1E!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    bytes_0 = b"\x1e\xf6\xfd\xcf\xb9"
    module_0.match(bytes_0, bytes_0)


def test_case_3515():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3516():
    bytes_0 = b"w#\xaf\xa4\xf2M\xf5\xc1a"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    float_0 = 3031.6446
    str_0 = "GTT\x0b~ekc<`\t"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    float_0 = 2131.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    int_0 = 536
    int_1 = 1003
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    int_0 = 2572
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    str_0 = "eq;6uh_*48qr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    int_0 = 4482
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    float_0 = -2406.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    float_0 = -3450.0606
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    str_0 = "r<^M*"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    int_0 = 3400
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    int_0 = -2566
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    bytes_0 = b"7\xe2\xf4<\xee0\x1av\x82\xe4\x90\xc0\xd4\xdf\xcd\xc8\x9d\xf7"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    bytes_0 = b"\xb3\xcf;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    int_0 = -890
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    bytes_0 = b")jvi\xe7I\xe0\x9f`\xd0\x10q"
    float_0 = 176.07
    bool_0 = True
    list_0 = [bytes_0, float_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    str_0 = "E9F<sb\x0c{DtY"
    int_0 = 1720
    tuple_0 = (str_0, str_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    str_0 = "0MLA{rb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    bytes_0 = b"\x03X\x05\x90f\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    int_0 = 1736
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    str_0 = "Lf\x0b_!K>X}*1+}u*\rf."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    str_0 = "3U\r^\t]={$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    tuple_0 = ()
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    object_0 = module_1.object()
    str_0 = "k0a!\"Z#Z-nD'\x0cD%JKv= "
    dict_0 = {object_0: object_0, object_0: str_0, str_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    int_0 = 1152
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    bytes_0 = b"\x0e~\xc7\xd5"
    list_0 = [bytes_0, bytes_0, bytes_0]
    int_0 = -4778
    list_1 = [list_0, list_0, int_0]
    module_0.match(list_1, int_0)


def test_case_3545():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3546():
    str_0 = "6-R&9$41c{d++R1a9\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    int_0 = 368
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bytes_0 = b"b\x11\xf8\x96C\xaeG3\x00\x9d\xaa\xaf\x00\xaeab\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    complex_0 = -4228.39 + 166.628277j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    str_0 = "ZQZ`B(#w<JhF[85-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    str_0 = "}y_'e\x0bs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    str_0 = "=PWBkGN8@ae"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    str_0 = "p=OaA<D}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    int_0 = 1408
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    str_0 = "D~t&juiCus8=\\J3c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    bytes_0 = b"\xc1N\xa2\x1bZ`n?"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    int_0 = 3318
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    bool_0 = False
    bool_1 = True
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    tuple_2 = (bool_0, bool_1, tuple_1, tuple_1)
    set_0 = {tuple_2, bool_1}
    list_0 = [tuple_2, tuple_2]
    tuple_3 = (list_0,)
    module_0.match(set_0, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    str_0 = ',wM=z< TkE5nG)0/tH"'
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    float_0 = -2018.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    int_0 = 2169
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    bytes_0 = b"\xc5\x08\x8e\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    bytes_0 = b"t\x80\x95E\xca\x91\x90\xd4\xcb%0K\x82"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    complex_0 = 934.3 + 1393.87073j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    bytes_0 = b"*e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    int_0 = 2408
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    int_0 = 588
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    str_0 = "uwAT|$\r[Qd9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bytes_0 = b"L\xe7\xe6\xf6\xc3U\x90(\xa4.\xca\x88Fs\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    int_0 = -2792
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    list_0 = []
    float_0 = -1871.3243
    tuple_0 = (float_0,)
    tuple_1 = (list_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    int_0 = -3263
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    float_0 = 3304.61
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    str_0 = '."d\\\x0bs+1@/(V`*'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    bytes_0 = b"\x9eN)\xa4\xb5\xcdr"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    str_0 = "LI//6U"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    bool_0 = False
    str_0 = "(AVaJ_V^7`a\n1"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    str_0 = "6F>"
    str_1 = "dS"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    str_0 = "0\tSwp\t'_ttrgTobvA+T"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    str_0 = "qU<2(LV>I~RhV;E0vEm"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    str_0 = "tK?_w!`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    float_0 = -904.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    float_0 = -843.49
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    str_0 = "l\\jF&.r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    dict_0 = {}
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    int_0 = -660
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    str_0 = "6b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    bytes_0 = b"\xf3\xbf\xf2\xd2\x92f\xd93:&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    int_0 = 2040
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    bytes_0 = b"\\\xfeET\xae=\x86\xe4\xff\x08\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    int_0 = -816
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    int_0 = 680
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    str_0 = 'kbh?d7zw.\rbyR"e||'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    bool_0 = True
    bool_1 = True
    tuple_0 = ()
    tuple_1 = (bool_1, bool_1, tuple_0)
    tuple_2 = (bool_0, tuple_1)
    list_0 = [tuple_2, tuple_1, bool_1]
    module_0.match(list_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bytes_0 = b"\xf6|="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    int_0 = 2567
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0, bool_1}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    int_0 = -132
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = "}YV#N\x0c<Hoa-~LA"
    str_1 = "<`j_u8$#h`G!"
    str_2 = '+1?(Gpfc["(Y%t{>'
    dict_0 = {str_0: str_0, str_1: bool_0, str_1: str_0, str_2: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    int_0 = 170
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    bytes_0 = b"\xa5a\xa2\x13\x8e\x97\xe8\x1e\xf6\xd8n\xdd"
    list_0 = []
    tuple_1 = (bool_0, tuple_0, bytes_0, list_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    int_0 = -3014
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    str_0 = "rG\x0c4i]Mud"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    int_0 = 19
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    int_0 = -2003
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    bool_0 = True
    int_0 = 2905
    bytes_0 = b"\xebx\xb3"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, int_0: bytes_0}
    bool_1 = False
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bytes_0 = b"r\x9f\xbed\x1d\xe2\xd4\xa4\xd19\xf9"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    int_0 = -1485
    bool_0 = True
    bool_1 = False
    set_0 = {int_0, bool_1, bool_0}
    tuple_0 = (int_0, bool_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    str_0 = '-";C Km.d|-rVF/5'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    float_0 = -2056.06159
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_3622():
    pass


def test_case_3623():
    pass


def test_case_3624():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3625():
    float_0 = 288.83215
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    str_0 = "\rwI$h!p%h\\n4Ro=L5</t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    bytes_0 = b"\xaa\xe1m"
    str_0 = 'BB6x3\n7"%elS)8]+ I'
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0, bool_1}
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    int_0 = 586
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    complex_0 = -878.108 + 763j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    int_0 = -1943
    int_1 = -2623
    set_0 = set()
    tuple_0 = (int_0, int_1, set_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    int_0 = 2031
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    float_0 = 4946.045152
    module_0.match(float_0, float_0)


def test_case_3638():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3639():
    int_0 = 43
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    str_0 = '"qD\t.'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    float_0 = -1239.71696
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    int_0 = -83
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    str_0 = "</#3:Idv\rCe\rJ~8qrW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    str_0 = "JLywJ9Z#i"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    complex_0 = 1605.9 - 39.253j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    float_0 = -354.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    int_0 = -952
    complex_0 = -3169.4 - 253.937369j
    dict_0 = {
        int_0: complex_0,
        complex_0: complex_0,
        int_0: complex_0,
        int_0: complex_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    bytes_0 = b"M"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    bytes_0 = b"\x87\x9c\xfeEX"
    module_0.match(bytes_0, bytes_0)


def test_case_3652():
    pass


def test_case_3653():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3654():
    bytes_0 = b"<\x16\xe4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    str_0 = "\r\r>rY+)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    str_0 = 'N{GdLu"7$V9q%J{ayS'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    str_0 = "S\nH*LK--d(slO3*'AK:R"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    int_0 = 101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    int_0 = 3927
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    float_0 = -820.5974
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    bool_0 = True
    float_0 = 1318.5115
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    tuple_0 = ()
    bytes_0 = b"I\xd3\xb9\xac\\\xcd\x1f\xe1\xac1\xef\x1a\xd3\x08^/"
    dict_0 = {tuple_0: tuple_0, tuple_0: bytes_0, tuple_0: tuple_0}
    str_0 = "GB\x0cA"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    float_0 = -728.777
    dict_0 = {float_0: float_0}
    list_0 = [float_0, dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    tuple_0 = ()
    str_0 = "WuT-BXol B,:\x0b5#v|"
    tuple_1 = (tuple_0, str_0)
    bool_0 = False
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    int_0 = 1418
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    str_0 = "!]^W&-@'"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    bytes_0 = b"\x18`\x92\xb3\xbe"
    set_0 = {bytes_0, bytes_0}
    str_0 = '"%sDQ'
    bytes_1 = b"lc\x1005\xf2\xad,$\xf8\xdb\x15u"
    tuple_0 = (set_0, str_0, bytes_1)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    bytes_0 = b"\xb7\xc3\x13.o\xd6}?<\x9c\x05z\xad\xfa\xcb\xca;\xfe\xe7-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    float_0 = -1664.04437
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (list_0,)
    tuple_1 = (tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    bytes_0 = b"C\x1fCED\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    none_type_0 = None
    bytes_0 = b"\xc4\x05SfD&\x07O\x11"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    bytes_0 = b"\xc7\xc5\xb1\x80f\xd1\x8cFt\xeb\xc0\xab\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    float_0 = 1158.0
    bytes_0 = b"\x9a\x87\xa6\x88c"
    tuple_0 = (float_0, float_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    int_0 = 3166
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    int_0 = -1271
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    set_0 = set()
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    bytes_0 = b"m\xd4H\x15\xfas\x1d>\xc9O3\x11\x0ey3a\xd3\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    bytes_0 = b"\xd1\xd8\xdd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    str_0 = "G:rLbCl<P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    str_0 = "I:?HEa2!\tGE7r-X*rf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    bool_0 = False
    bool_1 = True
    set_0 = set()
    tuple_0 = (bool_0, bool_0, bool_1, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    int_0 = -1041
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    bytes_0 = b":*\xefj\xe8{bvK/\xce\x18\xa3F\x91\xfd\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3688():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3689():
    int_0 = -607
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    int_0 = -769
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    float_0 = 1166.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "AK?:-\nPPf2zc\t"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    str_0 = "!~q@"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    complex_0 = -5984.3486 - 4447.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    float_0 = 2146.698456
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    bytes_0 = b"O)\xf3\xf1\xa9P\x96\x1dC\x1f\x08]"
    list_0 = [bytes_0, bytes_0]
    bool_0 = False
    str_0 = "PSerj8)G&Fs\ruk65"
    tuple_0 = (list_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_1, bool_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    bytes_0 = b"\xacF\xb2+JL\x18\xb28-\xc9\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    int_0 = 1569
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    float_0 = 367.163607
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    float_0 = 1290.81
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    int_0 = 3657
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    bytes_0 = b"X-lVi\x9a]\xc2>#\x19l-\x17\xa4\xa4coo"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    int_0 = -893
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    str_0 = "O!bm}rG3ySx"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    int_0 = -2350
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    str_0 = '}Tsd|/Ba:"g(]G^I{'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    int_0 = -404
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    bytes_0 = b"U_\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    str_0 = "]v,mtxgv0"
    int_0 = 876
    tuple_0 = (str_0, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    str_0 = "Lr\t@\n\x0cr6i/q^'h6(@3Q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    bytes_0 = b"\x0b\xcc\xd6\xeaW\x94\t6R\xac\x1c7\x16\x98\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    str_0 = "\r"
    bytes_0 = b"\x1b9\x9c"
    module_0.match(str_0, bytes_0)


def test_case_3716():
    pass


def test_case_3717():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3718():
    list_0 = []
    bool_0 = False
    bool_1 = True
    bytes_0 = b"\xc8\xe0\xe0\x1c"
    tuple_0 = (list_0, bool_0, bool_1, bytes_0)
    list_1 = [tuple_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    int_0 = 773
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    bytes_0 = b"\x1a\xee\x9e\xf4\xee\x19\xa6%\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    str_0 = "JY\\ RIMJ\\\rW~<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    complex_0 = -434.807 + 816.7403j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    str_0 = "]0-cjh!#;1]->_LH=j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    bytes_0 = b'I"\x8f%7\x84\x8e\xdb\x05\x80\xbe\xf0A\x12*\x81SN'
    dict_0 = {bytes_0: bytes_0}
    set_0 = {bytes_0}
    bytes_1 = b"]\xf6\xdb"
    tuple_0 = (dict_0, set_0, bytes_1, bytes_1)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    str_0 = "bz~aD\tw_FdAJq2)=ht"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    bytes_0 = b"\xcd\x85\xcc\x80\xf9\x12b\xb9\x87\x8e\x9e\xd9]\x9egr"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    complex_0 = 3985.83 - 1331j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    str_0 = 'z}{S.AzA^r.\x0b"L\x0b\\KB'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    float_0 = -2203.17989
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0, list_0]
    bytes_0 = b"\xb9\xd6\xdb"
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    int_0 = 1845
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: int_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


def test_case_3735():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3736():
    str_0 = "'8`mZz%Z`k\x0c"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    bool_0 = False
    list_0 = []
    list_1 = [bool_0, bool_0, bool_0, list_0]
    str_0 = "uG4?_SD:9Wu"
    str_1 = "GX<%B>R{*pEg NwX'"
    dict_0 = {str_0: list_1, str_1: list_1, str_1: list_1, str_1: bool_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    bytes_0 = b"1S"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    str_0 = 'Drcu559,\\L"1zu21l'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    bytes_0 = b"\xd1.\x81\xc5\x88\xd2O\x982"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    bytes_0 = b"#\x9e\x00\xba\x81\xa1\xb9\x00"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    float_0 = -1376.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    str_0 = 'G~?$d(+@"mE'
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    str_0 = "MX(|CC**^_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    complex_0 = -3964.8 + 4419.08j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    bytes_0 = b"?<\xee\xce\x11\x08U}$\x006\xc0\x91\x00\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    list_0 = [object_0, object_0]
    bytes_0 = b"\xe1\x9c|\xd7\x0e\x07*Y\xeaSPD\xad\x8a\xc8\xd7\x8c"
    tuple_0 = (set_0, list_0, list_0, bytes_0)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    int_0 = 2587
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    str_0 = "y\\x\r%HPmlwB-4-4;"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    bytes_0 = b"\x9dn\xa2\xd7\xbb\x84\x95A}`L\x98\x99\xe0\xcfH"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    complex_0 = 2250 - 2239j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    str_0 = "uPO7VBS\\3gU(x3b\x0bM~q"
    module_0.match(str_0, str_0)


def test_case_3753():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3754():
    bytes_0 = b"Pf\xae\xc6\xf947\xf4\xff\x8b0\x16\x87\x92\x13\x00\xa2|$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    float_0 = -1150.0
    module_0.match(float_0, float_0)


def test_case_3756():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3757():
    bytes_0 = b"\xef\xd5!\x1d\x08\x1c\xe7"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    float_0 = 3638.0
    bytes_0 = b""
    list_0 = [float_0]
    tuple_0 = (float_0, bytes_0, list_0, float_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    str_0 = "YOlUV|*Zm="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    int_0 = -4019
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    float_0 = 2138.1302
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    complex_0 = 1493.92 - 1884j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    int_0 = 1781
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    str_0 = "XG}IV\x0c/m=Pm\x0ct"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    float_0 = 303.799
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    int_0 = 1589
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    bytes_0 = b"\xa63U'L\x99\x01\x11\x00\xae"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    none_type_0 = None
    str_0 = ""
    list_0 = [str_0, str_0, none_type_0]
    float_0 = 893.59544
    bool_0 = False
    tuple_0 = (str_0, list_0, float_0, bool_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    bytes_0 = b"F\t2mc?1\xf9\xa9\xbe\xc5\x95O\xac\x8f\xf2\xb96\x9c9"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, tuple_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, tuple_0)


def test_case_3770():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3771():
    int_0 = 836
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    int_0 = -226
    set_0 = {int_0, int_0}
    list_0 = [int_0, set_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    int_0 = 3090
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    bytes_0 = b"\xddz\x13e\xb4\xa7\x18\xf9p"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    bytes_0 = b"\xc7\x18h\x8b]\xe8x\xb0\x01\x9a\x87\xaf\xdd\xa6\x83\xd4\xee\x80\xc6"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    bytes_0 = b"\xeded7\xf2/\xb2\x81S#\x9f\xd4\xf6\xe8\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3778():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3779():
    str_0 = "s}!-|&>n9Df1"
    bool_0 = True
    int_0 = -1550
    bool_1 = True
    str_1 = "@nX%9Y\\Kv^"
    int_1 = 2538
    set_0 = {int_1}
    dict_0 = {}
    tuple_0 = (bool_1, str_1, set_0, dict_0)
    bool_2 = False
    tuple_1 = (bool_0, int_0, tuple_0, bool_2)
    module_0.match(str_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3781():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3782():
    float_0 = 753.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    int_0 = -747
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    str_0 = "wF`MPC\n&sAeet"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    float_0 = -2485.92
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    int_0 = 2766
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    bytes_0 = b"\xbb\x8e7-\xd9uO\xa8\x06p\xedN\x07\xda\x99\xf3\xf3"
    int_0 = -776
    dict_0 = {bytes_0: bytes_0, bytes_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    str_0 = "B"
    module_0.match(str_0, str_0)


def test_case_3789():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3790():
    int_0 = -3453
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    int_0 = 3188
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    bytes_0 = b"T{\x02\xaa"
    float_0 = -4170.4241
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    str_0 = "$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    bytes_0 = b".\x0f\xdd\x12\x99\x0f\xa1k"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    str_0 = 'j`Rn=TyY$ w+X"2\\>\x0c'
    float_0 = 1058.4
    dict_0 = {str_0: str_0, str_0: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    complex_0 = -2003 + 610.39j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    int_0 = 2228
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    float_0 = 2091.33
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    int_0 = 285
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    float_0 = 1131.48
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    bytes_0 = b"\x04\xea\x98=&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    bytes_0 = b"UK>H&\x83"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    complex_0 = -2823 - 1395.65j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    bytes_0 = b"\x89lO\x13\x99\x86\xca\xbc\xf0\xb8\xdc="
    bytes_1 = b"8\xba\xa7b"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    float_0 = 1182.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    float_0 = 940.0
    tuple_0 = (float_0,)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    complex_0 = 2196.4337 - 512.17j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    list_0 = [set_0, set_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    int_0 = -1663
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0, int_0, int_0]
    bytes_0 = b"N\x88G\x1a\x85o\xb6\xafj\x9d\x176\xbc\xfc^ot"
    tuple_0 = (list_0, bytes_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    bytes_0 = b"\xe9\xc6\xf4\x11)\xcd\xad''"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    str_0 = "6\x0c"
    bool_0 = False
    set_0 = {str_0, str_0, str_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    bytes_0 = b'1%\xf2a7\x05*"i\x19]C\x1b'
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3813():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3814():
    bytes_0 = b"y\x98rj\x18Y]'D\xe8\xc2W ~\xd7\x00\xdf`"
    set_0 = {bytes_0, bytes_0}
    int_0 = -2849
    tuple_0 = (set_0, int_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    float_0 = 125.5
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    set_0 = set()
    dict_0 = {}
    complex_0 = -2337.974 - 1053.78j
    tuple_0 = (set_0, dict_0, complex_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    list_0 = []
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    float_0 = 2305.606
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    str_0 = "O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    int_0 = 1397
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    int_0 = 886
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    bytes_0 = b"(\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    float_0 = 2627.2831
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    float_0 = -1729.613
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    str_0 = "5~pf5`^Ew  "
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    str_0 = "Wj4!"
    str_1 = "}~{nW"
    str_2 = "V"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    int_0 = -2061
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    int_0 = 1026
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    str_0 = "2*Fcok\n;LJ7ry/!\t8n*F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    bytes_0 = b"\xefA\xb0\xd4\xe1\x14\x1f\x05`V\xd1!\xc6\xe2\x15\xb9[\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    float_0 = 1362.993053
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    complex_0 = 274 + 171.0472j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    complex_0 = 762.0502 - 2467.4189j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    bytes_0 = b"\xc5\xfa\x13\x07mnL\xf8Q\xd3P\xec\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    int_0 = 2902
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    complex_0 = 1310.106 + 666.61222j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    complex_0 = -1539.7 - 349.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    complex_0 = 693.759349 - 208.459j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3845():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    bool_0 = True
    str_0 = "AMcM\x0brR2\x0c"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    bytes_0 = b":\xb4\xbe\x9b\xa8md\xcb[9\t.QOtEm\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, bool_0, bool_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    int_0 = 464
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = True
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bytes_0 = b"\xd3\xd1\xe9\x93~%\x13Q!\x10"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    bytes_0 = b"\xb15\x94\x8c\xd8\xbf#\xf1v"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    float_0 = 245.0
    module_0.match(float_0, float_0)


def test_case_3854():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3855():
    bytes_0 = b"\xf1\x10OJ\xec\x17\n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_3856():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3857():
    str_0 = ")XJo?hm&/7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    bytes_0 = b"\x1co\xf4v"
    module_0.match(bytes_0, bytes_0)


def test_case_3859():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3860():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3861():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3862():
    float_0 = 209.177658
    module_0.match(float_0, float_0)


def test_case_3863():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3864():
    bytes_0 = b"n\xae3\xe1\xe64\x96\xbb\x81\xdf\x8b\x082\xbb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    bytes_0 = b"0^\xadZ\x81\xb8X"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    str_0 = "v{9GwQj@n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    int_0 = 623
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    str_0 = '\rs6NG"3A`Z.~_'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    bytes_0 = b"!\x93\xde\x7fl\x8f<\xc6\xb5\x1d(5P\x012\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    bytes_0 = b"1\x8d"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    str_0 = "1."
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    int_0 = -59
    module_0.match(int_0, int_0)


def test_case_3873():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3874():
    str_0 = "[p`Uf/[)L$z`Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    bytes_0 = b' K&\xeb\xe4\x19".\xe1\xad\x12\x1f\x1d\xbc'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    bytes_0 = b"\xce\xa0\x0b\xc5\x84\xa1G/p\x17\x95\x8bd\xb9\xb1'\xc225@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    int_0 = -1176
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.match(object_0, list_0)


def test_case_3883():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3884():
    bytes_0 = b"\xb7\xd0\xa1A\x93x"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    float_0 = -4456.759894
    complex_0 = 4228.2034 + 218.1j
    module_0.match(float_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    int_0 = 989
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    int_0 = -7718
    str_0 = "amE2u\x0bgdPbDqG,[gVzv"
    bytes_0 = b"W\xbe\xa9<\x1bofX(]a\xc6LW\xb3\x80*M"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0, bytes_0)
    str_1 = "bko"
    dict_1 = {str_0: tuple_0, str_0: bytes_0, str_1: tuple_0}
    module_1.object(*int_0, **dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    bytes_0 = b"\x89\xb8\x82Z\x06\x15\xa4\x14\x07\x8d~\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    float_0 = 2896.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    float_0 = -2805.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    str_0 = ")2rlKe"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    bytes_0 = b"5\xb1\xfcL@\x93\xaa2pd\x89\x05@NCC^\xcc\x10"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    none_type_0 = None
    module_1.object(*none_type_0)


def test_case_3895():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3896():
    int_0 = 1906
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    int_0 = -128
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    str_0 = '@f%24\tV\t\n\x0c"'
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    bytes_0 = b"\xc5oZ_\xfe\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    float_0 = 524.29411
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


def test_case_3902():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3903():
    str_0 = "qrw);Y\rloY.wTZhgUv"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    bytes_0 = b"\xac\xfa"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    bytes_0 = b"\xee\xee\x89u\xc8\xcc\xd4[."
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    complex_0 = -379.9 + 575.81126j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    int_0 = -704
    bytes_0 = b"\t\x16"
    tuple_0 = (int_0, bytes_0)
    list_0 = [tuple_0]
    bool_0 = True
    tuple_1 = (list_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    int_0 = -869
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    int_0 = 1658
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    int_0 = -159
    str_0 = ":Idbqb@LJq7E|jU"
    set_0 = {int_0, str_0, str_0, str_0}
    tuple_0 = (int_0, str_0, set_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    float_0 = 684.65
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    bytes_0 = b"w{;\xb8\x0f\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    str_0 = "S-o*a6.9MQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


def test_case_3915():
    pass


def test_case_3916():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3917():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    int_0 = -584
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0, list_0]
    list_2 = [list_1]
    module_0.get_new_command(list_2, int_0)


def test_case_3919():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3920():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_3921():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3922():
    str_0 = "/6w`e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    bool_0 = True
    bool_1 = True
    str_0 = "|:KfLyo{6w,~iZ\ni"
    tuple_0 = (bool_0, bool_0, bool_1, str_0)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    int_0 = 2937
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    int_0 = -1976
    complex_0 = 1056.02 + 1210.66197j
    list_0 = [int_0, complex_0, int_0]
    str_0 = "Mr^yP&uzYh;iT&N"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    int_0 = 1525
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    int_0 = -1101
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_1: bool_1, bool_0: bool_1}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    bytes_0 = b"\x9a\x88\x81\xf3\xc5\x92\xa8\xdec\x08\x92\xec!\xf6\xd7lA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    complex_0 = -1543.7 + 2289.3j
    set_0 = {complex_0, complex_0}
    int_0 = 958
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    int_0 = -1432
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    int_0 = -2124
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    bytes_0 = b"\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    int_0 = -442
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    bytes_0 = b"\x8f\x98\nz\xfa\x0f\xea\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_3938():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3939():
    complex_0 = -1748.1 - 1213.3572j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    float_0 = -1088.754795
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    bytes_0 = b"\xb8\xa6\xd2\x18"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    complex_0 = -4609.79 - 1365j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    bytes_0 = b"\x89q"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, bool_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    complex_0 = 328.827919 + 987.311508j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    str_0 = "A3BGK}R~R}rU!'="
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    bytes_0 = b"\xad"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    bool_0 = True
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


def test_case_3949():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3950():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    str_0 = "CNS"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    int_0 = 1697
    bytes_0 = b""
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    str_0 = "~.H\nTG\r!\tZi&P&1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    str_0 = "<mXzaHw*\n\\\t"
    module_0.get_new_command(str_0, str_0)


def test_case_3955():
    pass


def test_case_3956():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3957():
    set_0 = set()
    str_0 = 'UTA`3Q/!S}|"u0aG'
    tuple_0 = (set_0, str_0, set_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    bytes_0 = b"\xf7\x86\xcbt\xfa\x98\xd0\xa3\x0b6\xf4\x1b\xcf!\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    float_0 = -1029.0271
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    float_0 = -1731.0
    module_0.match(float_0, float_0)


def test_case_3961():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3962():
    str_0 = "g<|^4~)~:g\rF_|T?5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    bytes_0 = b'\xea\x14y\xad` "\xb0+X"\xa0\xd6\xee'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    int_0 = -1827
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    str_0 = "daW"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    float_0 = -1191.667553
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    str_0 = "K$(V>i{u7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    str_0 = "xnzN.yD\x0b"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    bytes_0 = b"\xdd\xcc\x83\x8a\xcd\xc1\x84\xf7\x0c\xe15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    int_0 = 3396
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    int_0 = 1138
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    bytes_0 = b"*\xbc\xfa\xfb\xee\xca/\xc9\x16<\xa7\xaa\xcb\x81A\r\x99<"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    bytes_0 = b"\xad"
    str_0 = "s> \x0bm3"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    bytes_0 = b"0\xaax\xef\x1b.\xc6\xcb\xc6\x87\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    int_0 = -936
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    int_0 = -1466
    module_0.match(int_0, int_0)


def test_case_3981():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3982():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    int_0 = 1405
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    str_0 = "pU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    int_0 = -1174
    tuple_0 = (int_0,)
    tuple_1 = (int_0, int_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    int_0 = -1336
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    int_0 = 3557
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3988():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3989():
    bool_0 = True
    bytes_0 = b"8\xef\xb1\xac\x00\xbc^\xa5K\xe5d`,\xca\x15\xb2\xaa"
    list_0 = [bytes_0]
    str_0 = "rUI?|:^T&:n2lkC"
    tuple_0 = (bytes_0, list_0, bool_0, str_0)
    list_1 = [bool_0, bool_0, bool_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    int_0 = 2418
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    int_0 = 350
    module_0.get_new_command(int_0, int_0)


def test_case_3992():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3993():
    int_0 = 527
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    str_0 = "~fV^&nlL Y(&|q\r_0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    bytes_0 = b"\xd9\xbd*\x0e\x80\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    object_0 = module_1.object()
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    bytes_0 = b"\xa4\xa5\xa2@n\xbb\xffm,\xdc\xaa\xcc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    int_0 = -1968
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    int_0 = -3940
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    bytes_0 = b"\xb4\x1fu\xaa\xb7V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    int_0 = 2810
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    int_0 = -89
    bytes_0 = b"\xc2\x9bf\xc6\x14\x82\x1e\x18\xc7\x0bp%"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    str_0 = "4\x0c#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    str_0 = "yN2.MdJuIwhP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    float_0 = -2946.8
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    str_0 = "F8C'"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    none_type_0 = None
    float_0 = -117.7
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    float_0 = -2539.4
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    bytes_0 = b"'\x0b\x1b\xbe1s"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    int_0 = 1438
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    complex_0 = -559.04095 + 2506.9244j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    bytes_0 = b"\x1c\xb7\xa4\xde\xc0\xf9<p\xa5"
    bytes_1 = b"\xb8v\x1ai\x1c{D\x8ep-"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    int_0 = 1841
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    float_0 = 1396.22451
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    int_0 = -504
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    complex_0 = 3371.84447 + 3140.2756j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    bytes_0 = b"\x02\xc3\xdc\x19"
    int_0 = 4033
    tuple_0 = (int_0,)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    str_0 = "!_7McxU>[ODfiHb3"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    bytes_0 = b"1\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    str_0 = "J"
    str_1 = ""
    str_2 = "5wHj*x#?CJCYrI@1"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    float_0 = -141.15977
    bytes_0 = b"Y\x8b\xebt=\xc4\xe7\xf3\x02.\x17e\x14\xda"
    tuple_0 = (float_0, bytes_0, float_0)
    set_0 = {tuple_0, float_0}
    complex_0 = -1468.100863 + 197.2j
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    str_0 = "]-k6*hFa?#Tw[7O"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    bytes_0 = b"&.@Y\xd1/\xfe\xd9\xdc\x98\xbc\xb0\xf6z\xd8Z\x08\x1fx\xe3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    str_0 = "1n*2'gv`@bI{JN 2"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    bytes_0 = b"\xe7B"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    int_0 = 5
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    bool_0 = True
    bytes_0 = b"\x8c\xd5"
    dict_0 = {}
    tuple_0 = (bool_0, bytes_0, bool_0, dict_0)
    list_0 = [tuple_0, tuple_0, dict_0, bool_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    bytes_0 = b",\xa8\x81\x0c\xe0\xab\xbf\xc4GB^\x84"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    int_0 = -169
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    int_0 = 566
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    none_type_0 = None
    str_0 = "(SdC/;c^~@[c5|&fS"
    int_0 = 160
    dict_0 = {str_0: str_0, str_0: str_0, none_type_0: int_0, str_0: str_0}
    int_1 = -2544
    tuple_0 = (str_0, int_0, dict_0, int_1)
    module_0.match(none_type_0, tuple_0)


def test_case_4038():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4039():
    float_0 = -1501.5566
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1, bool_1: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    int_0 = -1297
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    int_0 = -1144
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    str_0 = '3v1T.nV{m"+Lee'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    float_0 = -2236.280815
    bytes_0 = b"\x99FOb"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    bytes_0 = b""
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    int_0 = -1561
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    object_0 = module_1.object()
    set_0 = set()
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    int_0 = -3416
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    set_0 = {tuple_1, tuple_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    bytes_0 = b"\xb0\xfe\xb6\x88\r#\xc8ZV\xf2\xad\xaa\xa4\x91\xee\xa1\xf0K"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    float_0 = 354.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    int_0 = -2669
    str_0 = "_w"
    tuple_0 = (int_0, str_0)
    set_0 = {int_0, int_0, int_0, tuple_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    bytes_0 = b"mk"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    int_0 = 2168
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    str_0 = "G_d@{GOBY(8(*#"
    module_0.get_new_command(str_0, str_0)


def test_case_4058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4059():
    bytes_0 = b"\x12\xaf\x9d\xcb\xd0\xf3{\x90.#"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4060():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4061():
    bytes_0 = b"z"
    module_0.match(bytes_0, bytes_0)


def test_case_4062():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4063():
    int_0 = 3024
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    str_0 = "<wx-\n7REZ,aZ<=\x0b.:ak6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    int_0 = -1439
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    int_0 = -1019
    float_0 = -1786.5
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    int_0 = 3194
    list_0 = []
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    bytes_0 = b"\xdb\x9f\xddG\xb09\xadY"
    bytes_1 = b"F\xdc\x1f\xd2\x8e\xa4]e\xa0\x16\x17\xc4y\xa6d.\x98"
    tuple_0 = (bytes_0, bytes_1, bytes_1)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    dict_0 = {}
    list_0 = [dict_0]
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    bytes_0 = b"~\xb4\xd8H\xf0\xfb^\xf3\xed\x1d\x01n\xdd6"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    int_0 = -1410
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    bytes_0 = b"\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    int_0 = 2419
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    int_0 = -3456
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    float_0 = 245.8
    int_0 = -4067
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    str_0 = "\\5ufnb{ jV8$<I04@)"
    str_1 = 'BUt\rHE"\\vd^Gb"G1p* '
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    bytes_0 = b"*b\xa6\xb1\xc5\x89g\xeb0\x81f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    complex_0 = 2319.30388 - 155.9j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    int_0 = 99
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    none_type_0 = None
    str_0 = '%_""^xGg1~UcBInp&87)'
    dict_0 = {str_0: str_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    float_0 = -1035.5
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    bytes_0 = b"\xa5*S.5\x0b\xadN/DE\xbb#\xadM\x05\xdd"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    int_0 = -2098
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_4091():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4092():
    none_type_0 = None
    float_0 = -1299.425
    module_0.get_new_command(none_type_0, float_0)


def test_case_4093():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4094():
    bytes_0 = b"=\xe8k\xcb\x16\x0c\xadA\x08\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    str_0 = ":y={-UAwh<:'#W^Zi^o"
    float_0 = -1913.0
    list_0 = []
    tuple_0 = (str_0, str_0, float_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    str_0 = '>cy5k"u\ta'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    float_0 = -51.265
    str_0 = "K"
    bool_0 = False
    tuple_0 = (float_0, str_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    float_0 = 407.93
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    bytes_0 = b"\xec\xccbq2\xae\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    int_0 = -2214
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    int_0 = -1741
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    bytes_0 = b"e\xb6\xc6\x8f!\xdf\xd9\t\x01?\xc7^9z\xad@u \xb9\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    str_0 = "&\\l\x0b?4"
    bytes_0 = b"\x00\x1d\x0f\xed\x96V\xbd\xdav\xf4SU9H\xf8\xbc\x83"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (str_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_4104():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4105():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, bool_0, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    str_0 = "7&=/5FF!nAg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_4109():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4110():
    float_0 = -561.6805
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    str_0 = ";\x0c!D.%h<,v ;{}tsQHqG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    bytes_0 = b"\x07\x02TW\xde\xca"
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    none_type_0 = None
    float_0 = -2422.08564
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    bytes_0 = b"(\xe2mQ\x84\xd3o\x85\xbc\xfc\x82"
    tuple_1 = (float_0, tuple_0, bytes_0)
    module_0.match(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    float_0 = 1108.255481
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    str_0 = "D>)sr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    bytes_0 = b"\xfd\xb6\xaa8p9\xe8\xd4\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    bool_0 = True
    tuple_0 = ()
    str_0 = "f.yLs;?"
    tuple_1 = (bool_0, tuple_0, str_0, bool_0)
    list_0 = [tuple_1, tuple_0, tuple_1]
    list_1 = [list_0, tuple_0]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    bytes_0 = b"\xcb\xad\x1c\xe0)\\s\xd3\xc1z\x85<\x0b(\x1b"
    float_0 = 1168.0
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    int_0 = -1982
    tuple_0 = (int_0, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    float_0 = 4488.624498
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    complex_0 = 1638.0114 - 1438j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bytes_0 = b"\xe9\x11\x9a\xd1N\xd3\xef\xf1vl\x0e=*\x9c\xbe\xcdLK"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    str_0 = 'FEj9sTq~.\x0b~|v74"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    int_0 = 1861
    bytes_0 = b""
    str_0 = "UPCG/Isa)?kO50"
    str_1 = "Om|O\no2"
    dict_0 = {str_0: int_0, str_1: bytes_0, str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    dict_0 = {}
    complex_0 = 475.3 - 2441.226694j
    str_0 = "peQ\t5"
    tuple_0 = (dict_0, complex_0, str_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    bytes_0 = b"\x8fyv\xd6\x86\x9b\xce\xdf\xdf\xe3MTo\xa6\xd2\xdc\xcf$"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4131():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4132():
    str_0 = "\tvX'F9hZ1MY\tl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    bytes_0 = b"\xfbZ\xa6\x8b\x9b\x98\xe1\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    bytes_0 = b"TvB\x81#\x0b25\xa3\x07\xf7C\xab\xc2\xd9c\xaf\xcc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    int_0 = -1857
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    str_0 = "KAz6~R~k>z!r-{yan"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    bytes_0 = b"`=\xeb6\xf0\xbac45\xbc\x91"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    bytes_0 = b"\x7f8.3\xf66\xb4qB@\xea)\x1d\xa6k5NA\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    list_0 = []
    str_0 = "xZ)Q:\x0c5L|w4v;"
    str_1 = 'tm"Bac"~]s4R'
    dict_0 = {str_0: list_0, str_1: str_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


def test_case_4140():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4141():
    int_0 = -2125
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    complex_0 = -391.958 - 1431.0971j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    float_0 = -3117.97363
    float_1 = 427.0
    module_0.get_new_command(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    bytes_0 = b"\x97\x1ajUp\xbbc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


def test_case_4146():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4147():
    str_0 = "Y1Tz[Fa#UDS"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    bool_0 = False
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    int_0 = -492
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    complex_0 = -720.2 - 2728.584j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    int_0 = 569
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    float_0 = 2476.90782
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    float_0 = -200.9207
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    float_0 = -2106.556618
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    str_0 = "ZK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    str_0 = "C8@Xa=I]\n2=>?jSG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    bytes_0 = b"{p\xcf\xef\x8f\x83\x8d}$5"
    tuple_0 = ()
    set_0 = {bytes_0, bytes_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    int_0 = 3459
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    float_0 = 137.5
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    str_0 = "OF?`xQp(-.cvQG~e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    bytes_0 = b"EF\xd3\xb2,\x8d\x14\x00"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    bytes_0 = b"\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    bytes_0 = b"\xf7\xd2t.\x9eR\xca\xe7]\xbd\x87\xb4\xc9"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    float_0 = -720.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    int_0 = -1155
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    bytes_0 = b"J\x88t\xd0\xd0\xa7\xbc\x93V\xc6fB"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4170():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4171():
    int_0 = -1633
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    complex_0 = -2366.514 + 1553j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bytes_0 = b"@\x13\xb1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    bytes_0 = b'\nI\x9e"%(xj\xb2\xf4\r\xba'
    bool_0 = True
    dict_0 = {bytes_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    int_0 = 4887
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    int_0 = 2196
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    str_0 = "vr\\'MdgD\rb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    int_0 = -1661
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    int_0 = -2479
    module_0.match(int_0, int_0)


def test_case_4181():
    pass


def test_case_4182():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4183():
    bool_0 = False
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    float_0 = 1163.7093
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    int_0 = 1797
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    none_type_0 = None
    int_0 = 3165
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    complex_0 = 168.0358 + 612j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    bytes_0 = b"\\\xe2\xf9<\xf7\xa6\xb0n\x91\x1d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    tuple_0 = ()
    int_0 = 1015
    tuple_1 = (tuple_0, int_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    float_0 = -715.08
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    none_type_0 = None
    bool_0 = True
    list_0 = [bool_0]
    str_0 = "+-$Z{L`ponzFO9"
    tuple_0 = (bool_0, bool_0, list_0, str_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    bytes_0 = b"R\xce6/\x95\xc6N\xdd\xb1\xc2\xf4\xcd:~I\xa0w\xce\xcd"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    int_0 = 2278
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    str_0 = '"'
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    bytes_0 = b"\xcf\xf1\x19]\x99I\x89U\xfd\xda\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    complex_0 = 4353.8 + 5470.1j
    set_0 = {complex_0, complex_0}
    list_0 = [set_0]
    float_0 = 944.524573
    tuple_0 = (set_0, list_0, float_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    float_0 = 1813.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    int_0 = -1934
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    bytes_0 = b"Aw&\xc1CFN\x8e\xea<\xca\x96tG\xdc[\r\x1f\x94"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    str_0 = "\t\r_pH)T4Q\\"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    str_0 = '"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = True
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    int_0 = -228
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    str_0 = "|X'$BZ4k}667*"
    complex_0 = -2924.4 - 129j
    str_1 = "\x0bV?g6o+h3,y(5qGy\x0bbV"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: complex_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    float_0 = 85.456
    tuple_0 = (float_0,)
    list_0 = [float_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    bool_0 = True
    int_0 = 4101
    tuple_0 = (bool_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    int_0 = 508
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    bytes_0 = b"W\xb0+x\x84S7EB\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    int_0 = 3115
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    bytes_0 = b"B\xb4S"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    float_0 = -3625.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    complex_0 = 1.37 - 495.8408j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    float_0 = 569.10765
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    bytes_0 = b"\x83o"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    bool_0 = False
    int_0 = -3761
    module_0.match(bool_0, int_0)


def test_case_4219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4220():
    float_0 = 1274.780129
    str_0 = "<\x0c%JlMWHz\x0bm3VW<\t_"
    tuple_0 = (float_0, str_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    bytes_0 = b"|\xfb\xaci\xd6\xc4\x16PW1"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    str_0 = "#T;2%.r)zUt"
    int_0 = -3745
    set_0 = {str_0, str_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    int_0 = -1002
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    bytes_0 = b""
    int_0 = 3761
    dict_0 = {bytes_0: int_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    str_0 = "y>C\nLTK5/O"
    list_0 = []
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    bytes_0 = b"p\x1b[{r\x10\xadu\x05\x82>"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    bytes_0 = b"J95\xeb\xf1\xa6\xf6\xfc\xbb\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    int_0 = 455
    str_0 = "c`$Q'd"
    list_0 = [int_0, int_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    str_0 = "5eG2d-"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    object_0 = module_1.object()
    str_0 = "'_cXRk^{\\8OZJ"
    str_1 = "1edTNhedM]-"
    str_2 = "8&\r"
    str_3 = "r@PC1/4d&Yy\tQ];;EvK_"
    str_4 = ">xabF.BJrl"
    dict_0 = {str_0: str_0, str_1: str_2, str_3: str_1, str_4: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    float_0 = 575.83
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    str_0 = "\n]d6P"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    float_0 = 541.892695
    int_0 = -1925
    bool_0 = True
    complex_0 = -393.92293 - 715.3j
    dict_0 = {
        float_0: complex_0,
        complex_0: float_0,
        float_0: float_0,
        complex_0: float_0,
    }
    tuple_0 = (float_0, int_0, bool_0, dict_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    int_0 = 462
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    bytes_0 = b"p\xa6\xb3\xa6\x929\x11v\x10\xc8F\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    int_0 = -3084
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    str_0 = "f>z%Qc'\nt"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    str_0 = ".h3_N!(CI!)gsT/\t$Z\n"
    str_1 = "R#|\r.W!"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    complex_0 = -4339.585 + 256.383j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    int_0 = -2290
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0]
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    bytes_0 = b"\x89\rs\xc7\x99"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4248():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4249():
    bytes_0 = b"H|\xfc\xeeB\xd1k\xc6hL"
    set_0 = {bytes_0, bytes_0}
    dict_0 = {bytes_0: set_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    str_0 = "c\rSgW"
    int_0 = 4123
    bytes_0 = b"J\xb6%"
    tuple_0 = (str_0, int_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    complex_0 = 982 + 1595.961151j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    bytes_0 = b"\xa4\xab\x17%\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, list_0, list_0]
    bool_1 = False
    bytes_0 = b"\xdd.\x1a,\x9c\x10\xcb\x10\x15\xfe\xce\x1d\xd7\x95W{{\xa2u"
    tuple_0 = (bool_0, bytes_0, bool_0, bool_1)
    tuple_1 = (list_1, bool_1, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    str_0 = "q\t;8f~13T"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    int_0 = -2604
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    tuple_1 = (set_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    float_0 = 2439.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    bytes_0 = b"\xad\xae\xd5\x0fK\xcde|M=\xd3}<\xb9\x050\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    str_0 = "T\x0c\t\tVpDwc=y\x0bz6ji+h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    bytes_0 = b"8\xc8\x98W\xfa,\xa3\x1c]\xeb}\xf4\xb4\xd7\xa6\xa62\x9e\xd6,"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    none_type_0 = None
    float_0 = -4019.0
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    str_0 = '2"v/3,|a<t'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    int_0 = -559
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    int_0 = 2257
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    bytes_0 = b"\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    bytes_0 = b"\x1b~\xa3\x19(\x0e\xa4s\xb5V\x0e\ry\x9d"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    int_0 = 4337
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    str_0 = "^w49m1lg>%("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    str_0 = "Tp&>`l{>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    int_0 = 1764
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    int_0 = 1317
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    int_0 = -842
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    str_0 = "%0NpiGDw]^ "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    bytes_0 = b"\x86\x8b\xe3\x8c\xec\xb9\xd8I\xc8\x11\x16\xa0\xbb_gd\x97\x94}\x11"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    complex_0 = -351.9 - 1683j
    str_0 = "7BQa\"$'\rPO!,6|Jee$tj"
    str_1 = "c-{LH5bS"
    dict_0 = {str_0: complex_0, str_0: complex_0, str_1: str_1}
    module_1.object(*complex_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    float_0 = -228.45
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


def test_case_4279():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4280():
    int_0 = -2765
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    str_0 = 'aB<k"CfO-y\x0bHCPZt")G'
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    str_0 = "o>H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    str_0 = '*vsq$/k$V/4/)v"Fc'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    complex_0 = -1493.164261 + 31.1j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4288():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4289():
    float_0 = 569.08334
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    str_0 = "_krUI4fQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    str_0 = "LT1||%:o86`Z pQP]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    complex_0 = 122.17632 + 3269.314j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_4296():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4297():
    int_0 = 2523
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    int_1 = 3054
    tuple_0 = (int_0, dict_0, dict_0, int_1)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    str_0 = "vMODrI"
    list_0 = [str_0]
    list_1 = [str_0, list_0, str_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    str_0 = "t;1r\x0b.$2fFUJK^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    dict_1 = {bool_0: dict_0}
    list_0 = [dict_1]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    float_0 = 752.18
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    bytes_0 = b"(\xc4!\xba\x8f\xf9\xed\xd7@\x04\x1aJ\xe5Wd\x02X\xfe\x1f"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    float_0 = -1669.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    str_0 = "9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    int_0 = 5700
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    bytes_0 = b"\x90\xee\x0b>\x10\x86\xd5\x1ea\xd3\x01\x8a\x0c\xf8t\xee\x9b\x869"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    bool_0 = False
    int_0 = 549
    object_0 = module_1.object()
    dict_0 = {bool_0: bool_0, int_0: bool_0, object_0: object_0, bool_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    bytes_0 = b"\xe26\xbb\xa1\x88^v\xe9\xa8"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    bytes_0 = b"\x03\nM\x97\x8e\xd7"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    str_0 = "\nP'8Ue%$\\H+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    int_0 = -34
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    float_0 = 6079.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    complex_0 = -2335.36 - 2053.085j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    float_0 = 1574.6
    module_0.match(float_0, float_0)


def test_case_4317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4318():
    bytes_0 = b'"\xc8\x0eY\x05\xb2\x16\x88\x18u\rR'
    str_0 = "<8!\tCGkLL1Y,Q~ZNSi"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    bytes_0 = b"\x12"
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    float_0 = 1629.7
    tuple_0 = (float_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    str_0 = "[O>0K"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    complex_0 = 2413.845765 - 3153.3174j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    str_0 = "t-^\n1$Nd%4tqjs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    int_0 = -775
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    complex_0 = -746.5332 + 436.7187j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    str_0 = ""
    str_1 = "jjpP uws\r"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    float_0 = -2061.203247
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    bytes_0 = b"\xa2\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    str_0 = ";Du5^^4EaK#M"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    int_0 = -231
    int_1 = -5021
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    int_0 = -1777
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    int_0 = -14
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    int_0 = -271
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    str_0 = "_PKrVtNLZy\\\tjkO'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    int_0 = -570
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    bytes_0 = b"\x81\xa2\x8e\xb7H["
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    str_0 = "@V5|q_W\nw=V2q"
    tuple_1 = (tuple_0, str_0)
    module_0.match(tuple_1, bytes_0)


def test_case_4338():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4339():
    bytes_0 = b'\xa1"\xac\x81\x18\x1c'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    bytes_0 = b"p\xcd~\xdfb\x00\xc0\xe9\x8e\x84\xeeX\xe5\xe2\xfd\x87"
    module_0.match(bytes_0, bytes_0)


def test_case_4341():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4342():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    int_0 = -1402
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    str_0 = '4Rgfy*RsBe?\n8#Jz["-^'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    str_0 = " ~bVY6)yO3\\3yX8p2NC"
    module_0.match(str_0, str_0)


def test_case_4346():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4347():
    float_0 = 1248.01696
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    int_0 = 2909
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    bytes_0 = b"\xeb\x11\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    bytes_0 = b"\x8e "
    bool_0 = True
    set_0 = {bytes_0, bool_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0, bytes_0]
    tuple_0 = (set_0, list_0)
    list_1 = [tuple_0, bool_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    str_0 = "})fX}+`M("
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    int_0 = -988
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    bytes_0 = b"_i\x9e%\xad\x95\xb3\xc5\xe6\xc6\x9f\xc9\x95\x83"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    int_0 = 3134
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    bool_0 = False
    bytes_0 = b"V<c\xbeU\xfc\xb2\xc6UM\x15\x94"
    tuple_0 = (bool_0, bool_0, bytes_0)
    tuple_1 = (bool_0, tuple_0)
    list_0 = [tuple_1]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    bytes_0 = b"\xdbzQ\xb7(e\xb0\x0b-\\\xd4\x1d\xc0\x8a\x89"
    str_0 = "^uSYP&"
    complex_0 = 1563.25 - 830.908961j
    tuple_0 = (bytes_0, str_0, complex_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    bytes_0 = b"|B~\x17\x90\x7f;\x0b\r\xfd5\x0b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    str_0 = "M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    str_0 = "X{Uf1 4>@"
    dict_0 = {str_0: str_0}
    str_1 = "/'Nj"
    str_2 = "w0Aa)#zfY\rm^_`mj^Oro"
    dict_1 = {str_0: dict_0, str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    str_0 = "xiE<pPyp)"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    bytes_0 = b"\xb3;4\x08|\xdfH\x15\xa8\xed\xf2~6~\xfa\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    int_0 = 237
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    bool_0 = False
    bytes_0 = b"\x99\xb5\xfe;\x82\x86\x8c\xca\xd3\xa6M'\xe1\xc1\xd1\xc1\x0e\xef1\xe4"
    tuple_0 = (bool_0, bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    bool_0 = True
    list_0 = [bool_0]
    str_0 = "3:O:"
    str_1 = "xgLTAgQ\rl2(&\\\ty$m"
    str_2 = "Al\x0bH~bZX$gC"
    dict_0 = {str_0: str_1, str_2: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bytes_0 = b"\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    bytes_0 = b"\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    list_0 = []
    bool_0 = True
    module_0.match(list_0, bool_0)


def test_case_4371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4372():
    bytes_0 = b"8\xa70\x7f\xb7\xdb.\xa78z"
    complex_0 = -1591.249 - 1043.7j
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, complex_0, list_0, complex_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    str_0 = "uuyAuP.P\x0cj."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    bytes_0 = b"\x94\x90\xd8\x10s\t\xc24\xd1\x1cw\x05!]\xe5\xd0\x0b\xbb\xc8"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    str_0 = "CZ/v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    int_0 = -531
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    float_0 = 920.002717
    bytes_0 = b"\xd9"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    bytes_0 = b"\xb1\xa8z\xdc\xe5\xe8\xbc\xc4gr\x84R\n\xa9W@\xbe\xd3\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    float_0 = 710.35
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    list_0 = [dict_0, bool_1]
    module_1.object(*list_0, **bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    str_0 = "&)W tW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = "+Y "
    tuple_0 = (set_0, bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    float_0 = 1783.683305
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    bytes_0 = b"\xf8\xf3\xbb\x1e\x97+\x1e7:\xc4G3+vf\xb7\xd9\xb3\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    bytes_0 = b"\xc5\x84\x8c"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0, list_0, bytes_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    bytes_0 = b"]\x91\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    complex_0 = -2087.72242 - 3392.188j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    bytes_0 = b"\xcfJ\x88\xcb\x02\xbfx\x0f\xdc\xdeM1\x86\x89\xa1r@l["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    int_0 = 2390
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    int_0 = 704
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    bytes_0 = b"\t!\xb9\xbb\x0c\xf1\xa9>1\x11\xe6\xfb;\x18\xf7\x0b\xdb\xca\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    str_0 = "`-"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    str_0 = "u?7[N:?-}XIdc-(GM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    str_0 = "]mhxUR}Cb"
    module_0.get_new_command(str_0, str_0)


def test_case_4397():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4398():
    int_0 = 923
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    str_0 = "MFi5*zNvAQ5Ig~<e[."
    none_type_0 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    none_type_0 = None
    int_0 = -107
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    int_0 = 4404
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    complex_0 = -3497.08912 + 982j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    float_0 = -745.45
    module_0.get_new_command(float_0, float_0)


def test_case_4406():
    pass


def test_case_4407():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4408():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    tuple_0 = ()
    float_0 = 858.0708
    module_0.get_new_command(tuple_0, float_0)


def test_case_4410():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4411():
    none_type_0 = None
    str_0 = ""
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "6lu@KOs1zNIj["
    list_1 = []
    int_0 = 1569
    bool_1 = False
    tuple_0 = (int_0, bool_1)
    tuple_1 = (list_0, str_0, list_1, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bytes_0 = b"lE\x11\xa5=Yb\xcd\xf6X\xf4\x96\x9f\x97\x95'\xaa\x9fJ"
    set_0 = {object_0, bytes_0}
    list_1 = [set_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    str_0 = "@G"
    module_0.match(str_0, str_0)


def test_case_4415():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4416():
    float_0 = -2879.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    str_0 = "am~Xx-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    complex_0 = -161 + 3553.20816j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    float_0 = -2707.1
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    float_0 = 613.461099
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    float_0 = 628.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    str_0 = "lYpNS>d' u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "|CGK#H-FSwEs()!bwZ"
    bool_1 = True
    str_1 = ',\n)ia"Z'
    bool_2 = False
    dict_0 = {str_0: bool_1, str_0: list_0, str_1: bool_2, str_0: bool_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    none_type_0 = None
    int_0 = -196
    list_0 = [none_type_0, none_type_0]
    str_0 = "ej9k"
    bool_0 = True
    tuple_0 = (int_0, list_0, str_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    int_0 = -3377
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    int_0 = 1654
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_1]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    bytes_0 = b"\x0e\xbb\x8a\xf2)\xc4\xb8i.\x0c\xe5\x96p\x04\xa9%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    float_0 = 1938.0411
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    float_0 = -18.62
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    bytes_0 = b"*\xa6\x8d:6i"
    dict_0 = {}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    str_0 = "-G)4\x0cN'+E"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    str_0 = 'A%e"D"+A'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    bytes_0 = b"\t\xebn>\x98\x9c\xa1\x92\xfe$\xbd\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    int_0 = 749
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    int_0 = 559
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    int_0 = -2731
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    bytes_0 = b"\xeeYl\xef\xf8>+p"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    int_0 = -2311
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    int_0 = 2124
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    float_0 = -3697.26
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    float_0 = -1342.6
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    int_0 = -3692
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    bytes_0 = b"{6:k7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    str_0 = "H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    float_0 = 1896.0
    set_0 = {float_0}
    list_0 = []
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    int_0 = -1807
    complex_0 = -698 - 716.49648j
    str_0 = ""
    tuple_0 = (int_0, complex_0, int_0, str_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    bytes_0 = b"\x926A\xdf\xe6\x9cC\xfe\x19\x95\x94Vx\x12\xbfN\x00\xae"
    int_0 = 427
    tuple_0 = (bytes_0, bytes_0, int_0)
    module_0.match(tuple_0, bytes_0)


def test_case_4454():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4455():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    complex_0 = 237 + 4233.2845j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    int_0 = 3524
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    int_0 = -3465
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    int_0 = -1162
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    str_0 = "\rM!`e(\r00_\tYpxO"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    float_0 = -683.68994
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    int_0 = -852
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    bool_0 = True
    bytes_0 = b"A\xe0\r\xfb\xe4\\!\x91d\xa3\xb6\x1aFM\xc1\xef\xdd\xb2\x0b"
    list_0 = []
    tuple_0 = (bool_0, bytes_0, bool_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    float_0 = -676.93
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    bytes_0 = b"\x06\xfe\xf3Q\x7f\x13D\xb1\xf53\xde\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    complex_0 = -1999.4857 - 1756.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    bytes_0 = b"\x04;n+c\x0b\x8e"
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    str_0 = "yi]'Y}cYaiKAz}G]P\x0c"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    bytes_0 = b"q\xdb\x95\xbf\xe5\xff2\x07\n@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    int_0 = 950
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    str_0 = "y%{*C1%yz6"
    str_1 = "FG!d$yg[:"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    int_0 = -1148
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    bytes_0 = b"\xd9+ms"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    int_0 = -1980
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    int_0 = -1189
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    object_0 = module_1.object()
    list_0 = [object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    int_0 = -1397
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    int_0 = -1531
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    str_0 = ":ro"
    str_1 = ""
    str_2 = "\x0cLFEcY"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    str_0 = "Y?~6oHK\tL30p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    int_0 = 4648
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    int_0 = -2313
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    float_0 = -1388.39
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    str_0 = "!doB*5lx?KsgOl="
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    str_0 = "jO[Ap[3^}~kyx\x0b"
    bool_0 = True
    str_1 = "Q~,Ns*0XD-|"
    dict_0 = {str_0: bool_0, str_0: str_0, str_1: bool_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    int_0 = 2023
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    int_0 = -2321
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    int_0 = -1695
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    int_0 = -156
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    int_0 = -1789
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    bytes_0 = b"\xa5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    bytes_0 = b"\xd6\xf1Q\xf5o\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    complex_0 = -300.867 + 2704.857j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    int_0 = 901
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    str_0 = "/Q=+=uEBp?vyZ\nn"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    bool_0 = True
    int_0 = -3407
    dict_0 = {}
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0, int_0: dict_0}
    module_0.match(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    int_0 = -3852
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    bytes_0 = b"\x0c\xa4l\xa5\xda"
    str_0 = ")(\x0bV=Po}6w@2Viz\n"
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (bytes_0, str_0, tuple_0, bool_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    str_0 = "}?)zK;D=*z-d\x0b[G\x0bVYh="
    list_0 = [str_0, str_0]
    dict_0 = {str_0: str_0, str_0: str_0, str_0: list_0, str_0: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    int_0 = -1137
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    bytes_0 = b"u\xf0\xf2\xa1u\x16"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    float_0 = -2179.906128
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    float_0 = 1490.465682
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    bool_0 = False
    int_0 = -845
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    int_0 = 838
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    bytes_0 = b"l\xdd)&\x9a\xd7\x1bzm"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    str_0 = "Hx"
    bytes_0 = b"\xf2\xc9\xb9\xbd\xc3NS\x80S"
    set_0 = set()
    dict_0 = {bytes_0: set_0}
    int_0 = -2271
    tuple_0 = (bytes_0, set_0, dict_0, int_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    float_0 = -2056.4213
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    int_0 = 1221
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    bytes_0 = b"\xe9lP['e\xd7xUm\x04\x0b\xd7\x1f\xc7/\x05<"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_4521():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4522():
    str_0 = "R<\nB22LUqN9T)!X|%j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    float_0 = -1409.31546
    complex_0 = 1337.815309 - 361.69086j
    bool_0 = True
    bool_1 = True
    dict_0 = {float_0: complex_0, bool_0: complex_0, float_0: float_0, bool_0: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    float_0 = -2108.2
    bytes_0 = b"n\xa6\xfb\xfdO\xf9\x17\x1e\x1b.\xf6e\xd6="
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    int_0 = -1277
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    int_0 = -2366
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    complex_0 = 3708.66492 + 1683j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    bytes_0 = b"\x93XY\xd3\xc8\x1es\x9cG\xb8\xbc+\xf5\xc7\xf7"
    int_0 = 0
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    str_0 = "??l\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_4532():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4533():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(dict_0, list_0)


def test_case_4534():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4535():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, list_0, bool_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    int_0 = 874
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    int_0 = 2277
    module_0.match(int_0, int_0)


def test_case_4538():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4539():
    str_0 = "\tv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    int_0 = 1066
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    str_0 = "cJ+5,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    bytes_0 = b"\xf6\x7f3'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    int_0 = -112
    int_1 = -1350
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    set_0 = {tuple_0, tuple_1, tuple_1}
    dict_0 = {tuple_1: set_0, tuple_0: bool_0, tuple_1: tuple_0, bool_0: tuple_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    float_0 = -3094.269
    dict_0 = {float_0: float_0, float_0: float_0}
    bytes_0 = b":^\x08p\xd0\xad\xaf_\xfd\xd4=\xde\xb8\xfb\x08h\x16\x8d"
    module_0.get_new_command(dict_0, bytes_0)


def test_case_4546():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4547():
    str_0 = "y,xL]\\/\x0cxWM7I"
    str_1 = "Z>D=k"
    str_2 = "5"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    str_0 = "NTHK0h< GJiAM%tcj"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    set_0 = {object_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    int_0 = 836
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    int_0 = 389
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    str_0 = "4@e!#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    str_0 = " bl\\pEC5]"
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = []
    tuple_1 = (str_0, tuple_0, list_0)
    module_0.match(tuple_1, bool_0)


def test_case_4554():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4555():
    float_0 = -3170.0
    module_0.match(float_0, float_0)


def test_case_4556():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4557():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    str_0 = "3571~FJ\x0b=]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    str_0 = "YVoc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    int_0 = -595
    list_0 = [int_0, int_0, int_0]
    str_0 = "Y!?}zu:oD/F@3+t`w3il"
    dict_0 = {str_0: str_0, str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


def test_case_4562():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4563():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    int_0 = 624
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    str_0 = "|O$lZ\n:'W|uC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    str_0 = "gI)CA2I8u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    bytes_0 = b"\x07\xb1\xcd\xb4J\xaa\x133\x85\x1f?\xaao\xbb\x8b\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    complex_0 = 6178.7 + 1517.1j
    bytes_0 = b""
    float_0 = 1896.26
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    tuple_1 = (bytes_0, tuple_0)
    set_0 = {complex_0, tuple_1}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    str_0 = "[;)c6F\t'ZoZYh8Ic"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    float_0 = -149.333
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    complex_0 = 1514.192 - 329.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bytes_0 = b"~\xc7\x1e|\xc8\xfc @\xa3B{,<\xb7"
    str_0 = "v;uRZv"
    str_1 = "\\CJ\rr/"
    dict_0 = {str_1: str_0}
    str_2 = "w"
    str_3 = "8$&]!gNr?\nhh?"
    dict_1 = {str_0: bytes_0, str_1: dict_0, str_2: str_2, str_3: bytes_0}
    module_1.object(**dict_1)


def test_case_4576():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4577():
    complex_0 = 88.64221 - 1631j
    str_0 = "~\\1\r[8Q<UcKX'\"8f?3/"
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    bytes_0 = b"\xb8|\xcc\x93\r`\xcc\xedT\xd8\x12\xd3H\xf4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    bytes_0 = b"\xa3\xea\xd5\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    bytes_0 = b"\xb7\xd2m\xe6j\xe6\xe4s\x91\xa4"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: dict_0}
    module_0.get_new_command(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    str_0 = "v6`|J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    bytes_0 = b"\xfe\x04I\x85\x1c\xb5\xb6\x84:\xc9\xb2\xa2\xcd8\xc3\xf7.F"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    str_0 = ""
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    str_0 = "N^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    float_0 = -1707.05
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    bytes_0 = b"\x85"
    str_0 = "I.xVu\n7qu"
    dict_0 = {bytes_0: bytes_0, str_0: str_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    complex_0 = 1524.866 - 1438.8j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    bytes_0 = b']\xe9myz\xda\xc8\x8a\xb4\xd2\x8e\x9d3\xde\xebt"\x86}'
    module_0.match(bytes_0, bytes_0)


def test_case_4592():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4593():
    int_0 = -5448
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    str_0 = "LmvYT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    float_0 = -221.87
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    str_0 = "<3ppoMhjse6[fS'D"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    float_0 = 5326.27328
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    str_0 = "\x0cgvfGI\x0cL$h$En(cV5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    str_0 = "$D]vb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    int_0 = -163
    float_0 = 727.731
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    str_0 = "xC~?%>^B2ndyz]]^*!X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    str_0 = "-p\t\\*p/k@kvVg"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    bytes_0 = b"\xee1w\x83\x8c\xf8\x85D|\xa1\xce*\xf2&\xdf\x05U"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    float_0 = -541.357
    bytes_0 = b"*\xaf"
    set_0 = {float_0, float_0}
    int_0 = 72
    tuple_0 = (float_0, bytes_0, set_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    none_type_0 = None
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    bytes_0 = b"\xff\xbaIE[\xd3.y\xd6\xc4P"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    int_0 = 1264
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    float_0 = 2572.296
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    int_0 = 677
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    none_type_0 = None
    int_0 = 709
    module_0.get_new_command(none_type_0, int_0)


def test_case_4612():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4613():
    str_0 = "\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    str_0 = "2 ]Io8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    int_0 = -525
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    bytes_0 = b"+"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    float_0 = 394.4263
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    str_0 = "?TiR[9\x0bs"
    dict_0 = {}
    str_1 = '?HOcNtoOw|\x0b"\rB'
    str_2 = "@t"
    str_3 = "Qh{S&Z"
    dict_1 = {str_0: dict_0, str_1: str_0, str_2: str_1, str_3: str_3}
    module_1.object(**dict_1)


def test_case_4620():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4621():
    bytes_0 = b"/8\x92D\x9d\xa49"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    int_0 = -173
    bool_0 = False
    float_0 = 1035.86
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (bool_0, float_0, list_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    str_0 = "[)CZ(\ni+q\x0b\x0cGf?j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    float_0 = -222.5613
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    float_0 = -604.6
    module_0.match(float_0, float_0)


def test_case_4627():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4628():
    str_0 = ">?6)il"
    set_0 = set()
    dict_0 = {str_0: str_0, str_0: set_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    str_0 = "Dw>9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    float_0 = 433.35
    str_0 = "\n\\m~;xS]2"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    int_0 = 4507
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    complex_0 = 88.0333 - 753.865j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    int_0 = 1685
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    int_0 = -353
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    bytes_0 = b"\x1f\x82\xc64J\x1e[v"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    bytes_0 = b"\xf7\xc7\xd8\xfd/\x1c$\xd4\xee"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    bytes_0 = b"\xcdR&\\\xbf1\x7f\xbe\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    str_0 = "na]t X%T"
    module_0.match(str_0, str_0)


def test_case_4639():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4640():
    dict_0 = {}
    list_0 = [dict_0]
    int_0 = 2056
    list_1 = [list_0, int_0, int_0, dict_0]
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    tuple_0 = ()
    bytes_0 = b"\xe3\xb1\xc8/\xe9$9f\x97jN\x9e"
    set_0 = {tuple_0, bytes_0, bytes_0}
    module_1.object(*set_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    str_0 = "ZO^h9lbt-56ptL}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    int_0 = 2974
    list_0 = [int_0]
    dict_0 = {int_0: int_0, int_0: list_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    str_0 = "YH\x0b\r9s_te:"
    set_0 = {str_0, str_0, str_0, str_0}
    bytes_0 = b"K\xadg\tEG\xd4\xe3\xa6\x17"
    dict_0 = {}
    tuple_0 = (set_0, bytes_0, dict_0)
    dict_1 = {str_0: tuple_0}
    bool_0 = True
    module_0.get_new_command(dict_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    bool_0 = False
    tuple_0 = ()
    dict_0 = {bool_0: tuple_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    str_0 = "M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    str_0 = "mHuq:<.km%:O#|KvM\x0c"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    int_0 = 341
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    str_0 = "!F\\@TOfX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    bytes_0 = b"\x89\x1a\x82,\xb7\xcb\xc4\x04\xfd\xf1\xbc\x1a\xd4\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    str_0 = "$Bn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    str_0 = "O%Kdf:@`Ny!d*>\\0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    bytes_0 = b"8\xca\x86\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    bytes_0 = b"t\xa5\xb3\x8c\x02\xf1Dy\xf43H\x82\xa58\xd9\x15\xec\xd8\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    int_0 = -1828
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    bool_0 = True
    str_0 = "N|K"
    tuple_0 = (bool_0, bool_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    float_0 = -1882.853
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    str_0 = "5Y*'M(9\x0b"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    bytes_0 = b"8\xef\x02\xf9\xf9Ur@\xe4I.\xb3*\x8d1~\xa1x"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    float_0 = -134.2107
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    tuple_0 = ()
    bytes_0 = b"\x1d"
    int_0 = -1536
    bool_0 = True
    tuple_1 = (tuple_0, bytes_0, int_0, bool_0)
    module_0.get_new_command(tuple_1, bool_0)


def test_case_4665():
    pass


def test_case_4666():
    pass


def test_case_4667():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4668():
    str_0 = "-5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    bytes_0 = b"$\x8c\xa8J\x11\xdeI.\x01\\\xbb\x84\xbdfp\xd5\xd4R\xfe\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    int_0 = 2162
    float_0 = 1712.1734
    dict_0 = {int_0: int_0, float_0: float_0, int_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    int_0 = -1409
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    complex_0 = -458.5 - 882.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    int_0 = -1255
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    float_0 = 857.7
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    bytes_0 = b"O\xc7\xc3\x8cOFx"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    bytes_0 = b"|\x8a\xd1\xa8\xc2\x0b)06%d"
    module_1.object(**bytes_0)


def test_case_4678():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4679():
    str_0 = "5f1<&X~MHe/,2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    str_0 = "\tFtBF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    bytes_0 = b"XU\xc8n\xac(9Z\x93\xed\x88uR:9\xd7A\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    str_0 = ",vhmQ'V ww]FnD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    bool_0 = False
    bytes_0 = b"\x87\x84\xfb\x07\x04L"
    tuple_0 = (bool_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_4684():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4685():
    none_type_0 = None
    float_0 = 1196.031
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    float_0 = 580.66
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    float_0 = -3221.581
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (tuple_0, list_0, list_0)
    int_0 = 3795
    str_0 = "\\Z-+"
    tuple_2 = (tuple_1, tuple_1, int_0, str_0)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    int_0 = 1005
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    int_0 = -1773
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    float_0 = 1161.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    str_0 = "e8mg?KW{WU~ut"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    bool_0 = True
    complex_0 = 609.0064 - 428.3j
    dict_0 = {bool_0: bool_0, bool_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    str_0 = "5S{"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_4696():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4697():
    float_0 = 2751.9
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    bytes_0 = b"\xb5\xf9\x14\xceh\x0f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    int_0 = -143
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    int_0 = 517
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    bytes_0 = b"\xe6\x16\xbbLs\x06\xf1hn"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    str_0 = "oei94VO7T7/VA^1"
    str_1 = "v~P:\nR0mnQZ\re}4&E"
    list_0 = [str_1, str_1, str_0, str_0]
    dict_0 = {str_1: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    int_0 = 5
    set_0 = {int_0, int_0, int_0}
    dict_0 = {int_0: set_0, int_0: set_0}
    tuple_0 = (dict_0, int_0, set_0)
    tuple_1 = (set_0, tuple_0, dict_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    int_0 = -780
    bool_0 = False
    bytes_0 = b"g\x16\xfc~.\x94[\x8d_\xa6\xa3'\t\xd3\x1aW\xfd-f\xbe"
    dict_0 = {int_0: bool_0, bool_0: bytes_0}
    list_0 = []
    tuple_0 = (dict_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    int_0 = 241
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    bytes_0 = b"\xef\t\xdf\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    complex_0 = -1975.136121 - 441.95047j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    str_0 = 'xS"K%{=^u6'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    bytes_0 = b"\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    float_0 = 2233.915
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    int_0 = 1367
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    float_0 = 1495.0076
    bytes_0 = b"\xe7f\xa1\xb5~\xdd1"
    str_0 = '|aB"3n5'
    tuple_0 = (float_0, bytes_0, str_0)
    bool_0 = False
    tuple_1 = (tuple_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    str_0 = "ja"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    bytes_0 = b"\xfd\x12\xb01\xc5\xdb\xad\xb9\x93>\x970L\xb4\xd8#"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    bytes_0 = b"\xc6\xd3\x0fG"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    complex_0 = -795.37 - 664.787j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    int_0 = 3583
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    str_0 = "m\x0bEQRM8l2)#Lh]8X8W0\n"
    dict_0 = {}
    tuple_0 = (str_0, str_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    int_0 = -2735
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    str_0 = "A%w[hgrcd\nUiftb\r("
    float_0 = 667.177041
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    bytes_0 = b"\x1a\xf7V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    bytes_0 = b"Kk\x9bC\xaa\x02\xbb\x07n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    float_0 = 2032.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    int_0 = -883
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    int_0 = 2953
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    tuple_0 = ()
    float_0 = 4816.228
    int_0 = -549
    tuple_1 = (dict_0, tuple_0, float_0, int_0)
    module_0.get_new_command(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    bytes_0 = b"\x9fr\x17@]\xfd\xab\x86\xbeG6\x15W\xe8\xcc\xf1\x829"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    float_0 = -437.2
    dict_0 = {float_0: float_0, float_0: float_0}
    bytes_0 = b"\xcd6q\x95[:M\xb8+F"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    int_0 = 125
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    complex_0 = -594.553 + 3751.5j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    bytes_0 = b"\x1c\xdf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    int_0 = -71
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    str_0 = "Dr5S`"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    str_0 = "J+#[qdSw-~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    float_0 = 312.64522
    str_0 = ",<Wr}*CX"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bytes_0 = b"pXo`\x08\x97Wi\xf5\xbdno"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    float_0 = -787.61286
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    str_0 = ".DOtE-4I;U/*uN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    int_0 = -2105
    int_1 = 2362
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    str_0 = '\n!uT>ZS$,1ky<"T?Eg3'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    str_0 = "}(ge='"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    bytes_0 = b"\x1d\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    dict_0 = {}
    str_0 = "mP_CZd\rZG1eB"
    bool_0 = True
    bytes_0 = b") \xf7\xb0\x06\x7f\r\x8d"
    tuple_0 = (dict_0, str_0, bool_0, bytes_0)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    float_0 = -1112.392
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    str_0 = "Rv"
    str_1 = "{+(HxF>9l9:*oT"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    float_0 = 3659.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    bytes_0 = b"_\xb6\xd9\x9b(- \x13$\xc3\xcbr-\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    dict_0 = {}
    tuple_0 = (list_0, dict_0)
    module_0.match(tuple_0, object_0)


def test_case_4753():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4754():
    str_0 = "WFZN$H3 X"
    int_0 = -2209
    bool_0 = False
    tuple_0 = ()
    bool_1 = True
    tuple_1 = (tuple_0, str_0, bool_1)
    dict_0 = {}
    tuple_2 = (bool_0, tuple_1, dict_0)
    tuple_3 = (int_0, int_0, tuple_2)
    str_1 = "~UA.da"
    bool_2 = True
    tuple_4 = (str_0, tuple_3, str_1, bool_2)
    list_0 = [bool_2]
    bool_3 = False
    tuple_5 = (tuple_4, list_0, bool_3)
    module_0.match(tuple_5, bool_3)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    bytes_0 = b"\xb8L\xca\xb4!\x068\x1e"
    int_0 = 1113
    set_0 = {bytes_0, int_0}
    tuple_0 = (bytes_0, bytes_0, set_0, int_0)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    str_0 = 'Y"}.nT$$cG|k'
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    int_0 = -1457
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    float_0 = -2843.17611
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    bool_0 = True
    int_0 = -1365
    dict_0 = {int_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    tuple_0 = ()
    int_0 = 453
    list_0 = [tuple_0, int_0, tuple_0]
    module_1.object(*list_0, **tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    bytes_0 = b"\x90\x1e\x9a%\xb4H\x1e\x1eg_R\xcah\xc9\x1ez\x0f5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    str_0 = "J2cp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    str_0 = "w9P-Sj{9IUZ~"
    str_1 = "dzrd{?v8k4rZ38p\x0c\n"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    str_0 = "Het,;a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    str_0 = "U|*w?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    str_0 = "hy5Swn=|sc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    bytes_0 = b"\x01]\x8f\xa8\xec\xe3\xd1\x00\x1d\x0e\xda\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    object_0 = module_1.object()
    set_0 = {object_0}
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_1,)
    dict_0 = {object_0: tuple_0, object_0: bool_1, bool_1: bool_1}
    tuple_1 = (set_0, bool_0, tuple_0, dict_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    str_0 = "9"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    bytes_0 = b"E"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    bytes_0 = b"\xca\x806H"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    str_0 = "KWpK.w`bak2AY$56Ve"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    set_0 = set()
    bytes_0 = b"0zil\x0e\xbf>\x98\x14_\x1fz\xb1\xcd\xf72"
    tuple_0 = (set_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    int_0 = -3076
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    complex_0 = 5.64571 - 2227.614j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, bool_0, bool_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    float_0 = -2881.4386
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    int_0 = 1111
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    float_0 = -569.96258
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    int_0 = 4712
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    complex_0 = 2408.01323 + 1316.6323j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bytes_0 = b"7\xf1\xa0\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    float_0 = -792.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    bytes_0 = b"\xf0\xf7\x16\xb9O\x83}\xb4\x0bm\xd2C\x05\xc2\xca"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    str_0 = "a\rHMd<1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    float_0 = 1182.09
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    bytes_0 = b"\x8a\xa4G\xe4U\xfb7\x90Ad\x97m&N"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    str_0 = "Hx+E*^dB}6!ijPe^7TqI"
    module_0.get_new_command(str_0, str_0)


def test_case_4795():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    str_0 = "7NH;$W<j+UT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    int_0 = -780
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    float_0 = -3066.896
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    bytes_0 = b"g\xf2\xa2cc\x99s\x00?(\xfa\x0f\xf3K\x1d\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    int_0 = -714
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    bytes_0 = b"\x8c\xebt`x\x89\x0b\x81F\x90&\x02\xff\xec\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    complex_0 = -2819 - 1647.170862j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    int_0 = -54
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    float_0 = 3119.542
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    float_0 = -2475.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    bytes_0 = b"\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    int_0 = -809
    tuple_0 = (int_0,)
    list_0 = [tuple_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    complex_0 = 4365.52 - 4554j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    int_0 = 1488
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    float_0 = -1361.6582
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    bytes_0 = b"\x80I\x8cX\x0b\x9d\xbd\xc9\x87\x1e\x1b\x8d\x9a\xb6Ye"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    str_0 = 'z<e"&I-#x0Ua_P[+i17C'
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, str_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    int_0 = 859
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    none_type_0 = None
    str_0 = 'h<JP<dw`)"IQs8'
    str_1 = "n;\nWL*?c1"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


def test_case_4821():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4822():
    bytes_0 = b"\x15\xf8\x88\x9c\xe3\x96\x086\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    bytes_0 = b"\xd8\xf9,q/\x05\x17EW\x12\xe7\xb4\xdd\xf9\xf1\x88"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    str_0 = "&!\x0c'i_WXv8=~^/["
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_4826():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4827():
    str_0 = "5]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    bytes_0 = b"_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    int_0 = 3250
    str_0 = "I\x0cTH3]y^!1EQvZ*-ft"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    none_type_0 = None
    tuple_0 = (none_type_0,)
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: tuple_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, tuple_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    none_type_0 = None
    bytes_0 = b"\xc6Z~\xd6"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    bool_0 = False
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    float_0 = -1080.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    int_0 = 1386
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0, int_0, int_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    str_0 = "626#l)"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    str_0 = ":%,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    int_0 = 3322
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    str_0 = "F|%zaC7U_,\nu7ssf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    str_0 = "fYX]i^0v^tr"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    bytes_0 = b"\x0b\x83'P+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    str_0 = "OU&+**|nr1E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    int_0 = 2862
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    str_0 = "r)P#1?E/p\r"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    bytes_0 = b"\x9a\xd0P\xfb\xf3\xab\xf2\xe7\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    int_0 = 395
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    float_0 = -4331.973
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    int_0 = -1406
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    str_0 = ";y\tM4m&>pRV-qQS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    float_0 = -842.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    str_0 = "Y5c?\nND/^K]K=dC9/X"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    complex_0 = 257 + 881.78j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    bytes_0 = b"\xe6\x1e\x86\x9e\x8c\x0f\xdf\xa9\xcd\x1e:\xb8\xf3}\x03j\x94\xbb\xe03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    str_0 = "pC?Y_#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    tuple_0 = ()
    bytes_0 = b"\xae"
    dict_0 = {tuple_0: bytes_0, tuple_0: bytes_0, tuple_0: bytes_0, bytes_0: tuple_0}
    tuple_1 = (dict_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bytes_0 = b"\xa6\xe2q\x03F\x96U\x93\xa1\xe0?\xf0w\x7f\x85\xf3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "R&(ZI byKm"
    tuple_0 = (dict_0, str_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    str_0 = '+ Ugn]7a?P k"\rCwyAr'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    float_0 = 1877.24
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    int_0 = 255
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    bytes_0 = b"&"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_4864():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4865():
    bytes_0 = b"\xe8\xa0\x91"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    complex_0 = 429.635 + 214.0701j
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    float_0 = 1999.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    bytes_0 = b"u\xd5\xda\x9e\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    str_0 = ",wE+%,e*"
    set_0 = {str_0}
    tuple_0 = (str_0,)
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    float_0 = 3977.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    bytes_0 = b"\xcc\x03\x7f\xdeO;\xb2]by\xa2h\x92B\xc2V\xd4\xdaU"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    bool_0 = False
    str_0 = "B%,kpFRLk"
    bool_1 = False
    tuple_0 = (str_0, bool_1)
    set_0 = {bool_0, bool_0, tuple_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    int_0 = -1676
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    str_0 = "=yCjoS)p;kNc}.hZ`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    bytes_0 = b"<\xd4U\x0f_\xe3\x8e\x93\xcc\xdd\xacS\xda\xf5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    int_0 = -795
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    float_0 = 2885.0
    module_0.get_new_command(float_0, float_0)


def test_case_4877():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4878():
    int_0 = 754
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    int_0 = -1344
    str_0 = "!c\t"
    tuple_0 = (int_0, str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_4880():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4881():
    bool_0 = True
    bytes_0 = b"\x16DM\x899c8\xa2\xa4R"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    int_0 = 3800
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    list_0 = []
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    dict_0 = {}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    dict_0 = {}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    bytes_0 = b"#L\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    str_0 = "rT|Sc![7v7m{r+=0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    int_0 = -1386
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    int_0 = 1619
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    str_0 = "7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    str_0 = "R<;491b3t.@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    int_0 = -1491
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    complex_0 = -1686.1 + 2776.84j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    complex_0 = -364.674 - 1573.551j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    complex_0 = -3257.3886 + 2478.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    str_0 = "Jt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    complex_0 = -3753 + 1055.864j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    bytes_0 = b"#\x98\x9d\x0c\xda\xd2\xfcS(\xd0\x89\x94c-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    bytes_0 = b"\x90\x16\xfe\x08A.E\t>@zz\xe2\x9c\x85\xa9\xee\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    str_0 = "3q \r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    bool_0 = True
    set_0 = {bool_0}
    bool_1 = True
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    int_0 = 1549
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    str_0 = "5iwywV1V-Fi"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    int_0 = -1013
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    float_0 = -877.42
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    int_0 = 5203
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    int_0 = -1069
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    str_0 = "&,CHpMO\x0cg0ANC\nDv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    int_0 = -2333
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    str_0 = "Wc^U\n"
    int_0 = 1049
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    str_0 = ")aw[&3OT(M\n/"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    bytes_0 = b"V\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    bytes_0 = b"\x01\xc7>}zK\\"
    str_0 = "V&QWR#!`mupx["
    list_0 = [bytes_0, bytes_0, bytes_0, str_0]
    int_0 = -1621
    tuple_0 = (list_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    bytes_0 = b">\t\xc5>\x9e2\x1dQW\x14"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    bytes_0 = b"*.\xb9\xdf\xdc\x8af6#\x9bca\x9b\x92\x04\xde~\x9b\xc85"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    int_0 = 168
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4923():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4924():
    int_0 = -248
    module_0.get_new_command(int_0, int_0)


def test_case_4925():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4926():
    bytes_0 = b"b\xfd\xd2\xaa\x92\x93+\xe08L,\x8ab\x00 /"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    bytes_0 = b"\xb1\x92OQ\xb1\r\x83tVV\xe4\x1a\x90\x997\x19\xd6\x91\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_4929():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    int_0 = -268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    dict_0 = {}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_4932():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4933():
    int_0 = 1829
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    float_0 = 4813.941
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    bytes_0 = b"\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    int_0 = 1709
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    set_0 = set()
    bytes_0 = b'>\xd2\x1d\x90\x9e\xbb\xb5"'
    tuple_0 = (set_0, bytes_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


def test_case_4938():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4939():
    bool_0 = True
    bytes_0 = b"!\x07i\x18\xcd\x02\xeeeV\xc2W\x8b\x83\n\xcb\x92\x10>\xbf"
    set_0 = {bool_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    int_0 = 642
    module_0.match(int_0, int_0)


def test_case_4941():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4942():
    float_0 = 2215.96723
    list_0 = [float_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    bytes_0 = b"v\x18\xdc\xee:\xd3\xbbd`\x17_\xed\x01\xea\xfb-?O#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    bytes_0 = b"h\x90\xe6\xfcr\xd7uJ\xd3Vm\xb5\xe5\xbf\xdemb"
    tuple_0 = (bytes_0,)
    int_0 = 1127
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    bytes_0 = b"c\xb7\x80wu\x9c9\xb2\x86{/\xad\x8c\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    bytes_0 = b"]W\xb4\\\xdc\x1ag\x9e\xfbzz\x08\xdc8W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    bytes_0 = b"\xabl\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    bool_0 = True
    bytes_0 = b"\xcc\xc8\x9d\x84\xcc\x00+(t\x00\x89\x9eQ"
    int_0 = 473
    tuple_0 = (bool_0, bytes_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    int_0 = 2594
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_4951():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4952():
    int_0 = 3803
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    int_0 = -1747
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = "?J/:e\\QcY$\x0c_"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    int_0 = 324
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    float_0 = 1617.182
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    str_0 = "r{pEEB7!N.te\x0c\rDX="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    int_0 = 1441
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    tuple_0 = ()
    list_0 = [tuple_0]
    tuple_1 = (tuple_0, list_0, list_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    int_0 = 2162
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    float_0 = 2198.67
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    bytes_0 = b"mR\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    str_0 = "+IFT0*g,.Lf2o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    bytes_0 = b"\x05/\x10X\x8d\xf4\xb2T0\x12\x07\xdf\x94\xd9\x1c*Z\x88"
    int_0 = 1577
    list_0 = [bytes_0, bytes_0, bytes_0, int_0]
    set_0 = set()
    module_0.match(list_0, set_0)


def test_case_4965():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4966():
    bool_0 = True
    str_0 = "."
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    int_0 = -2433
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    str_0 = "\x0cQ.E"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    bool_0 = False
    complex_0 = 492.6 + 308.65355j
    set_0 = set()
    bytes_0 = b"O\xdaOD\x91\xf5\x1f&\x8d{\x9d"
    tuple_0 = (bool_0, complex_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    int_0 = -367
    dict_0 = {int_0: int_0, int_0: int_0}
    str_0 = ""
    tuple_0 = (dict_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    str_0 = "3AL1~FZ"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    tuple_0 = (list_1,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    bool_0 = False
    int_0 = 202
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    float_0 = -1960.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    bytes_0 = b"\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    int_0 = -295
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    str_0 = '"?\rT1&%'
    list_0 = [str_0]
    tuple_0 = (list_0,)
    tuple_1 = (list_0, tuple_0)
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    str_0 = "1etRxG%Du/4kWK"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0}
    dict_1 = {str_0: bool_0, bool_0: dict_0}
    module_0.match(dict_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    float_0 = 4120.50518
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    int_0 = -4296
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    bytes_0 = b"\xd4\xb8\xeej\xa9\x02\xd9\xc6}\x89\xa3W\xfeM"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    str_0 = "NOgm&6J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    dict_0 = {}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    str_0 = "dWW`B0"
    list_0 = [str_0, str_0, str_0, str_0]
    str_1 = ""
    str_2 = "8~c,q2N"
    str_3 = "ecC"
    dict_0 = {str_1: list_0, str_2: str_0, str_3: str_3}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    int_0 = 1528
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    str_0 = "b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    float_0 = 1804.15
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    str_0 = "ll'+H\t44a<5}=m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    bytes_0 = b"\xf7\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    none_type_0 = None
    str_0 = "\x0c`"
    str_1 = "bXPUzN\x0c`u"
    str_2 = 'V`0"d-/'
    dict_0 = {str_0: none_type_0, str_1: str_1, str_1: none_type_0, str_2: str_1}
    module_1.object(*none_type_0, **dict_0)


def test_case_4994():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4995():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = 'oHf-M|S/.h\t&"<%(Sr'
    dict_0 = {str_0: list_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


def test_case_4996():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4997():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    bytes_0 = b"nU\x91\x0c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    bytes_0 = b"t\xadvEh\x03\xf4-F"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    str_0 = "k_K0uD*wO{?T\x0c"
    module_0.match(str_0, str_0)


def test_case_5001():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5002():
    str_0 = "QONCIoYb'4V}K"
    int_0 = 3009
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    bytes_0 = b"|&\x0bq\xb8\xde8\x8d\xfd\x1e\xd5"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    bool_0 = True
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    int_0 = 3793
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    int_0 = 808
    complex_0 = -160.109 + 743.191j
    module_0.get_new_command(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    str_0 = "Fw&Vvm><OOW2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    float_0 = -160.5
    str_0 = "?+%Kc~xb#\re9@\tQC"
    module_0.get_new_command(float_0, str_0)


def test_case_5011():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5012():
    float_0 = 3293.0144
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    str_0 = "b?k?nGE>cQX)gz1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    int_0 = 3429
    module_0.get_new_command(int_0, int_0)


def test_case_5015():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5016():
    int_0 = 947
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    str_0 = "aN?\\5M-=Z12e}U2Vi%U"
    str_1 = "\x0c8+XCb"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    str_0 = "+]@"
    str_1 = "|c|-X"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    str_0 = "o"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_5021():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5022():
    bytes_0 = b"\xa1\xfa\x96\xcf!\xe30\x99\x00g-\xaf\x81"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    set_0 = set()
    str_0 = "K\\g_B"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    float_0 = 1276.07
    list_0 = [float_0, float_0, float_0, float_0]
    list_1 = [list_0, float_0, list_0, float_0]
    complex_0 = -6672.1108 + 287.8j
    module_0.get_new_command(list_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    str_0 = "08h"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    int_0 = 1665
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    str_0 = "W{b,Fr"
    module_0.get_new_command(str_0, str_0)


def test_case_5029():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5030():
    bytes_0 = b"\xa6v\xf5U_\xb77\x98\xe8\x94\x1b\xdb\xa8\x01\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    bool_0 = True
    bytes_0 = b""
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    dict_0 = {}
    object_0 = module_1.object()
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    complex_0 = -1677 + 245.761j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    int_0 = -2067
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    str_0 = '"37A6:|.l|'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    float_0 = -5392.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    bytes_0 = b"QD\xd7v\xde\xd1\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    float_0 = -1618.0
    module_0.match(float_0, float_0)


def test_case_5041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5042():
    str_0 = " qYM4TP:DI+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    bytes_0 = b"\x94\xf5\xbd\x1a\xa0\xeaj"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    int_0 = 353
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    str_0 = "7&g3#\x0cV`h-IZ\x0c[:dT#&|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    str_0 = "d"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    int_0 = -446
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    int_0 = 1441
    int_1 = 2084
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    list_0 = [object_0, object_0, object_0, dict_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    int_0 = 1256
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    float_0 = 1028.6612
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    int_0 = 839
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    int_0 = 145
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    int_0 = 964
    module_0.get_new_command(int_0, int_0)


def test_case_5058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5059():
    float_0 = 1171.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    bytes_0 = b"\x1a\xa8eVP\x10g \x8e LN\xad\n\xe3\x1f\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    int_0 = 2103
    int_1 = -3061
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_1}
    tuple_0 = (dict_0,)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0, int_1)
    module_0.get_new_command(tuple_1, int_1)


def test_case_5062():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5063():
    str_0 = "(9&k\\p6n\t336`5#="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    complex_0 = -669.65 + 962j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    str_0 = "]#g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    int_0 = 2539
    bytes_0 = b"q\xc4\xea\x01\xed_\\Q+\xc9\xfa"
    set_0 = {int_0, int_0, bytes_0}
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    str_0 = "x;$6`:QW"
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    int_0 = -292
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    bytes_0 = b"~-r?\xfb\x01\xdc\x87yxSKs\x13M"
    list_0 = [bytes_0]
    bool_0 = True
    list_1 = [bytes_0, list_0, bool_0]
    list_2 = [list_1]
    module_0.get_new_command(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    int_0 = -889
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    complex_0 = -2552.3 + 207.4074j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    int_0 = -2282
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    str_0 = "i{N=wC!jZ'>v`\x0b"
    str_1 = "Tk]:S_GO6+"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    str_0 = "+PK!a]WciSdVa~a]N/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    int_0 = 2359
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    list_0 = []
    tuple_0 = ()
    complex_0 = 1984.444 + 196.88j
    tuple_1 = (list_0, tuple_0, tuple_0, complex_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    int_0 = 3043
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    str_0 = "Q#sj`wX'*`Z7"
    set_0 = {str_0, str_0, str_0}
    bytes_0 = b"\xc3\xc9\x1c,"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    int_0 = 3039
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    str_0 = "C6{=0Za"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    bytes_0 = b'\x08s\xba4\x84\xa8\x98\xf0\xdc\xfe\x98\xf5r]b"\x07\x9f'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    bytes_0 = b'\xb2\x96\xbe\xcb\xa5\xd6\x90\xa8"\x8d\xa3@45'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    none_type_0 = None
    str_0 = "E0feIhOPt%3j"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    int_0 = 2234
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    dict_0 = {int_0: int_0, tuple_0: tuple_1}
    tuple_2 = (tuple_0, dict_0, dict_0, dict_0)
    list_0 = [int_0, int_0]
    module_0.get_new_command(tuple_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    int_0 = -2016
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    str_0 = "2|O.rvY\x0b\x0c\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    bytes_0 = b"\xd4u\xc9\xb2=\xc5\xf0* \x93\xc27W\x07'"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    int_0 = -3262
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    int_0 = -2991
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    float_0 = -738.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    bytes_0 = b"s\x90_M\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5098():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5099():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    float_0 = 5254.642
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    str_0 = "tC'zBN\rr@L[I("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    bytes_0 = b"\x95U\x10T@\xbck\xc5\xae\xd4\xe6JH\x812X"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    str_0 = ""
    str_1 = "f>\r<bp1]A;7g`2"
    int_0 = -3219
    dict_0 = {str_0: str_1, int_0: int_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    int_0 = -1844
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    int_0 = -3047
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    none_type_0 = None
    bytes_0 = b"N\x9a\x92"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    object_0 = module_1.object()
    float_0 = -918.674
    tuple_0 = (float_0, float_0)
    tuple_1 = (object_0, tuple_0)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    bytes_0 = b"\x85\xd8.\xef\x08\xdd\xd7>\x11\x16\xf6`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    int_0 = -42
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    int_0 = 3279
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    float_0 = 368.268315
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    bytes_0 = b"t_\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    str_0 = "Q{+egiXp1p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    str_0 = "*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    bytes_0 = b"\xea\xbe\xaf\xfdD*&\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    bool_0 = False
    int_0 = 342
    tuple_0 = (int_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    int_0 = -863
    int_1 = 1108
    tuple_0 = (int_1, int_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    tuple_0 = ()
    float_0 = 41.650321
    set_0 = {tuple_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    bytes_0 = b"\xa7)\xacdn@?4L=\xb5"
    float_0 = -2387.22881
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    float_0 = 2709.931
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    float_0 = 3419.607
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    bytes_0 = b"J\xf2\xfa\xb4\xf8\xddZX\xe1\x1e\x86e5\xba\x1d\x81j"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    bytes_0 = b"\x9e\xe8\xa6\xac\x9aE\xafe\x04E\xb1\xd9\xaeH"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    str_0 = "F8Uw^4}jb4b[Sp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    bytes_0 = b"\x80\xb6\x19"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    int_0 = 3386
    module_0.get_new_command(int_0, int_0)


def test_case_5128():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5129():
    str_0 = '%OwcXG}84+-b86"_'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    int_0 = 719
    module_0.match(int_0, int_0)


def test_case_5131():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5132():
    float_0 = 771.9912
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    int_0 = 372
    list_0 = [int_0]
    list_1 = [list_0, int_0, list_0, list_0]
    list_2 = [list_1, list_0, list_0]
    module_0.get_new_command(list_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    bytes_0 = b"\xb9\x89t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    str_0 = ")<I9qyWB"
    tuple_0 = (bytes_0, dict_0, str_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    str_0 = "Ppex9"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    int_0 = 1713
    module_0.get_new_command(int_0, int_0)


def test_case_5141():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5142():
    object_0 = module_1.object()
    bool_0 = False
    int_0 = 2973
    tuple_0 = (bool_0, int_0)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    bytes_0 = b"\x8d\x18\x90^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    float_0 = -1749.730318
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    str_0 = ""
    int_0 = 346
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    str_0 = "Weg/NYEHBwJ^u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    float_0 = 2123.0596
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    bytes_0 = b"\x9aC8\x06\x05\x84"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    str_0 = "u=Rr3d2Ig+\\}k_\x0c@`"
    str_1 = "oMwsV^"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    str_0 = "I5JnK\\3SQ>7"
    module_0.match(str_0, str_0)


def test_case_5151():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5152():
    int_0 = -617
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    str_0 = "=MR,%}^($g)kv=XL"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    float_0 = 996.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    float_0 = -2743.413209
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    int_0 = 4954
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    str_0 = 'rdc~!u"62U4A '
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    str_0 = "<{"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    str_0 = "(edV|$|Fv2o"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    int_0 = -1734
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    int_0 = 1447
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    bytes_0 = b"+\xe7huC\x89\x91\xa4\xe2L|6\xb0\x99$N|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    str_0 = "*B?vmnn|h9O\x0bN{"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    bytes_0 = b"\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    int_0 = -1837
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    complex_0 = -93.942 + 4624.498276j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    bool_0 = False
    str_0 = "f#sGwcfJT}TR%kG\x0bd"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    complex_0 = -1233.56 - 956.1224j
    bool_0 = False
    int_0 = -4078
    tuple_0 = (complex_0, complex_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, complex_0)


def test_case_5170():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5171():
    int_0 = -2863
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    bool_0 = True
    int_0 = 6339
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    bytes_0 = b"\xc1\x16\xd4\xc2\xbd\x0c\x84Y\x83"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    int_0 = -743
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    str_0 = "}ul).5RKUvpI\tk&Ea"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    bool_0 = False
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    str_0 = "K$ a"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    bytes_0 = b"b\xd6\xcf \xf9\xd4\xb0\x84\xf2\xbeZd"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    bytes_0 = b"z\t#`V\xf1fIE\xd0\xfa>o\x15\xd2\x0f9D"
    module_0.match(bytes_0, bytes_0)


def test_case_5181():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5182():
    str_0 = "=@4Bi*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    bytes_0 = b"I"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    str_0 = "o6]</hp#7DraH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    float_0 = 1007.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    str_0 = "="
    complex_0 = 1950.937 - 103.416j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    float_0 = -1607.974421
    set_0 = {float_0}
    module_0.match(set_0, float_0)


def test_case_5188():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5189():
    int_0 = -1247
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    list_0 = []
    object_0 = module_1.object(*list_0)
    str_0 = "\x0c+W_![&(@o3xj2FjPiFK"
    tuple_0 = (object_0, str_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    float_0 = 10.895187
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    int_0 = 257
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    str_0 = "r/y\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    str_0 = "wkj\x0cCp2Qo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    bytes_0 = b"\x0c2P\x91;\xa7\xa5\x9c\xed\x189b\x06\xcb_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    bytes_0 = b"x\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    object_0 = module_1.object()
    bytes_0 = b"\r\xd8\x93r"
    dict_0 = {
        object_0: bytes_0,
        bytes_0: object_0,
        bytes_0: bytes_0,
        object_0: object_0,
    }
    str_0 = "6%d`Y l4}wa\n2Jxdoz"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    str_0 = "\x0c:<cY;'QyU "
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    str_0 = "_J4 "
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    bytes_0 = b'/\x14\x00\t\xa91R\xdch"[\x9fX\xdd\xc3\xc6ls'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    str_0 = 'I\x0c"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    bytes_0 = b"\xb4\xb1"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    complex_0 = -2130.981414 - 734.981964j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    str_0 = "2/b?[pcE87<)r<q`[&Gy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    str_0 = "vY#p~UMx=IQ1Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    bytes_0 = b"\xf3\x19\xf1w(\xf9\xd4&A\x0fy"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    bytes_0 = b"\xc3u_\xbf\xddc\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    float_0 = 4536.473
    list_0 = [float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0, tuple_0, tuple_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    int_0 = -1657
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    bytes_0 = b"qC\xca\x11C"
    tuple_0 = (dict_0, bytes_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    str_0 = "?~<g]dn|H3px\rJ["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    str_0 = "oL-rDh"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    float_0 = 2098.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    complex_0 = -784 + 390.4295j
    module_0.match(complex_0, complex_0)


def test_case_5218():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5219():
    bytes_0 = b"\xe7\xe5P1\xa9\xb8E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    complex_0 = 1174.15 - 2771.6153j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    str_0 = "Y\\QcZhN9QQ"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    int_0 = 2190
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    bytes_0 = b"\x08\x90\xc4f\xbaL+\x94\x82\xc1\x1b\xb6*\xfa(\\"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    int_0 = 966
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    complex_0 = 691.555 + 1093.780984j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    complex_0 = -1585.977023 + 33.433313j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    int_0 = 1864
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    complex_0 = 396.61 - 571.3208j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    bytes_0 = b"\xb2n\xd5\xe4\xdbU\x86\x1f\x10\x14\x06?*\xb4~\r\xd4@"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    int_0 = 952
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    str_0 = "o6/4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    bytes_0 = b"\xc2\xc1\x1f\x16\x8e\xf2f\x03\x86"
    str_0 = "bD6(P{/&WZ-c+TE^#}"
    tuple_0 = (bytes_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    bytes_0 = b"2\xc4\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    str_0 = "{xvs^P%1~9:mwPKskX9["
    int_0 = 1878
    tuple_0 = (str_0, int_0)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    float_0 = 989.1
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    str_0 = "\\$<]]z2/Nx*^V\n4]"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    bytes_0 = b"\xc3\xf6\xf6B\xea\xa9\xb9\xe3\xe98\xcc\x90\x15\xce5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    float_0 = 543.34
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    set_1 = {bool_0}
    list_0 = [set_0, bool_0, set_1]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    bytes_0 = b"#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    bytes_0 = b"\x18\x85"
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    bytes_0 = b"}V"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    str_0 = "C&bIl~lVp"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    bool_0 = False
    bytes_0 = b"\xd4\xa6H\x99z5i\xbbD\xa3\xfaPT1i"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    bytes_0 = b"\xf8.\x8fi\x0b\x08U\xe0\n\xcb\x8c\x1c\x8b\x9e<\xda\t\xeb"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    bytes_0 = b"\xd4tlVv\x10\xabN\x84pD\rU\xae'B\xfc"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    float_0 = 2759.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    set_0 = set()
    int_0 = 93
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    float_0 = -545.201
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    float_0 = -5428.4319
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    none_type_0 = None
    int_0 = -94
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    bytes_0 = b"y\xa1p\x9e\x87\xa2\xd9\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    int_0 = 5518
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    bytes_0 = b"\xc3\xaagh\xf9M\xcd&\xf8>\xb3\xfc"
    module_0.match(bytes_0, bytes_0)


def test_case_5261():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5262():
    bool_0 = True
    complex_0 = 1436.2 + 3161j
    dict_0 = {bool_0: complex_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    str_0 = "0O#/\x0c^p!5*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    int_0 = -830
    tuple_1 = (tuple_0, bool_0, int_0, bool_0)
    bool_1 = True
    module_0.get_new_command(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    str_0 = ";N\rQDAT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    float_0 = 3864.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    int_0 = 1135
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    int_0 = 1606
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    str_0 = "tG7qIcih@z^\x0c"
    bytes_0 = b"\xa4P\x06\x1d\xadv\xaf\xc9"
    dict_0 = {str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    bytes_0 = b"\xfa\x97W\x97\x91~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    int_0 = -2536
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    bytes_0 = b"\xad\xcd"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    int_0 = -2649
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    bytes_0 = b"1\xfd\x91r\x8d?\x82;\x82\xda#|\x01\xbe\r\x81\xb0Y"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    bytes_0 = b"\xde\xd2\xa2\xa3\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    int_0 = -1580
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    float_0 = 3107.2607
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    str_0 = "kEh2h})`b{#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    int_0 = 138
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    float_0 = 1681.8387
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    int_0 = -1329
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    int_0 = 980
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    float_0 = 2042.42546
    module_0.get_new_command(float_0, float_0)


def test_case_5285():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5286():
    complex_0 = 302.6816 - 378.213j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    complex_0 = -2281.653 + 424.47j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    str_0 = "#3"
    dict_0 = {str_0: str_0, str_0: str_0}
    int_0 = -774
    tuple_0 = (dict_0, int_0)
    list_0 = [tuple_0, tuple_0, dict_0, tuple_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    float_0 = -454.064
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    int_0 = -2731
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    bytes_0 = b"N\x17\xe0o\x1e\xcf]K\xa8>7es\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    bytes_0 = b"\xd9\x8b\x03\xdcl\xaaO\xb8"
    tuple_0 = (bytes_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    bool_0 = True
    bytes_0 = b"@8\x9a\x0e\xd2x~\x0b"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    bytes_0 = b"u\xcc\x8fq\x8b\x1a\xacS\x81"
    module_0.match(bytes_0, bytes_0)


def test_case_5297():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5298():
    bytes_0 = b"\xc1F\xcb\n=l\x06\x14r\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    float_0 = -1107.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    str_0 = "J&J5"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    float_0 = 1282.661
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    int_0 = -1641
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    bytes_0 = b",-F\xd0\xd5\xa8\xc1\x8dL\xc1b\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = False
    tuple_0 = (list_0, list_0, bool_1, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    float_0 = -786.72136
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    str_0 = "WBb$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    bytes_0 = b"\xb7\xa2\xbb\x99\nS\xcc\x87>we\x87\xe9\x0c\x10\x9b\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    int_0 = -983
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    int_0 = 3031
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    str_0 = "("
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    bool_0 = False
    int_0 = 136
    list_0 = [int_0, int_0, int_0, bool_0]
    tuple_0 = (bool_0, int_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    bytes_0 = b"25g\xca\xe7{.\x15\x17F\xed\xca\x94\xa1#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    str_0 = "h1uu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    str_0 = "Q\r\rJ5Zvlg2"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    float_0 = 852.685079
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    bytes_0 = b"\xdbI*Q\xc4.\x9aR"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    str_0 = "S<lABFtZ"
    str_1 = "j+!s"
    str_2 = "#n%i0"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    str_0 = "9p(TO{H-^,\neQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    bytes_0 = b"F\xd9\xb6v\xf1j\x03`b\xd9~\x17=8\x96J\x1bT~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    int_0 = 2442
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    complex_0 = -1495 - 2160.142627j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    int_0 = -73
    complex_0 = -270.5 - 5005.35j
    str_0 = "u=4_!7ACscA\n"
    tuple_0 = (int_0, complex_0, str_0, int_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    bytes_0 = b"\x82\xecR\xe8\xfb\xba\xb5#"
    module_0.match(bytes_0, bytes_0)


def test_case_5328():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5329():
    float_0 = 1065.54
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    int_0 = 3837
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    int_0 = -801
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    int_0 = 2432
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    float_0 = -3707.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    str_0 = "@\x0cBESh&#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    str_0 = "w:iV!wD"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    str_0 = "gw_$/Y0-I("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    complex_0 = 3368.57 + 455.949j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    int_0 = -728
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    bytes_0 = b"c\x7f\xca!v"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    int_0 = -1232
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    bool_0 = True
    str_0 = "<4/'_wRHX`E(Yl.*]ft"
    dict_0 = {}
    tuple_0 = (bool_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    str_0 = 'Uq\x0chdIAb_&]7D8"8!qk$'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_5344():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5345():
    bytes_0 = b"\x18\xa7\xa3\xd8\x91{r\xe5}\xa2XBI"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    str_0 = 'Wy"A '
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\x9d\xe3\xd9T\xe6\x9a"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    bytes_0 = b"\xbc\x16\x10\xdc\x94if\xff\xfca\xe6\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    int_0 = -729
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    float_0 = -3466.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    str_0 = "uC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    float_0 = 775.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    bytes_0 = b"\x14\xf6kB1\xa5\x17\x10\xfd\x05\xc4p\xf0;\x1cT\x8d\x82\xe1\xba"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    bytes_0 = b"5\xe7Z"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_5355():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5356():
    int_0 = -1287
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    complex_0 = -717 - 1926.04j
    bytes_0 = b"\xc0\x1a\xea\x01\xbe\x9d "
    module_0.get_new_command(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    bytes_0 = b"\xa0\x91E\x14r8'\xf7\xec"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    float_0 = -1050.65065
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    bytes_0 = b"7\x8b\xc8}\xbe\r5\x16x-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    float_0 = 359.0
    tuple_0 = ()
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    int_0 = 1180
    int_1 = 1436
    object_0 = module_1.object()
    dict_0 = {int_0: int_0, int_1: int_0, object_0: int_1}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    int_0 = 4565
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    int_0 = -3481
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    str_0 = "p0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    int_0 = -3894
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    str_0 = "s[EDd5mU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    int_0 = -732
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    int_0 = 3241
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    str_0 = "%Z#\x0bs.KT"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    bool_0 = True
    bytes_0 = b"\xe5\xe1\xa8\x04C\xc1V\xc1n\xdb\xb4\t\xaf}B\xd5~i"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(bool_0, tuple_0)


def test_case_5372():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5373():
    str_0 = "XR7mb~p?"
    bool_0 = False
    bytes_0 = b"\xfd\xd0\x9d\x92\x08{Zn\xf3\x1d_\x1b\xf4\x93N\xd3\x06\x85\xfe"
    tuple_0 = (bool_0, bytes_0)
    set_0 = set()
    tuple_1 = (str_0, tuple_0, set_0, str_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    bytes_0 = b"\xadW\x12+\xaf\xf8k\xa7<\xcb\x14Cc\xc2\x98\xf1\xb2/\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    str_0 = "X3\x0cF5`K^}1]BQ2wad>"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(str_0, list_0)


def test_case_5376():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5377():
    str_0 = "8OJ {Hn0\x0bZq)^"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    float_0 = 889.0
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    bytes_0 = b"d\xfc\xa7y\xa6\xa0\xa6t"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    int_0 = 2471
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    bytes_0 = b"\x1eW\xc5E\xd6\x86\xaf\xe6c\xc7y2|\xc6KT\xcbj"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    str_0 = "riJT}V)n;Jh"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5385():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5386():
    str_0 = "-1Ty*n}y^\t|F)"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    str_0 = "r(va-%`gz9u8;yfK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    complex_0 = -578.815 + 737.9j
    none_type_0 = None
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    int_0 = -11
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    str_0 = ' B&"<X'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    dict_0 = {}
    str_0 = "gXk(HCdEsl[\tN\x0c?4Jxj"
    tuple_0 = (dict_0, dict_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    float_0 = -804.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    bytes_0 = b"\x03\x80\xa3z\x96\xdf\xc1G[\x91\x04}\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    int_0 = -168
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    str_0 = "'?!QJ8]h.yN r!\x0cD}o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    float_0 = -2981.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    str_0 = "^9MyXk B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    str_0 = "M|OCk44hOr!"
    int_0 = -4312
    tuple_0 = (str_0, int_0)
    tuple_1 = (tuple_0,)
    complex_0 = -700.47 - 834.7j
    module_0.match(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    str_0 = "\r+F\x0ck"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    int_0 = -1185
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    str_0 = "8%[ch%~B9A V(@A\n#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    int_0 = 3791
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    bytes_0 = b"s\xd0+\xbd\x9cg"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    float_0 = 965.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    str_0 = "!"
    int_0 = -595
    module_0.match(str_0, int_0)


def test_case_5409():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5410():
    bytes_0 = b"?\x04\xf3\xdd\xbd\x9fn\x03\xa5\xacX\xbe"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    str_0 = "q+_=$M[td?80[pKR9&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    int_0 = 744
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    bytes_0 = b"\xdd\xf6\xc5M\x84\xc8q\x02\x88\x13\x01+X\x0e\x97d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    bytes_0 = b"\xe4\x1dIa\xd4\xe1\x05\x1cs\xa1\x85\xe9\x02S"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    int_0 = 436
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    str_0 = "@h~_}-A{c^ \x0c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    float_0 = -1271.638
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    int_0 = -1727
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    int_0 = -612
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    int_0 = -1810
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    int_0 = -2359
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    bytes_0 = b"Ed\x0c\x86\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    bytes_0 = b"ae"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    complex_0 = -1229.562 - 2387.69j
    set_0 = {complex_0}
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_5429():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5430():
    int_0 = 5466
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_5431():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5432():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    bytes_0 = b"'\r\x84wFJ\x0c\xeb\x02\xfbJ\xa4\xce"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_5434():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5435():
    str_0 = "E\ril\r^}%9.5xppbQ4F)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    bytes_0 = b"a\x11\xfe=k\xf6r\xed\xc4\x17\xa4\xb6\xfd\x89&\xac#\xac\xdd\x98"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    bytes_0 = b".\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    int_0 = 144
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    bytes_0 = b"?\xe3:!\xe6W8\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    str_0 = "X\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    int_0 = 1316
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    int_0 = -494
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    int_0 = 2804
    module_0.get_new_command(int_0, int_0)


def test_case_5444():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5445():
    bytes_0 = b"\x9aG\xe0\x0c'\n4\x0b\x106\xb4Q\xf4\xb9\x8e\xd7\xe1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    float_0 = 2505.8873
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    int_0 = -1758
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    float_0 = 594.24929
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    bytes_0 = b"\xe5.\x89\xa96\xe5\x88\xff\xba\xdf\x14\xafB'\xea\xb4\xfaM\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5451():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5452():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    bytes_0 = b"\xe9\xf0\xff\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    int_0 = -1098
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    complex_0 = -1173.498 - 965.8j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    str_0 = "gB`-"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    str_0 = ":xjY$L$<T!UGuE3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    bool_0 = False
    float_0 = 298.0
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    bytes_0 = b"\xc5;\x9c(\x968r\x1f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    bytes_0 = b'\xb6~W\xd50%\xc4\xe7\x11\x1eoBu6"\xd2\x9dw'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    bytes_0 = b"$\xa1\xcf\x82\t\xe5\xb66\xba\xaa\xcd\xaaI/"
    set_0 = {bytes_0}
    bool_0 = True
    list_0 = [set_0, bool_0]
    bytes_1 = b"'\xda\x8a\x07\x18\xcc$\xc2\xc3"
    module_0.get_new_command(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    int_0 = 2683
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    int_0 = -2403
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    int_0 = 3235
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    bool_1 = False
    list_0 = [tuple_0, bool_0, bool_1, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    bytes_0 = b"s\xe5Z}\xd3\xe8\xd5\x8b\xa7\xbfc\x0c\x1a "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    int_0 = 378
    str_0 = '5;-"Io;hhZ$u$P}=\t)'
    bool_0 = True
    tuple_0 = (int_0, str_0, bool_0, int_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    bytes_0 = b'\xda\xc99\xad"\xaf\xcf\x89/\x08'
    str_0 = "HE|:9<u2Ep0-s@qTM"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    complex_0 = -657 - 1387j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_5471():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5472():
    int_0 = 774
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    str_0 = "[DwdNDUG"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    float_0 = -646.13823
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    int_0 = -1198
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    str_0 = "fKuS=\x0cG`p~Ar#{\tW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    str_0 = "#\x0c{F6A+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    bytes_0 = b"jAH\x01\x1eo\xb7\x05\x117\xef\xcd\xf2\xc2\xe2\xfb\xe9\x85\x8aI"
    tuple_0 = ()
    set_0 = {bytes_0, tuple_0, tuple_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    complex_0 = -366.8 + 176j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    bytes_0 = b"\xac\xec\xcd\xa4\xfe\xe5~p\x19\xa1\xa6\xc9$M2N\xf3L"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_5481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5482():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    complex_0 = 1852.3953 + 971.518789j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    bytes_0 = b"\xa7\x7f\xf0"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    bytes_0 = b"\rr\x123"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    int_0 = 615
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    int_0 = 437
    set_0 = {int_0, int_0}
    complex_0 = 811.20198 - 2285j
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    str_0 = "\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    float_0 = -1060.61
    bool_0 = False
    dict_0 = {float_0: float_0, bool_0: float_0, float_0: bool_0, float_0: float_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    complex_0 = 2621.95 + 915.5j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    float_0 = 597.443
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    bytes_0 = b"\x9c\x95\xf4\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    str_0 = "|Du}X/@d7vu<\\M\n]m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    str_0 = "\x0cxE\\-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    bytes_0 = b"\x7f\xf2s\xd2\xfcB\x99\xfc\x00\x96\x95\x00\x15\xed%="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    str_0 = '\n\\fu"F\'\n3"FYIl\\('
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    complex_0 = -2323.2 + 3443.942149j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    int_0 = -1921
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    str_0 = "^](1\nt[JB&bN'6>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    float_0 = 115.83
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    object_0 = module_1.object()
    str_0 = "Wt"
    dict_0 = {object_0: object_0, str_0: object_0, str_0: object_0, str_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    str_0 = "Y#kwHWP)~.b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


def test_case_5505():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5506():
    float_0 = 970.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    none_type_0 = None
    str_0 = "dKJ"
    module_0.match(none_type_0, str_0)


def test_case_5508():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5509():
    int_0 = 119
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    none_type_0 = None
    bytes_0 = b"\xd5em]\xb3\xf5)\x01\xf0.&[\xd6\xe7\x88\xaf|\x05]\x86"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    float_0 = -522.7856
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    float_0 = -158.4116
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    int_0 = 1109
    set_0 = {int_0}
    dict_0 = {int_0: set_0}
    module_0.match(dict_0, dict_0)


def test_case_5514():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5515():
    complex_0 = 869.33069 + 1340.3167j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    bytes_0 = b"|\xa2\x17|\x97&\xfb\xae!O"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    int_0 = -4
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    int_0 = -3402
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    float_0 = 2914.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    bytes_0 = b":d\x80\xba\x0b\xb1\xc2\xbbY\xbe\x86\x15\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    bytes_0 = b"\xdd8\xfa\xda\x8a\xb8xt\xcf\xdbu\x8e\xb1\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    object_0 = module_1.object()
    float_0 = 2427.78
    float_1 = -1412.25
    tuple_0 = (float_0, float_0, float_1, object_0)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    int_0 = 925
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    str_0 = "s@f\n%\n}I)6>7U"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    str_0 = "<caw\rMc\x0beIi}D&3Ac=s"
    float_0 = 2212.0
    bool_0 = False
    int_0 = -38
    dict_0 = {str_0: str_0, str_0: str_0, float_0: bool_0, int_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    int_0 = 2294
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    complex_0 = -1267.2861 + 3308.9228j
    bytes_0 = b"\xdb\xe9\x9c\x90e{\xf2\xa2\xf4o\x9e\xb6P\xceY\x17|\xa7"
    tuple_0 = (complex_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    str_0 = "5t3D\x0bah 9:&EUX"
    int_0 = 674
    tuple_0 = (str_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    str_0 = "LbAiI"
    tuple_0 = (str_0,)
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_5531():
    pass
