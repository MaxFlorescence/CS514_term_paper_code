# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import enum as module_0
import re as module_1
import builtins as module_2
import git_not_command as module_3
import locale as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    list_0 = [bool_0]
    module_1.search(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    object_0 = module_2.object()
    module_3.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    module_1.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"q"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "Tjs|~"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    tuple_0 = ()
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "AGLpWE8xx"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    complex_0 = 1050.6596 - 375.129j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_1.purge()
    module_0.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = 820
    error_0 = module_1.error(int_0, int_0)
    module_3.match(error_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "w`Z"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    list_0 = []
    module_1.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    complex_0 = -1670.586758 + 997.14j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    enum_dict_0 = module_0._EnumDict()
    module_1.escape(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    var_0 = module_1.purge()
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    float_0 = -1978.4
    none_type_0 = None
    module_1.finditer(float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "d}T@#0eTli}z%ww"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    float_0 = -1374.4
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    int_0 = -1993
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bytes_0 = b"\xb0\xea{l\x8d\xa3'\xea\xba\xb1\x9d\xa0\xfe\xd3"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = False
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_1.compile(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    bytes_0 = b"\x00v\xf1\x11\xd7\x07\x96\xaaCY8%\xa4,j\xd6a\xf1\xef"
    dict_0 = {bytes_0: bytes_0}
    module_0.unique(dict_0)


def test_case_37():
    pass


@pytest.mark.xfail(strict=True)
def test_case_38():
    float_0 = -3925.1743
    module_1.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    var_0 = module_1.purge()
    tuple_0 = (var_0,)
    module_1.finditer(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    bytes_0 = b"6"
    var_0 = module_1.compile(bytes_0)
    module_3.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    int_0 = 1731
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = "b"
    var_0 = module_1.finditer(str_0, str_0)
    module_3.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    bool_0 = False
    bool_1 = False
    module_3.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_45():
    dict_0 = {}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    set_0 = set()
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    bool_0 = True
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    float_0 = 424.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    float_0 = -376.541155
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    bool_0 = False
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    auto_0 = module_0.auto()
    none_type_0 = None
    module_3.match(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    bytes_0 = b"\xafl\xf3\x18\x8f\x18N\xbe\xe3\x88\xcdr"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    float_0 = 237.587637
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = "#i^,c"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    bool_0 = False
    module_3.match(var_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0, var_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    str_0 = 'H`3~EVTv"BWEjX+H\x0b'
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    list_1 = [list_0, dict_0]
    module_1.split(list_1, list_1, flags=list_1)


@pytest.mark.xfail(strict=True)
def test_case_63():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_64():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    auto_0 = module_0.auto()
    module_3.get_new_command(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    int_0 = 3377
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    none_type_0 = None
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    int_0 = -1942
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    bool_0 = True
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    str_0 = 'lA\t%"@\x0cPx?$xVv\t'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    base_exception_0 = module_2.BaseException()
    bytes_0 = b""
    module_3.get_new_command(base_exception_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    str_0 = "pzF3g,TL7"
    var_0 = module_1.split(str_0, str_0)
    dict_0 = {}
    module_3.get_new_command(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    error_0 = module_4.Error()
    dict_0 = {error_0: error_0}
    module_3.get_new_command(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_80():
    bool_0 = True
    list_0 = [bool_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    exception_0 = module_2.Exception()
    module_3.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    list_0 = []
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_85():
    str_0 = "Ex\\,1MFn"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    dict_0 = {}
    exception_0 = module_2.Exception(**dict_0)
    module_1.compile(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    none_type_0 = None
    regex_flag_0 = module_1.RegexFlag.ASCII
    module_3.get_new_command(none_type_0, regex_flag_0)


def test_case_88():
    pass


@pytest.mark.xfail(strict=True)
def test_case_89():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


def test_case_90():
    pass


@pytest.mark.xfail(strict=True)
def test_case_91():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    str_0 = "d"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    int_0 = -1178
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    bool_0 = True
    error_0 = module_1.error(bool_0, pos=bool_0)
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    bytes_0 = b'\xfff.\x8c!W\xb9\xd5\xf1\x84F`\xf9\xe0"\xb9\x1a'
    error_0 = module_1.error(bytes_0)
    module_3.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    str_0 = ""
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    bool_0 = False
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    int_0 = -2172
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    bytes_0 = b"o"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    str_0 = "2Ks&}Vj"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    str_0 = ")A"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    str_0 = "$!"
    var_0 = module_1.finditer(str_0, str_0)
    bytes_0 = b"]\xb3\xe3\xa83\x0be"
    module_1.Scanner(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    bool_0 = True
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    str_0 = "(3qBDI(#uUx\\S@7/"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    float_0 = -142.863832
    list_0 = [float_0]
    module_3.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    complex_0 = 437.24 - 3136.73987j
    none_type_0 = None
    module_3.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    bool_0 = True
    str_0 = "Y\\iaBXKp4X_F6G,"
    str_1 = '\r^hi"co\x0bVtDgI'
    dict_0 = {str_0: str_0, str_1: bool_0}
    module_2.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    str_0 = "nX-$Ub"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    float_0 = 685.8763
    set_0 = {float_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    var_0 = module_1.purge()
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    bool_0 = False
    none_type_0 = None
    module_3.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    float_0 = -304.3
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    none_type_0 = None
    module_0.EnumMeta(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    bytes_0 = b"\xe9\x18\xdf\xf8\x1a>\xf1'1\"*\xf4X\xff]R\x9fCK("
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    bytes_0 = b"["
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    float_0 = -3070.39
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    tuple_0 = ()
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_124():
    str_0 = ",p="
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    var_0 = module_1.purge()
    str_0 = "vLxL4B`TdP*{p-n2}"
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    str_0 = "_KX2]7 `(>VCgZ d"
    list_0 = [str_0]
    none_type_0 = None
    module_1.finditer(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    str_0 = "e9zFQ9cU"
    list_0 = [str_0]
    module_3.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    var_0 = module_1.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    bytes_0 = b"\xaa\x9a\x82H\xf4\x88\xdf_\xf9\x05\x8c"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    list_0 = []
    bool_0 = True
    module_1.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    none_type_0 = None
    bool_0 = True
    module_1.finditer(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    str_0 = "Iy-Lfp')SBVk"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    float_0 = -264.78335
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    int_0 = 415
    none_type_0 = None
    module_1.finditer(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


def test_case_138():
    pass


@pytest.mark.xfail(strict=True)
def test_case_139():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_3.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    float_0 = 2801.21052
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    bytes_0 = b"|\x052\x19F\xf8\x82Vv3\xe8\xcc"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    bytes_0 = b"\xe0J$\xe6\x9e\x14\xb2\xbf\xb0"
    bool_0 = True
    module_3.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    enum_dict_0 = module_0._EnumDict()
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    tuple_0 = ()
    module_1.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    regex_flag_0 = module_1.RegexFlag.ASCII
    module_1.compile(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    bool_0 = True
    str_0 = ""
    dict_0 = {bool_0: bool_0, bool_0: str_0, str_0: str_0}
    module_3.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    int_0 = -339
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    list_0 = []
    module_1.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    enum_dict_0 = module_0._EnumDict()
    module_1.escape(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    str_0 = "ry[7Jh?/M>L hCed#`"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, pos=none_type_0)
    module_3.match(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    int_0 = -3437
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    int_0 = 3029
    set_0 = {int_0}
    module_1.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    str_0 = ""
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    str_0 = "`5[fk^4$^f"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    str_0 = "B7OQD8crr ti=(/j#,"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    float_0 = -679.3512
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    dict_0 = {}
    module_1.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_167():
    int_0 = 549
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    bytes_0 = b"dI\xb6\x12\xfc"
    var_0 = module_1.findall(bytes_0, bytes_0)
    var_0.__reversed__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    bytes_0 = b"n\xd4\xd4\xd5\x8c"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    str_0 = "{"
    module_1.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    str_0 = "P)?\x0b@=JSo9d9fh\\ysk{?"
    module_3.get_new_command(str_0, str_0)


def test_case_173():
    bool_0 = True
    var_0 = module_1.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    bytes_0 = b"\xc4h\xd6\xd9\xde\x99\x02\xed.\x9dT"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_3.match(var_0, bytes_0)


def test_case_175():
    none_type_0 = None
    str_0 = ""
    var_0 = module_1.escape(str_0)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    tuple_0 = ()
    none_type_0 = None
    module_3.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0, var_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    int_0 = -773
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_183():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    bytes_0 = b"\x95g\xd0\xf9\xca\x04\xfa\xdf\x7f\x05r\x00\xcf{\xf7\x04\xcd\x19"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    bool_0 = True
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    bool_0 = True
    module_1.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    set_0 = set()
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    bytes_0 = b"\x8d\xaf{p\x8b\x88\xa7\xf0"
    none_type_0 = None
    module_1.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_3.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    float_0 = -555.73
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    tuple_0 = ()
    none_type_0 = None
    module_1.split(tuple_0, none_type_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    str_0 = "~6V"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    var_0 = module_1.purge()
    bool_0 = True
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    dict_0 = {}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    str_0 = "K|Jd"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0}
    module_3.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    str_0 = "d@0\\ "
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    dict_0 = {}
    none_type_0 = None
    module_1.finditer(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    bytes_0 = b""
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    bytes_0 = b'\xf1\x87"\xb7\x91\xec\x16\xfe'
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    int_0 = -1984
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    str_0 = "B$%\\6I$y1"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    int_0 = -453
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    str_0 = 'r+B"S%='
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    bytes_0 = b"\x17\xf1~i\xc7\xde\x15h\xb9v\xe4"
    var_0 = module_1.template(bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    bool_0 = False
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    module_3.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    base_exception_0 = module_2.BaseException()
    module_3.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    bytes_0 = b"4,\xc9J\x8e\x0cg"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    bytes_0 = b"\x9bap\xee9C\x13k"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    bytes_0 = b"\x0f"
    module_1.split(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    str_0 = "c1|W|6OP3IC}"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    str_0 = "^E7a:AZ0>qQ&N\\t&SJVQ"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    none_type_0 = None
    bool_0 = True
    module_3.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    bool_0 = True
    none_type_0 = None
    module_3.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    none_type_0 = None
    float_0 = 2936.83
    module_3.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    bytes_0 = b"\x9d\x1f\x8a"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    float_0 = -542.204
    dict_0 = {float_0: float_0, float_0: float_0}
    module_3.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    int_0 = 4972
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    enum_dict_0 = module_0._EnumDict()
    error_0 = module_1.error(enum_dict_0)
    module_3.get_new_command(error_0, enum_dict_0)


def test_case_229():
    pass


@pytest.mark.xfail(strict=True)
def test_case_230():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    str_0 = "C7Bu4< 'mmk>^2C7@$"
    module_1.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    float_0 = -2865.8
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    bytes_0 = b"v"
    var_0 = module_1.purge()
    var_0.__len__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    float_0 = 1195.85
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    str_0 = "pV\x0bS+RTa'"
    list_0 = [str_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    complex_0 = -1749.360704 + 1342.2j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    str_0 = "U*^>%I}B\x0c`o\x0cOMJVK\tX|"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0)
    module_3.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    int_0 = 8
    none_type_0 = None
    module_1.findall(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    bool_0 = False
    list_0 = [bool_0]
    module_3.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    bytes_0 = b"\x0f\x17\x84\xe8|Z"
    set_0 = {bytes_0, bytes_0}
    module_3.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    str_0 = "ZI?G;j'"
    str_1 = "y(%^w[MUX,(^7\x0b/\n.ZL'"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_0.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    int_0 = -2242
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    str_0 = " y~(Fee$US"
    dict_0 = {}
    module_3.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    int_0 = 851
    set_0 = {int_0}
    none_type_0 = None
    module_1.split(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    bytes_0 = b"\xdd0m\x0c\x82\xfa\x88\x8cQ\xf7{\t\x82\xc1\xa5e\xb4"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    int_0 = -2356
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    float_0 = -259.546955
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_3.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    bool_0 = False
    module_1.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    int_0 = -147
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    str_0 = "Sh?6':IST\x0cWV"
    str_1 = "xK/HCcCo\x0cKe"
    str_2 = "<-=(I@s(OA_~Xtm>V"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    bytes_0 = b"3"
    var_0 = module_1.subn(bytes_0, bytes_0, bytes_0)
    complex_0 = -2714.976 + 4589.56094j
    int_0 = -150
    tuple_0 = (complex_0, int_0, int_0)
    module_1.findall(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    bytes_0 = b"\xd3\x84\x10)\x1c\xc7\x87\xd3\x03\x85\xb1\x99\xe4\xd4\xa1\xde6\x02"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    bytes_0 = b"\xe5\x8e\xffpB\xcb.`bhFIP\x83"
    bool_0 = False
    list_0 = [bytes_0, bytes_0, bytes_0, bool_0]
    module_3.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    none_type_0 = None
    bool_0 = False
    module_3.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    set_0 = set()
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    tuple_0 = ()
    module_1.template(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_269():
    float_0 = 1201.76049
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    complex_0 = -3122 + 1842j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    str_0 = "Jxh0C1"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    float_0 = 691.5778
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    set_0 = set()
    module_1.finditer(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    int_0 = 3999
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    exception_0 = module_2.Exception()
    list_0 = [exception_0, exception_0, exception_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    float_0 = -938.158
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    bool_0 = False
    module_1.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    none_type_0 = None
    int_0 = 2188
    module_1.subn(none_type_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    module_3.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    int_0 = -2003
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_3.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    bytes_0 = b"\x8cq\x1f\xaf\x85\x06E\xbb\x83\xc0S]\x8e\x05!"
    module_1.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    str_0 = "q@*v4uHN)"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    str_0 = "|<D|Y5;zVv2ZvX\x0b;DxZI"
    var_0 = module_1.purge()
    module_3.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    list_0 = []
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    bytes_0 = b"D"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    bool_0 = False
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    bytes_0 = b"\xc8"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    int_0 = -1221
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_1.search(dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    int_0 = 1350
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    var_0 = module_1.purge()
    list_0 = [var_0]
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    int_0 = 2190
    none_type_0 = None
    module_1.subn(int_0, none_type_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    bytes_0 = b"\xdac\x0f\xa3\xc5r\xa6\xa6\xf9\xea"
    var_0 = module_1.sub(bytes_0, bytes_0, bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    error_0 = module_4.Error()
    module_3.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    bytes_0 = b"\\i<\xf4t\xa98\xc6n{*\x92\x01\x84YT\xcf"
    list_0 = [bytes_0]
    none_type_0 = None
    module_3.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    var_0 = module_1.purge()
    int_0 = 173
    module_1.split(int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    bytes_0 = b"B\xc7~zM\xf1\xc8\x8a"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    bytes_0 = b"\x8cC\xa7\xe9e@\xc1\xa7m\xe5~*\x1f6}P\xb2\xa0_"
    set_0 = {bytes_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    str_0 = '9!,9"Fq(]x'
    module_1.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    set_0 = set()
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    str_0 = "z)Mm#0jz"
    module_3.get_new_command(str_0, str_0)


def test_case_314():
    pass


@pytest.mark.xfail(strict=True)
def test_case_315():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_316():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    str_0 = "Ng K:?9,b"
    dict_0 = {str_0: str_0}
    module_0.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    float_0 = 163.88
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    bytes_0 = b"\xfdXL\x82\xdeb\xd0\xc2\t\x02\xe5\x08\xc0]9\x94\x15"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = -774
    module_3.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    bytes_0 = b"L"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    bool_0 = False
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_3.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    int_0 = 740
    set_0 = {int_0, int_0, int_0, int_0}
    module_3.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    float_0 = 53.8402
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    error_0 = module_4.Error()
    none_type_0 = None
    module_1.finditer(error_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    str_0 = "^{VD)-?X=\r~6-"
    module_1.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    int_0 = 3429
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    str_0 = "[\nr~"
    str_1 = "%IB)]&hPx"
    str_2 = "LGAqum*bTOM2a5o"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_1: str_2}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    list_0 = []
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    int_0 = 950
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    enum_dict_0 = module_0._EnumDict()
    module_3.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    int_0 = 1122
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    int_0 = -968
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    bytes_0 = b"\x9e\xf9"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    bytes_0 = b"'\t\xd6c\x9e'\x18\x81="
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    bytes_0 = b"\xc1\x11\xabr("
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    dict_0 = {}
    module_1.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    none_type_0 = None
    bool_0 = False
    module_3.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    list_0 = []
    int_0 = 3861
    tuple_0 = (list_0, list_0, int_0)
    module_3.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    str_0 = "\x0b -GAW\x0c:UM]i`"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    int_0 = -425
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    float_0 = -766.565
    module_1.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    int_0 = -725
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    str_0 = "x=UI&"
    dict_0 = {str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    complex_0 = -343.34 - 680.5j
    error_0 = module_1.error(complex_0)
    none_type_0 = None
    module_1.fullmatch(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    str_0 = '}p#\rCH*o\x0cU\n5"'
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    bytes_0 = b"G\xa1\x87\x0f@b\xad\x81\x98\xa3"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    none_type_0 = None
    float_0 = 847.0521
    module_3.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    int_0 = -1332
    set_0 = {int_0}
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    float_0 = -3371.7497
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    str_0 = "n`Q6mO"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_3.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    str_0 = "\n*T1^"
    module_1.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    int_0 = -3050
    none_type_0 = None
    module_1.split(int_0, int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    complex_0 = 2648.037 - 197.09j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    bytes_0 = b"\xfe\x18NC\xf1\xd5NF:x\xff\xeb\xbc,\x87\xbf"
    module_1.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    error_0 = module_4.Error()
    bytes_0 = b"1J\x1c\xeb\xa7\x11\r\xef7Z\xfd\xf7\x82\xc3m\xa0}\x9dy"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    var_0 = module_1.purge()
    var_0.__len__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    int_0 = 1073
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    bytes_0 = b"\xa2\xf8\x80\xe8\xbe\xa5\xe3\xab\xaf\xb2\xfd}>xY"
    var_0 = module_1.compile(bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    tuple_0 = ()
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


def test_case_378():
    pass


@pytest.mark.xfail(strict=True)
def test_case_379():
    exception_0 = module_2.Exception()
    none_type_0 = None
    module_3.match(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    set_0 = set()
    module_0.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    bytes_0 = b"Jx\xa6"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    regex_flag_0 = module_1.RegexFlag.DOTALL
    module_3.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    complex_0 = 2839 + 4631.70148j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    bytes_0 = b"\x8b\xac\x01\x8b"
    bool_0 = True
    module_1.findall(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    var_0 = module_1.purge()
    set_0 = {var_0, var_0, var_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    int_0 = 2030
    none_type_0 = None
    module_3.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    bytes_0 = b"\xc0\xd3"
    module_1.subn(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    bool_0 = False
    none_type_0 = None
    module_1.findall(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    list_0 = []
    error_0 = module_4.Error(*list_0)
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    complex_0 = -449.37 + 1143.56j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_395():
    bytes_0 = b"\x19\xf0\x0e\xbf\xef\x07\x964\xaf"
    var_0 = module_1.template(bytes_0)
    int_0 = -2048
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    float_0 = -2532.2
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    int_0 = -1454
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    set_0 = set()
    module_1.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    bytes_0 = b"@\x066b\x93"
    bytes_1 = b"3p!f\xcc\x814 \x96\xcb`\xc2"
    var_0 = module_1.sub(bytes_0, bytes_1, bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    list_0 = []
    bytes_0 = b"\xdfq\xf2\rE$\t4\xb2\xcf\xf9Ybz<n:\x08"
    tuple_0 = (list_0, bytes_0)
    bool_0 = True
    list_1 = [tuple_0, bytes_0, bytes_0, bool_0]
    module_3.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_402():
    str_0 = "/@\x0bnG*"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    dict_0 = {}
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    int_0 = 2649
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_1.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    bytes_0 = b"D\xb2\xbf\x14p\x1e8\xf8cD\xfa\xafO\xb1\xe2\xd0"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    complex_0 = -972 + 1930.978336j
    module_1.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    bytes_0 = b"\xe6\xa8sd\xd6H\x0e\r\x8c\xa6i\x0e\xa09\xbc\x04\xd3"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_415():
    str_0 = "I*-fe<1 s`T"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    str_0 = "."
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    bool_0 = True
    none_type_0 = None
    module_1.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_419():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    str_0 = 'Xkp"\t1&T?\x0c9;'
    none_type_0 = None
    module_1.findall(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    set_0 = set()
    module_1.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_3.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_426():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    enum_dict_0 = module_0._EnumDict()
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    bytes_0 = b"\x14\x07Y\xcc>(.\x1b\xf3I\xa6~\xc2\xc4"
    float_0 = -1788.2
    module_3.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_3.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    float_0 = -2639.0
    none_type_0 = None
    module_1.subn(none_type_0, float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    bool_0 = False
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    int_0 = 461
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    auto_0 = module_0.auto()
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__contains__(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    dict_0 = {}
    none_type_0 = None
    module_1.sub(dict_0, none_type_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    str_0 = "Z#F]\r<':UIwr53"
    list_0 = [str_0]
    tuple_0 = (str_0, list_0)
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_1.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    dict_0 = {}
    none_type_0 = None
    module_1.findall(dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    int_0 = -590
    none_type_0 = None
    module_1.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    bytes_0 = b"-\x86\xe9\x06"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    int_0 = 924
    list_0 = [int_0, int_0]
    module_3.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    auto_0 = module_0.auto()
    module_0.EnumMeta(*auto_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    bytes_0 = b"\xdb"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_3.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    str_0 = "T^$?9rV<{e-"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    int_0 = 1607
    bool_0 = False
    module_1.subn(int_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    bytes_0 = b"0n\xab.Y\x1bo\xe7\xd2\x98EUa"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    str_0 = 'Y]?"U`7e4l9YYVB-dJ'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    str_0 = "=p\r?)T\\Alk-^e,"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    dict_0 = {}
    exception_0 = module_2.Exception(**dict_0)
    float_0 = 3336.93799
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.split(float_0, float_0, float_0, dict_1)


def test_case_461():
    pass


@pytest.mark.xfail(strict=True)
def test_case_462():
    bool_0 = True
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    int_0 = -463
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    int_0 = -1572
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    complex_0 = 765.7 + 410j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_1.sub(dict_0, dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    bytes_0 = b"(\x93"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    float_0 = -120.0
    var_0 = module_1.purge()
    var_0.__iter__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    base_exception_0 = module_2.BaseException()
    module_1.split(base_exception_0, base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    int_0 = -1134
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    str_0 = "*D\x0c+3\x0bIVV3M`A M>SJ"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    bytes_0 = b"\xe3"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_3.get_new_command(tuple_0, none_type_0)


def test_case_473():
    pass


@pytest.mark.xfail(strict=True)
def test_case_474():
    str_0 = "*`\\(F2y~1??-\\\x0cs+w"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    int_0 = -1018
    dict_0 = {int_0: int_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    int_0 = -86
    none_type_0 = None
    module_1.subn(int_0, none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    bytes_0 = b'\xe7"O\xc7\xc6k\xc7\xfe\xb4\xf3'
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    int_0 = -113
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    bytes_0 = b"\x07Wg\xd7\x87\xb8\xa4"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    bytes_0 = b"\x7fM\xf6\xd7'\x84\xa2\x89\xf0"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    tuple_0 = ()
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    list_0 = []
    none_type_0 = None
    module_1.finditer(list_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    none_type_0 = None
    module_0.unique(none_type_0)


def test_case_489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_490():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    float_0 = -4009.8
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    int_0 = -784
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    list_0 = []
    none_type_0 = None
    module_3.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    var_0 = module_1.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    float_0 = -22.3174
    module_1.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    int_0 = -510
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    int_0 = -408
    module_1.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    dict_0 = {}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    float_0 = 2170.63926
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    str_0 = "q+<{DDh\n.HOenZFv\\2"
    module_2.Exception(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_505():
    str_0 = "GuU2y_d8IH=\n'i):WfO4"
    list_0 = [str_0, str_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    float_0 = -448.5322
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    int_0 = -1156
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    float_0 = -2219.9
    none_type_0 = None
    module_1.fullmatch(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    str_0 = "is9AV7Kq~7-5d&B%YZX\\"
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    complex_0 = 762 + 3058.3j
    module_1.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    str_0 = "7L*n:"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.fullmatch(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    bytes_0 = b"\x1e\xf4g"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    int_0 = 1948
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    bytes_0 = b"bk\xaa~zA+\x16\xe1\x15\xd0"
    none_type_0 = None
    module_1.subn(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    set_0 = set()
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    list_0 = []
    none_type_0 = None
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    exception_0 = module_2.Exception()
    module_3.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    error_0 = module_4.Error()
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, pos=none_type_0)
    module_1.split(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    int_0 = 3251
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    str_0 = "u6/XCMwGtNk9c"
    str_1 = "'f[e_n&"
    str_2 = "4Bj(6Lq_nn3}xQ\x0cAEZPG"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0, str_2: str_2}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    float_0 = -4223.356
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    none_type_0 = None
    module_0.EnumMeta(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_534():
    set_0 = set()
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    bool_0 = False
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    bytes_0 = b"(\xd4|\x92"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    bytes_0 = b"\x83\x9c\x15\x98`\xda\xbai\xc7\xa92P\xd3"
    dict_0 = {}
    var_0 = module_1.purge()
    tuple_0 = (bytes_0, dict_0, var_0, var_0)
    module_3.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    list_0 = []
    module_1.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    base_exception_0 = module_2.BaseException()
    module_1.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    str_0 = "Q\\DLzYbAXar^"
    none_type_0 = None
    module_1.search(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    bytes_0 = b"#\xb3v\xa2\xf2\x15\x99{\xe0I%\x01\x00\xe1\xe2\xc1"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    auto_0 = module_0.auto()
    module_1.split(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    str_0 = "U!O&Zwh"
    bool_0 = False
    module_3.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    complex_0 = -1280.565 + 468.03j
    module_1.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    exception_0 = module_2.Exception()
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    str_0 = "pU"
    var_0 = module_1.compile(str_0)
    tuple_0 = (var_0,)
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    bytes_0 = b"Q\xed>B\xfb\xfd\xdas\xa7\x80\xde"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    bytes_0 = b"\x9f\xe8\xd9\x97\xfc\x15\x92\x10\x98"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    auto_0 = module_0.auto()
    module_1.compile(auto_0)


def test_case_559():
    pass


@pytest.mark.xfail(strict=True)
def test_case_560():
    int_0 = 1738
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    bytes_0 = b"\xd2t\xea\xaf\x17\x91\xda\x1e\x06p\x1cmoC\x0b\x8d\xbb\x8d\xdbD"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    int_0 = 949
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    bytes_0 = b"\x8d\xeb"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    str_0 = "G5\x0bF(ByoXQ'zT$m"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    bool_0 = False
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    bytes_0 = b""
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    int_0 = 1320
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    none_type_0 = None
    complex_0 = 2410.17306 - 4187j
    module_3.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_574():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    exception_0 = module_2.Exception(*list_0)
    module_1.subn(exception_0, exception_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    int_0 = 2024
    none_type_0 = None
    module_3.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_579():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    int_0 = 140
    module_3.match(int_0, int_0)


def test_case_581():
    pass


@pytest.mark.xfail(strict=True)
def test_case_582():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_583():
    bytes_0 = b"\xc5E\xcc\xd7\xad\xd0\xdd\xd0\x05\xc2\xf1"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    bytes_0 = b"\xeeM\xbf\xee3\xa4\xa6.\xc7\xa1\xdf\x7fpm\xcc"
    var_0 = module_1.escape(bytes_0)
    float_0 = -850.1624
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    bytes_0 = b"\xd6"
    bytes_1 = b"\xd2"
    var_0 = module_1.finditer(bytes_0, bytes_1)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    bytes_0 = b"\x10'\x9b_\x9e"
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    bytes_0 = b"f\xf1\xa1xk\xf7\xdb\xc6\x19P"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    list_0 = []
    none_type_0 = None
    module_3.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    var_0 = module_1.purge()
    module_1.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    bytes_0 = b"\xbb\x02\x1d\xe9"
    none_type_0 = None
    module_1.search(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    list_0 = []
    var_0 = module_1.purge()
    tuple_0 = (list_0, var_0)
    module_1.findall(tuple_0, var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__call__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    int_0 = -513
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_3.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    str_0 = "ZEGd<(&"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    bool_0 = False
    regex_flag_0 = module_1.RegexFlag.DOTALL
    module_1.subn(bool_0, bool_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.sub(var_0, none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    float_0 = 4744.0315
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    module_3.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    var_0 = module_1.purge()
    module_1.compile(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    int_0 = 135
    module_3.match(int_0, int_0)


def test_case_606():
    var_0 = module_1.purge()


@pytest.mark.xfail(strict=True)
def test_case_607():
    int_0 = -57
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    int_0 = 422
    none_type_0 = None
    module_1.subn(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    int_0 = -660
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    str_0 = ".'\\#rqu&O[u#akg5Xm"
    module_1.subn(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    bool_0 = False
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    int_0 = 504
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    int_0 = 2337
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_620():
    str_0 = "fHa:gy4-\\FM>#J"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    int_0 = 342
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    bytes_0 = b"='\x08\xa3\x83H\x9c,\n[\xf0"
    bytes_1 = b"\xfd\xadz\x14\xe9\x9f\xae\xdeZK\xf3\x86?|8\xfa"
    module_3.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_625():
    object_0 = module_2.object()
    module_3.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_627():
    bool_0 = True
    var_0 = module_1.purge()
    module_1.subn(bool_0, bool_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    auto_0 = module_0.auto()
    module_3.get_new_command(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    float_0 = -572.09
    none_type_0 = None
    module_1.subn(float_0, float_0, float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    error_0 = module_4.Error()
    none_type_0 = None
    module_3.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    float_0 = 1839.3149
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    complex_0 = 361.89587 + 989.1291j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    int_0 = 936
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    bytes_0 = b'\x86\x89\xe2\n\xd4"\xfa\x1c\xda\xd9\xd1\xaa'
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    str_0 = ">vH*\tS;iP^{j'(Oe"
    none_type_0 = None
    module_1.split(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_1.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    int_0 = 3808
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    complex_0 = 176 - 902j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    int_0 = 3819
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    bytes_0 = b"\xec!'>\xed\xa4I\xb9\xff"
    var_0 = module_1.search(bytes_0, bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    complex_0 = -789 - 2175.959j
    tuple_0 = ()
    dict_0 = {
        complex_0: complex_0,
        tuple_0: tuple_0,
        complex_0: complex_0,
        tuple_0: tuple_0,
    }
    module_3.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    int_0 = -2766
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    bytes_0 = b"\x8c\xfbt\xc5\xb8\xa4"
    module_1.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    float_0 = 1052.69853
    set_0 = {float_0, float_0, float_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    bytes_0 = b"\x87\x8d"
    var_0 = module_1.escape(bytes_0)
    var_1 = module_1.search(var_0, var_0)
    var_0.scan(var_1)


@pytest.mark.xfail(strict=True)
def test_case_656():
    int_0 = -1940
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    str_0 = "W/v3-*\nf`O(}"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    int_0 = 599
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    list_0 = []
    module_1.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    list_0 = []
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    str_0 = "9vUk"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    str_0 = "S|cR"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    bytes_0 = b">\xd5\x89V*\xac\xae\xac\x9c~\xe7H\x02\xa9"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    str_0 = "B?F$DN.*b{|"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    error_0 = module_4.Error()
    none_type_0 = None
    module_1.findall(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    list_0 = []
    str_0 = ")qs\x0cZ5\x0bWp}7j$3V\\"
    str_1 = ":"
    str_2 = ".`f"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: list_0}
    module_0.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    bytes_0 = b"|:\xa6%/\xcdn\xfa\x0f\xf4\xb91\x8bkA\x1b"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    error_0 = module_4.Error()
    list_0 = [error_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    bytes_0 = b"\xa8+)\x12\xb4~\x1c\x05\x83 \xa5\xe4/u\x1e\x03ixJ\xa0"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_3.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    set_0 = set()
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    tuple_0 = ()
    none_type_0 = None
    module_3.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    var_0 = module_1.purge()
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    float_0 = 46.9
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    float_0 = -3035.07
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    str_0 = "Br-)\x0bVJM/%i`GD\x0ckc%Uh"
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    none_type_0 = None
    module_1.Match(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    list_0 = []
    base_exception_0 = module_2.BaseException(*list_0)
    module_3.get_new_command(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    int_0 = -3381
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    bytes_0 = b"\x01\xa8"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    set_0 = set()
    list_0 = [set_0]
    module_3.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    int_0 = -857
    str_0 = "6{6QU|)DV'N?<R>L\x0c\rZt"
    bool_0 = True
    dict_0 = {int_0: int_0, str_0: str_0, int_0: bool_0, str_0: int_0}
    module_3.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    bool_0 = True
    float_0 = -1550.832
    module_3.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    dict_0 = {}
    error_0 = module_4.Error(**dict_0)
    module_3.get_new_command(error_0, dict_0)


def test_case_697():
    pass


@pytest.mark.xfail(strict=True)
def test_case_698():
    int_0 = 1166
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    int_0 = -3829
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    none_type_0 = None
    dict_0 = {}
    module_1.Pattern(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    var_0 = module_1.purge()
    module_1.search(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    module_3.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_704():
    int_0 = 108
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    complex_0 = 1464.166 + 726.97j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    int_0 = 794
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    str_0 = "4]3h8'x?Ln_"
    var_0 = module_1.purge()
    var_0.__setitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    bytes_0 = b"\x8f\x06>!\xf9\x84"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    str_0 = "Ug(NDHKJ2"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    bool_0 = False
    bool_1 = True
    module_3.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_714():
    str_0 = "6Ry"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    bytes_0 = b"jO\xd6\x8cM\xec\xfa+\x96\xa5\x07\x91\xab\x9c,vE"
    module_1.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    int_0 = -1407
    set_0 = {int_0, int_0, int_0, int_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    float_0 = -3004.0
    str_0 = "p]C3B<O \t}r9V%"
    module_1.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    var_0 = module_1.purge()
    str_0 = "'Z9LEG\x0bV\nA-FP"
    var_1 = module_1.purge()
    var_1.scan(str_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    int_0 = 1308
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    float_0 = -1229.067819
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    int_0 = 4440
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    str_0 = "$^.tR$GUXS1[3CB"
    module_1.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    int_0 = -1711
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    float_0 = 314.4808
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    var_0 = module_1.purge()
    tuple_0 = ()
    module_1.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    str_0 = "4m\x0ch_vuh,z#"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    bytes_0 = b"\x8eV\x05cB\x8d\xcay\xd7\xe3\xca\xfb\x11"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_1.subn(none_type_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    float_0 = 2883.3
    module_1.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    int_0 = 3640
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_736():
    str_0 = "WW4s]_v;Nu1\tl(|WFBF"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    str_0 = "s8dpv6Q3!j3s7"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    object_0 = module_2.object()
    module_1.finditer(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    bool_0 = True
    int_0 = 344
    bool_1 = True
    tuple_0 = (bool_0, int_0, bool_1)
    module_1.match(tuple_0, int_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_741():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_742():
    bytes_0 = b"\x138@\xe0"
    var_0 = module_1.findall(bytes_0, bytes_0)
    var_1 = module_1.compile(bytes_0)
    var_2 = module_1.findall(var_1, bytes_0)
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_743():
    int_0 = -967
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    str_0 = "!#Z4`HSN[FGFA3iu<KoV"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    module_1.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    str_0 = "V"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    int_0 = -1880
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    int_0 = -612
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    float_0 = 659.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    bytes_0 = b"4\x1f\xa9b\xdf#\xd2m\x89$\x86V&\xa2\xc5\x85\xe2\x19\xd1y"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    float_0 = 1655.4
    module_1.sub(float_0, float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    set_0 = set()
    module_1.sub(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    int_0 = 2104
    module_1.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    str_0 = "S=6cLzFv+9<Me7ow9)"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_3.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    int_0 = -1048
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = None
    module_1.search(enum_dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    bytes_0 = b"\xce\x9f\xc4\xebf\x17\x04\xe9"
    none_type_0 = None
    module_3.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    int_0 = 1763
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    complex_0 = 29.247652 - 1378.5j
    set_0 = {complex_0, complex_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    float_0 = -405.1835
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_766():
    str_0 = "/)R_8)UI<RL\nq4\\~ YO"
    module_1.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    set_0 = set()
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    float_0 = 3150.40688
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    complex_0 = 1681.29167 + 581.77j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    int_0 = 2436
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    str_0 = "Uxl[8v>4>T{1DA>"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    bytes_0 = b"\xb4(r\x83B\xffel\xa0\xe8G"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    float_0 = -2131.2
    module_1.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    bytes_0 = b"\x18\x97#\xed"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    str_0 = "C?=-2'Ap{.r0X"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    bool_0 = False
    bool_1 = False
    module_3.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_782():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    bytes_0 = b"N"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    auto_0 = module_0.auto()
    module_3.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    none_type_0 = None
    bool_0 = True
    module_3.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    bytes_0 = b"\xcd\xf3\x05\xde"
    int_0 = 115
    module_3.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    str_0 = "t+jl\x0cP6d\tF~7E%PLm@"
    str_1 = 'R\ri$"\nG"'
    dict_0 = {str_0: str_0, str_0: str_1, str_1: str_1}
    module_2.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    str_0 = "|q\rN#DiIDN.["
    module_1.Scanner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    str_0 = "no:N"
    none_type_0 = None
    module_1.finditer(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    int_0 = -2220
    bool_0 = True
    module_3.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    str_0 = "hRE"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_795():
    bytes_0 = b"t\xe6\xf5\x19>"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, bytes_0, bytes_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    str_0 = "-3g"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    bytes_0 = b"\xe0*,v\x8f\xa0\xcb\x1eE\xf8\xcf\x95#u\x1d-\xe0"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    set_0 = set()
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__call__(set_0, set_0, set_0, start=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    float_0 = -2397.335531
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    bytes_0 = b"(;\x80!\xf3t[m"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    str_0 = "At\x0b_!<\n|r3MLQcRRMQqD"
    var_0 = module_1.finditer(str_0, str_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    float_0 = -3488.187921
    set_0 = {float_0}
    module_3.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    int_0 = 221
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    bytes_0 = b"\xe6\x8e\xb6\xf0\x96\xae\xa3\xe6\x01;%F\x100\xa1"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.split(bool_0, bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_3.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    bytes_0 = b"\xe1.\xb4\x99\x00z\x1b"
    var_0 = module_1.compile(bytes_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    none_type_0 = None
    int_0 = 1551
    module_3.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0, none_type_0)
    module_3.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    bool_0 = True
    bool_1 = True
    module_1.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_813():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    float_0 = 2634.0
    none_type_0 = None
    module_1.findall(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    int_0 = 914
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.fullmatch(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    list_0 = []
    none_type_0 = None
    module_4.Error(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    bytes_0 = b"C\x00W\xf3\x12\x02'\xfe\xde\x18\xc4\x1bq"
    none_type_0 = None
    module_1.split(bytes_0, none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    none_type_0 = None
    exception_0 = module_2.Exception()
    module_3.get_new_command(none_type_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    str_0 = "hi'^\tqvR`u}gf^C3"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    float_0 = 1982.0416
    module_1.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    complex_0 = -4092.04081 - 681.2j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    int_0 = 1173
    module_1.Scanner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    tuple_0 = ()
    module_1.compile(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    float_0 = 1206.7705
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    float_0 = -4125.869766
    none_type_0 = None
    module_1.findall(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    bytes_0 = b"\xa3\xff)\xbd[\xa5\xe2L\xb3I~\x80/\x1b"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_1.split(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    bytes_0 = b"(^QU\xe91\xdf\xc6\x94\xc5"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    float_0 = -3235.501
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    exception_0 = module_2.Exception()
    list_0 = [exception_0, exception_0]
    error_0 = module_4.Error(*list_0)
    module_3.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    str_0 = 'ntjA!|I%&Ps1IKr:"J'
    set_0 = {str_0}
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    bytes_0 = b"\xde\xb9t\xa7\x17\xe0\xa3\x9d\x1d\x9b\xa8!)\x8f\x99\xdc\x86\x17w"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    dict_0 = {}
    module_1.subn(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    bytes_0 = b"E\x0eFH\x92"
    none_type_0 = None
    module_1.sub(bytes_0, none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    int_0 = -2858
    str_0 = "/YA{/\x0bA[7APp"
    module_3.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    list_0 = []
    dict_0 = {}
    module_0.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bool_0 = False
    str_0 = "n\t4)"
    module_1.match(bool_0, str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    dict_0 = {}
    error_0 = module_4.Error(**dict_0)
    module_3.match(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    list_0 = []
    module_1.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    int_0 = 50
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_3.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    int_0 = -618
    module_1.Scanner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    bytes_0 = b"X\xba*\x07\x136"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    bool_0 = True
    str_0 = "q"
    module_1.findall(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    bytes_0 = b"\xb5\xc3\xd4\xe2\xf9K}\xa6\\w\x9b\xa1\nf?"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    int_0 = 1160
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    list_0 = []
    exception_0 = module_2.Exception(*list_0)
    var_0 = module_1.purge()
    module_1.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    float_0 = -740.822
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


def test_case_858():
    str_0 = '5\x0cAC"%'
    var_0 = module_1.finditer(str_0, str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    float_0 = 807.62
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    set_0 = set()
    module_1.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_862():
    bytes_0 = b"\x03\x9d\x14\xc7\xa9\xae\xb1\xcf\xa1\xc20\xe6]Go_]\xb3\x13m"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    bytes_0 = b"\xc4\xe7<2\xeb\xb6\x94\x94\x8eJ^\xd9\xeb(,"
    set_0 = {bytes_0, bytes_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    bytes_0 = b"\xaeI\x19}mN\x1a\x90\x02&U\xd7Tfc-"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    int_0 = -1817
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    set_0 = set()
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    none_type_0 = None
    module_2.Exception(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    str_0 = "6nlp"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    bytes_0 = b":\xee\xe5\x9b\x07\xfbx\x1b\x00\xac%m\xd3\xd4M\xdd"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    int_0 = -2423
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    complex_0 = 524.319 - 2757.70867j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_873():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    bool_0 = True
    none_type_0 = None
    module_3.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    str_0 = "PHU"
    none_type_0 = None
    dict_0 = {str_0: str_0}
    module_2.Exception(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    bytes_0 = b"z\x07\x90"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    int_0 = -1028
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0, none_type_0)
    module_3.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    int_0 = 1893
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_1.split(list_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    float_0 = 312.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0)
    module_3.match(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    bytes_0 = b"\xcdSc\xec(\xdf\xbf\n"
    module_1.subn(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    int_0 = 1119
    error_0 = module_1.error(int_0)
    module_3.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    str_0 = "^/fl)sV(2/c\ruCe"
    none_type_0 = None
    module_1.template(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    str_0 = '\x0blCA?fF6{R4jr6$"'
    module_3.match(str_0, str_0)


def test_case_892():
    pass


@pytest.mark.xfail(strict=True)
def test_case_893():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    float_0 = -2280.34991
    list_0 = [float_0, float_0, float_0, float_0]
    module_3.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    bytes_0 = b"\xa6\xc8.\xbc\xdd\xea\x7f3\x99U\x9b6\x12\xed\xba\xaeX"
    var_0 = module_1.split(bytes_0, bytes_0)
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    bool_0 = True
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    str_0 = "F1HXdpPsSLol9"
    var_0 = module_1.purge()
    var_0.__iter__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    float_0 = 2359.6279
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    str_0 = "a66x"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    error_0 = module_4.Error()
    module_0.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    bytes_0 = b"G\xa0\xa8rr8"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    int_0 = -2818
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    complex_0 = 1218.51771 - 78.237j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    auto_0 = module_0.auto()
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    float_0 = -95.991
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    list_0 = []
    module_1.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    int_0 = -1985
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    int_0 = -434
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    none_type_0 = None
    module_0.EnumMeta(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    bytes_0 = b's"d\xfa<Y2\xba.'
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    str_0 = "0Z@sD)\x0b0O&ST]@"
    str_1 = "w1OD }0d@I `[T\x0cC"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    none_type_0 = None
    float_0 = 5208.216
    var_0 = module_1.purge()
    var_0.__setitem__(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    float_0 = -5337.327755
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    int_0 = 3072
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    complex_0 = -2717.31 + 254.70238j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_3.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    module_3.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    bytes_0 = b"\x1cdA\x92\xe4\x14\x1f\xdaF"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    complex_0 = 1616.6456 + 1270.83j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    auto_0 = module_0.auto()
    module_1.template(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    int_0 = 794
    module_1.split(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    int_0 = 1415
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    float_0 = -327.18
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    var_0 = module_1.purge()
    int_0 = -1196
    module_3.match(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = '%i?qX\t0O"F\\<o>mzg\tkA'
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    bytes_0 = b"3\x06\xa3"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    str_0 = '"&xET!3'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    bytes_0 = b"s\xbf\x0e\xf1\xd3\xdc>\xa1\\\xb2\x8a./\xbcF@"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    float_0 = 3267.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    bytes_0 = b"Q6Zc\x89v\x1c;\xea"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_3.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    float_0 = 998.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    bytes_0 = b"<\xc6\x1e\xe8.\xba{(:\x85\x02\xb8\x8d\xc9\x82\x7fm\x99\x02"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    int_0 = 735
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    str_0 = "\x0b_1s@qF?A;Z47 6sR3{"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    bytes_0 = b"\xceT#K\x9e\x08P2"
    list_0 = [bytes_0]
    module_1.fullmatch(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    int_0 = -389
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    str_0 = "g^7]"
    none_type_0 = None
    module_1.sub(str_0, none_type_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    complex_0 = -906.37321 - 476.21j
    module_1.search(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    bytes_0 = b"\xab\xaf"
    var_0 = module_1.escape(bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    str_0 = "M^^\x0b/3,"
    module_3.get_new_command(str_0, str_0)


def test_case_952():
    pass


@pytest.mark.xfail(strict=True)
def test_case_953():
    str_0 = "X#rIY\r"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    bytes_0 = b"\x1d\xc9\xe7\x8f\x8f\xf3VI"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0}
    module_3.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_2.Exception(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, bool_0, set_0]
    module_3.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    bytes_0 = b"\xae\x1bq\x87\xc4\xd1o\xc1,\x10\xbb!T0\xa8\x03\xf0X("
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    float_0 = -942.377
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    bytes_0 = b"\xc3\xc3\x06n\x1d2g\xd7\xd0\xb6\xd5\\"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    list_0 = []
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    str_0 = '\\Q|SHD\x0b\nhH| h"yWtfAz'
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    int_0 = 395
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    int_0 = 520
    dict_0 = {}
    module_3.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    str_0 = 'nA#"c}<bi.,I`,&r'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    int_0 = 171
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    complex_0 = 1309.7 + 2022.3905j
    module_1.compile(complex_0)


def test_case_972():
    float_0 = -2105.0
    str_0 = "wz>E7h}%ju"
    var_0 = module_1.split(str_0, str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    int_0 = -387
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    str_0 = "6=f,g=y"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    int_0 = 2134
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    float_0 = -1992.85062
    module_0.auto(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    float_0 = 1056.0
    module_1.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    enum_dict_0 = module_0._EnumDict()
    module_0.unique(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    int_0 = -3747
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    int_0 = -1357
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    set_0 = set()
    module_1.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    int_0 = -2778
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    error_0 = module_4.Error()
    module_1.split(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    var_0 = module_1.purge()
    module_1.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    str_0 = ""
    var_0 = module_1.compile(str_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    str_0 = "qr\n{\r"
    tuple_0 = (str_0,)
    module_3.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    str_0 = "B/c<~f#`5xg5U@EXf9s"
    dict_0 = {str_0: str_0}
    var_0 = module_1.purge()
    var_0.scan(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    str_0 = ""
    set_0 = {str_0, str_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    int_0 = -933
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    str_0 = "ZeD1i3/nw=fe{&qx"
    list_0 = [str_0, str_0, str_0]
    module_3.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    module_0.EnumMeta()


def test_case_999():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    base_exception_0 = module_2.BaseException(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    int_0 = -1977
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    bytes_0 = b"\xa6x\x078\x8605h\xec"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1003():
    bool_0 = True
    bool_1 = False
    module_1.fullmatch(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_3.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    str_0 = "&S$5ljm'qfvhv\t"
    module_1.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    int_0 = 162
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    bytes_0 = b"\x9d\xfc\x99\x8fv\xed\x1a"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    enum_dict_0 = module_0._EnumDict()
    bool_0 = False
    module_1.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    bytes_0 = b"!\x93"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_1.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    str_0 = "0"
    var_0 = module_1.escape(str_0)
    module_3.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    none_type_0 = None
    set_0 = {none_type_0}
    module_3.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    str_0 = ")%^4}'&\n{AFjd@:Z"
    module_1.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    complex_0 = 1508.0289 + 2807.896j
    none_type_0 = None
    module_3.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    complex_0 = -3015.854346 - 463.85473j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.subn(none_type_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    int_0 = 2152
    module_1.split(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    enum_dict_0 = module_0._EnumDict()
    var_0 = module_1.purge()
    var_0.__reversed__(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    bytes_0 = b"\x0b\xcfo\x01"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    bool_0 = True
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    error_0 = module_4.Error()
    bool_0 = True
    set_0 = {error_0, error_0, bool_0, error_0}
    module_3.get_new_command(set_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    int_0 = -2150
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bytes_0 = b"0"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    error_0 = module_4.Error()
    none_type_0 = None
    module_3.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    none_type_0 = None
    complex_0 = -1031.92991 + 2217.345j
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    bytes_0 = b"\x98y\xf2\xb3Ud\xfc$\x96\x0c\xcd'\xce\xf44\x85#\t\x8f"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    str_0 = '?c-S;rT"ylw'
    str_1 = '<E"zLgt\x0bC,h'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_2.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    int_0 = -1189
    module_1.Scanner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    str_0 = "AF4qH`|7cZ4 n3[>SY"
    module_1.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    bytes_0 = b"\x9e\x92y\xf2'\xe2\x16\x00\xd8f}\xcb\x12=\xaa[\x83\xc9"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    var_0 = module_1.purge()
    var_0.__len__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    bytes_0 = b"\xa2\x06"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_3.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    str_0 = ";q;W6+xS"
    module_1.sub(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    float_0 = -663.12
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    dict_0 = {}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    int_0 = -778
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    str_0 = "t\tmiD4\\EF*thu5(H"
    set_0 = {str_0, str_0, str_0}
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0)
    module_3.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1054():
    bool_0 = False
    none_type_0 = None
    module_3.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    float_0 = 3017.82781
    float_1 = -449.0
    set_0 = {float_0, float_0, float_0, float_1}
    module_3.match(set_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    bool_0 = False
    str_0 = "\x0bw{MY"
    module_1.subn(bool_0, bool_0, bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    complex_0 = 1573.0649 + 1376.84678j
    tuple_0 = (complex_0,)
    module_3.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    bytes_0 = b"\x8awo"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    bytes_0 = b" \xa5\x83\x1f"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.sub(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    float_0 = 964.545
    none_type_0 = None
    module_1.fullmatch(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    list_0 = []
    module_1.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    str_0 = "xl9y%"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    int_0 = -423
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    float_0 = 1061.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    bytes_0 = b"ts\x1ezR\xaf|B\xac"
    module_1.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    bool_0 = False
    var_0 = module_1.purge()
    var_0.__call__(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    int_0 = 3105
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    str_0 = ";k\x0cp"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    int_0 = -420
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    int_0 = 7094
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    int_0 = 1221
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    float_0 = 3125.94
    module_3.get_new_command(float_0, float_0)


def test_case_1082():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1083():
    bytes_0 = b"\xb4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    complex_0 = -679.068 - 771.55197j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    bool_0 = False
    set_0 = {bool_0}
    module_1.finditer(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    str_0 = "itA`KST4FC.Q\\zx*"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    bool_0 = True
    list_0 = [bool_0]
    module_3.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    bytes_0 = b"\xfdj)\x93\xc4Y'A\xcf\xf6"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    float_0 = 2984.098
    set_0 = {float_0, float_0, float_0}
    module_3.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    bool_0 = True
    bytes_0 = b"0\x82\x0b\x0c\xcb|\x81\xe7\x87\x17\x15>6\x90u#dg\t\xde"
    module_1.findall(bool_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    int_0 = 4107
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    bytes_0 = b"\x95w\x9f"
    module_3.match(bytes_0, bytes_0)


def test_case_1094():
    error_0 = module_4.Error()


@pytest.mark.xfail(strict=True)
def test_case_1095():
    int_0 = 2224
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1098():
    int_0 = -1606
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    int_0 = 2591
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1101():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    var_0 = module_1.purge()
    set_0 = {var_0, var_0}
    module_1.search(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    bool_0 = True
    object_0 = module_2.object()
    list_0 = [object_0]
    tuple_0 = (bool_0, list_0)
    module_3.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    enum_dict_0 = module_0._EnumDict()
    module_3.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    complex_0 = 500.307 - 2331.704j
    module_1.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    int_0 = 2070
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bool_0 = False
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    int_0 = -983
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    float_0 = 233.3
    list_0 = [float_0, float_0, float_0]
    module_1.findall(list_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    float_0 = 795.142918
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    float_0 = 95.07783
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    bytes_0 = b"]\x16\xda\xdf\xa7\xf1~u\x02\xc1v\x05\xf1\x83\xe38\xaf\xed"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    bytes_0 = b"h"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    var_0 = module_1.purge()
    set_0 = {var_0, var_0, var_0, var_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    bytes_0 = b"\xd6\xd0\xceX%t"
    module_3.match(bytes_0, bytes_0)


def test_case_1123():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1124():
    float_0 = -2618.827
    module_1.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    int_0 = -400
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    int_0 = -1102
    module_1.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    bytes_0 = b"\xc8\xb0\xb5\xc2\xef"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    str_0 = "q@d6"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    exception_0 = module_2.Exception()
    module_3.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    none_type_0 = None
    str_0 = "3G$\neX}JR"
    var_0 = module_1.escape(str_0)
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    module_3.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    str_0 = ';_!bY,{"V\t&!juyy'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    complex_0 = 1847.185 - 2128.06j
    module_1.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    float_0 = -2668.581
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_1.split(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    int_0 = -1695
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    bytes_0 = b"\x86~"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    list_0 = []
    module_1.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    error_0 = module_4.Error()
    var_0 = module_1.purge()
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    bytes_0 = b"\xee\xdd7I;\x83}\xb9\xdd\xb7?[\x92\x97"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    int_0 = -595
    module_1.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    tuple_0 = ()
    none_type_0 = None
    module_1.subn(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    list_0 = []
    exception_0 = module_2.Exception(*list_0)
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    set_0 = set()
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    bytes_0 = b"\x18\xcci'%i\xd3\xfc"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    float_0 = -322.458
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    bytes_0 = b"\x00\x00\x1f \xf2y\xac\x82\xd8[-\xcc;m\xe63\x8c\xd8\xda\xf9"
    module_1.subn(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    none_type_0 = None
    str_0 = "{<)gWY\tT"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    str_0 = ""
    str_1 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    complex_0 = -262.3738 + 1842.3974j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bytes_0 = b"7f\xc1xU"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    float_0 = -2403.1283
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    float_0 = 944.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    float_0 = 2500.450005
    dict_0 = {float_0: float_0}
    module_3.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    int_0 = -467
    float_0 = 1682.147
    module_3.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    auto_0 = module_0.auto()
    none_type_0 = None
    module_1.subn(auto_0, auto_0, none_type_0, flags=auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    object_0 = module_2.object()
    str_0 = "\n"
    module_1.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    bytes_0 = b"\xde*\xbe\x9a\xfa"
    module_1.Match(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    bool_0 = False
    module_1.Scanner(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    int_0 = -103
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    bool_0 = False
    none_type_0 = None
    module_1.findall(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    bytes_0 = b"\xde#\xa0\x1d\xa5\r64\xa1-.\xd7\xeb\x1c\xc8Q\x11f["
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    str_0 = "eWi y}R95y:!1z;5gQ\t<"
    none_type_0 = None
    module_1.compile(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    int_0 = -1163
    none_type_0 = None
    bool_0 = True
    module_1.findall(int_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    bytes_0 = b"5\xc5Z"
    var_0 = module_1.match(bytes_0, bytes_0)
    int_0 = 1798
    exception_0 = module_2.Exception()
    tuple_0 = (int_0, exception_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    int_0 = -2093
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    float_0 = -1275.8
    error_0 = module_1.error(float_0)
    module_3.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.findall(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    int_0 = -1555
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = None
    module_1.sub(enum_dict_0, enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    bytes_0 = b"m\xa4w\xd3f\x83\x81\xe8\xf3\xc3z\xdf\xcc\x9d\xa6W\xea)."
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    dict_0 = {}
    module_1.Match(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    int_0 = 568
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    int_0 = 1576
    bytes_0 = b"\xd9\x94*\xaemMr\x1f^\xd7\xa8\x08\xc1\xd0Y\xad"
    tuple_0 = (int_0, bytes_0, int_0)
    module_3.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    bytes_0 = b"\xfe\x07(\x19"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    bytes_0 = b"\\'\xe5\x99\xb3"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    bool_0 = False
    module_1.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    int_0 = -3137
    set_0 = {int_0, int_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    bool_0 = False
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    float_0 = -63.67762
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    list_0 = []
    tuple_0 = (list_0,)
    module_1.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    var_0 = module_1.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    bool_0 = False
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    str_0 = "'\x0bxbm/5/Jte-\n"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    float_0 = -1223.38
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    bytes_0 = b"\xd9\xf0\x0b\xc9A\xb6\xbf\x9c\x95\xad\x9d\x9b"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    set_0 = set()
    module_1.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    str_0 = "z Ez}.!6<qb1s13Z<I"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    set_0 = set()
    none_type_0 = None
    module_1.fullmatch(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1215():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.compile(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    int_0 = -707
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    int_0 = -1452
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    module_0.EnumMeta(**regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    int_0 = -2829
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    set_0 = set()
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_3.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    str_0 = ")LJTf"
    none_type_0 = None
    module_1.finditer(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    complex_0 = 2309 - 1480j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    str_0 = "9a]CSLeh\t[-qXDH4?"
    module_1.sub(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    int_0 = 2991
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    int_0 = -1609
    var_0 = module_1.purge()
    bool_0 = True
    tuple_0 = (var_0, var_0, bool_0)
    module_3.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    bytes_0 = b"\xa7\xe6L\xe3\xb2\xe6\xccf\xdb\xc9,I\x04"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    int_0 = 639
    tuple_0 = (int_0,)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bytes_0 = b"\xaau\x8dg\xed\xcb\x95?M\xfd\xb3\xd6"
    none_type_0 = None
    module_1.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    complex_0 = 386.85 - 1218.81j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    var_0 = module_1.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    int_0 = -738
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    bool_0 = False
    none_type_0 = None
    module_1.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bytes_0 = b"9\x92h(|\xf4;\xe1\xa04\xe7%\x13"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    int_0 = 1123
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    float_0 = 456.249225
    module_1.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    bool_0 = True
    float_0 = 540.56
    module_3.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    float_0 = 1762.2
    none_type_0 = None
    module_1.subn(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    int_0 = 991
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    bytes_0 = b"\xc0\x93\xa2\x9e\x90-'\xd4\xef2\xe9/\xbd',3a\x18v"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    int_0 = 1391
    none_type_0 = None
    module_1.search(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    str_0 = "=9VV;V\x0c\tEB\r7Dt\x0c* K"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    str_0 = ".8z\x0cTp*Ms*"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    int_0 = -880
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    bool_0 = True
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    int_0 = -3178
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_1.match(set_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    auto_0 = module_0.auto()
    var_0 = module_1.purge()
    var_0.__setattr__(auto_0, auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bytes_0 = b"^d\xf1S3\x07xK\x97\x86\xef\xbew=3\n\x8a\xca\xdf\x01"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    float_0 = 1224.0
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    bytes_0 = b"\x00\xc5\xf7\xbe\xf2\x1d\xb6d\xd7\r9\\,"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    complex_0 = 1592.256714 + 2544j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    str_0 = "POqYI$=2zV6 } W"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    bytes_0 = b"\nk\x89\x94\x0e\n"
    var_0 = module_1.match(bytes_0, bytes_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    str_0 = '~"EN'
    bytes_0 = b"Q.h'\x18n;QZ\xacf7\x06\x89"
    var_0 = module_1.escape(bytes_0)
    var_1 = module_1.search(var_0, var_0)
    var_2 = var_1.__dir__()
    var_2.__len__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    str_0 = "; {wBAKS'"
    str_1 = '$\rc8e<<#(]AQ"\x0b<'
    str_2 = 'xiW\x0cr3"wV)U>DK#'
    str_3 = "Z+Y(Jq"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_3: str_1}
    module_2.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    str_0 = "+s4kG8dd$E-86g"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    bool_0 = True
    none_type_0 = None
    module_1.split(bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    str_0 = "}\x0bA'U#40J*"
    module_1.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    bytes_0 = b"\xbf\x1aC<\xc7\x8dV\xe8\xf3\xb9\xfb\xcb\xd6\x07"
    set_0 = {bytes_0}
    module_3.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    var_0 = module_1.purge()
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    var_0 = module_1.purge()
    var_0.__delattr__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    int_0 = 698
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    int_0 = -5322
    float_0 = 430.5
    module_3.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    int_0 = 2356
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    str_0 = "F06(Lizd;,J\nb|Ud"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    set_0 = set()
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    float_0 = 3998.6
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    dict_0 = {}
    error_0 = module_4.Error(**dict_0)
    module_3.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    bytes_0 = b"\xa5U\xcc\x95\x8f\xf1Y\xb0\x15c"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    str_0 = " GY-%OSr"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    bytes_0 = b""
    module_1.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    bytes_0 = b"\xab\xd1\x02\xcf\x88aO\x0e\xc7\x98eW\x03\xf3\x1b"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    bytes_0 = b"\x0c\x0f\x97\xd5"
    var_0 = module_1.findall(bytes_0, bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_1289():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    str_0 = "6XN`@>f&@{"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_3.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    dict_0 = {}
    none_type_0 = None
    module_1.match(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    enum_dict_0 = module_0._EnumDict()
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    none_type_0 = None
    int_0 = 1016
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    int_0 = 414
    module_1.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    set_0 = {regex_flag_0, regex_flag_0, regex_flag_0}
    list_0 = [set_0]
    module_1.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    float_0 = 5537.0
    module_1.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    object_0 = module_2.object()
    module_1.findall(object_0, object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    none_type_0 = None
    module_1.subn(regex_flag_0, none_type_0, none_type_0, flags=regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    int_0 = 2194
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.search(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    int_0 = 2577
    module_3.match(int_0, int_0)


def test_case_1304():
    bytes_0 = b"u\x9a+\xf3\t\x82\x90\xc0|B\xa7\xf7\x93\x02)"
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    with pytest.raises(AttributeError):
        var_1.__getattr__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    int_0 = 2438
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    bool_0 = False
    float_0 = -1844.38541
    module_3.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    str_0 = '3eJm&S^l:;`"O'
    none_type_0 = None
    module_1.finditer(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    int_0 = -2245
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    bytes_0 = b"\xa8d\xb1\x9bC"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_3.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    module_3.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    bool_0 = False
    error_0 = module_1.error(bool_0, bool_0)
    module_3.match(error_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    bool_0 = False
    set_0 = {bool_0}
    str_0 = "pA"
    none_type_0 = None
    module_1.search(set_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    int_0 = 3225
    none_type_0 = None
    module_1.search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    set_0 = set()
    module_1.split(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bool_0 = True
    list_0 = [bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    int_0 = 1187
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    bytes_0 = b"\xc0\xbfk\x87\x0f\x1f\xcc\xd2\x02Z\x9b\xc5\xae\xa1:\x06"
    var_0 = module_1.sub(bytes_0, bytes_0, bytes_0)
    list_0 = []
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    none_type_0 = None
    float_0 = 167.66821
    module_3.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    bool_0 = False
    none_type_0 = None
    module_1.subn(bool_0, bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    int_0 = -992
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    str_0 = "e"
    set_0 = {str_0, str_0}
    module_3.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    str_0 = "z\\+.1^w=P|8v7\t"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    int_0 = -2423
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    var_0 = module_1.purge()
    module_1.Scanner(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    str_0 = "\tHByE-E~;._\t0"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1336():
    int_0 = 1189
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_3.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    int_0 = -754
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    str_0 = "YAkP\x0b(ECtv`5ZD3\x0b`q64"
    module_1.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    int_0 = -1480
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bytes_0 = b"%\x88\xf9C\x9f\x00\x10\xaf\xe4\x1a\x06Qs\x19@t\x11\xbf\xad\xae"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    bytes_0 = b"\xde\xbf\n{/\xe3\xd8\x0c\x9a\x14\xd2\x1a\x82"
    var_0 = module_1.template(bytes_0)
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, bool_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    int_0 = 622
    module_1.error(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    int_0 = 1269
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    str_0 = "2vw/Kk_%"
    dict_0 = {str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    str_0 = ")qW\n6Ef/D\r*S.61CP"
    set_0 = {str_0, str_0}
    list_0 = [set_0, str_0, set_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    bool_0 = False
    module_0.unique(bool_0)


def test_case_1353():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1354():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


def test_case_1357():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1358():
    int_0 = 2032
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    str_0 = "oT*gc0(M#g #E@I/?!R6"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    module_1.findall(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    bool_0 = False
    complex_0 = 2063.26701 - 1162.3884j
    module_3.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    set_0 = set()
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    var_1.__call__(set_0, set_0, qualname=set_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    error_0 = module_4.Error()
    float_0 = -128.0
    str_0 = "l&\x0b1g\t8+r9f!=mIZUs"
    var_0 = module_1.finditer(str_0, str_0)
    var_0.__len__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    bytes_0 = b"\xad\xec\x8a\xc6\x7f\xd1\xbd\x9b"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    str_0 = '--IoL/"GLq'
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    str_0 = "7"
    module_1.sub(str_0, str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    bool_0 = False
    list_0 = [bool_0]
    module_3.match(list_0, list_0)


def test_case_1371():
    set_0 = set()
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    with pytest.raises(TypeError):
        var_1.__contains__(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    int_0 = -141
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    bool_0 = True
    bytes_0 = b"\x9d\x19\xdd.e~\xe9M\xd1L\xa5\xfa\x1d\xda\xack3\xe1&"
    module_1.finditer(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    int_0 = -905
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    auto_0 = module_0.auto()
    module_1.template(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    auto_0 = module_0.auto()
    none_type_0 = None
    module_1.findall(auto_0, none_type_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    str_0 = ".\nW@`G3"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    bytes_0 = b"\x7f>\xf34\x7f\xe4%Sk\x06T\xeeQ!\x02\xe8\xb8\x02\xc5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    str_0 = ""
    none_type_0 = None
    module_3.match(str_0, none_type_0)


def test_case_1382():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1383():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    bool_0 = False
    bytes_0 = b'\xf4\xf8}\xe3\x95\x90\x92\xc2"\xbc\x13~\x96p\xe0\xe1\xb3'
    module_1.sub(bytes_0, bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    str_0 = "}|Ql{"
    module_1.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    bytes_0 = b"\xc9\x99\x10\xa7}\x85a\xe2\xe58T\x9b\xa0\x1eB"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    int_0 = 3598
    var_0 = module_1.purge()
    var_0.__repr__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    str_0 = ",d[>\r<%WSmW("
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    tuple_0 = ()
    module_1.findall(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    list_0 = []
    dict_0 = {}
    module_1.Match(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    float_0 = -1737.86
    none_type_0 = None
    module_1.subn(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    float_0 = -116.66
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    error_0 = module_4.Error()
    module_3.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    int_0 = -877
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    dict_0 = {}
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    complex_0 = -457.2018 + 454.02j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    set_0 = set()
    module_1.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    float_0 = 3743.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    str_0 = "bsD"
    int_0 = -660
    module_1.search(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    complex_0 = -2264.6423 - 2602.67j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    int_0 = 1196
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    int_0 = 1885
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    error_0 = module_4.Error()
    none_type_0 = None
    module_1.findall(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    str_0 = "qmkf*X|vaJ,Ec\x0c8(H3@"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    float_0 = -986.76
    list_0 = [float_0]
    none_type_0 = None
    module_1.fullmatch(list_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    bytes_0 = b"'a\xecV\x1b\xe0Fi\xfa:1\x80g\xb0\x95F"
    var_0 = module_1.template(bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    var_0 = module_1.purge()
    var_1 = module_1.purge()
    var_1.__reversed__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    var_0 = module_1.purge()
    var_1 = module_1.purge()
    var_1.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    complex_0 = 261.543 - 330.17582j
    module_1.fullmatch(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    int_0 = 1815
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    str_0 = ':=9//P}H"'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    none_type_0 = None
    module_3.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    int_0 = 138
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    str_0 = "Oz~.\x0b3SpqCsK)\x0cM),'rx"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    str_0 = '0$N}]b"'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    str_0 = "<\x0bs-^|r| f"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    none_type_0 = None
    bool_0 = True
    module_1.fullmatch(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    str_0 = 'w?cIk$"#'
    var_0 = module_1.compile(str_0)
    module_1.subn(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    str_0 = "z^"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    var_0 = module_1.purge()
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    int_0 = -354
    module_1.match(int_0, int_0, int_0)


def test_case_1434():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1435():
    bytes_0 = b"\xfc\xaf:\xbd\x8f'\x8d\xbd\xe6l\x1e\x06R\xc5"
    var_0 = module_1.compile(bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    bool_0 = True
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    bytes_0 = b"\xb2"
    none_type_0 = None
    module_1.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    bytes_0 = b"iG\xd4\x17l\x16p\xdfIO6s\xbf's\x98\xe3R\xa6"
    var_0 = module_1.match(bytes_0, bytes_0)
    module_1.fullmatch(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    str_0 = "(ol2AUN\x0b=\x0c u_*:"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    bytes_0 = b"\xcf\xf8"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    module_1.template(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = None
    module_3.get_new_command(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    bytes_0 = b"'\xa3\x93\x8c\xd0\x10>\xd6\xd5v\x00\x8f\xc3`"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    str_0 = "8t/yA"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    float_0 = 1901.5
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    bytes_0 = b"v\xee\xeb\xa4C\xe9v\xf7\x1c\xbb\x11\xdc\xec\xf8q\x85\xe4O\xd9\xf5"
    var_0 = module_1.template(bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    dict_0 = {}
    none_type_0 = None
    module_1.match(dict_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    list_0 = []
    module_0.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    str_0 = "S\x0c>Op${'9f\n%`xDWY6B"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    str_0 = "fT{N>N"
    dict_0 = {str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    str_0 = "q"
    module_1.subn(str_0, str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    int_0 = 2554
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    str_0 = "!)Cn#G AZU'CoR[IY{Q"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    dict_0 = {}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    int_0 = -1212
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    str_0 = "%sh@YU>\rvIc"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    str_0 = "d mV|),PXGLuKCrZq^Q"
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: str_0, bool_0: str_0}
    error_0 = module_1.error(dict_0)
    none_type_0 = None
    module_3.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    error_0 = module_4.Error()
    str_0 = "<Mx2sP-rv*.wJ="
    tuple_0 = (error_0, error_0, str_0)
    list_0 = [str_0]
    module_3.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    set_0 = set()
    list_0 = [set_0]
    module_3.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    enum_dict_0 = module_0._EnumDict()
    complex_0 = 1112.21049 - 3590.122601j
    none_type_0 = None
    module_1.subn(complex_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_3.get_new_command(list_0, bool_0)


def test_case_1469():
    var_0 = module_1.purge()
    var_1 = module_1.purge()


@pytest.mark.xfail(strict=True)
def test_case_1470():
    bytes_0 = b"\xdcR\xb46\xc4\xf0?\xb8\xa9\x01"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    str_0 = "Rod&T"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    none_type_0 = None
    bool_0 = True
    module_1.sub(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    bool_0 = False
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    float_0 = -670.523
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    str_0 = "dM"
    set_0 = set()
    list_0 = [str_0, set_0]
    str_1 = ""
    str_2 = "X"
    str_3 = "0u~nzVkfaI!$wv/%t(@t"
    dict_0 = {str_1: set_0, str_2: str_1, str_1: str_1, str_3: str_2}
    module_0.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    none_type_0 = None
    module_1.findall(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    str_0 = "l("
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    bytes_0 = b"z"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    auto_0 = module_0.auto()
    module_3.get_new_command(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    complex_0 = -2886.38 + 1314.84401j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    int_0 = -238
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.subn(int_0, int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    bytes_0 = b'\x90\x02\xcf\n\xdd\xb2?E\x9f\xd3"\xd2\xbb1\xb6mJ'
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    int_0 = 961
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    str_0 = ""
    set_0 = {str_0}
    module_3.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__getitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    int_0 = -2677
    module_0.auto(*int_0)


def test_case_1497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1498():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    int_0 = -1807
    list_0 = [int_0, int_0]
    module_0.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    float_0 = -511.236609
    bytes_0 = b"\xaf\xec\x85\xca"
    module_3.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_1507():
    int_0 = 1794
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    complex_0 = 4676.1 - 1034.417605j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    bytes_0 = b"\xf6\x94\x14\x96&\x90\xee"
    var_0 = module_1.escape(bytes_0)
    module_1.Scanner(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    complex_0 = 1907 + 2021.9j
    bool_0 = False
    module_3.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_3.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    bool_0 = True
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    bool_0 = False
    module_1.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    dict_0 = {}
    module_1.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    bytes_0 = b"4Sp^<"
    none_type_0 = None
    bool_0 = True
    module_1.split(none_type_0, none_type_0, bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    str_0 = "nI$olOv)67jyo:f0u"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    int_0 = -138
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    int_0 = 1402
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    complex_0 = -1232 + 1074.3691j
    module_1.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    module_3.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    bool_0 = True
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    exception_0 = module_2.Exception()
    module_1.compile(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    int_0 = -2481
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    bytes_0 = b"u~\xb0\xf6\x8c\xd3A\x87"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    bool_0 = False
    module_2.BaseException(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    int_0 = 1814
    set_0 = {int_0}
    module_3.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_3.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    str_0 = ""
    var_0 = module_1.purge()
    tuple_0 = (str_0, var_0)
    module_3.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    bool_0 = True
    none_type_0 = None
    module_3.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    str_0 = "n&\\\n(=`\\qL+La,hWF0F"
    int_0 = -1520
    module_3.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    int_0 = -849
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    float_0 = 1008.5
    tuple_0 = (float_0,)
    none_type_0 = None
    module_1.match(tuple_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    str_0 = "k>>\\&r,xXd\r4u]x"
    module_1.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    float_0 = 837.395
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    bytes_0 = b"\xf1W,\x8a\xc3\xfcv\x1f\xb2'\xde\xebp]I,\x85"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    bytes_0 = b"\xf1U\xd5\xe1\xaf\xed-w\xaa\x87"
    module_1.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    str_0 = "YkRG_,{hn:@_"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    base_exception_0 = module_2.BaseException()
    module_1.compile(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    none_type_0 = None
    complex_0 = -656 + 1993.5j
    module_3.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_1.subn(set_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    exception_0 = module_2.Exception()
    module_1.compile(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    error_0 = module_4.Error(*list_0)
    var_0 = module_1.purge()
    var_0.__delattr__(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1554():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    complex_0 = -375 - 976.6j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    int_0 = 1347
    module_1.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1559():
    int_0 = -1363
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    float_0 = -1816.05259
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_3.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    bytes_0 = b"\xa6CN\x94^\xb0"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    var_0 = module_1.purge()
    bool_0 = False
    error_0 = module_1.error(bool_0)
    int_0 = 3440
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    str_0 = "t^8(SX\t0rzQ!=du$Bs`="
    var_0 = module_1.escape(str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_1565():
    str_0 = "V\\Xr"
    module_1.subn(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    int_0 = 1913
    error_0 = module_1.error(int_0)
    var_0 = module_1.purge()
    module_1.search(int_0, var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bytes_0 = b"f\xf8\xbf\x85\xd9\xf6\xf4\xe9\xa2;\t/\xc7\xc8Y\xdft"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    str_0 = "vO?+}3Rj"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    float_0 = 3353.6193
    var_0 = module_1.purge()
    var_0.__iter__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    int_0 = 674
    list_0 = [int_0]
    list_1 = [list_0, int_0, int_0]
    bytes_0 = b"51+c\x1d\x8b\xa6\xf6\xd6o\x88\x82"
    module_3.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bool_0 = True
    list_0 = [bool_0]
    module_0.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    str_0 = "*[GOaC:,yR+v&C-x"
    float_0 = -2788.499733
    str_1 = "WC-Ps~q :"
    str_2 = "e8Xax\nt,@9qv[?\tW1"
    dict_0 = {str_0: float_0, str_1: str_1, str_2: str_2, str_1: str_2}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    list_0 = []
    var_0 = module_1.purge()
    var_0.__setitem__(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    list_0 = []
    module_1.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    bytes_0 = b"@\xc7\xcc\xf3Z\x87\xb0,L="
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    none_type_0 = None
    complex_0 = -1221.153909 + 446.938j
    module_3.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    var_0 = module_1.purge()
    bool_0 = True
    int_0 = -884
    tuple_0 = (bool_0, int_0)
    module_1.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    float_0 = 2286.522881
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    complex_0 = -1258 - 1012.156j
    module_1.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bytes_0 = b"\xf1e\xddlA\xb1\xfa\x9e\xb2\x8f_U^[\xc1"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    bytes_0 = b"\x19t\x8e\xdb\xf2\xf1\xa8\xb3,\xe5\xa2\x05_y2\xe3\x1b&"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    int_0 = 660
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    bytes_0 = b"\xd9\x00\x86\xaa\xb1T\x06\xdc"
    var_0 = module_1.purge()
    var_0.scan(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_3.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bytes_0 = b"&\xcb\xdd\xf5\xd5'\x8b\xc0\xe6\x17\x88SS"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_3.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_4.Error(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    str_0 = "_;eQCsY }Mfg4-!w#"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    error_0 = module_4.Error()
    module_1.compile(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    str_0 = "p;6#"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    str_0 = "/CQ%("
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    complex_0 = -218.08547 + 3634.622j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    float_0 = 831.172
    module_1.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    bytes_0 = b"\x1c\x96\x9c\x92\x9a\xc2\xf8[0\xe5\x9d\xe5\xa9\n\xa3\x07\xab\xaa\xe1"
    module_1.search(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    complex_0 = 1496.3038 - 2499.84j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_3.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    float_0 = -680.561
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    int_0 = -646
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    int_0 = 1275
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    bool_0 = False
    none_type_0 = None
    module_1.split(bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    str_0 = "c0|Nx3wPF,_r_*i\x0bqBk"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    float_0 = 6572.1
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    str_0 = '`/,|,"Y-'
    dict_0 = {str_0: str_0}
    module_2.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    none_type_0 = None
    module_1.Match(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    str_0 = "W.(i7(R("
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    bytes_0 = b"Q\xa2\xd0$\x9b\xea\xc26"
    module_1.subn(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    float_0 = 285.357769
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    list_0 = []
    base_exception_0 = module_2.BaseException(*list_0)
    module_3.match(base_exception_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    int_0 = 3762
    module_1.escape(int_0)


def test_case_1619():
    none_type_0 = None
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    complex_0 = -1684.12 - 472.061j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    complex_0 = -614.67 - 1849j
    set_0 = {complex_0, complex_0, complex_0}
    module_3.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    none_type_0 = None
    bool_0 = True
    module_3.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    int_0 = -2944
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    list_0 = []
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    int_0 = 1652
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    complex_0 = 933 - 2998.327521j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    str_0 = 'W<1;@X"'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    complex_0 = -3021 + 2675.669j
    none_type_0 = None
    module_3.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    float_0 = 1337.3049
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bool_0 = True
    none_type_0 = None
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    int_0 = -252
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    base_exception_0 = module_2.BaseException()
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1640():
    int_0 = -1565
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    int_0 = 1975
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    str_0 = "%e&)o"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.split(list_0, list_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    bytes_0 = b"\xe8NM\xc2\x93P\xd6t\x0b\x1a\x13\xab\xa4b\xae\n0"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    var_0 = module_1.purge()
    float_0 = 598.026
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1646():
    str_0 = "GW2}bT)^~8h\rd>#4]"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    bytes_0 = b"{\xd3\xc7\x82\x1f\x8e!iR\xc6"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    dict_0 = {}
    none_type_0 = None
    module_1.findall(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    bytes_0 = b"=W\xcc\x9eg"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    set_0 = set()
    module_0.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    float_0 = -2565.808
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    int_0 = 2266
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    str_0 = "UL\x0b&]z'\\qV#gh`y\t6<\x0bH"
    module_1.sub(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_3.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    module_3.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    bytes_0 = b"\x1a\xben\xe0\xd6SL\x98Z\x00\xa4"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_3.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    int_0 = -1333
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    str_0 = "\\vW|RW8d#^"
    list_0 = [str_0, str_0, str_0]
    module_0.EnumMeta(*list_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    float_0 = 325.160254
    set_0 = {float_0, float_0, float_0, float_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    complex_0 = 794.7 - 182j
    list_0 = [complex_0, complex_0, complex_0]
    list_1 = [list_0, complex_0, complex_0, list_0]
    module_3.get_new_command(list_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    bytes_0 = b" \xc4\xa4\xee\xbe`\n\x9e\x08\xe5\xc4N%X\x8e\x9d\xb1\rO"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    var_0 = module_1.purge()
    bool_0 = True
    tuple_0 = (var_0, var_0, bool_0)
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0, var_0)
    tuple_1 = (tuple_0, var_0)
    module_3.get_new_command(tuple_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    bytes_0 = b"\xc1\x11\x94\xdfnR\xa7u|"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    complex_0 = -1712.811018 - 2340j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    int_0 = 36
    module_1.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    int_0 = -3634
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    exception_0 = module_2.Exception()
    module_0.unique(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    float_0 = 2986.25737
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    module_3.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    str_0 = "0M^!(:)\"'7l cU@/:9g"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_1.search(set_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    set_0 = set()
    bytes_0 = b"\x959\x16h\xe5=Q=\xa1\xf0\x8a\xe1S"
    module_3.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_3.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    var_1.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_1685():
    str_0 = "C[\x0b{#$4q&b"
    module_1.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    float_0 = -245.628934
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    complex_0 = 4283.34 + 2951.9j
    dict_0 = {complex_0: complex_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    set_0 = set()
    module_1.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    int_0 = -1410
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    int_0 = -1829
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    str_0 = ")UWpfLL<*"
    bool_0 = False
    module_3.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    int_0 = 209
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    var_0 = module_1.purge()
    module_1.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    set_0 = set()
    module_1.fullmatch(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    exception_0 = module_2.Exception()
    module_3.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    str_0 = "\t\x0b1_!#kuMt"
    bytes_0 = b"u\x1d\x9f\xb9"
    var_0 = module_1.escape(bytes_0)
    var_1 = module_1.fullmatch(var_0, var_0)
    var_1.__iter__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    bytes_0 = b"\xba\xada\x04o\x16}\x98\xc5\x04\xffD"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    complex_0 = 113.337 + 647.215508j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    int_0 = -257
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    var_0 = module_1.purge()
    tuple_0 = (var_0,)
    module_3.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    module_0.EnumMeta(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    var_0 = module_1.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    bytes_0 = b"\xe4A9\xe3E\x8e\xf8\x90"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    str_0 = "f6d.y:r6su/q7"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    int_0 = -2417
    module_1.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    var_0 = module_1.purge()
    module_1.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    str_0 = "}[>iN=zeavJk"
    str_1 = '"#8C&O/Ps+!qq6Jo'
    var_0 = module_1.finditer(str_1, str_1)
    var_0.__call__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    int_0 = -1805
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    bytes_0 = b"\xdc\xbfx73\x8bB\x8b$"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    str_0 = "Q\rz0=IMSm)~ciB"
    module_1.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    bytes_0 = b"\xaa\xdf\xa8\x91\x04\xf3\xbf[\xc8\x9e"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    int_0 = -1737
    set_0 = {int_0}
    var_0 = module_1.purge()
    var_0.scan(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    int_0 = -5598
    error_0 = module_4.Error()
    dict_0 = {int_0: error_0, int_0: error_0, int_0: error_0}
    none_type_0 = None
    module_3.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    bytes_0 = b"\x0b\x88n[Z2{\xdf\x0bx\xdc"
    set_0 = {bytes_0}
    module_3.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    int_0 = -2450
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    str_0 = "+) oU';M;3c\x0cw0o~(,"
    set_0 = {str_0, str_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.template(none_type_0)


def test_case_1733():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1734():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    var_0 = module_1.purge()
    int_0 = -617
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    bytes_0 = b"=dE0p\x15\xd1\xad\xf2\xfag5"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    bytes_0 = b"\xce\xc5\xa3 \xff\x05\xd5F\x0f\x9f\x97\xfe\x80!\x04\x16"
    none_type_0 = None
    module_1.sub(bytes_0, bytes_0, bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    auto_0 = module_0.auto()
    module_1.fullmatch(auto_0, auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    bytes_0 = b"i\xc8\xbc\xba{\x89u"
    none_type_0 = None
    module_1.sub(bytes_0, none_type_0, bytes_0, bytes_0, none_type_0)


def test_case_1740():
    exception_0 = module_2.Exception()


@pytest.mark.xfail(strict=True)
def test_case_1741():
    int_0 = 727
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    bytes_0 = b"\xb2\xd8\\\x98\x0c\xdc\xf1ya\xb4y\xee\\\xc4I\xb9\xda4"
    module_1.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    bytes_0 = b"\xe2w\x9coDX\xa2\x12L\x1e\xde1H\xcaf\x8e\xb2"
    var_0 = module_1.search(bytes_0, bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    var_0 = module_1.purge()
    str_0 = "v?Rq.j\rZemx`l"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    int_0 = -3795
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.findall(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    int_0 = -3920
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    tuple_0 = ()
    error_0 = module_1.error(tuple_0, tuple_0)
    dict_0 = {error_0: tuple_0, error_0: error_0, error_0: error_0, tuple_0: error_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    set_0 = set()
    module_1.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    float_0 = -2675.4
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bytes_0 = b"\xdd\xedmc\xf5\x9b\xbc5\xee\x0815\xc4P"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    float_0 = -2169.8737
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    list_0 = []
    str_0 = "S8c"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_2.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    auto_0 = module_0.auto()
    none_type_0 = None
    module_1.sub(auto_0, none_type_0, auto_0, flags=auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    bytes_0 = b"Y\x9a\xbd\x81\x9d\xe3\n*\xde\x001\x83\x98\x01\x98\xadg"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    none_type_0 = None
    var_0 = module_1.purge()
    module_3.match(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    set_0 = set()
    module_1.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    str_0 = "}3veiS\\EPQ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    str_0 = "j$x$\rQ\r"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    float_0 = -271.0
    str_0 = "hov[&]tJ\n]\\_D;4C^e"
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: str_0}
    module_3.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    int_0 = 2065
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    list_0 = []
    module_1.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    var_0 = module_1.purge()
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    complex_0 = 2268.75943 - 370.056081j
    none_type_0 = None
    module_3.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    int_0 = 7233
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    float_0 = 1578.706546
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    bytes_0 = b"\xf50\xc0"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    bool_0 = False
    module_1.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    int_0 = -3735
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    int_0 = 26
    tuple_0 = (int_0,)
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    int_0 = -603
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    bytes_0 = b"\xde\xef\x13\xec:Y"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    float_0 = -1444.89783
    set_0 = {float_0}
    tuple_0 = (set_0, set_0)
    module_1.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    str_0 = ""
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    bytes_0 = b"\x01\xe7.\xd8|\xe6#\n3\xd2\xe4\xf8eL\x13a\xa0\xb6:"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    str_0 = "u\\5e6"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    var_0 = module_1.purge()
    str_0 = "Dc2Z..({tqelr_L"
    module_3.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    str_0 = "<"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    bytes_0 = b"\x82\xc9*A\xfabCi\x0c2o\\\x16\x9f"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    dict_0 = {regex_flag_0: regex_flag_0}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    int_0 = -3909
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    var_0 = module_1.purge()
    var_1 = module_1.purge()
    var_1.__setattr__(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1801():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1802():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    str_0 = "8NHH<m5qz"
    list_0 = [str_0]
    str_1 = "Y|;"
    dict_0 = {str_1: str_0}
    module_1.Match(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bytes_0 = b"1\xb6p"
    bool_0 = True
    var_0 = module_1.search(bytes_0, bytes_0)
    module_1.subn(bool_0, bool_0, bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    int_0 = -1596
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    list_0 = []
    none_type_0 = None
    module_1.findall(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    str_0 = "t\x0c+k}EW>R*o}"
    module_3.match(str_0, str_0)


def test_case_1810():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1811():
    int_0 = -2578
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    str_0 = "VuVm`"
    module_3.get_new_command(str_0, str_0)


def test_case_1813():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1814():
    str_0 = "]\t@+BQH)*RfSS/"
    str_1 = "W.>.2MrtA Vm"
    str_2 = "WkF|`Wj*\tc5+Z\x0c"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_2: str_1}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    float_0 = -1113.41
    none_type_0 = None
    module_1.subn(float_0, none_type_0, none_type_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    error_0 = module_4.Error()
    module_1.escape(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1819():
    var_0 = module_1.purge()
    set_0 = {var_0}
    module_3.get_new_command(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    str_0 = "yP"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    none_type_0 = None
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    module_1.fullmatch(none_type_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    float_0 = -1770.20791
    list_0 = [float_0]
    none_type_0 = None
    module_3.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    int_0 = 1157
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    bytes_0 = b"\xf5\xa1W\xccs\x05fU\xbd\x97\xcep\x19\xd6"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    str_0 = '["g4PUd'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_2.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    float_0 = -602.4552
    module_1.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    int_0 = 744
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_3.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    str_0 = "8yv`=JB\rM"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    int_0 = 1529
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    float_0 = -3484.5
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    bytes_0 = b"\x1c\x17\x86hz\xce\xf0$\x9f\x00\xbe\x08WR\xe4\x999a"
    none_type_0 = None
    module_1.subn(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    str_0 = 'd8Uf9n"g8@v&3;jS"b'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    str_0 = "dHFc%"
    str_1 = "]PD,/5v;4ZDg}}2fB"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_1}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    float_0 = -1046.21855
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    int_0 = -753
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    str_0 = "fF)Td~\x0b="
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    bytes_0 = b"\x9a\xa4\xf5\xb9lp\xa0\x8f\x9c_"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, list_0]
    module_0.unique(list_1)


def test_case_1845():
    none_type_0 = None
    var_0 = module_1.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    complex_0 = -2066.6 + 3768.427j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    str_0 = "wsQ9"
    var_0 = module_1.escape(str_0)
    var_1 = module_1.subn(var_0, str_0, str_0)
    module_3.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    str_0 = "`>z?VoA~\n\x0c8T\r"
    module_1.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    float_0 = 171.763
    module_1.subn(float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    set_0 = set()
    none_type_0 = None
    module_1.search(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    float_0 = -2747.48069
    list_0 = []
    module_3.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    str_0 = "'E))%66"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    int_0 = 2955
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    int_0 = -3845
    list_0 = [int_0, int_0, int_0, int_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    bytes_0 = b"\xd7\x96\x99@\xba\x86\xb6\xb6)\xba/\xf5`@7r"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    int_0 = -1236
    set_0 = {int_0, int_0}
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    str_0 = "XN&U?w0hYD\\d1P"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    none_type_0 = None
    bool_0 = True
    module_1.split(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    str_0 = ']IEa5`C~."'
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    float_0 = 4691.08
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    complex_0 = -1085.472 - 34.5j
    complex_1 = 94.1 - 165j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_1,
        complex_1: complex_0,
        complex_0: complex_0,
    }
    module_1.split(dict_0, complex_0, flags=complex_1)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    int_0 = -1796
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    bytes_0 = b"\x97+\x07]\xc4\x02|n\x11C\xc5\xd3g\x1f\x88(G\xee\xc6"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    bytes_0 = b"\xaf\x85\x9d9\t]\xed!\xf6\xbe:\xd3\x92i\x1dk\x06\xd7"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0]
    module_3.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    str_0 = "}"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    str_0 = "~00f"
    str_1 = "XF46I"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    set_0 = set()
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    str_0 = "\n#vo0\ra+\"_'s\x0c~z>4D"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    none_type_0 = None
    float_0 = 2929.0
    module_3.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    bytes_0 = b"?\x86\x93{\x813\xb8\xf7\xa75="
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    complex_0 = -1670.3 - 798.91772j
    module_4.Error(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    var_0 = module_1.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    complex_0 = 975.341537 - 1528j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    int_0 = 1089
    bytes_0 = b"V\xc7\x84\xf0\np~D\xdc34\xd0\x90\xed\x17"
    module_3.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    int_0 = -1771
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: int_0, tuple_0: tuple_0, int_0: int_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    bool_0 = False
    none_type_0 = None
    module_1.findall(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    str_0 = "m*a6"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    int_0 = -2913
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    var_0 = module_1.purge()
    bytes_0 = b"\xc5\x96\xbfM_\xaa"
    set_0 = {bytes_0}
    module_1.findall(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    complex_0 = 2072.91474 - 2589.299j
    module_1.compile(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    bool_0 = False
    none_type_0 = None
    module_1.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    module_1.fullmatch(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    complex_0 = -648.94 + 1198.7317j
    none_type_0 = None
    module_3.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    auto_0 = module_0.auto()
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    bytes_0 = b"\x87S\xd0\xafV\x98\xbeK\xc2H\x86k\xcc\xac \x94U\xb9\xb8"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    bytes_0 = b"G\xea\xcb\xd3\x1dt\x07\x17\xc2\xc0\x0b\x8c%\x164\x99\xeb\x0b\x9c"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    str_0 = "_"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    complex_0 = -2253.6978 + 169.58j
    module_0.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    int_0 = 1901
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    bool_0 = False
    none_type_0 = None
    module_3.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    bytes_0 = b"/(A\x12x\x9e\xe9S\xb4\xadE\xf9\xd8B\xa2\xcf\x90\xcb$^"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    list_0 = []
    none_type_0 = None
    module_1.finditer(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    bytes_0 = b"X'\x14\x01"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    var_0 = module_1.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    int_0 = 2137
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    int_0 = -868
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    bytes_0 = b"3\x80\x9f\xc5fWj|.\xc4\x90\xdeg"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    bytes_0 = b"f\xc8\xe9m"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    float_0 = -515.5015
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    int_0 = -499
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    int_0 = 460
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    float_0 = 540.617
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    bytes_0 = b"\xa9\xc5\xd9X\x90p\x04\x88\xca\x1b3Z\x7f\xb3\xfeb^\xd9\x19"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    str_0 = "z1'`p%/^0mw\x0b;"
    module_3.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    bytes_0 = b"x\x83i\xabFE\xe61\xf8\xf8\x93\xeb\xae\x11^\x8e;"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_1.fullmatch(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    bool_0 = False
    set_0 = {bool_0}
    module_3.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    complex_0 = -1386 + 1100.396088j
    none_type_0 = None
    module_3.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    bytes_0 = b"<H\xfb\xf5o/\x13"
    list_0 = [bytes_0]
    none_type_0 = None
    module_3.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    bool_0 = False
    module_0.unique(bool_0)


def test_case_1933():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1934():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    float_0 = 404.63
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    int_0 = -3512
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    int_0 = -2981
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    float_0 = 1900.7
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    bytes_0 = b"\xa1I\xf2\xa6O\xd6?\x97\x02+\x9d\x14\x87\x97 \x01\xa3~\x9a"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    enum_dict_0 = module_0._EnumDict()
    module_1.finditer(enum_dict_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    int_0 = 2276
    bool_0 = True
    module_3.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    float_0 = -299.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0)
    module_1.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    var_0 = module_1.purge()
    list_0 = [var_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    set_0 = set()
    none_type_0 = None
    module_1.subn(set_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    float_0 = 698.327
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    bytes_0 = b"q\xd1f'\r\xb2\x882"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    bool_0 = False
    none_type_0 = None
    module_1.search(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    str_0 = "ir,_z6v(5K,SniAN*<H"
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setattr__(none_type_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    tuple_0 = ()
    bool_0 = True
    module_3.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    int_0 = -1473
    error_0 = module_1.error(int_0)
    module_0.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    int_0 = -658
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    none_type_0 = None
    bool_0 = True
    module_3.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    bytes_0 = b"\xde\xcc>\x84}4\xc2\xbc\x7f\xa0-K\x1a\x08"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    module_3.match(var_1, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    int_0 = 1288
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    bytes_0 = b"\xb9_*\xeay\xe0(\xf7\x08\xb3\xe3`\x9b\xea"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    var_0 = module_1.purge()
    float_0 = 1207.0
    module_3.get_new_command(var_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    int_0 = -300
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    bytes_0 = b"\xf9L\xf1"
    dict_0 = {bytes_0: bytes_0}
    module_0.EnumMeta(**dict_0)


def test_case_1970():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1971():
    bytes_0 = b"\x08\xea"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    str_0 = "?XcqP\tbM5"
    module_1.subn(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    str_0 = "FfC4Kh>EO;0ST&BZ'"
    list_0 = [str_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    bytes_0 = b"@\xa3P\xaf\xa6\x05}\xbaC\r\xd9\xeeyTN\x08"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_3.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    float_0 = 1853.158
    none_type_0 = None
    module_1.search(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    none_type_0 = None
    complex_0 = 941 + 2188.5j
    module_1.fullmatch(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


def test_case_1982():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1983():
    str_0 = "UTn"
    var_0 = module_1.match(str_0, str_0)
    module_3.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1985():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1986():
    float_0 = 3694.9
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    str_0 = "tx%'"
    list_0 = [str_0]
    module_1.sub(str_0, str_0, str_0, str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    str_0 = 'x"u'
    set_0 = {str_0, str_0, str_0, str_0}
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1990():
    str_0 = "7=wx {uTcp~sA"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    bytes_0 = b"6\x08\xf7\x9e9H"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    int_0 = -1185
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_3.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    regex_flag_0 = module_1.RegexFlag.ASCII
    module_3.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    float_0 = -769.2
    dict_0 = {float_0: float_0, float_0: float_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    bytes_0 = b"\x19\xbc[\xc8\x92\xe0\xfd\xa1\xfa\xfa<m'\xa8\x08\xf9\xd0"
    dict_0 = {}
    module_3.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    str_0 = "p.)y>\x0b6gE"
    none_type_0 = None
    module_1.subn(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    bytes_0 = b"\x83\x89\xe7C\x16%"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    bytes_0 = b"e\xd2i\x9e`\xdbO'\x01\xe6MB\x1a\xed\xfd\xa4\xb6"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    bytes_0 = b"\x0c\xf7=\xc9M"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    var_0 = module_1.purge()
    var_0.__len__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2006():
    bytes_0 = b"'/O\x80"
    none_type_0 = None
    module_1.sub(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    float_0 = -3490.76
    set_0 = {float_0}
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    var_0 = module_1.purge()
    dict_0 = {}
    bytes_0 = b"4}ba\x86\x0f4\xb5\xf0.Q\x86c"
    module_1.split(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    float_0 = -908.8
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    set_0 = set()
    module_1.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    float_0 = -1724.1603
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    bytes_0 = b"\xf9k\xb3\x97"
    module_1.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    int_0 = 280
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.compile(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    bytes_0 = b"\xb7\xe4\xcd\xed\x87\xbf"
    var_0 = module_1.match(bytes_0, bytes_0)
    list_0 = [var_0, var_0]
    module_3.match(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    bool_0 = True
    str_0 = "\x0bnT"
    module_3.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    tuple_0 = ()
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    str_0 = "{lkKuVX"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    enum_dict_0 = module_0._EnumDict()
    module_1.sub(enum_dict_0, enum_dict_0, enum_dict_0, flags=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    float_0 = -720.455
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    str_0 = "M\tJ]t{_[Dq"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    bool_0 = True
    error_0 = module_1.error(bool_0)
    set_0 = {error_0, error_0, bool_0, bool_0}
    module_1.search(set_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    float_0 = 2257.21485
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    tuple_0 = ()
    module_1.search(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    dict_0 = {}
    none_type_0 = None
    module_3.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    var_0 = module_1.purge()
    bool_0 = True
    tuple_0 = (bool_0, var_0, var_0)
    module_1.subn(var_0, var_0, var_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    str_0 = ';Hp"\rgqX(<286neU+MYi'
    dict_0 = {str_0: str_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    bytes_0 = b"/\xce\xf7^\x0b\xd7\xb8g\x9b\x0e[\xf8m\xabX\x0c\x02"
    module_1.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    int_0 = 1240
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    var_0 = module_1.purge()
    module_1.Scanner(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    str_0 = "rt7ZGsdfSC.RR%dis"
    var_0 = module_1.compile(str_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2041():
    int_0 = -326
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    tuple_0 = ()
    module_1.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bytes_0 = b"G\x0e\x0e\x9a\xa3uT\xe7"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    int_0 = 3123
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: bool_0}
    module_3.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    float_0 = 2534.61635
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    float_0 = 2898.0
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    list_0 = []
    str_0 = "&n"
    bytes_0 = b"r\xa7"
    dict_0 = {str_0: bytes_0}
    module_2.BaseException(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    complex_0 = 3124.699766 + 1562.27j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    float_0 = -925.5435
    module_1.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    bool_0 = True
    none_type_0 = None
    module_1.fullmatch(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    var_0 = module_1.purge()
    module_0.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    int_0 = 2960
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    bytes_0 = b"Roa\x8e\xc1"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    bytes_0 = b"\xdd\xcc\x05"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    int_0 = 1840
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    complex_0 = 547.8 + 1059.91j
    none_type_0 = None
    module_1.finditer(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    bytes_0 = b"'\xc8\xd7yu"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    int_0 = -1515
    none_type_0 = None
    module_1.finditer(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    float_0 = 2752.216
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    bool_0 = False
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    str_0 = "mKV>adY"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    dict_0 = {}
    module_1.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    list_0 = []
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    str_0 = "YdD|iH8KdC"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2079():
    int_0 = 1059
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    bytes_0 = b"\xbc\x9a"
    none_type_0 = None
    var_0 = module_1.match(bytes_0, bytes_0)
    var_0.__contains__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    tuple_0 = ()
    module_1.sub(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    module_3.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    str_0 = ":n\x0b"
    module_1.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_3.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    str_0 = "aOamHj(F+?*Vhz][ Q'x"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    var_0 = module_1.purge()
    set_0 = {var_0, var_0, var_0}
    bytes_0 = b""
    list_0 = [set_0, set_0, bytes_0, set_0]
    module_0.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    bytes_0 = b"\x96\xf8H:+#V>\xb0\x98\xd6`\xfe\xd3?\xe0"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    var_0 = module_1.purge()
    var_1 = module_1.purge()
    module_1.subn(var_1, var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_3.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    float_0 = -1419.471823
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    str_0 = "/\r^qPW-7m=F"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


def test_case_2102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2103():
    int_0 = -1141
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_3.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    bool_0 = True
    bool_1 = False
    module_1.split(bool_0, bool_0, bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    str_0 = "H^mKaW(~s#$\x0b?G\x0b"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    bytes_0 = b"\\A^7\xbf\xdf\xfa\x13\xe8\x839\xe8"
    bool_0 = False
    module_1.subn(bytes_0, bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    complex_0 = 956.09694 - 1385.9379j
    module_0.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    int_0 = -1097
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2111():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    float_0 = 1543.60571
    module_3.match(float_0, float_0)


def test_case_2114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2115():
    float_0 = -304.934
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    bytes_0 = b"\xccs\x94\xd0"
    bool_0 = True
    module_3.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.finditer(list_0, bool_0)


def test_case_2118():
    bytes_0 = b"\x9d\xb1/gX\x19h \x1e\x9dK\xa1\xcd\xcc"
    var_0 = module_1.match(bytes_0, bytes_0)
    var_1 = module_1.purge()
    with pytest.raises(AttributeError):
        var_1.__getattr__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    str_0 = "P"
    var_0 = module_1.split(str_0, str_0)
    str_1 = "yth6BiR%,F;Q+\x0bbZH"
    none_type_0 = None
    str_2 = "\x0c"
    dict_0 = {str_1: none_type_0, str_2: none_type_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    bool_0 = False
    list_0 = [bool_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    int_0 = -5840
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    str_0 = ""
    var_0 = module_1.template(str_0)
    var_1 = var_0.__dir__()
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2123():
    str_0 = ";:aP3t\\7nHvL`(P"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    str_0 = "e+{"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    none_type_0 = None
    int_0 = 425
    module_1.split(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    float_0 = -1318.59
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    complex_0 = 1010 - 4349.198j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    int_0 = -2182
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2132():
    bool_0 = False
    module_1.compile(bool_0, bool_0)


def test_case_2133():
    list_0 = []
    base_exception_0 = module_2.BaseException(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    complex_0 = 1174 + 779.376966j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    int_0 = 1537
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    float_0 = -2423.7
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    str_0 = "0(H%j-::&4X}/tmQP~"
    str_1 = "]0u6+bhW'JSDW.0&"
    str_2 = "+u"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_0: str_0}
    module_0.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    base_exception_0 = module_2.BaseException()
    none_type_0 = None
    module_3.match(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    bool_0 = True
    none_type_0 = None
    module_1.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    int_0 = -5633
    none_type_0 = None
    module_1.subn(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    bool_0 = True
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    none_type_0 = None
    module_2.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    float_0 = -710.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    str_0 = "4./4]tz8D"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    module_3.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    none_type_0 = None
    bytes_0 = b']\x00\xb6\xa8\xb8\xb8n"U\xd3\xe5^=\xa8m\x96'
    module_1.subn(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    str_0 = "5th`1~"
    set_0 = {str_0, str_0}
    module_1.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    var_0 = module_1.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    str_0 = "#9#oSaQ\rlTm/vY"
    set_0 = {str_0, str_0, str_0}
    module_3.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    bytes_0 = b"79("
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    bytes_0 = b"\x8e2\x90\x90"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    int_0 = -323
    dict_0 = {int_0: int_0, int_0: int_0}
    var_0 = module_1.purge()
    var_0.__delattr__(int_0, dict_0)


def test_case_2160():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    with pytest.raises(TypeError):
        var_1.__new__(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    bytes_0 = b"V\x06KF\xef\x1f\x83\xcb\xfb\xa4,\xd3\xe1\x98\xbe\x9c\x9d\xf8@\xdb"
    var_0 = module_1.match(bytes_0, bytes_0)
    str_0 = 'A~?H|"lP5`@)VoDr\n'
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    str_0 = "7$I`fkMlHhD$R:rOe"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2164():
    bool_0 = True
    module_2.BaseException(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    bytes_0 = b"H\xe9\x81"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    int_0 = -3999
    module_1.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    str_0 = "99s%Hx!;\t$\t"
    module_1.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    bool_0 = True
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    bool_0 = True
    bool_1 = False
    module_1.subn(bool_0, bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    str_0 = "F"
    str_1 = "^CvCLSJq3AIG4@Fwl)xv"
    str_2 = "N9WE.XH`\x0c\\{?=0]D7zT&"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1, str_2: str_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    bool_0 = False
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    bytes_0 = b"\xff\x90\x91\xbf\x80\xa1\xdd\xaa\\\xc9j\xdf\x0e\xbb\xc9_\x16\x06\xce"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    complex_0 = -403.68645 + 610.37769j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    bytes_0 = b"f\xbb\xf6Q\xec\x8a"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    int_0 = 751
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    str_0 = "_&K}=b#/}KsiFhrm"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    int_0 = 824
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    bool_0 = True
    error_0 = module_1.error(bool_0)
    module_1.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    str_0 = "5ibelMys-^a\x0c88kFa_Uc"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    tuple_0 = ()
    module_1.fullmatch(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, pos=none_type_0)
    module_1.template(error_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    bytes_0 = b"\xff\x84'\xd4\x9aF\xbe\x95\xd5\xe4p\xdd\x84\xf6\x0bs\x8a\xde\xd3 "
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    complex_0 = 75 + 1567.21302j
    module_1.sub(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    str_0 = "/CG9I(l|**"
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    int_0 = 4738
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    str_0 = "*zP+F"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    int_0 = -4665
    none_type_0 = None
    module_1.split(int_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    none_type_0 = None
    str_0 = "EI<E\n,v"
    module_3.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    str_0 = "e;N LOh(5(}8"
    str_1 = 'Xt|M6Dci"Xu1M7&'
    var_0 = module_1.template(str_1)
    var_1 = var_0.__dir__()
    var_1.__repr__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    float_0 = -1221.034349
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    float_0 = -1812.63
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    str_0 = "\r+\x0bT/bo&3h\rOz(lK@=#?"
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    list_0 = []
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    bytes_0 = b"N\x80;M\xadP\xea\x05\xf0\x8cu"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    dict_0 = {}
    none_type_0 = None
    module_3.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    float_0 = -4018.2
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    int_0 = -1907
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_1.subn(int_0, var_1, var_0, flags=var_1)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    str_0 = "_'U<#$tW1/<^_hDZn/~"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    list_0 = []
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    dict_0 = {}
    object_0 = module_2.object(**dict_0)
    int_0 = 1392
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    bytes_0 = b'\x80I"|)\x01\x9cL'
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    str_0 = "(g9^b`B`NEy0J"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    int_0 = -448
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    bytes_0 = b""
    module_1.sub(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    bool_0 = False
    module_1.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    str_0 = "h\x0c}XF`y"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    int_0 = -2798
    module_1.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    none_type_0 = None
    bytes_0 = b"}\xb0<\xd90\xd1\xabk}\x95\r\xde\xe8\xd0\t\xcbc"
    module_3.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    str_0 = "1]E4\x0bH>d;Mt1{*p3P"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    list_0 = []
    module_1.compile(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    int_0 = 1268
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    str_0 = ",2WwU@b|"
    str_1 = "MAj'm)8)@6\x0b]x"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    int_0 = -124
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    bytes_0 = b'P\x00\xd1a"\xcc\xa2Z\xa3\xc3\x91bS\x9d'
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    int_0 = -1284
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    float_0 = 1942.91
    list_0 = [float_0]
    bytes_0 = b"[\xbc\xc6"
    tuple_0 = (list_0, bytes_0, float_0)
    module_0.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    bytes_0 = b"\xdfV -"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    str_0 = "6ufOblZPl@~|q[wN\t\x0c"
    bool_0 = True
    module_3.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    str_0 = ""
    bytes_0 = b"8\xd1e\xca\x9d"
    module_1.search(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    float_0 = -2318.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    int_0 = -731
    error_0 = module_1.error(int_0, pos=int_0)
    module_3.get_new_command(error_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    none_type_0 = None
    module_1.Scanner(none_type_0)


def test_case_2237():
    dict_0 = {}
    exception_0 = module_2.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    int_0 = 4773
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    str_0 = "C|&%@Q= BW+nZM|q)"
    str_1 = "ova\\MRuy\n+ULY3QS\x0bPx:"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
    module_0.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    str_0 = "oCk8UwA"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    str_0 = "&Q"
    dict_0 = {str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_2244():
    var_0 = module_1.purge()


@pytest.mark.xfail(strict=True)
def test_case_2245():
    dict_0 = {}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    str_0 = "5|$v\x0ci5xlU<}kX"
    module_1.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    bytes_0 = b"/\x93\x10\x00\xdb;\xb8v$"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    int_0 = 2761
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    module_3.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    bytes_0 = b"\xe6:\xee\x18`\xa4\xa9\xd1/m\xec\xa60G"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    int_0 = -929
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    bytes_0 = b"\x95\xbb\x08"
    var_0 = module_1.findall(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    module_3.match(var_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    float_0 = -1442.961
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    auto_0 = module_0.auto()
    tuple_0 = (auto_0,)
    module_0.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    tuple_0 = ()
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    bool_0 = False
    bool_1 = False
    module_3.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    float_0 = 2433.2311
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    int_0 = 1683
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.Scanner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    var_0 = module_1.purge()
    none_type_0 = None
    module_3.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_3.get_new_command(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    float_0 = 1609.7
    module_1.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    bytes_0 = b"\x96\x89\xd9(`\xff\x1d\x02\xda?s\xed\xc6\xe7"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    bytes_0 = b"\xc4\xe8q\xe1B\xbf\xc8\xcdw\xb5\x86o\xda;j\xac<\x93\x9d\xb8"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    bytes_0 = b"\xfb\x0c9\xad\x80"
    none_type_0 = None
    module_1.sub(none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    float_0 = 4.781
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    str_0 = "ZEX+M+q3|)]$W3"
    var_0 = module_1.escape(str_0)
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    complex_0 = -1797.404924 - 509j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    list_0 = [error_0, none_type_0, none_type_0, none_type_0]
    module_0.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    set_0 = set()
    module_1.match(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    int_0 = 2709
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    none_type_0 = None
    base_exception_0 = module_2.BaseException()
    module_3.get_new_command(none_type_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    bytes_0 = b"\x0e1\xac\xcf\xe3v7M\xd5\xc1\xfc\xdf\x1e"
    var_0 = module_1.compile(bytes_0)
    var_0.__setitem__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    bytes_0 = b"\x95\x83\xed\xbc\x1e~\\\xc3\xf5yT\x810\x10\xca%\xf93"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    bytes_0 = b"$\xbb\xedD"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    bytes_0 = b"E\x07\xda\x00bB\xca_\x06\x88\xadj\x07\x9b\xc9\x86"
    var_0 = module_1.sub(bytes_0, bytes_0, bytes_0)
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_1.subn(none_type_0, none_type_0, error_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    dict_0 = {}
    module_1.split(dict_0, dict_0, flags=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    exception_0 = module_2.Exception()
    set_0 = {exception_0, exception_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, set_0, list_0, list_0]
    module_2.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    bool_0 = True
    none_type_0 = None
    module_1.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    str_0 = "E"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    str_0 = "vFG;SD\x0c}V+l!10I3_U"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    bytes_0 = b"\xc1.QO\xe1-d\xa0\x18g%\xe9"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    bool_0 = True
    bool_1 = True
    module_3.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    list_0 = []
    module_1.sub(list_0, list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    bytes_0 = b"\x91\xc4WC"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2309():
    float_0 = -2876.6854
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    str_0 = "H_eT"
    var_0 = module_1.escape(str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_2311():
    float_0 = 1304.89
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    float_0 = -1601.92
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    str_0 = "'D,@C-nu3<z}S4Z"
    none_type_0 = None
    module_1.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.subn(set_0, set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    int_0 = 2264
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    bool_0 = True
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    float_0 = 2455.551
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    list_0 = []
    error_0 = module_4.Error(*list_0)
    module_3.get_new_command(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    bytes_0 = b"3\xc8\x16\x05\xd0"
    var_0 = module_1.compile(bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2323():
    int_0 = 3346
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    bytes_0 = b"\n8\x0f\x9c\x08\xd9\xcc\xd8\x06)\xcdo\x00L\xe3"
    module_1.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    complex_0 = 3663.2 - 2088.939914j
    set_0 = {complex_0, complex_0}
    module_3.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    complex_0 = 2606.361 + 481.0955j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    none_type_0 = None
    base_exception_0 = module_2.BaseException()
    module_3.match(none_type_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    var_2 = var_1.__bool__()
    str_0 = "a9RFM\n"
    list_0 = [var_2, str_0]
    module_1.findall(list_0, var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    float_0 = -707.421
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    int_0 = -3849
    var_0 = module_1.purge()
    tuple_0 = (int_0, var_0)
    int_1 = 48
    module_3.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    set_0 = set()
    module_1.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    int_0 = 1598
    none_type_0 = None
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    str_0 = "io/fc"
    module_1.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    regex_flag_0 = module_1.RegexFlag.ASCII
    module_1.fullmatch(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    float_0 = -3514.7395
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_1.escape(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    set_0 = {regex_flag_0, regex_flag_0}
    module_3.match(set_0, set_0)


def test_case_2341():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2342():
    exception_0 = module_2.Exception()
    none_type_0 = None
    module_1.split(exception_0, exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    bytes_0 = b"-\xb5(X\x90\xfc\xed\x85\xb8\x96"
    set_0 = {bytes_0, bytes_0}
    module_1.split(set_0, set_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    int_0 = -1518
    module_1.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    str_0 = "\nP"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_1.finditer(list_0, none_type_0)


def test_case_2346():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2347():
    int_0 = -810
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    bytes_0 = b"\xc1y\xee\x93\x88j\x97\xbe\x07?"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    dict_0 = {}
    none_type_0 = None
    module_1.subn(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    float_0 = 4275.18
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    var_0 = module_1.purge()
    module_1.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    bytes_0 = b"\x0c"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    complex_0 = -2545.7 + 153.77j
    none_type_0 = None
    module_3.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    bool_0 = False
    none_type_0 = None
    module_1.findall(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    float_0 = 1544.17
    set_0 = {float_0, float_0, float_0, float_0}
    var_0 = module_1.purge()
    tuple_0 = (set_0, var_0, var_0)
    module_3.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    int_0 = -895
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    float_0 = 217.327653
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    bytes_0 = b".\xd4\x06\xbeU\x03\x81\xd6$Q"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    set_0 = set()
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    bytes_0 = b"\xfc"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    bytes_0 = b"j\x8dw\x85\x01"
    error_0 = module_1.error(bytes_0, pos=bytes_0)
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    str_0 = ")\tPN+]l%\r"
    dict_0 = {str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    int_0 = 163
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    none_type_0 = None
    list_0 = [none_type_0]
    error_0 = module_4.Error(*list_0)
    module_3.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    str_0 = "[^gh\tZow"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    int_0 = -2406
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    complex_0 = 4378.7 - 645.4j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    bytes_0 = b'\xa49\\z\xee"\xb4\x88\xa0O>/\xb7\xadJv'
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    int_0 = -340
    bool_0 = True
    module_3.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    str_0 = "PQ5It"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    dict_0 = {}
    none_type_0 = None
    module_1.template(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    bytes_0 = b"\x9e6\xc1\xd3/z\xb6\xd3P\xde\xe6\x15\xf9\xc3\xc60\x87\x10}6"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    none_type_0 = None
    module_1.finditer(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    str_0 = "8qqw\nS}Zk;BU"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    bytes_0 = b"*\xbe\xf9\xc4+\x14=\xa5&["
    bytes_1 = b"S\x02\xf5\xb0\xe8"
    module_1.sub(bytes_0, bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    str_0 = ",h\rA2\\Rk\tW"
    str_1 = "DgoAW:1vyN<Q"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_1}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    str_0 = ":y0^n#oJ`0rq\x0c\\"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_3.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    bool_0 = False
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    int_0 = -241
    module_1.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    bytes_0 = b"_!\x8c\nB\x82"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    str_0 = '\\w8uj"Rv^L'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    bytes_0 = b"H\xee\xfei\xc9\xa4\x0bA@\xfa\xfax"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    list_0 = []
    bytes_0 = b"\xc7{\nu"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    var_0.__delattr__(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    list_0 = []
    none_type_0 = None
    module_3.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    float_0 = 2395.29556
    module_1.split(float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    complex_0 = 5612.91 + 3562.4316j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_3.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    bytes_0 = b"\xeb\xa8\xb8C!\x07Yp["
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    float_0 = -398.0471
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    int_0 = -1965
    module_3.match(int_0, int_0)


def test_case_2406():
    str_0 = "ll1Rcrks<8\t%mq2B\n$"
    var_0 = module_1.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    bytes_0 = b"\xf3\x87\x17\x85i+\x11\xc6\xd5\xc4?\xd9\xc4?\xf8\x9f\xf7"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    list_0 = []
    none_type_0 = None
    module_1.split(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    bytes_0 = b"\xd1:\x07\xfe\xc7N\xf8X\xfb\x82\xd66\xe3\x03"
    none_type_0 = None
    module_1.findall(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    float_0 = 296.290108
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    complex_0 = -2253.109 + 3299.601867j
    module_1.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    int_0 = 1939
    none_type_0 = None
    module_1.search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    int_0 = 2752
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    bytes_0 = b"\xe6\x11\xc8\x81\x89\xf7G\x04\xaf\x0f*U\xa5\\\x0e\xaa"
    dict_0 = {bytes_0: bytes_0}
    module_1.sub(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    str_0 = "16>h$"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    float_0 = -726.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    list_0 = []
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    int_0 = 1367
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    float_0 = 1196.75
    module_3.match(float_0, float_0)


def test_case_2421():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2422():
    none_type_0 = None
    bytes_0 = b"\xbc\xef\xfa\xe3g\x0f}"
    var_0 = module_1.compile(bytes_0)
    var_0.__call__(none_type_0, none_type_0, start=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    var_0 = module_1.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    float_0 = -2674.53217
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    int_0 = 2715
    dict_0 = {int_0: int_0}
    module_1.finditer(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    float_0 = 847.431787
    module_1.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bytes_0 = b"?\xd3=&\xad5\xac\xa0\x9c\x02\xc6\xd1\x1a\x11\xfc"
    module_1.finditer(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    bytes_0 = b"\xdd\xe2\xb8\x1f\xc7Jom)\x07"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    int_0 = -2316
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    int_0 = -3019
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_2.Exception(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    int_0 = -633
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    int_0 = 214
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    int_0 = 2682
    set_0 = {int_0}
    bytes_0 = b"K\x05"
    module_3.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    none_type_0 = None
    bytes_0 = b"\xfa\xe7Cq\x12\xfc\xd6S\x8c\x82\xe6\xe6\x10\xa5\xfb\x969\xb1"
    var_0 = module_1.match(bytes_0, bytes_0)
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    float_0 = 607.474723
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    none_type_0 = None
    module_0.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    int_0 = 197
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    int_0 = -1872
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    bytes_0 = b"\xb7\x17\xf8\x0eokC"
    module_3.get_new_command(bytes_0, bytes_0)


def test_case_2444():
    bytes_0 = b"z_\xde\x13\xac <\x19"
    var_0 = module_1.findall(bytes_0, bytes_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    str_0 = "+pt\\C!Z,cK\x0bx"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    complex_0 = -3060.7155 + 374.29j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    str_0 = "7QSuK\\v(kd\n"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    float_0 = -1797.341
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    none_type_0 = None
    bytes_0 = b"`Y"
    module_3.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    int_0 = 976
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    complex_0 = 1351.171 + 267.6j
    module_0.EnumMeta(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    str_0 = "vpCyc{h{kg\x0bZj'\x0c,ybo7"
    var_0 = module_1.escape(str_0)
    module_1.match(var_0, str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    bytes_0 = b"\xb5\x86\xfd\xab|\x86Q\\\xdb\xf8\x0b\x15\x81\x07\t'\x1d"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    str_0 = "2"
    var_0 = module_1.fullmatch(str_0, str_0)
    module_3.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    bool_0 = True
    module_1.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    int_0 = -4839
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2467():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    str_0 = "@t\\s+ZKh;tzi=8["
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    str_0 = "5\r6QvxFY"
    dict_0 = {str_0: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    str_0 = "GT7hL)C&"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    bool_0 = False
    var_0 = module_1.purge()
    var_0.__iter__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2473():
    bytes_0 = b"\xe3\xa0G\x8a&N\x95\xf3\xf6X\x1c\xfbB%"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    list_0 = []
    list_1 = [list_0, list_0]
    module_1.template(list_1)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    float_0 = -1481.158
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    bytes_0 = b"\x8d\x0ccq\x06\x84\xdd\xbc\xa6"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    complex_0 = 282.5855 - 3806.98j
    module_1.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    bytes_0 = b"I\x8b!\x10"
    module_3.match(bytes_0, bytes_0)


def test_case_2482():
    str_0 = "Jv!|\tTZwfL"
    var_0 = module_1.search(str_0, str_0)
    with pytest.raises(TypeError):
        var_0.__new__(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    none_type_0 = None
    module_1.Pattern(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    bytes_0 = b"T\xbd\xafAe\x96k\xe2\x1e"
    module_0.EnumMeta(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    float_0 = 256.406
    bool_0 = True
    module_3.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2487():
    bytes_0 = b""
    bool_0 = False
    list_0 = [bytes_0, bool_0, bool_0, bytes_0]
    base_exception_0 = module_2.BaseException(*list_0)
    module_1.template(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    str_0 = "huwuwzsf2^tM>;|\r=P"
    dict_0 = {str_0: str_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    float_0 = -1421.05493
    dict_0 = {float_0: float_0}
    module_1.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    bytes_0 = b"\\1kr\xe3\xd3u-\r\xb5qu\xfa\xc6\x19\xece_\xaa"
    str_0 = "S6_&]"
    float_0 = -5006.5
    bytes_1 = b"R\x8f\x8b"
    tuple_0 = (bytes_0, str_0, float_0, bytes_1)
    module_3.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    bool_0 = False
    module_1.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    float_0 = -496.412
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    bytes_0 = b"\xf1\xc8"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    int_0 = 1419
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    float_0 = 589.931341
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    str_0 = "*MH^a0}&v-N$R5\r2"
    str_1 = ""
    dict_0 = {str_1: str_0, str_1: str_0, str_1: str_0}
    module_2.Exception(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    bytes_0 = b"\xb19.\xec\xcb\x0f\xc8!\xefb\x12\xf2"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    str_0 = "in i\"0V'^"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    complex_0 = 2394.2 - 2207.4j
    none_type_0 = None
    module_3.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    bytes_0 = b"\xe1\x8f\x05\xe7\xc7\xa9\xc4\xb9W\xd0\xd9"
    var_0 = module_1.template(bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    set_0 = set()
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    bool_0 = True
    none_type_0 = None
    module_1.findall(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    dict_0 = {}
    int_0 = -1121
    module_3.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    float_0 = -1619.320355
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    bytes_0 = b"l\xe4\xc4\xa4W8\xa1\xdb\xb6\xe8\xb8\x88\x88X\x05"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    int_0 = 152
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    int_0 = -820
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2515():
    int_0 = 1332
    module_1.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    bool_0 = False
    module_1.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    error_0 = module_4.Error()
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2521():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    bool_0 = True
    none_type_0 = None
    module_3.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    auto_0 = module_0.auto()
    bytes_0 = b"u\x95\xce\xac\x8f\xb4C\xdd7^6\xb7\xe3"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    list_0 = []
    str_0 = "6)SFM)9^"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_0.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    int_0 = 2210
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    bytes_0 = b"%"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    enum_dict_0 = module_0._EnumDict()
    list_0 = [enum_dict_0, enum_dict_0]
    exception_0 = module_2.Exception(*list_0)
    module_3.get_new_command(enum_dict_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    bytes_0 = b"\x96\x8b\x8dez"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    bytes_0 = b"\xc8\xed]\x14c"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    int_0 = -632
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2535():
    bytes_0 = b"J\xd4bI\x90\xfbR"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    float_0 = -987.6018
    module_1.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    str_0 = "NgC!i<"
    none_type_0 = None
    module_1.compile(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bytes_0 = b'\x8f\xd7\xb2?\x9c\x91\xdd\x03SG\xb2h\xb7"\xf4}\x88\x00\xe6\x91'
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    int_0 = 2196
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    list_0 = []
    module_0.EnumMeta(*list_0)


def test_case_2545():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2546():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    int_0 = -1924
    none_type_0 = None
    module_1.sub(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    complex_0 = -431 - 1919j
    module_1.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    int_0 = 2724
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    bytes_0 = b"\xd11\xcd3"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    bool_0 = True
    bool_1 = False
    module_1.sub(bool_0, bool_0, bool_0, bool_1)


def test_case_2553():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2554():
    str_0 = "$),F3yIwXylH<vN=Y'<}"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    bytes_0 = b"\xe6\x94F\xd1A#s"
    set_0 = {bytes_0}
    module_3.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    str_0 = "CKEFPdp"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    str_0 = "qsTnPXyUD5ol@"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    float_0 = 1586.14151
    module_1.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    int_0 = -2772
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    float_0 = -850.0
    float_1 = -644.951151
    module_1.findall(float_0, float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    bytes_0 = b"\xb5\xa0\xa7Ux\x90\xd7\x92\xd004\x14\x97\xaa\xb7\xd5"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


def test_case_2564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2565():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    bytes_0 = b"\x0cfwc\x15\x83\xc4D\xaf\xda\xa0\x98g\xbf"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    bytes_0 = b"l\xb9\xd4\xf9j\x08\xba\x9a\xf7S\x9a\x88\xa3"
    var_0 = module_1.template(bytes_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    int_0 = -294
    module_1.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    float_0 = 299.9
    var_0 = module_1.purge()
    var_0.__call__(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    var_0 = module_1.purge()
    module_4.Error(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    int_0 = -531
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    str_0 = "nN\x0b5zz'zEe)0r!=NG/kM"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    float_0 = -3388.2
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    bytes_0 = b"\x1cO(%=vmn\xc1\xc6\x7fP\xa0\xd0\x06x\xb4\xaa"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    int_0 = 1126
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    bytes_0 = b"\xe4\x13>\x89\x02(\xb1q\xe7\xf6a\x88\xa4r"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    str_0 = "TX?3S,^~@!_@Is M."
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    bytes_0 = b"\xa3\xf9"
    none_type_0 = None
    module_1.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    str_0 = 'SR?"x'
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    int_0 = -280
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    int_0 = 4057
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {bool_0}
    module_3.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    bytes_0 = b"j\x0e(\xa3\xd5\x9eK\xbb\xe1R"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    module_3.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    error_0 = module_4.Error()
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    tuple_0 = ()
    var_0 = module_1.purge()
    var_0.__call__(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    int_0 = -1632
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    int_0 = 1936
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    none_type_0 = None
    module_0.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    error_0 = module_4.Error()
    module_1.template(error_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    int_0 = 1363
    bool_0 = False
    module_1.subn(int_0, bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    bytes_0 = b"\xa4{7\xa6"
    str_0 = "6dW2\x0b97p"
    str_1 = "i~\nk\nym\nc"
    str_2 = "<6igkt0to.Cx4"
    dict_0 = {str_0: bytes_0, str_1: bytes_0, str_2: str_2}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    bytes_0 = b"\x86\xe0\x97\x99\xaf[\x04"
    module_1.fullmatch(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.subn(var_0, var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    int_0 = 150
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    str_0 = "\\5m,v2fo!Z4`*)"
    float_0 = -1031.01
    module_3.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    int_0 = 142
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    str_0 = "\r\nk\\Gr"
    module_1.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    bool_0 = False
    none_type_0 = None
    module_1.compile(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    float_0 = 4069.0
    module_1.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    var_0 = module_1.purge()
    bool_0 = False
    none_type_0 = None
    module_1.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    bytes_0 = b"r\x1d\x8f\xa4\xf8,MAI!uwC\xff\xdb\x04"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    float_0 = 1232.0
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    int_0 = 2194
    set_0 = {int_0}
    module_1.finditer(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    int_0 = -917
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    complex_0 = 1436.526 - 1278.0904j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    float_0 = -325.8
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    exception_0 = module_2.Exception()
    module_3.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    enum_dict_0 = module_0._EnumDict()
    module_0.unique(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    int_0 = 559
    list_0 = [int_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    bytes_0 = b"\xa6\x16\xa8o\xf4\x9a\x9f\xea\xc8\xb7\x87Ig;\xdf5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.findall(dict_0, dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    int_0 = 3888
    none_type_0 = None
    module_1.split(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    bytes_0 = b"\xadP\xf1\x80P\xf2\xf5W7|\xd0A\x99"
    var_0 = module_1.findall(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    module_1.match(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    float_0 = 937.05548
    module_3.get_new_command(float_0, float_0)


def test_case_2627():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2628():
    var_0 = module_1.purge()
    bool_0 = True
    module_1.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    bytes_0 = b"Fw\xc9\x94\x80P\x93mjb^3F"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    str_0 = "L;5xc$\n\x0c+FSu\n_GI\tL("
    module_1.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    int_0 = -679
    set_0 = {int_0, int_0}
    module_3.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    set_0 = set()
    none_type_0 = None
    module_3.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    none_type_0 = None
    module_1.escape(none_type_0)


def test_case_2635():
    var_0 = module_1.purge()


@pytest.mark.xfail(strict=True)
def test_case_2636():
    str_0 = "43Mgt[Mg"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    bool_0 = False
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    int_0 = -1527
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_3.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    int_0 = 548
    none_type_0 = None
    module_1.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    bool_0 = True
    bytes_0 = b"\xda\x88\x04\xf8PqLZ\xd9\x1a\x0bC\xfa\xbf\xc8E\x9a\xbf\xe0"
    error_0 = module_1.error(bool_0, bytes_0)
    module_3.get_new_command(error_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    int_0 = -1361
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    int_0 = -1993
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    bool_0 = True
    none_type_0 = None
    module_3.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    bytes_0 = b"\xba\xb6\x1er\xa5\xe6\xff\xfeY\\\x92,\x85\xbd\xe8G\x91\xd5\x8a\xe6"
    none_type_0 = None
    module_1.match(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    str_0 = ",("
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    str_0 = "EdF'\x0c\x0c%G3?,uyR=\n(uJ"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_3.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    float_0 = 943.86
    module_3.match(float_0, float_0)


def test_case_2651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2652():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2653():
    bool_0 = True
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    float_0 = -457.821125
    module_1.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    exception_0 = module_2.Exception()
    bool_0 = True
    int_0 = 233
    module_1.findall(bool_0, int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    int_0 = -710
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    error_0 = module_4.Error()
    set_0 = {error_0, error_0, error_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    int_0 = 548
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    str_0 = "#+=F\r6Pf~~[Bl#1Z"
    str_1 = "N(x*f+F"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_2.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    bytes_0 = b"\xe3\xb9\x04\xb5\x98n\xd6\x9a\xfc"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    bytes_0 = b"\xf8\x19C\xf1\x9a\x10\xf5\xcdIZ\xda\xcc\x1b\xc1Ez"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = None
    module_3.get_new_command(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    bytes_0 = b"\xd9I\x984\xb2\xcax\xcf"
    module_1.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    error_0 = module_4.Error()
    int_0 = -514
    none_type_0 = None
    module_1.sub(error_0, error_0, int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    none_type_0 = None
    tuple_0 = ()
    module_3.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    dict_0 = {}
    module_1.split(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    complex_0 = -381.79 - 2194.478157j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    bytes_0 = b'\xec\x12\xe86\xcd\xb4wM"\x8e'
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    bytes_0 = b"\xbf\xc3\xc0~`"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    var_0 = module_1.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    bytes_0 = b"h3F\x87\x85xaj\x89"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    int_0 = -150
    module_1.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    bool_0 = False
    var_0 = module_1.purge()
    var_0.scan(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2683():
    none_type_0 = None
    complex_0 = -2309.534 - 915.40806j
    module_1.findall(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    bytes_0 = b"\xc9\x9a\x8a\xbdP\xb1"
    var_0 = module_1.search(bytes_0, bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_2685():
    var_0 = module_1.purge()
    str_0 = "yRsQVI817]/ \rh"
    bytes_0 = b""
    var_1 = module_1.compile(bytes_0)
    var_1.__setitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_3.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    int_0 = 2072
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    float_0 = -1500.557787
    module_1.split(float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    int_0 = -3011
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    bool_0 = True
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    int_0 = -51
    tuple_0 = (int_0,)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    str_0 = ""
    none_type_0 = None
    str_1 = "{w*%"
    str_2 = "P'<\nar<>\"V/){a%rD"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_0.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    float_0 = -2034.498128
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    bool_0 = False
    none_type_0 = None
    module_3.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    str_0 = "/lH"
    var_0 = module_1.search(str_0, str_0)
    var_1 = module_1.purge()
    module_1.sub(var_1, var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2707():
    int_0 = 1099
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    bytes_0 = b"\xd8\xb9;q\xaa\xea"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    none_type_0 = None
    module_3.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    int_0 = 6389
    int_1 = 4571
    module_1.findall(int_0, int_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    bool_0 = False
    none_type_0 = None
    dict_0 = {bool_0: bool_0}
    module_1.sub(bool_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    bytes_0 = b"\xd34-^&\x13t\x02\xc0\x93\xd1\x9b\x8f\x87K4\xe5_"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    bytes_0 = b'\x01\xe5\xb7\xe7.\xe9`\xc3i\xbc$"\xa5~YA\x8f \xc5\x7f'
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_3.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2716():
    float_0 = -2972.75699
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_3.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    bytes_0 = b"\xdf\xb7\xf0\x91\xbc\xc2"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    float_0 = -1790.1352
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    str_0 = ""
    str_1 = "uAQ>w;3W<0)B\\8!n"
    str_2 = "Q1WJo:z][ot4HJnMTU"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    module_2.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    int_0 = -76
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    int_0 = 3320
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    float_0 = -2758.856284
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    base_exception_0 = module_2.BaseException()
    module_3.get_new_command(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    bytes_0 = b"\xe9X\x01"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_3.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    int_0 = 451
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    bytes_0 = b"m\xc0\xe8\x87\xa8|\x89\xca\xda{"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    bytes_0 = b"Z\xa0\x83\x8c;\x02\xfdv\r"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    list_0 = []
    none_type_0 = None
    module_3.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    str_0 = "dM4s(3XS."
    module_1.sub(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    bytes_0 = b"\xc2\x13C\xa4!a\xbfPq"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    none_type_0 = None
    dict_0 = {}
    module_0.EnumMeta(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    int_0 = -4642
    list_0 = [int_0, int_0, int_0]
    str_0 = "*vS6fHLAoOeZ"
    str_1 = 'Av\x0b"VJL#\r'
    dict_0 = {str_0: int_0, str_1: list_0}
    module_4.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    list_0 = []
    list_1 = [list_0]
    module_1.split(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    str_0 = "/18!KR4GPD4uQ#\x0ciR"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    int_0 = -1641
    int_1 = 2740
    module_3.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    int_0 = -2416
    module_1.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    str_0 = "/.kj{ZZNvF}\r9?x&mP1"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    int_0 = 2880
    module_1.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    str_0 = "g"
    none_type_0 = None
    module_1.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    bytes_0 = b"<}\xbb\x84\x8a"
    module_1.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    var_0 = module_1.purge()
    str_0 = "xw;>8=S"
    set_0 = {str_0}
    dict_0 = {str_0: set_0}
    module_0.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    bytes_0 = b"G\xb8\x85r\xdd-\xc5\x12\xd7\x99\xa7\xa8\x8b?\xa9\xdc\x1c\xa1\xf6"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    bool_0 = True
    module_1.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    none_type_0 = None
    module_1.compile(none_type_0)


def test_case_2750():
    dict_0 = {}
    auto_0 = module_0.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    int_0 = 2242
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    float_0 = 982.0
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_1.compile(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    float_0 = 4000.471
    error_0 = module_1.error(float_0, pos=float_0)
    none_type_0 = None
    module_1.sub(error_0, error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    int_0 = 824
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    var_0 = module_1.purge()
    base_exception_0 = module_2.BaseException()
    module_1.split(base_exception_0, base_exception_0)


def test_case_2756():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2757():
    float_0 = 2334.32068
    var_0 = module_1.purge()
    var_0.__len__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    exception_0 = module_2.Exception()
    float_0 = -334.2205
    module_1.subn(exception_0, exception_0, float_0)


def test_case_2759():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2760():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2762():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_1.sub(set_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    int_0 = 805
    module_1.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    bool_0 = False
    module_1.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_3.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    base_exception_0 = module_2.BaseException()
    module_1.search(base_exception_0, base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    complex_0 = 2284.0058 + 765.83j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    int_0 = 2733
    module_1.subn(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    bytes_0 = b"d\x89\xb5\xc7,w\x9e\x1fK\xe4]\xbf7\x9d\x08\x9e"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    list_0 = []
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    int_0 = -2553
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    none_type_0 = None
    str_0 = "mZk&lCpBro"
    var_0 = module_1.finditer(str_0, str_0)
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    str_0 = "%ijo"
    dict_0 = {str_0: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    none_type_0 = None
    bool_0 = True
    module_1.finditer(none_type_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2783():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    float_0 = -2141.6
    var_0 = module_1.purge()
    module_3.get_new_command(float_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    float_0 = 2260.26744
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    bytes_0 = b"\xe4b\xea\x1c\x89V\x90"
    list_0 = [bytes_0]
    none_type_0 = None
    module_1.template(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    str_0 = "%VOO.Bn-aQ$$XcU/I>Mm"
    var_0 = module_1.escape(str_0)
    module_3.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    float_0 = 465.1653
    list_0 = [float_0]
    module_3.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    bytes_0 = b"G\xbf\xae\x99^\xea,\r\xec\x0c\xe4\x1b\x94B"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    list_0 = []
    bytes_0 = b"t\xb52\x84>\xef\xa2\xaeL\xf9\xc6\x13\x91\xe1f\xbc\x8d"
    module_1.findall(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    int_0 = -2834
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2798():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    bytes_0 = b"\x04\xb1?\x91\x1e"
    int_0 = 3377
    list_0 = [bytes_0, int_0]
    str_0 = "1a?\x0bbJkSp\\tVP9d/XY"
    tuple_0 = (bytes_0, int_0, list_0, str_0)
    module_3.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2802():
    str_0 = "^154;TB^AB\x0cKmV;2gu"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    complex_0 = 3564.4716 + 4152.101617j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2806():
    str_0 = "^?-"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    int_0 = -3544
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    error_0 = module_4.Error()
    dict_0 = {}
    list_0 = [dict_0]
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    list_0 = []
    none_type_0 = None
    module_1.sub(list_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    str_0 = ';y1b"aA:<5^'
    dict_0 = {str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    str_0 = "\x0bhh\x0cOum {"
    set_0 = {str_0, str_0}
    module_3.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    complex_0 = 336.717422 + 4345.443j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    str_0 = "W"
    none_type_0 = None
    module_1.subn(str_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    var_0 = module_1.purge()
    str_0 = "*!?JSJx!\rk\x0b2I?B1"
    module_1.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    str_0 = "ln"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    int_0 = 2193
    none_type_0 = None
    module_1.findall(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    str_0 = "zp5]%4g@"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    tuple_0 = ()
    var_0 = module_1.purge()
    var_0.__setitem__(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    dict_0 = {}
    bytes_0 = b"7\xfai\x17\x84\xe1\x94\xceD\xaf\xe1\xf4\x82)\xe5W'\xc6"
    int_0 = -450
    tuple_0 = (bytes_0, int_0)
    tuple_1 = (dict_0, tuple_0, dict_0, dict_0)
    none_type_0 = None
    module_3.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    complex_0 = 700.3 - 2128.43j
    none_type_0 = None
    module_1.findall(complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    str_0 = "!k\nb.\x0bEA^J9=dt\\bobPP"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    str_0 = "b%D2ZWM"
    module_1.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    bool_0 = False
    module_1.subn(none_type_0, none_type_0, set_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    complex_0 = -3000 - 168.5426j
    module_1.split(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    str_0 = "C\\Z"
    list_0 = [str_0]
    list_1 = [list_0, str_0]
    error_0 = module_4.Error(*list_1)
    module_1.finditer(list_1, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    list_0 = []
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    str_0 = "?kFE"
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: str_0}
    none_type_0 = None
    module_3.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    int_0 = 1582
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    tuple_0 = ()
    module_1.subn(tuple_0, tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    int_0 = 1023
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    int_0 = 1222
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    none_type_0 = None
    int_0 = -566
    module_3.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    module_1.fullmatch(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    str_0 = "[73Xw? ]6$i}"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    int_0 = 2437
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    bytes_0 = b"\xafm\xde\xb2\xc6\xc3\x00\x86\xfc\x9c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    int_0 = 2307
    error_0 = module_1.error(int_0, pos=int_0)
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.split(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    float_0 = -536.577904
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    int_0 = -156
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    int_0 = 398
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bool_0 = True
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    tuple_0 = ()
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    dict_0 = {}
    module_1.split(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bytes_0 = b"\xdd"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    bytes_0 = b"\x1a\xf1\x1d6"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    var_0 = module_1.purge()
    float_0 = 2410.28707
    none_type_0 = None
    list_0 = []
    error_0 = module_4.Error(*list_0)
    module_1.subn(float_0, none_type_0, error_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    str_0 = "Ssxw1VptJJ8w"
    var_0 = module_1.escape(str_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    int_0 = -814
    module_1.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    str_0 = 'f#c*\x0cm&g[Aaa DP-w|"'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    tuple_0 = ()
    module_1.compile(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    bool_0 = False
    dict_0 = {}
    module_3.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    list_0 = []
    bool_0 = False
    module_3.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    str_0 = "TegIR'L,tlZ$c049F8"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    int_0 = 366
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    var_0 = module_1.purge()
    module_1.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    bytes_0 = b"\xc6W\xbb\xb7\xeaH"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    float_0 = -3059.38
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    bytes_0 = b"w>\x9b\x18\xb3"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    none_type_0 = None
    int_0 = -214
    str_0 = "R"
    tuple_0 = (int_0, str_0)
    module_3.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.search(dict_0, dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    float_0 = 2080.303149
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    var_0 = module_1.purge()
    module_1.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    float_0 = -3226.383
    none_type_0 = None
    module_3.match(float_0, none_type_0)


def test_case_2880():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2881():
    error_0 = module_4.Error()
    module_1.search(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    str_0 = "ds'+\x0cHFnx0$@\t"
    var_0 = module_1.search(str_0, str_0)
    tuple_0 = (str_0, var_0)
    module_1.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    set_0 = set()
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    bool_0 = False
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    bytes_0 = b"3\x14\x88\xdb-\xc3*\r\xf7\x12\xbf\xf8"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    int_0 = 2233
    none_type_0 = None
    module_1.split(int_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    float_0 = -1345.836
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    auto_0 = module_0.auto()
    var_0 = module_1.purge()
    var_0.__contains__(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    list_0 = []
    str_0 = "/vLsPTH4&\x0c|MuLS:.K"
    str_1 = '"c?~5PZ'
    dict_0 = {str_0: str_0, str_1: str_0, str_0: list_0}
    module_4.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    float_0 = 416.508
    dict_0 = {float_0: float_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    int_0 = -688
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    int_0 = -1052
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    bytes_0 = b"VI\x87\x1b\xcfX\xb4@B~\xc0\x93"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    int_0 = -1630
    module_1.sub(var_0, int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    complex_0 = -446.7961 + 565.693j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    float_0 = 487.2857
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    str_0 = "#\\"
    none_type_0 = None
    module_1.subn(str_0, str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    str_0 = "\x0cO$$K*BNSf+\t"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    bool_0 = True
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    var_1.__delattr__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2906():
    bytes_0 = b"\xcd\x08Wd\x839\xdd(\xd6\x81\x05 {\x95\x1c\x87\xc3il\xdd"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    bytes_0 = b"1F\xc8b\xb8"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    dict_0 = {}
    none_type_0 = None
    module_1.sub(dict_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    str_0 = "=$\\d-X\\DJ"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    bool_0 = False
    list_0 = [bool_0]
    module_1.subn(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bytes_0 = b"\x88\x87\xaf\xf3J\x87|\xec\xe3\x88"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    str_0 = "\x0b\t+#qy\t\\h@\n~:y!"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    str_0 = "5u5m"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    set_0 = set()
    module_1.finditer(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    float_0 = -1936.53
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    int_0 = -4084
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    int_0 = 2146
    list_0 = [int_0, int_0]
    module_1.finditer(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    complex_0 = -419.51 - 1199.985959j
    none_type_0 = None
    module_1.search(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    str_0 = "(Yd'$j"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    tuple_0 = ()
    module_1.template(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bytes_0 = b"\x08"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    str_0 = "J#ts"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    str_0 = "@GM:[4L*gD>MC:"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    int_0 = -1419
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    complex_0 = 1602 - 298.97701j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    int_0 = 4688
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    int_0 = 1329
    module_1.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    dict_0 = {}
    module_1.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    int_0 = 2810
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    float_0 = -972.240307
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    bool_0 = False
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2941():
    int_0 = -2871
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    int_0 = -3693
    module_1.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    str_0 = "c%YbYSz5"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    bytes_0 = b"r\xe2:\xe1\x8f\x95c\xf1J\xce!U<"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    dict_0 = {}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    int_0 = -682
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    int_0 = 1617
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    auto_0 = module_0.auto()
    module_0.unique(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    str_0 = "\nR] "
    module_1.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    str_0 = "0b\r "
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bytes_0 = b"\xf9\xd3,\xab?\xe60\x9f\xe7\xde"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    str_0 = "B<l"
    none_type_0 = None
    module_1.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    str_0 = "3adv"
    dict_0 = {str_0: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    str_0 = "0-cZ"
    list_0 = [str_0, str_0, str_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    str_0 = "yh\x0c6?"
    var_0 = module_1.subn(str_0, str_0, str_0)
    var_1 = var_0.__dir__()
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    int_0 = -812
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    bytes_0 = b"\xc3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = "G\x0b~Dv.P%`fL>"
    bytes_1 = b"\xba\x19\xa3\x0f\xae0\xdf!N\\\xeeq\xc0y\xf0\x0bs\xdfd\xf6"
    dict_0 = {str_0: bytes_1}
    module_4.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    set_0 = set()
    bytes_0 = b"\xb1\x81\x8dh\x1d"
    module_3.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    int_0 = -190
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    tuple_0 = ()
    module_1.sub(var_1, tuple_0, tuple_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    float_0 = -2757.49
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    dict_0 = {}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    int_0 = 849
    none_type_0 = None
    module_1.subn(int_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    var_0 = module_1.purge()
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    int_0 = -2649
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    str_0 = ",g2dD\tB#Iim;X"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    bytes_0 = b"\x11\xa9\xe7N\xc6\xf0g\xf4e]\x05\x8d\x8b\xb2"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_3.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    bytes_0 = b"n\r\xd6K\xb5]\xab\x04\x96\xdb\xbd\xe9\x92\xb8\xac\xb0=Ig\xad"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    int_0 = 2302
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, pos=none_type_0)
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    set_0 = set()
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    str_0 = "qbCnf?WYXXc"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    int_0 = -2830
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    str_0 = "\t"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    none_type_0 = None
    bool_0 = False
    module_3.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    int_0 = -292
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    str_0 = '"KL\n=#R\t.X@uST?<[NUt'
    module_1.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2994():
    int_0 = 2120
    dict_0 = {int_0: int_0}
    module_3.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    bytes_0 = b""
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    bytes_0 = b"B\xe5\xaf\xcf\xd3\xd7=\xdf0\xd4"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    int_0 = -2104
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    bytes_0 = b"\x9d\xee{/;\xde\n\xa9\x85\xf7"
    var_0 = module_1.search(bytes_0, bytes_0)
    bool_0 = False
    module_3.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    float_0 = 1967.3
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_3.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    int_0 = 1766
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    float_0 = 2698.99361
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    bytes_0 = b"D\xcc\nE\xf8\x18\x02v"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    dict_0 = {}
    auto_0 = module_0.auto(**dict_0)
    module_3.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    bytes_0 = b"\x05\xe3"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    complex_0 = -367.9 + 1759j
    module_1.match(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    str_0 = "+"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    var_0 = module_1.purge()
    bytes_0 = b"\x80}\xd7\t9K\xa2\xc2\xd7K$Y\x9e#A\r"
    module_1.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    str_0 = "~z./i!n4yD jtE"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.search(list_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    bytes_0 = b"\xb1\x07Q\x14 \xd6"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    exception_0 = module_2.Exception()
    error_0 = module_1.error(exception_0)
    module_3.match(error_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    int_0 = 4875
    module_1.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    bytes_0 = b"\x96\xa2\xc2S~\x06\xb9I\xc4\x88\r\x15+"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    exception_0 = module_2.Exception()
    int_0 = 2417
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    str_0 = "GT|O4d76T#,qbI]["
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    object_0 = module_2.object()
    none_type_0 = None
    module_1.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    float_0 = -2128.0
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    bytes_0 = b"\x1e\nfp!\x94"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    float_0 = -1732.08281
    module_3.match(float_0, float_0)


def test_case_3026():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3027():
    regex_flag_0 = module_1.RegexFlag.TEMPLATE
    module_3.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    int_0 = 1980
    var_0 = module_1.purge()
    var_0.__len__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    bytes_0 = b"\xe1E"
    var_0 = module_1.template(bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    complex_0 = -2201.00809 - 4036.2692j
    list_0 = [complex_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    int_0 = -2861
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    dict_0 = {}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    str_0 = "#P^^h gj#0"
    none_type_0 = None
    module_1.fullmatch(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bytes_0 = b"j[Sr\xca\xa5\x03\r\x1d\xa6\xb31\xeb\r\x19Z"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3036():
    int_0 = 1929
    module_1.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    str_0 = "c#\nW\x0b"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    var_0 = module_1.purge()
    module_1.search(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    bytes_0 = b"~~F\xdeT\x15\xb0K\xfd\x84\xb7?\xe6E\xb9"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    float_0 = 2531.41
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    int_0 = -64
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    int_0 = 479
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    int_0 = -519
    bool_0 = True
    module_3.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    bool_0 = True
    none_type_0 = None
    module_1.sub(bool_0, bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3048():
    float_0 = -916.87965
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    bool_0 = True
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    list_0 = []
    module_1.split(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_1]
    none_type_0 = None
    module_3.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    int_0 = -2213
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    str_0 = "fj<j7)"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    int_0 = 3058
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    bytes_0 = b"\xebQ\x8d\xb5,\x9c',\xca\x87\xbe\xa2\x15\xa0n\xa7\x92*\xfe\xbe"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    var_0 = module_1.purge()
    bytes_0 = b""
    var_1 = module_1.search(bytes_0, bytes_0)
    var_1.__len__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    exception_0 = module_2.Exception()
    none_type_0 = None
    module_3.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    var_0 = module_1.purge()
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    str_0 = "0fRU{Cv3p7iH%\t"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    set_0 = set()
    module_1.finditer(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    bytes_0 = b"n\x9f\xc6\xcb\x0b\xe4\xde\xa5\xeb\xf6\x8e1\x8a\x0e1\xf5<\xaa"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    int_0 = -1517
    tuple_0 = (int_0,)
    none_type_0 = None
    module_3.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    bytes_0 = b"\x0c\xf3\xfc\xbb\x0c\xf30\xf0@"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    str_0 = "8*DFl.9e"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    str_0 = "iqIZeFSH1eM"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    int_0 = 1889
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    bytes_0 = b"\xd6\x98\xe2\x13\xb7"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    bytes_0 = b"*\xa4uO)8\x1eH`\xd0\xb8"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    float_0 = 1750.86601
    list_0 = [float_0, float_0, float_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    str_0 = "\nkM.ShPt0cGK;"
    set_0 = {str_0}
    none_type_0 = None
    module_3.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    str_0 = "\x0c}]c\x0c2`kMw.:'8KI@j"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    none_type_0 = None
    complex_0 = 205 + 1566.1738j
    module_3.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    str_0 = "VC-\x0bX0r,K$PJ!;D/"
    str_1 = "/=\x0bQ+@cM~mYtVg"
    str_2 = ";a"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_0.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    list_0 = [regex_flag_0, regex_flag_0, regex_flag_0, regex_flag_0]
    none_type_0 = None
    module_3.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    float_0 = 2682.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    int_0 = 1899
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    int_0 = -18
    set_0 = {int_0, int_0, int_0, int_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    str_0 = "3oYn\tt8`kt3"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    float_0 = 1103.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    str_0 = "_\x0b #t\\EGR\rqp7GU"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    int_0 = 2120
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    var_0 = module_1.purge()
    tuple_0 = ()
    module_1.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    str_0 = "i;Q4-\t!^\x0bP<3Z"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    int_0 = -1911
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    dict_0 = {}
    module_1.search(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3102():
    exception_0 = module_2.Exception()
    set_0 = set()
    module_1.match(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    int_0 = -884
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    int_0 = 4384
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    str_0 = '}"U'
    error_0 = module_1.error(str_0)
    int_0 = 1209
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    int_0 = 1104
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    bytes_0 = b"[=X\xa8\x07\x0c\x89\xc0"
    var_0 = module_1.purge()
    var_0.__repr__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    float_0 = -3910.2153
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    complex_0 = 1775.63892 - 146.1j
    none_type_0 = None
    module_1.search(complex_0, complex_0, none_type_0)


def test_case_3114():
    none_type_0 = None
    bool_0 = True
    bytes_0 = b"\xa6\xe4\x95Y\x0f\x0e.\twvW"
    var_0 = module_1.compile(bytes_0)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    none_type_0 = None
    bytes_0 = b"\x92y\x15\x9aR\xf4\x9a@\xa4\x06\xdb\x17\xdfw`\x15\t\xe3\x9d"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    base_exception_0 = module_2.BaseException()
    module_1.finditer(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    none_type_0 = None
    list_0 = []
    module_3.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    error_0 = module_4.Error()
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    str_0 = "jZmwL"
    str_1 = "O~ZJ"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_2.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    str_0 = "@Di]mKQ!Bi;!UtGR[I1S"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    bytes_0 = b"\xd0H\xe9\x9f\x0c\xfb\x9b\x99\xa7S>\xe8\xb3\x05\x0c\x1a"
    module_1.split(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    str_0 = "\x0cHQ#t&LC<"
    none_type_0 = None
    module_1.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    exception_0 = module_2.Exception()
    module_1.template(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    base_exception_0 = module_2.BaseException(*list_0)
    module_3.match(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    set_0 = set()
    tuple_0 = (set_0,)
    module_3.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    int_0 = -4588
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0, var_0, var_0)


def test_case_3129():
    int_0 = -1543
    bytes_0 = b">\xe9\x89\xe0\xac\x9dx\t/\xa1\xa3\xba\x9dB\x98\xc5\xdc\xd9\x88\x9d"
    var_0 = module_1.subn(bytes_0, bytes_0, bytes_0)
    with pytest.raises(TypeError):
        var_0.__new__(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    bytes_0 = b"O\xfa\xf7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    int_0 = -66
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    str_0 = "\r6Y"
    list_0 = [str_0]
    module_0.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    int_0 = 1171
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    none_type_0 = None
    module_3.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    bytes_0 = b"\xb9@\x81\x02/\x0b,\x81"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_3.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    str_0 = "6yM._,Ws!jy=k?_C\t"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    bytes_0 = b"\xdc1\xe1st]\xa9\xd2\xae\xe0\xf8\xe3^\xca]\x93\ru\xd2"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    float_0 = -669.5
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = None
    module_1.Scanner(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    dict_0 = {}
    tuple_0 = ()
    module_3.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    none_type_0 = None
    set_0 = set()
    module_3.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    error_0 = module_4.Error()
    module_3.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    int_0 = 2506
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    dict_0 = {}
    error_0 = module_4.Error(**dict_0)
    module_0.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    complex_0 = 1559 - 419.4287j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    bytes_0 = b"\xaf\x9a?{;"
    var_0 = module_1.compile(bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    int_0 = -1271
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    none_type_0 = None
    module_1.Match(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    var_0 = module_1.purge()
    module_1.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    complex_0 = -805 + 205.711j
    none_type_0 = None
    module_1.findall(complex_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    str_0 = "TJ4xIjMCX)x&\\Y]\n\nM9 "
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    complex_0 = 930 - 513.449j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    float_0 = -464.94
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    str_0 = "j"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    dict_0 = {}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    int_0 = 49
    list_0 = [int_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    bytes_0 = b"\xb8\xca|\xb9\xc8B"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    bytes_0 = b"~\xe0\xc2`\xa4C\xe9\xc66[\x19\xb1_\x97C"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    bool_0 = False
    var_0 = module_1.purge()
    var_0.__contains__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    int_0 = -702
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    str_0 = "W}]lBp<4"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    str_0 = "n2G]$/PY,\rDu>Bq{[s"
    set_0 = {str_0, str_0, str_0, str_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    bool_0 = True
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    none_type_0 = None
    bytes_0 = b"\x94Z\x8f"
    module_1.match(none_type_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    bytes_0 = b"l\xd3\xa0\x01y\x13\x16"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    int_0 = -1753
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_1.findall(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    complex_0 = 1419.3 - 1364j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_3181():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3182():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    str_0 = "K'jG-1F|3vC{|"
    dict_0 = {str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    float_0 = -751.45
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    complex_0 = -916.542101 + 1531.7j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    bool_0 = False
    bool_1 = False
    module_1.fullmatch(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    error_0 = module_4.Error()
    dict_0 = {error_0: error_0, error_0: error_0, error_0: error_0}
    module_3.match(dict_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    float_0 = -1304.32
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    int_0 = -2263
    set_0 = {int_0}
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    str_0 = "}ur?u\x0c)k"
    list_0 = [str_0]
    none_type_0 = None
    module_3.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    str_0 = "HG1ZH aWIb|Hbik9|y"
    none_type_0 = None
    module_1.compile(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    bytes_0 = b"\xa7\xd7\xa8\xe2w\xa3"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    int_0 = -87
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    float_0 = -1027.8209
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_3.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    str_0 = "aW'f\tP6pFsFF"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    str_0 = "C*"
    var_0 = module_1.finditer(str_0, str_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    float_0 = -1658.2541
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    bool_0 = True
    str_0 = "pdx"
    var_0 = module_1.escape(str_0)
    var_1 = module_1.search(var_0, var_0)
    var_1.scan(bool_0)


def test_case_3204():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3205():
    bytes_0 = b"%C\xfab\xcb\xc5\x8f\x80\xf7\xe7\xeb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    bytes_0 = b"k,\x0b\xa1\xc8\x91\x07H\xf4!\xc5^\xf5\xb7\x19\x08\x9b\x9f\xbe"
    module_1.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    float_0 = -27.8
    none_type_0 = None
    error_0 = module_1.error(float_0, pos=none_type_0)
    module_3.match(error_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    int_0 = 2821
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


def test_case_3210():
    enum_dict_0 = module_0._EnumDict()


def test_case_3211():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3212():
    int_0 = -950
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    enum_dict_0 = module_0._EnumDict()
    module_1.findall(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    dict_0 = {}
    exception_0 = module_2.Exception(**dict_0)
    module_1.search(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    set_0 = set()
    module_1.compile(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    int_0 = 4589
    str_0 = "r4Y|"
    dict_0 = {int_0: int_0, int_0: str_0}
    module_3.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    int_0 = 144
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    complex_0 = -3859.977 - 1274.63972j
    none_type_0 = None
    module_3.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3226():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = None
    module_3.match(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    float_0 = 2044.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    str_0 = "thbw:G1DzQm"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    complex_0 = -614.16 - 5114.5526j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    error_0 = module_4.Error()
    regex_flag_0 = module_1.RegexFlag.ASCII
    float_0 = 1220.921925
    module_1.findall(regex_flag_0, float_0)


def test_case_3233():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3234():
    float_0 = 651.32
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    module_1.match(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    int_0 = 356
    list_0 = [int_0, int_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    complex_0 = 3674.3317 + 1680.3j
    module_1.sub(complex_0, complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    str_0 = "Pwg\x0cD9E3'"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    bool_0 = False
    int_0 = 460
    dict_0 = {bool_0: bool_0, int_0: int_0, int_0: bool_0, bool_0: int_0}
    module_3.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    str_0 = "B<xJXsdVDZ"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    float_0 = -491.5493
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3244():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3245():
    none_type_0 = None
    bytes_0 = b""
    module_1.match(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    str_0 = "D?"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    bytes_0 = b"\xfdF\xc0u\xa3\xa2S\xe8T\x9e\xe3"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    object_0 = module_2.object()
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    complex_0 = -1758.409 - 1152j
    none_type_0 = None
    module_1.match(complex_0, none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    str_0 = "e\\.hfcN#8sB2"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    object_0 = module_2.object()
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0, none_type_0)
    none_type_1 = None
    module_1.match(none_type_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    int_0 = -3273
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    float_0 = -3801.04314
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    int_0 = -1138
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    bool_0 = False
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_3.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    complex_0 = 1330.27 + 341.309258j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    float_0 = 4741.2834
    set_0 = {float_0, float_0, float_0, float_0}
    module_1.finditer(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    complex_0 = -2162 + 1303.19j
    module_1.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    float_0 = 1775.6
    tuple_0 = (float_0,)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    bytes_0 = b"o\x92S\xc4\x12\xcc\x02\xbb\xbc\xf8\x0c\xa5\xb3"
    var_0 = module_1.compile(bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    regex_flag_0 = module_1.RegexFlag.ASCII
    none_type_0 = None
    module_1.split(regex_flag_0, regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    complex_0 = 68.769 - 384.2j
    none_type_0 = None
    module_1.search(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    bytes_0 = b"\xf7r#\xecS\xa7\x84%\xab\r[\xf9\xe3\xa6\xe1\x82\xc0`#n"
    bytes_1 = b""
    var_0 = module_1.fullmatch(bytes_1, bytes_1)
    var_0.__call__(bytes_0, bytes_0, type=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    bool_0 = True
    module_1.split(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    bytes_0 = b"\x91A\x99\x07P\xdf\x17\x02T\t%(\x7f\xef"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    int_0 = -271
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    bytes_0 = b"\xc6)Z1c\xdf\x88j\xa6\xda_F\x9aR\xc3"
    var_0 = module_1.escape(bytes_0)
    var_1 = var_0.__dir__()
    module_3.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    base_exception_0 = module_2.BaseException()
    module_1.split(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    complex_0 = 1345.9703 + 275.5347j
    none_type_0 = None
    module_3.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    bytes_0 = b'\x8d\xa2\xba\xc1\xfe\x0e\xc1N"QX{T2'
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    complex_0 = -970.93952 + 777.345j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    int_0 = 1330
    int_1 = -813
    tuple_0 = (int_0, int_1, int_1)
    module_3.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    var_0 = module_1.purge()
    list_0 = [var_0]
    module_0.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    int_0 = -1329
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3283():
    str_0 = "/.}"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_2.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    var_0 = module_1.purge()
    float_0 = 1203.23786
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    none_type_0 = None
    tuple_0 = ()
    module_1.subn(none_type_0, none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    float_0 = -429.0
    module_1.sub(float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    int_0 = 2908
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    int_0 = -958
    none_type_0 = None
    module_1.sub(int_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    float_0 = 1937.2249
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    float_0 = -462.1
    list_0 = [float_0, float_0, float_0, float_0]
    module_3.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    str_0 = "_3K)~ql(:vcLY*<&5f"
    list_0 = [str_0, str_0]
    module_1.fullmatch(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    str_0 = "@"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    str_0 = "dHgA+|Mh48iIs-hAnG&a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_2.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    bytes_0 = b"\x8f\x08\x96$\xeb\x8d\xceA\xb7\xf9\x01\xc3^"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    int_0 = 793
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    bytes_0 = b"\xc6'2Z7\x18mZ\xec\xa2E\r"
    var_0 = module_1.findall(bytes_0, bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    none_type_0 = None
    module_0.EnumMeta(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    list_0 = []
    bool_0 = True
    bytes_0 = b"\x98\x02\xd2M\xc4\xc7\x8cD\xc0"
    tuple_0 = (list_0, bool_0, bytes_0)
    module_0.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    float_0 = -664.491845
    module_1.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    str_0 = "z3g$BwjVOte^N'\n"
    module_1.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    int_0 = 565
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_3.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    bytes_0 = b"\xae\x9e\xca\x08\xe06\x93\xa5\x8d\xe9w\xb3\x91\x90\xa0\x88"
    none_type_0 = None
    module_1.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    float_0 = -1109.203444
    tuple_0 = (float_0,)
    list_0 = [tuple_0, tuple_0, float_0]
    exception_0 = module_2.Exception(*list_0)
    dict_0 = {exception_0: tuple_0, tuple_0: exception_0, float_0: exception_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3309():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    bytes_0 = b"\xcd\xce\x0e\x89\xdeO-7\xc7M"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    str_0 = "La,nJ/p"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    int_0 = 999
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    int_0 = 288
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    float_0 = 3305.515
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    str_0 = "Qen1T,\r\rRn"
    module_1.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    str_0 = "lQ+"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    int_0 = -5001
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    bool_0 = True
    list_0 = [bool_0]
    exception_0 = module_2.Exception(*list_0)
    none_type_0 = None
    module_3.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    int_0 = 16
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    str_0 = "6Qg;qh',Bz"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    complex_0 = -551.15 - 2803.9543j
    module_1.subn(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    str_0 = "W"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    bytes_0 = b"\x19\xb8"
    var_0 = module_1.split(bytes_0, bytes_0)
    module_1.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    bytes_0 = b"\x82\xb6\xc5\xd5r\x1a\xf6K\x18\xb4\xdb\x12\xb1\x89\xbf\xa5"
    var_0 = module_1.split(bytes_0, bytes_0)
    module_1.subn(var_0, var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    int_0 = -1571
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3329():
    str_0 = "aJ3\nRY0%"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    int_0 = 3605
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    var_0 = module_1.purge()
    module_1.finditer(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    int_0 = -131
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    auto_0 = module_0.auto()
    module_1.Match(**auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    bytes_0 = b""
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    float_0 = 613.0
    module_1.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    str_0 = ",|X"
    list_0 = [str_0, str_0, str_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    int_0 = -230
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    bytes_0 = b"\x11~\xecV\xec5"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    bytes_0 = b"\xb5D\xc5\xc2%\x0e_*"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    list_0 = []
    str_0 = '@H"}#FF0B|Xjhf'
    dict_0 = {str_0: list_0}
    module_0.auto(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    bool_0 = False
    none_type_0 = None
    module_3.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    enum_dict_0 = module_0._EnumDict()
    bool_0 = True
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    complex_0 = -1366.16 + 830.55j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    int_0 = -2727
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    int_0 = 1137
    set_0 = {int_0, int_0, int_0}
    module_3.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    str_0 = 'SQ(#|0or&P@h"N![sX0'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    module_3.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    int_0 = -859
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    str_0 = "5Icq"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    float_0 = -3159.337
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    none_type_0 = None
    module_0.EnumMeta(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bool_0 = True
    var_0 = module_1.purge()
    module_3.get_new_command(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    float_0 = 542.711823
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    list_0 = []
    module_1.compile(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    int_0 = 1855
    str_0 = "&^;s)OnU"
    set_0 = {int_0, str_0}
    tuple_0 = (int_0, str_0, set_0)
    module_3.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    bool_0 = True
    str_0 = "g,Mj"
    module_3.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    str_0 = "S)PU|\tkT\n\x0b8z+"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.Error(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__getitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    str_0 = "AuAM3_FuyEt2+C(x6F-_"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_3.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    int_0 = -1086
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    int_0 = 4801
    int_1 = -806
    module_1.findall(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    int_0 = 1102
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    bytes_0 = b"H\xe0g%u\x92^"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    int_0 = -2781
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    str_0 = "\x0bi?\x0c`%EkGO!8)sQ~_u"
    int_0 = -317
    module_3.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.scan(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    int_0 = -861
    tuple_0 = (int_0,)
    module_1.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    complex_0 = 1130 - 662.44j
    module_1.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    float_0 = 697.33245
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    bytes_0 = b"$V\x1e\xa0Ox\x91\xa7\xee\xb0\x9e\xc2F\x1b\xa3J\xd2"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    complex_0 = 242.5 - 1028.77j
    str_0 = "u*[|6\x0c\n/c7\r8ep]{_\x0bx"
    module_3.match(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    float_0 = 2147.53
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_0, bool_0, bool_1, bool_1}
    module_3.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    str_0 = ""
    var_0 = module_1.template(str_0)
    module_3.match(var_0, var_0)


def test_case_3392():
    var_0 = module_1.purge()


@pytest.mark.xfail(strict=True)
def test_case_3393():
    list_0 = []
    bytes_0 = b'"\xb4&q{\xf5T\xe9\x89\x8c\xc4m'
    float_0 = 491.340202
    tuple_0 = (bytes_0, float_0)
    list_1 = [list_0, tuple_0, list_0]
    module_3.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    float_0 = -449.58
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    bytes_0 = b"\xb9$\x01#\xf1\xe0B\xcdB \xaf\xc1V\r\x13\xf5"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    str_0 = ")7aq#\ry\x0cW;f3B"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    int_0 = -451
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    bytes_0 = b"YB\x86`\x7fk\x85\xd9\x915\x04\x9b\\\x85\xf6\x0c\xb92"
    set_0 = {bytes_0, bytes_0}
    var_0 = module_1.purge()
    var_0.scan(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    bytes_0 = b"\xc8S\x7f\x8d\x1dp"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    bytes_0 = b"Jk\xb8\n-R\xee\xc2\x18\xe1\x18\x14\x10\xd7"
    set_0 = set()
    module_3.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_3.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    bytes_0 = b"\xe8`V"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    bytes_0 = b"\xca\x1d\x85\xe5"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    int_0 = -106
    set_0 = {int_0}
    module_1.split(set_0, set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    str_0 = "y{MAD"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    bytes_0 = b"\x9c]\xd6\xfe\x98\x89"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    var_0 = module_1.purge()
    tuple_0 = (var_0,)
    module_1.match(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    bytes_0 = b"\xaf\xb70\xf4\xe6\xb8\xb8\xf5"
    var_0 = module_1.sub(bytes_0, bytes_0, bytes_0)
    var_1 = module_1.search(var_0, var_0)
    module_3.get_new_command(var_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    int_0 = 1358
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    float_0 = -3886.769382
    error_0 = module_1.error(float_0)
    list_0 = [error_0]
    module_3.get_new_command(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    float_0 = -290.839397
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    none_type_0 = None
    module_1.compile(none_type_0)


def test_case_3424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3425():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3427():
    int_0 = 348
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    str_0 = "ef0"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3431():
    bytes_0 = b"\xf91\xcc\xda%\xfd\x90\x0c\x13s_;\xf3\x91#\n"
    var_0 = module_1.search(bytes_0, bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    enum_dict_0 = module_0._EnumDict()
    list_0 = [enum_dict_0, enum_dict_0]
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    var_0 = module_1.purge()
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    bytes_0 = b"&\xee2\xb9\xf3\x10"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    int_0 = 1459
    tuple_0 = (int_0,)
    set_0 = {tuple_0, tuple_0}
    module_1.fullmatch(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    str_0 = "j 7?udr)m#07MuU8o"
    module_1.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    var_0 = module_1.purge()
    set_0 = {var_0}
    module_3.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    str_0 = "1Ww=*@WUWd)7\rJJb"
    module_1.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    bytes_0 = b"_\x7f,!"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    error_0 = module_4.Error()
    str_0 = "6Ez[;/4X"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    bytes_0 = b"\xa2A\xa4"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    exception_0 = module_2.Exception()
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    int_0 = 325
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    list_0 = []
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    str_0 = "!2lG0WE"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    int_0 = 1311
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    bytes_0 = b"\xf5#7\xb0\x82.Sn\x9e\xda\x88\xef"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    float_0 = 1211.578622
    dict_0 = {float_0: float_0, float_0: float_0}
    module_1.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    str_0 = 'g2|"'
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    int_0 = 748
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    float_0 = -522.8001
    module_1.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    str_0 = "[6%qaADeE"
    none_type_0 = None
    module_1.search(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3460():
    int_0 = -2812
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.fullmatch(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    bool_0 = True
    tuple_0 = ()
    module_3.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    int_0 = 1743
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3467():
    int_0 = 710
    list_0 = [int_0, int_0, int_0]
    module_3.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    float_0 = -561.23
    error_0 = module_1.error(float_0)
    none_type_0 = None
    module_1.subn(error_0, error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bytes_0 = b"\xc9e8\xa8\x0c"
    module_4.Error(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    str_0 = "ki4I"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    bytes_0 = b"\xbc~\x00"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3475():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3476():
    set_0 = set()
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    error_0 = module_4.Error()
    int_0 = -1298
    none_type_0 = None
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    float_0 = 36.2
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    bytes_0 = b"\x82\xde\x84\xb6\xea%"
    none_type_0 = None
    var_0 = module_1.escape(bytes_0)
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    int_0 = -5
    module_1.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    bytes_0 = b"\xbc\xa7&\x81e\xcd.r\x9d\xe9\x14@\xb5\xaf\xba"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    str_0 = "fa\toPSfax|AL'O"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    complex_0 = -2874.88596 - 2184.077j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    int_0 = -2026
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    int_0 = -2211
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    int_0 = -462
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    complex_0 = 1409.928 + 4070j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    none_type_0 = None
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    var_1.__call__(
        none_type_0,
        none_type_0,
        none_type_0,
        qualname=none_type_0,
        type=none_type_0,
        start=none_type_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_3492():
    var_0 = module_1.purge()
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    str_0 = "E\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    bytes_0 = b"&\xe3"
    none_type_0 = None
    module_1.split(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    none_type_0 = None
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    int_0 = 2303
    list_0 = [int_0, int_0, int_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    complex_0 = 85.484 - 413.37j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    object_0 = module_2.object()
    module_1.escape(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    error_0 = module_4.Error()
    none_type_0 = None
    module_1.sub(error_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    bytes_0 = b"\x9b\xa3(\x96\xf5j\x93\x14#"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3505():
    bytes_0 = b"\xbe\xb0\xf3\xd9R\x06\xb0k"
    bytes_1 = b"\xc9\xffR_A\xfd\x17l\x0eK"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_1]
    module_3.match(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    bytes_0 = b"\xb8B\x9b\xdd\x06[\x07]{\xd6\xdc\x18?\x130\xde\xbfV"
    list_0 = [bytes_0]
    none_type_0 = None
    module_3.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    bytes_0 = b"\xb7\xb2\xe1\xce\x0f\x03\x82"
    none_type_0 = None
    module_1.subn(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    exception_0 = module_2.Exception()
    list_0 = []
    list_1 = [exception_0, list_0, list_0, list_0]
    module_0.EnumMeta(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    str_0 = "*\x0bu."
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3513():
    bytes_0 = b"\x9e\r\xa1v"
    tuple_0 = (bytes_0,)
    module_1.subn(tuple_0, bytes_0, bytes_0, tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    int_0 = -1461
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    str_0 = "/pO*p1N}Fhx|J"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_3.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    module_1.fullmatch(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    int_0 = 6243
    str_0 = "#fX'dCd-"
    module_3.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    none_type_0 = None
    bytes_0 = b"j\xa1\xc1\xfc\xec\x08%\xa1m\xea\xc3F\xbby"
    module_3.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    var_0 = module_1.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    float_0 = 1471.08803
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    str_0 = "d]\x0c+"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0]
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3525():
    int_0 = 977
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    int_0 = -2706
    list_0 = [int_0, int_0, int_0]
    float_0 = 439.9
    module_3.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    bytes_0 = b"6V\xd7W\x12\xbe-"
    var_0 = module_1.escape(bytes_0)
    int_0 = 2913
    none_type_0 = None
    var_1 = module_1.purge()
    var_1.__delattr__(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    set_0 = set()
    none_type_0 = None
    module_1.sub(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    int_0 = -580
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    bytes_0 = b"\xce\xf4M\xf1\x1aE\x15\x96\x19\xbd\x05\x84AS28\xc8`V\x01"
    module_3.get_new_command(bytes_0, bytes_0)


def test_case_3531():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3532():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    bool_0 = True
    module_1.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    str_0 = "L)`C\tS27~L\\Z"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    regex_flag_0 = module_1.RegexFlag.DOTALL
    module_1.template(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    float_0 = -1771.0308
    dict_0 = {float_0: float_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    int_0 = 1067
    set_0 = {int_0, int_0, int_0}
    str_0 = ",4qjE"
    var_0 = module_1.sub(str_0, str_0, str_0)
    var_0.__getitem__(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    int_0 = 3867
    module_1.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    int_0 = -1944
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    str_0 = '-1oX~U++."i'
    var_0 = module_1.escape(str_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    str_0 = ".\t2Ut:xb9> O4~&"
    bool_0 = True
    float_0 = -748.18419
    bytes_0 = b"\xe1.\xa1Q\x02W\x82\xdf\x0b\x8e*"
    dict_0 = {str_0: bool_0, bool_0: bool_0, str_0: float_0, bytes_0: bool_0}
    module_3.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    var_0 = module_1.purge()
    tuple_0 = (var_0, var_0, var_0, var_0)
    module_3.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    int_0 = -2743
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    base_exception_0 = module_2.BaseException()
    none_type_0 = None
    module_3.get_new_command(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    float_0 = -1115.02
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    bytes_0 = b"\xe2\x7f\xd7\x9a"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    set_0 = set()
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    float_0 = -693.942563
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    int_0 = 105
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    bool_0 = False
    none_type_0 = None
    module_1.match(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    bool_0 = True
    error_0 = module_1.error(bool_0)
    module_3.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    tuple_0 = ()
    module_1.subn(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    var_0 = module_1.purge()
    module_1.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    bytes_0 = b"\xc5\xb3\xe1U\xb3p"
    var_0 = module_1.template(bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    exception_0 = module_2.Exception()
    module_1.compile(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    int_0 = 547
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_1.error(none_type_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    float_0 = 2515.0
    list_0 = [float_0, float_0, float_0]
    module_1.Scanner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    bytes_0 = b"(\x0b\xb9\x03="
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    bool_0 = True
    none_type_0 = None
    module_1.compile(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    bytes_0 = b"\xd4\x04/t"
    none_type_0 = None
    module_1.sub(bytes_0, none_type_0, bytes_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bool_0 = True
    tuple_0 = ()
    bytes_0 = b"Yc[\xd7\x1bZ\xe0\x86y\x8c\xd9C\n\xaaCS"
    module_1.sub(bool_0, bool_0, tuple_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    complex_0 = -2114.911 - 63.17019j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    str_0 = "nGw'Z)+\r]Q\"u<#x8B|;"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    float_0 = 3085.8
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    str_0 = "hGXvYTvSj"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    int_0 = 188
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    var_0 = module_1.purge()
    module_1.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    bytes_0 = b"\xee`\xbd\n.\x1e\xc0"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    float_0 = 2495.3753
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    bytes_0 = b"\xc5\xeb\r\x16\xe8W\xba\xd1\xc5\xee\xb1\xf8\x11\xde\xec\xba"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    int_0 = -303
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    float_0 = -1759.955209
    module_1.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    int_0 = -3498
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    str_0 = "(&Wys"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    var_0 = module_1.purge()
    var_0.__repr__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    float_0 = -370.4789
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    float_0 = -315.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    bytes_0 = b"4o\xba\x10\xa3"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    error_0 = module_4.Error()
    var_0 = module_1.purge()
    set_0 = {error_0, var_0, var_0, var_0}
    module_3.get_new_command(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    bool_0 = False
    module_1.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    none_type_0 = None
    int_0 = 2530
    module_3.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    bytes_0 = b"\xbb\xf8\x05\x17\x19\xd1\x03\xa5\x07l\xeb;\xd3\x14\x97"
    var_0 = module_1.sub(bytes_0, bytes_0, bytes_0)
    tuple_0 = (var_0, var_0, var_0)
    module_3.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    str_0 = "@ L^zrAfI.g7zc}"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    int_0 = 353
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    none_type_0 = None
    int_0 = 2516
    module_3.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = 'sf%?S"1w?iy>/'
    str_1 = "P 1"
    str_2 = ""
    str_3 = "rfmP/No1'`[P)"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_3: bool_0}
    module_4.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    str_0 = "tF6^{O-"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    str_0 = "c+o\\)hnee\t]qil`S}"
    var_0 = module_1.split(str_0, str_0)
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    bytes_0 = b"\xa9\x11\x17\x82\x80\xf1I\xeb\x1eH\xaar\xc6@"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    int_0 = -1231
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    int_0 = 332
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bool_0 = True
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    int_0 = -4341
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    int_0 = -4699
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    int_0 = -1272
    set_0 = {int_0, int_0}
    list_0 = [set_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    float_0 = -804.264425
    module_1.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    int_0 = 2066
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    bytes_0 = b"\xe9\xf2H"
    var_0 = module_1.compile(bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bool_0 = True
    bytes_0 = b"\x8b\xb8\xbfr\xb0\xb6\xb6"
    module_1.split(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3627():
    int_0 = 1086
    none_type_0 = None
    module_1.search(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    str_0 = "\r$F"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    str_0 = "8JEeH7H1x%zkg'$ms7"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    bytes_0 = b">/Z:\x12g\x8b\x82"
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    var_1.scan(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    bytes_0 = b"\xf3\"\x81U\xa2\x10\x99\xbf\xe2\x85X'\x8f\x8a\xbe\xae\x03\xf7\xce,"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    list_0 = []
    object_0 = module_2.object(*list_0)
    module_3.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    float_0 = 250.0
    module_1.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    error_0 = module_4.Error()
    int_0 = -2323
    module_1.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    complex_0 = -2128.466508 + 4297.602j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    int_0 = -1459
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    none_type_0 = None
    module_4.Error(*none_type_0, **none_type_0)


def test_case_3642():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3643():
    var_0 = module_1.purge()
    str_0 = "qd2s^N?t-N"
    str_1 = "%>"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    none_type_0 = None
    complex_0 = -2113.9 + 391.573814j
    module_1.findall(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    int_0 = -2219
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    module_1.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    int_0 = 1602
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    str_0 = "b@\\pT`U4fy\ndeiIx''A^"
    none_type_0 = None
    module_1.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    str_0 = "<[1?Zm\r{z]"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    bool_0 = True
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    float_0 = -5003.05
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    int_0 = 891
    module_1.finditer(int_0, int_0, int_0)


def test_case_3658():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3659():
    int_0 = 1232
    none_type_0 = None
    module_1.split(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    int_0 = 2173
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    str_0 = "|\rvUAmW0\r%PuX(-"
    var_0 = module_1.purge()
    var_0.scan(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    int_0 = -1464
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    bytes_0 = b"\xeb\xddF\xdf=\x05\x16\xd6\xe6\x05\x8d\xeas\x15\x1643\x84"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    dict_0 = {}
    module_1.findall(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    str_0 = "i;Tf^k qPINniM|SzJ"
    var_0 = module_1.purge()
    var_0.__contains__(str_0, str_0)


def test_case_3667():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3668():
    bytes_0 = b"k\xe5e"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    str_0 = "$`A~p/<n7?TDqHOT^N7S"
    var_0 = module_1.findall(str_0, str_0)
    module_1.subn(var_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    complex_0 = -3257.28 + 1940.5j
    module_0.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    bool_0 = False
    none_type_0 = None
    module_1.search(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    int_0 = 1527
    none_type_0 = None
    module_1.split(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    none_type_0 = None
    str_0 = 'X~qVfcl&5"euFZ1'
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_0.EnumMeta(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    str_0 = "t$>g>i5Id\\{O)\x0cd"
    module_1.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    str_0 = "PgGy$0x9="
    none_type_0 = None
    module_1.split(str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    str_0 = "@9#q\\V@\tOhw540+Hd?"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    str_0 = "P/6S1V9V\t(["
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    int_0 = -3483
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    bool_0 = False
    module_0.unique(bool_0)


def test_case_3686():
    bool_0 = True
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    var_0 = module_1.purge()
    dict_0 = {}
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    list_0 = []
    list_1 = [list_0, list_0]
    module_1.match(list_1, list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    none_type_0 = None
    str_0 = "\\"
    dict_0 = {str_0: none_type_0}
    module_0.EnumMeta(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    bytes_0 = b'o,\xca\xfe.K\x06`\x9f\xf5L\xba\xd0\xf5\xa6\xca\xb2(5"'
    module_1.finditer(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    float_0 = 1773.218081
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    complex_0 = 306.22 + 842.793112j
    module_0.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    bytes_0 = b'"'
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    var_0 = module_1.purge()
    module_1.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    bytes_0 = b"\xbc\xc0V~\xa6^\xca\x02\x7f\xea"
    none_type_0 = None
    module_1.finditer(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    bytes_0 = b"XL\xa7"
    bool_0 = True
    tuple_0 = (bool_0, bytes_0)
    module_3.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    set_0 = set()
    module_1.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    bytes_0 = b"hm\x05;p\xe5\xe1\xdcz/\x9a\xc0"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    float_0 = -1052.4531
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    set_0 = set()
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    bytes_0 = b"|B\x99OwR\xe4\x0ed2"
    var_0 = module_1.compile(bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    complex_0 = 5948.3 + 501.01172j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    float_0 = 1971.136
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    float_0 = -2691.0343
    none_type_0 = None
    module_1.split(none_type_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    dict_0 = {}
    exception_0 = module_2.Exception(**dict_0)
    module_3.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    bytes_0 = b"\x0c\xce"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    str_0 = "=!L#\t*\n5O\x0boz*O$m"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    bytes_0 = b"Z\xad\x8a~\x06"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    int_0 = -1414
    error_0 = module_1.error(int_0)
    module_1.match(error_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    bool_0 = True
    error_0 = module_1.error(bool_0)
    module_3.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    bytes_0 = b"\x91\x9f\x87OM\xb0\xc9"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    bytes_0 = b"\xc0\x0c\x9c\x8dBe\x01Q\x8ds\xa4\x893\xd8\x1c\x99)"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    none_type_0 = None
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_3.get_new_command(none_type_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    bool_0 = False
    str_0 = "\x0bid>,y=8L\rV%X%/3"
    module_3.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    int_0 = -1972
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_3.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    exception_0 = module_2.Exception()
    list_0 = [exception_0, exception_0]
    tuple_0 = (exception_0, exception_0, list_0)
    module_1.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    list_0 = []
    exception_0 = module_2.Exception(*list_0)
    module_3.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    int_0 = -308
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    bytes_0 = b"\xf7\t\x87\xc3\xf3\xce"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    int_0 = -1114
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    str_0 = "C{9M,JT[["
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    str_0 = "8X?/=Fb}$Gh%wv~"
    module_1.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    int_0 = 2006
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    list_0 = []
    float_0 = -2131.1
    module_1.split(float_0, float_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    complex_0 = 1348.9125 - 689.5802j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    bool_0 = True
    int_0 = 5227
    tuple_0 = (int_0, int_0)
    module_3.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    float_0 = 479.014
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    none_type_0 = None
    dict_0 = {}
    module_3.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    tuple_0 = ()
    module_1.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.findall(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    bytes_0 = b"\xd0\xa8R\x82\x93"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    bytes_0 = b"\x02\x84s\x9dM\xf4\xbf\xec\x99o\xeb\xfcW\xcagp"
    float_0 = 655.8999
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: float_0, bytes_0: bytes_0}
    module_1.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    bytes_0 = b"2\xc9\x19\x07"
    set_0 = {bytes_0, bytes_0}
    module_3.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    bytes_0 = b"\x83\x86O\xc9a\x80\x8b\x03\xf1a\x0b\xeb\x9f"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3747():
    float_0 = 1367.76449
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    set_0 = set()
    float_0 = 4168.9841
    module_3.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    int_0 = -2830
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    int_0 = 1734
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    str_0 = "i\x0b>]\n.grXeAk7-(^=\\+"
    tuple_0 = (str_0,)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    int_0 = 3164
    list_0 = [int_0, int_0, int_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    float_0 = 1408.8
    set_0 = {float_0}
    module_1.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    auto_0 = module_0.auto()
    none_type_0 = None
    module_1.subn(auto_0, auto_0, auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    float_0 = 2572.0
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    var_0 = module_1.purge()
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    str_0 = "MdI"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3763():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    bytes_0 = b"a=\xb9{\x1d\xdb'\xd5F\xb4\x12"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    bytes_0 = b"Q\xde\xfbPFx@\xe4\xd1\xf8\xed\xc4\xd0"
    str_0 = "GA"
    module_3.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    str_0 = "m6tZobG-3B#yK* "
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    int_0 = 2598
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    bool_0 = False
    error_0 = module_1.error(bool_0)
    module_3.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_3.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_3.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    bool_0 = False
    module_1.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    var_0 = module_1.purge()
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "Y_C]C*|b=$$jYQ:24P-"
    str_1 = "bL-!|"
    str_2 = "4L(]k"
    dict_0 = {str_0: none_type_0, str_1: str_0, str_2: str_0}
    module_4.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    complex_0 = 460.9 + 1514.91171j
    module_1.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    int_0 = 1506
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    float_0 = -1063.42
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    bool_0 = True
    bytes_0 = b"\x8c\x94R\x87\xcbxM%\xf5\x88}\xf0\x86g\xf9\x97\xa9"
    module_3.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    set_0 = set()
    module_1.subn(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    float_0 = -312.002515
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    int_0 = -742
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    float_0 = -1380.0
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    bool_0 = True
    set_0 = {bool_0}
    module_3.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    int_0 = -1403
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    var_0 = module_1.purge()
    tuple_0 = (var_0,)
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    set_0 = set()
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    var_0 = module_1.purge()
    var_0.__reversed__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    var_0 = module_1.purge()
    str_0 = "0K*02\ry"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    int_0 = 1352
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    list_0 = []
    none_type_0 = None
    module_1.template(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    bytes_0 = b"\xae\xcd\x8a1~\x8b\xf5\x8c\xcc\x99\x9c\x0b\x94\xd4\xf1j\xe9\xf5"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    bool_0 = False
    none_type_0 = None
    module_1.template(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    none_type_0 = None
    error_0 = module_1.error(none_type_0, none_type_0)
    var_0 = module_1.purge()
    var_0.__setitem__(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    str_0 = "~?>;59fh#URN6p+V('Mm"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    bytes_0 = b"9\xaa\t\xa8M\xfb\x80\xbc\xdaN"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    var_0 = module_1.purge()
    str_0 = "W(>Xz[7\x0b"
    none_type_0 = None
    module_1.split(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    float_0 = -2923.119
    set_0 = {float_0, float_0, float_0, float_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3810():
    int_0 = 2376
    none_type_0 = None
    module_1.sub(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    bytes_0 = b"r\xb8\xfa]s^h\xefg\xaa\xe5\x19'\x03C["
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    bool_0 = False
    bool_1 = True
    module_1.search(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_3.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    str_0 = "&][TbHlg}t#Gj.[2"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    str_0 = "Gp*%X;7K$T_)|=(_n\\X"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    bytes_0 = b"\xe5\xb2\x9d\x1b\xfc\x181"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    bytes_0 = b"C)\x11\xa5\xc8wx\x80?\xc4\xa1\xf6T\xf1iG\xda\x0el\xd6"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    str_0 = "[M( kwpKTiOMksZJa|82"
    dict_0 = {str_0: str_0}
    module_3.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    bytes_0 = b"\xdf\xdbd\r\xffB.f\xbeQ"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    int_0 = -111
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    error_0 = module_4.Error()
    module_1.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    int_0 = -3721
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    str_0 = "9Be~q<,b("
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    int_0 = -728
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    bytes_0 = b"@\xd7\xdc\x92\xc5}^_\xc2"
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    bytes_0 = b"E\xb64\xeaV\xb1\t\x1e\xd5e\xd3\xc0\xce\x04\xc6~\x8cX"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    var_0 = module_1.purge()
    none_type_0 = None
    module_3.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    bytes_0 = b"^\xb6\xeav\x7f\x97\x9aM\x83\x0f\x117\xeam\x9f\xca\xfc"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    list_0 = []
    list_1 = [list_0]
    module_1.escape(list_1)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    bool_0 = False
    var_0 = module_1.purge()
    var_0.__contains__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    float_0 = -1945.864857
    module_1.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    list_0 = []
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    str_0 = "Wm%cE:-P?FACYLmkGrPZ"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    int_0 = 233
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    dict_0 = {}
    list_0 = [dict_0]
    module_3.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3847():
    str_0 = '%"60e@Fu/'
    var_0 = module_1.escape(str_0)
    module_3.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    none_type_0 = None
    list_0 = [none_type_0]
    exception_0 = module_2.Exception(*list_0)
    bool_0 = False
    list_1 = [exception_0, bool_0, exception_0, list_0]
    module_1.template(list_1)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.split(none_type_0, none_type_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.subn(bool_0, bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bytes_0 = b"\xbfe[S|@\xb3\xa1\xfaVb\xccCT}\x17"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3853():
    float_0 = -2920.46998
    list_0 = [float_0]
    module_1.subn(float_0, list_0, float_0, float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    str_0 = "\\ejTJ)XMUX!gEi\ri$6T>"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    str_0 = "\x0c7;ua+w"
    var_0 = module_1.purge()
    var_0.__reversed__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__iter__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    int_0 = -26
    error_0 = module_1.error(int_0, pos=int_0)
    module_3.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    bytes_0 = b"\xe8\x95"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    int_0 = 2122
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    float_0 = 144.91
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    float_0 = -775.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    complex_0 = 7.22175 + 807j
    none_type_0 = None
    module_3.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    regex_flag_0 = module_1.RegexFlag.TEMPLATE
    module_3.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_1.finditer(tuple_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    var_0 = module_1.purge()
    int_0 = 1213
    module_1.findall(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    bytes_0 = b"\xdfJ\x12\x08"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    bytes_0 = b",\xee\xf3\xaf\xeb"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    bool_0 = False
    int_0 = -356
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    object_0 = module_2.object()
    none_type_0 = None
    module_3.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    enum_dict_0 = module_0._EnumDict()
    module_1.match(enum_dict_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    int_0 = 4644
    bytes_0 = b"\xac0"
    dict_0 = {int_0: bytes_0, int_0: bytes_0, int_0: int_0}
    tuple_0 = (int_0, bytes_0, dict_0)
    module_3.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    int_0 = -1510
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    int_0 = -2494
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    bytes_0 = b":j\x9b\xf0\xe3\xc5\xcb\xc2 \xaa\xbb*"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    float_0 = 1020.833842
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    bool_0 = False
    int_0 = 3299
    list_0 = [bool_0, int_0, bool_0]
    module_3.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    str_0 = '=6QRp*xc~"} FQ'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    none_type_0 = None
    float_0 = -3188.73
    module_3.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    list_0 = []
    none_type_0 = None
    module_1.sub(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    int_0 = -1562
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    float_0 = -1909.0
    none_type_0 = None
    module_1.finditer(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    bytes_0 = b"\xf3\xf4\xeb\xc0\xb1gJ\x1a\x98\x0b\xc7g\x10\x00\x04\xef\xf1"
    var_0 = module_1.compile(bytes_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: var_0}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    str_0 = "f\tzXB?b6[rLSwI5\n!/"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    int_0 = -3154
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    int_0 = -1831
    none_type_0 = None
    module_1.subn(int_0, int_0, none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    int_0 = 48
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    bytes_0 = b"\xb7\x1e\x06\xb0\x99\x9e"
    var_0 = module_1.escape(bytes_0)
    set_0 = {var_0, bytes_0}
    module_3.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    bytes_0 = b")l"
    module_1.sub(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    int_0 = -847
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    none_type_0 = None
    float_0 = 1182.6
    module_1.subn(none_type_0, none_type_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    int_0 = -3182
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    complex_0 = -228.828037 - 276.4j
    module_3.match(complex_0, complex_0)


def test_case_3908():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3909():
    float_0 = -116.29491
    module_0.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    bytes_0 = b"\x95\xffn\xd6\x9f/\xa5\xfbj\xf8:\xb9\xe6\xb9\xb7|\xf5"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    bool_0 = True
    none_type_0 = None
    module_1.findall(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    str_0 = "N-,ks|"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    float_0 = 228.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    bool_0 = True
    bool_1 = False
    module_1.sub(bool_0, bool_0, bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    str_0 = "r_dJ"
    var_0 = module_1.match(str_0, str_0)
    module_1.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    str_0 = "5h\r!Eo9"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    str_0 = "msW3L{6[<ua"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    bytes_0 = b"\x13i\\\x8a_\xd1OL"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: bytes_0}
    module_1.split(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    none_type_0 = None
    str_0 = "8{\x0cQEQWCXO4ei@n?a2J'"
    str_1 = ""
    str_2 = "{xL^5G!\rnI\x0bs@n;r9"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.Pattern(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    bool_0 = True
    float_0 = -2384.19
    module_1.split(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    int_0 = 3390
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    int_0 = -795
    dict_0 = {int_0: int_0}
    str_0 = "&qtagb\x0bqRUHD,<5.x;Xb"
    module_3.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    str_0 = "\t^a#N\n{\tFF^O`\r^&t"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    bytes_0 = b"\x85\x1b\xcdY\x8a/[\xdf\x95@J\x0cBt\x0c\x98{\xa6\xcd"
    module_1.compile(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    bytes_0 = b"L\x00\x94\xdc\x02l\x98\xab\x94e\x98\x0c\x9d\x8c\xb51\x14D"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    bool_0 = True
    none_type_0 = None
    module_1.findall(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    var_0 = module_1.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    int_0 = -1962
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    int_0 = 2168
    module_1.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    base_exception_0 = module_2.BaseException()
    str_0 = "_}knU&7\n$s+#4C9Q\nd?\t"
    var_0 = module_1.findall(str_0, str_0)
    var_0.__reversed__(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    str_0 = "?#"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    str_0 = ".j3b@t"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    int_0 = 1791
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    complex_0 = 640.5 - 862.872j
    module_1.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    int_0 = -88
    none_type_0 = None
    module_1.subn(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    str_0 = "A?v<#0<9K~\x0c"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    int_0 = -1493
    list_0 = [int_0, int_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    str_0 = "V"
    dict_0 = {str_0: str_0}
    module_0.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    error_0 = module_4.Error()
    module_1.escape(error_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    none_type_0 = None
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    float_0 = -1446.69769
    none_type_0 = None
    module_1.findall(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    int_0 = 955
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    int_0 = -1121
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    str_0 = "0J"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    bytes_0 = b"\xd2\xb9\x98"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    bytes_0 = b"\xc3m\xd2\x0f\x13\xc7\xc2D0\xb5\\\xf2\xc1\xb5+\xb8"
    module_3.match(bytes_0, bytes_0)


def test_case_3962():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3963():
    int_0 = 2593
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    int_0 = -134
    list_0 = []
    module_0.EnumMeta(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    str_0 = "@^%G"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    int_0 = 327
    none_type_0 = None
    module_1.subn(int_0, none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    int_0 = 658
    tuple_0 = (int_0,)
    module_1.findall(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    var_0 = module_1.purge()
    module_0.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    int_0 = -622
    none_type_0 = None
    module_1.sub(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    int_0 = -100
    module_1.findall(int_0, int_0)


def test_case_3973():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3974():
    int_0 = -162
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    str_0 = "3GIxW~r"
    module_1.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    float_0 = -39.767164
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__call__(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    bytes_0 = b"\x91\xe0"
    module_1.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    var_0 = module_1.purge()
    module_1.finditer(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    bool_0 = True
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    var_0 = module_1.purge()
    set_0 = {var_0, var_0, var_0}
    module_1.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    list_0 = []
    object_0 = module_2.object(*list_0)
    module_3.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    int_0 = -1543
    module_2.Exception(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    int_0 = 512
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    int_0 = 674
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    str_0 = "Uvyj){}eU} ZK\rzr+("
    set_0 = {str_0, str_0, str_0, str_0}
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    str_0 = "M"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    bytes_0 = b"\x1fj\xad\x9c\xc5\x9d''\xcc\xf6\x8c\x8b"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    int_0 = 1264
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    float_0 = -1613.19678
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    int_0 = -1047
    set_0 = {int_0}
    module_1.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    str_0 = "=_PH!wq2*>s"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    int_0 = -1885
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    float_0 = 1834.363
    none_type_0 = None
    module_1.split(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    int_0 = -3887
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    set_0 = set()
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    str_0 = "\rZi2C"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    bytes_0 = b'\xa2\x95O\xb3\xf8\\=\x97Cx"\xc0\xf2\x80\x06x`'
    none_type_0 = None
    module_1.template(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    str_0 = "8a# Fc|="
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    bool_0 = True
    none_type_0 = None
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    int_0 = 262
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    list_0 = []
    exception_0 = module_2.Exception(*list_0)
    none_type_0 = None
    module_3.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    tuple_0 = ()
    module_0.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    bytes_0 = b"\xea\xe3\xe9\x15[\xd4\xdbs'\xf4\x10\x00Ks"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    int_0 = 1414
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    str_0 = "VwBBPK:;j9ur-:4"
    set_0 = {str_0}
    module_3.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    var_0 = module_1.purge()
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    str_0 = "O9)Stv)/iaa0aw#[wBU@"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    str_0 = "\x0c"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    str_0 = 'gJWp!\x0bfwc["oeo` '
    module_1.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    str_0 = "ZU@KO:U\t.\x0c"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    str_0 = '6&)c\x0bQ`}\nsl1S"#'
    set_0 = {str_0, str_0, str_0}
    module_3.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    int_0 = -373
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    enum_dict_0 = module_0._EnumDict()
    module_1.findall(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    str_0 = "qO5|:;"
    module_1.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    bool_0 = False
    bool_1 = True
    module_1.split(bool_1, bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    bytes_0 = b"\x7fKs\xe1\xda\x8e\x9b\xd2\xb6\x15p8r\xab\xf0\x04\xeb"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    bytes_0 = b"\xef\xa0\x81\xe1\xff6c\x01+\xf8\xb9\xaa\xd2\xd4\xbb\x88\xe2\xd8\xb9"
    none_type_0 = None
    module_1.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    complex_0 = 2210.234321 + 653.16j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4036():
    error_0 = module_4.Error()
    module_0.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    list_0 = []
    module_1.Scanner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    none_type_0 = None
    bytes_0 = b"z\xeb\xe4\xc4\xd2\xa2\xd2\r\xe7\xe5\x96 )[\xe1\xb7K\x9bV"
    module_3.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    bytes_0 = b"\xdc\xfb\x1bn7\xc97\xfa\xd3k\x9cj"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    complex_0 = 347.573077 - 59.92j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    float_0 = 1112.869242
    dict_0 = {float_0: float_0}
    module_0.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    enum_dict_0 = module_0._EnumDict()
    module_3.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    float_0 = -5219.83
    module_1.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    int_0 = -4981
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    bytes_0 = b"\xf9\xb5\xb5\x8b\xe2\x05\xe98\xac\x02\xae\xab9\x11\xb0?Wk"
    module_1.subn(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4049():
    bytes_0 = b"\xa9\xe7\x1a\xf5\xa3\xb5\xbf\xf2\xcb\x0f}%wv\x7f\x14x"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    str_0 = "Qgzh=`0Go:;\r61$>PB\\N"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    str_0 = "x\x0b,b&c0b*P+C&8"
    module_1.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    int_0 = 1168
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    int_0 = -659
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    none_type_0 = None
    bytes_0 = b"Ea'w\xd2\xe4SL\x8b7&"
    module_1.compile(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    list_0 = []
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    bytes_0 = b"\xb8 \xd33\x91jJ\x81\xc3?\xb1\x1f\t\x16\xd7p\x80H\x88\x06"
    none_type_0 = None
    module_1.sub(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_3.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    float_0 = -607.4
    module_1.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    int_0 = 673
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    int_0 = -3409
    set_0 = {int_0}
    dict_0 = {int_0: int_0}
    module_1.split(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    float_0 = -1550.49
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    str_0 = "<s*sS~V?u@v{\tv5w\n7)"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    bytes_0 = b"\xb8d\x00)\x97+\x8d\xa9op"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    str_0 = ")OLWZ*C"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    int_0 = -2309
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    str_0 = "F{ K$ZeG-B"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    float_0 = 1384.5
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    dict_0 = {}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    bytes_0 = b"d\xb7\xc3|,\xa6\xf8\xa7z\xf8\x80\xed\x1e-\x19"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    bytes_0 = b"\xd6D\x85{\x7f\xa9>0\xa6\x88"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4078():
    int_0 = 2718
    none_type_0 = None
    module_3.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4080():
    bytes_0 = b"`\x00\xc6\xe7;\xff\x87pu\xb4T\xc7\xd2!\x99I"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    str_0 = "\\-Oj\rv<B yy+|8F@s4"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    str_0 = "=|[N0[y"
    module_1.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    float_0 = 1689.4
    list_0 = [float_0, float_0]
    module_1.subn(list_0, float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    int_0 = 2159
    module_4.Error(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    str_0 = "V&j|{v=h>a"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    int_0 = 2626
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    complex_0 = 1431 - 2515.19j
    var_0 = module_1.purge()
    module_3.get_new_command(complex_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    set_0 = set()
    module_1.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    list_0 = []
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    bytes_0 = b";e"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    int_0 = 1323
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    tuple_0 = ()
    int_0 = -2853
    module_3.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    int_0 = -1165
    module_1.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    float_0 = -575.784087
    bytes_0 = b"\xac\x98q\xb9\xa3\x02\xc3\xaa\xee\xaa\xf5\x12\xa8y}\xb5g\xc5"
    module_3.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    float_0 = -861.986452
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    str_0 = "3Q{lhTPn$s&eddb&wb"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


def test_case_4102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4103():
    complex_0 = -348.658079 - 842.064j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    int_0 = -1298
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4108():
    int_0 = 4508
    module_1.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    bytes_0 = b";\xe4\xb2W\xc9\xfd\x89\xafJ\xdb[\xb3\x99\xef\x07\xc2\x01\xa9\xb07"
    module_1.compile(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    int_0 = 2306
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    exception_0 = module_2.Exception(*list_0)
    module_3.match(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    bytes_0 = b"B\x96\x11\x02\x8a"
    var_0 = module_1.subn(bytes_0, bytes_0, bytes_0)
    module_3.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    str_0 = "+'Q`S+DhB<+|nW9"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    bool_0 = False
    none_type_0 = None
    module_1.subn(bool_0, bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    bytes_0 = b"\x8c\xda\x88\xac\xf7r.g\x0cn\x01(\xa0"
    module_1.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    int_0 = 1175
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    bool_0 = True
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    float_0 = -1938.15302
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    str_0 = "9P]\rf<6_?~"
    var_0 = module_1.split(str_0, str_0)
    var_0.__getitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    str_0 = "\x0c`TGzO|!4`e\nWZ"
    str_1 = '\t8eaM!A=1KR{R)"Q]8xE'
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bool_0 = False
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    bytes_0 = b"\xfa\tZ\\\x94|\xdeC5\xbd\xf4\xb1\x9d"
    var_0 = module_1.match(bytes_0, bytes_0)
    var_0.__reversed__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    str_0 = "y>_i+we"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4130():
    str_0 = "wm\tn"
    str_1 = "|6\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    int_0 = 288
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    complex_0 = 611.836 - 2516j
    none_type_0 = None
    module_3.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0, bool_0)


def test_case_4135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4136():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    error_0 = module_4.Error()
    module_1.subn(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    str_0 = "mIR8au;8\\\x0c\\A"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    int_0 = -1742
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    bytes_0 = b"W2\x9b'\x06jq.\x97\xdf\xa2\x11"
    var_0 = module_1.escape(bytes_0)
    var_0.__reversed__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    var_0 = module_1.purge()
    var_1 = module_1.purge()
    int_0 = 1552
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    int_0 = 1548
    bool_0 = True
    module_3.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    int_0 = -4750
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    exception_0 = module_2.Exception()
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4148():
    bool_0 = False
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    int_0 = -3172
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    none_type_0 = None
    bytes_0 = b"\x03\xca\x93[\x1c\x1e\xea:qK\xa7|\x80\x07"
    set_0 = {none_type_0, none_type_0, bytes_0}
    module_1.split(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    str_0 = "\t\rJ48REh"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    str_0 = "f?V\t{:tsHRHG0M"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.search(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    list_0 = []
    none_type_0 = None
    module_1.sub(list_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    int_0 = -738
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4160():
    int_0 = -879
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    bool_0 = True
    none_type_0 = None
    module_3.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    none_type_0 = None
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    var_1.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    bool_0 = False
    module_1.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    exception_0 = module_2.Exception()
    dict_0 = {
        exception_0: exception_0,
        exception_0: exception_0,
        exception_0: exception_0,
    }
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    int_0 = -446
    module_1.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    float_0 = 290.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    float_0 = 471.965334
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {}
    exception_0 = module_2.Exception(*list_0, **dict_0)
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    bool_0 = False
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    int_0 = 1336
    tuple_0 = (int_0,)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    float_0 = -2713.4862
    list_0 = [float_0, float_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    str_0 = "(Dwlw-F["
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    int_0 = 216
    module_1.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    complex_0 = 1118.3 + 2102.7j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    base_exception_0 = module_2.BaseException()
    dict_0 = {
        base_exception_0: base_exception_0,
        base_exception_0: base_exception_0,
        base_exception_0: base_exception_0,
        base_exception_0: base_exception_0,
    }
    none_type_0 = None
    module_3.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    bytes_0 = b"\x05_\x97\xaa{[\xc2"
    list_0 = [bytes_0, bytes_0]
    bool_0 = True
    bytes_1 = b"\x83B\xd9H\xed-\xb6-\x99z\xb1U\xec\xf7p"
    tuple_0 = (list_0, bool_0, bytes_1, bool_0)
    module_1.search(tuple_0, tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    int_0 = -1722
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    str_0 = "kaot"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    bool_0 = False
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    set_0 = set()
    module_1.split(set_0, set_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    bytes_0 = b"l\x8e4\\b\xed\xfe\xc8'\x9c*G\xf2"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    bool_0 = True
    bool_1 = False
    module_3.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    none_type_0 = None
    int_0 = 3100
    module_3.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    int_0 = 969
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    bytes_0 = b"\xa7r@\x96\xf1\xc41\xd0\xb2\xaa"
    module_1.Pattern(*bytes_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    int_0 = -688
    list_0 = [int_0, int_0, int_0]
    module_3.get_new_command(int_0, list_0)


def test_case_4193():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4194():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    bytes_0 = b"\xd4\x8a\xbdv\xa4?\x01\x1c\x9f^\xd7"
    module_1.subn(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    bytes_0 = b"EA\xabt"
    module_1.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    bytes_0 = b"\x05 \xba\nYf\xcf,\x08\xae\xa6"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    dict_0 = {}
    module_0.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    bytes_0 = b"M\xbc"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    int_0 = -2520
    set_0 = {int_0}
    error_0 = module_4.Error()
    module_3.match(set_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    none_type_0 = None
    float_0 = -562.086687
    module_3.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    str_0 = "/u]St|=2 ?"
    list_0 = [str_0]
    none_type_0 = None
    module_1.sub(list_0, str_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4208():
    bytes_0 = b'%\xcb"\xc1r0\xc7'
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    str_0 = "?VI`"
    none_type_0 = None
    str_1 = "KDTs8poxITXW=7d"
    str_2 = 'S\n<," ~E&'
    str_3 = "33|>/9ZP\tp(Rt]$lm|"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    int_0 = 4022
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    auto_0 = module_0.auto()
    dict_0 = {auto_0: auto_0, auto_0: auto_0, auto_0: auto_0, auto_0: auto_0}
    tuple_0 = (auto_0, dict_0)
    none_type_0 = None
    module_3.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    str_0 = "mF"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    list_0 = []
    module_1.template(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    str_0 = "X7F:Ugk3;VQ"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    int_0 = 3141
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    str_0 = '2ZU(U mt53K"h'
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    str_0 = "AHU9Bn<HGl"
    str_1 = "\t<+$\x0b]LT%gDP]&bc(!"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    int_0 = -3866
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    str_0 = "5@:#lY+_"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    float_0 = 810.5
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    tuple_0 = ()
    none_type_0 = None
    module_1.split(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    dict_0 = {}
    list_0 = [dict_0]
    module_3.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    int_0 = 1984
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    int_0 = -1898
    none_type_0 = None
    module_1.findall(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    int_0 = 326
    module_1.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    bool_0 = True
    none_type_0 = None
    module_1.split(bool_0, bool_0, flags=none_type_0)


def test_case_4231():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4232():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    tuple_0 = ()
    module_1.subn(tuple_0, tuple_0, tuple_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    int_0 = -2443
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    str_0 = "rZ$)$y/\t,]'[k;"
    module_1.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4242():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    bytes_0 = b"\x9d\xb0"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    int_0 = 3192
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    bool_0 = False
    list_0 = [bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    int_0 = 1832
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    int_0 = 823
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    int_0 = -4316
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    str_0 = "'Jba[+':"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4255():
    dict_0 = {}
    module_1.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    str_0 = "3P&Zy;5j6MbWh\t055"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    str_0 = "RKZ`tuozZ5`Sh05N"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    str_0 = "`L60\x0c&i\x0bdeR)N$]w@ry"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    dict_0 = {}
    module_0.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    bytes_0 = b"Q\x97cc\x11Y,\x83\x8e"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_1.match(none_type_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    complex_0 = -820.71401 + 1617j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    bytes_0 = b"\x9f[\x87\xd8\x05\xa1\x9e\x8ejI\x7f\x7f\x86L\x00\x8eg\xaf\xb6"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    int_0 = 278
    module_1.split(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    complex_0 = 4674.57863 + 978.988j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    float_0 = 2302.410351
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    bytes_0 = b"Q\x96\x00T-f\x12\xca\x1di\xd9d\xcb"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    bytes_0 = b"\xabo^\xe8\xe4o"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    int_0 = -1780
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    dict_0 = {}
    auto_0 = module_0.auto(**dict_0)
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    str_0 = "m)5A<\\"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    str_0 = "qRHI7.O1g+Cb\x0c`WRAn<"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    str_0 = "#=*5b\x0cyX\x0c^M7(Gk"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    int_0 = 134
    var_0 = module_1.purge()
    module_3.match(int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    list_0 = []
    none_type_0 = None
    error_0 = module_1.error(list_0, pos=none_type_0)
    module_3.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    bool_0 = False
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    int_0 = 2622
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    int_0 = 94
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bool_0 = True
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    str_0 = "v\rnLXaT`}C/jFb"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    dict_0 = {}
    none_type_0 = None
    module_3.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    object_0 = module_2.object()
    none_type_0 = None
    module_1.match(object_0, none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_3.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    bytes_0 = b"\xbd\x8f\xdf.\xefg\x97]\x0fH"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    str_0 = "=\n;=G<74~"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    bytes_0 = b"\\k\xb6\x123K\x8ep"
    var_0 = module_1.escape(bytes_0)
    module_3.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    float_0 = 661.10843
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    int_0 = 1219
    none_type_0 = None
    module_1.finditer(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    float_0 = 5958.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    int_0 = 1115
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    int_0 = 1119
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    float_0 = 917.071
    module_1.sub(float_0, float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    float_0 = 2508.66
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    str_0 = ""
    none_type_0 = None
    module_1.split(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    list_0 = [regex_flag_0, regex_flag_0, regex_flag_0]
    module_1.finditer(regex_flag_0, regex_flag_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    complex_0 = 723.34 - 1457j
    module_1.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_3.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    bool_0 = True
    module_1.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    str_0 = "Pt-5JIqi\x0bvBdPR_"
    none_type_0 = None
    module_1.template(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    int_0 = -2717
    module_0.unique(int_0)


def test_case_4314():
    int_0 = -3014
    var_0 = module_1.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(int_0, int_0)


def test_case_4315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4316():
    float_0 = 377.84664
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    int_0 = -1062
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    bytes_0 = b"\xab\xd3Z"
    module_0.EnumMeta(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    str_0 = "~\taWf\x0bv ,0W8Xsw"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    int_0 = -625
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    float_0 = 2925.49612
    module_1.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    bytes_0 = b"\xdd\xbc\x02\xce!\x11\xbd\x12\xba\xc1qT#"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    bytes_0 = b"\xd8\x9f\x8c^K\x8f\xabD\xfc\x94\xa5\xad!4\xd7\xf2"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    tuple_0 = ()
    none_type_0 = None
    module_1.search(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    int_0 = -447
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    dict_0 = {}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    float_0 = 2658.33
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    str_0 = "3\x0c#H7n"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    int_0 = 5294
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    list_0 = []
    str_0 = "u\nG/(z"
    dict_0 = {str_0: list_0, str_0: str_0, str_0: str_0}
    module_2.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    int_0 = -3175
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    bool_0 = False
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    str_0 = "Hgn\x0bh{\x0b>w[@Y8pa"
    none_type_0 = None
    module_1.finditer(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    bytes_0 = b"\xeabm\xfb`\x8a3\xb8\x19'v\xde\x0f\x88\xdb"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    float_0 = -195.8413
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    complex_0 = -2073.69 - 2070j
    none_type_0 = None
    module_3.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    float_0 = 4067.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    bytes_0 = b"\xacZ\xe7\xcaH"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    bytes_0 = b"Z\x9dc\xd2\xef\xb9l\xb3\n\x96\xcf\xa6\xa6\x15\xc5"
    module_1.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    bytes_0 = b"\xc0mlO\xa9\x0fk\xf5\x95\xa0\r"
    bool_0 = False
    module_1.subn(bool_0, bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    int_0 = 1216
    bytes_0 = b"\xd6\xac\xbcm\x89=\xb0z\xd8\x85%\xa6\x8d\x1b"
    dict_0 = {int_0: int_0, bytes_0: bytes_0, int_0: int_0}
    module_3.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    str_0 = "jA+4lw^Zx\x0cbXm^"
    str_1 = "EQi\x0bb("
    list_0 = [str_0]
    module_1.sub(list_0, str_1, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    bytes_0 = b"\xa9\xea\xb4\xf7\xb7/)\xce"
    module_1.sub(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    var_0 = module_1.purge()
    float_0 = 1430.1
    module_3.get_new_command(var_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    bool_0 = False
    str_0 = "3\t~u/]H6"
    bool_1 = True
    dict_0 = {str_0: bool_1, str_0: str_0}
    module_2.Exception(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    str_0 = "ixAV0R?i`@:"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    str_0 = "~u=.1HeX*F"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    str_0 = "S.^EQyD92r&\x0c9h<I;DPe"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    none_type_0 = None
    exception_0 = module_2.Exception()
    bool_0 = True
    module_1.finditer(none_type_0, exception_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    bytes_0 = b"\x13\x8b>\x8c\xe4\xb2\xf3o\x90\x18|Y\x8c;}\x05}"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    complex_0 = 1910.78759 + 6134j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_3.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    float_0 = -184.29579
    module_1.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    bytes_0 = b">g\x91"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    str_0 = '\x0b(:",CLVLg`w\x0cL>1n'
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


def test_case_4371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4372():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    str_0 = "Z:IA,\n6E/d5rJ-"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    bytes_0 = b"K\xaa\xd9\xcbt\x1b\xe9\xdc\x02)1\xa9\xdb\xab~"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    int_0 = 695
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    int_0 = -2085
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    list_0 = []
    module_0.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    float_0 = 505.2547
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    complex_0 = -1864.787 - 202.835j
    int_0 = 323
    module_3.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    int_0 = -1322
    list_0 = [int_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.subn(dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    error_0 = module_4.Error()
    module_1.finditer(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    auto_0 = module_0.auto()
    module_3.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    bytes_0 = b"h\x88G+\xc3\xe1\x96\x856\xf0\x81\xf0^\xe3\x82p\xf2\x1a"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    dict_0 = {}
    float_0 = 1293.0
    module_1.sub(dict_0, dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    float_0 = 406.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4394():
    tuple_0 = ()
    module_1.findall(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    complex_0 = -70.74271 + 1892.5j
    module_1.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    int_0 = -4491
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    bool_0 = True
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    int_0 = -2383
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    float_0 = 1586.298
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_3.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    bytes_0 = b"\xf7\xe0\x80\x08\x1d\x7f"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    base_exception_0 = module_2.BaseException()
    float_0 = 1125.413
    tuple_0 = (base_exception_0, float_0)
    module_3.get_new_command(tuple_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    str_0 = "<+f!&%WUt2hrW7LT&~k"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    set_0 = set()
    var_0 = module_1.purge()
    var_0.__len__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    str_0 = "~y\rrBeN\na~TVpd"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4411():
    str_0 = "YhSgt,K"
    float_0 = -2335.8
    none_type_0 = None
    module_1.finditer(str_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    float_0 = -552.251
    module_1.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    bool_0 = True
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    bytes_0 = b"\xd4n"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    bytes_0 = b"\x89\x1f\xd4\xdd\x08"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    str_0 = "tm>dlxV#aaG5kJ"
    var_0 = module_1.findall(str_0, str_0)
    module_3.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    bool_0 = True
    bytes_0 = b"Z\xeb\x9e\xe7\x87\xc8\x15"
    module_1.search(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    int_0 = -2441
    module_1.fullmatch(int_0, int_0)


def test_case_4423():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4424():
    error_0 = module_4.Error()
    bool_0 = True
    none_type_0 = None
    module_1.findall(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    str_0 = "]^g=Y, H;uZg"
    var_0 = module_1.escape(str_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    int_0 = -128
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    int_0 = -2244
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    set_0 = set()
    module_1.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    bytes_0 = b"\xa5\x88\x81\xb7\xfeC\x1c2\xbff)\x80"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    float_0 = -268.39
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    bytes_0 = b"\xc3\x05\xa8\r\xa3q%\x83\x15\xa2p=\xb2\xea9Z\xd37"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    bytes_0 = b"\xba\xcc\xbd\x94f\xec\xf0iQ\xfd\xac"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    str_0 = "c\x0b&"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    complex_0 = 120.046 - 1132.34j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    complex_0 = -697.329 - 190.99763j
    none_type_0 = None
    module_1.sub(complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    int_0 = -515
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    complex_0 = 647.07034 - 442.501j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    str_0 = " q>!22\\5\x0cUU"
    complex_0 = -783 - 176.7j
    module_3.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    bytes_0 = b"\xe5I\xb5\x08\x15\xa3\xc1\xc5p\xa7\xe2\xd9"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_3.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    int_0 = -806
    bool_0 = True
    module_3.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    set_0 = set()
    module_0.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    none_type_0 = None
    module_1.Pattern(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    int_0 = -2571
    none_type_0 = None
    module_1.sub(int_0, int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    int_0 = -534
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    var_0 = module_1.purge()
    module_0.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    set_0 = set()
    module_1.sub(set_0, set_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    int_0 = -2196
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    int_0 = -3247
    tuple_0 = (int_0,)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    float_0 = 216.7474
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    int_0 = 236
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    bytes_0 = b"\xb3`l\xc0\xedN\x80+\xad"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    var_0 = module_1.purge()
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    bytes_0 = b"\xe9\xe5\xb9\x1bXY\xafv\xd5\xfcv\xc4\x98\x1e\xbc\xe8st"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    none_type_0 = None
    list_0 = [none_type_0]
    exception_0 = module_2.Exception(*list_0)
    module_1.template(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    int_0 = 1180
    list_0 = [int_0]
    exception_0 = module_2.Exception(*list_0)
    none_type_0 = None
    module_3.match(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    list_0 = []
    base_exception_0 = module_2.BaseException(*list_0)
    module_0.unique(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    bytes_0 = b"\xfe\xc2\x05\x15\xc7%\xe7"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    str_0 = 'k"7\x0c_,4\t3X"RNg\x0b'
    none_type_0 = None
    module_1.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    str_0 = "M%"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    int_0 = -1465
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    str_0 = "cIpo=V&Ey\tX2AlLm3"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = None
    module_1.fullmatch(enum_dict_0, enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_3.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    module_1.Pattern()


def test_case_4479():
    int_0 = 1217
    var_0 = module_1.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    str_0 = "S"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    bytes_0 = b"tw\xf8\xc6\xe7\xc4D-\xe2\x99\xf8\x1a"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    bytes_0 = b"\r;4n\x1e\xcebl\xee\x7f"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    bytes_0 = b"\xbb\x950\x805\x8dk"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4486():
    int_0 = -665
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    bytes_0 = b"\xcb\xdb=\xaf7\x86\\T^\xf8T^\xcf\x17\xbd\xaa\x97\x18\x92"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    int_0 = -538
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    str_0 = "Q/)WH["
    module_1.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    exception_0 = module_2.Exception()
    module_1.search(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    dict_0 = {}
    module_1.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    str_0 = "7qI#Xoh`zLI;mi2m"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    module_1.search(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    bool_0 = True
    none_type_0 = None
    module_1.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    bool_0 = True
    bool_1 = True
    module_3.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    int_0 = -385
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    str_0 = ""
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    str_0 = "xx*]hFv0]'BM\r]d$Bd"
    bool_0 = False
    module_1.split(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    int_0 = -1596
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    int_0 = -4250
    none_type_0 = None
    module_1.subn(int_0, int_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    str_0 = ""
    str_1 = "Wui"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    bytes_0 = b"vhU\xdc\xd7\xec3\xec!\xe6\x18\n"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    str_0 = "8w^W:t}jf!7x}/|"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    auto_0 = module_0.auto()
    bytes_0 = b"\xc9\x04X\xf7\x8d\x99\xdc"
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__setattr__(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    none_type_0 = None
    str_0 = "G$f GR"
    module_1.search(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__reversed__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    int_0 = -657
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    complex_0 = -5718.947 + 1215.578j
    module_1.finditer(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    int_0 = -2428
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    bytes_0 = b"\x89\xa4/\xdb"
    list_0 = [bytes_0]
    module_3.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    str_0 = "BtM:4|F"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    str_0 = "4!rN3F$"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    bool_0 = True
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    float_0 = -283.77
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    int_0 = -5230
    module_1.fullmatch(int_0, int_0)


def test_case_4526():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4527():
    int_0 = -2604
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    list_0 = []
    none_type_0 = None
    module_1.findall(list_0, none_type_0, none_type_0)


def test_case_4529():
    var_0 = module_1.purge()


@pytest.mark.xfail(strict=True)
def test_case_4530():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    int_0 = 2144
    module_1.Match(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    str_0 = "Uxs2RsgW-Mt;"
    str_1 = "8Z\ri~"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    int_0 = 602
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    float_0 = -1321.37331
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    float_0 = -2938.3
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    str_0 = "<w:Xn\r"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    bytes_0 = b"\xe6r*,l\xee\xc4\xad\xff\xeb\xfc\xbaKo}\xa5"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    str_0 = "y\x0c["
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    str_0 = "UJ6]=5\x0b}D?"
    str_1 = "lO\\qzQ*Q_8\\\tA{B;"
    str_2 = "5{2G\x0bI\x0b37\x0b|KUu&& f."
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_2: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    str_0 = "]{ra\x0bdDk}R"
    var_0 = module_1.match(str_0, str_0)
    module_3.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    str_0 = "TG\n/4{'%fU\x0c?"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    int_0 = -785
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    str_0 = ";'Y58mVc3"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    object_0 = module_2.object()
    int_0 = 174
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    auto_0 = module_0.auto()
    module_1.subn(auto_0, auto_0, auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    var_0 = module_1.purge()
    list_0 = [var_0]
    module_1.search(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    str_0 = 'wj ="=%d~J"q'
    str_1 = "UjZ[ka\x0cD1V"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_1: str_1}
    module_2.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    float_0 = -4070.4675
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    float_0 = 1550.2574
    none_type_0 = None
    module_1.search(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    str_0 = "$QjX;(c\t'($"
    var_0 = module_1.purge()
    var_0.__len__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    set_0 = set()
    module_1.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    str_0 = "IXf@}e\t$e\ti(K"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    str_0 = ":fs"
    var_0 = module_1.template(str_0)
    var_0.__setitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    int_0 = -1437
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    none_type_0 = None
    str_0 = ""
    module_3.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    float_0 = 2043.4
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    int_0 = 1043
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    float_0 = -4237.8255
    module_1.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.finditer(bool_0, set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    bytes_0 = b">-\x9d7\xae\x96#\x16B\xfcR"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    module_1.template(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4567():
    complex_0 = -287 - 408.97j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    str_0 = "k]/%_x?4Qna&H"
    var_0 = module_1.escape(str_0)
    var_0.__delattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    float_0 = -2284.891
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    bool_0 = True
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    complex_0 = 435.742 - 1130j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    regex_flag_0 = module_1.RegexFlag.ASCII
    bool_0 = False
    module_1.template(regex_flag_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    bytes_0 = b"\xdd\xab~P!\xa3\xad#\xb8\xe6"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    int_0 = -3190
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    complex_0 = -520.7153 - 1049j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    var_0 = module_1.purge()
    str_0 = "$5~"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    int_0 = 1369
    set_0 = {int_0, int_0, int_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    str_0 = "O`\rH~\x0c\nO_u(n"
    module_1.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    bytes_0 = b"T\x02\xee\xf8\x84x\xbdM\x84\xb6_\x10\xd63e\x93x\xc8\xf1"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    int_0 = 192
    module_2.Exception(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    enum_dict_0 = module_0._EnumDict()
    set_0 = set()
    module_3.match(enum_dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    set_0 = set()
    module_3.match(set_0, set_0)


def test_case_4587():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4588():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    str_0 = "OQcGNqw\nLr7btt-C"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    bool_0 = True
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    str_0 = "L6"
    var_0 = module_1.match(str_0, str_0)
    set_0 = {var_0}
    module_1.split(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    var_0 = module_1.purge()
    var_0.__len__(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    bool_0 = False
    var_0 = module_1.purge()
    var_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    int_0 = 4237
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    bytes_0 = b'\xb9\x05\x04\xfaI\xbe"0\xf3\xffz$.'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    error_0 = module_4.Error(*list_0)
    module_3.get_new_command(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    float_0 = -1348.21
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4603():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    bytes_0 = b"\xd7\xb4|\x99U\xceX"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    str_0 = "xb\r$Wz`\nI"
    none_type_0 = None
    module_1.subn(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    bool_0 = False
    none_type_0 = None
    module_1.template(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    float_0 = 766.91698
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_3.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    str_0 = "m\rz9r]&[pEA"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4610():
    str_0 = 'annx:@/B"6\x0bI\x0c<|`YyGm'
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    module_3.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    str_0 = "b"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    str_0 = '@"|vJu9&.,-\r6,|AQ'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    float_0 = 4440.9315
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    float_0 = 2294.81
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    int_0 = 59
    bytes_0 = b"\x12\xa2\xc3\xbe}\x04\x0c"
    tuple_0 = (int_0, bytes_0)
    module_0.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    bytes_0 = b"\xe6#\xbf=\xde"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    int_0 = 1185
    none_type_0 = None
    module_1.subn(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    none_type_0 = None
    error_0 = module_1.error(none_type_0)
    module_3.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    int_0 = -1830
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    str_0 = "tJ}:SE#5q="
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0, var_0)


def test_case_4627():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4628():
    int_0 = 1040
    list_0 = [int_0, int_0, int_0]
    module_3.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    complex_0 = 1259.9081 - 1865.9j
    module_1.subn(complex_0, complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    bool_0 = False
    none_type_0 = None
    module_1.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    tuple_0 = ()
    none_type_0 = None
    module_1.finditer(tuple_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    float_0 = -2207.0
    bytes_0 = b"\xe7\xe2\xb6.;\xdc{"
    module_3.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    str_0 = "vczSptX\\"
    list_0 = [str_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_3.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    bool_0 = False
    none_type_0 = None
    module_1.subn(bool_0, none_type_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    str_0 = ",s6\x0c6M@"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    int_0 = -555
    list_0 = [int_0, int_0, int_0, int_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    complex_0 = -2632.145 + 1242.977351j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    bytes_0 = b"\xd5"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    bytes_0 = b"W\r7\x14S\x8eKF\xddx\xfb\x88\x9c\x80"
    tuple_0 = (bytes_0,)
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    str_0 = "QhU:D4l7(\r=kb0\x0c3w]K"
    str_1 = "E&P7%WsZ,"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_2.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    bool_0 = False
    int_0 = 3444
    module_1.findall(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    error_0 = module_4.Error()
    bool_0 = True
    module_1.findall(bool_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    bool_0 = False
    none_type_0 = None
    module_1.Scanner(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    str_0 = "`)8@<'n"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    complex_0 = 1179.16554 - 840.28236j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_3.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    complex_0 = 1453 - 518.534777j
    module_1.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    bytes_0 = b"\x1f\x01\xac\xcb\xe0"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    bytes_0 = b"\xfbt\xa2"
    var_0 = module_1.findall(bytes_0, bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    dict_0 = {}
    module_1.subn(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    bytes_0 = b'r\x1b}\x9b\x00\\g\xa7"C\xfe?\xac\xf5\xad\xebc\x16\x0e'
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    int_0 = -882
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    set_0 = set()
    module_1.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    int_0 = 395
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    int_0 = -3576
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    complex_0 = 4046.02308 - 4813.8j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    bytes_0 = b"]\xb7Yv\x17Z\x91\x93\x8e\x08\xd3|'\xb0\x98"
    var_0 = module_1.findall(bytes_0, bytes_0)
    module_1.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    bytes_0 = b"}X\xc7\xd1\x9afk~\xf3ZQ"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    float_0 = 500.0
    module_1.sub(float_0, float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    bool_0 = True
    str_0 = "4`tY"
    module_1.fullmatch(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    int_0 = -3696
    tuple_0 = (int_0,)
    module_1.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    dict_0 = {}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    none_type_0 = None
    module_2.Exception(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    bytes_0 = b"sy\x0c\x8b<\x8e\xb4fLq\xbe(\xb4\xcb\x932c\xca"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_3.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    none_type_0 = None
    float_0 = 236.28
    module_1.fullmatch(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    bytes_0 = b"gv\xd9\x84\x1e\x9f\xd5\xf1\xdf(\xcd\x8d\xacg\xb6\xfc\xde\xda\x8e"
    var_0 = module_1.purge()
    var_0.__repr__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    module_1.Pattern()


def test_case_4681():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4682():
    object_0 = module_2.object()
    str_0 = "0"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    str_0 = "m#gNF"
    none_type_0 = None
    str_1 = '5Y-"3VHB*FGG'
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    str_0 = "Ly8&f@;IrM_u-)"
    module_1.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    str_0 = "}V.z\t|o_&QGP0td6k >"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    none_type_0 = None
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    bytes_0 = b"\xd5;\x0c"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    set_0 = set()
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    str_0 = ""
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    str_0 = 'oZ7<|\t"lPYzbp#sA'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    bytes_0 = b":;w8\xbc"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


def test_case_4697():
    enum_dict_0 = module_0._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_4698():
    str_0 = "x7n/M\\"
    dict_0 = {}
    module_3.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    dict_0 = {}
    error_0 = module_4.Error(**dict_0)
    tuple_0 = ()
    none_type_0 = None
    module_1.split(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    int_0 = -1095
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    tuple_0 = ()
    module_1.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    object_0 = module_2.object()
    bool_0 = False
    module_3.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    str_0 = "D>"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    str_0 = "A>NS~Z\n"
    var_0 = module_1.compile(str_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    int_0 = 1346
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    str_0 = "afCo@j\\:KFnubF\n7gN"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    int_0 = -1833
    none_type_0 = None
    module_1.search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    bytes_0 = b"\x94>\r\xcaH"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    bytes_0 = b"\xcc\x13\xbc3\x939xT\xae\xd4\xf5\xa7`\x8a m\x0f"
    error_0 = module_1.error(bytes_0)
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    str_0 = "A4dZh$d*%u1 B"
    dict_0 = {str_0: str_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    int_0 = -1868
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    str_0 = "^"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    float_0 = -2099.7
    module_1.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    set_0 = set()
    module_0.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    bool_0 = False
    module_1.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4720():
    float_0 = -4387.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    bytes_0 = b"\xc8\x80"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    str_0 = 'M."_U/l%;>Z>+nk&&9?\\'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    bytes_0 = b"\x9e\x9b\xf0_a+\xbf"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    str_0 = "Uhm@cn(kLHLhsn"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    str_0 = '9P"r6f&'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_4729():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4730():
    bytes_0 = b"C\x9c\xd7\xab\xf1|1#\\"
    dict_0 = {}
    module_3.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    str_0 = "\"kF\\'DWkG8<\\IA<qVR6,"
    set_0 = {str_0, str_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    bool_0 = True
    none_type_0 = None
    module_1.search(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    complex_0 = -2510.16501 + 1306.4162j
    none_type_0 = None
    module_1.findall(complex_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    float_0 = -1162.786976
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    bytes_0 = b">\xff\xf5\xff\xa5\xcf\xa7\xbeb}"
    list_0 = [bytes_0]
    module_1.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    int_0 = 871
    list_0 = [int_0, int_0, int_0, int_0]
    module_3.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    var_0 = module_1.purge()
    module_1.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    int_0 = 231
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    tuple_0 = ()
    module_1.sub(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    bytes_0 = b"\x92~\x8d\xd8"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    int_0 = -1302
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    int_0 = -2101
    none_type_0 = None
    module_1.finditer(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    int_0 = -1366
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    int_0 = 4311
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    bytes_0 = b"\xde\xd2\xa0E\x01C\x19\xa9!\xa4T?\x13\t\xd6Y\xa4/-"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    str_0 = "IRJ*@jE}I\x0cXZoz;"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    bytes_0 = b"\xdarA7V\xcc\xf7"
    complex_0 = -2944.18823 - 133.23j
    tuple_0 = (bytes_0, complex_0)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    bytes_0 = b"\xbcm\xcb\x0b\xf8\x15{h\x03+\xcb"
    set_0 = {bytes_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    bytes_0 = b"#\xec\xc49\xfeW\\V\xce\x93\xcc\xd0\xef~\xbb\x86\x14#\xa5"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    bytes_0 = b"\xb2\x1f\xd6\x95S\xc1\xd1\x01\xac\x0f"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    float_0 = 1559.3786
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    bytes_0 = b"P0\xdc]\x07dU\xc2\nk`\x99\x85\xf42i\x91g\x92\x97"
    none_type_0 = None
    module_1.findall(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    str_0 = 'F{\x0bO9Y]\rk}q\r^o6"}'
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    var_1.__repr__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    bool_0 = True
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    dict_0 = {}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    bytes_0 = b"k\xfd\xbf"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    str_0 = "=-uh\"jgo2HBu'WKu?R1D"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    bool_0 = True
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4767():
    str_0 = "-;v'\x0c8yVD+-AHt*RV\t/5"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    none_type_0 = None
    module_1.Pattern(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    bytes_0 = b"\x14\xc25JH"
    var_0 = module_1.compile(bytes_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    bytes_0 = b"\xb7/\x05@\x15\x14$,\xde\xf8\xdd0\x19\xef\x93\xa8\xd8"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    str_0 = "@hU2,N(s6"
    none_type_0 = None
    module_1.findall(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    complex_0 = -784.65 - 3817.713916j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    complex_0 = -2250.3887 - 502.66j
    module_1.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    module_1.search(var_1, var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    float_0 = 1182.675
    tuple_0 = (float_0,)
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    int_0 = 1698
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    bytes_0 = b"\xd5kw1\xfe&\x7f\xd0\xce\xd4y\x87"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    int_0 = -832
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_1.sub(dict_0, dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    bytes_0 = b"s0\x1b\x18"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    float_0 = -1009.4082
    list_0 = [float_0, float_0]
    module_3.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    bytes_0 = b"f\xb1\x0c\x86\xccGM,)\x7f?\r\x15k\xb3\x92\x82\xe5%"
    var_0 = module_1.escape(bytes_0)
    tuple_0 = (var_0, var_0, var_0)
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    dict_0 = {}
    error_0 = module_4.Error(*dict_0)
    module_2.BaseException(*error_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    bytes_0 = b"\x17\xdaE\xd3w\xcaNA\x13=\xdaI\xf6\xc0h\xa8\x08?"
    var_0 = module_1.split(bytes_0, bytes_0)
    module_3.match(var_0, bytes_0)


def test_case_4787():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4788():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    none_type_0 = None
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    bool_0 = False
    module_1.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    int_0 = 2293
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    bytes_0 = b"\xecZ\xae\x9e:)5C{"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    var_0 = module_1.purge()
    module_1.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    str_0 = "S7dp+u*i,Br:\\u"
    module_1.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    bytes_0 = b"\xa4r\xd6\xbb\xbd\x07~NX\xef\xb47"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    str_0 = "\t\nuL$Sm\x0b\nV?Ww"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    set_0 = set()
    module_1.split(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    str_0 = "YtsT"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    set_0 = set()
    module_1.match(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_2.object(*list_0)


def test_case_4804():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4805():
    str_0 = "eURN-jhb/nEN_op]"
    var_0 = module_1.template(str_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    bool_0 = True
    int_0 = -3169
    module_3.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    regex_flag_0 = module_1.RegexFlag.DEBUG
    list_0 = [regex_flag_0, regex_flag_0]
    module_3.match(list_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    bytes_0 = b"\xf8\xb9\xfd\xcaE\x02W9\xf1"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    float_0 = -250.07
    module_1.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    bytes_0 = b"\xf0/\x11e\x95\x1f\x0e\x01\xb8\x10;\x08:\xcfN]\xae\xd8\x91M"
    var_0 = module_1.sub(bytes_0, bytes_0, bytes_0)
    var_1 = module_1.escape(var_0)
    module_1.template(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    bytes_0 = b"\x13"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    float_0 = -1028.07495
    module_1.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    float_0 = 420.0
    none_type_0 = None
    module_1.finditer(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    tuple_0 = ()
    none_type_0 = None
    error_0 = module_1.error(tuple_0, none_type_0)
    module_3.match(error_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    int_0 = -1752
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    int_0 = 1045
    set_0 = {int_0}
    module_3.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    var_0 = module_1.purge()
    bool_0 = False
    module_1.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    bytes_0 = b"\xd7\xb6\x0c\x17\xa49\xfd\n\x07\xcc\xd0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4821():
    enum_dict_0 = module_0._EnumDict()
    module_1.split(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    str_0 = "-NPQ2tv+#gI<2"
    var_0 = module_1.fullmatch(str_0, str_0)
    var_1 = var_0.__dir__()
    str_1 = "W:B\\%(x0$9^4|"
    module_1.finditer(str_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    enum_dict_0 = module_0._EnumDict()
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    var_1.__iter__(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    int_0 = 1778
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    int_0 = -673
    module_1.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    int_0 = -1702
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    str_0 = "(pHEh0(x"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    bytes_0 = b"\xb1\xf2*nGJ\x13R\xc5"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    int_0 = -132
    none_type_0 = None
    module_1.search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    int_0 = -1834
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    int_0 = 29
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    module_0.EnumMeta()


def test_case_4836():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4837():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_3.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    float_0 = -872.76
    str_0 = "/ODg-*H])E"
    module_1.search(float_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    complex_0 = 2523.536 + 1379j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    bool_0 = True
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    str_0 = "G5&z\x0b"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    set_0 = set()
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    str_0 = "FI/BsZWXj3LJ~L\t2_2"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    str_0 = "y2\x0bN&S"
    none_type_0 = None
    module_1.sub(str_0, str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    dict_0 = {}
    module_0.EnumMeta(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    bytes_0 = b"\xe2\xa5\\|w"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    str_0 = "B\t'ui0\\!<o7"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    complex_0 = 47.6 - 1310.285j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    str_0 = "J~{"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    str_0 = "Xth0=P^4.{\n|@mO]t"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    str_0 = "BiJb$)7c"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    str_0 = "m:-d?2VQoKi[)?V"
    none_type_0 = None
    module_1.sub(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    bytes_0 = b"T\xaf\x07\xb8M\xbawC\xc4\r\xd8"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    float_0 = -2377.393023
    none_type_0 = None
    module_1.findall(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    float_0 = 1303.284
    list_0 = [float_0]
    none_type_0 = None
    module_3.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    int_0 = -2894
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    int_0 = -1055
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    str_0 = "[OXbu~ vD\\Kg"
    str_1 = '}vK4d8_W2$j~^\x0c7"'
    dict_0 = {str_0: str_0, str_1: str_0}
    module_2.BaseException(**dict_0)


def test_case_4864():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4865():
    var_0 = module_1.purge()
    bool_0 = True
    module_1.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.fullmatch(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    int_0 = -866
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


def test_case_4869():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4870():
    int_0 = 3156
    module_1.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    int_0 = 1539
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    bytes_0 = b"u\xc37&\xafW%RuBF\xc2)3b\x9d<\xfb\xe6"
    module_1.fullmatch(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    bytes_0 = b"\x9f\x84\xef\x9b\x18"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    int_0 = 1934
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    bytes_0 = b"\x9b\xb8\x11T\xe1\xd9g\x08c\xc3.\x95\x00-\x9d\x9aQv"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    float_0 = -2516.082
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    list_0 = []
    module_1.finditer(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    int_0 = -1756
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    var_0 = module_1.purge()
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    bytes_0 = b"^\xda"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    complex_0 = 665.379834 - 3232.5j
    bytes_0 = b"\xd8\xaf\xe2"
    var_0 = module_1.match(bytes_0, bytes_0)
    var_0.__setattr__(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_1.compile(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    str_0 = "[^$Ec0\r/v"
    set_0 = {str_0}
    module_1.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    bytes_0 = b"\x13"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    var_0 = module_1.purge()
    bytes_0 = b"\xe3S3\xe1\xdb\x89?\n\xd1\xc8\xae\x13\xcc\xb8"
    var_1 = module_1.search(bytes_0, bytes_0)
    module_3.match(bytes_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    set_0 = set()
    none_type_0 = None
    module_1.search(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    str_0 = 'AC{qe)[""7'
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    int_0 = 1820
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    bytes_0 = b"o\x07_\xfe\\"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    int_0 = 2278
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    none_type_0 = None
    str_0 = "Ny_-N<aVl&B?*|FI"
    module_3.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    bytes_0 = b"~\x86\xb6!J\x0f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    bytes_0 = b"\x0c\x8cY\xa3,/\x0c\x0e\xfa\x95n\xa5\xfe\tJ"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    int_0 = 4368
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    var_0 = module_1.purge()
    var_1 = module_1.purge()
    var_1.__len__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    float_0 = 336.64891
    module_1.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    float_0 = -1048.39018
    list_0 = [float_0, float_0]
    module_1.findall(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    str_0 = "=2%~A?["
    module_1.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4910():
    int_0 = -1
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    none_type_0 = None
    auto_0 = module_0.auto()
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    complex_0 = -4019.212477 - 1171.83132j
    module_1.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    int_0 = -1584
    str_0 = "\nFW"
    tuple_0 = (int_0, str_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_3.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    bool_0 = False
    str_0 = ".p6W%iD"
    module_3.get_new_command(bool_0, str_0)


def test_case_4918():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4919():
    complex_0 = -1755.901 + 1122.802517j
    none_type_0 = None
    module_3.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    int_0 = 681
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    int_0 = -711
    float_0 = -1051.38
    list_0 = [int_0, int_0, float_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    bytes_0 = b"\x81"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_1.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    str_0 = "Lkr>>WJ[7Q.\x0b*#td?\t"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    str_0 = "b"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    str_0 = "9^KP3KD:-$J\\1d#\x0c.P%\\"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    float_0 = -1321.587
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    int_0 = -320
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    str_0 = "r2rip7qp"
    list_0 = [str_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    int_0 = -2093
    module_1.split(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    bytes_0 = b"\xe2"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    bytes_0 = b"(\xe7"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    complex_0 = -2995.512923 + 3163.45j
    module_1.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    bytes_0 = b"Nws\xd53\x9b\xd8"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    float_0 = 2112.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    float_0 = -4455.64
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    enum_dict_0 = module_0._EnumDict()
    bytes_0 = b"\\Y\t\xf2\x8d\xf2<Sr\x88K"
    module_1.subn(enum_dict_0, bytes_0, enum_dict_0, flags=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    int_0 = 77
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    dict_0 = {}
    bool_0 = True
    module_3.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    int_0 = -1745
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    bytes_0 = b"\x0f\xdb\nc\xe6\xa2KQG\xcd|\xde\x9f\xb9px\xfe\xc6s"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    bytes_0 = b"F\xb5\xf9\xf6\xf0\x85wp%\xf1\xa6"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    str_0 = ">na$?("
    module_1.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    auto_0 = module_0.auto()
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4948():
    bytes_0 = b"QPg\x16\x9b{"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    str_0 = "\nXJ%"
    str_1 = "X\tC|>l\\XJM>(mR[M\x0b:"
    str_2 = "V%i}Fa\x0b\\Lf.[[ UJ7W5K"
    str_3 = "7A'"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_3: str_2}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    str_0 = "x2s*x"
    list_0 = [str_0, str_0, str_0, str_0]
    exception_0 = module_2.Exception(*list_0)
    module_3.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    int_0 = 3445
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    none_type_0 = None
    module_0.EnumMeta(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    int_0 = -1882
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = ""
    str_1 = "-\n[fR8P@c"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    complex_0 = -306.6665 - 836.315706j
    dict_0 = {}
    module_3.match(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    bytes_0 = b'\x97\xb7\xe8"Q\xd1J\x94\x90\\'
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    bytes_0 = b'"@\xfa\xf2@az\x91\xef7\xf4Q\x98\xdf'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    dict_0 = {}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    int_0 = 2551
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    bytes_0 = b"&YD\x0c\xdbP\xed~K]L"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    int_0 = 1824
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    int_0 = 1465
    list_0 = [int_0]
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    float_0 = -3560.614083
    bool_0 = False
    module_3.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    object_0 = module_2.object()
    module_1.fullmatch(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4969():
    bytes_0 = b"S\x80\xc5\\\xbe\x9c\xc5y\xd9"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    bytes_0 = b"\xc6"
    set_0 = {bytes_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    bytes_0 = b"\x88\x8f\x9a\xc3\x8d\xe1\xa5"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    bytes_0 = b'e\xaa\x8ba\x84\xf2\xc4S"o`\x15\xf3'
    module_1.subn(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    var_0 = module_1.purge()
    module_1.subn(var_0, var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    int_0 = -442
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    complex_0 = -2269.7 - 1689.559584j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    str_0 = "+C~0s7#?rY~J"
    set_0 = {str_0, str_0, str_0, str_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    int_0 = 872
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    int_0 = -3053
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4981():
    bytes_0 = b"\x1fH\x827\x86\xd2\x99"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    bool_0 = True
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    list_0 = []
    module_1.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    set_0 = set()
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    complex_0 = -2660.165223 + 164j
    none_type_0 = None
    module_3.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    tuple_0 = (list_0,)
    var_1 = module_1.purge()
    var_1.__getitem__(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    exception_0 = module_2.Exception()
    dict_0 = {
        exception_0: exception_0,
        exception_0: exception_0,
        exception_0: exception_0,
    }
    module_1.split(exception_0, dict_0, flags=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    float_0 = 1357.003
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    float_0 = 565.36145
    module_0.unique(float_0)


def test_case_4992():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4993():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    int_0 = -542
    var_0 = module_1.purge()
    var_0.__len__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    bytes_0 = b""
    var_0 = module_1.subn(bytes_0, bytes_0, bytes_0)
    tuple_0 = (var_0, var_0, var_0)
    module_1.search(tuple_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    str_0 = "\rje*~`{\\\t*o_Mf"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    regex_flag_0 = module_1.RegexFlag.TEMPLATE
    bytes_0 = b"\x0c\x06@\x07U\x90\x87\x82\xf9g\x97\xf1\xb2\xea\xd4\x90"
    module_3.match(regex_flag_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    float_0 = 3553.19774
    module_1.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    int_0 = -761
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    float_0 = 2217.41
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    str_0 = "B;  }Xl"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    bytes_0 = b"\x05\xc6Q\x90"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    complex_0 = 2877.4 - 279.64j
    module_1.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    int_0 = 1956
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    float_0 = -2266.6
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    bytes_0 = b"\xcb\xfb\xdb@kG\x14\x16\x13\xad"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    float_0 = -1994.993
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    bytes_0 = b"Tu<\xa8"
    tuple_0 = (bytes_0,)
    module_3.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    bytes_0 = b"\xab\x08\x0f\xee\x9c|H\xeej?l\xbf\x8b@W\xa6d\x87)d"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    bytes_0 = b"\xd2\xd8\x84\x8f\xb8s\xec\xa6\x8f\x0c`\x05w\xe9/\xd7\xff@\xf4"
    none_type_0 = None
    module_1.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    str_0 = "eQs+TYCay\tec0k#IJ"
    none_type_0 = None
    module_3.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    float_0 = -3653.24
    module_1.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    bytes_0 = b"\x05\xbf\x9eQ\x18q\x91\xbb\x0f\x96Q\xa4"
    none_type_0 = None
    module_1.sub(bytes_0, bytes_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    bytes_0 = b"\xcc[\x0b"
    module_1.sub(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    bytes_0 = b"\x06\xe4\xad\x8b\xbc\x16E"
    list_0 = [bytes_0, bytes_0]
    module_3.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    object_0 = module_2.object()
    none_type_0 = None
    module_3.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    var_0 = module_1.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    none_type_0 = None
    module_1.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    str_0 = "_ALyj\x0cLos<i"
    module_1.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    str_0 = "19;~?\r"
    set_0 = {str_0, str_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    bytes_0 = b"\xfb\x1f\x81."
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    list_0 = []
    none_type_0 = None
    module_0.EnumMeta(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0, bool_0]
    module_3.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    int_0 = -488
    module_1.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    int_0 = 1940
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    float_0 = 4936.156668
    set_0 = {float_0, float_0, float_0, float_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    int_0 = 486
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    int_0 = -89
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    int_0 = 472
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_3.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_3.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    str_0 = "DEl&1]"
    str_1 = "xG==esg`'Q;pWDzy\tJ9"
    str_2 = ""
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    str_0 = "YFI;x>$xyK  &5S^ws<"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    int_0 = -3409
    none_type_0 = None
    module_1.match(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    list_0 = []
    module_0.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    float_0 = 2437.93
    module_1.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    str_0 = "\x0clb4{p5Y9+Z[ZuFg"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    bytes_0 = b"\xfa\x9dO"
    var_0 = module_1.compile(bytes_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    bytes_0 = b"\xfc\xe9mr_\xda\xf5o\xf8\x9f\xf0\x0eb\xd2"
    var_0 = module_1.finditer(bytes_0, bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    float_0 = -74.733812
    list_0 = [float_0, float_0]
    module_3.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    int_0 = -17
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    bytes_0 = b"\xcae\xe25z?\x91*\xa0\x9b!"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5059():
    int_0 = 114
    none_type_0 = None
    bytes_0 = b"\xed\xc3UL\x0b\xae"
    var_0 = module_1.fullmatch(bytes_0, bytes_0)
    var_0.__delattr__(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    bool_0 = True
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    str_0 = "kYX&Z+.4#=G"
    str_1 = "-\r}\x0c\\^+5,"
    str_2 = ""
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_2.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.subn(dict_0, list_0, list_0, dict_0, list_0)


def test_case_5063():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5064():
    complex_0 = -141.09 + 809.6j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    str_0 = "tc*T\nOEY<*?MT7r"
    tuple_0 = (str_0,)
    module_3.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    bytes_0 = b"\x90\xe9T\xdf\x93\x92O1\x17N\xc6\x19\xcb\xe3e\x00"
    set_0 = {bytes_0}
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    int_0 = -181
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    float_0 = 420.2
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    str_0 = "r4<\tc6P_QG"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    bytes_0 = b"g(\x11"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    str_0 = "o2(zZum"
    module_1.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    dict_0 = {}
    auto_0 = module_0.auto(*dict_0)
    module_3.get_new_command(auto_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    int_0 = -49
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    bytes_0 = b"E:"
    float_0 = -1048.0
    module_3.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    bool_0 = True
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    bytes_0 = b"\xe8\xfe\x19:\xa4\xa3-\xc0"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    str_0 = "@Iyv\n*_sq(*DG2q"
    none_type_0 = None
    module_1.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5085():
    complex_0 = 2242 - 3102.14j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    float_0 = -2218.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    bool_0 = False
    none_type_0 = None
    module_1.fullmatch(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    int_0 = -81
    module_1.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    var_0 = module_1.purge()
    module_1.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    bytes_0 = b"\xd4\x981|-\xfaR|\xfb\xce\xa4b\xaa\x054\xa1\xa4\x950\x9f"
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    complex_0 = 5664.91 - 1853.1j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    module_1.fullmatch(dict_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    str_0 = "QqV>B4Opp<\r\\_<\n"
    var_0 = module_1.match(str_0, str_0)
    list_0 = [var_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    str_0 = "o0"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    str_0 = "fdW2n&q}8|\nr"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    int_0 = -1192
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    str_0 = "?&m6eXUvoeo5C8"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    int_0 = -468
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    int_0 = 812
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.finditer(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    int_0 = 1773
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    bytes_0 = b"\x1eD;\xc2\x89\xa0\xed\xcf\xf68\xbfv\xcf>\x00I"
    none_type_0 = None
    module_1.subn(bytes_0, bytes_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    bytes_0 = b"\xfa \xea\x93\xa5\x813E\x19\xa6r9"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    int_0 = -1121
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    float_0 = -1638.297858
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    none_type_0 = None
    module_3.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    float_0 = -587.5021
    module_1.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    none_type_0 = None
    module_1.split(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    none_type_0 = None
    str_0 = "m"
    module_3.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    str_0 = ">Kl;"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    bytes_0 = b""
    var_0 = module_1.purge()
    var_0.__contains__(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    bytes_0 = b"E"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    str_0 = "B)z#{.|J\te.\x0c>[uzQ M"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    int_0 = -1082
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    float_0 = 150.31
    var_0 = module_1.purge()
    var_0.__contains__(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    str_0 = "k9ERWM;&_"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    none_type_0 = None
    bool_0 = True
    module_1.search(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    str_0 = "?]"
    module_1.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    exception_0 = module_2.Exception()
    module_1.subn(exception_0, exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    float_0 = -262.83208
    tuple_0 = (float_0,)
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    bytes_0 = b""
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    bytes_0 = b"\x06\nwY/G\xab'\x8c\xe0Ow\xfb=\x83"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    bool_0 = True
    module_1.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5138():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.subn(dict_0, dict_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    bytes_0 = b"D]g\xa4\xb2\xc90\x11["
    none_type_0 = None
    module_1.fullmatch(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    int_0 = 780
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    float_0 = -213.8
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    error_0 = module_4.Error()
    none_type_0 = None
    module_1.compile(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    int_0 = 2537
    none_type_0 = None
    module_1.subn(int_0, none_type_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    int_0 = -1012
    module_1.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    str_0 = ">\x0ck]m)yCK]\r"
    module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    bytes_0 = b"\x1a\x8f\xdci\x93}Ve\xb6"
    module_1.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    str_0 = "c"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    int_0 = 2106
    module_2.BaseException(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    float_0 = -323.4667
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    bytes_0 = b"\x9f3\x04\x19s\x8f\xd3e\x8e"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    float_0 = -2412.0
    module_1.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    set_0 = set()
    module_1.fullmatch(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    int_0 = -19
    set_0 = {int_0}
    module_3.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    bytes_0 = b"\xea:\x1fr\xf7\xf95\x93"
    error_0 = module_1.error(bytes_0, bytes_0)
    bytes_1 = b""
    var_0 = module_1.compile(bytes_1)
    module_1.Scanner(var_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    float_0 = -1935.49
    module_1.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    bytes_0 = b"\xc5\xcd\xdd\xe15%\x85"
    var_0 = module_1.escape(bytes_0)
    var_0.scan(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    float_0 = 1104.064014
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    exception_0 = module_2.Exception(*list_0)
    module_3.match(exception_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    bytes_0 = b'U\xa2"\xdf\xf5I\x19+\xca\xced\xcb\xe0\xe8\x04\xa8\x02'
    var_0 = module_1.match(bytes_0, bytes_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    bytes_0 = b"\x17\xa3\xe7t"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    complex_0 = -2380.758 - 537.4j
    module_1.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    float_0 = -962.0
    dict_0 = {float_0: float_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    none_type_0 = None
    module_2.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    module_3.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    var_0 = module_1.purge()
    module_1.finditer(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    var_0 = module_1.purge()
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    bytes_0 = b"F\xbc\x16\xd9R"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    dict_0 = {}
    module_1.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    bytes_0 = b"\xabu\x04\xef\x04\xd4\xd8\x015U"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    float_0 = -1460.0
    none_type_0 = None
    module_1.sub(float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5183():
    int_0 = 1345
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    bytes_0 = b"D\xa5\x8ax\x9bu\x9d\x9eP"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    set_0 = set()
    module_1.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    var_0 = module_1.purge()
    module_1.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    bool_0 = False
    module_1.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    bool_0 = False
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


def test_case_5193():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5194():
    str_0 = "osk9?I!\x0c*nzQJ@"
    set_0 = {str_0, str_0, str_0}
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    bytes_0 = b"\xe9\xc7\xd7\xb6\x15\x81\xfc3A'j\xc1q\x12>\xb5\xe2\x9b\xcf&"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    list_0 = []
    module_1.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    int_0 = 2550
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    float_0 = 1286.599335
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    bytes_0 = b"\xfff\xdbA\xa5\xbf=c\xba?\xca"
    none_type_0 = None
    module_1.sub(bytes_0, bytes_0, bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    complex_0 = -563.223 + 1346j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    list_0 = []
    base_exception_0 = module_2.BaseException(*list_0)
    var_0 = module_1.purge()
    var_0.__setattr__(base_exception_0, base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    bool_0 = True
    module_3.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    bytes_0 = b"af\x18F"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    dict_0 = {}
    none_type_0 = None
    module_1.findall(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    bool_0 = True
    str_0 = "zRamdy GM"
    module_3.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    str_0 = "/CKHxX*05M"
    none_type_0 = None
    module_1.subn(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5214():
    list_0 = []
    str_0 = "E["
    none_type_0 = None
    str_1 = "Dw(AWrL=+_"
    str_2 = '"r.YhxJR/Xz\nJ{Dx'
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_2.BaseException(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    base_exception_0 = module_2.BaseException()
    module_0.unique(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    var_0 = module_1.purge()
    bytes_0 = b"\xce@N\xd9\x012P\x1a\x9b"
    tuple_0 = (var_0, bytes_0, var_0)
    module_3.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    int_0 = 1143
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    complex_0 = -1056 - 573j
    none_type_0 = None
    module_1.findall(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    bytes_0 = b"\xa9> \xb19\x88\xc2$\xac\x1d\x9c\xaa\x9dH\x84"
    var_0 = module_1.search(bytes_0, bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    int_0 = -1144
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    int_0 = -3782
    list_0 = [int_0]
    module_1.finditer(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    var_0 = module_1.purge()
    int_0 = -524
    module_1.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    float_0 = -671.8754
    var_0 = module_1.purge()
    var_0.__call__(float_0, float_0, qualname=float_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    bool_0 = False
    module_1.error(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    str_0 = 'x"PT8\n'
    none_type_0 = None
    str_1 = "A\rWVj"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    str_0 = "[^\"W'2"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    bytes_0 = b"9;|\xae1\xb8\x7f9\x89\xd4L"
    error_0 = module_1.error(bytes_0)
    module_1.subn(bytes_0, bytes_0, error_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    none_type_0 = None
    float_0 = -1182.0
    module_1.compile(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


def test_case_5232():
    none_type_0 = None
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_1.findall(tuple_0, tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    int_0 = -3223
    set_0 = {int_0}
    none_type_0 = None
    module_3.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    str_0 = "LR!AyUUjkBR;"
    var_0 = module_1.fullmatch(str_0, str_0)
    tuple_0 = (var_0,)
    module_3.get_new_command(tuple_0, var_0)


def test_case_5237():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5238():
    str_0 = "Kgs0?9KV\x0c\r*(Lo5C{("
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    int_0 = -2691
    complex_0 = -1506 - 1309.63012j
    list_0 = [int_0, int_0, complex_0]
    none_type_0 = None
    module_1.findall(list_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    str_0 = 'Y&["TcX,Y>'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    str_0 = "+d\r4^J08SBJ7,nb"
    str_1 = ":"
    set_0 = set()
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_1: set_0}
    module_1.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    set_0 = set()
    int_0 = 556
    list_0 = [set_0, int_0, set_0, set_0]
    bool_0 = True
    tuple_0 = (set_0, int_0, list_0, bool_0)
    none_type_0 = None
    module_3.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    none_type_0 = None
    base_exception_0 = module_2.BaseException()
    module_1.search(none_type_0, base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    none_type_0 = None
    module_4.Error(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    float_0 = -1513.38935
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    str_0 = "yVg\n#k"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_3.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    list_0 = []
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    str_0 = "&7]&U+X'mW*$hY3{\nZk"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    float_0 = -2877.67
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    int_0 = -853
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    int_0 = -1277
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    int_0 = -2556
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    list_0 = []
    module_2.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    bool_0 = False
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_3.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.sub(set_0, bool_0, bool_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    enum_dict_0 = module_0._EnumDict()
    bytes_0 = b"W3\xabv\xe2"
    module_1.finditer(enum_dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    str_0 = "k(^Db6bh1C\t47Z1H_n"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    float_0 = -48.5999
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    bool_0 = False
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    bool_0 = True
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    float_0 = -1156.352909
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    float_0 = 28.41
    none_type_0 = None
    module_3.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    int_0 = -222
    module_1.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    bytes_0 = b"\x98\x8f\xae\xa1\xde\xf4\xa7fk\xb5#a%7R"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bool_0, bytes_0: bool_0}
    module_3.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = None
    module_3.get_new_command(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    set_0 = set()
    module_1.fullmatch(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    bool_0 = False
    bool_1 = True
    module_3.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    str_0 = "Ha=$(s9"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    float_0 = 2662.0
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    bool_0 = False
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    int_0 = 737
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    dict_0 = {}
    module_1.compile(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    bytes_0 = b"\xa4\\\xa8\xe9\x01\x92\xe1\xf0(A\xa1\xfb\xdec\xbc\xea\xaao\x19"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    none_type_0 = None
    var_0 = module_1.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    tuple_0 = ()
    none_type_0 = None
    module_1.sub(tuple_0, tuple_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    int_0 = -1422
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    bytes_0 = b"$&6\xd2\xe0O\x8f"
    complex_0 = 397.256 + 1327.3928j
    module_1.sub(bytes_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    bytes_0 = b"\xde\xed=S"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    var_0 = module_1.purge()
    list_0 = []
    none_type_0 = None
    module_1.search(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    str_0 = "\r"
    module_0.unique(str_0)


def test_case_5297():
    enum_dict_0 = module_0._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_5298():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    exception_0 = module_2.Exception()
    module_1.compile(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    int_0 = 747
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    int_0 = -870
    set_0 = {int_0}
    module_3.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    str_0 = "3n#405tLS\\r@=u0e\rw"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_2.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    int_0 = -92
    int_1 = -1779
    tuple_0 = (int_0, int_1)
    module_1.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    bool_0 = False
    none_type_0 = None
    module_1.sub(bool_0, none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    int_0 = -1176
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    float_0 = -1574.55823
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    float_0 = 1831.387296
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    bytes_0 = b"\x18\xd5'{jrb\x03>\xc5\x8c"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    int_0 = 621
    tuple_0 = (int_0,)
    module_3.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    bytes_0 = b'\x96\xbf_\xe1I\r\xcf\xfee\x99"x\x89\x8aW\xef\x0b\x05\x85n'
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    bytes_0 = b"2\xc7\x80[\x85l\xc9\xef\xf6\xa1"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    var_0 = module_1.purge()
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    str_0 = "+CT5BJVP\r~=q-h2K3);y"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    str_0 = ":qKa`"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    bytes_0 = b"\x9c\xc1\xe4\xf7\xd5\x13[53\xb2\xc8[\x8e\xb3\xcd"
    list_0 = []
    module_3.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    complex_0 = -392.287453 + 2247.1866j
    none_type_0 = None
    module_3.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    dict_0 = {}
    module_1.split(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    bytes_0 = b"\t\xab\x13\xa4\xbe\x1d"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    bytes_0 = b"\xc2\x17\xd7}\xbb\x11\x1b"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    base_exception_0 = module_2.BaseException(*list_0)
    module_3.match(base_exception_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    complex_0 = 4854.840691 + 8.47883j
    module_1.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    bool_0 = True
    none_type_0 = None
    module_1.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    var_0 = module_1.purge()
    var_1 = var_0.__dir__()
    var_0.scan(var_1)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    str_0 = "#aGy"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    bytes_0 = b">\xd4\xd7\x05R\x06^,L\r\x17P\xa3\x1e\xf64"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    str_0 = "$\n"
    none_type_0 = None
    module_1.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    int_0 = 186
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    str_0 = "L\x0b/kexm;0I\x0c:`$2bLqUw"
    set_0 = {str_0, str_0}
    module_1.findall(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    int_0 = 1179
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    complex_0 = -1878.36 - 2083.27j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    var_0 = module_1.purge()
    int_0 = -1939
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    int_0 = -3161
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    bytes_0 = b"\xddA\x82\xc3[#\xf2J5D\x0b<\xb6\x8f\x89\xd4"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.sub(set_0, set_0, bytes_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    bytes_0 = b"gM\xf8d\xa3\xe6I\xf6\x9a\x9c\x89\xf5n\xfcN"
    var_0 = module_1.search(bytes_0, bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_5337():
    int_0 = -2793
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    bytes_0 = b"\xcc\xa3^=O\x836\xd1D\xaf<"
    var_0 = module_1.split(bytes_0, bytes_0)
    bytes_1 = b"\xb3\xc9\xda6\xd3Tt\x03\xb7\xa0s\xe0z\xe2~\xc1\x19\x81"
    module_1.compile(bytes_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    list_0 = []
    none_type_0 = None
    module_1.subn(list_0, none_type_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    complex_0 = -614.813512 - 124.768j
    none_type_0 = None
    module_3.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    bool_0 = True
    str_0 = ' (^bb"Gj?F)'
    list_0 = [bool_0, bool_0, str_0]
    list_1 = [list_0, str_0]
    module_2.object(*list_1)


def test_case_5342():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5343():
    str_0 = "Ujo>!XarfqiDM\nP+V"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    var_0 = module_1.purge()
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5345():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    none_type_0 = None
    bool_0 = False
    module_1.subn(bool_0, bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    dict_0 = {var_1: var_0, var_0: var_0}
    module_3.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0]
    module_3.get_new_command(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    complex_0 = 2209.68 - 1487.73122j
    enum_dict_0 = module_0._EnumDict()
    enum_dict_0.__setitem__(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    int_0 = -2405
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    var_0 = module_1.purge()
    var_1 = var_0.__bool__()
    set_0 = set()
    module_1.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    bytes_0 = b'\xc6\x92"lc%s\x9a\xa0\xade\x06\x9f\xeeb9Q'
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    bytes_0 = b"\xc51c%A\xban\xed\x0b"
    var_0 = module_1.compile(bytes_0)
    module_3.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    float_0 = -377.6
    module_1.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    int_0 = 1825
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    bytes_0 = b"\xe7pl\x80\x1f\xe7\xce\xa7\x84?"
    module_0.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    bytes_0 = b"Q\xa5\xf3\xe7\x83\xc0f\xa6\x9a\xe4\rS\xd2\xd2^"
    var_0 = module_1.purge()
    var_0.__setitem__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    int_0 = -2251
    none_type_0 = None
    module_3.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    complex_0 = -495.98255 - 1676.345199j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    str_0 = 'cSS=&C"X{,(spP'
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    bytes_0 = b"O(\xefP\xfa\x8b0q\xb4\xaa\x10k\xb4C\xa7:s"
    tuple_0 = (bytes_0,)
    module_3.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    bytes_0 = b"Qi\x01e\x0fg,\xa7\x83\xea\x87<\x00\xe4\xa1\x11\x9dK\xa0\xa3"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    base_exception_0 = module_2.BaseException()
    dict_0 = {base_exception_0: base_exception_0, base_exception_0: base_exception_0}
    list_0 = [base_exception_0, dict_0, base_exception_0, base_exception_0]
    none_type_0 = None
    module_3.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    int_0 = -261
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    var_0 = module_1.purge()
    bytes_0 = b"\x91\x13%"
    module_1.subn(var_0, bytes_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    var_0 = module_1.purge()
    module_1.sub(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5370():
    bytes_0 = b"\x06\xf7\x9aL\x8bw\xd7P\x80\xa0\xe5\xea\x8a\xd6\xb3"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    str_0 = "O3\r}7"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    str_0 = "~\t?|\t%-K\x0brpgi"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    float_0 = -660.13032
    module_1.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    complex_0 = 386.773168 - 745j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    bool_0 = True
    module_1.compile(bool_0, bool_0)


def test_case_5376():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5377():
    str_0 = "y0cq"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    bytes_0 = b"\xbc\xc8U\x1a)\xb8"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    int_0 = 749
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bool_0 = False
    module_1.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    float_0 = -1914.00283
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    float_0 = 313.1227
    module_1.subn(float_0, float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    float_0 = 229.0
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    bytes_0 = b"\x9c\xe7\\\xe2\xc7^)\xe4\xef\x12I\x0e\xf7\xbcC1"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    bytes_0 = b"\xce\xbb\xfb\xd1)"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    bytes_0 = b"I\xd7\xf9\xfdr\x94l\xc4\xf5"
    var_0 = module_1.compile(bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_5389():
    bool_0 = True
    none_type_0 = None
    module_1.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    int_0 = -3161
    none_type_0 = None
    module_1.split(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    exception_0 = module_2.Exception()
    module_1.compile(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    bytes_0 = b"\xf1*\xb8\xda\x08|\x99{\xe0\xd7c\xf9\x91a\xe8a"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    complex_0 = -6892 + 247j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5398():
    tuple_0 = ()
    module_3.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    str_0 = "Gu6"
    module_2.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    str_0 = "@"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    complex_0 = 1002.0843 - 1616.48j
    module_1.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    int_0 = -3488
    set_0 = {int_0}
    bytes_0 = b"x\x18>%z?\x7f\x1dm\x96\xb4"
    var_0 = module_1.escape(bytes_0)
    var_0.__len__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    str_0 = "^}??u|WIsv"
    none_type_0 = None
    module_1.findall(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    enum_dict_0 = module_0._EnumDict()
    module_1.Scanner(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    bool_0 = True
    module_1.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    int_0 = -1080
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    int_0 = -2371
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    bool_0 = True
    module_1.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    str_0 = "jouk*SO@"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    bytes_0 = b"\xa6"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    none_type_0 = None
    str_0 = "=c=5["
    str_1 = "XG"
    dict_0 = {str_0: none_type_0, str_1: str_1, str_0: str_0}
    module_2.Exception(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    str_0 = "^"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    bool_0 = False
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    dict_0 = {}
    module_1.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    float_0 = 697.59
    module_1.escape(float_0)


def test_case_5420():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5421():
    bytes_0 = b"#q\x8f\xa6\x88\xb5?\xed\xa0\xc9\x08\x08\x05\r\xf5\xb6\x93+"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    bytes_0 = b"\xb4%TZ\xfe "
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    float_0 = -2038.90978
    list_0 = [float_0, float_0, float_0]
    module_1.split(list_0, list_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    int_0 = -1637
    set_0 = {int_0, int_0, int_0, int_0}
    module_1.sub(set_0, int_0, set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    str_0 = "OF(C(we^Gq9+"
    module_1.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    float_0 = -1877.0
    module_1.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    base_exception_0 = module_2.BaseException()
    none_type_0 = None
    module_1.fullmatch(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    set_0 = set()
    module_1.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    bool_0 = True
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    bytes_0 = b"C\x82.b\x02\xb9\x05\x8b\xeb1\x10<@Lr\x12\xb0\xc9Xr"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    var_0 = module_1.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    complex_0 = 2878.8159 + 4572.11j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    exception_0 = module_2.Exception()
    module_3.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    bytes_0 = b"\x0c[!\x83\x19"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    bool_0 = False
    module_1.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    int_0 = -2556
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    bool_0 = True
    module_0.auto(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    int_0 = 2324
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.subn(list_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    list_0 = []
    module_1.Scanner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    int_0 = 1856
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    int_0 = -3777
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    str_0 = "]M[mXLN=kB"
    module_1.split(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    str_0 = "ka}Mf\\S"
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0)
    module_3.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    float_0 = -2857.9
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_3.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    none_type_0 = None
    module_1.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5456():
    var_0 = module_1.purge()
    dict_0 = {var_0: var_0, var_0: var_0}
    module_1.finditer(dict_0, dict_0, var_0)


def test_case_5457():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5458():
    bytes_0 = b"\xfeA(:"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    int_0 = -2751
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5461():
    str_0 = 'uzM-u,"R'
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    bytes_0 = b"\xac\xc3y"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    error_0 = module_4.Error()
    dict_0 = {error_0: error_0}
    module_3.get_new_command(dict_0, dict_0)


def test_case_5464():
    enum_dict_0 = module_0._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_5465():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    var_0 = module_1.purge()
    bytes_0 = b"\xf0A,j\xeb\xbas.2"
    module_3.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    str_0 = "PtgX>?^&,^A*\x0cyc"
    set_0 = {str_0}
    module_1.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    str_0 = "/^vpdzK)yeR3n<0"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    set_0 = set()
    complex_0 = -1268.3 - 2555.1j
    module_1.fullmatch(complex_0, set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    bool_0 = False
    str_0 = "?Y5D2s4gSL"
    module_3.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    var_0 = module_1.purge()
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    list_0 = []
    module_1.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    float_0 = 43.378
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    bool_0 = True
    bool_1 = False
    module_3.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    bytes_0 = b"(R\x18\xfd\xcf\xee"
    none_type_0 = None
    module_3.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    int_0 = 70
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    list_0 = []
    module_1.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    none_type_0 = None
    complex_0 = 2271.1 - 516j
    module_1.match(none_type_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    float_0 = 725.51609
    dict_0 = {float_0: float_0, float_0: float_0}
    module_3.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    none_type_0 = None
    module_1.sub(regex_flag_0, none_type_0, none_type_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    int_0 = 2652
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    str_0 = "m3fg3)ZP"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    str_0 = '1lt"L|]rCa8-i'
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    float_0 = -2443.47
    list_0 = [float_0, float_0]
    module_1.fullmatch(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    int_0 = 1157
    none_type_0 = None
    module_3.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    none_type_0 = None
    module_1.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    complex_0 = -603 + 1550.369822j
    none_type_0 = None
    module_1.fullmatch(complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    str_0 = "bF/MH/Y\x0b"
    var_0 = module_1.fullmatch(str_0, str_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_1.split(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    str_0 = "V06y5S$x!"
    var_0 = module_1.sub(str_0, str_0, str_0)
    tuple_0 = (var_0, var_0)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    str_0 = "\x0cL9"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    str_0 = "l+"
    none_type_0 = None
    module_1.findall(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    none_type_0 = None
    module_1.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    bool_0 = False
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    bool_0 = True
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    int_0 = 738
    module_1.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    str_0 = "O)B*v"
    set_0 = {str_0, str_0, str_0}
    module_3.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    int_0 = -1001
    module_1.fullmatch(int_0, int_0)


def test_case_5503():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5504():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5505():
    bool_0 = False
    module_1.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    int_0 = -1965
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_3.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    bool_0 = True
    module_1.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    bool_0 = False
    module_1.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    int_0 = 2274
    module_1.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    str_0 = "b'\\[\tz4aRqS,<`WTs$4"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    bool_0 = True
    int_0 = -4000
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, int_0: bool_0}
    module_3.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    bool_0 = True
    module_1.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    bytes_0 = b"\\\xe9t|\x06[\x93\xef:R\xbb\xf0\xa5v"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    int_0 = -2558
    module_1.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    int_0 = -173
    module_0.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    int_0 = -3723
    module_1.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    bool_0 = False
    module_1.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    none_type_0 = None
    float_0 = -2006.4
    module_3.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    module_1.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5521():
    int_0 = 245
    module_1.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    bytes_0 = b"\xacJt\x19\x1er\xf4+\x13Dl"
    var_0 = module_1.purge()
    var_0.__repr__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    bytes_0 = b""
    none_type_0 = None
    module_1.subn(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    none_type_0 = None
    module_1.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    bytes_0 = b"\xd3\xe6D\xa6\xbc8\xe0A.\x8f\xa2\xed}"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    none_type_0 = None
    module_0.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    none_type_0 = None
    module_1.Match(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    int_0 = 336
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    complex_0 = -296 - 2282.214j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_3.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    str_0 = "jha @Rnk\\p27~"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    float_0 = 7098.084
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    bool_0 = True
    module_1.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    complex_0 = -648.775 - 4083.7997j
    module_3.match(complex_0, complex_0)


def test_case_5536():
    int_0 = 1623
    bytes_0 = b"\xcf|\x00\xbeZ\xbd\xcf9\xa5"
    var_0 = module_1.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    none_type_0 = None
    module_1.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    dict_0 = {}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    str_0 = "cOt~[{Z{`Ir8V"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    float_0 = 2211.968
    none_type_0 = None
    module_1.split(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    str_0 = "xbG}"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    bytes_0 = b"\xaf>\x999}]5\r;\xb8\x03\x92\x8dE\x9d%\xc0\xa6\x9bq"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_3.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0, bool_0, dict_0, dict_0]
    module_1.finditer(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    str_0 = "[\x0cH\tpNf"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    float_0 = 3473.14
    tuple_0 = (float_0,)
    none_type_0 = None
    module_3.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    int_0 = 298
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    str_0 = '"Cjv-n^)#\tPd'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    float_0 = -1352.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    bytes_0 = b"\xe3\xd5\xc7\xff"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    bytes_0 = b"\x1f^\x1f\xe6\xd1\xa5\x91J\xd9\xec\xb4\x0e"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    str_0 = "D_.h|oz"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    float_0 = -1446.038
    list_0 = [float_0]
    tuple_0 = (float_0, list_0)
    module_1.finditer(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    str_0 = ""
    str_1 = ""
    module_3.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    float_0 = -609.0
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    str_0 = "px\\@[&}gQ"
    str_1 = "j(ZY].NE-Y0#t>:[#s{l"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    str_0 = "TB"
    dict_0 = {str_0: str_0}
    module_2.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5562():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    int_0 = 273
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    str_0 = "0h&\np_C"
    module_3.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    str_0 = "qZy"
    var_0 = module_1.template(str_0)
    exception_0 = module_2.Exception()
    none_type_0 = None
    module_1.subn(exception_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    dict_0 = {}
    auto_0 = module_0.auto(**dict_0)
    none_type_0 = None
    module_1.split(auto_0, none_type_0, flags=auto_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    none_type_0 = None
    int_0 = -736
    module_3.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    str_0 = "PnV,e4J"
    int_0 = -1250
    module_3.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    dict_0 = {}
    module_1.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    float_0 = 569.586
    var_0 = module_1.purge()
    var_0.__setitem__(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    int_0 = -2594
    none_type_0 = None
    module_1.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    list_0 = []
    module_0.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [bool_0, bool_0, list_0]
    module_3.match(bool_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    bytes_0 = b"V\x80\xf8\x94za\xfa/\xbf\x17\x95i\xce"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    float_0 = 1598.55
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    bytes_0 = b"\xfb\xec\xa3\x88\xe5^,p\xe0\xf6\xc3"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    str_0 = "&"
    none_type_0 = None
    module_1.fullmatch(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    int_0 = -4014
    module_3.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    bytes_0 = b"@\x8a\x93Q\x0eRQB"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5583():
    none_type_0 = None
    module_1.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5584():
    none_type_0 = None
    module_1.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    bool_0 = True
    var_0 = module_1.purge()
    var_0.__iter__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    bytes_0 = b"\x8a\x02\xd5Q\xaez\xc1\xf0a\xbeJ\x1c"
    none_type_0 = None
    module_1.subn(bytes_0, bytes_0, none_type_0)


def test_case_5587():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5588():
    none_type_0 = None
    list_0 = [none_type_0]
    module_4.Error(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    float_0 = -732.51
    module_3.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5590():
    bytes_0 = b"p\xb0\xc9@G\xed\xe9J\xe6s\x0f\x87\xb5\xd7\x87\x98\xba\xa9\xf7="
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5591():
    int_0 = -1402
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5592():
    module_0.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5593():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    str_0 = "4O"
    var_0 = module_1.search(str_0, str_0)
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    float_0 = -1190.6
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    bool_0 = True
    module_0.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    none_type_0 = None
    bytes_0 = b"\xd2\xdb\xa39\xd1\xe05,\xf7\x93)\xef"
    module_1.sub(none_type_0, none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    float_0 = -116.0
    list_0 = [float_0, float_0]
    list_1 = [list_0]
    module_1.escape(list_1)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    complex_0 = -1090.073 + 33.822053j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    str_0 = "]T"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    bytes_0 = b"\xbc\xb7\xdf\x97)"
    module_1.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    str_0 = "`AyZi<6tiA6s"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    str_0 = "\r ;OqRd0RTKW"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    tuple_0 = ()
    module_1.sub(tuple_0, tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    bytes_0 = b"\xb3?\x08\x92V\x7f\x9c6\x89I\x81\x95=\xb3,e\x81\x17"
    var_0 = module_1.findall(bytes_0, bytes_0)
    module_3.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    none_type_0 = None
    module_3.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5609():
    bytes_0 = b"\xbd\xe0\xa3\xd8X"
    module_3.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5610():
    int_0 = 2165
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5612():
    none_type_0 = None
    module_1.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5613():
    bytes_0 = b"\x98\xd3;\x8b\xee\x14\xac\xbc\xb7\xd5R\xb2U,\xdc\xfa\x13}"
    module_3.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    float_0 = 1216.409356
    module_3.get_new_command(float_0, float_0)


def test_case_5615():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        var_0.__new__(bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    complex_0 = 1722.8836 - 1957.31j
    module_3.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    str_0 = "'bhgG\\SPO`z3\n"
    none_type_0 = None
    module_1.finditer(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    none_type_0 = None
    base_exception_0 = module_2.BaseException()
    module_1.template(none_type_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5620():
    var_0 = module_1.purge()
    none_type_0 = None
    module_1.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    none_type_0 = None
    module_1.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    str_0 = "zi?"
    module_1.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    var_0 = module_1.purge()
    module_1.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    none_type_0 = None
    int_0 = -4492
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    set_0 = set()
    module_1.escape(set_0)
