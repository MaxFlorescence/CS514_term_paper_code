# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import django_south_ghost as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -1278
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    str_0 = "36^Y"
    set_0 = set()
    tuple_0 = (bool_0, str_0, set_0, set_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xf2\x0b_\xcdu\xa5\x87ZU"
    tuple_0 = (bytes_0, bytes_0)
    int_0 = -1779
    tuple_1 = (bytes_0, tuple_0, int_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "(5Zi6i^"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "u)iA5E_5F;mhi^"
    module_0.get_new_command(str_0, str_0)


def test_case_9():
    pass


@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = ()
    bytes_0 = b"\x9d\xf7P\x05\xa9\xe1\xa7<\x00:"
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 1280
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "\rPfgW6uy|%~N"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = 1524
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_18():
    int_0 = -2726
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    int_0 = -2844
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    float_0 = -2954.225
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    int_0 = -4859
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    bytes_0 = b"\xeb\t\xc7f\xce6"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    complex_0 = -1793.000957 + 439.22519j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    complex_0 = 1507 - 78.272849j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bytes_0 = b"\x10w\xe5\x8d_^0\xf6\x00"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    str_0 = "A"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    float_0 = 1750.71635
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    float_0 = 2058.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    str_0 = "5J\x0b9wD-pcR&t["
    tuple_0 = (str_0,)
    module_0.get_new_command(none_type_0, tuple_0)


def test_case_37():
    pass


def test_case_38():
    pass


@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = "\\1+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = "iy\r0\rXK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = "\njv8@nDA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    float_0 = 879.67
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b"\x08\xb0\xe5\xe6\xddO\xd1\x84\xe5\xdf\xef1_-\x9e\xf9\x1es\xaf\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_44():
    pass


@pytest.mark.xfail(strict=True)
def test_case_45():
    int_0 = -939
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    int_0 = -975
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bytes_0 = b"\xf7\xc4\xadV\xc2\x81<S\xeaG\r\x1a \xad"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    float_0 = 254.48381
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    tuple_0 = ()
    list_0 = [tuple_0]
    float_0 = 280.324037
    tuple_1 = (list_0, float_0, float_0)
    bool_0 = False
    tuple_2 = (tuple_1, bool_0)
    module_0.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_50():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    bytes_0 = b"\x87!\x02G?w@o"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = [list_0, object_0, object_0]
    bool_0 = False
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    bytes_0 = b"\xd3d\xba!\xc7\x90\xf755\xe4\xa2\x7f]\x07'\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    bytes_0 = b"\xd4\xe2e \xa9\x94#"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    str_0 = ",D\x0b1dH0rj\\]k# du"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    int_0 = 1788
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    int_0 = 1577
    int_1 = 1910
    int_2 = 1124
    tuple_0 = (int_0, int_1, int_2)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_60():
    int_0 = 264
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    str_0 = "P\tsJy0(CF_Z"
    str_1 = "I49Tc)ZL"
    dict_0 = {str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    float_0 = -2222.0
    str_0 = "-wzU_Cnyxgn"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    bytes_0 = b"\x04\x12\x0b\x0b\xe3\xf5i\x91=.\xbd\xc5\x0e\xf1\x90\x15\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    int_0 = -3799
    tuple_0 = (int_0,)
    set_0 = {tuple_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    str_0 = "*BFd]FN>l8@\x0bEMWL\nT"
    bytes_0 = b""
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    bytes_0 = b"3'z\xf2\x1a\xa0\x8cS"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    float_0 = 2364.3611
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    str_0 = "_sm\\qu>/Js"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    bool_0 = True
    str_0 = "bm5t"
    module_0.match(bool_0, str_0)


def test_case_72():
    pass


@pytest.mark.xfail(strict=True)
def test_case_73():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


def test_case_75():
    pass


@pytest.mark.xfail(strict=True)
def test_case_76():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    int_0 = 4269
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    float_0 = -2442.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    float_0 = -2861.68
    set_0 = {float_0}
    int_0 = 1161
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bool_1 = True
    tuple_0 = (set_0, bool_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    complex_0 = -1316.02574 + 144.11919j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    complex_0 = -499.02802 - 933.518j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    int_0 = -260
    int_1 = -2460
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_90():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    int_0 = 3408
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    bytes_0 = b"E\x9b\x06V|\x8f>"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    int_0 = -2063
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    str_0 = "}<{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    int_0 = 2429
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    bytes_0 = b"\x9d\xeem<a\xf8%R\x04\xf1\x7f\xae\xea*\xa9(\xdf\x1e]."
    bool_0 = False
    dict_0 = {bytes_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    complex_0 = -4051 - 530.204j
    list_0 = [complex_0, complex_0, complex_0]
    list_1 = [complex_0, complex_0, complex_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_103():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    bytes_0 = b"\xc7\xb6\x08\x10%\xe1Y\x12\\<[\x8cL"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    bytes_0 = b"\x95j\x99\x18fK;lH\x16T\xe2+\xca\xe5]0\x91\x1ak"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    str_0 = "\tnFb-"
    str_1 = '"uf'
    str_2 = "~hvOv"
    str_3 = "%\"v%:U'b0iy,c708J"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_3: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    str_0 = "vQ&'!9LP&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    int_0 = 950
    module_0.match(int_0, int_0)


def test_case_113():
    pass


@pytest.mark.xfail(strict=True)
def test_case_114():
    bytes_0 = b"\xf7\x17\xe2\xe0'2\x07\xb1\xab\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    int_0 = 4188
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_119():
    pass


@pytest.mark.xfail(strict=True)
def test_case_120():
    float_0 = -2217.0
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    complex_0 = 2358.84 - 673.18206j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    bytes_0 = b"LN\x12\xa99\xeeG\xab\x16\x12C\xd7;\xad\xc8\x96Un"
    float_0 = -4835.9
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: float_0}
    list_0 = [dict_0, float_0, float_0]
    tuple_0 = (list_0, list_0)
    module_0.match(tuple_0, float_0)


def test_case_124():
    pass


@pytest.mark.xfail(strict=True)
def test_case_125():
    str_0 = "U`-\x0b&0\\NMu/|,hyd "
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    int_0 = 2976
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    str_0 = "''"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    int_0 = 1709
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    float_0 = 3420.499
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    bytes_0 = b""
    str_0 = "M|"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    bytes_0 = b"rB>\xe5w\xfa\xe77\x10\x1c\xe7R\xae*\xe8\xae|\x89\xc9\xcf"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    int_0 = -1695
    module_0.match(int_0, int_0)


def test_case_133():
    pass


@pytest.mark.xfail(strict=True)
def test_case_134():
    float_0 = -103.0
    dict_0 = {float_0: float_0, float_0: float_0}
    str_0 = "t$zuPSt5w4(<MXy{2\nX"
    list_0 = [dict_0, dict_0]
    tuple_0 = ()
    bytes_0 = b"\xc3\x860\xe2*w{\nM\x04\x7fw\x83\x86t\x83\xa2n"
    str_1 = "w8D6NxaD"
    tuple_1 = (tuple_0, bytes_0, str_1, bytes_0)
    tuple_2 = (tuple_1,)
    tuple_3 = (str_0, list_0, tuple_2)
    module_0.get_new_command(dict_0, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_135():
    bytes_0 = b"\x91\x9d\x1c\xe3\xfd\xbb\x97\xbc"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0, bytes_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    str_0 = "+_L4:"
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    str_0 = "d//"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    float_0 = -1549.6
    str_0 = "iZDKmz_[@C{TvB"
    bool_0 = False
    dict_0 = {float_0: float_0, str_0: str_0, float_0: bool_0}
    tuple_0 = (dict_0,)
    int_0 = -1696
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    int_0 = -2378
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    int_0 = -487
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    int_0 = -784
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    str_0 = "p2"
    int_0 = 3977
    dict_0 = {str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    str_0 = "vU+!jMmBN!~4F0\n|8@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    int_0 = 1739
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_150():
    pass


@pytest.mark.xfail(strict=True)
def test_case_151():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    str_0 = " jJBc-c<CGG'By\x0b~uV"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    int_0 = -2029
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    str_0 = "u5j~mAd+_vG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    str_0 = "}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    int_0 = -813
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    str_0 = "/8io[r8w?wv\n\\W@h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    str_0 = "8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    str_0 = ">!{;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    bytes_0 = b"\xf1\xce\x91}\x97\x18\xff\x15\x1as]t\xc4\xb4\xc6p{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    bytes_0 = b"S D\x13+6=H\xd0\xd0\xb72\x02\xc0\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    str_0 = "2iugYW}aN_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {object_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    int_0 = -819
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    complex_0 = -181.1 + 3337j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    str_0 = "x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bytes_0 = b"\xd9di:G\xabQqu\xcf\xbb\x96\xac\xa2\xc9\x0f\xca"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    bytes_0 = b"\xa0\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    int_0 = -6544
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    str_0 = "}|@q\x0bx\n&|&G7vm\x0b/~u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    int_0 = -952
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = ()
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    str_0 = "[9+=jY\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    int_0 = 3656
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    float_0 = 947.86
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    float_0 = -1566.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    int_0 = 69
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    float_0 = 3071.623
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    bytes_0 = b"\xfa\xe2r\xa6\xde\x02\xd4}\x17\xe3\x1ds\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    int_0 = -710
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    float_0 = 725.3044
    str_0 = "KX~PaO=p-8p9Nx,"
    list_0 = [float_0, str_0, str_0]
    str_1 = ""
    list_1 = [list_0, str_1]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    str_0 = "9=\rxCQg\r5,c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    str_0 = '"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    int_0 = 1430
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    str_0 = "ec&&NiY"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    str_0 = "6"
    list_0 = [str_0]
    list_1 = [str_0, list_0, list_0, list_0]
    str_1 = "rip!UU"
    dict_0 = {str_1: str_1, str_1: list_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    str_0 = 'Jr]_I;"zd8\nR.|k8'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    str_0 = "`2*\nY"
    module_0.get_new_command(str_0, str_0)


def test_case_202():
    pass


@pytest.mark.xfail(strict=True)
def test_case_203():
    str_0 = "IB\n U`GCx{\t?{"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    str_0 = "~FKN,S!2\t-|VxEsL<ao7"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    str_0 = "0ZRwZq}x9[U"
    tuple_0 = (str_0, str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    str_0 = "e4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    float_0 = 1946.08007
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    float_0 = -183.3914
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    int_0 = -4201
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_212():
    pass


@pytest.mark.xfail(strict=True)
def test_case_213():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    int_0 = -2361
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    int_0 = -490
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    float_0 = -1387.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    int_0 = 1411
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    str_0 = "`"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    bool_0 = True
    bytes_0 = b'\xe7N"~\xa5\xd6\x12\x84\xfd\x97J)\xed4j'
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    bytes_0 = b"\xc7\xf7s5\x91\xbeG\x11Z\x8c9O\xcbe\xb8\x1a\x88"
    list_0 = [bytes_0, bytes_0]
    set_0 = set()
    tuple_0 = (list_0, list_0, set_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    str_0 = "+C1L6WfK1S}sz8^Ht"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


def test_case_224():
    pass


@pytest.mark.xfail(strict=True)
def test_case_225():
    str_0 = "`=ZwwK.3;="
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    int_0 = 2337
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    bytes_0 = b"\xf0Y~\x96\xaa7\x86l:\x15Q\xfc\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    list_1 = [list_0, bool_1, list_0, bool_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    bytes_0 = b"\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    bytes_0 = b"D\xe6\x1e\xf2\xb6\x92\xd0P(;,\xb4\x19\xad\\\xd0\x96\xff\x9a\n"
    tuple_0 = (bytes_0, bytes_0)
    str_0 = "ijw2\ny(j>zWd\tNfz%9h\x0c"
    dict_0 = {tuple_0: str_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    float_0 = 2303.6238
    dict_0 = {float_0: float_0}
    set_0 = set()
    tuple_0 = (float_0, dict_0, set_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    int_0 = -3431
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_234():
    pass


@pytest.mark.xfail(strict=True)
def test_case_235():
    int_0 = 1285
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    int_0 = -295
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_1,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    float_0 = -1250.730379
    int_0 = 1160
    tuple_0 = (float_0, float_0, int_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    bytes_0 = b"\xbf\xca\x18\x83\xe5\xc8$c\x87\x1c\xd4\x06\xda:\xc6\xca\t\xff\xec"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    str_0 = "/(,"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    bytes_0 = b"<*\xd6l:\x8e\xc1\xe6\xef\xd2\xf4R6"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    str_0 = "11*/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    int_0 = 398
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    bytes_0 = b"\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    str_0 = 'Qe!"Gw[,=b_}wF#I;\x0b'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    int_0 = 2679
    tuple_0 = ()
    tuple_1 = (int_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    str_0 = "\n0nMIsmuQ#V%"
    bool_0 = False
    list_0 = [str_0, bool_0, str_0]
    list_1 = [list_0]
    list_2 = [list_1]
    module_0.get_new_command(list_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    bytes_0 = b"f\xf7\xe3\xa9uQ\xfe\xb0D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    bytes_0 = b"\xf3\xa5\x8aG\xd2\x03\xfa\xadA\xb9\xa03y{"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    str_0 = "\\5'KE1D\x0boo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    set_0 = set()
    str_0 = "aHDXljWHin!/b\\meF"
    tuple_0 = (set_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    str_0 = "E/$]6]rz(pNs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    float_0 = -739.284
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    str_0 = 'bJ]Nv{mY"e]X&K[g:QQF'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    str_0 = "Wdof#C'JMmy:\t;IUP_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    bytes_0 = b"e\xd4p'U\xea\x95\xa218\xc5"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    int_0 = -2702
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    int_0 = -3778
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_262():
    pass


@pytest.mark.xfail(strict=True)
def test_case_263():
    str_0 = "sO+9xA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    complex_0 = 221.999 - 4094.62j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    bytes_0 = b"\xf28cA\xaa}s\xe8l\xff\x9b\xeeq\xf7"
    list_0 = [bytes_0]
    complex_0 = -743.8581 - 877.3524j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    str_0 = "zUS/\tWv.7/;#+f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    bytes_0 = b"m\xaau\xa9\x90\xe2\x13\x94\xb0\xae\xa9\x8d\xb5\x12\xd3\x05\xb0\x9a\xad"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    complex_0 = 365.01358 - 1416j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    str_0 = "s$^dw~2r$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    int_0 = -4543
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    str_0 = "O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, bool_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    float_0 = 53.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    float_0 = 678.53951
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    bytes_0 = b"N\x08\xa9\x85\xb9x\x88N\x15\x01\xf0[\xba\xed/B\xbe\x93\xa2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    float_0 = 921.2245
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    str_0 = "\x0byX9eKH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    bytes_0 = b"&?\x0b\xe6\xeb=\tMvAj"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    str_0 = ""
    set_0 = {str_0}
    bytes_0 = b'e\xa7\x1f|\x8f\x1d",\xb9\x12\xbc\x86j\xdb\xac\xd0\xd2'
    float_0 = 1130.16
    tuple_0 = (str_0, set_0, bytes_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    str_0 = "S"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    int_0 = -1541
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    float_0 = -2266.753293
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    set_0 = {tuple_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    str_0 = "Ubu8nrpv11[/G!"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    int_0 = -3183
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    bytes_0 = b"\x8b\xfb]\xd4~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    int_0 = -219
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    str_0 = "feBX'5}Zs4=2k.{:\rs"
    str_1 = "$5\r2P7"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_298():
    str_0 = "Hwi\\-~S|P="
    set_0 = {str_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    int_0 = -1258
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    float_0 = -870.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    float_0 = -190.812149
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    float_0 = 1739.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    int_0 = -931
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    str_0 = "m5BQzpht/OeF%KK\x0bk*7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    str_0 = "_ "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    float_0 = 2358.71295
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    bytes_0 = b"\r\xc0\x80r\xd6SJ\xcd\xc3\x12\xcdA\xa1\x05\x9b\x85\x12\x8a\x8eA"
    set_0 = {bytes_0, bytes_0, bytes_0}
    float_0 = -1661.5385
    tuple_0 = (bytes_0, set_0, float_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    str_0 = "R6!y3H'g+w|\tO}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    int_0 = -2767
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    float_0 = 1128.570945
    bytes_0 = b"\xf18e\xc4\xf1\xe9\xd7\x07\xa29\xbaUh*"
    bool_0 = False
    tuple_0 = (float_0, bytes_0, bool_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    int_0 = -2763
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    float_0 = -788.20192
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    int_0 = 984
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    int_0 = 2070
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    float_0 = -1568.83284
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    bytes_0 = b"\xb7\x81\x1f\x0f\x08i/\xea\x13{\xde\x12Q\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    none_type_0 = None
    bool_0 = True
    dict_0 = {
        none_type_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    str_0 = "6t0:c0$/\r"
    str_1 = "C\x0b"
    str_2 = "^:_ M\x0bO!\n7?\\7vR7?C6"
    tuple_0 = (str_0, str_1, str_2)
    module_0.match(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_324():
    float_0 = -1690.994571
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    complex_0 = -2498.45 + 1142.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    str_0 = "A\r&p\x0b%!D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    int_0 = -6334
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    float_0 = 3592.5
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    int_0 = 3733
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    str_0 = "I}-,3_CEf&|N#"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    float_0 = 2735.194811
    set_0 = {float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "D<,t`vR\nsm)"
    str_1 = "\n\x0b[^x4i9$b\tW%or)N9}"
    dict_0 = {str_0: list_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    list_0 = []
    int_0 = -2236
    tuple_0 = (list_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    str_0 = "`X$o\\lMhJpMf!\rYsSA)\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    complex_0 = -2409 + 1342.1j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    none_type_0 = None
    complex_0 = 2767.618 + 3605.5j
    module_0.match(none_type_0, complex_0)


def test_case_338():
    pass


@pytest.mark.xfail(strict=True)
def test_case_339():
    int_0 = -987
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_340():
    pass


@pytest.mark.xfail(strict=True)
def test_case_341():
    bytes_0 = b"\xbf\xb9\xaeL\x0e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    complex_0 = -4175 - 1693.02508j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    str_0 = 'qV>}a[4>}eU?L0{)"~=['
    none_type_0 = None
    str_1 = "_EN_S9oBZdS))'"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    bool_0 = True
    complex_0 = 4144.373 + 1542.94383j
    tuple_0 = (bool_0, complex_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    float_0 = 1882.122635
    str_0 = "2_\\\n,"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    int_0 = 1596
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    bytes_0 = b"D\xd4\x0c\x99;+d\xe7"
    str_0 = ""
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    int_0 = 1459
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    dict_0 = {}
    set_0 = set()
    tuple_0 = (dict_0, dict_0, set_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    object_0 = module_1.object()
    int_0 = -718
    list_0 = [object_0, int_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    float_0 = -832.4
    float_1 = 2710.15
    module_0.get_new_command(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_356():
    str_0 = ":#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    float_0 = 281.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    int_0 = 1971
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    bytes_0 = b"\xfd6t\x93|\x1f\xfd\xf5\x13\xee\x1d\xb4\xeb\xf39\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    int_0 = -1524
    bytes_0 = b"\x9d\x91"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    str_0 = "Mj$xb],"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    int_0 = -264
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    str_0 = "[T0[!b6n\rx:!6D"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    int_0 = -474
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    str_0 = "iZU\x0b-|LU-%"
    str_1 = 'e\x0bx`VbT^11B*" Nt]J@|'
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


def test_case_368():
    pass


@pytest.mark.xfail(strict=True)
def test_case_369():
    str_0 = "]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    float_0 = 526.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    str_0 = ':|S~LfJ\'=E"G22N`"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    int_0 = 216
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    str_0 = "~xdnKm^q}d`m&d%<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    str_0 = 'Bp"mniZ\tehH\x0bzr,M\r]9'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    complex_0 = 1068.8 - 2365j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    int_0 = -717
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    bytes_0 = b"cn"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    bytes_0 = b"9:\x8a\xe0\x98+q\x8d\x8b\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    float_0 = 489.216
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    str_0 = "FEZJ%HN\rRA/\x0cb."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_385():
    tuple_0 = ()
    int_0 = 4161
    list_0 = [int_0, tuple_0]
    tuple_1 = (tuple_0, int_0, list_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0]
    list_1 = [list_0, list_0, dict_0]
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    bytes_0 = b"\xf9\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    float_0 = 2265.7345
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    int_0 = 5267
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    int_0 = 4548
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


def test_case_392():
    pass


@pytest.mark.xfail(strict=True)
def test_case_393():
    bytes_0 = b"\xfa\x08{\xe5\xd1\xebG\xecUn\xb6e\xe6\x1e\x11\xbc\xd8\x07\x08"
    str_0 = "+^mq` v\x0c-tXv"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    complex_0 = -527 - 840.71351j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    float_0 = 824.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    int_0 = 1800
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    str_0 = "5rg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_404():
    str_0 = "35I:0!=Z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    bool_0 = True
    bytes_0 = b"\x0b\xef\x0b"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    int_0 = -1700
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    bytes_0 = b"!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    object_0 = module_1.object()
    complex_0 = 909.77653 + 1226.79j
    dict_0 = {complex_0: complex_0, complex_0: object_0, object_0: complex_0}
    tuple_0 = (object_0, complex_0, dict_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    complex_0 = 3386.701127 - 1409.965j
    list_0 = [complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    bool_0 = False
    str_0 = "'&S{f"
    bool_1 = True
    tuple_0 = (str_0, str_0, bool_1)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    complex_0 = -1495 + 290.371j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    int_0 = -3918
    list_0 = [int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    float_0 = 456.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    int_0 = 1944
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    int_0 = -3817
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    set_0 = set()
    list_0 = [set_0, set_0]
    int_0 = 2430
    tuple_0 = (set_0, list_0, int_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    bytes_0 = b"v\x9bZ\xaf\x8e\x97T\x9ap\xbdC\x81Z\xa6\xc3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    str_0 = "Y"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    object_0 = module_1.object()
    str_0 = "a&ie3.lRtJOISd\x0cLor"
    dict_0 = {object_0: str_0, str_0: object_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    bytes_0 = b"\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    float_0 = -3392.58979
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    bytes_0 = b"\x0c7\xe3\xe9\xe6\xe7$\xf3\xf7\xda\xff\xfd\xbebv\x11\xf6\x0b\xca\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    bytes_0 = b"\x04]\xfe\xcf%\x0b\xae=/\x8d\x17U?\xc4\x03\xd9U"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    str_0 = "9\n{j'Ur\"`nmQ|"
    module_0.match(str_0, str_0)


def test_case_430():
    pass


@pytest.mark.xfail(strict=True)
def test_case_431():
    int_0 = -1629
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    int_0 = 818
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    int_0 = 634
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    str_0 = ',\x0bv"t'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    int_0 = 1100
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    float_0 = 51.62
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    bytes_0 = b"\x0e\xd3\x84\x9c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    bytes_0 = b">\xdc\x1bx\xb0CK\xa5Z\x0b\xbbi\xb2\x80\x9fq\x9b>\xe75"
    bytes_1 = b"}\r@\xd7\xf4-\x06\x891v\xf4\x97H\xf1\xbe"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_443():
    int_0 = 4931
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    float_0 = 80.2287
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    int_0 = 3766
    module_0.match(int_0, int_0)


def test_case_446():
    pass


@pytest.mark.xfail(strict=True)
def test_case_447():
    str_0 = "s%?bqo'1K\rcc9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    complex_0 = 1240 + 318j
    bool_0 = True
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: bool_0,
    }
    module_0.get_new_command(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    complex_0 = 364 - 759.68j
    none_type_0 = None
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    int_0 = -336
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    bool_0 = True
    str_0 = "!0$x28L#p\nRH-dv"
    int_0 = 1505
    tuple_0 = (bool_0, str_0, int_0)
    none_type_0 = None
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    str_0 = "PP,`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    int_0 = 2337
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_456():
    pass


@pytest.mark.xfail(strict=True)
def test_case_457():
    float_0 = 2019.47639
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    str_0 = "XBI\x0bw+Ef1$A{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    int_0 = 1519
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    bytes_0 = b"\x87\x06\xbb\x08\xd2\xd0\x18\x04x\xa7\xe5\xf4\xa4\xf9\x00"
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_460():
    pass


@pytest.mark.xfail(strict=True)
def test_case_461():
    str_0 = "c}\n54qT,xqR6w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    none_type_0 = None
    str_0 = "T*"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    int_0 = -1013
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    int_0 = -230
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    str_0 = "W\t`#00(J|-0PKP!`"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    tuple_1 = (tuple_0, set_0)
    module_1.object(*tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_471():
    int_0 = 468
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    int_0 = -291
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_473():
    pass


@pytest.mark.xfail(strict=True)
def test_case_474():
    bytes_0 = b"(\xa9\x92\x0e\xff}\xb64\xb7\x89S\r \xbf"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_475():
    pass


@pytest.mark.xfail(strict=True)
def test_case_476():
    str_0 = "z[E4|M8'rwqTZZOc{t*A"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    dict_0 = {}
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0, set_0)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    int_0 = 846
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    bytes_0 = b"UN\x85{f\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    int_0 = 69
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    bool_0 = False
    int_0 = -2428
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    float_0 = 1040.8125
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    float_0 = 3387.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    str_0 = "u0:Sq^B^"
    int_0 = -3265
    set_0 = {int_0, int_0}
    tuple_0 = (str_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    str_0 = "l%\\XVB,6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bytes_0 = b",\xd0Y\x84\xea5\x83N"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    bytes_0 = b"\xcb\xe4\x00`~#%>\x81\x19\xaf\xbf\xf5 "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    float_0 = 405.727
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    int_0 = 2278
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    int_0 = -397
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    bytes_0 = b"\xad\xd9\xba823\xc7p\xf0oE\xd8\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    int_0 = -1066
    str_0 = ")a`~T,ca. &j6()wWeD"
    dict_0 = {}
    tuple_0 = (int_0, str_0, dict_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    float_0 = -3044.342894
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    str_0 = "C#\tf$FOytkjqe(e\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    int_0 = 723
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    str_0 = "=+~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    dict_0 = {}
    bytes_0 = b"\x02U}l\xd2\x9c\xe8{\xfb\x83\xab\xb3\x15\x8a$"
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    int_0 = 3555
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    complex_0 = 54.72284 - 1040.902605j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    str_0 = "2?\x0c^#d\nue)~3j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    str_0 = 'YHm~v"JM}J3g>qJ'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    float_0 = 5228.855
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    int_0 = 1071
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_508():
    pass


@pytest.mark.xfail(strict=True)
def test_case_509():
    float_0 = -186.135
    int_0 = 423
    set_0 = set()
    dict_0 = {float_0: int_0, int_0: set_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    float_0 = -210.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    float_0 = -3692.48
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_512():
    pass


@pytest.mark.xfail(strict=True)
def test_case_513():
    bytes_0 = b"jtp\xdbm\x08\xee\xa2\xdd;i\xd9\xfa^\xf9\xbbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    str_0 = "~hNqq|',w~uw"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    int_0 = 647
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    bytes_0 = b"\x87\x1f\xf8y\x00C\xb8H\x98c\xadX\xab~\xdb"
    float_0 = 2845.56
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    bool_0 = True
    int_0 = -645
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    int_0 = -368
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    bytes_0 = b"T\xb4\x84$\xda\xf7y\x08N\x0f\x9cN\xed"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    float_0 = -2589.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    float_0 = 777.2537
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    str_0 = "hc${Q\\_"
    str_1 = "J$HK{0sE`uL@` ASr"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_523():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    bytes_0 = b"\xe5\x82\xd4\xd8\x9f\xe3E\xaa\x01J\xda)\x12"
    list_0 = []
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    float_0 = -463.95
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    str_0 = "=#E7`@KS?hG18)ZGpb)"
    module_0.get_new_command(str_0, str_0)


def test_case_528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_529():
    bool_0 = True
    complex_0 = -3065.0709 - 1262.0273j
    module_0.match(bool_0, complex_0)


def test_case_530():
    pass


def test_case_531():
    pass


def test_case_532():
    pass


@pytest.mark.xfail(strict=True)
def test_case_533():
    float_0 = 4418.0
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    none_type_0 = None
    bytes_0 = b"\xb4~C\x89Rx3Q\xadN\xb7\xb5"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    bytes_0 = b"\xd1J-\xd4\xd8X\xec"
    int_0 = -1093
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_537():
    bytes_0 = b"9`*\xca(I\x9f\x86C\xfak\xf0(\\\xc9\xe6\xbc)F"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    str_0 = "\x0c':r6{>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    str_0 = "DE:`"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    int_0 = 56
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    str_0 = "|M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    complex_0 = -1548.31 + 2521j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    bytes_0 = b"\xc9\xeel\xde*]\xb3\xb6zP\xfdJ[\x8c\xb7\xc8\x83"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    float_0 = -349.34421
    int_0 = -1905
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    str_0 = "&LB+,=;}=(^c21p"
    int_0 = -289
    set_0 = {str_0, str_0, int_0}
    bytes_0 = b"\x0c,\xcd\xe2P d\xaaDg.X5"
    tuple_0 = (set_0, int_0, bytes_0, int_0)
    tuple_1 = (str_0, int_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    int_0 = -1535
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    int_0 = 1240
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    str_0 = "\x0cLQz{R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    str_0 = "dj7tiA,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    str_0 = "L(*qQ("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    bytes_0 = b"8H1\xf6\x15{\xaf^)TO\x01p"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    int_0 = -1877
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    int_0 = 1400
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    str_0 = "\x0c:\x0b&7*"
    bytes_0 = b"\xb1\xa9\x917"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    str_0 = ":>'@\x0bc>? 2P\t\x0bX*c$sz"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    bool_0 = False
    str_0 = "cW%F=c+\\JqI"
    list_0 = [bool_0, bool_0, str_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    int_0 = 3586
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    int_0 = 703
    module_0.match(int_0, int_0)


def test_case_565():
    pass


@pytest.mark.xfail(strict=True)
def test_case_566():
    str_0 = '"7+vFOR0mqkj7"\\\\'
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, tuple_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    int_0 = -117
    tuple_0 = (int_0,)
    list_0 = [tuple_0, int_0, tuple_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    int_0 = 2323
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    bytes_0 = b"Tiyo\xbb\xdc,\xe3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


def test_case_571():
    pass


@pytest.mark.xfail(strict=True)
def test_case_572():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    bytes_0 = b"\x8c\xe3z!Z--\xdb^G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    str_0 = '"f|_|'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    int_0 = 1067
    int_1 = 1311
    dict_0 = {int_0: int_0, int_0: int_0, int_1: int_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_577():
    pass


@pytest.mark.xfail(strict=True)
def test_case_578():
    int_0 = 2133
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    str_0 = "O-s9hzJ5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    str_0 = "%0E+?o0dO"
    bool_0 = True
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (str_0, bool_0, bool_0, set_0)
    list_0 = [tuple_0, set_0, tuple_0]
    tuple_1 = (tuple_0, list_0, set_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    str_0 = "5W*r]=9@gH!y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    bytes_0 = b"B\x10\x1e\xb4~kV\x14\xd5\xc5 \xdb\xd4.\xb4\xc7A\x13\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


def test_case_584():
    pass


@pytest.mark.xfail(strict=True)
def test_case_585():
    bytes_0 = b"\xcfKe\xfaQp\xd5"
    int_0 = -345
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    int_0 = 622
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    bytes_0 = b"\x9e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    int_0 = 1162
    bool_0 = True
    tuple_0 = (int_0, int_0, bool_0)
    str_0 = "&Z`OGg4zPJ"
    tuple_1 = (tuple_0, str_0)
    dict_0 = {tuple_1: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    int_0 = 531
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    str_0 = 'c\tP-"F#ILj^%R!'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    str_0 = "<\tC0;>ss&){&kK/5fd1|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    str_0 = "F"
    set_0 = {str_0, str_0}
    str_1 = "J7Z[ =}>yw&\r=ckc6'Ae"
    module_0.get_new_command(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_596():
    str_0 = "6[!{sV IQnz\r~d.s^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    float_0 = -517.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    int_0 = 1445
    list_0 = [int_0, int_0, int_0]
    str_0 = '"R&\r"1q\x0c.'
    str_1 = "Dd\x0b,Sr3\x0b3E/"
    dict_0 = {str_0: str_0, str_1: int_0, str_0: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    int_0 = 3279
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_602():
    str_0 = "ZY5o:*Tc="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    int_0 = -359
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    bytes_0 = b"\x11\xd4\xf7\xee\x11\xeed:\x81P\xbd\xdb\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    bytes_0 = b"4t\xa4\xd4\xf6b\xb1\xaa\x87\xe1\x13Ni\x94\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    str_0 = "#XfAA$B0ZJU-_kv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    int_0 = -1382
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    int_0 = 97
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0, list_0]
    list_2 = [list_1, int_0, list_1]
    module_0.match(list_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    bool_0 = True
    bytes_0 = b"\xc3"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    int_0 = 920
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    str_0 = "i ;#f\nw"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    str_0 = "6[p"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    bytes_0 = b"\x99\xd5\n\xfd\xda\xcc\x1d\x17\xe0|\x06\xab\x7f\xd2\xb98\x971"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    bytes_0 = b"\x7f\xb0!\xf5\x0f\x8eQ\xb8\xa6\x10\xe9\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    int_0 = 3202
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    bytes_0 = b"\x1d\x02\x91\x9b\xd6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    str_0 = 'n:s%qkOHr"SM6tp'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    float_0 = -1400.405
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_621():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    bytes_0 = b"*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    float_0 = -2528.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    bytes_0 = b"\x0f8\x08"
    set_0 = {bytes_0}
    float_0 = 4359.0
    tuple_0 = (set_0, float_0)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    int_0 = -130
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    str_0 = "v:g-NX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    bytes_0 = b"\xf7\x1a\xa2\xaa\xd1\xb3tm\xde"
    module_0.match(bytes_0, bytes_0)


def test_case_630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_631():
    bytes_0 = b"\x1f\xdd[\xc9k\x1f\x9aP\xfd\xbc\xba@g\x1e&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    bytes_0 = b"f(\xd5Y\xd0\x9b\x04\x00\xf0~"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    int_0 = -1134
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    str_0 = "W^&"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_636():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


def test_case_637():
    pass


@pytest.mark.xfail(strict=True)
def test_case_638():
    str_0 = "x"
    str_1 = "aS'[\\\"-tSI%"
    str_2 = "{'"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_1: str_2}
    module_1.object(**dict_0)


def test_case_639():
    pass


@pytest.mark.xfail(strict=True)
def test_case_640():
    int_0 = 639
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    complex_0 = -3081.55907 - 2299.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    str_0 = ""
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    float_0 = 743.86432
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    int_0 = 558
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    int_0 = 973
    bool_0 = False
    complex_0 = 1565.29359 - 2885.54j
    tuple_0 = (int_0, bool_0, complex_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    float_0 = 2827.5202
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    float_0 = -1379.22
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    str_0 = "9lMe`?WJQ_$XlA(EO"
    module_0.match(str_0, str_0)


def test_case_652():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_653():
    float_0 = -1245.93
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    str_0 = "k5W;3\x0c5/#6B.S\x0c4WL"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    str_0 = 'rAa(01^\x0c"i.>UvJ\\l%d'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    complex_0 = 450.89244 - 2972.6j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    float_0 = -189.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    str_0 = "e\nkS7R.vfj*3>J><"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    int_0 = 3706
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    float_0 = -1426.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    str_0 = "`g9bBzNc8Db"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    list_0 = []
    complex_0 = -3830.1525 + 2699j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    float_0 = -1480.006
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    int_0 = -1935
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_672():
    pass


@pytest.mark.xfail(strict=True)
def test_case_673():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    int_0 = 1301
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    str_0 = "|`$_F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    str_0 = "*D<Jp@me\x0c0"
    float_0 = -139.67
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    int_0 = 2397
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    object_0 = module_1.object()
    str_0 = "u_3?;*rIN`6py"
    tuple_0 = (object_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    bytes_0 = b"<"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    str_0 = "\t\x0b!upa$)gwt\\4wZr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    int_0 = 4741
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    int_0 = 391
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    int_0 = -2006
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    bytes_0 = b"\xa8\x92\nW\xa1\xcce\x01P\xbd\xa3\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    complex_0 = 5095.844 + 365.504j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    float_0 = 640.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    int_0 = 2490
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    float_0 = -2572.0
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    list_0 = []
    bool_0 = True
    bool_1 = False
    bytes_0 = b"\xf7\x11d\x8f\x13\x99"
    tuple_0 = (bytes_0,)
    bool_2 = True
    tuple_1 = (list_0, bool_1, tuple_0, bool_2)
    tuple_2 = (bool_0, tuple_1)
    module_0.match(list_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_690():
    str_0 = "?\\\\j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    float_0 = 2696.441863
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    object_0 = module_1.object()
    bytes_0 = b"\n\n\xc8O\xa7\xf5\x928\x95\xb5\x0c"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    int_0 = 655
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    int_0 = 3559
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    str_0 = "=QKd6mIJ+Q"
    dict_0 = {}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    str_0 = "\x0crP;'!7]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    int_0 = -1569
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    int_0 = -555
    int_1 = 2413
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_701():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    bytes_0 = b"\xfa\xd1\xd6_\xc4:Z\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    str_0 = "Tp.;a\tWVp5"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    bytes_0 = b"\xac>\xbc|\x854\xf9xt-\\\x13\x1eBTj\xcf\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    int_0 = -1607
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    int_0 = -2868
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    int_0 = 842
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    bool_0 = False
    str_0 = "_"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    str_0 = '_+e\x0b`9&RA(b=n["@\n"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    str_0 = "2.%[DG7vv2vC2,zi2T!*"
    module_0.match(str_0, str_0)


def test_case_714():
    pass


@pytest.mark.xfail(strict=True)
def test_case_715():
    int_0 = 2317
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    dict_0 = {}
    set_0 = set()
    list_0 = [dict_0, dict_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    str_0 = "Ci^6"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    int_0 = 3091
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    bytes_0 = b"\xc7\xaa\tU\x8b\xcc\xb1j"
    bytes_1 = b"\xa3"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_720():
    float_0 = -796.2
    tuple_0 = (float_0, float_0)
    list_0 = []
    dict_0 = {tuple_0: tuple_0, float_0: list_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


def test_case_721():
    pass


@pytest.mark.xfail(strict=True)
def test_case_722():
    bytes_0 = b"!\xed!\xd8Z\x19\x1dnz|\xf7LcB\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    float_0 = -809.495
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    str_0 = "nK5zg$,H&'`qpV\rNJV\\4"
    tuple_0 = (str_0, str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    str_0 = "L#qB~lA/`JTu;mm\n5Hh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    str_0 = "vr!G6^MIq:jRKdl_\tj-0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    str_0 = "mcz|e[l3]3ua\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    bytes_0 = b"\x8fe\xd1\xd3\xcc\n\xc5{\x86"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    str_0 = "}g;O\n6dE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    bytes_0 = b""
    str_0 = "HpG^sz6Q"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    float_0 = -2482.919194
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    bytes_0 = b"\x81\x98%\x0e\xc8\xf8\x87\xc0\xed\x82o\x17\xfb7[\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    bytes_0 = b"\xff\x11S\xed\xb4\x11\t\xd4\r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    bytes_0 = b"*B\xc0\xf0\xe1Y^\x98"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    int_0 = -2283
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    int_0 = -518
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_740():
    pass


@pytest.mark.xfail(strict=True)
def test_case_741():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    int_0 = 992
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    bytes_0 = b"\xfc\xcfm\x1dk\xc4>N\xf8\xaa<\xdc-\xf0\x83\x13,;\x14\xba"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    int_0 = -563
    tuple_0 = (int_0,)
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    float_0 = -1353.415073
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    bytes_0 = b"4=%\xf7b[1\xa1\x14Y'h\xc4\x9f\xf8\xbd\x9eF"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    bool_0 = True
    str_0 = "Kd)[.}zb T7d"
    bytes_0 = b""
    list_0 = [str_0, str_0, bytes_0, bool_0]
    tuple_0 = (bytes_0, list_0)
    tuple_1 = (str_0, bool_0, tuple_0, bool_0)
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_2 = (bool_0, tuple_1, list_0, set_0)
    module_0.get_new_command(tuple_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    int_0 = -604
    bytes_0 = b"\x0b\xb6\xd4 \xd0\xda\xdcM\x9f"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    none_type_0 = None
    str_0 = "z-i<3pr>"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    str_0 = "R^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    bool_0 = False
    none_type_0 = None
    module_1.object(*bool_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    int_0 = -4577
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    int_0 = -1577
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    bytes_0 = b"\xe7\xf4\x8d\xf5\xcc\x90s\x17\xd1\x14\x87bQ\xc3\xc1\x9c\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    int_0 = 77
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    str_0 = "^;>\\MxJ"
    bool_0 = False
    bytes_0 = b"?SS\xb2\xd6\xe7\xf0"
    tuple_0 = (str_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    str_0 = "wOhv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    int_0 = -1240
    tuple_0 = (dict_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    str_0 = "h@J\t<n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    bytes_0 = b"\r2\x93\xea9\xd9\x86\xdc\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    float_0 = -1833.260527
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    bytes_0 = b"j\xe8\x84ju\xfa\xda|\xcf\xf4\xbb\x17<\x03\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    float_0 = 1703.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    bool_0 = False
    bytes_0 = b"\xe0@J\xa3\x84\xf2\x12\x91\xe4\x9e\xccL!\xf0IC\xe4%^\xa7"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    complex_0 = 4066.1585 + 2806j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    bytes_0 = b"\t\xa9\x8f\xf7)^'*\xbc\x10\xe2>\x958\x05-\xd2\x14\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    list_0 = []
    bytes_0 = b"\xde\x8aH\x81\xf9_\x19\x19[\xddX.\xdc"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    bytes_0 = b"*5I\xb6\xdf\xefkogT\x1cy\x83:\xdaf\xd7\x99L"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    bytes_0 = b"W\x13\x03\xads\xf8I\x84\xdd"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_776():
    bytes_0 = b"\xb0\xc3\x06m\x8aP\xc1'7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    int_0 = -825
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    bytes_0 = b"\xd2\xfc6\x8b\xda\xce\xed\x90"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bool_1 = True
    tuple_0 = (set_0, bool_1)
    tuple_1 = (set_0, set_0, tuple_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    complex_0 = -1159.7 - 911.6269j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    bytes_0 = b"\x9a.YZ\x997\xd1\x88=\xcf_"
    tuple_0 = (object_0, list_0, object_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    str_0 = "mo%QOyPs|fC(c[JNmC"
    int_0 = 159
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    bytes_0 = b" Z\xcc\xd8\xa12G\x16\xf0\xcf&\xf2\xb1K\xb42U\xfc\xb9"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    str_0 = "o%gs+8`1;"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    str_0 = ""
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    bytes_0 = b"L\x03\xa9\xcbD!\xe2\x9d"
    module_0.match(bytes_0, bytes_0)


def test_case_789():
    pass


@pytest.mark.xfail(strict=True)
def test_case_790():
    bytes_0 = b"\xf2\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    float_0 = -688.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    bytes_0 = b"\x12U9T\x8b\x91\xc4\x1cDO\x07\xcb,\xe0%"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    float_0 = 347.908569
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    str_0 = 'K"Mn<M\x0c'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    none_type_0 = None
    float_0 = -96.15398
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    int_0 = -1373
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    str_0 = "u:cCvi'EAje\x0b#6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    bytes_0 = b"\x91\xb0\x07}\x9d\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    bytes_0 = b"\xcc\x1d\xd4\xc0$\x99\xb6\xa7\xc9%\xddg\x1dl\x06\x93\xc2!\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    int_0 = 216
    module_0.match(int_0, int_0)


def test_case_801():
    pass


@pytest.mark.xfail(strict=True)
def test_case_802():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.get_new_command(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_804():
    list_0 = []
    str_0 = "J^Plbh#\r]"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    str_0 = "%O"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    int_0 = -4
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    bytes_0 = b"\xe2\xfe\x84\x0e\xda"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    bytes_0 = b"\xa8\xf4\xd3 \xd2\x94\xf1\tdY\x99\xd6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, list_0)


def test_case_810():
    pass


@pytest.mark.xfail(strict=True)
def test_case_811():
    str_0 = "&EPNHO.5"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    none_type_0 = None
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, none_type_0: bool_0}
    module_0.match(none_type_0, dict_0)


def test_case_814():
    pass


def test_case_815():
    pass


@pytest.mark.xfail(strict=True)
def test_case_816():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    str_0 = "S%1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    int_0 = 2676
    bytes_0 = b'$ d\t;"\x85.\xd1\xef'
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    str_0 = "%\t,3\r1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    str_0 = "5qg\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    int_0 = -907
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    int_0 = -545
    tuple_0 = (int_0, int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    bytes_0 = b"\x9d\x00 \xf8\x07$\x03\xf2t\x1c\xfa\x84$0"
    float_0 = 1127.05
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    bytes_0 = b"e\xec\xfdA"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    bool_0 = False
    str_0 = "\tJsVD3<m"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    int_0 = -1130
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    str_0 = ".r*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    str_0 = "C8{C5y0{7`%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    tuple_0 = ()
    list_0 = [tuple_0]
    list_1 = [list_0, tuple_0, tuple_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_831():
    complex_0 = -2050.08383 + 3231.34187j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    str_0 = "6a{~Klo\x0btJcsQWw-Dd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    int_0 = 3851
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    float_0 = -94.764
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    int_0 = -458
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    float_0 = 1025.722
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    str_0 = "on`2AB\t"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    int_0 = -782
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    str_0 = "qWVs#\\O.$>:/emp\\P?DY"
    str_1 = "Bw%/"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    str_0 = ",e`"
    str_1 = "5iK=^rtSa\x0cU4gmhw"
    str_2 = "f[\\I`<d7=~"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    bytes_0 = b"{R\xdd%\xc6\xa5g\x9c\x0e\xb9\x0e\xff\xe9\xf1\xae\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    int_0 = 6869
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    str_0 = "Zg4Qs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    bytes_0 = b"\xb8\xb0\xcd9\xb8\x86\xb4G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    bool_0 = False
    tuple_0 = (bool_0,)
    str_0 = "t4>23i3x(w6\\J"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    str_0 = "HVzl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    bytes_0 = b"\xbdS\xd6\x1b\xbb\x01\xc8\x82f\xf3\xab\x84\x8d\xd8S\xb4\xa1\x06\x1bZ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    str_0 = "e!d\\c4nB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    bytes_0 = b"\xee\xad\xf5\x07>\xd2nX>\xf2\xb6\xd8J\xd3\xd1;\xeb\xf9\xa2\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {bool_0: set_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    int_0 = -1745
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    bytes_0 = b"9\n\xa2\x14\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    bytes_0 = b"\xf4\x19\xb7\xd3\xb6y\xe7.3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    bytes_0 = b"\n0g\xec\x1d\xa0B\xca\xce\xac\xed\x9d\xdbjyW\xbdj"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_856():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    bytes_0 = b"7pP"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    int_0 = 1154
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    float_0 = -481.05808
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    int_0 = 710
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    tuple_1 = (tuple_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


def test_case_863():
    pass


@pytest.mark.xfail(strict=True)
def test_case_864():
    bytes_0 = b"\xb0\xef\r:\xc7^\x94-\xed\xf8\x03"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    str_0 = "c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    bytes_0 = b"6\xaa\xdd\xa6\x1e\x9f&q}\xaeJ\r#X`\x97\xa4\xc2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_868():
    pass


@pytest.mark.xfail(strict=True)
def test_case_869():
    float_0 = -584.09599
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    bytes_0 = b"\x97 \x7f\xae\xd1\xff\x1e\x0f\x0c}\xaa\xa7]X\x87\x03\x1f\xff"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bool_0)
    tuple_1 = (tuple_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    bytes_0 = b"!K\xa6\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    bool_0 = False
    float_0 = -1313.391
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    float_0 = -1400.232
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    int_0 = 1431
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    int_0 = 2203
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    str_0 = "b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    int_0 = -972
    str_0 = "["
    none_type_0 = None
    str_1 = "q2)aPd /(ezS@F.rZ\rN"
    str_2 = "Reh8D)L_rF|?"
    str_3 = '{PP\r3?n;\\h;(@qpzx"|?'
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    int_0 = -111
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    int_0 = -4752
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    bytes_0 = b"\xc8`$=n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    int_0 = -1061
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    str_0 = "N_\r#,$s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    none_type_0 = None
    str_0 = "%m\x0bO$T\rUq<6c+UAv-4"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    bytes_0 = b"\xcb\xbbX\x81O>j\x0b\xa5\x8b\xba\x10\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    bytes_0 = b"\x08\xc1\xeapo}\xc0l\xfbP\xee\xb0\x82\x18\x8b\xd5j\xcaZ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    bytes_0 = b"s\xf1;\xe5`z\x88\xfc\xbd\xff\xe9\xb2\xe3g\xf5\x06?\x966"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    bytes_0 = b"\x9e\xd0\xa2{\xfe\x8a"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    bytes_0 = b"\xb2\xb4V\xce\xee"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    int_0 = -2807
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    dict_0 = {}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    float_0 = -926.05
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    str_0 = "^<5.,#OgkJs"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    bytes_0 = b"r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    str_0 = "&Y4u$%wT?bairA$^\x0bZb_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    str_0 = "\\\x0b|uc|$zy~Pc9Ho"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    str_0 = "7G-`y.1eIE*bp:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    bytes_0 = b"%g\xe3\x1c\x9e\x86\x1d\x01\xfb\x1cRb\xbc\r-z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    str_0 = "kp{dKaRkup}Y/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    bytes_0 = b"\xec?\n\x15\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    complex_0 = -1975.265279 + 816.2316j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    complex_0 = 3070.8 + 2830.96j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    int_0 = 379
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    str_0 = "Q<nb#iX0&V%&E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    bytes_0 = b"\xa0\xd2\x84\xf8\xafd=\xb2/\xc4\xd2\xbag"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    complex_0 = -3047.789 + 3163.009j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    float_0 = -2522.1
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    bytes_0 = b"\x10\x96\x94\xaf\xf5\xb7v%\x95\xd4\xb4\xa97\xc4"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    int_0 = 1699
    int_1 = -1473
    bool_0 = False
    tuple_0 = (int_0, int_1, bool_0)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_920():
    complex_0 = -4358.2 - 1563.17945j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    int_0 = 313
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    float_0 = 79.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    float_0 = 212.629254
    str_0 = "Aj#ZU%"
    int_0 = -842
    tuple_0 = (float_0, str_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    bytes_0 = b"5\xd9\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    bytes_0 = b"\x94\xc0\xfb\xb2\x1ea3\x16t\xc2"
    int_0 = -4306
    list_0 = [int_0, bytes_0]
    float_0 = 551.396737
    object_0 = module_1.object()
    tuple_0 = (float_0, object_0)
    tuple_1 = (bytes_0, list_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    bytes_0 = b"\x05`\xfe\x198d\x1c\xf2\x01\xbb\xaf\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    bytes_0 = b"\xd6\x14,\xaeP\xb4?\xfb\xbf\x82\xf9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    int_0 = -173
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = "qBk\n\x0c6\x0b#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    float_0 = -1863.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    int_0 = 4348
    module_0.match(int_0, int_0)


def test_case_934():
    pass


@pytest.mark.xfail(strict=True)
def test_case_935():
    bytes_0 = b"\xc9\xcf\xd1=\x1a\xab"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    bytes_0 = b"\xd2:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    float_0 = 553.08
    bytes_0 = b"\x18_\x15\x91\xcb2@"
    str_0 = "]Xes\\ R)\r"
    tuple_0 = (float_0, bytes_0, str_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    str_0 = "9ts&#="
    set_0 = {str_0, str_0, str_0, str_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    int_0 = -2593
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    float_0 = 1295.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    bytes_0 = b"\xf7R\x8b\xdbb"
    float_0 = 289.344
    bool_0 = False
    tuple_0 = (bytes_0, float_0, bool_0)
    set_0 = {tuple_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    str_0 = "5v[QM&Yv5;g%wYD)w1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    str_0 = "M7<]drw\\|A)K"
    str_1 = 'f"cDv%'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    str_0 = "`nPnU@ls\"'\x0bN`3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    float_0 = 662.7
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    int_0 = -47
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    int_0 = -2156
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    dict_0 = {tuple_0: tuple_0, bool_0: tuple_0, tuple_0: tuple_0, tuple_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    str_0 = "Ng5"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    bytes_0 = b"\xfeE|p"
    list_2 = [list_1, bytes_0, list_1, list_1]
    tuple_0 = (list_2,)
    module_0.match(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_954():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    float_0 = 3250.82
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    int_0 = -3037
    bool_0 = False
    str_0 = "p1i#3q8F.u0]\x0ca"
    tuple_0 = (int_0, bool_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    int_0 = 2365
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    list_0 = []
    str_0 = ")4WO%Hd^N"
    bool_0 = True
    set_0 = {str_0}
    tuple_0 = (list_0, str_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    str_0 = "T>UHKO&Ue"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    int_0 = -1069
    module_0.match(int_0, int_0)


def test_case_961():
    pass


@pytest.mark.xfail(strict=True)
def test_case_962():
    str_0 = "QU1\rL@KD\r',x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    bytes_0 = b"\xa5\x1en\x1d\xe3\xe3\x10\x9c\xac\x80\xba\xaf\x01\xbfu@\xa9\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    bytes_0 = b"~)!\xb8L\xe9\xd2\x97m\x03\xc0\x91`\xf4"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    object_0 = module_1.object()
    bytes_0 = b"\xe6\xd4d\xd3\x11\xf4"
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    str_0 = '"l'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    float_0 = -1558.17815
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    bytes_0 = b"\x0e\x0e2n\xe9\x96\xbcZ\xf8G"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_973():
    pass


@pytest.mark.xfail(strict=True)
def test_case_974():
    float_0 = 949.84072
    str_0 = "\\ve3K,Og93{.y=+\nK9"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    int_0 = -1010
    module_0.match(int_0, int_0)


def test_case_976():
    pass


@pytest.mark.xfail(strict=True)
def test_case_977():
    str_0 = "B"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.match(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_979():
    bool_0 = True
    set_0 = {bool_0}
    bool_1 = True
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_980():
    bytes_0 = b"KRdcH\x028\x11\x10ALA\x16\xc2\xdb\x8c5\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    float_0 = -4424.187
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    str_0 = "n#XI2N"
    set_0 = {str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    complex_0 = -884.21 - 1841.94989j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    bool_0 = True
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


def test_case_985():
    pass


@pytest.mark.xfail(strict=True)
def test_case_986():
    bytes_0 = b"?Pm\x89\xc8\xfa\ro_\x9a\x7f79"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    float_0 = -2066.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    str_0 = "Fa6@`=("
    str_1 = "(Ry\rOl\rTDj5SKT7&$X"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    float_0 = -1431.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bytes_0 = b"\xe9\x07\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    str_0 = "~H;F6y{[8e^"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    list_0 = []
    tuple_0 = (list_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    bytes_0 = b"\xea\xf49\x03\xfb\xb3\x14)%\x80^\xe4\xe3\xa5\xc7\x8b\xf0\xb4\xa6y"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    bytes_0 = b"\x82\xbd#\xdc\xd5\x84\x9e\xde\xa8\xab\x16\xef\x05\xba\xef\xbb\x07m\xcc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    complex_0 = -2327 + 1801.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    str_0 = "sM"
    module_0.get_new_command(str_0, str_0)


def test_case_998():
    pass


@pytest.mark.xfail(strict=True)
def test_case_999():
    bytes_0 = b"\xf8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    int_0 = 468
    set_0 = {int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    bytes_0 = b"\xfb\xac\xee\xf6]s\xf2m\xbfp4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    int_0 = 311
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    str_0 = "6eN%+("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    bytes_0 = b"\xae.9\xfdH_S\x99ag\x90ujy\xb6\xa6y\x13"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    int_0 = -482
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1009():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1010():
    bytes_0 = b"\\\x9d\x88\x9b\xa6y\xd6"
    list_0 = [bytes_0, bytes_0]
    str_0 = "*D_Tbb%\x0cc3Q"
    tuple_0 = (list_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    str_0 = ")OJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    str_0 = "[}EPx_u$\x0buM\x0ciM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    bytes_0 = b"W"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    str_0 = "\rVr,[q\tLdc6.eI&/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    str_0 = "&5h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    bytes_0 = b"\xb5\"\x82\xd6~E\xba.\xe9\xaf\x042'\xcco"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    bytes_0 = b"\xb3\xcdl\xdf'\x9a\x8b4\xa4\xd3\x16\x85\x9d\xa3W\xb1M;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    set_0 = set()
    bytes_0 = b"\xd5\x8e"
    list_0 = [bytes_0, set_0]
    dict_0 = {}
    tuple_0 = (set_0, list_0, dict_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    int_0 = 2924
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    tuple_0 = ()
    str_0 = "F"
    dict_0 = {tuple_0: tuple_0, str_0: tuple_0, str_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    complex_0 = 1366.8871 + 4439.34j
    str_0 = "GD9>z"
    tuple_0 = (complex_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    str_0 = ".A\x0cxU9V0>w"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    int_0 = 1043
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    int_0 = 3261
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    int_0 = 1042
    list_0 = [int_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    str_0 = "pM*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    complex_0 = -951.9216 + 55.834j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    int_0 = -1099
    bool_0 = False
    complex_0 = -4176.043501 + 1686.91j
    tuple_0 = (int_0, bool_0, int_0, complex_0)
    set_0 = {tuple_0}
    tuple_1 = (set_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    bytes_0 = b"G\xc1\x1a\xb9!\xfb*\x18\x95V\xc6\xe1\x08\xb5\xc3n"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0, set_0)
    tuple_1 = (tuple_0, bool_0)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    int_0 = 2672
    module_0.match(int_0, int_0)


def test_case_1034():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1035():
    int_0 = 606
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    float_0 = -87.7247
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    bytes_0 = b"W\x8dh|B\x95\x1e\x1a\xe1\x1a7/\xb3\xf0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    bytes_0 = b"\xd3\xf0\x80'\xd6\xbf\xdc\x90j\xda]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    bytes_0 = b"\x90\x84\xdc5|\xc0\xb5"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    str_0 = "-E"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    bytes_0 = b"\x00~\x0e;g^\xfb\xae\xaer\xde3\xfa\x0f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    float_0 = -1204.743168
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    bytes_0 = b"sc\xd2\xb9t\x16\x19\x904\xa2\xb0-"
    module_0.match(bytes_0, bytes_0)


def test_case_1048():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1049():
    bytes_0 = b"\x8e"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    int_0 = 5789
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    int_0 = 1358
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    bytes_0 = b"\xc8s\x1d\x9d\xa0A\xe2"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    float_0 = -2985.46
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    int_0 = -3291
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    str_0 = "&"
    list_0 = [str_0, str_0, str_0, str_0]
    str_1 = "t1"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    bytes_0 = b"m{/\xe5\xf1"
    dict_0 = {}
    list_0 = [bytes_0, bytes_0, bytes_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_1059():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1060():
    float_0 = 2588.8552
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    bytes_0 = b"\xa3m\xc8\xee\x12\x08\t\xd66\x91Y\x07\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    int_0 = -661
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    str_0 = "Oz#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    float_0 = -1884.2868
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    int_0 = 4172
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    none_type_0 = None
    float_0 = 4971.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    int_0 = -318
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    float_0 = 319.44
    str_0 = "+"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    bytes_0 = b"\x83\xda\xdeSp\xff\x03\x99O\xd0^F-\xefx9\x1d\x10\x1f"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    bytes_0 = b"{9j"
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: set_0, bool_0: set_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    str_0 = "Y)>Mls`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    float_0 = -53.485
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    bytes_0 = b"m\xe5\xb5\xa5\xc0\xe2\xba"
    bool_0 = True
    dict_0 = {bytes_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    none_type_0 = None
    int_0 = -1682
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    bytes_0 = b"\xb0\xf9Cr\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    str_0 = "iz\\QWEp Z)CT`y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    bytes_0 = b"\x89=\xf6\xf7zA'\x1fh\x9f\x95\xc7il\xd1\xb4\xfd\x89"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, bytes_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    bytes_0 = b"\xb3\xa3g=w\xf6\x1f\xc5}}\xf3\xce\xba\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    complex_0 = 291.251645 + 1228.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    bytes_0 = b"n\xcd2k\x80Y\xe0S\xf8"
    int_0 = -547
    dict_0 = {bytes_0: int_0, int_0: int_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    str_0 = "`rS[S%"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    str_0 = 'hMEP\nPStIt7x(E+"'
    module_0.match(str_0, str_0)


def test_case_1091():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1092():
    str_0 = "U2xhKPiCUkE\t|-(&:9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    bytes_0 = b"\xbd\xb8\xd4\x85o.\xb4^`\x89\xc5\xaa\xd1|2"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    str_0 = "`=%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    int_0 = -801
    int_1 = -471
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_1}
    module_0.get_new_command(dict_0, int_0)


def test_case_1097():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1098():
    complex_0 = 229.44704 - 1375j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    str_0 = "z`)?k;LXp<b;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    str_0 = "l~fq?Ac"
    int_0 = 2271
    tuple_0 = (str_0, int_0, str_0)
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    bytes_0 = b"\xd8\x91byo\xbe91_\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    float_0 = 699.9294
    bytes_0 = b"\xaf\xd1\xdb\x0b\xfad\x07\xe4\xf5t\x81;\x91b\xd3\x02e\x0e"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    str_0 = ".]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    str_0 = "Dx Oz\tXWh%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    str_0 = "W]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bytes_0 = b"\x11\xd1C\\%Vv\xbb\xed/\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    bytes_0 = b"$\x1b\xfe\xb4\xd0\xbc\x02\xcb\xa5\x97*z\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    complex_0 = -2204.4307 + 1987.1j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    tuple_0 = (list_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    bytes_0 = b"s/u\x8bj\xb0\x03\xf34/<Q?\xe4\xa0\xe2\x8f!\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    bool_0 = True
    set_0 = {bool_0}
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    float_0 = -785.0
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    bool_0 = True
    str_0 = " kLR7mus`@e%Do\x0bGe{"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    bytes_0 = b"\xc52\xbbf\xe5\xf7\xf9\x04\xabFl\xca\x10g\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    float_0 = -1075.6749
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    int_0 = 1264
    dict_0 = {int_0: int_0, int_0: int_0}
    int_1 = -3089
    tuple_0 = (dict_0, int_1)
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    set_0 = set()
    tuple_0 = (set_0,)
    list_0 = [tuple_0]
    str_0 = '7,Q4C4VJBnv_r"Mz"for'
    list_1 = [list_0, str_0, str_0]
    module_0.match(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    list_0 = []
    object_0 = module_1.object(*list_0)
    str_0 = "K5qZS\x0bDqSWP39+`"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    str_0 = "\x0bb~m,"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    float_0 = -1345.0
    module_0.get_new_command(float_0, float_0)


def test_case_1129():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1130():
    bytes_0 = b"\x0b\xdd\n\xba\xff\x91j\x0c1\xdel\x8c\x873}k"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    tuple_0 = ()
    list_0 = [tuple_0]
    bool_0 = False
    tuple_1 = (list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    float_0 = 159.47152
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


def test_case_1135():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1136():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    bytes_0 = b"\xd1\x82h"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    complex_0 = 2553.927 - 3364.87732j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    bytes_0 = b"s\xca\xa3\x9c\x11\x02,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    bytes_0 = b"E>qpm\x14B\x9b\xaa\xe0\xd2\\\xd1\xf2\xa33\x9d"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    bytes_0 = b"\x06w"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    int_0 = -35
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    float_0 = -517.28
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    int_0 = 3829
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    list_0 = []
    bytes_0 = b"\x83\x0f\xd2xK\xfe2\x9cq\xa6"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    float_0 = 2049.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    str_0 = "KlHqko<3.8X\tp<yq\r>U"
    bool_0 = True
    set_0 = {bool_0}
    bytes_0 = b'\x91":\x7f\xf3;\xf6\x87\x9a\xbd\xe37\xe6'
    bool_1 = False
    tuple_0 = (set_0, bytes_0, set_0, bool_1)
    tuple_1 = (str_0, bool_0, tuple_0)
    list_0 = [tuple_1, str_0, str_0]
    str_1 = ";-1\tLJIkL@Z"
    dict_0 = {str_0: str_0, str_1: tuple_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    int_0 = 3002
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    str_0 = "}4f`\t,!E3h1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    int_0 = -347
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    float_0 = 3030.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    int_0 = 1390
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    int_0 = 2325
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    float_0 = 1402.0
    set_0 = {float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    bytes_0 = b"\xe3d"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    int_0 = -3989
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    str_0 = "\rkJm"
    list_0 = [str_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    int_0 = 16
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    bytes_0 = b"\xbe\x87:\x8c\xaa\x0f\x11g\xfb\x14\x07v\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    bytes_0 = b"\xc7\x92&\xcb\x86\x95\xa3\xf6\xb2\x06u\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    int_0 = -213
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    bytes_0 = b"\x9d\xcd\xec\xdc\xa4e\xfb/\x11\x89\xe0\xbc[7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    float_0 = 2937.27862
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bytes_0 = b"%\xb1\x13\xd6\x16\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    complex_0 = 789.717 - 2516.170773j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    str_0 = "a@#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    int_0 = -3084
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    int_0 = 3540
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    int_0 = -441
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    str_0 = "#YlH][&nB+jT*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    float_0 = 2204.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    bytes_0 = b"\x8c\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    int_0 = 2454
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    str_0 = "d5!;p>I|vC.\\]\r]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    float_0 = 1781.2983
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    complex_0 = -364.22399 - 737.67271j
    module_1.object(**complex_0)


def test_case_1178():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1179():
    float_0 = 1207.6
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    str_0 = "gY< Ag8qs-j{6R8-r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    complex_0 = 1528.507203 - 981.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    str_0 = "I"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    bytes_0 = b"\x90\xddX\x85"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    str_0 = "@)oYs@9QC]3c]rh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    bytes_0 = b"\x9c"
    set_0 = {bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    str_0 = "c\tm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    int_0 = 1769
    bytes_0 = b"\xeb\xe3\xbf\xbbj"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, bytes_0: int_0}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_1191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1192():
    float_0 = -331.094
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    int_0 = 2630
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    int_0 = -2210
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    str_0 = "(,4\r\x0c&Pz6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    bytes_0 = b"\x8f\xc14\x10Bw\xcd\xc2q3\xb3E\x03Pz]~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    int_0 = -4071
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    int_0 = -417
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    int_0 = -1378
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    complex_0 = 1499.3 + 1541.96815j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    tuple_0 = ()
    bool_0 = False
    set_0 = {tuple_0, bool_0}
    list_0 = [set_0, set_0, bool_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    str_0 = "2kT\x0cGC5cs,\n"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    int_0 = -1551
    complex_0 = -4518.17457 + 852.4j
    set_0 = {int_0, int_0, int_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    bytes_0 = b"\xdeh"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    int_0 = -608
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    float_0 = -2260.0
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    bytes_0 = b"y\x94\xf1\x1c\xedm\xc1\xac\xf1\xd5\xaeI>\xa4\xe5\xf6\xa5m\xcf\xe6"
    float_0 = 1566.0
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    bytes_0 = b":bD\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    float_0 = 503.3697
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    float_0 = -3888.6
    str_0 = ",.'6/4&,"
    str_1 = "^#c\t(^N7ayM!5 enR@I;"
    str_2 = "55UB^uk!f/pbLcE~sz&"
    dict_0 = {str_0: str_0, str_1: float_0, str_2: str_0}
    module_1.object(*float_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    str_0 = "'fiA/++6V2Ap\x0b^Dx9p)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    bytes_0 = b"\xd9\xa9\xecE\x9d7"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    int_0 = -2503
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    bytes_0 = b"\xe1Zw\xaf\x15e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    int_0 = -168
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    float_0 = -392.6
    str_0 = ";:-\r:m>*~!oM]H)"
    module_0.get_new_command(float_0, str_0)


def test_case_1219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1220():
    str_0 = "\rXUq_-?~zX4V`B\n"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    str_0 = ";o7?>u\\DG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    int_0 = -968
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [int_0, int_0, object_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    str_0 = "Or<r3PG?|{{"
    int_0 = -3822
    list_0 = [str_0, str_0, int_0]
    module_0.match(list_0, str_0)


def test_case_1224():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1225():
    int_0 = -399
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    str_0 = "|QxGSI{2s"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    none_type_0 = None
    bytes_0 = b""
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    str_0 = "(0i:l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    float_0 = 2023.951
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    int_0 = -2462
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    int_0 = 1540
    set_0 = {int_0, int_0, int_0, int_0}
    str_0 = "/"
    tuple_0 = (int_0, set_0, str_0, set_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    bytes_0 = b"\xcf\x90X}\xb4\xbdp\xaa\rb\xcb\xbb\xbe\x03\xae\x16\xae\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    bytes_0 = b"\x9d\x0f\xebd\x04\xa2M`\x8dB\xfc\xcc\xb3\x98\xb2\x9c\xd4\xc9"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    list_0 = []
    str_0 = "H4?3PZ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = False
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    int_0 = 1976
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    bytes_0 = b"\x08$\x042\x02\xa4\x1a\x1cC\xcai\xd6\xf4\xe0\x06\xe6\xe4@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    float_0 = -795.353255
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    str_0 = "1P>clgp[Q+C`"
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, object_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    bytes_0 = b"\x924!\xdf\x8er"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    int_0 = -1589
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    str_0 = "4i0QWV\x0bq#"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    str_0 = "n_<\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    float_0 = -1118.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    str_0 = "R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    str_0 = ">~V(+>(0@$!P;IE}"
    module_0.match(str_0, str_0)


def test_case_1253():
    pass


def test_case_1254():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1255():
    dict_0 = {}
    int_0 = 4831
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    int_0 = 902
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    str_0 = "}F"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    int_0 = 111
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    str_0 = "o]*\t4d!Qk-)>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    bytes_0 = b"\to\x93\x1dBp=\xc3\x7f\xee$\xd9\x17\xeb6L\xfa6\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    complex_0 = 107.5524 + 1814.38659j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    bytes_0 = b"\x08i\x05\xdb\t38\x982E\xfd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    tuple_0 = ()
    bool_0 = True
    str_0 = "=^(D\tbG4?XGbc5\n\x0c^"
    dict_0 = {tuple_0: tuple_0, tuple_0: bool_0, tuple_0: bool_0, str_0: tuple_0}
    tuple_1 = (dict_0,)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    str_0 = "I5e"
    module_0.get_new_command(str_0, str_0)


def test_case_1266():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1267():
    str_0 = ')JpF"GeyDb'
    bool_0 = True
    str_1 = "6XMo+v/3(;)v"
    str_2 = "\ryrv3wl="
    str_3 = "DjT`6dg<:\t:&&+"
    dict_0 = {str_0: bool_0, str_1: bool_0, str_2: bool_0, str_3: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    int_0 = -1884
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    float_0 = 1660.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    int_0 = -2153
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    float_0 = 1240.8
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    str_0 = "\\_bCJpQj$)kO"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    int_0 = 114
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    str_0 = "x~V9TvDgj&yHA&@'^?"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bytes_0 = b"\xd3\xc2\x0c\xa3\x12\xcbX\x95&~"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1277():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1278():
    int_0 = 1262
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    float_0 = 488.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    bytes_0 = b"\xc0\x1a\xbdC\xc51Dt[\xe7T\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    str_0 = "xFZxKTz;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    list_0 = []
    str_0 = "cWyyC202,=K\tPxIZK]?n"
    complex_0 = -6884 - 3390.8594j
    dict_0 = {str_0: complex_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    str_0 = "%WC\n<}IT(b,\rV]e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    int_0 = -2936
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    int_0 = -4294
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    str_0 = "a3nPV\\BsGdH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    list_2 = [list_0, list_1, list_0, list_1]
    module_1.object(*list_2)


def test_case_1291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1292():
    int_0 = -143
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    str_0 = "lB/]%D\x0cKBR6\rtss)Mv "
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_1294():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1295():
    bytes_0 = b"\xc7\xf4y\xda\x80\xe1/{L\xeb\xeb\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    bytes_0 = b"]\xae\x16\xf4\x04\xbcK\xee\x02>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    int_0 = 645
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    bytes_0 = b"g\xdb\x01lh[\xe4\xacX"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    str_0 = '_*@i}"6 ::qQ'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    complex_0 = -219.7796 - 483.579303j
    bytes_0 = b"*D\xbbU)b\xb6\xfa\x90\xfd\x00\xecr\xf7\x0e\x08"
    tuple_0 = (complex_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    str_0 = "V^G#,Q2F$5MhV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    int_0 = -629
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    int_0 = 1561
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    bytes_0 = b"\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    bytes_0 = b"b\xc5o%\x8e;\xa7<\x03P\xc6\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    float_0 = 1718.63
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    int_0 = 693
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    bytes_0 = b"\xe6; W\xcd\x8d\x02\x04\xadN\xb5\xb5\x8f\x95\xbf[\xe2\xd6\x08\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    bytes_0 = b"h\x94\xb0Ph(\xd2\xe0[\x08\x8c\x19~\xedx\x0b\x18\xd5"
    float_0 = 2554.8
    tuple_0 = (bytes_0, float_0, float_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    str_0 = "lUm]vOM>ej@H1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_1315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1316():
    int_0 = 2935
    module_0.match(int_0, int_0)


def test_case_1317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1318():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    str_0 = "3F\r,$+rdWb.vIY)P$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    int_0 = -2903
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    str_0 = "9b%mZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    float_0 = -69.729474
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    bytes_0 = b"1\xb0\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    int_0 = -2354
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    bool_0 = False
    str_0 = ')^"~50\x0c4zET"&(l\t7\''
    tuple_0 = (bool_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    float_0 = 1088.8477
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_1327():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1328():
    str_0 = "e?8|\x0bS\\@vCK)"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    bytes_0 = b"<\xb3Y\x89#j\xf1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    str_0 = '2^49k^J)\x0bbN\nLWU"\rQ'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    bytes_0 = b"/\x98_\x86+\xbe\x16\xb8!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    int_0 = -148
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    bytes_0 = b"\xb8\x16\x10\xc3\xa5\xcc&\x18\xb7\x82"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    str_0 = '"[Q,{q5RCwv'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    str_0 = "g1U\\/oi#wJ5MA\x0bD"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    str_0 = "J{[z:7U2*7ElOp Q6"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    int_0 = -452
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    str_0 = ")vV|W_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    int_0 = 3524
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    str_0 = "nTs*4c%`_~KA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    float_0 = 1325.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    str_0 = ")2Uh"
    int_0 = 2009
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    bool_0 = True
    bool_1 = False
    int_0 = -255
    tuple_0 = (bool_0, bool_0, bool_1, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    float_0 = 749.4
    float_1 = 3009.8
    int_0 = -97
    tuple_0 = (float_0, float_1, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    bytes_0 = b"\x07V\xeb43\x1b\xcf"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    str_0 = "tl8"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    str_0 = "J'l _eCjtLi"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    str_0 = "0V"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    bytes_0 = b"\xe0\x15/\xc8\xf9\x1b\x06\xeb\xc8\xdeP\xbau\xa6\xd1\x18"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    int_0 = 1986
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


def test_case_1355():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1356():
    str_0 = "bZW;e3M=gVt%n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    int_0 = -3528
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    float_0 = -2317.09
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    bytes_0 = b"7\xfd\x1d\x9f\x8b\xa9v\xa0t+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    bytes_0 = b"\x05`\xaf\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    none_type_0 = None
    bytes_0 = b"\x05\xf6?\xd4E\xfe\xd9$p"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    str_0 = ":\x0b9&wb4io-\npE!"
    set_0 = {str_0, str_0, str_0}
    bool_0 = True
    dict_0 = {str_0: bool_0}
    tuple_0 = (set_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    int_0 = 1322
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0, bool_0: bool_0, tuple_0: tuple_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    str_0 = "`*+\\^<I+s7<K"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    float_0 = -910.7337
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    str_0 = '5Wb`V_a-"|D3pWD'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    int_0 = 1713
    bool_0 = False
    set_0 = {int_0, bool_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    bytes_0 = b"\xb2o\xb1A\xd8/\x17\x91r\nM\x1b\x16\xb1"
    float_0 = 2102.4
    tuple_0 = (bytes_0, float_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    bytes_0 = b"\x84;\xbb%+\xaa\xa5\t\x99N\x1ej"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    int_0 = -960
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    int_0 = 460
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    int_0 = -2131
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    str_0 = "B*3#_*T+Aw"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    float_0 = 5180.4461
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    str_0 = "N"
    bytes_0 = b"\xe8\x9eD\xb3\x91\xb4I*"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    str_0 = "Ij"
    module_0.match(str_0, str_0)


def test_case_1382():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1383():
    complex_0 = 1708.93071 + 2065.3275j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1384():
    pass


def test_case_1385():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1386():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    int_0 = -532
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    int_0 = -455
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    bytes_0 = b"gH\x82\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    complex_0 = -527.32064 - 2119.01178j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    bytes_0 = b"4\x7f8\xb7\x19r\x112\x03\xc5\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    bytes_0 = b"h\xeb]A\xd7!"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    str_0 = "8{vw\x0c>5UD{1}k9jjbon"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    bytes_0 = b"\xd9\x8c\x7fxR9\xb1\xbfC$\xc1"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    bytes_0 = b"E\x93\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    str_0 = "MJ"
    str_1 = "eC"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1, str_0: str_1}
    module_0.match(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    complex_0 = 1282.1173 + 299.0758j
    module_0.match(complex_0, complex_0)


def test_case_1398():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bytes_0 = b"\x1f\xc8\\\xe1\x0f\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    bytes_0 = b":nTM)|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    bool_0 = True
    module_1.object(*bool_0)


def test_case_1402():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1403():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    int_0 = 1130
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    tuple_0 = (list_0,)
    int_0 = 4645
    tuple_1 = (set_0, tuple_0, int_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    list_1 = [list_0, list_0, tuple_0, list_0]
    module_0.match(list_1, tuple_0)


def test_case_1409():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1410():
    float_0 = -3855.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    str_0 = "'M{h$4\\L'q}"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    bool_0 = True
    list_0 = [bool_0]
    float_0 = 2403.624
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    str_0 = '8z6c@-mwmw%lV:&"kZ'
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    bytes_0 = b"\xdb\x9f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    bytes_0 = b"Fz7\xda\xb2MOj\xb1h`\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    float_0 = 636.37
    module_0.match(float_0, float_0)


def test_case_1417():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1418():
    str_0 = 'f*w`+Y|epN:"j[`5$+'
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    bytes_0 = b"P\xd7\x93\xfe\xac\xffJ\x8e\x81\xe24\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    bytes_0 = b"\t>"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    bytes_0 = b"\xb6E>]\x8f\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    float_0 = -3771.004234
    bytes_0 = b"\nJ\x85\x17\xfb\x10\xbd%\xbc\xe9\xdfd\xfa"
    set_0 = {float_0, float_0, bytes_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    bytes_0 = b"~1\xddW\xd7\x91p\n\x91"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    str_0 = "?XfXr7K\rlw$X!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    float_0 = -483.814717
    bytes_0 = b""
    list_0 = [float_0, float_0, float_0, bytes_0]
    str_0 = '/&_RX"L"B\tN#@;!uDQ'
    tuple_0 = (float_0, list_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    int_0 = 4400
    tuple_0 = ()
    module_0.match(int_0, tuple_0)


def test_case_1428():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1429():
    int_0 = -1436
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    float_0 = -958.416969
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    float_0 = 2197.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    float_0 = -63.871
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    bool_0 = False
    str_0 = "\\bu-two.6W"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    int_0 = -2113
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


def test_case_1435():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1436():
    bytes_0 = b"/"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    float_0 = 131.96799
    set_0 = {float_0, float_0, float_0}
    tuple_0 = (float_0, set_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    int_0 = 891
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    complex_0 = 660.554 - 1772.66386j
    set_0 = {complex_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    str_0 = "@k"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    bytes_0 = b'\x99\x8e"\x8c\xac\x80\xfd:\x91\xf1'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    bytes_0 = b"t\xc4 '.\xe1\xfb"
    list_0 = [bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    bytes_0 = b"\x9c>\xb3\xb8B\x11\xe9\xe3M\x11C)\xd1Y\x1d\x83Z\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    float_0 = -43.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    int_0 = -3429
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    bytes_0 = b"\xb2\xbcod8\x8bV\xe7K\x8a\x1c\xbb\x0c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    bytes_0 = b"\xa4\x1b(7\x8bR\x11o"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    bytes_0 = b"\x1a\x1av\x02I\xf9sL\x8f\x9d\x1d\x87\x81\xfe\x9f\xf8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    int_0 = 2101
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    int_0 = 4059
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    str_0 = "'1hQ\x0bk\x0bSA("
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    float_0 = -244.624
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    complex_0 = -2541.086 + 1494.49797j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    int_0 = 2761
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    complex_0 = 4923 + 2646.12j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    bytes_0 = b"5\xb3\xad\xf3\x1a\x83\xa5\xf7\xbeV\x97\x04\xf1\xe9{\xe6|n"
    bytes_1 = b"ds<\x0b\xa4(\x15\xa7%\xf7\xac\xe4\xa1"
    dict_0 = {bytes_0: bytes_0, bytes_1: bytes_0, bytes_0: bytes_0, bytes_1: bytes_0}
    module_0.match(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    int_0 = 1570
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    bool_0 = False
    str_0 = "-T^vm5]sSC"
    module_0.match(bool_0, str_0)


def test_case_1467():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1468():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    str_0 = "]5,%DrD%s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    float_0 = -1592.58
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    float_0 = -3018.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    bytes_0 = b"\x19\xcf\xe6\xec\x97\xb74\x14w$\x92+c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    int_0 = -1210
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    float_0 = 524.265587
    complex_0 = -4308.4154 + 1375.9j
    list_0 = [float_0, float_0, float_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    float_0 = -2890.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    int_0 = -2669
    int_1 = 2485
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_1, int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_1479():
    dict_0 = {}
    object_0 = module_1.object(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    int_0 = 1236
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    bool_0 = True
    list_0 = []
    tuple_0 = (bool_0, list_0)
    bool_1 = False
    tuple_1 = (tuple_0, bool_1, list_0, tuple_0)
    module_0.match(tuple_1, list_0)


def test_case_1482():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1483():
    list_0 = []
    str_0 = "\n]5h\x0b\x0b|rl"
    str_1 = "%Z"
    dict_0 = {str_0: list_0, str_1: list_0, str_1: list_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    str_0 = "a,C/_mNp>&eo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    str_0 = "&r("
    str_1 = "un70r73j45{\x0bwv"
    set_0 = set()
    dict_0 = {str_0: str_0, str_1: set_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    str_0 = "[~t5xx\rfL\\]2PN11om"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    bytes_0 = b"J\x93\x84\xb9"
    module_0.match(bytes_0, bytes_0)


def test_case_1488():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1489():
    bytes_0 = b"\xa5\xe7s]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    str_0 = "<{=,%dq5e"
    str_1 = "`|8"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    int_0 = -3017
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    int_0 = 927
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    float_0 = -1436.04835
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    int_0 = 2470
    float_0 = -1043.88869
    tuple_0 = (int_0, float_0)
    list_0 = [tuple_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    int_0 = -2616
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    bool_0 = False
    str_0 = ":&"
    tuple_0 = (bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    int_0 = -3403
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {object_0: object_0, bool_0: object_0, bool_0: object_0}
    bool_1 = False
    tuple_0 = (dict_0, bool_1)
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    int_0 = -1468
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bytes_0 = b"\x9e\xe1\x8fI\xde\\{\xb9h$0\x90\xb9\xfc\x8b\x82"
    module_0.match(bytes_0, bytes_0)


def test_case_1503():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1504():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    int_0 = -1582
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    float_0 = 3310.0
    str_0 = "4M&IC="
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    float_0 = 399.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    str_0 = "[x}KyL1[mH)3,_"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    int_0 = -966
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    str_0 = "2fhn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    int_0 = 1875
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    bytes_0 = b"\x9fp?\x9c\xb5\xd4Y't"
    bool_0 = False
    list_0 = [bytes_0, bool_0]
    tuple_0 = (bytes_0, bool_0, bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    str_0 = "/8q_-c+RZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    complex_0 = -2341.55123 + 3334.687471j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    bytes_0 = b"\x9a\x7f\xf7\xa1\xcbE\x9c\x03\x1cD\xbfmI\xa9i\xb5%\xa0\x0fI"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    int_0 = -3190
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    bytes_0 = b"\xa5\x15~M\xab"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    int_0 = 387
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    bytes_0 = b"\x80c\xff\x7f\x9a\xb0\x84\xf5\xf7\xca|IH"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    int_0 = 2148
    module_0.get_new_command(int_0, int_0)


def test_case_1523():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1524():
    float_0 = -3747.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    bytes_0 = b",Z\x8f\x93zm^\x8c\xa4k\xf0\x1c0\x1d\xc2\x8e\xbe:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    int_0 = -76
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    str_0 = "2h"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    str_0 = ">;Tc&6-`OorFo`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    bytes_0 = b"\xe6Y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    str_0 = "f?\r{bL$^FLsMa@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    int_0 = 2102
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    int_0 = 3265
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    int_0 = -2436
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    float_0 = -1472.0
    dict_0 = {float_0: float_0}
    int_0 = -1404
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    str_0 = "0hh Ie3Z9|7@1{"
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (str_0, bool_0, set_0)
    str_1 = "&v2Rw~v'gM+o5"
    module_0.match(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    bytes_0 = b"\x03E\xd33\xf5\xfe4"
    bytes_1 = b"\xfa\x8d\xcc\xfa\x08"
    tuple_0 = ()
    bool_0 = False
    set_0 = {bool_0, bytes_1, bool_0}
    tuple_1 = (bytes_0, bytes_1, tuple_0, set_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    str_0 = "H/"
    set_0 = {str_0, str_0, str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    float_0 = 80.1
    tuple_0 = (float_0, float_0, float_0)
    str_0 = "iW|#\r`6-Zw8,FG;B2^"
    tuple_1 = (tuple_0, str_0)
    dict_0 = {tuple_1: tuple_1, float_0: tuple_0}
    module_0.match(dict_0, tuple_1)


def test_case_1540():
    pass


def test_case_1541():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1542():
    bytes_0 = b"7\xb4:\x02"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, bytes_0, set_0)
    int_0 = 133
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    int_0 = -523
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    int_0 = -681
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    int_0 = 98
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    str_0 = "#853`}ma"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    list_0 = []
    int_0 = -856
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    float_0 = -3611.822
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    str_0 = "aFst 0d~L29v%="
    str_1 = "?0Yx`h:Vdx$sE"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    int_0 = 1574
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    bytes_0 = b"!2x\xe9\x0f\x151\xd5\x9c\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    list_0 = []
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    float_0 = 326.49261
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    bytes_0 = b"+Y\xaf\x15\x14o\xb4\xa7}\x1a\x1b\xb7"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    str_0 = ":FJ-`"
    dict_0 = {}
    module_0.get_new_command(str_0, dict_0)


def test_case_1559():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1560():
    bytes_0 = b"\x16\x12\xaa\xfc%\x9f;"
    module_0.match(bytes_0, bytes_0)


def test_case_1561():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1562():
    bytes_0 = b"\xc4,\x06\xe0\\\x99\xdb\xac\xc1\x86U\x8c\x87(\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    bytes_0 = b"P$\xfa\xbc\x06\x1d\x90\xec\x06\xa11\x1bU\xf3}\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    int_0 = -2579
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    bytes_0 = b'"\x99\xe8"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    str_0 = "D\x0bX;[F)q<FEWF7MH@47%"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    str_0 = "]\n:wvH!.84"
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_0: str_0, tuple_0: str_0}
    float_0 = 3168.0
    bool_0 = True
    tuple_1 = (float_0, str_0, bool_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    bool_0 = True
    tuple_0 = (bool_0,)
    float_0 = -508.61
    str_0 = "F8:T'\n$}B[q[&ABW-"
    tuple_1 = (float_0, bool_0, bool_0, str_0)
    dict_0 = {tuple_0: tuple_0, tuple_1: tuple_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    tuple_0 = ()
    bytes_0 = b"\x88\x81\x8b\xb2\x8c@\xe5\xa8\xa8\xddq"
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    int_0 = -3501
    module_0.match(int_0, int_0)


def test_case_1575():
    pass


def test_case_1576():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bytes_0 = b"\x82:\x94\xc9x]\x01\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    int_0 = 1786
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    bytes_0 = b"\xc0@"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    float_0 = -778.454787
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    int_0 = 1840
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    bytes_0 = b"\x13\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    bytes_0 = b"NPY;a\xe1\xc9\xe5\xefH\x06Wh\xfbs\x10R%\xe3`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    str_0 = "!^hA@yu\nPu\\h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    bytes_0 = b'D\xcd\x97\x88\xfcR\xd4\xc0\xbb\xc2\xf6o"\xa8'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    float_0 = 1422.798
    str_0 = 'B_A"j'
    set_0 = {float_0, str_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    bytes_0 = b"\xdb\xd3\x1d\xb1\x92\x90C\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    int_0 = -1621
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    complex_0 = -3982.5 + 2053.860048j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    float_0 = 2077.42
    module_0.get_new_command(float_0, float_0)


def test_case_1591():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1592():
    str_0 = "fELD.\nIt\t\nR[BeODjz;"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    none_type_0 = None
    int_0 = -440
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    float_0 = -207.44
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    float_0 = 3949.7279
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    int_0 = 4803
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    int_0 = 1936
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    int_0 = 5059
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    complex_0 = 878.38 - 1223.24j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    bytes_0 = b"\x0fv\xfdg\xa1\x06\t\x0e\x0c\xe4]NU\x9e\\"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    set_0 = {tuple_0}
    module_0.match(set_0, bytes_0)


def test_case_1604():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1605():
    int_0 = -1017
    module_0.match(int_0, int_0)


def test_case_1606():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1607():
    set_0 = set()
    bool_0 = True
    tuple_0 = (set_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    bytes_0 = b"\x95\xb1&\x1fv\xbd\xde\xf4\xdf\\\xc8\x8e\xc2E\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    bytes_0 = b'\xbb\xa4\xb4\x9c\x07\x88"[\xdcI\x87'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = True
    tuple_0 = (bool_1, bool_1, bool_1)
    dict_0 = {bool_0: list_0, bool_0: list_0, tuple_0: bool_0, tuple_0: bool_1}
    set_0 = set()
    tuple_1 = (list_0, dict_0, set_0, list_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    complex_0 = 377.63 - 3369.61j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    complex_0 = -350.341 + 1482.138075j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    float_0 = 459.503
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    int_0 = -214
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    str_0 = "%v'["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    bytes_0 = b"\xb8\xf4\x1f\xf9\xaa\xc9\n7\xb5\x9e\x82\xed\x16\xcf\x99\xd2\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    float_0 = -3370.730711
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    str_0 = '}(M#mDyVpKj"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    str_0 = "Dvba[Dmd\x0bjw2"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_1622():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1623():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    float_0 = -391.23116
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    str_0 = "~V&cyfo;"
    str_1 = "6Zm@g~d(pKJ<3"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    bytes_0 = b"\x9d@O\x9b\xdd\x9f\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    bool_0 = False
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    bytes_0 = b'ea\x03d^"\xb9\x19\x85)\xb4"\x1b\xf4\xf4\x81'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    float_0 = -975.83898
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    float_0 = -715.86532
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    int_0 = -1268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    int_0 = 386
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    int_0 = -662
    bytes_0 = b"pN\xd9\xef'\xe4/\xae\xa5\xa2\xc0\xf3\x02\x1f\x17\xe0%\xcd\x8d"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bytes_0 = b"d\xe7s\x1c\xf7\x08 \x98\x10e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    complex_0 = -1035.66 - 344.6j
    list_0 = [complex_0]
    list_1 = []
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    bool_0 = False
    str_0 = "rb=&~rzrk"
    dict_0 = {bool_0: bool_0, bool_0: str_0}
    dict_1 = {bool_0: bool_0, bool_0: bool_0, str_0: dict_0}
    module_0.match(dict_1, dict_0)


def test_case_1639():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1640():
    object_0 = module_1.object()
    bool_0 = False
    set_0 = {object_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    int_0 = -555
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    complex_0 = 305.76 - 2770.65333j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    str_0 = "\\g1u:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    str_0 = "L,h"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    float_0 = -1958.94349
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    int_0 = 800
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    str_0 = "3oev"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    int_0 = 665
    int_1 = -67
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    str_0 = "SB|.mezg2YC>^mCkN+"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    bool_0 = False
    bool_1 = True
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, bool_1: tuple_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    str_0 = "r'8,g${\nw[\"\tt|/^%by\n"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    float_0 = -3564.085
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    int_0 = 1715
    module_0.match(int_0, int_0)


def test_case_1657():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1658():
    str_0 = ",\r8&=keEM\x0cq!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    complex_0 = 4915.38641 - 1909.606j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    bytes_0 = b"T\xa9o\xd5 "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    int_0 = 374
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    str_0 = "wfdbxnqp[QTL"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    int_0 = 822
    module_0.get_new_command(int_0, int_0)


def test_case_1666():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1667():
    float_0 = 737.2481
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    bytes_0 = b"\x19k\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    str_0 = "sU8[z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    str_0 = "<>A9T4BY4r}9b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1671():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1672():
    none_type_0 = None
    bool_0 = True
    str_0 = '&Z~J_cj`\ry&M{88"=M\t|'
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, str_0, set_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bytes_0 = b"\xbf\xebN\xc0\x8c\xdb\x0b4\xdf\x1d_\xc7"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (object_0, bool_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    str_0 = ' \n\x0c\rS"/s-j]`a('
    float_0 = -868.0
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    bytes_0 = b"/qS\x9e\x8f8\xa2J\x90\xb5\xda\xb3\x0c\xf7\xb6\xff0\x11\x0b "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    float_0 = -2263.80418
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    float_0 = -609.12495
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_1679():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1680():
    none_type_0 = None
    bool_0 = True
    set_0 = {none_type_0, bool_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


def test_case_1681():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1682():
    bytes_0 = b"4\xf8\x99\x0f`A\xe9\xbdPhV\x99`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    int_0 = -412
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    int_0 = 608
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    int_0 = -1438
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    float_0 = 687.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    str_0 = "gD`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    int_0 = -1234
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    int_0 = -1251
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    float_0 = 1512.586
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    int_0 = -2987
    bool_0 = False
    float_0 = -3266.944
    bool_1 = True
    tuple_0 = (int_0, bool_0, float_0, bool_1)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    none_type_0 = None
    str_0 = "7I$ul"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    bytes_0 = b"|k\xf6\xf5X\x88\xee\x15"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    int_0 = 475
    module_0.get_new_command(int_0, int_0)


def test_case_1696():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1697():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    float_0 = -4339.91648
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    bytes_0 = b"\xdd\x05\x1c+.]"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    bytes_0 = b"Ka\r\xab\xe5\xdb\xcfM\xf00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    str_0 = "qDQN*^G9K"
    bool_0 = True
    int_0 = -3161
    tuple_0 = (str_0, bool_0, int_0)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    int_0 = -5231
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    bytes_0 = b"6:\xcarZ\xe0\xb7\xb3\x12\xf3\\"
    str_0 = "iw{\rOtl0M1uCO"
    bool_0 = True
    tuple_0 = (bytes_0, str_0, bool_0, bytes_0)
    int_0 = 4641
    bool_1 = False
    set_0 = {tuple_0, int_0, bool_1, tuple_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    str_0 = 'U"G7\\6\x0cDI#,'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    float_0 = 456.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    int_0 = -803
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    int_0 = 2087
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    bool_0 = False
    int_0 = -149
    tuple_0 = (bool_0, int_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    int_0 = -841
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    int_0 = -2335
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    bytes_0 = b"\xda\xe8\x0e\x04 "
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    bytes_0 = b"\xe1\xc9f\x14p\x8f\x9e\xcb\xaf\xef\x00\x04H9\xaa\xf7\xd0I"
    bytes_1 = b"\xcc\x98\xff\x8c"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    set_0 = set()
    tuple_0 = (set_0,)
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1, set_0, set_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    str_0 = "7]TQGUKyM\r8y=u\rs`:"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    str_0 = "\rb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    str_0 = "Br0^UR9 "
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    int_0 = 1166
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    str_0 = "8i"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    complex_0 = 3023.46144 + 2493.20419j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b""
    str_0 = "6/[O!ikKo\tNV"
    tuple_0 = (bytes_0, str_0, bool_0, bool_0)
    tuple_1 = (list_0, tuple_0, str_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    bytes_0 = b"\xbey\xa3|Lg\xbd\x9a8S\xd8g\xda\xbe\x08\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    bytes_0 = b"\xe4L\x9c\xc4g\xe8\xb1\xbc)\xb9\xf9\x9e\xdds\x1dA\xf3\x0f\xeb:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    none_type_0 = None
    str_0 = "+wz<]\\2zq}1b3X>- f"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    bool_0 = True
    int_0 = -1812
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bytes_0 = b"C)\xc3\xf0\x92\xb2\xa1\xff"
    tuple_0 = (set_0, bool_0, set_0, bytes_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    int_0 = 4459
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    bytes_0 = b"\x9b\xdc\x9b\xf2\xdb\x1a\x04\x12Eh\xfd\xc9\xff0ukd\xb1."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    bytes_0 = b"\xb3\x11\xfd\xc1\x8d\xb6\x839\x88\xea\x06\x89\xe5\xe0/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    complex_0 = 2060.8878 + 1992.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    str_0 = "}+J]M,=nZo"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    bytes_0 = b"\x9d\x14\xd5\xbe["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    int_0 = -1886
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    float_0 = 736.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    int_0 = 242
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    int_0 = -3398
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    int_0 = -1512
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bytes_0 = b"\x89\xff\x83\x8e\xb6|\xf8\xa5\xd0=gq\xfc\x0b{\xb2|"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


def test_case_1742():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1743():
    int_0 = -2794
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    bytes_0 = b"^\xefP"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    bytes_0 = b'x`"\xadj0\xd8!l'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    int_0 = -1077
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    int_0 = 2383
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [int_0, dict_0, int_0, dict_0]
    list_1 = [int_0, int_0, dict_0, list_0]
    bytes_0 = b"(\x01\xd2\xf2#M<b\r\x12UT\xdcY\xd6\xf6"
    tuple_0 = (list_1, list_0, bytes_0)
    tuple_1 = (dict_0, tuple_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, bool_0, tuple_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    str_0 = "n)P3ZcHJuT"
    str_1 = "GyA0qh3A/\x0bQWPgG"
    str_2 = "X<Ry\x0cF,@Xi"
    str_3 = ")"
    dict_0 = {str_1: str_0, str_2: str_0, str_3: str_2}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    list_0 = [none_type_0, set_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    float_0 = -3888.670583
    object_0 = module_1.object()
    module_0.get_new_command(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    bool_0 = True
    float_0 = -866.5367
    dict_0 = {bool_0: float_0, float_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    str_0 = "N"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    int_0 = -3148
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bytes_0 = b"b\xe1_\x9f\x9b\x10(b\xac\n\xfc\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    str_0 = "U/TO6!M& \nVR,i\x0c$EY!"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    float_0 = -1476.625162
    module_0.get_new_command(float_0, float_0)


def test_case_1759():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1760():
    int_0 = -1391
    module_0.get_new_command(int_0, int_0)


def test_case_1761():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1762():
    bool_0 = True
    complex_0 = 356.9 - 1841.50005j
    dict_0 = {bool_0: bool_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    bytes_0 = b"\xb0?\xa8Y\xf0Qi"
    module_0.match(bytes_0, bytes_0)


def test_case_1765():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1766():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    int_0 = -1478
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    float_0 = -1746.87765
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    complex_0 = 775.5264 - 2291.45627j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    str_0 = "r;e@V@E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    tuple_0 = ()
    str_0 = "Zna#\x0b`+R~0xs}Vnp~"
    dict_0 = {tuple_0: str_0}
    tuple_1 = (tuple_0, str_0, dict_0, str_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    bytes_0 = b"\x1c`\x12l"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1775():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1776():
    bool_0 = True
    bytes_0 = b"8a\xd8\xfd\xd9\x99vyt\x1d\x95%w\xa0C@*}9?"
    set_0 = {bool_0, bytes_0, bytes_0}
    tuple_0 = (bool_0, bytes_0, bool_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    complex_0 = 36.1418 + 256.6416j
    set_0 = {complex_0, complex_0, complex_0}
    str_0 = "|gXOM$P\n$(7["
    bytes_0 = b" \xbf\xe4\xd0"
    tuple_0 = (set_0, str_0, str_0, bytes_0)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    bytes_0 = b"\x864vD\xc6\xae\x0e2\x96\xd4a!\x0f3\x9b\x9c"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    int_0 = 5284
    complex_0 = 18.19782 + 2119.3121j
    dict_0 = {
        int_0: complex_0,
        int_0: complex_0,
        complex_0: complex_0,
        complex_0: int_0,
    }
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    int_0 = -1384
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    complex_0 = 6055.91962 - 1338.65j
    dict_0 = {complex_0: complex_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    int_0 = 3340
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    none_type_0 = None
    float_0 = 1188.28
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    int_0 = -1366
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    bytes_0 = b"\x98\xfe\xa0KO\x03\x92\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    complex_0 = -1451.4 - 150j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    int_0 = -1018
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    str_0 = "Dn\x0b%QK<?~:aLL}\x0cR"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    bytes_0 = b"=\xef\xb0_\xdb\x85\x9a^\x19o<V\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1793():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1794():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    bool_0 = False
    int_0 = 2759
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    int_0 = 154
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (bool_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    bytes_0 = b"\xac\xa6\xd3\xa6\x8eD"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    float_0 = -520.5845
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    int_0 = 714
    int_1 = 1445
    set_0 = {int_0, int_1, int_1, int_1}
    module_0.get_new_command(set_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    str_0 = "pk=i>ZCeO1Ju\x0be&18y\t"
    list_0 = [str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    str_0 = "\tj[A0\nUU{!lO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    int_0 = -2039
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    float_0 = 1390.7
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    bytes_0 = b"\xbb\\\x92;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    float_0 = 1514.04
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    float_0 = -3416.00911
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    int_0 = -2787
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    int_0 = -1297
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    str_0 = "eZs }k5g>V?rOR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    complex_0 = 501.99 + 229j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    complex_0 = 189.5665 - 1834.355346j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    bool_0 = False
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    str_0 = "lw-"
    set_0 = {str_0, str_0, str_0}
    list_0 = []
    bool_0 = True
    tuple_0 = (set_0, list_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    complex_0 = 2960.951 + 2034.216j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    int_0 = 3528
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    str_0 = "\x0c3s[7?dcd/6Oc{\x0bC"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    str_0 = "rFIZ.g1}SB7~U.P8N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    int_0 = 80
    set_0 = {int_0}
    tuple_0 = (int_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    bool_0 = True
    bytes_0 = b""
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    int_0 = 1376
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    bytes_0 = b"\xea\xc5\x1a \xfa\xeb\xccb0\x18 \x03\x0bs\x89\xa0\xb0s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    float_0 = 1328.442
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    str_0 = ")_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    str_0 = "8'V?~{zWH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    none_type_0 = None
    complex_0 = 1559.69 - 744.224078j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    bytes_0 = b"\xd0\x8ev\xdc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    int_0 = -257
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    bytes_0 = b'\xec\xa0\x7f\x9a\x14^\xc8\x82-\xff\xc0{\x9c\xffm"\xba"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    str_0 = "Gi2\x0b1<E^"
    bytes_0 = b"\x7fRNQ2\xd8\xf0\x81\x82\xed\x88\xf1+`j"
    tuple_0 = (str_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    str_0 = 'UR$>rd"_g}1?0-EO'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    bytes_0 = b"H\x8f"
    tuple_0 = ()
    tuple_1 = (bytes_0, bytes_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    bytes_0 = b"\xa0\xdc6-\xeb[FGt\xe3-\x10\xaf\x82q5R\xce"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    str_0 = "3"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    str_0 = "A-/!Xl\x0b$"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    str_0 = ".B\x0bC&"
    str_1 = " {\t6QRQM40X2"
    str_2 = '_/&"-DA6OHU# '
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    bytes_0 = b""
    str_0 = "s{887Q>iyx"
    bytes_1 = b"\xeeZ\x83g\xf2X\x97T '\xaa\x8dP\x83\x96d"
    dict_0 = {bytes_0: str_0, bytes_0: bytes_1, str_0: bytes_1, bytes_0: bytes_1}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    str_0 = "mCT4\rYn>f\n!^N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    int_0 = -1261
    float_0 = -1500.728
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    bytes_0 = b">w\xf3\x81\x95h \xb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    str_0 = "H1O OY7!V-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    int_0 = 1263
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    bytes_0 = b"\xd1\x94\xb5\xc4}\xb0ks/"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    bytes_0 = b"\xf9\xb4\xc9\x8bG"
    str_0 = "(ZA!"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    bytes_0 = b"\xf1\xb4\xdf\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    bytes_0 = b"\xf6J\x95P\x9f\xbd5\x84~\x05\xbf\x86\xd9h."
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    str_0 = "\r\x0cim"
    str_1 = ""
    str_2 = "lPg"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    str_0 = "iZH_J"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    float_0 = -1730.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    str_0 = "z \ty<M0Ilbp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    bytes_0 = b"b\xc5\xc1\xdf\xfaf\xab\xf0P:\xb9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    complex_0 = 2198.964 - 996.9114j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


def test_case_1867():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1868():
    str_0 = "!,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    str_0 = "$~\x0bgdBa\t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    complex_0 = 1035 - 2190.6785j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    int_0 = 2636
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    bytes_0 = b"\x93H\xa8\x8b6=S\x0em\xf1\xcc\xead\x8b\x9b:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    set_0 = set()
    tuple_0 = (dict_0, set_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    float_0 = 3765.917069
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    int_0 = 1328
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    float_0 = 1504.29
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    bytes_0 = b"I\xc2\x05\xe2\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    str_0 = "tD^"
    bool_0 = True
    set_0 = {str_0, bool_0}
    module_0.match(set_0, set_0)


def test_case_1881():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1882():
    bytes_0 = b"\xc1\xb48\x0b\x18\xc3*\xaa\xdf\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    complex_0 = -589 - 470j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    bytes_0 = b"\xdaM\xffg\x91\xae\xd0\xdcu\xba\x02C\xdb\xfd\xcc\xd5"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    str_0 = "uN\x0cC~g"
    int_0 = 998
    list_0 = [str_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1887():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1888():
    float_0 = -119.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    int_0 = 899
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    int_0 = 1564
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1891():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1892():
    bytes_0 = b"Z\xdf\x86\x18"
    dict_0 = {}
    bool_0 = True
    tuple_0 = (bytes_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    float_0 = 776.5274
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    int_0 = -566
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    int_0 = 1340
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    str_0 = "Ncp?nr"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    bytes_0 = b"\xdc\xb5<n\xb7\xb57\xd9h\x15%\xbb\xcb\xd1\x9b\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    int_0 = 223
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    str_0 = "\ts\n\nq\rN!KXQ=3z\ni,0"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    str_0 = "h+;7*S;L/KE\n`@6y1&d"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    int_0 = -611
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    str_0 = '"@Q=Y$\t7PW\\w'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    int_0 = 3916
    module_0.get_new_command(int_0, int_0)


def test_case_1905():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1906():
    str_0 = "a=yQbhR"
    module_0.match(str_0, str_0)


def test_case_1907():
    pass


def test_case_1908():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1909():
    int_0 = -2393
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_1]
    tuple_0 = (bool_0, list_0)
    dict_0 = {bool_1: tuple_0, bool_0: tuple_0}
    tuple_1 = (bool_0, tuple_0, dict_0, tuple_0)
    module_0.match(tuple_1, bool_1)


def test_case_1911():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1912():
    str_0 = "."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    str_0 = "sx+9+!W}XyZonKvSf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    int_0 = -2721
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    int_0 = -345
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    str_0 = "-,.jz"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    bytes_0 = b"\x1a\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    str_0 = "\\DVxCUl5%+M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    int_0 = -220
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    bytes_0 = b"\xb5\xe7\xde$d\xf5\xadxy\x8f\xc0-\xa0\xa3h}"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    int_0 = -665
    bool_1 = True
    tuple_0 = (int_0, bool_1)
    tuple_1 = (bool_0, set_0, set_0, tuple_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    bytes_0 = b"5!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    tuple_0 = ()
    set_0 = set()
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    str_0 = "j[)\x0c2A\re6MS7+v%"
    module_0.get_new_command(str_0, str_0)


def test_case_1926():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1927():
    bytes_0 = b"\x8b=\x03\xb8p\xf9S\xf6Z\x8d\x99\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    bytes_0 = b"\x02\xc4\x84\x8eu\xe0\x97h\x1c\xfd\x08\xee<\xe7\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    str_0 = "2!`}WN`MXy+3IQTc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    str_0 = "G|tL*kD)o'Q-mh9v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    int_0 = 1581
    bytes_0 = b"\x96\x0e\xa7\xd4\x19\x0c@\x90\xfd \x00\xf0"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    bytes_0 = b"\xb0}\xe3\x1dx8l%w\xfaJ"
    bytes_1 = b"\xa3x"
    set_0 = {bytes_0, bytes_1, bytes_0, bytes_1}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    bytes_0 = b"\xb3\x95\x10\x9d\xb7uL1g\x16\xb2\x90r"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1936():
    pass


def test_case_1937():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1938():
    int_0 = -639
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    float_0 = -1942.4728
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    str_0 = "bI|TH\r_':N!nnOIIB+r"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    int_0 = -282
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    bytes_0 = b"\xaa\xe6\x96"
    object_0 = module_1.object()
    module_0.get_new_command(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    float_0 = -1149.7605
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    str_0 = 'y<qISB"PG]B(qGx.<'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    bytes_0 = b"\xcd\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    bytes_0 = b"\xde#\xebVj\x0fxP\xda\x0c\t\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    str_0 = "m'u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    int_0 = 778
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    bytes_0 = b"%\xb7\xe4\xca\xd9\xdf\xf1T\xe6\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    bytes_0 = b"_\x93m|\x1f\xe3\xfc\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    float_0 = -1412.156082
    module_0.match(float_0, float_0)


def test_case_1952():
    pass


def test_case_1953():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1954():
    bool_0 = False
    str_0 = "8!$N9dMb96sY}[;m97z%"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    int_0 = -2094
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    int_0 = 1508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    str_0 = "wS '!=~Mb|,I\x0bhO-d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    str_0 = "(z[p!p|WiJ2cqL\r<G'PF"
    set_0 = set()
    list_0 = [str_0, str_0, set_0]
    module_0.match(list_0, str_0)


def test_case_1959():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, list_0, bool_0, bool_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    bytes_0 = b"\xdf\xc3b\x1eW\xbc*\xb2\xb7!\xc9\xd7\xc9\x91Qg\xc0\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    int_0 = -1874
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    int_0 = 2252
    int_1 = -870
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    float_0 = -311.28532
    module_0.get_new_command(float_0, float_0)


def test_case_1965():
    pass


def test_case_1966():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1967():
    list_0 = []
    str_0 = "2s}:Hu=WRtV\t"
    str_1 = ";oRw.Q J"
    dict_0 = {str_0: list_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    int_0 = -1478
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    int_0 = -578
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    int_0 = -3086
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    int_0 = 1432
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    bytes_0 = b"\x0f\xc3\x9cRF?Q\x0b\xb3\xe8*~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    bytes_0 = b"R\xd4\xb8)mI-d\xb8\x89\x0e\x85s\x8b4\xb2\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    bytes_0 = b"\x8e\x1fM"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    bool_0 = False
    str_0 = "@A\x0bP`6SG2I B-]#uXi"
    set_0 = {bool_0}
    str_1 = "cUmB6w%#"
    str_2 = "Q.'\nVe$=s<8Fem"
    str_3 = "6xD7Fu1?/ap"
    dict_0 = {str_0: set_0, str_1: str_1, str_2: set_0, str_3: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    int_0 = 1766
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = True
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    int_0 = -855
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    float_0 = -1321.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    str_0 = '?"/MK#"y.Pf0ZB+U{So/'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    str_0 = "(RQME$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    int_0 = 195
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    str_0 = 'W" 2c^4bJl/U@Byq'
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    int_0 = 3080
    module_0.match(int_0, int_0)


def test_case_1989():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1990():
    float_0 = -460.3275
    str_0 = "N5"
    module_0.match(float_0, str_0)


def test_case_1991():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1992():
    bytes_0 = b"Sh`I\x00\xa8\xc6\\\xf4\x82E\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    int_0 = -90
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    complex_0 = -4006.5 - 1674.901407j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    bytes_0 = b"U\xfe\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    bytes_0 = b"b\xfaK\x9eo\xd5\xd5\xcd\xb1\x82$\x92\x07\x8c\xf8"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    float_0 = 982.8331
    object_0 = module_1.object()
    module_0.get_new_command(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    str_0 = "ni]b!TEuhq&!p~(Hr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    str_0 = "Lm;ae"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    bool_0 = True
    bytes_0 = b"J\xc9\r\xb0\xf6\x12\xb8\xf9\xfcHC"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    float_0 = -1046.96
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    bytes_0 = b"\x95\xec$]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    bytes_0 = b"n\x89"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    bytes_0 = b"\x9c\xbdqSy\xff\xd77\xf70\xa4\xbe\x1e\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    float_0 = -315.022
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    int_0 = -890
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    bytes_0 = b"\xa5\x1cN\x8d\x1b\xd1\x98\x97\x81\xb6tj\xdc\x1cO\x96\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    float_0 = 4028.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    str_0 = "hDzp'\n,u#WK@<>=^\"I>f"
    str_1 = "}4?~"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    int_0 = 435
    module_0.match(int_0, int_0)


def test_case_2015():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2016():
    str_0 = ",\\.e7%~T/"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    str_0 = 'qs+c3PS\rJ\t"8\x0c6Q{'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    bytes_0 = b"_\xaa\x9d\x8b\xb3\xd3\rg\xc0\xcc|\x00\xb2A>\xcao\x92"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    float_0 = -2349.511001
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    str_0 = "~Mo{,"
    tuple_0 = (set_0, str_0)
    tuple_1 = (tuple_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0}
    tuple_0 = (bool_0, bool_0, bool_1, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    int_0 = 272
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    str_0 = "7z*:@iiN[EGs,qYSFY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    bytes_0 = b"3c\x95\xa3\xe6\xe3@\xb6N"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    int_0 = 1394
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    str_0 = "h\x0b\r#ktj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    bytes_0 = b"\xaf\xd5+P\xd2\xc2\xa6qe:m\xdbw"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    bytes_0 = b"x\x8c\x10\xda"
    set_0 = {bytes_0}
    int_0 = -1259
    tuple_0 = (bytes_0, set_0, int_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    float_0 = 2188.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    int_0 = 264
    set_0 = {int_0, int_0}
    object_0 = module_1.object()
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    float_0 = -2385.22249
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    bytes_0 = b"(:\x85\xdd\x05\xca\xb6\xc6N%\xae\x98\xf9v\xda$M"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    str_0 = "Z]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    dict_0 = {}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    int_0 = 4251
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    bytes_0 = b"\x86\xa5"
    int_0 = -350
    str_0 = 'hmJKz(!}x@d/"3'
    bytes_1 = b"\xf7&./X"
    tuple_0 = (bytes_0, int_0, str_0, bytes_1)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    int_0 = 1734
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    complex_0 = -530.08 - 6.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    bytes_0 = b"\x98\xabf\xddU\x08\x14\xbf\x1cp\x9e*\xaa\x1a[\xa2\x04"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    bytes_0 = b"\x8cW\xe3\xab\x84\x9b\xbc|\x92\xf2D\xe1\x8d\r\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    str_0 = "-g3*s_rgI2|#Jua%H"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    int_0 = 404
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    bytes_0 = b"iw\xa6\xdc\xbcZ?\xca\xb6o\xbbdG\xea\n"
    list_0 = [bytes_0, bytes_0, bytes_0]
    int_0 = -1065
    tuple_0 = (list_0, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    int_0 = -2119
    bytes_0 = b"\x98\xc8\xe6\x0c\xe9h^\xfa\x1f\xcc"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    bytes_0 = b"\x03\x9cp\x18"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    int_0 = 3840
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    bytes_0 = b"%\xc6\x1f\x99*\xc1G"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    str_0 = "+1Iq6X"
    list_0 = [str_0, str_0, str_0]
    bool_0 = False
    tuple_0 = (list_0, list_0, bool_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    list_0 = []
    bytes_0 = b"\xc7\x91|\x02sQ"
    tuple_0 = (bytes_0,)
    tuple_1 = (list_0, tuple_0)
    list_1 = [tuple_1]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    float_0 = 1167.19
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    int_0 = 3907
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    str_0 = "{f@+qPVQM hdT*8/l3Me"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    bool_0 = True
    int_0 = 2193
    tuple_0 = (bool_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    str_0 = 'I>$qc%"S'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    str_0 = "l^4S.hjf[~-|[q2"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    int_0 = -1798
    str_0 = ".b+'Kva\\\r&Lk(3o]"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    bytes_0 = b"!\xc86\xba\xe3\x10\x8f\x9b,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    int_0 = -970
    list_0 = [int_0, bool_0, set_0]
    tuple_0 = (bool_0, list_0, bool_0)
    tuple_1 = (tuple_0,)
    list_1 = [bool_0, tuple_1, int_0, tuple_0]
    tuple_2 = ()
    tuple_3 = (int_0, bool_0, list_1, tuple_2)
    tuple_4 = (set_0, tuple_3)
    module_0.match(tuple_4, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    str_0 = '"&y;dw?fVK'
    dict_0 = {str_0: str_0, str_0: list_0, str_0: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    int_0 = 377
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    bool_0 = False
    bool_1 = False
    float_0 = -200.0759
    tuple_0 = (bool_0, bool_1, float_0)
    bool_2 = False
    tuple_1 = (tuple_0, bool_2, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    int_0 = 861
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    str_0 = "KAq/tp\x0b"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


def test_case_2070():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2071():
    int_0 = -2127
    bool_0 = True
    dict_0 = {int_0: int_0, bool_0: int_0, int_0: int_0, int_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    str_0 = "YA(l3]hC2Xm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    bytes_0 = b"\xdc#\xe6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    bool_2 = False
    list_0 = [tuple_0, bool_0, bool_2]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    bytes_0 = b"dY\x80s \xb4vm\x11\x1c\x05\xd5\x18I\x08\xfc^\x8f\x1d\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    int_0 = -1231
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    float_0 = -2335.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    bool_0 = False
    bytes_0 = b"\x0f\x8ao\x0fX\xb0\x87\xf53\x9e#5\x06@"
    tuple_0 = (bool_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_2079():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2080():
    bool_0 = False
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    float_0 = -2627.74112
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    bytes_0 = b"1h\xd9\xb2I\xea\xa6\xca\x083'w\x81\x0c\x8a\xb4|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    bytes_0 = b"\x85\xad\xfa%l"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    complex_0 = -2013.04547 + 1934.25j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    set_0 = set()
    tuple_0 = ()
    str_0 = "|Yw:;b(\tec#dOBIe"
    tuple_1 = (set_0, tuple_0, str_0, set_0)
    list_0 = [tuple_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    str_0 = "3O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    list_0 = []
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    complex_0 = 982 + 925.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    int_0 = -1031
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    bool_0 = True
    bool_1 = True
    complex_0 = -1169.3 + 1469.72j
    str_0 = "vnKLr~@c3C_VNdX9OH"
    tuple_0 = (bool_0, bool_1, complex_0, str_0)
    list_0 = [tuple_0, tuple_0, bool_0, bool_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    dict_0 = {}
    tuple_0 = (dict_0,)
    object_0 = module_1.object()
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    int_0 = 2302
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    complex_0 = 564.11761 - 1053.451j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    str_0 = "L79e<gqw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    bytes_0 = b"\x8b\xb3\xefA\x9ep\xac\x01\xb7\xbcf\x1a\x92\xf3g\x954\xa8^D"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    float_0 = -1382.107229
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    int_0 = 686
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    float_0 = -886.7182
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    int_0 = 3086
    module_0.get_new_command(int_0, int_0)


def test_case_2104():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2105():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    bytes_0 = b"by&F|g\xba\xb4\xff[\x9cQ\x01H\x86\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    int_0 = -352
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    int_0 = -1550
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    int_0 = -2078
    module_0.get_new_command(int_0, int_0)


def test_case_2110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2111():
    bytes_0 = b",1\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    bool_0 = True
    bytes_0 = b"|gz\x88PK"
    dict_0 = {bool_0: bytes_0, bool_0: bool_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    float_0 = -2392.04
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    int_0 = 81
    float_0 = 124.54977
    int_1 = -1315
    set_0 = {float_0, int_1, int_0}
    tuple_0 = (int_0, set_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    complex_0 = 848.99065 + 2688j
    bool_0 = True
    set_0 = {complex_0, complex_0, bool_0, bool_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    int_0 = 444
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    str_0 = "FfH]Up\naW("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    complex_0 = 781.16037 - 1051.33j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    bytes_0 = b"\xa4\xc1M\xd5;O\xcf\x8f\xdf1{ \x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    str_0 = "LE8wn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    str_0 = "K\rN\x0c,!4J"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    str_0 = "'=`F:,v(%fe\raV(/,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    int_0 = -307
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    float_0 = 2081.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    bool_0 = True
    str_0 = "YH=&B:Y\ngB"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    int_0 = 3881
    str_0 = "$4DlzFZRI\x0c4Z^e,"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    int_0 = -2219
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    dict_0 = {}
    bytes_0 = b"\x0b\xc7"
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    list_0 = []
    bytes_0 = b"\xda`(\xffs9\x19d\xc1VU\x88+N\xde"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_1}
    tuple_0 = (bool_0, bool_0, set_0)
    list_0 = [tuple_0, bool_0, tuple_0, set_0]
    list_1 = [list_0, set_0, tuple_0, bool_0]
    module_1.object(*list_1, **list_1)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    int_0 = 1083
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_2133():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2134():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    str_0 = "iiwMt]\\-<>B&/-P$kT!"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    str_0 = "w6~hr!CY"
    tuple_1 = (tuple_0, set_0, str_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    str_0 = "]-HALy!NCeNZ"
    int_0 = -715
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    bytes_0 = b"\xac.\xcc`\xc9\xbe\xff{\xaau"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    str_0 = "M\tpHu0O_G\n)Cl~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bytes_0 = b"X\x0b\xee\xe9SRm\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    str_0 = "T7$.{ [VI861FV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    bytes_0 = b'qX\x83e\xf86/w\x0b\xc4"\n\xca\x11'
    module_0.match(bytes_0, bytes_0)


def test_case_2144():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2145():
    complex_0 = 348 - 506.2j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    bytes_0 = b"\x1a"
    bytes_1 = b"\xe1\xa8T\xf3\xcf\x8cw\xb8\xdc7\x90,\xcb\x06\xfc6\xd6\x14\x18="
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    str_0 = "Hz=\t(F940g'wSdF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    int_0 = 1172
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    int_0 = -1319
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    bytes_0 = b"+j\xc9\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    int_0 = -1685
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, int_0, list_0, list_0]
    tuple_0 = ()
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bytes_0 = b" .\x04e\xc7^\x8f\x8fO\xba\x9c\xfc\xf6\x18\xa1\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    str_0 = "!=[+y4?sS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    int_0 = -1195
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    bool_0 = True
    str_0 = "\x0b#P\r#b$VN"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    int_0 = -3277
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    int_0 = 2617
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    int_0 = -1857
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_2161():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2162():
    bytes_0 = b"\x80\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    bytes_0 = b"\x99R2\x9f\x924'\tAe\x90g\xcb|T\xcb\xe6g"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    bytes_0 = b"\xb8\xf9"
    str_0 = "K!kmL,=_6%7Zn(ydq="
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_2166():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2167():
    bool_0 = True
    float_0 = -2485.518
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    int_0 = 416
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    int_0 = -1305
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    int_0 = 3131
    module_0.match(int_0, int_0)


def test_case_2172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2173():
    float_0 = -3035.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    str_0 = "jk9kEf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    bytes_0 = b"e\xf6e\xcf"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    str_0 = "\x0c;oHD@htI/Lrxfk"
    int_0 = 902
    tuple_0 = (str_0, int_0, int_0, str_0)
    module_0.match(tuple_0, str_0)


def test_case_2177():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2178():
    bool_0 = False
    int_0 = 25
    bool_1 = True
    tuple_0 = (bool_0, bool_0, int_0, bool_1)
    list_0 = [tuple_0, tuple_0, bool_0, bool_1]
    bool_2 = False
    module_0.get_new_command(list_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    bool_0 = True
    bytes_0 = b"=\xe6\xf5\xc7f\xbb\x04a&\n!\x82Q\x90\xbf\xd1\xc5"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    bytes_0 = b"\xdd4\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    str_0 = "Naa+`G6YW~_Odyj%VV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    int_0 = 97
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    bytes_0 = b"\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    str_0 = "\n\n\tSP"
    list_0 = [str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    int_0 = -560
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_2187():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2188():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    int_0 = -5098
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    bytes_0 = b"\x80\x96\x9dc-:\xb7\xad\x8e5\xaa\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    complex_0 = -1135 - 4289.558014j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    str_0 = "5\r{yt3S3)vi\n"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    int_0 = 3398
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    int_0 = -2026
    dict_0 = {}
    tuple_0 = (dict_0,)
    tuple_1 = (int_0, tuple_0, dict_0, dict_0)
    module_0.get_new_command(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    tuple_0 = ()
    bytes_0 = b"\x19\xcd$v\xc7"
    set_0 = {tuple_0, tuple_0}
    tuple_1 = (bytes_0, set_0, bytes_0, tuple_0)
    tuple_2 = (tuple_0, bytes_0, set_0, tuple_1)
    module_0.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    bytes_0 = b"w\x17,\x1d/\xe92\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    str_0 = "m7 VXN!=ayO7( \\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    int_0 = -315
    str_0 = "&?Tj#"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    bytes_0 = b"\xec$\xdc\xa6\xd23"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    int_0 = 3184
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    float_0 = 2912.6821
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    str_0 = "YlY<g>m\x0bf))"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    int_0 = 2685
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    str_0 = '{[W]g,7`HBILvm"8'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    str_0 = "'EoD?W9"
    module_0.match(str_0, str_0)


def test_case_2209():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2210():
    float_0 = 1142.94
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    float_0 = 1325.5527
    module_0.get_new_command(float_0, float_0)


def test_case_2212():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2213():
    none_type_0 = None
    int_0 = -2215
    tuple_0 = (int_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_2215():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2216():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    float_0 = 3636.4
    module_0.match(float_0, float_0)


def test_case_2218():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2219():
    int_0 = 2754
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    tuple_0 = ()
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    int_0 = 482
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    str_0 = ";"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    bytes_0 = b"\xc0\xf8[\xb6\xca-\xf7\xac-"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    str_0 = '^uMPQ"LtN\t<Y'
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    int_0 = 3807
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_2227():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2228():
    bytes_0 = b"1\xbaWC\x8b\xa1g\xf9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2229():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2230():
    none_type_0 = None
    complex_0 = -3004.2196 - 750.103476j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    str_0 = '"fW^,v=AT'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    int_0 = -835
    list_0 = [int_0, int_0, int_0, int_0]
    bytes_0 = b"u\x80\xcf"
    str_0 = "~S/hgEQ"
    bool_0 = False
    int_1 = -1668
    tuple_0 = (int_1,)
    float_0 = -3647.0
    tuple_1 = (bool_0, tuple_0, float_0)
    tuple_2 = (bytes_0, str_0, tuple_1)
    module_0.match(list_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    none_type_0 = None
    bytes_0 = b"\x1a+\xf7'3\xf0\x0f\xf6\xc6L\x1dvg\xd7\xee\xa0\xc3\xee\x03\xf8"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    float_0 = -568.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, dict_0)
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    int_0 = -472
    bytes_0 = b"\x05*\"`\x89\xd7R2\x84/\xdf'^"
    list_0 = [int_0, int_0, bytes_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    float_0 = 650.0
    module_0.get_new_command(float_0, float_0)


def test_case_2239():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2240():
    str_0 = "tAQI\rRU\t?6!w61"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    bool_0 = False
    str_0 = "CNdc|YA"
    tuple_0 = (bool_0, bool_0, str_0)
    bool_1 = True
    set_0 = {tuple_0, bool_1, str_0}
    tuple_1 = (set_0,)
    list_0 = [tuple_1, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    bool_0 = False
    str_0 = "2k[\nh\\FSv}\nDu/9J\t"
    tuple_0 = (bool_0, str_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    bytes_0 = b"Z\x95i\xac\xea\x03\xe0,\x7f\xc0;\xe4\xceiR\xd3\xf6;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    int_0 = 677
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    bytes_0 = b"\x8b\xb6E\xc9=_c\xac\xa3\xca\x1f\xb8\xb4\x9e\x8d#\xa2|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    str_0 = "O3J:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    str_0 = "C'n;\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    str_0 = "nJGG\r_KU&^jsr"
    dict_0 = {}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    float_0 = -2184.5257
    bytes_0 = b"\xef#\x17\xc4NiRS\xb4\x1az\x1e\x93"
    tuple_0 = (float_0, bytes_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    bytes_0 = b"\xe3\xb1\xc2H\x83\xe1"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    str_0 = "V|xz#0"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    int_0 = 3431
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    int_0 = 722
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    complex_0 = 1642.9883 - 1640.5j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


def test_case_2257():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2258():
    bytes_0 = b"\xfd\x19\xed\x14\xe4\xe42\xfc\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    bool_0 = False
    str_0 = "WC'"
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: str_0}
    tuple_0 = (bool_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    int_0 = -3053
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    int_0 = 2388
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    int_0 = -3616
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    bytes_0 = b"\xef0\xd9\r\x8bLC\xde\x88\xd7\xd3I,\xbd&"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    bytes_0 = b"\x7f\x0e\xc7\x9en\x88*\x1b{\xf3Fq"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    str_0 = "\x0c!2#aXr"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2269():
    complex_0 = 863.088 - 1268j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    complex_0 = 442.5 - 605j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    bool_0 = True
    bytes_0 = b"C"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    bytes_0 = b"\xc0@\x88"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    int_0 = 2860
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    str_0 = "U\n|GXX.|Wj"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    float_0 = 6538.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    int_0 = -3359
    module_0.get_new_command(int_0, int_0)


def test_case_2278():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2279():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    bytes_0 = b"\xfc\x8bB\x89\xb7\xb5\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    int_0 = 359
    bool_0 = False
    tuple_0 = (int_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    int_0 = -321
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    str_0 = "7%8Eo"
    module_0.get_new_command(str_0, str_0)


def test_case_2285():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2286():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    float_0 = -1047.6022
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    str_0 = "4,F1\x0b?1wP7d_MD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    float_0 = -71.77951
    bytes_0 = b"\xd0\xcfa\xce\x9ds\x99\xaf\xf0\xa6\x12&a\x0e/\x1d"
    tuple_0 = (float_0, bytes_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    bytes_0 = b"\xbe\xdd\x89\xfes\xa0Tz\xd3\xa0\x05\xe1\xce+V\x9dcI"
    bytes_1 = b"\xf5=\xb7G&Z\x14;\xa3\xc4\xf7\xf3\xaa"
    str_0 = 'hFI\x0b!mb 5"B+3r'
    tuple_0 = (bytes_0, bytes_1, str_0)
    module_0.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    int_0 = 770
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_1.object(*list_0, **object_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    bytes_0 = b"\x08\x8f\x10\xe1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    int_0 = 1970
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    float_0 = -1649.5211
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    complex_0 = 637.738943 + 702.2503j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    float_0 = 2075.131113
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    int_0 = -1155
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    int_0 = 628
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    float_0 = -1523.131
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    bytes_0 = b"\xfb\xb4o\x98=\xec\x19\xa4R\xbe\xe5\xb1\xe2p\x7f\xb4\x830^1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bytes_0 = b"9"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    bytes_0 = b"\xa2\xd8\x9e\x8c\xb4\xec\x05\xf8\xe6s\xb1_\x13\xce\x80\x88\xa9-\x17"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    str_0 = "g5-"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_2309():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2310():
    list_0 = []
    dict_0 = {}
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    list_0 = [dict_0, dict_0]
    list_1 = [list_0]
    bytes_0 = b"\xa8\xeb\xff\xd68\xce|\x1c\x8f"
    tuple_1 = (tuple_0, list_1, list_1, bytes_0)
    module_0.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    str_0 = "6243\rs/O\r1B =q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    str_0 = '%-|iBSh"e~#>dfE'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    complex_0 = 668.234 + 420j
    list_0 = [complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    str_0 = "H/\r6CQ^sG)|Qk_"
    str_1 = "tCR\rh"
    module_0.match(str_1, str_0)


def test_case_2316():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2317():
    bytes_0 = b"\xd2?J\xec\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    int_0 = -2007
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    bytes_0 = b"\x9c\xeb\x87j\xa0\xac\xb77CA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    int_0 = -351
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    int_0 = -4091
    bytes_0 = b"\x05r\xfb\x1f\xb0\x12c\xbf\xbbL\xa8"
    tuple_0 = (int_0, bytes_0, int_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    str_0 = "k&\x0bKkj)nOb[OUv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    bytes_0 = b"\x03\xa5\xdb_\xa8o1\x11\xdf\x83\x88\x97"
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = "JPs<"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    int_0 = 4075
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0, int_0, int_0, list_0]
    module_0.get_new_command(list_1, list_1)


def test_case_2326():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2327():
    bytes_0 = b"\xc2Y\xfd\xa3\x17\xbe](p\x8f`;\x8a'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    str_0 = "?"
    tuple_0 = (str_0, str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    str_0 = "R4[eK%B[wG:c*8nC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    int_0 = 2786
    object_0 = module_1.object()
    module_0.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    bytes_0 = b"m,\xbf\x81\x0e\xac\x0c\xc7\xd2\xe1\xbd"
    module_0.match(bytes_0, bytes_0)


def test_case_2332():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2333():
    object_0 = module_1.object()
    bytes_0 = b"\xafo\x8a\x0c"
    str_0 = "lXF\txo9)|\rT"
    tuple_0 = (bytes_0, str_0)
    set_0 = {object_0, object_0, tuple_0, bytes_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    int_0 = -1485
    str_0 = "}gr\\xSo"
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, str_0, set_0)
    list_0 = [tuple_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    str_0 = ",Qd\niGI]H7Y>g,.Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    complex_0 = -2513.704 - 2784.22j
    list_0 = [complex_0, complex_0, complex_0]
    bytes_0 = b"&D\x7f\x9f)\xf8\xc0\xf7\xdd\xc0\xa4r\xc5"
    module_0.get_new_command(list_0, bytes_0)


def test_case_2338():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2339():
    bytes_0 = b"\x07g\x8c\xdf\x96\x1e\x86\xb9\x08!\xabd9\xe1\xf4B'\x982\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    bytes_0 = b"m>\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2341():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2342():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    int_0 = -4211
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    str_0 = 'U"'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    float_0 = 3080.49487
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    int_0 = 792
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    str_0 = "=;-eM-']ti^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    int_0 = -1836
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    str_0 = ";"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: set_0, bool_0: set_0}
    list_0 = [dict_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    float_0 = 809.2
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    bool_0 = True
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    str_0 = "ks;I\tj^Wh&z6&a]Ml\tFz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    int_0 = -4326
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    float_0 = 3897.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    int_0 = -2582
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    float_0 = -2763.8305
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    int_0 = -1723
    tuple_0 = (int_0, int_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    str_0 = "NN^UjUpzgn((x1|)>y4*"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    int_0 = 1865
    module_0.get_new_command(int_0, int_0)


def test_case_2365():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2366():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    float_0 = 1891.682
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    bytes_0 = b"\x0b\x15\x85[\x93\x8e\x16\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    int_0 = -4719
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    bytes_0 = b"Su\x9c\xbb<L\x8b{\xe7\xfeEy4^\xde"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    str_0 = "p;!qml%{\ttf\r'zM"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    float_0 = 914.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    bytes_0 = b"\x89\x80\xe5\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    bool_0 = True
    bytes_0 = b":\x074\xe2\xa6\x18\xc7"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    bytes_0 = b"?\xbbn=\xc0\xdd\x13\t\xc1\xf4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    int_0 = -3427
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    none_type_0 = None
    float_0 = -3925.9163
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    complex_0 = 12.85431 - 3607.425j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    float_0 = -2633.27
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    int_0 = 2572
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    str_0 = "\nn$H"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    str_0 = "LQ?%3N.@6-d}`1\rCWZ_\n"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    float_0 = 3386.259
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    bytes_0 = b"\x01\xcf \xac6\xf1\xf7\x1c/Jd\x9b\xec\x088og\x8f"
    float_0 = -148.0
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, float_0: float_0, float_0: bytes_0}
    module_0.get_new_command(dict_0, float_0)


def test_case_2387():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2388():
    float_0 = -2617.7
    module_0.get_new_command(float_0, float_0)


def test_case_2389():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2390():
    bytes_0 = b"\xa0\xdf\xa7\xa1\x8a\xbc\x15\x16\xdd\xcb\x87c>\x1c\xb4\x13\xea\x80"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    str_0 = "Q9\rh5|}%w)v|3DpG"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    float_0 = 3273.79
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    bytes_0 = b"\x87\x9fM\x0fn\xab\x01\xa3\x19\x0e\xef\xed~\x04\xe7\xde;\x98L"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    none_type_0 = None
    float_0 = -1386.054
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    str_0 = "E"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    int_0 = 2950
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    bytes_0 = b"FVE\xd7\x8b\xa7K\xfb5\x8b\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    object_0 = module_1.object()
    dict_0 = {}
    object_1 = module_1.object(**dict_0)
    module_0.match(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    bytes_0 = b"\x14\x93\xfb\x93\xe6\x1e5\x96x\rDh"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    tuple_0 = ()
    set_0 = {tuple_0}
    tuple_1 = (tuple_0, set_0, tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    str_0 = "O$w1!Y_ees|Q}N\x0c[b;"
    str_1 = "\"l/ ]T*`i=9OO'jf'C2"
    str_2 = "Z)tkx"
    float_0 = 1565.811843
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_1: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    float_0 = 3900.14552
    str_0 = "{g4[;S[b7-\\Ez~AQ"
    tuple_0 = (float_0, str_0)
    set_0 = {tuple_0, str_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    str_0 = ":c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    float_0 = 3455.136459
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    object_0 = module_1.object()
    bool_0 = False
    dict_0 = {object_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    float_0 = 885.053569
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    str_0 = ""
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    str_0 = "2^-+\nq^+~.:\r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    float_0 = -2569.822
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    list_0 = [set_0, set_0]
    bytes_0 = b"\x9b|\xbcq\x88=\xb3\xb5\x7f\xf1N\x03\xd1>"
    tuple_1 = (list_0, bytes_0, bytes_0, tuple_0)
    module_1.object(**tuple_1)


def test_case_2414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2415():
    complex_0 = -232.9 - 1400j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    int_0 = -2240
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    int_0 = 1875
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    str_0 = "tF7?Z8G:%TO%hVOK4MSN"
    module_0.match(str_0, str_0)


def test_case_2420():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2421():
    str_0 = "`G^8LTnJ'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    str_0 = "9[Ou"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_2424():
    pass


def test_case_2425():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2426():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    bytes_0 = b"\x16\xae8\x89\xda<\xad<S"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    str_0 = "(pvMep."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    float_0 = 3508.083807
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    bytes_0 = b"\xb3\\\xfc\tM\x1a\x12\xaa\xed}W2c\x87\xecM\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    bytes_0 = b"_j\x1f\x08\xc1\xbb\x7f\x98\x0c\x0e\x9e\x04\xa6\xdbY\xb9"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    float_0 = 807.91
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    bytes_0 = b"~>*z\xbc\x8e\\0~\xc4\x92\xa2\xb7\xda\n\xb3"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    bool_0 = True
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    int_0 = 4862
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    int_0 = 807
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, int_0, dict_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


def test_case_2437():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2438():
    float_0 = 3745.15677
    bytes_0 = b"\x17\xfc"
    module_0.match(float_0, bytes_0)


def test_case_2439():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2440():
    bytes_0 = b"%\xf4"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    bytes_0 = b"1\xc6\x94\x07j\x7f{\xb3\xf4`\xaf"
    str_0 = 'yCBw4LY"L!vkG7H'
    bool_0 = False
    tuple_0 = (bytes_0, str_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    bytes_0 = b"\x85\x96\x8e\xc4\xe0\xf5An"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    int_0 = -3302
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    bytes_0 = b"\x8c|Vx\xe2\x8cu+pzz\x93\xeaI8\xbb\x1a"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_2445():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2446():
    int_0 = 3144
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    complex_0 = 822.363324 - 2624.7079j
    list_0 = [complex_0, complex_0]
    list_1 = [list_0]
    module_0.match(list_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    float_0 = -1182.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    int_0 = 2211
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    str_0 = "w\x0c\x0b&\nq.="
    none_type_0 = None
    str_1 = "j4X"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


def test_case_2451():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2452():
    str_0 = "\rQuO{6W|+iyE'AhVF@W?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    int_0 = -1425
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    float_0 = -3465.5
    list_0 = [float_0, float_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    float_0 = 123.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    complex_0 = -28.146 - 1143.361981j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    float_0 = 152.961261
    module_0.get_new_command(float_0, float_0)


def test_case_2459():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2460():
    complex_0 = 1354.9 - 2724.72821j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    float_0 = 523.1311
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    float_0 = 147.54
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    float_0 = -6014.3035
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    str_0 = "(GV<uXn[\x0b"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    int_0 = 526
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    bytes_0 = b"\x84\x1a\xca\xbc\xc3\x1ar\xde\xc5\x98!QY]p7\xc8t("
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    bytes_0 = b"\xb5\x05\xa9{\xec\xf1r\xa1\xdc\xce\x0bC\x80\x1fx\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    bytes_0 = b"\x8e\xf0\xde\x19\xd2/lZ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    int_0 = -427
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    bytes_0 = b"\x89\xb1\xe0\xb7*Q\xe6\xd8O"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    bool_0 = True
    bytes_0 = b"I)\xcf\xba\x10\x8d^kqK\xfbQ\xdd"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    bool_0 = False
    str_0 = "Adlx/8m8}4"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    float_0 = 1488.330743
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    none_type_0 = None
    bytes_0 = b"a.m\x165\xf4u:\xfd\xd6L\xb9{\x0fG\x92"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    int_0 = -1038
    module_0.get_new_command(int_0, int_0)


def test_case_2477():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2478():
    int_0 = 4022
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    int_0 = 2999
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    complex_0 = 2989.723016 + 1944.765j
    list_0 = [complex_0]
    list_1 = [list_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    bool_0 = True
    object_0 = module_1.object()
    set_0 = {bool_0, bool_0, object_0, bool_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    int_0 = -1070
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    float_0 = 134.41327
    bool_0 = False
    list_0 = [float_0, bool_0]
    float_1 = -25.7689
    bytes_0 = b"\xe0\x08V\xd8\xe1\xaa?\xd4R\x95g"
    tuple_0 = (float_1, bool_0, bytes_0)
    tuple_1 = (list_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    float_0 = -547.0
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"Y%\xcf\xbb\x16\xc2\xa0"
    tuple_0 = (list_0, bytes_0)
    list_1 = [tuple_0, list_0, bytes_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    bool_0 = True
    str_0 = 'I,r^d#"u'
    list_0 = [bool_0, bool_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    str_0 = "$qst=~\x0bh{{0<-7NS*9kN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    none_type_0 = None
    str_0 = "9scy\rP'Nok"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    int_0 = 627
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    str_0 = "$-F?+7@lFkk<#Ha"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    str_0 = "(7kA\t:kU@[n7~LW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    int_0 = 2776
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    int_0 = 239
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    int_0 = -2142
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    int_0 = 622
    bytes_0 = b"\xa0\xd6\xbdd\xb5"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    int_0 = -1723
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    str_0 = "CPX^D$b,8=.4\x0cI{lH"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    int_0 = 738
    list_0 = [set_0, int_0, bool_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    bool_0 = False
    str_0 = "A`"
    dict_0 = {bool_0: str_0}
    tuple_0 = (bool_0, str_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    float_0 = 34.2745
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    float_0 = 761.1
    str_0 = "*\t1j})8V="
    dict_0 = {float_0: float_0, str_0: float_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bool_0 = False
    bytes_0 = b"\xc9`"
    tuple_0 = (bool_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    bytes_0 = b"\xad\x10\x1e\xd3(\tm\xfd+\xf7`t"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    str_0 = "UzTpESs32Xb:p"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    int_0 = 2157
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    bytes_0 = b"\x03,\x9fRMy\xb0\xacW\xc0\xe4\xf8\xefS\t\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    int_0 = -1758
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    int_0 = 3027
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    int_0 = -1669
    module_1.object(*int_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    float_0 = -916.18881
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    str_0 = "VikWc-r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    str_0 = "P'DBFf|VvNnw:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    tuple_0 = ()
    bytes_0 = b"\xbe\x0b"
    tuple_1 = (tuple_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    float_0 = 3459.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    float_0 = -1493.466312
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    str_0 = "~ToHR^t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    str_0 = "d-iG{"
    int_0 = 2207
    bool_0 = True
    bytes_0 = b"\xcav"
    tuple_0 = (int_0, bool_0, bytes_0, str_0)
    dict_0 = {str_0: str_0, str_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    int_0 = -935
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    float_0 = -213.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    bytes_0 = b"o[]MB+'\xc2\x15b\xe7\xe0\x19\xf8.Q\x8d\x03\""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    bytes_0 = b"=\xd0\xcc\x19\t\xbd\x88"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_2530():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2531():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    str_0 = "[DqCxi8Z4Ub[ aXg?_ns"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    int_0 = -466
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    int_0 = -1705
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    complex_0 = -1678.59256 + 1744j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    int_0 = -537
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    int_0 = -109
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    str_0 = "<*MtH7d#}|MaMis2|}"
    list_0 = [set_0, set_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    float_0 = -1199.171
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    int_0 = 2055
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    float_0 = 578.77
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2542():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2543():
    int_0 = -3434
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    bytes_0 = b"\x0bK\xf0r\r\xb0[\xcc\xe3\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0}
    int_0 = 1419
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    bytes_0 = b"zF\x17\x9e\xe6\x85\xa5\xd0\xbe\xe6\x07\xf1\xefq\xf8\x86\x98@\xec\x8f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    str_0 = "I&0K:Ejr6\x0c9(\\7^3P\rd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    complex_0 = 950.303 - 1469.7526j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    str_0 = "4&r|y&"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    str_0 = "|)BX_\r/^=G<8AS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    none_type_0 = None
    str_0 = "@!4w=u"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    list_0 = []
    object_0 = module_1.object(*list_0)
    str_0 = "6Ni,!hbb9^h"
    tuple_0 = (object_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "ok;[6^b3hx"
    dict_0 = {str_0: bool_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    int_0 = 1080
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    int_0 = -1610
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    int_0 = -634
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


def test_case_2558():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2559():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    float_0 = 1432.0
    float_1 = -442.3698
    list_0 = [float_0, float_0, float_1]
    module_0.match(list_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    float_0 = 2863.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    none_type_0 = None
    float_0 = 1474.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    bytes_0 = b"\x018\xcf<\xce\xe5\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    complex_0 = -2434.93 + 3245.405j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_0, bool_1]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    str_0 = "Oj\nzstca0M?oGCK|*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    bytes_0 = b"\xf3\xa6sy\xa5\xf4\x83\xdd\xc8"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_1, list_0)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    int_0 = 1751
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    bytes_0 = b"G\xb6\xf6\xe3)x\x8f\xc1,>\x14\x8c\xb3="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    str_0 = "x~N^xjjX4'ml;`"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    int_0 = -2592
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    str_0 = '1=A/Tu:A"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    bytes_0 = b"y\xff\x99oj\xd2tV\x9f\x02<\x90\xc6#\xc14\xcd"
    bytes_1 = b"\xa6\xef"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    str_0 = "8)reTEzh9JDbYPQf8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    none_type_0 = None
    bytes_0 = b"\x11xDm$\x80\xcb\x16\xf3"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    str_0 = "J5e1"
    bool_0 = False
    tuple_0 = (str_0, bool_0, str_0, bool_0)
    set_0 = {tuple_0, bool_0, str_0}
    bool_1 = True
    tuple_1 = (set_0, bool_1, str_0)
    module_0.match(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    str_0 = "\\Rej1~~vl=@@b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    str_0 = "o)S;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    bytes_0 = b"6\xd9\x02\x14\x05w\x00\xads\x94/WE\x04\xbc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bytes_0 = b"\x06\xa8\x1f\xa3\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    bytes_0 = b""
    bool_0 = False
    dict_0 = {bytes_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    int_0 = 1091
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    none_type_0 = None
    float_0 = -3132.709
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    bytes_0 = b"\xf0\xcc\xb4\xc5=\x9e\xf0\xc79"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    str_0 = "Os\n_X4%-"
    bool_0 = True
    set_0 = {str_0, str_0, str_0, bool_0}
    object_0 = module_1.object()
    list_0 = [set_0, object_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    complex_0 = -209.23 + 2222j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, object_0)


def test_case_2593():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2594():
    str_0 = "$#X!Xz\x0b'"
    complex_0 = 745.4 - 606.749863j
    int_0 = -544
    tuple_0 = (str_0, complex_0, int_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    str_0 = '\n+2"z.P8PW['
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    str_0 = "TS 9D5'Rp>s^j&P'iT)o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    bytes_0 = b"G\x82UG\xeb\xaa\x02\x17\x85\xcf"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    str_0 = "vBN%9\tCwo"
    module_0.get_new_command(str_0, str_0)


def test_case_2601():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2602():
    str_0 = 'B8Y}&D7qbsKU"j'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    str_0 = "Qi*g\nx\n"
    module_0.match(str_0, str_0)


def test_case_2604():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2605():
    int_0 = 700
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    bool_0 = True
    bytes_0 = b'"\xebRN'
    tuple_0 = (bool_0, bytes_0, bytes_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    int_0 = 212
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    float_0 = -2697.801408
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bytes_0 = b"\xfc\xe8"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    str_0 = 'N0\\{[<+`@*\x0bU"[l]#8'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    int_0 = 1082
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    int_0 = 5382
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    complex_0 = 5089 - 3482.95j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    int_0 = -352
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    int_0 = 497
    module_0.match(int_0, int_0)


def test_case_2616():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2617():
    float_0 = 602.989317
    set_0 = {float_0, float_0, float_0, float_0}
    str_0 = "\nWy\x0c{k.}cl|H\rw"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    int_0 = 593
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    int_0 = -1026
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    none_type_0 = None
    set_0 = set()
    bool_0 = True
    tuple_0 = (set_0, bool_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    float_0 = -612.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    float_0 = 2305.765
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    str_0 = "*!]"
    module_0.get_new_command(str_0, str_0)


def test_case_2625():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2626():
    bytes_0 = b"b\xd9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    set_0 = {tuple_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    float_0 = 4124.075
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    str_0 = "\\to8$>XYj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    bytes_0 = b"\x07\xd4v\x0f\xbf\xde\x99\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    none_type_0 = None
    int_0 = 1259
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    float_0 = -3112.6927
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    str_0 = "_5vM7%5)Fk)xjSlbZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    float_0 = 116.89639
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    float_0 = 719.46618
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, tuple_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    object_0 = module_1.object()
    int_0 = -1410
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_1, bool_1}
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: set_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_2643():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2644():
    bytes_0 = b"\x8b\xb0\xcf\x03?\xbb\xca]z\xd7\xa0\xf6\xac\xb2\x14\x12"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    bytes_0 = b"\xf6*\xeb\x8f\x9ekNH\x84\\\x83\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2646():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2647():
    int_0 = -2326
    module_0.get_new_command(int_0, int_0)


def test_case_2648():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2649():
    bytes_0 = b"\xb3\x88`\xd5\xdc\x0e\x93\xe2}b\x16\x85#\x9e\xec\x87,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    str_0 = ";8gkL@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    bool_0 = False
    complex_0 = -375.8932 - 1815j
    tuple_0 = (bool_0, complex_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    int_0 = 2678
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    int_0 = 2557
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    str_0 = ";`Z~T|BqIT\\}</a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    str_0 = '"/J?R}IAY|'
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    str_0 = 'lSo\\_d9\r"tZYxbp'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    float_0 = 2058.93354
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    str_0 = 'LTE"hPmkTPMV'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    bytes_0 = b"b,\xd6"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    str_0 = "'U+,-"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    bytes_0 = b"\xd9\xcb\xc9\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    int_0 = -2085
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    complex_0 = -799.697 - 1783.3416j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    int_0 = 1632
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    float_0 = -200.07227
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    str_0 = "+`\rh8'e/"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    str_0 = "@QwIROZ_KhqiS<n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    str_0 = "6.:7A"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    str_0 = "Kau94l11n,(t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    int_0 = -978
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    str_0 = ",i1|"
    str_1 = "|"
    bool_0 = True
    tuple_0 = (bool_0, bool_0, str_0)
    str_2 = "q^"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: tuple_0, str_2: str_2}
    module_1.object(**dict_0)


def test_case_2674():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2675():
    bytes_0 = b"Y\xb9a\xac{$\x83\x89\xfcju\xe8y"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    int_0 = -2680
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    int_0 = 496
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_2678():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2679():
    bytes_0 = b"O\xe4\xa6\xe9\xf0\xc0\x9d\x82\xb4\xf6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    int_0 = 348
    int_1 = -4178
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    int_0 = 2729
    module_0.get_new_command(int_0, int_0)


def test_case_2682():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2683():
    bool_0 = True
    str_0 = 'Fz;q~f%W"S'
    set_0 = {bool_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    str_0 = ",fB"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    bytes_0 = b"\xc4"
    bytes_1 = b"\x9a\xbf\x06n\x06\x99hn>48\x89\\\x1eX>S"
    tuple_0 = ()
    tuple_1 = (bytes_0, bytes_1, tuple_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_2687():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2688():
    bytes_0 = b"\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    complex_0 = -669 - 1304.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    int_0 = 281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    int_0 = 730
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    bytes_0 = b"\xce\xecE)\xd9\xf6\nqa\x8aZ\x90\x88H"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    str_0 = "2Ykwn&'\t5]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {bool_0: bool_0, bool_0: set_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    bool_0 = False
    bytes_0 = b"\xb1\xb3\x04+\xc5\xf9\xdb\xb8\xe7\x1eT\xed\xa0"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    dict_0 = {}
    bytes_0 = b"h\xf5#S\xbf\x07\xfb,\xa0\x89"
    tuple_0 = (dict_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    tuple_0 = ()
    str_0 = ")p$>w6"
    float_0 = -985.4
    tuple_1 = (tuple_0, str_0, float_0)
    module_0.get_new_command(tuple_1, tuple_1)


def test_case_2699():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2700():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    float_0 = -1296.1
    set_0 = {float_0}
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    str_0 = "FH,0:}\r7Mi*>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = []
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    bytes_0 = b"\x86{\xd3\xbb\x03\xb5T\xeaub2\x80:\xf3\xc0\x95\x1b\xd1C"
    set_0 = {bytes_0}
    list_0 = [bytes_0, bytes_0, set_0, set_0]
    tuple_0 = (bytes_0, bytes_0, set_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    int_0 = 2179
    set_0 = {int_0}
    int_1 = 2417
    bool_0 = True
    object_0 = module_1.object()
    list_0 = [object_0]
    tuple_0 = (set_0, int_1, bool_0, list_0)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    complex_0 = -348.019123 + 5322.141224j
    set_0 = {complex_0, complex_0, complex_0}
    str_0 = "PJjRV|Hya\x0b^z#qi+"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    bytes_0 = b"<\xf5\x96=\xa6\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    str_0 = "}#R;WV4\rJ;LSR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    bytes_0 = b"\x08\xa3\x90\xc1Nh\x16\xd9\xb9\x82\x14D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    bytes_0 = b"q\x18n14\x05\x13\xb7\x93\x18a\x18X\xd8\x05/{o+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    float_0 = -678.17667
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    bytes_0 = b"\x8c\xfe\x18\\\x9cDW:ft"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    bytes_0 = b"\xbb\x06C\xd9\xa7o\xcfw\x9e\xa5$\t^\x05\x9d\x9e"
    module_0.match(bytes_0, bytes_0)


def test_case_2715():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2716():
    bytes_0 = b"\x1e\x82\x96|s\xef!X"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    bytes_0 = b"\x8a\\\xa0V~x*\x88\x84\x14\xfe\x86:m\x80P\xdc\xa5\xeb\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    str_0 = "\n\x0cg~GNl_hG_c\td]l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    str_0 = "Ha^J66,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    str_0 = "Ozo\ni^UcO@iw"
    str_1 = "vt"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    int_0 = -4823
    float_0 = 1258.463
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    int_0 = 51
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    float_0 = -1076.148574
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_2724():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2725():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    bytes_0 = b"\r>\xe0"
    tuple_0 = (bytes_0, bytes_0)
    set_0 = {tuple_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_2727():
    pass


def test_case_2728():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2729():
    int_0 = -2616
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    int_0 = -2334
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    int_0 = -871
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    str_0 = ">!i*93"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    complex_0 = 732.12 + 1945.8905j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    bytes_0 = b"m\xaf\xcf5{!\xab\xb8\xd1g\xefg\xd5\xc4 5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    int_0 = 4570
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    str_0 = "g!,pUFASa"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    bytes_0 = b"4\xdc\xdc\xb8\xd9\xb0"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    bytes_0 = b"\xe6\xdc\x91I\x94~\x0b\xcc\x0c\x8c\xa9\xd2w\xa04"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    bytes_0 = b"\xbd\x15\xbdmW\r\x13\x08\xfb\xa2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "u"
    tuple_0 = (dict_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    complex_0 = -2391.65645 - 190.85895j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    int_0 = 1579
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    str_0 = "mJr\\\r\th]V7|HpfZW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    int_0 = -2059
    bytes_0 = b"Q\x14\x0b)\xdd\xbfm\x87)ao\x88\x8b\xb6\x92\x0fQ"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    int_0 = 1091
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    int_0 = 2759
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    str_0 = "5JQ"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    complex_0 = 1769.32 - 5.5494j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    int_0 = 3646
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    complex_0 = 876.677 - 57.74j
    str_0 = "%W}aArxV>Ue"
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    bytes_0 = b"h\xd7\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    int_0 = -830
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    bytes_0 = b"4\xf6AR"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


def test_case_2757():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2758():
    str_0 = "?(Dex;5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    bool_0 = False
    str_0 = "MVg\\RnJ\x0bYDMFKF"
    tuple_0 = (bool_0, str_0)
    set_0 = {tuple_0, str_0, tuple_0}
    list_0 = [set_0, tuple_0]
    list_1 = [list_0]
    str_1 = "Qi"
    module_0.get_new_command(list_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    bytes_0 = b",K}\x0e\x15\xcf\xacf\xaa\x8e\x157\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    bytes_0 = b"\xdf\xd0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    bytes_0 = b"\xec\x8a-\x87\xdc\x1e\x03\xb7\xf2\x03"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    int_0 = 3425
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    float_0 = -1175.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    bytes_0 = b"\xa3^\xd8\xe1\x83\x06w\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    str_0 = "svVog:Bo/_<`\t-P"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    bytes_0 = b"\x8b,\t\x93/\x97"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    bytes_0 = b"\xa6{\x80$\x98\xeb\x04Z\x16\xc31\xc8\xc5\x05\x1b~D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    int_0 = -1695
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    complex_0 = 1098.81 + 333.23859j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    str_0 = "8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    bytes_0 = b"\xcc\xa3&\xa0\x90\xa4\xf7\xe3_\xb8\x8ag\xfd\x98\xb9^Lg"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    bytes_0 = b"\x1b\xf7\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    set_0 = set()
    bool_0 = True
    list_0 = [set_0, set_0, set_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_2776():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2777():
    bytes_0 = b"i.\x94K\x84[\x13\xccs\xc5\xf9]\xe2L"
    set_0 = {bytes_0}
    int_0 = 2650
    tuple_0 = (set_0, int_0, int_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    bytes_0 = b"\xa3}\x0fz\xaa\xff\xde<D%\xf9\xfar\xb4\x18t"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    float_0 = -3641.7435
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = True
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    float_0 = -1045.222258
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_2782():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2783():
    int_0 = 2029
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    bytes_0 = b"\x12 JH\xe8\x1d\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    int_0 = 287
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    str_0 = '~@K:9"8v*+JN'
    none_type_0 = None
    str_1 = "~vqN<$4[DR=dYWK8"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


def test_case_2787():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2788():
    int_0 = -1096
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    int_0 = 2603
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    str_0 = ""
    bytes_0 = b"\t#I\xeb\x1d\x1d"
    float_0 = -3651.941
    tuple_0 = (bytes_0, float_0, bytes_0, float_0)
    list_0 = [float_0, bytes_0, bytes_0, float_0]
    tuple_1 = (str_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    str_0 = "1y-A!h.0EF("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    object_0 = module_1.object()
    str_0 = "/AHGAdsl:P``n%#~w*W"
    dict_0 = {object_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    float_0 = -4039.35
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    float_0 = -374.0
    bytes_0 = b'\x0f$\xfc]0\x00F\xa3\x87"\xb9i\x7f`\x8c'
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    none_type_0 = None
    str_0 = "'6-*W]MGx!R\x0c`:x4MY_"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    complex_0 = 361.8644 + 278.25238j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    str_0 = "|\tTFfx'kHNKd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    str_0 = "~n)/%t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    int_0 = 884
    tuple_1 = (tuple_0, list_0, int_0)
    tuple_2 = ()
    list_1 = [tuple_1, tuple_2, int_0]
    module_0.match(list_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    float_0 = 1690.78
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    none_type_0 = None
    set_0 = {none_type_0}
    int_0 = -2499
    tuple_0 = (set_0, int_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    int_0 = 2161
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    int_0 = -22
    list_0 = [int_0, int_0, int_0]
    list_1 = [int_0, list_0, list_0]
    module_0.get_new_command(int_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    complex_0 = -3075.0957 - 3498.5j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    int_0 = -970
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    int_0 = -594
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    bytes_0 = b"a\x1e\xc3e!\xe3I\x99\xb2:\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    float_0 = 358.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    str_0 = "PG_-I!;fILna,:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    str_0 = "`z*(}C"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    bytes_0 = b"\xe5\xb4S\xf8\x9ch"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    int_0 = 315
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    int_0 = 316
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    int_0 = 4441
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    int_0 = 2685
    tuple_0 = (int_0,)
    set_0 = {tuple_0, tuple_0, int_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    str_0 = "=x(f"
    none_type_0 = None
    str_1 = "&-w]WOk>o@C[EMc"
    str_2 = "|\x0b,="
    str_3 = "i{-O"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    float_0 = -246.626353
    tuple_0 = (float_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    int_0 = 976
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    str_0 = "|~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


def test_case_2825():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2826():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    bytes_0 = b"1P\xee\x00Hv\x8f\xbc\x01U\xc4\xbe\xa8\xdc"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2828():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2829():
    bytes_0 = b"i\x17T\xa5\x18\xeb|\x9d+|\x19\xdd\x19k,uB\x08\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    bytes_0 = b"Z#|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    float_0 = 1430.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    bytes_0 = b"\xbaA4\xbc\xc7\x82\x12\xbc\x1a\xe6("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    int_0 = 3141
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    bytes_0 = b"\x98\x0e\xb0\x87K\xa7\x13v4\xb5\x84\xe7\xb2\\\xb6\xb8\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    float_0 = -1584.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    str_0 = "K{\\}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    float_0 = -866.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    bytes_0 = b"K\xd3m\xa1\xcf\xd9\x85\xf7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    str_0 = "j|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    str_0 = "Mi f!\x0c1lN8b1uht)O"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    bool_0 = False
    str_0 = '8T2>"]h*p|E'
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    bytes_0 = b"\xd1\xc7A\xb0\x14"
    bool_0 = False
    list_0 = [bytes_0, bytes_0, bool_0, bool_0]
    list_1 = [list_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    float_0 = -376.019446
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    bytes_0 = b"\xcb\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


def test_case_2846():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2847():
    bytes_0 = b"\xd1`\x85t\xfb\x1e\xb5W\x90t=\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    bytes_0 = b"fD\xa3\xfd\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    str_0 = ";,5H;9,V_j:Sd3:c H;]"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, set_0)


def test_case_2851():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2852():
    str_0 = "i7(\r\tR]`riK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    str_0 = "7<7Wx"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    str_0 = "/qP\n_fR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(bool_0, dict_0)


def test_case_2856():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2857():
    int_0 = -1076
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    tuple_0 = (bool_0, dict_0, list_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    int_0 = 1045
    module_0.get_new_command(int_0, int_0)


def test_case_2860():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2861():
    int_0 = -164
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    float_0 = 905.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    str_0 = ">DSv_r`c:C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    str_0 = "|6AZU5K0i6c0[6bdh,"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    bytes_0 = b"\x12W\xb3\xe4\r\x16\xfb`\xc2a\xf2\x06\xbc\x8a\x87QK"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    str_0 = " &A^%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    str_0 = "y:Yy3TJ[XKW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    bytes_0 = b"21\xf0.!\xee\x9b)\x91\x94\n[\xa6\x0e\xa8\xd1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    bool_0 = False
    list_0 = []
    complex_0 = 1788.12401 + 5580.8708j
    tuple_0 = (bool_0, list_0, complex_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_0, bool_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    int_0 = 957
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    bytes_0 = b'h"\xe9'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    int_0 = 1978
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    int_0 = 3421
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    tuple_0 = ()
    float_0 = -2227.73
    bytes_0 = b"W\xebS\x91"
    tuple_1 = (float_0, float_0, bytes_0)
    tuple_2 = (tuple_0, tuple_0, tuple_1, tuple_1)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    int_0 = -252
    bool_0 = True
    dict_0 = {int_0: int_0, bool_0: bool_0, int_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    int_0 = -566
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    bool_0 = True
    str_0 = "YK:}S5zc"
    tuple_0 = (bool_0, str_0)
    int_0 = -2177
    list_0 = [tuple_0, int_0, str_0, str_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    dict_0 = {}
    str_0 = "blD^FMvAKy\nfU&e"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    int_0 = -2895
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    none_type_0 = None
    float_0 = -353.12652
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    int_0 = 298
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    object_0 = module_1.object()
    int_0 = 270
    tuple_0 = (object_0, int_0, object_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    bytes_0 = b"6\xa4\x17\xa9\xfb\xd8\x1a\x90O\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    bytes_0 = b"\x90\x9c\x02p5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    float_0 = -1370.76774
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    bytes_0 = b";"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    bytes_0 = b"\x8b\x01wKhr\x88t\x06"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    none_type_0 = None
    bytes_0 = b"\xef\x1c1\x91/Kb\xca\x8b"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    complex_0 = -4050.617538 + 3960.678044j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    int_0 = -868
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    str_0 = "ap=9fd*N9"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    float_0 = -1468.62
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    str_0 = 'P8qw\x0c?O`yjV=:2"=<4;c'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    int_0 = -5075
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    float_0 = 3730.53895
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    float_0 = -398.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    str_0 = "7RdE[m7j~l3>rr@fV3<("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    str_0 = "u"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    str_0 = "F_l>z{=l"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    bool_0 = False
    int_0 = 773
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    str_0 = "p<u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    str_0 = "?*C~3Yb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    int_0 = 754
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    int_0 = 433
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    str_0 = "h~Z-2&<Y"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    int_0 = -1241
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bytes_0 = b"\\\xf5)\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    int_0 = 3896
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    complex_0 = -1440.41688 - 908.21j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    bytes_0 = b"\xf6r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    int_0 = 2596
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    bytes_0 = b"\xa8n\xf5=L\t\xc4\xe40h[\xcd\xf02*\xd4:"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2921():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2922():
    complex_0 = -1957.34472 + 1352.6125j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    bytes_0 = b"\xcc\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bool_0 = True
    float_0 = 2005.19
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    float_0 = -1637.675
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    int_0 = -2110
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    complex_0 = 1701.447 + 2818.251j
    set_0 = {complex_0}
    module_0.match(set_0, complex_0)


def test_case_2928():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2929():
    bytes_0 = b"&~,dr\xda\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    str_0 = "9>uu8v6.?"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = []
    tuple_0 = (dict_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    float_0 = -1575.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    float_0 = -892.552
    module_0.get_new_command(float_0, float_0)


def test_case_2933():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2934():
    bytes_0 = b"\xe4\\\x97\x0f\xbd\x94\xef@\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    float_0 = -74.05
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    bytes_0 = b"k|\xb4\xe1\x07\xc0\x82\xbd482"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    int_0 = 994
    bytes_0 = b'\xdd"}J'
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    float_0 = -6167.5978
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    int_0 = 6485
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    bytes_0 = b"\xd3T$9\xb60\x9b\x02_)\xc3\xf5\x9e\xcd\xca\xce#-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    int_0 = 953
    module_0.get_new_command(int_0, int_0)


def test_case_2944():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2945():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


def test_case_2946():
    pass


def test_case_2947():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2948():
    float_0 = 4142.880026
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    complex_0 = -66.8049 - 2469.78136j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    str_0 = "t\t$Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    int_0 = -799
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    int_0 = 2390
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    bytes_0 = b"mh{\xdbh\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    none_type_0 = None
    bytes_0 = b"h\xe4\xc7\xa5\xd7\xbaR\x1c\xac!\xbb}\xfc\r\xd7I\xa9"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    int_0 = 1580
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    str_0 = "aj`Uy[l357\tJ2I~%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    str_0 = ":bd\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    bytes_0 = b"\xf9\x81\xb6\xfd2"
    dict_0 = {}
    module_0.match(bytes_0, dict_0)


def test_case_2962():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2963():
    bytes_0 = b"\rG\xf0\xf9\x15\x07q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    float_0 = -350.080806
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_2965():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2966():
    int_0 = -990
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    int_0 = 254
    list_0 = [int_0, int_0]
    int_1 = 1178
    set_0 = set()
    tuple_0 = (list_0, int_1, set_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    str_0 = '(M?U_{4gY"t2&5}'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    bool_0 = True
    str_0 = "dI rdg(Pj<\t"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    float_0 = 2390.47
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    complex_0 = 4232.230862 - 3734.37121j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    int_0 = -1036
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    complex_0 = 788.15451 + 208.64308j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    bytes_0 = b"\xb8Nf\x8e9g-\x83\x1bz'\xdb\xe2L\xfaZ\xf3i\xbd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    str_0 = "<ah<"
    dict_0 = {}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    str_0 = "w-C\x0cLV\\\x0bJ3$cNLz/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    int_0 = 285
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    int_0 = -789
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    int_0 = -1925
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    float_0 = 27.55643
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    int_0 = -595
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    set_0 = set()
    complex_0 = 2551.6 - 2845.48j
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    bytes_0 = b"\xc1\xd4j\xb6\xbe\x01\xa6\xa6\xcd/\x86\xc4\xc9\x00\xb6\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    bytes_0 = b"\xf5<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    int_0 = 788
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    str_0 = "NOat2$)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    complex_0 = -520.5455 - 149.9j
    bool_0 = False
    list_0 = [complex_0, complex_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    float_0 = -4297.89992
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    str_0 = "kb0L)IE9aHHsS}?BuX.s"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    str_0 = "~\n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    float_0 = 936.0
    bytes_0 = b"\xa7\xd3k\xa6Zy\x84\xfe\x1e\xdeE\xfb"
    list_0 = [float_0, bytes_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    float_0 = 1920.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    float_0 = 817.71703
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    int_0 = -1143
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    int_0 = 1059
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    bytes_0 = b"\xe2i:\xe5 \x1e\x1e\xfb\x01\xdf\x15"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    float_0 = -1772.79
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    str_0 = "<<^k\n:9}Ug0b0d/3gr7a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    bytes_0 = b"?\x88\x07\xca\xd4\x95\xd9\x1c\x88Cm\xac"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    float_0 = 1317.1
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    int_0 = 294
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    str_0 = " c}/1v1-<E]t\x0br\r\r!mA="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    bytes_0 = b"\xde\xa63\xd9\xa9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    str_0 = "zTd^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    dict_1 = {tuple_0: dict_0, tuple_0: tuple_0}
    module_0.match(dict_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_3014():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    str_0 = "\tItke%<p+ds\r>(Qn{Z="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    int_0 = 1508
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = 'a"YFm'
    list_1 = [list_0, int_0, list_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    str_0 = "Ew|"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    float_0 = 2990.81273
    list_0 = []
    tuple_0 = (float_0, list_0)
    complex_0 = -293 + 3526.1j
    tuple_1 = (tuple_0, float_0, complex_0)
    bytes_0 = b"\xafK\x8a\xc6v\xd6K0\xa8^b\xc4\xa0#\x82eq\x0fo\x16"
    bool_0 = False
    tuple_2 = (tuple_1, bytes_0, bool_0, bool_0)
    list_1 = [tuple_2, tuple_1, bytes_0, complex_0]
    tuple_3 = (list_1, float_0, bool_0)
    module_0.get_new_command(tuple_3, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    bytes_0 = b"\xe8\x99\xbb\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    str_0 = "fE8!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    bytes_0 = b"#"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\xd2a\\\x034f"
    tuple_0 = (list_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    int_0 = -899
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    str_0 = "86/\\[7kEF[P\t]vh'}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    float_0 = -4633.94
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    complex_0 = -217 + 2036j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    float_0 = -701.1
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    int_0 = 2785
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    complex_0 = 1254.52 + 316.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_3033():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    complex_0 = -4483.289676 + 508j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    int_0 = -3229
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    str_0 = "l2jvT1#$fC\rcps"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    int_0 = -2619
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    float_0 = -1216.6409
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    bytes_0 = b"\x07$K\x0eu\xac\x07\x8d\xc0\xce"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    int_0 = -708
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    float_0 = 1823.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    int_0 = -1048
    module_0.get_new_command(int_0, int_0)


def test_case_3045():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3046():
    str_0 = "ZXUGx]84z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    str_0 = "=qH5G#t]"
    bool_0 = True
    str_1 = "c85"
    dict_0 = {str_0: str_0, str_0: bool_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    int_0 = -753
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    complex_0 = 57.473837 + 844.106589j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3051():
    str_0 = "Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    float_0 = -346.04
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    bool_0 = True
    bytes_0 = b"\x0b\xfb\x17"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    bool_0 = True
    bytes_0 = b"\xd8\x8a\x1a\xc9v\xa6\xa1\x94?"
    dict_0 = {bool_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    str_0 = "\tLm'^?"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    bool_0 = False
    int_0 = -982
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    bool_0 = True
    int_0 = 5085
    module_0.match(bool_0, int_0)


def test_case_3058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3059():
    bytes_0 = b"\xfc$fVHK\x95\xb8\x03\x01X"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    int_0 = 848
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (bool_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    str_0 = "^\t>\nj]@"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_3065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3066():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    float_0 = -869.4
    set_0 = set()
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    int_0 = -1751
    tuple_0 = ()
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    str_0 = "cQkNNEN|ef"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    str_0 = "r( `:3zuv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    int_0 = -1336
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    bytes_0 = b"\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    float_0 = 1903.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    bytes_0 = b"\rFSv\xb9\x1e\xca7\xe1\xe0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    str_0 = "\rodsSN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    float_0 = -1779.16042
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    int_0 = -497
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    bytes_0 = b"\xb65Z\x07\xe4\x9bD\xa4\x9c\x9c\xb2\xd7y$Y"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3080():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3081():
    int_0 = -1096
    bytes_0 = b"\xed%"
    dict_0 = {int_0: bytes_0, int_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    bytes_0 = b"\xea\xaa\x1b\x95\x92\xeb\xee\xee\xa0c\xf9d\xaf2\x99r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    str_0 = "+VHoc>zq2EPJYtV"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    str_0 = ' "B|R1p;I#1nF\x0cK'
    int_0 = 2698
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    int_0 = -3993
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    int_0 = -1463
    module_0.get_new_command(int_0, int_0)


def test_case_3087():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3088():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    bytes_0 = b"\xbf\x90\xb5.\xad\xf2G\xb0F,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    bool_0 = False
    str_0 = "i\r"
    bool_1 = False
    tuple_0 = (bool_0, str_0, bool_1)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    bool_0 = True
    str_0 = "jIR"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    float_0 = 793.4
    set_0 = {float_0, float_0, float_0, float_0}
    tuple_0 = (float_0, set_0, float_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    bool_0 = True
    bytes_0 = b"z\x07\x1c\x93b"
    tuple_0 = (bool_0, bytes_0)
    dict_0 = {tuple_0: bytes_0, bool_0: tuple_0, bytes_0: bool_0}
    module_0.match(dict_0, bytes_0)


def test_case_3094():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3095():
    int_0 = 2644
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    bytes_0 = b"G\xc9\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    int_0 = -1009
    list_0 = [int_0, int_0]
    list_1 = []
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    str_0 = "GGrfsH/f"
    str_1 = "<`o.eIS"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    bytes_0 = b"\xceK\xfd$b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    bytes_0 = b"\xab\xbf\x93\x11\xd3\xad\x96\x91t\xbcc$(\xf0\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    bytes_0 = b"(\x01\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    int_0 = -238
    bytes_0 = b"\xe3\x01P\\\x00\t\x1b\xad\xd3v"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    int_0 = 3011
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    object_0 = module_1.object()
    bool_0 = False
    dict_0 = {object_0: object_0, object_0: object_0, object_0: bool_0}
    bool_1 = False
    set_0 = set()
    tuple_0 = (dict_0, bool_1, dict_0, set_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    complex_0 = -1738.926992 - 790j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    str_0 = "qT 93^+;7D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    int_0 = -3625
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [bool_0, list_0, bool_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    complex_0 = -756.823 - 316.791787j
    tuple_0 = (complex_0,)
    list_0 = [tuple_0, tuple_0, complex_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    int_0 = -2496
    str_0 = "HPHjwc\x0c/^?DylumZ"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    int_0 = 231
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    str_0 = "d*wlA9\x0b\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    float_0 = -1776.7643
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    none_type_0 = None
    int_0 = 2621
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    bytes_0 = b"Z')\x9c/\xfb9\xd7\xa0\x9b\xd3\xb2\x98\xce\xd6\x87\xc1\xc8\xfe\xfa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    int_0 = 676
    module_0.match(int_0, int_0)


def test_case_3120():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3121():
    str_0 = "THf&Y9Nilfp1=\x0cqz$O0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    float_0 = -2020.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    bytes_0 = b"\xbc\x02\x87\x165\xcb\x87\xdcAq\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    int_0 = -2714
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    str_0 = "ut(nR4p.*,O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    set_0 = set()
    complex_0 = 890.759 + 814j
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    int_0 = 753
    set_0 = {int_0, int_0}
    list_0 = [set_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    int_0 = -1440
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    bool_0 = False
    int_0 = -908
    dict_0 = {bool_0: bool_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    bool_0 = False
    bool_1 = True
    bool_2 = False
    int_0 = -959
    dict_0 = {bool_0: bool_1, bool_1: bool_0, bool_0: bool_2, int_0: int_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    int_0 = -106
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    bytes_0 = b"\tHs<U\xc3\xcc\xd5\xb8\x12\xb7\xac\x13\x05\x99\t\xfa\xe7"
    tuple_0 = ()
    str_0 = "f&D<"
    int_0 = 1537
    tuple_1 = (bytes_0, tuple_0, str_0, int_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    float_0 = -1151.57
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    str_0 = "fN\rd'Bo1\"m@:\x0c1`"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_3137():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3138():
    int_0 = -2009
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    complex_0 = -445.91292 - 4758.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    int_0 = 3745
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    int_0 = -232
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    int_0 = -3336
    module_0.match(int_0, int_0)


def test_case_3143():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3144():
    object_0 = module_1.object()
    str_0 = "6qX<@3~pDHH"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    complex_0 = -2528.4174 - 1667.1676j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    bytes_0 = b"\xf4E("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    bool_0 = False
    bytes_0 = b"\xc2\xcc\xc6e\x98\xd5\xbb{\xf9\x90 \x18\xf2,CK\x1f"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    bytes_0 = b"\xd5o\xe7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    int_0 = 2469
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    int_0 = -186
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    int_0 = -1763
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    float_0 = -3570.91884
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    str_0 = "P!u"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    str_0 = "-!zFrEi>P"
    none_type_0 = None
    str_1 = ',.CFOsM=DP odm"3@G:&'
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    float_0 = 2330.51052
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    float_0 = 1377.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    str_0 = "8RDG hHd8F\x0b"
    set_0 = {str_0}
    float_0 = -1147.78617
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    object_0 = module_1.object()
    bytes_0 = b"\x03]oH_"
    bool_0 = False
    tuple_0 = (object_0, bytes_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    str_0 = "Oa_BEK,$EzBh>>w\tt9)9"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    bytes_0 = b"\xfe2\x16\xd9\x08\xcfHpb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    int_0 = 4221
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    bytes_0 = b"\x06\xbf\xb7\x17`f\xbe\xd9NE\x81\xf8c]\xfa\xaf\xa6\x92\xde\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    float_0 = 2571.87681
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    complex_0 = 397.2842 - 4580.04991j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    int_0 = 1114
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    int_0 = -5061
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    bytes_0 = b"\xaa\x01\x13\x10\xb2?\xde\x9d\x1e\x01q\xb5_H\x01\n\x18\x8e\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    float_0 = 864.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    float_0 = 3633.94
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    int_0 = -813
    int_1 = 310
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    bool_0 = False
    bytes_0 = b"\xd4Qz\x0e\xedi"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    bytes_0 = b"\x83\x9c\xaej\xbaAY\x9e@I\xe2\xa5~\xf3\xc7\xea\x17\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    dict_0 = {}
    bool_0 = True
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    int_0 = -2409
    bytes_0 = b"s\xfa\xbc4]B\x07"
    list_0 = [int_0, int_0, int_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    float_0 = -2340.63
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    bytes_0 = b"X#\xcc\xa8\x93;<+6\x82\xa3\xeb\xa4D\xd0E\xb3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    int_0 = 383
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    int_0 = 2296
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    str_0 = "F)<Z}4"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    none_type_0 = None
    bytes_0 = b"\xc5\xd1"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    int_0 = 752
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    int_0 = 3023
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    int_0 = 1155
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    bytes_0 = b"\xef&\x9f\xe0\xa8\x9b\xf4\x03\xae\xd1\x9a\x1d\xceL\x87F \xd8\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    float_0 = 181.481059
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    str_0 = "GQuKHcl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    str_0 = "9"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_3193():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3194():
    bool_0 = False
    set_0 = set()
    bool_1 = True
    list_0 = [bool_0, set_0, bool_1, bool_1]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    bytes_0 = b"\x80\xb0p*\xdf\x90-\x81\x16\xd2\xf8\x16;\x8e\xde\xa4\x0e\x96Xf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    bytes_0 = b"V\x95\x0b\x06\x8a,\xba\x00&\xb7\x889jY\xae\xb1K\x7f\x8a"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    str_0 = "Z\nX"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    int_0 = 666
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    bytes_0 = b"\x86\xb5\x83_K\x18tl\xaa\xc4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    bytes_0 = b"\xae\xae\xc8\x84*y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    bytes_0 = b"\x99\xca\xe0\xe1+F\xe2\x11NuN]\x7f2\x90"
    bool_0 = True
    set_0 = {bytes_0, bool_0}
    str_0 = "<E\x0bx4sT"
    dict_0 = {}
    tuple_0 = (bytes_0, dict_0)
    dict_1 = {str_0: tuple_0, str_0: str_0}
    module_1.object(*set_0, **dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    bytes_0 = b"\xbe\xa4q\x957\xc93\xf5\xff\x11b\xa5\xfb\x9aphxH"
    list_0 = [bytes_0]
    list_1 = [list_0, bytes_0, list_0]
    complex_0 = 778 - 1726.129j
    str_0 = "hD*qCL:):MTUmE(E{aBi"
    tuple_0 = (list_1, complex_0, str_0, list_0)
    module_0.match(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    float_0 = -1144.0
    module_0.get_new_command(float_0, float_0)


def test_case_3207():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3208():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    float_0 = 1150.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    str_0 = "Bz7%@QT6?i`>^\x0c"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    int_0 = -1904
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    bytes_0 = b"\xbe\x0et(\x89\x9e,\x1e\xa8D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    bytes_0 = b"\xbav\xe5\xb9\xf0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    bool_0 = True
    str_0 = 'bAAsGd"\\Dp'
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    str_0 = "(}I}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    int_0 = 305
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    int_0 = -541
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    bytes_0 = b"\x8f\xfc\xe3\xf5\x1f\x11Q\x15\xad\xecy\x8e?$\xec\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    bytes_0 = b"9\xac\xdd\xe0\x995\xc8D\xcc94#q"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    int_0 = -31
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    complex_0 = 189.0467 + 1311.2j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    str_0 = '\rK.pHW*<t"QE&C]'
    str_1 = "`9?H8"
    dict_0 = {str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    float_0 = 115.627
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    bytes_0 = b"5\xcb\xda\xb4:i\xf1j\x9f)8v\xa3LY\x0f\xf6\x80 \xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    str_0 = "7'4G*{uc|u%]\r$caA@\"&"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    bytes_0 = b"(\xdf\x87j\x17\xe3rZdaTVF"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    float_0 = -2165.44
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    bytes_0 = b"rZ\xe0\x95T\x14\xf9\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    str_0 = 'D3\x0cI+~+\x0cZwk"L'
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    int_0 = 673
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    bytes_0 = b"\xdb&\x8a.Vm.\xaa{7\x89$w\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"\x1b\xc3\x9e=\xf3\xaaW;\xb87\xa7"
    tuple_1 = (bool_0, bool_0, tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    str_0 = "X!J8E"
    str_1 = '^.1Id%^"W'
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    complex_0 = -1560.540869 - 2255.995j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    int_0 = -3162
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    bytes_0 = (
        b"\\\xaf\x8b\x97\x00\xcf\xdfz\xf3\x97G\x82\x08\xa8\xc7\xa6\xae\x1d\xaf\xb1"
    )
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    bytes_0 = b"9\xa0m\x19\xb1\xed\xd5\x9e\xe5\x85\xff>j"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    bytes_0 = b"H\x1b3\x90\xf9j"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    str_0 = '~"8w ~/H'
    set_0 = {str_0, str_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    bytes_0 = b"\x00\xce\xae@c\xb5\xd2\xe6\xf5R<f%Nl\x898\xa1\xcf"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    int_0 = 305
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    bytes_0 = b"\x0f\x97\xc1B\xe1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    bytes_0 = b"\x03ne,\xdcZ=y\xc0\x01\x88\x99+\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    int_0 = 549
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    bytes_0 = b"\xd1\xa7\xc1\x11\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    complex_0 = 1747 + 1771.647j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_3253():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3254():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    float_0 = 476.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    dict_0 = {}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    float_0 = 785.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    float_0 = 458.0632
    list_0 = [float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    str_0 = "B%(Y7`Fh9h\t\t)j-t Pw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    bytes_0 = b"f\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    int_0 = -1315
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    float_0 = -905.98655
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    str_0 = "O'\tR.{`t"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    bytes_0 = b"T\x80\xaf"
    set_0 = {bytes_0}
    tuple_0 = (set_0, set_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    int_0 = -1082
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    bytes_0 = b"\xf3\x9d\xdfX\x8ax9E\x1b\x90\xc5eQ\xffPQ\x8c\xb8\x8b\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    float_0 = -750.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    int_0 = -841
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    bytes_0 = b"b\x99\xe3\xd4\x1dF\x96~>\xcc\xb2\x0fz\x02\xa6(&y\x87o"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    list_0 = []
    list_1 = []
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    list_0 = []
    bytes_0 = b"\x88\xc314\xac@\x95W\xe9,\xf8\xfe\xa7v"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    bytes_0 = b"\xd1S\xf7\x0f\xb3/"
    float_0 = 504.529365
    list_0 = [float_0, float_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    float_0 = 624.5143
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    str_0 = "+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    str_0 = "~)Cq7_!mI$Ou}yVXD"
    str_1 = "C_Q~#$P7Ac"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    str_0 = "^CD<3 cFC5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    int_0 = 2469
    float_0 = 433.43
    tuple_0 = (int_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    complex_0 = -965.6099 - 4700.1j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


def test_case_3282():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3283():
    bytes_0 = b"\xc2.v\xa6[\xd5E\xf0\xd1\x92\x80\x9d"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    str_0 = "9_*~-Ytt"
    module_0.get_new_command(str_0, str_0)


def test_case_3285():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3286():
    int_0 = -355
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    bytes_0 = b"u{\xfa{\xe6\xf6S\xdf\x0cQtX\x96\x90\x9e\xfec z"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bytes_0 = b"\x1b\xc4\xb9L\x9a\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3289():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3290():
    str_0 = ")a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    int_0 = -1292
    list_0 = []
    bool_0 = False
    tuple_0 = (int_0, list_0, bool_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    bytes_0 = b"\x7f\xbc\xef_U\xa7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = False
    dict_1 = {bytes_0: bool_0, bool_0: dict_0}
    module_0.get_new_command(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    int_0 = 24
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    str_0 = "ix$R/(\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    int_0 = 587
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    int_0 = 542
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    int_0 = 890
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    str_0 = "4),q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    complex_0 = -2258.197583 + 1079.89j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    int_0 = 2586
    module_0.match(int_0, int_0)


def test_case_3301():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3302():
    bytes_0 = b"\xd9\xceW\x12c\xd6\xb0Pi"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    bytes_0 = b"\x05\xa0\xd7\xc6\xddK\xeb,z\xb6\x08\xf1\x82\x9c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    int_0 = 2591
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    int_0 = 1497
    module_0.get_new_command(int_0, int_0)


def test_case_3306():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3307():
    bytes_0 = b"\xf2\xcf\xc6g\x14p\x0f\xa6\x8b\x19\xf9"
    int_0 = 2890
    set_0 = {bytes_0, bytes_0, bytes_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    str_0 = ""
    bytes_0 = b"\xd2\xc7\xdc\xb1"
    tuple_0 = (str_0, bytes_0, bytes_0)
    bool_0 = True
    dict_0 = {str_0: tuple_0, tuple_0: str_0, bytes_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    bytes_0 = b"(\xc7\xe4\xc1\xb7\xf2\x05"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    int_0 = -2786
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    float_0 = -4514.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    complex_0 = -385.532 + 1081j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    int_0 = -2876
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    object_0 = module_1.object()
    int_0 = -4530
    module_0.get_new_command(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    bytes_0 = b"\x9f\x1dfS\xfa\x80\xa0\x82"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    int_0 = -265
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    int_0 = -1265
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    float_0 = -3287.319597
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    bytes_0 = b'":\xc3\xfc\x81Q\xb3\x8f\xf1+\x00\x8d\xd1'
    bool_0 = False
    str_0 = "H\\C7\\fx"
    tuple_0 = (bytes_0, bool_0, bytes_0, str_0)
    list_0 = [tuple_0]
    tuple_1 = (list_0, list_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    str_0 = "$Ej"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    bytes_0 = b"a\x8b~\x1e!f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    tuple_0 = ()
    bytes_0 = b";\x93\xa5\xa0,u\x8b\xa2\xdf\x93\xda\xea\xcc^_\xb7\xdeG"
    tuple_1 = (bytes_0,)
    set_0 = {tuple_0, tuple_0, tuple_1}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    float_0 = -1573.8152
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    bool_0 = False
    float_0 = -3509.0
    list_0 = [float_0, bool_0, float_0, float_0]
    dict_0 = {bool_0: float_0, float_0: bool_0, float_0: bool_0, bool_0: list_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    int_0 = -1273
    str_0 = "/"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    float_0 = -1750.33027
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    bytes_0 = b"\x85\xf3"
    complex_0 = 1629.64348 + 329.17j
    bytes_1 = b"\xaa\xcc\x1f\xd0\x90e\x89\xae\x05W\xa5\xea\xc3"
    tuple_0 = (complex_0, bytes_1)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    str_0 = "Q!XM[0Y:Dkqz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    float_0 = -2899.09665
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    str_0 = "Z9rh~1SQ/]?W"
    float_0 = -3229.485
    bool_0 = True
    float_1 = 3395.098
    dict_0 = {float_1: bool_0, float_0: float_1, float_1: float_1, str_0: str_0}
    dict_1 = {str_0: bool_0, float_1: dict_0}
    object_0 = module_1.object()
    tuple_0 = (bool_0, dict_1, object_0)
    str_1 = "~]w8W@rYoVr C"
    tuple_1 = (str_0, float_0, tuple_0, str_1)
    module_1.object(**tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    bytes_0 = b"\x94\x85p\xd4\x02\xa2\xcc\xb4+H\x8dm\x80\x85&"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, list_0, list_0, bytes_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    bool_0 = False
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    float_0 = 561.0295
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    bytes_0 = b"\x1d\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    set_0 = set()
    bytes_0 = b'\x03"Y\xf2\x8f8\x8b\xb4\xe7&\xfeq\x82\xcc:quz\xff\xba'
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    str_0 = "rz6"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    object_0 = module_1.object()
    int_0 = 585
    list_0 = [object_0, object_0, object_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    bytes_0 = b"\xe4\xfa4\x8fp\xab\xe9 \x871=\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    str_0 = "heQ0!$lQai?/B?:*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    none_type_0 = None
    int_0 = -4124
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    float_0 = 4277.0408
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    bytes_0 = b"\x1eE\x95\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    float_0 = -2663.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    str_0 = 'vx"\nr\x0c|RaI\\GzYj'
    int_0 = 4575
    dict_0 = {str_0: str_0, int_0: str_0, int_0: int_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    bool_0 = True
    int_0 = 1073
    dict_0 = {bool_0: bool_0, int_0: bool_0}
    list_0 = [dict_0, int_0, int_0]
    bytes_0 = b"\xa4-\x9e!Q.\xa0\xcd\xdd\x95\xd6\xaek\n"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    int_0 = -2638
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    set_0 = set()
    int_0 = -1379
    str_0 = "\x0c/%?tnv4Jn"
    tuple_0 = (set_0, int_0, str_0, dict_0)
    module_0.match(dict_0, tuple_0)


def test_case_3353():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3354():
    str_0 = "XuQ#6(MVp/Et'Q }a?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    float_0 = -2719.74926
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    str_0 = "m$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    str_0 = "eX:]?dZk[RMFq;q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    int_0 = -2777
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    float_0 = -67.0
    set_0 = {float_0, float_0, float_0, float_0}
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    bytes_0 = b"<g\x8fe\x1eSV'\x0f\xadM\xb0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    int_0 = -1371
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    str_0 = "l[SYb"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    str_0 = "4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    bytes_0 = b"U\xca\x88c}E\xc4a\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    bytes_0 = b"\r\xb3&%\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    bool_0 = False
    object_0 = module_1.object()
    set_0 = {bool_0, bool_0, object_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    str_0 = "\\<p^dCsC\r\x0biZ\tR&}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    str_0 = "LxpLa=CXEkTD@u$"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


def test_case_3371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3372():
    bytes_0 = b"\t"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    bool_0 = True
    bytes_0 = b""
    tuple_0 = (bool_0, bytes_0)
    dict_0 = {tuple_0: tuple_0, bool_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    str_0 = "w`:fsOU`Kh"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    float_0 = -153.11548
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    bytes_0 = b"\xfd\x1cG\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    str_0 = "AJ"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3379():
    pass


def test_case_3380():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3381():
    str_0 = "i<n7!/m%x-B3"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    float_0 = -2018.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    int_0 = 2510
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    float_0 = -3072.19639
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    int_0 = 381
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    bytes_0 = b"\xcd!izr\xf4"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0, bool_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    str_0 = "8/ncB[hh<b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    complex_0 = 379 + 719.325j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    bool_0 = True
    str_0 = "f;4a\r)Q2kPOERf"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    int_0 = 705
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    bytes_0 = b"#"
    str_0 = 'Yk"+-\rl#"D\rM'
    list_0 = [bytes_0, bytes_0, bytes_0, str_0]
    set_0 = set()
    tuple_0 = (bytes_0, list_0, set_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    int_0 = 577
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    int_0 = -347
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3396():
    bytes_0 = b"\x81\x88\xc1#\xd8\x05&g\xb6\xc7\xc3X\xc5\xbb\xab\xb7\xb8\xc5\xa9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    str_0 = "~e("
    str_1 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    float_0 = -1058.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    float_0 = -280.82697
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    str_0 = "|:B\t<TjY\x0b"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    float_0 = -3201.834
    module_0.get_new_command(float_0, float_0)


def test_case_3403():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3404():
    int_0 = -1229
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    int_0 = 2414
    bytes_0 = b"\x16\xa9"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    none_type_0 = None
    float_0 = 1802.8
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    int_0 = 265
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    bytes_0 = b"T\xc7\xa2\xea\xe2\xf8\x1d\x97!g\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    str_0 = "K7~rV>l(ir^E=zDs"
    object_0 = module_1.object()
    set_0 = {str_0, str_0, str_0, object_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3411():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3412():
    float_0 = -400.16
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    bool_0 = False
    complex_0 = -1915 - 977.574j
    bool_1 = False
    str_0 = "D{f=\tVqdr/+cQ g\r"
    dict_0 = {bool_1: str_0}
    tuple_0 = (bool_1, str_0, bool_0, dict_0)
    dict_1 = {bool_0: complex_0, bool_0: tuple_0}
    module_0.match(dict_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    float_0 = 2262.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    bool_0 = False
    str_0 = "+F@k"
    str_1 = "jXA9!"
    tuple_0 = (bool_0, str_0, str_1, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    float_0 = 713.4
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    bool_0 = False
    bytes_0 = b"Fc\xf8\xc7\xb5F\xbdK\xaa\xc7\xe9\xb8\x1d\xf8I\x18J\xf3"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    str_0 = "@J)\rX,W "
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    object_0 = module_1.object()
    complex_0 = -2989.58279 - 2841.088054j
    bytes_0 = b"Z\xea\xc7'\x97\xfa|\xb5{,#\x126"
    str_0 = ""
    tuple_0 = (object_0, complex_0, bytes_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    str_0 = "er\x0bE<^6j'f+\"n2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    str_0 = "}+_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    str_0 = ",OJW,5rkSr'w|@>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    set_0 = {object_0, tuple_0, object_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    str_0 = "k>P:LB%2Mu \x0bF@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    bytes_0 = b"4/\xfe\x043\rp\xc4N\xc1g\x1a\xb0\\\xa4,.\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    bytes_0 = b"\xadB\x10\xabG!\xb8\\\\\xe9Y\\\x14L\x8b\xf6e\x89\x9e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    bytes_0 = b"\xb1-)3\xe4E\xb4\xf2\xc4:\xb4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    bytes_0 = b"\xd6\xe8\x15\x9d\x9fB\x9c\xc9(\xa1"
    str_0 = "f_|r'KN}R"
    str_1 = "xz(J34*8q"
    str_2 = 'lc A|U5o"'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: bytes_0}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    int_0 = 899
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    float_0 = -2117.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    bytes_0 = b"\xf4`\x1c\xb8\xd1\x9bE"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    str_0 = "ZC.<10a6RC<29GP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


def test_case_3438():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3439():
    set_0 = set()
    str_0 = "Qfv4jTSY]B!t7JFfS7$U"
    list_0 = [set_0, set_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    float_0 = 1973.427664
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    str_0 = "%>NSd\r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    float_0 = -3038.520244
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    int_0 = -1403
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    bytes_0 = b"\x96\xb7\xd6\xd5@\xcbx\xf2\xe0Y*M\xedE"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    float_0 = -550.3995
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    int_0 = -1744
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    bytes_0 = b"\xe8\xdf\x9dG\x8e\x12\x81\x8c\xcch"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    int_0 = 1953
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    int_0 = -1303
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    bool_0 = False
    str_0 = "b"
    bytes_0 = b"H\x19\x87"
    tuple_0 = (bool_0, str_0, bytes_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    str_0 = "/yzTDhnx\\6+UdQEk$D9W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    int_0 = -1608
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    float_0 = -1131.18891
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    none_type_0 = None
    bytes_0 = b"pj\xff(\x04\xf8\x91\xe6\xf6/\xe04s\x0e\x9e\x81\xd0\x88"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    str_0 = "<#Pr.9vXsgXj1n\ro#w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    float_0 = -620.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    float_0 = 1359.57
    list_0 = [float_0, float_0]
    list_1 = [float_0, list_0, float_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    int_0 = 1125
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "c_,b_HtERm\x0b"
    str_1 = "]YC4O,@;X\\^P:r"
    dict_0 = {str_0: none_type_0, str_0: str_0, str_0: list_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    bytes_0 = b"2\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    complex_0 = -966.45712 + 1232.71j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bytes_0 = b"j\xec\x8c6\x8aB\x0f\x8dx"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


def test_case_3470():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3471():
    str_0 = ">3"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_3472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3473():
    complex_0 = 1356.0169 - 2218.6423j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0,)
    tuple_1 = (bool_0, tuple_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    int_0 = 2383
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    bytes_0 = b"\xdf\xf4\x99"
    complex_0 = 1533 + 26j
    list_0 = [bytes_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    int_0 = 2308
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    str_0 = "r^!M<\t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    int_0 = 1919
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    float_0 = 2566.971288
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    bool_0 = True
    str_0 = "2*}Vw:ki\x0bL}P+"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    float_0 = 714.36
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    str_0 = "\t@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    float_0 = -580.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    bytes_0 = b"\x9c\x0c\xf0i}|\x1f\x10\xa6\xd4F"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    int_0 = -1249
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    bytes_0 = b"\x10\xdf\xad\x02e\xa5`m}"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    int_0 = 3735
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    str_0 = "9j&,?D[oBTlR0pa"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    str_0 = "6,6`"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    int_0 = 2134
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    bytes_0 = b"\xcah\x89"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    bool_0 = False
    set_0 = set()
    set_1 = set()
    list_0 = [set_0, set_1, set_1]
    tuple_0 = (set_0, list_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    str_0 = "ssz\x0c"
    set_0 = {str_0}
    list_0 = [set_0, set_0, str_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    complex_0 = -6352.6 - 1379.04j
    list_0 = [complex_0, complex_0, complex_0]
    int_0 = -1982
    tuple_0 = (complex_0, list_0, int_0)
    list_1 = [tuple_0, int_0, complex_0, int_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    bytes_0 = b"\xb6\x04"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bool_0, bool_0, bool_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    str_0 = "fIT_On^H.[7?:\t@E\r$;"
    none_type_0 = None
    str_1 = "w\r{z_a&B|i\re"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    bytes_0 = b"]\xc4z\xb8\x97\x1d\x88\x17g8C\xbf\xe8\x80[\xea/\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    str_0 = "dNVdU1(gE-!*qs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    bytes_0 = b"\x02\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    float_0 = -1488.54
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    float_0 = -1364.694
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    bool_0 = True
    bytes_0 = b"\x12;\x9b"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    complex_0 = -796.347 + 1244.651j
    str_0 = "h\rzP2(\x0cha"
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    bytes_0 = b"\xb8\x87\xee\x98\xe0\x06 R\xc4\xcc\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    str_0 = '<,EUKp-G.s\x0c!\\{+G`"3q'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    int_0 = 736
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    float_0 = -1427.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    bytes_0 = b"\x9b`\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    bytes_0 = b"~\xd8\x91\xe9M\xb8\xd1\x98q'\xc7r\xc17p;u W\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3518():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3519():
    none_type_0 = None
    complex_0 = -1612.3 + 641.4673j
    set_0 = {none_type_0, complex_0, none_type_0, complex_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    bytes_0 = b"\xc7|7\x1c\x11\xd5\xfd\xb2\xa8\t\x04\xe0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    complex_0 = -548.842349 + 1014.314j
    str_0 = "}"
    str_1 = "j(Y$"
    bool_0 = True
    tuple_0 = (str_0, str_1, bool_0)
    module_0.match(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    str_0 = ":fT](\nt^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    str_0 = "SGb[w$F"
    bytes_0 = b"\xe6\xd9M\xbe\x03$\x9c\xc3V"
    tuple_0 = (str_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    str_0 = "!#?e[2\x0b{dd"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_3527():
    pass


def test_case_3528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3529():
    int_0 = -53
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    str_0 = "n^m+5\x0bxS 8|gZo''^]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    float_0 = -1988.29
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    bool_0 = True
    str_0 = 'o"wJ5FV '
    float_0 = 2032.209
    bytes_0 = b"O\xa8iM\xe5\x08\x8a|o\x95\x1c5\x9c\xc4\x06\xa6\x82)\xa1\xa1"
    set_0 = set()
    tuple_0 = (str_0, float_0, bytes_0, set_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    str_0 = "SR"
    module_0.get_new_command(str_0, str_0)


def test_case_3535():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3536():
    object_0 = module_1.object()
    int_0 = -786
    set_0 = {object_0, object_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    bool_0 = False
    bytes_0 = b"\xda\xb6\x7f\x16'i\xf5\x87\xf1\xe2u\x17\xb9\xeb\xde:\xd9"
    list_0 = [bool_0, bytes_0]
    module_0.match(list_0, list_0)


def test_case_3538():
    pass


def test_case_3539():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3540():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    none_type_0 = None
    int_0 = -2264
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    bytes_0 = b"v@\xb1X\x00<\xf6\x84\xc3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    str_0 = "_WGFwY\\0"
    list_0 = [str_0]
    bool_0 = False
    tuple_0 = (str_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    int_0 = -2981
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bytes_0 = b";\xbf\xd8\x8f\xb4\x82\xcd!\x0f_\xb6\xf3\xfe\x0fi\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0, set_0]
    str_0 = 'l+)y/2EKe\x0cbs/B0C"\rw'
    str_1 = ""
    dict_0 = {str_0: bool_0, str_1: str_0, str_1: str_1, str_0: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    int_0 = -3399
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    bytes_0 = b"\x17^\x195H\xac\xb4GS\xfe\xb3\xe2]\xcf\x11\xb3s\xc8\x0f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    list_0 = []
    float_0 = 383.88
    bytes_0 = b"oE\xc0}\xc1\xe1q\xc1\x88\x90\x0b\xa5"
    tuple_0 = (list_0, float_0, bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    set_0 = set()
    list_0 = [set_0]
    complex_0 = 2045.44 + 3720j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    bytes_0 = b"\x8d\x92\x17\xb2\xbey<\xfe`\xeb\x8f\x1exA\xe7\xee\x83\xb1\xd8\xbc"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


def test_case_3557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3558():
    str_0 = "9V0GGC"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    int_0 = 2044
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    str_0 = "Lv\\_$pH6\x0cm_reo$q5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    int_0 = -1350
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    str_0 = " $l\tgp\x0cMW"
    set_0 = {str_0}
    tuple_0 = (str_0, set_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    complex_0 = -70.73205 - 2921.1238j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    int_0 = -3843
    int_1 = 702
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    bytes_0 = b"\xf4n\xdd\x8b\xbd/\x17N\xd9V\x9c\xea\xf9\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    float_0 = -28.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    bytes_0 = b"\xddy\xf7*\xf9\xc0\xbets\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    float_0 = -714.776376
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    int_0 = -3540
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bytes_0 = b"\xc0\x91v\xa4d\xdf\x80\xf0w#X\xd1\xb5%\x1a-I\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    bool_0 = True
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    int_0 = -621
    module_0.get_new_command(int_0, int_0)


def test_case_3574():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3575():
    bytes_0 = b"\xe2\xe9C\xb6\xe3\x10\x91\xfc\xcd\xad\x84>\x8e\xe6\xbf\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    bytes_0 = b"\x9aG\x17~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    str_0 = "8^{-$\tzBDW3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    float_0 = -86.2
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    complex_0 = 2087.4 + 2914.02j
    list_0 = [complex_0]
    str_0 = "76M"
    bytes_0 = b"\x83\xe0\xba+\x8c\x88\xacFUz\x92"
    tuple_0 = (list_0, str_0, bytes_0)
    list_1 = [tuple_0]
    list_2 = [list_1]
    module_0.get_new_command(list_2, tuple_0)


def test_case_3581():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3582():
    complex_0 = -1211.1 - 2097.1j
    bytes_0 = b"\x1a\xc9dCX\xc1\x99\x8b\x10\xa0=\xbb\xb3\x8f"
    module_0.get_new_command(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    int_0 = -3607
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    bytes_0 = b":5\x9f\x1f\xd4\x96\xf2\xec\x1b\xc1|\xc7w4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    str_0 = "ad/0QTGG\niVG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    bytes_0 = b"\xe0G\xc8\xf2\xa0\x105\x96y\xd1\xbeYK\xfe&\x9a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    int_0 = 1404
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    complex_0 = -2102 + 1322.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    bytes_0 = b"\x834\xd4\xe4\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    int_0 = 974
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    float_0 = 3557.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    list_0 = []
    list_1 = []
    list_2 = [list_0, list_1, list_0, list_1]
    module_0.get_new_command(list_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    complex_0 = 315.9412 - 840.941077j
    list_0 = [complex_0]
    str_0 = "l`y~7}'2$pOMXsN:!"
    module_0.match(list_0, str_0)


def test_case_3596():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3597():
    str_0 = "!kpS!a/Qx1F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    str_0 = '"+EH-H4f'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    int_0 = -2333
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    str_0 = "x\x0bdW76%8F"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3601():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3602():
    str_0 = "?MO3/cur{ZMC"
    str_1 = "/m"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    none_type_0 = None
    str_0 = "eT\x0c]fZuW+%@HLL("
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (str_0, bool_0, bool_1, set_0)
    module_0.match(none_type_0, tuple_0)


def test_case_3604():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3605():
    complex_0 = 806.2 + 809.188725j
    tuple_0 = (complex_0, complex_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    str_0 = "<!?]]wAHI[(,4|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    complex_0 = 633.35 + 428j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    int_0 = 902
    str_0 = "?7 "
    dict_0 = {}
    bytes_0 = b"\xfd\xd7\xb5\xf6\xcd\xc6RM}\xe5\x1f\x92"
    list_0 = [int_0, int_0, bytes_0]
    tuple_0 = (int_0, str_0, dict_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    bytes_0 = b"b{Z\xfc\xc1 \x85Q\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    int_0 = -1136
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    float_0 = 225.11286
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    str_0 = " j^k>i`rTS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    float_0 = 2422.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    float_0 = 718.741
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    float_0 = -1682.9697
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    int_0 = 1021
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    bytes_0 = b"\xad<z\xf7f\xc85\x01\x858\x17\xcb"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    int_0 = 912
    dict_0 = {}
    list_0 = [int_0, dict_0, dict_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    str_0 = "nE5}I"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    float_0 = 759.362377
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    complex_0 = 600.57739 + 704.04j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    str_0 = ""
    int_0 = 2158
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    object_0 = module_1.object()
    set_0 = {object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    int_0 = -4368
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    float_0 = 1165.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    int_0 = 247
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    str_0 = "4@}:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    float_0 = 4844.0
    module_0.match(float_0, float_0)


def test_case_3633():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3634():
    int_0 = -3080
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_3636():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3637():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_3639():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3640():
    int_0 = -660
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    bytes_0 = b"_\xe8a\x0c\x18\xe7\x89\xa0\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [bool_0, list_0, bool_0]
    module_0.match(list_1, list_0)


def test_case_3643():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    int_0 = 3674
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    bytes_0 = b"5\x9c\x04\x8d\xbb\x93}\xe4\xcfU\xa2k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    float_0 = -2023.66
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    str_0 = ',-B="W;|-U'
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    float_0 = 4328.3284
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    float_0 = 3053.3836
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    str_0 = "P<i^y'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    float_0 = -288.56699
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    int_0 = 936
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    complex_0 = 2513.3748 - 2240.4423j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    bool_0 = False
    int_0 = -225
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    str_0 = "044Kl{n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    str_0 = "C*mXz\nU2%_\\y"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    set_0 = set()
    bool_0 = True
    str_0 = ""
    tuple_0 = (bool_0, str_0, bool_0)
    float_0 = -2029.46
    list_0 = [float_0, set_0, float_0]
    tuple_1 = (tuple_0, float_0, list_0)
    list_1 = [set_0, tuple_1]
    module_0.get_new_command(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    float_0 = -308.53591
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    int_0 = 2058
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    str_0 = "/ KC"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    none_type_0 = None
    complex_0 = -2894.411 - 3008j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    complex_0 = -525.987 + 674.10897j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    int_0 = 686
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    int_0 = -957
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    set_0 = set()
    object_0 = module_1.object()
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    int_0 = 432
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    int_0 = 2249
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    float_0 = -4319.7494
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    str_0 = "N:}:4DJCYFm"
    module_0.get_new_command(str_0, str_0)


def test_case_3676():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3677():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    bytes_0 = b"\xdd\xddf3\xcc\xc6\x92\x8b\xfd\x9aF\x17G\xdd\t\xff\\p"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    bytes_0 = b"V"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3680():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3681():
    str_0 = ""
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    tuple_0 = ()
    int_0 = -4503
    bytes_0 = b"\x94\x8cl0*\xee\xc5^\xb1y\xb6\x9dU8\x93\xc8"
    dict_0 = {bytes_0: tuple_0}
    tuple_1 = (int_0, bytes_0, dict_0)
    tuple_2 = (tuple_0, tuple_1)
    module_0.match(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    int_0 = -675
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    int_0 = 170
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    bool_0 = False
    str_0 = "AK"
    dict_0 = {str_0: bool_0, str_0: bool_0, bool_0: str_0}
    bytes_0 = b"\x8c\xce>\xd7\x11\x85>\xbd\xe65\x19\x0c\x18\xd8C\xd9\x9dx\x05\xf7"
    tuple_0 = (bool_0, str_0, dict_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    int_0 = 529
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    str_0 = "\x0bOn\\mI:3=.fW[4Q{g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    int_0 = 1656
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    complex_0 = 3003 + 190.7687j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    float_0 = -4470.273
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    str_0 = "bL-q}-^#j1j3Rj=wnzY"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    int_0 = -1109
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    str_0 = "~dz;6oF6u"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    str_1 = "\t#?T$'Sws=+\x0cSjdcJ"
    module_0.match(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    str_0 = "5"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    int_0 = 1320
    module_0.get_new_command(int_0, int_0)


def test_case_3703():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3704():
    int_0 = 3528
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    str_0 = "n\nn3/Zf)%\\\rX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    int_0 = 3965
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    none_type_0 = None
    str_0 = "0Jfj`4-_x"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    bytes_0 = b"G\xe3\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    set_0 = set()
    int_0 = -195
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    bytes_0 = b"v\x14\xc2\x8d\x00\xa2\xa7\x0e0$\xe0\x10\xa7n\xfew{P\xd5}"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    int_0 = -108
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    bytes_0 = b")f\x027\xa35\xacE\xc1j\xc5\x94\x04\xdd\xe5\xffz"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    bytes_0 = b"=o\xa9C\x88Nx\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    complex_0 = -3242.6 - 1436j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    bool_0 = False
    bool_1 = True
    str_0 = "T1`Jjl\x0c9(Now3QwW"
    dict_0 = {bool_0: bool_1, bool_0: str_0, bool_0: str_0, str_0: str_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    float_0 = 1795.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    float_0 = 768.98
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    float_0 = -422.1443
    list_0 = [float_0, float_0, float_0]
    int_0 = 1392
    bool_0 = True
    tuple_0 = (float_0, list_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    int_0 = 4576
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    int_0 = 224
    module_0.match(int_0, int_0)


def test_case_3723():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3724():
    list_0 = []
    str_0 = "KYKJj}G~GJ"
    dict_0 = {str_0: list_0, str_0: str_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


def test_case_3725():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3726():
    str_0 = "_u?"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    bytes_0 = b"\xcd\x84VI\xe1\xb2\x1d\xa1A\xc0\x8d\x17\xf1Z\xfd\xbf\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    str_0 = "jyVDVF\x0bS=Myn"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    complex_0 = -902.38908 - 2027.136j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    bytes_0 = b"\xfb\xb7\xd4\xa3\x06T\x10\xff(\nd=\xaf\xa8FA\x0e\xc3;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    float_0 = -88.1
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    str_0 = "$F'q* z/):Hl{qF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    none_type_0 = None
    str_0 = "cW<>OC6<"
    dict_0 = {str_0: str_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    str_0 = "fr/$fy)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    list_0 = []
    object_0 = module_1.object(*list_0)
    str_0 = ":Nj+n)b@`HA\tj/|W"
    str_1 = "yr=L|~@"
    dict_0 = {str_0: object_0, str_0: list_0, str_0: str_0, str_1: list_0}
    module_1.object(*object_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    str_0 = ",`g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    float_0 = -2047.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_3739():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3740():
    bytes_0 = b'^\xa1\xf9\xa9\x87\xf8\xcb\xec6\x87\x96\x05\x1b44\xa2r"'
    str_0 = "S"
    tuple_0 = (bytes_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    bytes_0 = b"\xb4\xcf\xa5 D_z\x06\x07{k"
    module_0.match(bytes_0, bytes_0)


def test_case_3742():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3743():
    float_0 = 549.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    int_0 = -3213
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    int_0 = -633
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    str_0 = "}{}_\nS]e[mjxv+#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    none_type_0 = None
    complex_0 = -807.8 + 1525.43158j
    set_0 = {none_type_0, none_type_0, none_type_0}
    int_0 = 2478
    list_0 = [int_0, int_0]
    tuple_0 = (complex_0, set_0, int_0, list_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    bytes_0 = b"\x04Xc\xd5%*_\xb5\xc7\xeed\xa0"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    int_0 = 643
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    bytes_0 = b"\xfd\tE\xc2\x9b\xfe\xb2I\xa7\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3751():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3752():
    bool_0 = True
    int_0 = -1878
    set_0 = {bool_0, int_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    bytes_0 = b"\xb4C\x9d\xa7:\xf3\xf1\xf6\xa2\xff\xc8\x9b\xb6GR\xe8\xb6"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    none_type_0 = None
    int_0 = -3939
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    float_0 = -433.8944
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    int_0 = 3020
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    bytes_0 = b"\xc1\x0bt\x1d\x1c\\\xbb\xca#y\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    bytes_0 = b"\xcb\x1d\xb7\xa1\n\xb2\x8dk\xd1\x88"
    module_0.match(bytes_0, bytes_0)


def test_case_3759():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3760():
    complex_0 = 1589.85269 - 3410.619j
    bytes_0 = b"\xc5\xb9\x8c!\x86\x9e\xb7\xfcjA\x03\x8b\x97g\x81\\"
    tuple_0 = (complex_0, bytes_0)
    int_0 = -1066
    dict_0 = {tuple_0: int_0, int_0: int_0, tuple_0: tuple_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    bytes_0 = b"Y\xe9x\xd5\x03\xe4b\x85\xde\x91\x1c\x87\xaa"
    list_0 = [bytes_0, bytes_0]
    str_0 = ""
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    int_0 = -3272
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    bytes_0 = b"+\xe1?\xd1U\xffw\xd6\xf0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    str_0 = "*7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    str_0 = "T_y/SUP|'f"
    bytes_0 = b"\xb6J"
    tuple_0 = (str_0, bytes_0)
    set_0 = {str_0, tuple_0, tuple_0, str_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    int_0 = -1049
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    int_0 = 3350
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    int_0 = -1551
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    float_0 = -791.21413
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    float_0 = 1172.09
    list_0 = [float_0, float_0, float_0]
    set_0 = set()
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    bytes_0 = b"\x1f\\\x0b\x12P\xfc{f\x06\xf8\xe9\xac\xe0Fv\xd0y"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3776():
    pass


def test_case_3777():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3778():
    int_0 = -1373
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: int_0, tuple_0: tuple_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    int_0 = -2397
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    str_0 = "X@/W%a@.:^=j7]\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    int_0 = 1162
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    int_0 = 1895
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    int_0 = -75
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    int_0 = -4653
    bool_0 = True
    str_0 = "`Cp*(Bo%o`D"
    tuple_0 = (int_0, bool_0, str_0)
    tuple_1 = ()
    list_0 = [tuple_1]
    tuple_2 = (tuple_0, list_0)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    bytes_0 = b"\xdd\xf5\xf1\x1f\x83\xbb\xf9\xe7F!dw"
    int_0 = -1292
    tuple_0 = (bytes_0, int_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    bytes_0 = b"\xf6N\xd5\xcc\x13\xff\xd9\xb9\xa6ln\xa20["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    none_type_0 = None
    bool_0 = False
    dict_0 = {
        none_type_0: none_type_0,
        bool_0: bool_0,
        bool_0: bool_0,
        none_type_0: bool_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    int_0 = -127
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    complex_0 = 1006.62519 - 2952.528463j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    int_0 = 951
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    str_0 = "(v7G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    str_0 = "Q`)\x0bn[?\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    none_type_0 = None
    float_0 = 3173.9065
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    int_0 = 1276
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    float_0 = 3187.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    str_0 = "EC`CWjMzb-\tv,I\r7"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    none_type_0 = None
    int_0 = -775
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    bytes_0 = b""
    int_0 = 344
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bytes_0}
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: dict_0}
    module_0.get_new_command(dict_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    int_0 = 1397
    dict_0 = {}
    list_0 = [int_0, int_0, int_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    bytes_0 = b"h\x9c\x8cr\xa3\xc6\xe5\xdej6Z\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    str_0 = "k)[iW"
    bool_0 = True
    list_0 = [str_0, str_0, str_0, bool_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    complex_0 = 7.8 + 1426.4462j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    set_0 = set()
    str_0 = "zVj@wv43axaRy{T"
    list_0 = [set_0, set_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    str_0 = '2,01$}Q4"FD/Z9tn/'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    bytes_0 = b"\x8c\x08\x17\xa1\x8b\\\xde\xc33.6#"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3812():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3813():
    bytes_0 = b"\xef\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    int_0 = 848
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    int_0 = -492
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    int_0 = -632
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    bytes_0 = b"\x14{\xb5\x18S\xeb\xceTaG>\xbaq\xd3\xa5\x1c\xf0C"
    bytes_1 = b"u\x89~\x816\x87F\xf4\x95\xe2\xcc\xf0\xff\xb1x\x1bm\x84"
    tuple_0 = (bytes_1, bytes_0)
    tuple_1 = (bytes_0, tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    float_0 = 1490.13399
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    float_0 = -2266.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    bool_0 = False
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    bytes_0 = b"\xe0\xffr\x9d>\xa8\xda\x80q\xed\x95\xc5\xb3$3\xfb\xa0\xb2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    str_0 = "Jy%Z,"
    bytes_0 = b"\x96\x97.\xc3{\xe6i]\x9e\xde\xdcj"
    module_0.match(str_0, bytes_0)


def test_case_3824():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3825():
    set_0 = set()
    bytes_0 = b"\xde0"
    list_0 = [set_0, bytes_0]
    module_1.object(*list_0, **set_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bytes_0 = b"\xccE\x92\x9c "
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    float_0 = -443.942
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    int_0 = 857
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    str_0 = "b8F0ijb9"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    float_0 = 224.8711
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    int_0 = 3722
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    bytes_0 = b"q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    bytes_0 = b"?z\xad\xe7\x13"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    int_0 = 273
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    float_0 = 1338.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    str_0 = "n-F}d-EQk)O"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    str_0 = "QZks]5A*G3D\n:\\"
    tuple_0 = (str_0,)
    bool_0 = True
    list_0 = [tuple_0, str_0, tuple_0, bool_0]
    list_1 = [list_0, list_0, bool_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    int_0 = -2284
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    int_0 = -1513
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    int_0 = -941
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    int_0 = -325
    bytes_0 = b"Z:\xa6\xe42r\xfb\x0f\t:z"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    int_0 = -2110
    int_1 = 1000
    list_0 = [int_1]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    str_0 = "2\\3).$~ \r5]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    int_0 = 1996
    int_1 = -1857
    tuple_0 = (int_0, int_1)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    bytes_0 = b"\xb9\xbc<\x02\xdc\xd4\t#Gr\x9c\xda\xdb~H\x9bC"
    int_0 = -2041
    tuple_0 = (bytes_0, int_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0, set_0, set_0]
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


def test_case_3850():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bytes_0 = b"\xcbF\xba-\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    int_0 = -2487
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    float_0 = -1471.732854
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    none_type_0 = None
    float_0 = -1620.861
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    str_0 = "X, ,oD6KE\x0brn4E]'S"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    int_0 = -1898
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    bool_0 = False
    bytes_0 = b"\x14"
    str_0 = "aw>X%g3#[VLi$_8zLyq,"
    tuple_0 = (bool_0, bytes_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    str_0 = "zK1n'MPXu}]r|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    float_0 = 3820.756588
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    float_0 = 2616.37096
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    str_0 = "i6"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    float_0 = 2215.0
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    float_0 = 1625.307
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    bool_0 = True
    str_0 = "Eu@(d"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    bytes_0 = b"*\xc8\x1d\x92\xfe\x19&Z\xee\xd3\x90\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    int_0 = -3720
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    int_0 = -231
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (object_0, bool_0, bool_0)
    dict_0 = {tuple_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    float_0 = -1798.3431
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    float_0 = -1172.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    bytes_0 = b"d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    int_0 = 3428
    list_0 = []
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    float_0 = -2226.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    complex_0 = 736.2405 - 4684.884994j
    tuple_0 = (complex_0,)
    dict_0 = {tuple_0: tuple_0, complex_0: tuple_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    int_0 = 1555
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    bytes_0 = b"b\xe2\xba2"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    int_0 = -3881
    module_0.get_new_command(int_0, int_0)


def test_case_3887():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3888():
    bytes_0 = b"\xd30<\xe3\x0e}"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    bytes_0 = b"v\xc1\xf2\xcdXA\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    str_0 = "a<h`yn\tER?_-S:7Tb?^"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    str_0 = "T4zS0i1\x0cC{mvPo"
    module_0.get_new_command(str_0, str_0)


def test_case_3893():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3894():
    bytes_0 = b"\xaa\xc5o\xa2:aWq\x0b\xee\xfe\xe38"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    str_0 = "N\x0b"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    none_type_0 = None
    int_0 = 466
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    bytes_0 = b"&;\x907"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    str_0 = "c\x0bmqR'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    int_0 = 2211
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    bytes_0 = b"\x03p\xd8\xb1\xcd\xbb\x1e\xaf_6\xc0\xf9\xdaJ\xc8"
    str_0 = 'i8}"8u"|{<~q+$'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, str_0: str_0, bytes_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    bytes_0 = b"Ht\x9fXx\x0b]W\x9c\xe0\x9f\x0f\xbeS\x9fd\x99\xf6\x97\xe6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    float_0 = 2832.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    int_0 = -4295
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    str_0 = "pr]48*k\r{X F\t|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    float_0 = -1519.5
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    str_0 = "C{z3F[11Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    int_0 = 1454
    dict_0 = {int_0: int_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    bytes_0 = b"\xec1fv\xd6~T\xd0\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    str_0 = "\x0cK1.8Y( "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    bool_0 = True
    bool_1 = True
    bytes_0 = b"\xf4^\x7f\xaay\x00\xef"
    tuple_0 = (bool_0, bool_0, bool_1, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    float_0 = 830.474
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    int_0 = -482
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    bytes_0 = b"k\x8b8R78,'\xbb\xc1c\xe1\x8cL\xc3\xe5\x8eY"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    str_0 = "o(Tp$RqK"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    str_0 = "5dch"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    int_0 = 520
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    str_0 = "J"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    str_0 = "#0@Js\rUN&Rs7?2>="
    module_0.match(str_0, str_0)


def test_case_3924():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3925():
    bytes_0 = b"G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    int_0 = -4418
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    int_0 = 2116
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    int_0 = -2733
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    float_0 = 3497.33626
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    int_0 = 1810
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    int_0 = 2070
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    int_0 = -4583
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    int_0 = 2423
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    int_0 = 1084
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    str_0 = "UfR4"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    str_0 = "8O@U#/q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bool_1 = False
    bytes_0 = b"1C\xa5\xae"
    tuple_0 = (list_0, bool_1, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    int_0 = -3286
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    float_0 = -353.801
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    int_0 = 1449
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    str_0 = "0kE!%@u>r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    bytes_0 = b"\xa8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    int_0 = -739
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    int_0 = 3518
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    bytes_0 = b"k\x8b0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    str_0 = "8U:hpK`L<1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    int_0 = 1258
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    str_0 = "nO<!~Mwx(,^C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_1.object(*list_0)


def test_case_3951():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3952():
    bool_0 = False
    str_0 = "ssY{"
    str_1 = "C>jPE;_E"
    str_2 = "LT"
    str_3 = "O4^w"
    str_4 = "z,v"
    dict_0 = {str_0: str_0, str_1: bool_0, str_2: str_3, str_4: str_2}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    float_0 = 515.1336
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    str_0 = "!R/7"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    complex_0 = -2167.34205 + 2594.891j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    bytes_0 = b"(\x1a.\xad\xb0\x81\x9b+\xb3&2?\xae0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    int_0 = -1016
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    str_0 = 'c;f("?\x0c%R;nqk0o;'
    float_0 = 765.604476
    list_0 = []
    tuple_0 = (str_0, float_0, list_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    int_0 = -1187
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    complex_0 = -104.319 - 83.5821j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    str_0 = "G!(zauBdAY`1K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    int_0 = 88
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    bytes_0 = b"\x0e\xb4\xa5D\xe3lEK"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


def test_case_3965():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3966():
    str_0 = "++}:TL+'l\t,Z.j#"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    int_0 = -283
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    bytes_0 = b"G"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_0, bool_1]
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    int_0 = -2250
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    float_0 = -564.8261
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    str_0 = "q^yHrs?Aua"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    float_0 = -384.686104
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    float_0 = -1759.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    str_0 = "Fgyhv<f}Kqt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    int_0 = 1864
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    str_0 = '/O)u\x0bNHB/$=-8":'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    str_0 = "[ffN?;\t\x0c0-%E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    int_0 = 490
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    float_0 = 3839.0022
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    bytes_0 = b"\xfc\xe1X\xfa\xa8\xf3\x0bl\xf1z\xc3\xacB\x93\xd9\xd4\n\xb8*\xba"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0, bool_0: bytes_0, bool_0: bool_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    str_0 = "]eeT1H(B\x0cQ@V)$]\ry0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    float_0 = 1422.0
    set_0 = {float_0}
    module_0.match(set_0, set_0)


def test_case_3989():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3990():
    int_0 = 1524
    module_0.match(int_0, int_0)


def test_case_3991():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3992():
    bytes_0 = b"\xa7\xd4]\xc6\xb2:\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    none_type_0 = None
    bytes_0 = b"\x91\x85\x89\x17\\Gd\xba'kl\xa9\x9f"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    float_0 = -2394.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    int_0 = 1280
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    float_0 = 1251.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    str_0 = "tWKJkL#7.CK"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    int_0 = 1170
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    float_0 = 3167.48547
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    int_0 = 309
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    int_0 = 4906
    module_0.match(int_0, int_0)


def test_case_4005():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4006():
    int_0 = -171
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    bytes_0 = b" \x03f\xf4<\x88\xec\t)yD\x1b\x93hN\xb1\xc2"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    str_0 = "vb0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    bytes_0 = b"E"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, tuple_0, tuple_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    float_0 = 1428.2
    str_0 = "="
    set_0 = {float_0, float_0, str_0, str_0}
    tuple_0 = (float_0, str_0, set_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    bytes_0 = b"UhC\xca\xc2rq~\x8e@\t\xd9"
    module_0.match(bytes_0, bytes_0)


def test_case_4012():
    pass


def test_case_4013():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4014():
    str_0 = '<P\tV$gf">5'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    str_0 = "R0B+Z3\t[.7OZME*?Q>#"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


def test_case_4016():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    complex_0 = 325 - 476.78j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    bytes_0 = b"f:`\xb5+\xc4Qq[["
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    int_0 = -2433
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    bytes_0 = b"\xcf\x1c\x8cA39\x0e\x87\xf73\x19E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    str_0 = "="
    str_1 = "R?2 Ka(w"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    int_0 = -185
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    float_0 = 4233.30018
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    int_0 = -2157
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    bool_0 = True
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    float_0 = 453.050398
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    str_0 = "R}TVY_["
    module_0.match(str_0, str_0)


def test_case_4031():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4032():
    bytes_0 = b"\xda\xc8\x02\x82"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    str_0 = "~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    int_0 = -2559
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    complex_0 = -1457 + 1596.7j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    int_0 = 1433
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    int_0 = 856
    float_0 = -82.8
    tuple_0 = (int_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4042():
    int_0 = 2751
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    int_0 = -3154
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_4045():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    int_0 = 640
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    set_0 = set()
    bytes_0 = b">\xb3G8\xa2"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    bytes_0 = b"\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    str_0 = "52!sP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    int_0 = 2681
    int_1 = -264
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    int_0 = -2522
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    bytes_0 = b'\t\x19\xaf\xd0\xab\xfc^\x08y"|\xac=z\xdc'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    str_0 = "q*De"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    str_0 = "C7jr6n&@<\rpyb-bnv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    int_0 = 934
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    bytes_0 = b"N\xae}\xf4,\xbb\xd7\x87\xa3\x9b23Y\xd5\xd0\x85w\xc6Q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    complex_0 = -739.2 + 743.15j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    float_0 = -2899.431468
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    complex_0 = -1012.79738 - 2313.044j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bool_0 = True
    tuple_0 = (bool_0,)
    object_0 = module_1.object()
    module_0.get_new_command(tuple_0, object_0)


def test_case_4064():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4065():
    int_0 = 758
    list_0 = [int_0]
    tuple_0 = (int_0, int_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    float_0 = 1741.0
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    bytes_0 = b"\xdb\xe2^nC\xd3\xb6\x17\xffB\x90\xb7\x86\x89\xc4\x17f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    str_0 = ":w#C"
    str_1 = "6fFS\rL&E\x0cNhxjrNY7|"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    float_0 = 114.06
    module_0.match(float_0, float_0)


def test_case_4073():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4074():
    bool_0 = False
    int_0 = -1561
    bytes_0 = b""
    list_0 = [bool_0, int_0, int_0, bytes_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    int_0 = 439
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    int_0 = -2895
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    str_0 = "WJd'n7t\tNR!0\nsH6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    int_0 = -2899
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    str_0 = "lpH`c8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    str_0 = "V 8pj\n#O@K\nx\rED4I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    int_0 = 1456
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    bytes_0 = b"\xfc\x194\xadD\xb1\xd0\xa0\x89\xa1\n\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    bytes_0 = b"\x18\xfeK\x9b\xc3@\xb3\x87\x8a\x0f\x15\x81\x136\xa6\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    none_type_0 = None
    str_0 = '"jby\t&#X;*$f'
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        str_0: none_type_0,
        none_type_0: str_0,
    }
    module_0.match(none_type_0, dict_0)


def test_case_4087():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4088():
    bool_0 = False
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


def test_case_4089():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4090():
    int_0 = 14
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    int_0 = -1480
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    str_0 = "\r0zvn'.<]J7{g#bY"
    bytes_0 = b"\xbe\x960\x98"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    str_0 = "2~fgX|E )\n(k"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    str_0 = "1CX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    bytes_0 = b"V\xf7\t8\xf7w,"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    str_0 = "c3s&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    int_0 = 3799
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    none_type_0 = None
    list_0 = [none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    complex_0 = 1532.28 + 2233.8554j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    complex_0 = 102.18 + 1502.7954j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    str_0 = 'Z"S7*w[#=`&j}8g3o'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    int_0 = -2031
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    tuple_0 = ()
    bytes_0 = b"\xbd\xa9\x92\xdd"
    str_0 = "ET|nTSrk gO<in@A\tF"
    bool_0 = True
    tuple_1 = (tuple_0, bytes_0, str_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    bytes_0 = b"c\x94\xc9\x93\x9dIl8\x8a/z \x1a>[h\x1e}"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    int_0 = -1388
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    str_0 = "RTCOisnW%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    str_0 = "#s:h:d@0l<)#'L7"
    float_0 = 904.729
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    complex_0 = 5.47329 - 455.89j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4113():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4114():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    bytes_0 = b";\xb31Y\xd4\xb4\xb1\xa2\x99\x0e\x92\xe4\xe6\xec\xe9\x9bs\x10:"
    bool_0 = True
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    bytes_0 = b"\x82,\xe73\xa6\xad\x9d\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    int_0 = 2856
    module_0.match(int_0, int_0)


def test_case_4118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4119():
    int_0 = -1498
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    int_0 = 1199
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    str_0 = "\n~N."
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    bytes_0 = b"\x07\x06\x9cf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    str_0 = "6rYM0$;~<1ie9y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    bytes_0 = b"\xaaj4z\x17\xc9'W\xbf"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bytes_0 = b"\x81\xd5\xcd\xf3&\x05\x19\xc2\xd3\x19\xb9\xcd[\xaeDR"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    str_0 = '"&ma0T['
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    int_0 = -63
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    bytes_0 = b"y\xf5~\xd9\xff\xf5\xc3\xefj"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    complex_0 = 3779.591 - 1871.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    none_type_0 = None
    str_0 = "z\r"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    str_0 = "rIE/$"
    int_0 = -285
    tuple_0 = (str_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    str_0 = "*TSK'Jb8qT_"
    int_0 = 946
    tuple_0 = (str_0, int_0, int_0)
    list_0 = []
    tuple_1 = (tuple_0, list_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    str_0 = "rI>1Jro1EsXX?"
    float_0 = -2004.0169
    tuple_0 = (str_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    bytes_0 = b"\xee\xd5\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    str_0 = "KB{II*qG*Hq\n.`<yHye"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    bytes_0 = b"\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    str_0 = ""
    list_0 = [str_0]
    tuple_0 = (bool_0, dict_0, str_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0, **object_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    bytes_0 = b"S\t\xea,q\x10\xe7\x0f\x9cM\x9cJc\xc9r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    bytes_0 = b"j\x1bA\xb0\x96\xa4\xd0\xb2\x929f\xde\xdd\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    int_0 = 1161
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    int_0 = -1350
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    float_0 = 2647.85
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    int_0 = -1089
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    float_0 = -2038.0
    set_0 = {object_0, float_0}
    tuple_0 = (object_0, set_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    str_0 = "aJL_]i:T];6M`"
    set_0 = {str_0, str_0, str_0}
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    bytes_0 = b"\xed\x19\xa7\x07\x1b6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    int_0 = -1772
    object_0 = module_1.object()
    list_0 = [int_0, int_0, int_0, object_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    int_0 = 2902
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    int_0 = 3118
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    dict_0 = {}
    tuple_1 = (tuple_0, tuple_0, dict_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    complex_0 = -563.6054 - 2993.274j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4156():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4157():
    int_0 = -2937
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    bytes_0 = b"\x15\x8aG0:\x1d9\xfe\x89\xb9\xc4o\xf7\x9a}\xf10\x11w\xa9"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_0)


def test_case_4160():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4161():
    int_0 = 1927
    bool_0 = True
    tuple_0 = (int_0, int_0, bool_0)
    bool_1 = False
    list_0 = [tuple_0, bool_1, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    int_0 = -1053
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    float_0 = -1124.53
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    int_0 = 637
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    str_0 = "\n=.as%KC*,#,vq<SZ)8"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    bytes_0 = b"`\xa5:\xae\xf6V\x18y\xa8\xb2\x1c&\xeb\x99N"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    bool_0 = True
    str_0 = "hU'@kY[BS\n"
    tuple_0 = (bool_0, str_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    str_0 = "'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    int_0 = -1832
    str_0 = "a\x0b0[yee;eP)R{~g}#(FD"
    dict_0 = {int_0: int_0, int_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    str_0 = 'S\r-.$~S]"Mrbd7BmsDw'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    str_0 = ";AT=SSIZ^9V]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bytes_0 = b"2\x92\x83\xc8\x9a\xec\x1b@\t\xe0\xfe\x870@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    complex_0 = -10.61 - 1179.23j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    object_0 = module_1.object()
    list_0 = [dict_0, dict_0, object_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    str_0 = ",SzJHddN@(j6`2:@sy9"
    module_0.match(str_0, str_0)


def test_case_4176():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4177():
    list_0 = []
    float_0 = -547.35855
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    str_0 = "gF*S]xl+X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    float_0 = 238.222
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    int_0 = -2046
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    float_0 = 783.693
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


def test_case_4183():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4184():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    float_0 = 1359.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    int_0 = 695
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    complex_0 = -1867.246541 + 268j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    int_0 = -334
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    bytes_0 = b"\xd5\xc8P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    str_0 = "/t>c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    str_0 = "!j5dmp,lca%q1Sy\\"
    str_1 = "m4%Fs3:8=lJtcm"
    str_2 = "%#KP"
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_0: object_0}
    module_1.object(**dict_0)


def test_case_4192():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4193():
    bytes_0 = b"\x96\xb6\x89/t\xf9z\xb4k\x82(\xffd\x1af"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    bytes_0 = b"W/\xc0\xe2\xaa\x80\xec\xc6\x88\x91M"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    float_0 = 354.218279
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    list_0 = [set_0, set_0, object_0, object_0]
    str_0 = "BUK0=\\l\nV8=VqRWNDT"
    dict_0 = {str_0: object_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    bool_0 = False
    float_0 = -1988.315
    bool_1 = False
    set_0 = {bool_0, bool_1}
    tuple_0 = (bool_0, float_0, bool_1, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    bytes_0 = b"\xe6\xe7\xa3\x99\x10\x16j\xc6\xa9\xfd\xad\xbek"
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    str_0 = "C}s{S[YR]\t2Zg2_xZ<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    int_0 = -4213
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    bytes_0 = b"\xc6#R\x8e!j.\xbc\xf0\xcb,"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    float_0 = -2410.458888
    module_0.get_new_command(set_0, float_0)


def test_case_4205():
    pass


def test_case_4206():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4207():
    bytes_0 = b"\xd0\xde\xce\xda\x9dI069\xaa]\xed:\x0e9\x16\xb6^E"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bool_0: bytes_0, bytes_0: bool_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    int_0 = -139
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    bytes_0 = b"\x8d\x01\xea\xbd\x91\xa6"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    complex_0 = 2600.96088 + 982.93334j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    complex_0 = 1488.78 - 295.99436j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    int_0 = -334
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    complex_0 = 3053 + 1108.0119j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    str_0 = "aC>"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    str_0 = "dY{C\rVk4nu#h  "
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    int_0 = -1178
    set_0 = {int_0, int_0}
    list_0 = [set_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_4219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4220():
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    str_0 = "]~(bwfz"
    bytes_0 = b"\xe9s\x1a\x01\xa7\xb0=\xd8"
    tuple_0 = (bytes_0,)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    bytes_0 = b"\x1b2"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    str_0 = ")YnIX(V7Dp\tM"
    none_type_0 = None
    str_1 = "{\x0bt9\tA;mJbec"
    str_2 = "T\x0cuA?%Kh"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    int_0 = -1752
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_4225():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4226():
    complex_0 = -103.769519 + 289.6775j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    int_0 = 225
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    float_0 = 1251.6
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    int_0 = -1860
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    str_0 = "#+\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    float_0 = -1287.0
    int_0 = -1124
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    complex_0 = 240.32394 + 2416.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    bytes_0 = b"\xfa\xd58(\xee\x9c\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    bytes_0 = b"'\xaa\x00Wb\xee1RT"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    str_0 = ""
    module_0.match(str_0, str_0)


def test_case_4240():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4241():
    int_0 = 509
    complex_0 = 3347 - 1120j
    dict_0 = {}
    set_0 = {int_0, int_0}
    tuple_0 = (int_0, complex_0, dict_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    int_0 = -272
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    int_0 = -1950
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    int_0 = -169
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    float_0 = -3361.45434
    module_0.match(float_0, float_0)


def test_case_4246():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    bytes_0 = b"\xff\xbb\x05\x07\t"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4248():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4249():
    bool_0 = True
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    str_0 = "T2^Dwc?< $dD\x0b"
    bool_0 = False
    bytes_0 = b"\xddm"
    dict_0 = {str_0: bytes_0, bytes_0: bytes_0}
    list_0 = [bool_0, str_0, dict_0, dict_0]
    tuple_0 = (bool_0, list_0, bytes_0, list_0)
    tuple_1 = (str_0, tuple_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    int_0 = 1294
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    int_0 = 5207
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    bytes_0 = b'\x17\xd8y(7"\xeda\xe9'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    str_0 = "g{8 [Ao$t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    str_0 = "h+['~fXr!+4\r9RNp?1l"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    str_0 = "Gg,pTp\\*93J"
    tuple_0 = (str_0,)
    set_0 = {str_0, str_0}
    bytes_0 = b"C~\xdb\xc0"
    float_0 = -1309.0
    tuple_1 = (tuple_0, set_0, bytes_0, float_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    bool_0 = True
    tuple_0 = ()
    float_0 = 3670.50923
    bytes_0 = b'J\xae\x8c\xf9\xe2{^-."\xb6I#\xcd\xcb2\r\xf34'
    tuple_1 = (bool_0, tuple_0, float_0, bytes_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    int_0 = 248
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    int_0 = -167
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    bytes_0 = b"\xee\xcc\x98\xe2;\x91\x96W\x0f\t\xe6R5A\xac\xa9\xd1\x12"
    set_0 = {bytes_0}
    list_0 = [bytes_0, set_0, set_0]
    tuple_0 = (bytes_0, set_0, list_0)
    list_1 = [tuple_0, tuple_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    float_0 = -87.794
    bool_0 = False
    tuple_0 = (float_0, float_0, bool_0)
    int_0 = -1233
    dict_0 = {tuple_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    int_0 = -1707
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    float_0 = 2301.66649
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    str_0 = ".5\rbNkBa6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    int_0 = -274
    module_0.match(int_0, int_0)


def test_case_4268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4269():
    int_0 = -1569
    list_0 = [int_0]
    str_0 = "E3bMyT"
    str_1 = "h&lgB6bdqbO"
    tuple_0 = (list_0, list_0, str_0, str_1)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    bytes_0 = b"\x04b"
    dict_0 = {}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    int_0 = 1152
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    str_0 = "JezuMY#"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    float_0 = -704.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    complex_0 = 3386.99 - 2947.7481j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    int_0 = -1742
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    bool_0 = True
    int_0 = -688
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    int_0 = 1866
    set_0 = {int_0, int_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    float_0 = 1145.2482
    tuple_0 = (float_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4280():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4281():
    int_0 = -1496
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    float_0 = 2263.34967
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    float_0 = 1262.32
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    list_0 = []
    str_0 = "~"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    str_0 = "NOBF<8c63)zSd73B|?&R"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    str_0 = "jY-_^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bool_0 = False
    bytes_0 = b"\x98\x97\xad\xd6\xe0w\xebht4q\x87\xe8\xdf\x94\xd6x\xe1\t"
    list_0 = [bytes_0]
    tuple_0 = (bool_0, bytes_0, list_0, list_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    int_0 = -3176
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    str_0 = "Q\rmEkdlZADeAv\tkq"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    int_0 = 1416
    module_0.match(int_0, int_0)


def test_case_4292():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4293():
    float_0 = -2506.10804
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    int_0 = 177
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    int_0 = -936
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    bytes_0 = b"v\xab\x7f\xc2+\x96T/\xee\t\xedcA=-&\x96\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    int_0 = -786
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_4298():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4299():
    int_0 = 1795
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    float_0 = 775.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    str_0 = "g3\n9?N7\x0cYY$Z{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    bytes_0 = b"\xb9\xa5F\xb899\xf7\xdcc\x0b\xff."
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    bytes_0 = b"\x1a\xa0\xb1\xdc\xf3\xea\x9b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    str_0 = "\nBmy,}1Pk\rDKBvT8Rs"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    str_0 = "MgP:G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    complex_0 = 2220.9321 + 776.49463j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    bytes_0 = b"QI\x13\xf9\x1a\xaf\x98\xd2"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    str_0 = "G|22*LP/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    int_0 = 1089
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    bytes_0 = b"\xb9m\xaa\xa3'I\x99\xec\x85"
    float_0 = -2231.2
    set_0 = set()
    bytes_1 = b"\x8e\x9bitS\x9cc\x13\x8a\x13\x87j\x9a'>\xb7\xbf\xe5\x16Q"
    tuple_0 = (bytes_0, float_0, set_0, bytes_1)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    int_0 = -1125
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    bytes_0 = b"\x92\xd3\x1a<\x1a\xd9P\x11cK\x88R\xd6\x1a\xe4\x85\xed\x91w$"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    int_0 = 925
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    int_0 = -418
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    float_0 = -321.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    str_0 = "|O8\x0bcnck}("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    float_0 = 416.9213
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    int_0 = 2489
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    str_0 = "MJ,}EP)CdY\x0cU"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    str_0 = "1@2dU|O0_CjFag"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    int_0 = -694
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    int_0 = 728
    tuple_0 = (int_0, int_0)
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    str_0 = "mV|3?R"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    str_0 = "Xv7l[Qs^@#B2Q28u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    none_type_0 = None
    str_0 = "f-#'5%r+\\"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    complex_0 = 3406.0391 + 719j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    complex_0 = -870 + 2920.947909j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    bytes_0 = b"Zw\nr\xeay\xa4\x01\xe1\xc4\x0e&^!\x0c\x1c\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    int_0 = 2231
    list_0 = []
    module_0.get_new_command(int_0, list_0)


def test_case_4335():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4336():
    bytes_0 = b"\xd7\xf2\x1a\xc7=\xd52c\x8e$\xca~\x9a"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4337():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4338():
    int_0 = -1504
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    str_0 = '.c0`(,PsTGp*o%\n"'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bytes_0 = b"\xf6\x98\xc8\x92\xbe\xbb\x02J#\xcb"
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    str_0 = "Zt)De_w?R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    complex_0 = -1888.57382 + 1183.0904j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    float_0 = 870.767631
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    tuple_0 = ()
    int_0 = 292
    list_0 = [tuple_0]
    str_0 = "5u\\1\x0cN?Hv T/P"
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, int_0: list_0, str_0: int_0}
    list_1 = [tuple_0]
    module_0.match(dict_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    str_0 = "7[ )Xrm8@|-a?"
    module_0.get_new_command(str_0, str_0)


def test_case_4345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4346():
    str_0 = "4_q:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0, bool_0]
    module_0.get_new_command(list_0, tuple_0)


def test_case_4348():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4349():
    str_0 = "$P:MR\\u\x0cuFqtt/JJM"
    module_0.get_new_command(str_0, str_0)


def test_case_4350():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4351():
    int_0 = 321
    bytes_0 = b"(\xe58~\x8d\xb4M[6\x83\xce"
    dict_0 = {}
    tuple_0 = (int_0, int_0, bytes_0, dict_0)
    int_1 = -3376
    tuple_1 = (int_0, tuple_0, int_1)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    bool_0 = True
    tuple_0 = ()
    str_0 = ""
    dict_0 = {bool_0: tuple_0, bool_0: tuple_0, tuple_0: tuple_0, str_0: tuple_0}
    set_0 = {str_0}
    int_0 = 455
    tuple_1 = (tuple_0, dict_0, set_0, int_0)
    module_0.get_new_command(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    str_0 = "K\t#[ &0ER6YD"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    int_0 = -3748
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    bytes_0 = b"L\x16\xc3\x97X\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    str_0 = "#q,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    bytes_0 = b"\xfb\xbc\xbf\xc1\xf4\rc"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    float_0 = 826.177
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    bytes_0 = b"\x85^\t\xa8b\x8dC\xe4G\xc4q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, bool_0]
    module_1.object(*list_0, **tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    int_0 = -5100
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    float_0 = 1279.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    int_0 = -3063
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    str_0 = 'E)\x0cQn"QbSv9zG9|'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    int_0 = -2253
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    float_0 = 1637.268
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0, float_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    int_0 = -1487
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    float_0 = 1724.6187
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    int_0 = 317
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    float_0 = 332.22
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    int_0 = 1684
    complex_0 = -2038.133 - 1263.51186j
    module_0.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    int_0 = -1793
    bytes_0 = b"\x17m\xa1\xda\xc5\x8f\x06m\xce\xef\xb5=Q\xc7\x17\xd9"
    set_0 = {int_0, bytes_0, int_0, int_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    tuple_0 = ()
    float_0 = 144.0
    bool_0 = True
    tuple_1 = (tuple_0, float_0, bool_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    bytes_0 = b"C\xf4\x18"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    complex_0 = -3088.78163 - 1706.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    str_0 = "as!!/z`F2\x0bPv}~DT"
    str_1 = "zG#6?"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    int_0 = -21
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    bool_0 = False
    str_0 = "_v{scsURy"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    int_0 = 972
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    float_0 = -267.41075
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    bytes_0 = b"TL\xbf'\x07\x7f\n"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    str_0 = "2[QN$G(>,1s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    bytes_0 = b"k\x8d6*\xdb\x9at\x8c$Z./\xb8\x91+\xb1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = []
    int_0 = -22
    tuple_0 = (dict_0, list_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    int_0 = 1143
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bool_1 = True
    dict_0 = {bool_0: set_0, bool_1: set_0, bool_1: bool_1}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    int_0 = 1712
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    complex_0 = -2451.49853 + 3248j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    float_0 = 580.68
    list_0 = [float_0, float_0]
    module_0.match(float_0, list_0)


def test_case_4395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4396():
    bytes_0 = b"II"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    int_0 = 1252
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    complex_0 = 2561.09041 - 986.78232j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    str_0 = "m[\x0cp\t>"
    bytes_0 = b""
    int_0 = -290
    dict_0 = {str_0: bytes_0, str_0: bytes_0, str_0: int_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    int_0 = -624
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    bytes_0 = b"\x17YI\xf7\xe7\xfd\xaf\x9d\xab\x0c\x9c@\xa1\x9drd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    bytes_0 = b"FL\x02=\x0f\x10\xde\xe6 \xd0\xec\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    str_0 = ">C8zvM"
    module_0.match(str_0, str_0)


def test_case_4405():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4406():
    str_0 = "hg:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    int_0 = 1466
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    bytes_0 = b'\xc1D\x81\xc3<"\x0b\xd6\xaa\x87\xb5%+u\xd4\x18'
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4409():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4410():
    object_0 = module_1.object()
    bytes_0 = b""
    module_0.get_new_command(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    bytes_0 = b"rm\x85Le\xbbh\xb3r\x15\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    bytes_0 = b"*2\x00\x10\x10\x9e\xa7\x17h\x9f9/>\x91;J\xd7\x89\xa8\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    bytes_0 = b'\x18"\xee\x85X\xd71\xb1\xac;\xa2\x0cv?\xd7\xf4\t\x8f\x1fE'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    str_0 = "Y?Q-"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    int_0 = -3339
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    bytes_0 = b")\x89\x07\x1bGI\xe2&\xa0\xff\xb7\xe0sWC.u\xfb\x80\x9e"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    str_0 = "\x0bDJv1"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    object_0 = module_1.object()
    bool_0 = False
    list_0 = [object_0, bool_0, bool_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    str_0 = ")CqW_R2m&?\tH)::Ar"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    int_0 = 179
    set_0 = {int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    str_0 = 'vt"kH=fqUkR4'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    str_0 = "A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    int_0 = -1462
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    str_0 = "!//<G9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    bytes_0 = b"\xa3N\xed.>\xa8\x86lp:\x87\xac\xd2>"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    str_0 = "6L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    int_0 = 5917
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    str_0 = "m8CM=&|bdX.15*&ua-4q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    list_0 = []
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    str_0 = "tU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    str_0 = "O*c4q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    str_0 = "!`n4b#|<P"
    module_0.get_new_command(str_0, str_0)


def test_case_4434():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4435():
    float_0 = -742.93
    set_0 = {float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    int_0 = 3098
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    bytes_0 = b"\xa5P\xc2\xd6R\\x"
    bool_0 = True
    list_0 = [bytes_0]
    set_0 = {bytes_0, bytes_0}
    int_0 = 1957
    complex_0 = 237.8 + 1218.710914j
    tuple_0 = (int_0, complex_0)
    tuple_1 = (bool_0, list_0, set_0, tuple_0)
    module_0.match(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    bool_0 = False
    bytes_0 = b']\xe4\xac2]p\xcd\x95Vq"\xb3\x18\\\xa1\x83S\x1f\xd4\xf2'
    int_0 = -2035
    tuple_0 = (bool_0, bool_0, bytes_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    bytes_0 = b"r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_4442():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4443():
    str_0 = ":\nGkHn["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    int_0 = 1466
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    bytes_0 = b"t\xe0}\x97\xa6@\x8e\x0c\xcf\xfa$\xaa\xd1E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    bytes_0 = b""
    list_0 = [bytes_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0, tuple_0, bytes_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    int_0 = -176
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    int_0 = -2342
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    str_0 = "M/Lu>bikRq"
    dict_0 = {}
    tuple_0 = (str_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    float_0 = 1602.43744
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    str_0 = "j%9<JfOWa)@\\n;`"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    int_0 = -285
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    int_0 = 1255
    module_0.get_new_command(int_0, int_0)


def test_case_4456():
    pass


def test_case_4457():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4458():
    int_0 = 861
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    str_0 = "1;%HdW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    float_0 = 2845.912527
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    str_0 = "cK5N[\tn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    str_0 = "}U$N'S|&6K["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    float_0 = 285.8541
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    bytes_0 = b"\xc1\xfe\x1f\xa9R\xc7\xf1\xad\x8a\xecT!\xc0\xaa\xba"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    bytes_0 = b"\xd7^\x11\xa1\x0f@Lv\xd9\xa3\x9b\xb9\x1e\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    str_0 = "%x/W,:.z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    bytes_0 = b"}\x02\xd4\xaap\xe9\x8b\xa8\xb5&>\xc0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    bytes_0 = b"\xb1\xb1\xc8\x8eTm\xdd\xab!\xa0\x94\xfa^u"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    str_0 = "80"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    float_0 = 1244.09
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    str_0 = "DI)?1ng~d&G&KaN\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    str_0 = "00FRy$\"eY'<HWF]*<|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    str_0 = "[#16b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    bytes_0 = b"9\xa7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    int_0 = -2025
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    list_0 = []
    tuple_0 = (list_0, list_0, list_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    bytes_0 = b"\xa9{C\xa6\xaf\xa2[j"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    complex_0 = -1789.607 - 202.6676j
    bool_0 = True
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    str_0 = "Iy;i5X5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    list_0 = []
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    bool_0 = True
    str_0 = "XXXF[w2DI@\re^/%"
    list_0 = [bool_0, str_0, str_0, bool_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    str_0 = "ky<<Wsj<r-xgIo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    float_0 = -1708.083999
    list_0 = [float_0, float_0]
    list_1 = [list_0]
    module_0.match(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    str_0 = '.qNcA+>LFW"#[CXlpo6'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    bytes_0 = b"\xbd\xb5gR3bP\xde\xa2\xd7\xd0"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    str_0 = "$?A"
    int_0 = 1139
    dict_0 = {str_0: str_0, str_0: str_0, str_0: int_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    int_0 = 2460
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    bytes_0 = b"\xa6}\xf4$r\x95\xc7h"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    float_0 = 1006.207
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    complex_0 = -612 + 1944.999j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    bytes_0 = b"\x00\xebFTi5\xd1\x96:\xc85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    bytes_0 = b"\x86\xde9\x8ba\xa2\xe5\xb5OpE"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    bytes_0 = b"l\x1e\xf8\xa8\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    bytes_0 = b"\x12L\x92\xb4\x8e\xf0V\x8c\xdb\xd0\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    bytes_0 = b"\xfb=\xe8\xe0S&\xf5\x96\x0f3\xafN\xbc\xd7?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    bytes_0 = b"/\x99P\xa2\x82\xe4\xd1J\x87\x17\xed<}w\r,\x12\x01*\xbc"
    bytes_1 = b"\xd0\xdb\x92Sai\xa3x&\x16!"
    bytes_2 = b"J5\xc1\xa6\x9d\x0f\xc0\x97j\xceb\x15"
    tuple_0 = (bytes_0, bytes_0, bytes_1, bytes_2)
    module_0.match(tuple_0, tuple_0)


def test_case_4502():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4503():
    str_0 = "E3A\\UtGW"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    bool_0 = False
    float_0 = -1011.0248
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, float_0: bool_1}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    bool_0 = True
    int_0 = 2031
    tuple_0 = (int_0, bool_0)
    bool_1 = True
    set_0 = {int_0, bool_1}
    tuple_1 = (bool_0, tuple_0, bool_0, set_0)
    tuple_2 = (tuple_1, set_0, bool_1)
    module_0.match(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    str_0 = 'r(1;XC398\tS=kQj"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    bytes_0 = b"r\xa87\xd8+\xaa\xbe\x11I\x87a\xc8\xad$\xd9\x9e!\x90\x03\xc1"
    object_0 = module_1.object()
    list_0 = [bytes_0, object_0, bytes_0]
    tuple_0 = (bytes_0, list_0, list_0)
    str_0 = 'o0nXgx"NT;_'
    str_1 = "4AMF5.Ze5r^Gg\x0bD6GAW-"
    tuple_1 = (tuple_0, str_0, str_1, tuple_0)
    module_0.match(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    int_0 = -4527
    set_0 = {int_0, int_0}
    tuple_0 = (int_0, int_0, int_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    int_0 = -1190
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    float_0 = 2301.3
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (list_0,)
    dict_0 = {}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    bytes_0 = b"5\x93"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    str_0 = ")a9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    str_0 = "OHpr\tHQd0)t?1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    bytes_0 = b"E"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    float_0 = 1125.866
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    int_0 = -1211
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    bool_0 = False
    bool_1 = False
    bytes_0 = b"\xf7h\n\xc8\x84"
    tuple_0 = (bool_0, bool_1, bytes_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    bytes_0 = b"R\xc8`\x1b\xacQ?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    bytes_0 = b"\xa3\xe2\xe2,\x04\xca\x0c\xd1`\xbbw\xf4\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    float_0 = -2313.045423
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    str_0 = '1".,[:;,q"d0\x0cs6pO[c'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    int_0 = 3235
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    str_0 = "9Z\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    str_0 = "kcC$-2&(3j_[I{<\n?*"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    bool_0 = True
    set_0 = {bool_0}
    bytes_0 = b"\x85|\xa5\xd1u^"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    bytes_0 = b"\x13\xce/\xebX\x04\xfd\xba\x02\xb4\xaf\x92\xb5\x1cBaG\xb0\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    int_0 = 1283
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    float_0 = -927.52584
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    set_0 = set()
    bool_0 = True
    bool_1 = True
    tuple_0 = (set_0, bool_0, set_0, bool_1)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    bytes_0 = b"\xc5%\x1d|S\xf6\x958\xceI\xc82pz>h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    bytes_0 = b"\xe40\x10d5Y\xa25\x84\x87U\xcf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    float_0 = 2401.12179
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    int_0 = 3649
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0, list_0, list_0, int_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    bytes_0 = b"\x15b\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    int_0 = -1488
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    str_0 = "Pc_pZ`"
    list_0 = [str_0, str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    str_0 = "\rzASq\x0bCqrj,st#^>v"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    int_0 = -765
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    int_0 = -2183
    set_0 = {int_0}
    list_0 = [set_0]
    list_1 = [list_0, set_0]
    bool_0 = True
    list_2 = [list_1, int_0, bool_0]
    module_0.get_new_command(list_2, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    str_0 = "&h!jD'[u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    bytes_0 = b"\nN\x0bM\x9c8R"
    module_0.match(bytes_0, bytes_0)


def test_case_4545():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4546():
    int_0 = 1567
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    int_0 = 1477
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_4550():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4551():
    bytes_0 = b"(\xdf\xbd\xc3\xb5\xc0\x9b1\xbd\xe9."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    str_0 = "l\\Svh[-X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    str_0 = "<Qf\rmz!v~^kCgzx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    bytes_0 = b"\xda\xc7"
    module_0.match(bytes_0, bytes_0)


def test_case_4557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4558():
    complex_0 = 637.6 + 2796.0612j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    set_0 = set()
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    int_0 = -1649
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    complex_0 = 1322.41899 - 2248.1446j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    str_0 = "c1|/WmVa"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    int_0 = 468
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    str_0 = "z,Kiep{ZIA.cWm:)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    bytes_0 = b"@A\x16\xe9;\xfd\xa5\xd3ci\xad\t.\xdf\x98J~\x92"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    str_0 = "F"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    str_0 = "XyjtcS\x0bf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    bytes_0 = b"\xa7i\xe7\xf7\xb4"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    str_0 = '9ml3v\x0c\nP"f;'
    set_0 = {str_0, str_0, str_0, str_0}
    float_0 = -2379.841502
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    str_0 = 'yj[+a\raC&x@Mh}Vl"lf('
    bool_0 = True
    bytes_0 = b"\xac\x18\x07q$"
    tuple_0 = (str_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    bytes_0 = b"p\x15V\xd5J*@"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    int_0 = -107
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    int_0 = -294
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    float_0 = -743.23
    module_0.get_new_command(float_0, float_0)


def test_case_4577():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4578():
    bool_0 = True
    str_0 = "RchU;c\x0bo"
    list_0 = [bool_0, str_0, str_0, str_0]
    bool_1 = True
    str_1 = "2a"
    tuple_0 = (bool_0, list_0, bool_1, str_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    str_0 = "\tid6pKStYvj[`9h\n`'A"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    str_0 = "NTi\\#f%WA\n0k>2"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    bytes_0 = b"\xd3Q\x10\xe6\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    str_0 = "a[\x0cv[uSAY"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    int_0 = -218
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    float_0 = 861.68
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    float_0 = 2074.67
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    bytes_0 = b"\xe1eD\xbb\x14\x89\xba\xcf\x0e5\xc4v\xed){\xa8\xb4\xe4\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    int_0 = -457
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    int_0 = 1556
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    bytes_0 = b"\xcc\xba\xe7\xe0\xae\xc3\xed\x9c\xf10\x04|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    str_0 = ""
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    none_type_0 = None
    str_0 = "Ns 8^m{\t@"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    str_0 = "emq RnhO"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    bytes_0 = b"\xd6\xe0\xdc\x8b\x03a\x14"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    list_0 = []
    list_1 = [list_0]
    str_0 = 'b8m"]7'
    int_0 = 3131
    tuple_0 = (list_1, str_0, str_0, int_0)
    module_0.match(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    str_0 = "3Bjl(-PzBQ6\r8|\rzO"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    set_1 = set()
    module_0.get_new_command(set_0, set_1)


def test_case_4597():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4598():
    bytes_0 = b';`\xa4\xb0\x9d\x12\x81\xec\xb9\xe8Q+"b\x10@'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    none_type_0 = None
    bytes_0 = b"~\xf4\xef\xf3\x8a\xd5"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    bytes_0 = b"m\x14\xb5y\xc5\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    float_0 = -2758.2877
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    int_0 = -2616
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    complex_0 = -1576.4482 - 605.31527j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    bytes_0 = b"h8\x98\xae\x82g\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    str_0 = "q\x0cR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    complex_0 = 1574.3952 + 550.31j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    complex_0 = -735.40935 - 2341.003847j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    str_0 = "&L8m99Rh:w9\rf@?I,"
    complex_0 = -846.52 - 3012.19882j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    str_0 = "BolwZGFIHm bqUZ)?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    int_0 = -845
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    complex_0 = -259.3818 - 263j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    str_0 = ")@Gg@L*K%[\n\r#("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    bytes_0 = b"\x84^f\xea\xba\x1c\t]D\x13\x8c\xafK\xbb\xfb\x13\xdf\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    int_0 = -280
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    complex_0 = -672 + 2306.9863j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    bytes_0 = b""
    tuple_0 = ()
    set_0 = {bytes_0, bytes_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    int_0 = 2782
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    str_0 = "P}=^.d#&.qIr!ug0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    int_0 = 2772
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    bytes_0 = b"\xb2p\xac\x1e\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    complex_0 = 1641 + 167.22247j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    str_0 = "cb7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    str_0 = "s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    int_0 = -2629
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    complex_0 = -1077.74998 + 3822.282635j
    list_0 = [complex_0, complex_0]
    module_1.object(*list_0)


def test_case_4632():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4633():
    str_0 = "Q'y"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    bytes_0 = b"\x15?\x9aN>\x99\xd9\x8ct\xe0\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    str_0 = ";&)MGb};_v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    int_0 = 2560
    set_0 = {int_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_4637():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4638():
    str_0 = "C@@u?RDbqn!gMy"
    dict_0 = {str_0: str_0}
    tuple_0 = ()
    dict_1 = {}
    tuple_1 = (dict_0, tuple_0, dict_1)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    bool_0 = True
    bytes_0 = b""
    set_0 = {bytes_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    float_0 = -1863.768834
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    str_0 = "GkqQMl.8\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    float_0 = 1582.7107
    object_0 = module_1.object()
    dict_0 = {float_0: float_0, float_0: float_0, object_0: object_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    int_0 = -2269
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    bytes_0 = b"w\xd2\x04\xd9\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    float_0 = -3043.909645
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    int_0 = -1097
    str_0 = "F[5n/0T"
    dict_0 = {str_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    str_0 = ""
    str_1 = "_ 6V{uF\x0c=^_``["
    set_0 = {str_1, str_0}
    dict_0 = {str_0: str_0, str_1: set_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    str_0 = '\rjyI"{]'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    int_0 = -674
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    complex_0 = -970.86806 - 192.6j
    module_1.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    bytes_0 = b"F\xcf7\xef\xd0\x8f\xa6\xab\x11\xbc\x0b\xdc\xb6\x03\xa4\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    int_0 = -1504
    complex_0 = -1846.2222 - 1024.619j
    module_0.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    str_0 = "q|+\\mf1o8R\\lo5\\"
    list_0 = [str_0, str_0]
    int_0 = 4873
    int_1 = 2791
    tuple_0 = (list_0, int_0, int_1)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    int_0 = 3039
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    str_0 = "wS+u$AOZ<"
    list_0 = []
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    str_0 = "OuBTU!\nY#NLQ=5x,W"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    bytes_0 = b"\xfe\xa3\x7f\x90\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    int_0 = 2582
    set_0 = {int_0, int_0, int_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4663():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4664():
    int_0 = 485
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    int_0 = -909
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    str_0 = "=Z$$8\\-S+cPB1_|;~"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    int_0 = -112
    dict_0 = {int_0: int_0}
    str_0 = "UP:T\\*j?"
    int_1 = 628
    tuple_0 = (str_0, int_1)
    tuple_1 = (dict_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    bytes_0 = b"\xc9\xac\xd6~\xbc\x067N\xd1f"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    bytes_0 = b"N\xce\x966\x90\x9eL\x93P"
    dict_0 = {}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    str_0 = ":}W05|[xe=9"
    none_type_0 = None
    str_1 = "|@'{7/t\\rJ7C"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


def test_case_4672():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4673():
    bytes_0 = b"r\x93\xb3\xb3\xb9A\x82\xa1\x19\xe0\xd1\xed\xe76@\xcd\xa9"
    set_0 = {bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    float_0 = -1072.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, bool_0, bool_0, bool_0]
    list_2 = [list_1, list_1, bool_0]
    tuple_0 = (list_2,)
    module_0.match(tuple_0, list_2)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    int_0 = -1792
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    str_0 = "\\[*r|`\tekUEl.oO_H:"
    float_0 = 172.4371
    dict_0 = {str_0: str_0, str_0: str_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    str_0 = ")I"
    tuple_0 = ()
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    none_type_0 = None
    int_0 = 1749
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    bytes_0 = b'\xf4\xe1\x7fl\xb9\x80YT\x0b\x0cI\x91\xc4r\xbe"\xca\x8bS\xd4'
    module_0.match(bytes_0, bytes_0)


def test_case_4681():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4682():
    float_0 = 2117.84144
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    bytes_0 = b"\xa6\x84%k\xd2\xaa\x17\xc9\x1c\x98\xd4t\xa0\xa7\x8d\xcd\xee\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    bytes_0 = b"\xe6C?\xd2lb\x91\x80\xe3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    str_0 = '2#GBV(X"M@|iY5Vk\\x\x0c'
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    str_0 = "\x0cYUP2DrblMQ=`b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    str_0 = "8\n>%+'ZNp*\\f)6d,"
    module_0.get_new_command(str_0, str_0)


def test_case_4688():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4689():
    float_0 = -2376.56267
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    str_0 = "!$oBUsaXfQF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    bytes_0 = b"u&\x99\x03\xd0\xcc\xf1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    str_0 = "\x0b*Wv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    float_0 = 1915.3538
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    bytes_0 = b"\xfc{\xd9\xb7\xe5\xea\x10\xb0\x18\xf3\x90\n\xde\x16\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_4696():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4697():
    bool_0 = True
    str_0 = ":[+"
    set_0 = {bool_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    int_0 = 947
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    int_0 = -1220
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    float_0 = 1369.21517
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    str_0 = "Yv<\\t.X.vCMB4F-"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    bytes_0 = b"\xec\xa2.B5\x82\xde\x9e\xeb\xed\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    int_0 = 10
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    float_0 = 2060.672172
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "`(\rK"
    dict_0 = {str_0: none_type_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    bytes_0 = b"\xa7\xfd\x9c\x1a\x14\x8fv\x9f\x03\xc2\xb1\x8e\xf9\x80<\xcfc\xf8\x94"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    str_0 = "\nu>_L|~]aU(|Co"
    str_1 = "`\r-#&M"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    str_0 = "[/P"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    int_0 = -597
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    bytes_0 = b"*r\x1a\x1c\xbd]\xef6v\x81\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    int_0 = 2302
    bool_0 = True
    set_0 = set()
    bool_1 = False
    tuple_0 = (int_0, bool_0, set_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    none_type_0 = None
    bytes_0 = b"t4P\xd6\xaf"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    str_0 = "``,]o@(V^W"
    tuple_0 = (str_0,)
    set_0 = {str_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    int_0 = 2035
    module_0.get_new_command(int_0, int_0)


def test_case_4717():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4718():
    str_0 = "=b;cNwj?1+DZ(?+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    int_0 = 778
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    complex_0 = -3531.06186 + 1113.165566j
    list_0 = [complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_4722():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4723():
    bytes_0 = b"vI!\xeb2\xe9\x8a\x1e\x1e\xb9!\xd5u\xe0\xf6\xb2@\x14\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    float_0 = -1363.6456
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    int_0 = -2222
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    str_0 = "tP#dt$sE1\\zBu_M|^"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    str_0 = "]y\\p0%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    int_0 = 2267
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    complex_0 = -815.27 + 2508.29j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    float_0 = -5143.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    int_0 = 916
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    bytes_0 = b"!\xaeV\xe4=\xa0\x1b\x13\xf7E\x8f"
    bool_0 = True
    dict_0 = {bool_0: bytes_0}
    tuple_0 = (bytes_0, bool_0, dict_0, dict_0)
    list_0 = [tuple_0, bytes_0, dict_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    float_0 = -52.387917
    bool_0 = True
    str_0 = "\tY00@IuD)kI"
    tuple_0 = (float_0, bool_0, str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    bytes_0 = b"\xb1\xbf\x93'"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    int_0 = -910
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    bytes_0 = b"\x82#\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bytes_0 = b"\xb3\x11\xf94[\xce\x17"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    bytes_0 = b"\xc9\x96\xc6q\xd0\xd5\xb6iH\xd4\xd3.\xde%\x9ck\x86\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    int_0 = 1538
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    complex_0 = -4589.169527 + 1072j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    float_0 = 1144.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = ""
    list_0 = [set_0, set_0, str_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    float_0 = 1441.389
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    str_0 = "IA8Rpc-cidnwSZHTjC"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    bytes_0 = b"\xaf\x04\xb7b'\xcc\xae"
    bool_0 = False
    list_0 = [bool_0, bytes_0, bool_0, bool_0]
    bytes_1 = b"FGC\xd7\xcf\xa5Jl@\x0e\xb0"
    tuple_0 = (bytes_0, bool_0, list_0, bytes_1)
    list_1 = [tuple_0, bool_0, list_0, bytes_1]
    tuple_1 = ()
    module_0.get_new_command(list_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    float_0 = 1280.1
    bytes_0 = b"J\xb7]\x1f>\xa0t\xd8C(u"
    list_0 = [float_0, bytes_0]
    tuple_0 = (float_0, float_0, bytes_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    float_0 = 2154.742689
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    int_0 = 622
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    tuple_0 = ()
    dict_0 = {}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    bytes_0 = b"\xa9tg*\xdb\xcb\x1c[\xce\x18\xd8\xe8\n\xb0\xa7#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    str_0 = "7C8]r3\x0bukKG;rNIc gP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    str_0 = "9"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    str_0 = "5}EE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0, list_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    dict_0 = {}
    int_0 = 4123
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    complex_0 = -53.94378 - 1000.238633j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    bytes_0 = b"\xd45\x14=\x9e\x8b\xa2PE\xe8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    int_0 = -2491
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    bytes_0 = b"\xa3I\xaaQe\x06\x8b\xe5K\x18\xe7O\xfd\x9cA\xe7\x85-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    float_0 = -2182.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    float_0 = 1885.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


def test_case_4771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4772():
    int_0 = 406
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    str_0 = "cO>7qOms[C@\nygvFmV"
    str_1 = "d^hY5)qz\n*px([0om\t6"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    complex_0 = 2484.5309 - 173.48j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    int_0 = 181
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    int_0 = -3016
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    bytes_0 = b"\xcc#\xda\xcdb'\x06\xfe\x16\xbb\n\x08\x9c\x9d\r\xa6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    int_0 = 965
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    bytes_0 = b"+\xab\xe1\x88\xdc\x01\x0f\xcc\xe8'\xf0;"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    int_0 = -1492
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    float_0 = -49.767
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    bytes_0 = b"6\xb3\xbb\xcc!\x7fdk\xae\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    bytes_0 = b"\xc6\x8cR\xb3\x7f\x11\xb6d\x95\xb8X\xec\xa1\xe6\xafw\xa7\x1f\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    int_0 = 86
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    complex_0 = 500.4 + 1876.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    int_0 = 3235
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    int_0 = 2593
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bytes_0 = b"\xc0\x0ct\xacnb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    bytes_0 = b"\xdf\xb4sr\xd51\x0c/P\x98\xef\xc3\x82\xde\xc4\xf1(\x1632"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    int_0 = -2108
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    bool_0 = True
    bytes_0 = b"n@U\x8a\xedCW\x83W\xb9"
    bool_1 = False
    bytes_1 = b"\xa1\xa9"
    tuple_0 = (bool_0, bytes_0, bool_1, bytes_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    complex_0 = 3139 + 308.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    bytes_0 = b"~GF\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    str_0 = "z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    float_0 = -1207.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    int_0 = -935
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    bytes_0 = b"\xe94\xb8\xfd/.\x82\x1f\r\x8b\x1b\x9cb\xb6\xb4 "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    int_0 = 690
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    int_0 = 1286
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    int_0 = -927
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    int_0 = 515
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_1}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    int_0 = 938
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    float_0 = 1919.34069
    bool_0 = False
    list_0 = [float_0, bool_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    bool_0 = True
    float_0 = -2993.9
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    str_0 = "zeVK"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    str_1 = "\nT\x0bjnZ73\r+Hy~{u`r"
    str_2 = "\x0cVBjU!8-ng!+"
    tuple_1 = (tuple_0, str_1, bool_0, str_2)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    bytes_0 = b",VS\xb0\x80\xf2t\xd1Q\x94X|\x84;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    int_0 = -1422
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_4810():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4811():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    bytes_0 = b"\xd1Ac\x8c \xf0\xe7S{H\xe7\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    tuple_0 = ()
    dict_0 = {}
    tuple_1 = (tuple_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    bytes_0 = b"4\xe2\xf2\x8d\x91[\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    int_0 = -2469
    module_0.match(int_0, int_0)


def test_case_4816():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4817():
    set_0 = set()
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    bytes_0 = b"\x15\x9c\xeb\xa0=\xb4\x95\x19\xfb\xa3\xcd\xa4\xb0,\xad\x94\xa9\xf8\x16"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    str_0 = "q57Pk\n\\0,Vw.T++tP"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    int_0 = -2799
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    str_0 = "ZaXs?(3!pb9VEh4+\\#K/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    str_0 = "0\rv\t#k^Y"
    module_0.match(str_0, str_0)


def test_case_4824():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4825():
    str_0 = "zRm54(\x0b69#.$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    complex_0 = 2369.654 - 805.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    bytes_0 = b"\xf8\x08\x86{\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    bytes_0 = b'\xe82"Y'
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    int_0 = 933
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    int_0 = -740
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    bytes_0 = b"\x1e"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    int_0 = -2440
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    float_0 = 3309.99332
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, float_0, dict_0, dict_0]
    module_0.match(list_0, float_0)


def test_case_4837():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4838():
    float_0 = -1569.54
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    bytes_0 = b"!$\xa5\x19\\h{\x0f=\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    float_0 = 2029.137
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


def test_case_4842():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4843():
    float_0 = -56.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    int_0 = -3368
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    bytes_0 = b"7;\xd2b\xca\xddx\xbeK%thR\xc5-WrK"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    str_0 = "4bu~gA2rX"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4847():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4848():
    bytes_0 = b"3\x1aq\xb1b\xe5M"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    tuple_0 = ()
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    str_0 = 'JD)\x0c/"\x0c/'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    bytes_0 = b'\x01\x1bq4b&"\x00\xf8\x9cq@Pq\xe4&;'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    int_0 = -1280
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    int_0 = 4429
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    str_0 = "/PaPV%? T"
    str_1 = "J`.`n[B.-&qk"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    bool_0 = True
    complex_0 = -1585.74829 - 2506.74j
    bool_1 = False
    tuple_0 = (bool_0, complex_0, bool_0, bool_1)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    set_0 = set()
    float_0 = 1108.0
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    complex_0 = 1337.43 - 1695.793649j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    dict_0 = {}
    bool_0 = True
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bytes_0 = b"\xa5\xe0x\x91\xb4BbS\xe4\xd6Y\x03\r\xc5!j\xdc\xd4\xa5\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    bool_0 = False
    tuple_0 = ()
    bool_1 = True
    tuple_1 = (bool_0, tuple_0, bool_0, bool_1)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    bytes_0 = b"\xa9\xf9\xfe)q\xa4\xc6\xc1\x8b\xa0s=H\x1c\xf4\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    str_0 = 'EUu*tT 0QEf8W"b('
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    bytes_0 = b"Y\xc7wn\xef\x95X\tg"
    str_0 = "&e0v4PV6xQ2*/P"
    tuple_0 = (bytes_0, bytes_0, str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    int_0 = -475
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bytes_0 = b"\x89\xdc$"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    int_0 = 1566
    str_0 = "!3V"
    bytes_0 = b"\xc9\xeb\xee\x15\x1eB&@\x85/=\x9a\n\xbf\xb5\xf4p\xf5"
    bool_0 = False
    tuple_0 = (int_0, str_0, bytes_0, bool_0)
    set_0 = {tuple_0, bool_0, bytes_0}
    bool_1 = False
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    int_0 = -2626
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    int_0 = -3135
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    float_0 = -4744.773
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    str_0 = "B\t=R"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4873():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4874():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0, bool_0, bool_0, bool_1}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    str_0 = "@J7QSStf\x0bSo\x0b$v&1F*wL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    float_0 = 158.870118
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    str_0 = "](4`b"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: bool_0, bool_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    int_0 = 1042
    dict_0 = {}
    tuple_0 = (int_0, dict_0, dict_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    dict_0 = {}
    complex_0 = 1857.66353 - 1464.533973j
    float_0 = 2198.3134
    str_0 = "\x0c*\t:kG|?]j`1\rb(_i,"
    list_0 = [dict_0, str_0]
    tuple_0 = (dict_0, complex_0, float_0, list_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    bytes_0 = b"+\xeb\xd1@F"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    int_0 = -1950
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_4882():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4883():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    int_0 = -171
    list_0 = []
    tuple_0 = (int_0, int_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    str_0 = "l=RK$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    bytes_0 = b"Lq\xac\xb3\x06\xdao\x1f\xbb\xd2\xa5\xc5QL\x19\x8d\xf2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    float_0 = 1223.22475
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    str_0 = "8?z#a3-"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    bool_0 = False
    str_0 = "net Z=*#M=E!U{u\r5q"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    int_0 = 2978
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    bool_0 = True
    bytes_0 = b"\xe60a\x86\x92\x04\x03\xd4\xe0s\xd5\x8a\xee"
    str_0 = "?J7Q~l.{Xfs"
    list_0 = [str_0, bytes_0, str_0]
    tuple_0 = (bool_0, bytes_0, str_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_4892():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4893():
    bytes_0 = b"\xcf8\xe3\xa7\x1c|\x0bN"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    float_0 = -1565.11
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    float_0 = 1200.608
    set_0 = {float_0, float_0}
    dict_0 = {float_0: set_0, float_0: set_0}
    tuple_0 = (set_0, dict_0, dict_0)
    bytes_0 = b"5\xf2"
    tuple_1 = (float_0, float_0, tuple_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    float_0 = -553.42627
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    int_0 = 2153
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    bytes_0 = b"\xdf\xaf\x1emK\x93\xc6\xa10\x87\xd0,\x90"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: dict_0}
    module_0.get_new_command(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_4900():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4901():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bytes_0 = b"F\xc4"
    module_0.get_new_command(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    int_0 = 4190
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_4904():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4905():
    bool_0 = True
    bytes_0 = b"3\xdd\xbe\x8d7\xfdY\xbc\xca\x15\xabb[\xfc\xf0\x15"
    dict_0 = {bytes_0: bool_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    int_0 = -1423
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    str_0 = "-$hGO<'9("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    int_0 = -1936
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    int_0 = -939
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    int_0 = 520
    module_0.match(int_0, int_0)


def test_case_4913():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4914():
    int_0 = 949
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    float_0 = -2377.0
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    int_0 = -5536
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    int_0 = -5216
    int_1 = -1633
    tuple_0 = (int_0, int_1, int_1)
    set_0 = {int_0, int_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    bytes_0 = b"\x9b\xb3E\xb3\xd4\xa0V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, set_0)


def test_case_4920():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4921():
    float_0 = 3371.0
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    object_0 = module_1.object()
    set_0 = {object_0}
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    int_0 = -1698
    dict_0 = {int_0: int_0}
    tuple_0 = (set_0, int_0, dict_0)
    tuple_1 = (set_0, tuple_0)
    list_0 = [tuple_0, dict_0, dict_0, bool_0]
    tuple_2 = (bool_0, tuple_1, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    str_0 = "e.Y"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    bytes_0 = b"\x92\r\xb6r\x95r\x12J\x88\x12v\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    bool_0 = False
    bytes_0 = b'YN9BY"C\xb26\x90\xcb\x0f'
    tuple_0 = (bytes_0, bool_0)
    tuple_1 = (bool_0, tuple_0, bytes_0)
    tuple_2 = (tuple_0,)
    set_0 = {tuple_1, tuple_0, bytes_0, tuple_0}
    list_0 = [tuple_0, tuple_2, set_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    str_0 = "bPw_+eX\r]/$pV#z8"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    bytes_0 = b"\xb1\xfa<\x81<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    str_0 = "/D"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    int_0 = -557
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0, set_0, int_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    str_0 = "?iQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    bytes_0 = b"#\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    int_0 = -2
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    int_0 = 2602
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    str_0 = ":"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    str_0 = 'P`hCF<@&"\tya7".+#01\''
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    int_0 = 162
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    bytes_0 = b"[@Pw\xc3\x95\xd3\x80\x94Q\x91\xcd\xc1+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    str_0 = "g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    int_0 = -1227
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    int_0 = 623
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    int_0 = -1977
    list_1 = [list_0, list_0, int_0]
    module_0.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    complex_0 = 2236.682807 + 3726.7j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    float_0 = 84.1378
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    bytes_0 = b"\xe5,s"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_4949():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4950():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    int_0 = 3072
    bytes_0 = b""
    set_0 = {int_0, int_0, bytes_0}
    list_0 = [set_0, int_0, set_0, bytes_0]
    dict_0 = {}
    tuple_0 = (set_0, list_0, dict_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    str_0 = "K  ^ #A$7r=mGWzA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    int_0 = -107
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    bytes_0 = b"\x0b\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    bool_0 = False
    float_0 = -1175.529
    dict_0 = {bool_0: bool_0, bool_0: bool_0, float_0: bool_0, float_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    complex_0 = 3600.875 + 283.591116j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    str_0 = "ZjAo|\rEz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    float_0 = 361.0752
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    bytes_0 = b'Ws^\x8b\x9b"\xf1'
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4960():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4961():
    str_0 = "w7t2T>6"
    str_1 = '.s4w{;Z3l"[!jIm5bs'
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    bytes_0 = b'4+Zv\x93\xd3"m\xa1\xae6>\xc8\xe3'
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0, bool_0: bool_0}
    int_0 = -302
    list_0 = [dict_0, int_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    int_0 = -2647
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    int_0 = -659
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    int_0 = 3755
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    int_0 = 2383
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    bytes_0 = b"us\x06"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    bytes_0 = b"\xc5\xa0\xb3\x8bmX\xa6\xff\x9az"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    bytes_0 = b"\xf2{\xab\x14\x97a\x8b\xe9\x98"
    float_0 = 2134.2
    tuple_0 = (bytes_0, float_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    str_0 = "'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    str_0 = 'qw,"ca@G" Cu$3lU0D=c'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    str_0 = "7^V:XXmIIOJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    int_0 = -4101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    str_0 = "H[Z\\Ya"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    bytes_0 = b"-tc\xb2\xa59"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    bytes_0 = b"X\xa3.9\xebg\xc7p\x7f\xcf\x06S\xfa\xd3\x8aj^"
    float_0 = -714.07
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    dict_0 = {}
    int_0 = 1866
    bytes_0 = b"\x9b*\xdeQc\xea\xbe\xa4.\x8e\xb7\xcc\x9a\x94"
    bytes_1 = b"\xebX\xdaa4\xe0Q\xc9a\xd3\x02\x10\x84\x02\x875w;br"
    tuple_0 = (dict_0, int_0, bytes_0, bytes_1)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    float_0 = 2023.89
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    str_0 = "2U0Cz]zop9A$1'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    str_0 = "oky)#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    bytes_0 = b"G\xa4n\xa5\xfa\xb3\x8c\xde\xf5E\x18\xb5p\xaf\x15\xa2\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    bytes_0 = b"\x16\xda\x1709=w\xd5>-\xf6d"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4985():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4986():
    float_0 = 2128.9
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    str_0 = '3Hh(u~of_"m@Me'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    int_0 = 1727
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    float_0 = 1669.709
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    int_0 = 2610
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    float_0 = -3890.782
    str_0 = "qcyU\nMWTH:h"
    tuple_0 = (str_0,)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    bytes_0 = b"\xa5\xa1\xc3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    complex_0 = 729.7 - 3710.1955j
    bytes_0 = b'";\xd4\xa2\x92/I\x04\xb6jd\xe0\x92\xbb'
    bool_0 = False
    tuple_0 = (complex_0, complex_0, bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    int_0 = 902
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    int_0 = 1425
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    int_0 = 2755
    str_0 = ""
    float_0 = -1437.67
    tuple_0 = (int_0, int_0, str_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    bytes_0 = b"\xd1\x8f\x1c\x14\xceRQ\x04B\xbb"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    bytes_0 = b"\x08<\xd6\x15f\xa1("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    str_0 = ".[QV`X.@WV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    dict_0 = {}
    set_0 = set()
    tuple_0 = (dict_0, set_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    complex_0 = 2106.33 - 246j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    bytes_0 = b">z\xb1\xb1\nu\xa1\xc7\x93\x14R\xe1~P"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    int_0 = 2265
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    str_0 = "8/#Wa\x0bLef:iZW}@t"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    int_0 = 205
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    int_0 = -3165
    list_0 = [int_0, int_0]
    str_0 = "pZ*?*"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    bytes_0 = b"\x1f\t\xbf"
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    str_0 = "w-r)Zvh!nwtG<X<5A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    str_0 = "JwENS%cAKRqSi0\\$/"
    tuple_0 = (str_0, str_0, str_0, str_0)
    float_0 = 917.140641
    bool_0 = False
    tuple_1 = (tuple_0, float_0, float_0, bool_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    int_0 = -199
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    float_0 = 1211.3265
    list_0 = [float_0]
    module_0.match(float_0, list_0)


def test_case_5017():
    pass


def test_case_5018():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5019():
    str_0 = "6DQNn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    str_0 = "1PKM^mdtm1c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    str_0 = "G[Uq\n[J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    str_0 = "G!``3;y LKU95bH(G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    int_0 = -374
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    int_0 = 189
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    bytes_0 = b"\xde\xca\xf8\x1c\xf5'\xea\x83\x08\x17d"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    int_0 = -315
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    int_0 = -2835
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    int_0 = -51
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    str_0 = "W{lOC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    int_0 = -601
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    bytes_0 = b"]g\xca\xc0&\x98(\x90d\xb4\xdbZ\x85s\x97\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    int_0 = -1266
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    str_0 = " "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    int_0 = -2599
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    bytes_0 = b"\x10C7n\xbb\x90\xe1\x12Q\x11\xca\x9a[\x04\x89]\x80\xa3\xf3"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    int_0 = 519
    bool_0 = True
    str_0 = "mP(Ybmp\x0cec"
    bytes_0 = b"+\xe0q\xc5\xfc\xb8\xbeI\xa0\xdc\xd2m"
    int_1 = 2185
    tuple_0 = (bool_0, str_0, bytes_0, int_1)
    int_2 = -1685
    tuple_1 = (int_0, tuple_0, int_2)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    int_0 = 1146
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bool_0, bool_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    float_0 = 4592.594
    bytes_0 = b"\x10<\x80\xa8De\xd2D\xd5\\\xe6\xd0P"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    float_0 = -1967.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    bool_0 = False
    bytes_0 = b"\x0c"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    float_0 = 1524.2935
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    bytes_0 = b"\xcf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    bytes_0 = b"5#\xbdQ\x8d\x912\xf0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    bytes_0 = b"\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    str_0 = "d[)/&"
    int_0 = 1526
    module_0.match(str_0, int_0)


def test_case_5050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5051():
    str_0 = "A.JsHE\\xU~J\t"
    str_1 = ""
    str_2 = '\x0b5j"K}a*@>l1'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    bytes_0 = b"\xc9\x9d\xb0\xd4\xe9Y|]\xdfh "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    float_0 = 4571.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    int_0 = 2281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    int_0 = -2202
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    int_0 = -5066
    module_0.match(int_0, int_0)


def test_case_5058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5059():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    str_0 = "{"
    module_0.get_new_command(str_0, str_0)


def test_case_5061():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5062():
    float_0 = -1245.91594
    dict_0 = {float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    none_type_0 = None
    int_0 = 2156
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    int_0 = 1454
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_5065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5066():
    str_0 = "LAJ%M}ye'>zs|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    int_0 = 1996
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    bytes_0 = b"\x0cl\x89\r\x84"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    int_0 = 20
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    float_0 = -2705.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    bytes_0 = b"%&V\xd1ZAU\xe6\x17\x98\xc8\xe3Jf\xa3UL\xe2"
    str_0 = "E@3U7[2sWhHy4QbK"
    dict_0 = {str_0: bytes_0, str_0: bytes_0}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    str_0 = "f.\x0cb[]m8ma .&Y\\[z@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    bytes_0 = b"\xabl\xa53\xa8{\xfb\xf0\xb2m\x08"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    bool_0 = True
    bytes_0 = b"Z\x17\xffQ\xc6\x009\xd8\xc1lF\x0c"
    tuple_0 = (bool_0, bytes_0, bytes_0)
    dict_0 = {tuple_0: tuple_0, bytes_0: tuple_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    str_0 = "\t"
    int_0 = 997
    tuple_0 = (str_0, int_0)
    bool_0 = False
    dict_1 = {object_0: tuple_0, object_0: tuple_0, bool_0: dict_0, object_0: int_0}
    module_0.match(dict_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    int_0 = -587
    module_0.match(int_0, int_0)


def test_case_5079():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5080():
    bool_0 = True
    int_0 = 440
    tuple_0 = ()
    tuple_1 = (bool_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    str_0 = "8InA6\\9"
    tuple_0 = (set_0, str_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    float_0 = 2782.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, set_0, bool_0]
    list_1 = [list_0, list_0, set_0]
    module_1.object(*list_1, **list_1)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    bytes_0 = b""
    float_0 = -165.0
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    list_0 = []
    str_0 = "pYC#Pn^Hj"
    str_1 = '"H=2+mV4*B_K("iW'
    str_2 = "-y0F?&d\tc$~R!hf~=yu"
    str_3 = "10@sa93#1'\\"
    dict_0 = {str_0: list_0, str_1: str_1, str_2: str_2, str_3: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    object_0 = module_1.object()
    object_1 = module_1.object()
    bytes_0 = b"h\xee\x9e)\x88a\x925\x10a\x1e\tn\x1c\x03d"
    list_0 = [bytes_0]
    tuple_0 = (object_0, list_0)
    dict_0 = {
        object_1: object_1,
        bytes_0: bytes_0,
        object_0: object_0,
        bytes_0: tuple_0,
    }
    dict_1 = {
        object_0: object_0,
        object_0: object_0,
        object_0: dict_0,
        object_0: bytes_0,
    }
    none_type_0 = None
    module_0.match(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    bytes_0 = b"q\xbcfS"
    bytes_1 = b"\xd4\xd5"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    bool_0 = False
    str_0 = "8\x0b7w\r}\roQQ"
    list_0 = [bool_0, str_0, bool_0, str_0]
    bool_1 = True
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    str_0 = 'HX\\#b@]D&2P<b"'
    module_0.match(str_0, str_0)


def test_case_5093():
    object_0 = module_1.object()


def test_case_5094():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5095():
    str_0 = '\x0cguS<:(pz,Kd|5\\?Bs"I'
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    int_0 = -4299
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    int_0 = -485
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    bytes_0 = b"u\xff\xef^\x1b\x0c_\x1e-\x8d\xb7\x11b\xc5\xdc\xb3t"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    complex_0 = -3317.052212 + 760.895j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    str_0 = "7dY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    str_0 = "r\\zY1\x0b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    int_0 = -188
    complex_0 = 1109 - 1251.4j
    bool_0 = True
    dict_0 = {complex_0: bool_0, bool_0: bool_0}
    int_1 = -412
    tuple_0 = (int_0, complex_0, dict_0, int_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    float_0 = 1089.5343
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    bytes_0 = b"\x0e\xd9\x9aZ\xccZ\x7f\xf2\x95"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    str_0 = "(N;)Xn-p,Kl6fB"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    float_0 = -4745.905025
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    str_0 = "J_v<\\"
    set_0 = {str_0, str_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    int_0 = -2279
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    complex_0 = -144.5 - 3566.59j
    list_0 = [complex_0, complex_0]
    float_0 = -707.13
    bool_0 = False
    dict_0 = {complex_0: float_0, float_0: bool_0}
    bool_1 = False
    tuple_0 = (dict_0, bool_1, dict_0)
    tuple_1 = (list_0, float_0, bool_0, tuple_0)
    bytes_0 = b"\x05\x92aK\x8eH\x9du\xc0\r\xa1\xca\xaf\xd7r\x03\x98\x10"
    tuple_2 = (tuple_1, complex_0, bool_1, bytes_0)
    module_0.get_new_command(tuple_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    list_0 = []
    list_1 = [list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    str_0 = "#_G\\crOz.5K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    bytes_0 = b"V\x1a0\xc9r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    bytes_0 = b"\x01\x92\xc9\x8d\x80(\x8a:\x89\x17\xbd\x1dV"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    float_0 = -818.6464
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    float_0 = 326.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1, bool_0: bool_0}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    bytes_0 = b"\xc8\xb1\xd8\x01T;\x16\x96\x81\x03\x1aA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    str_0 = "$#Lwkvg8uE\n$"
    list_0 = [str_0]
    list_1 = [str_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    bytes_0 = b"w7\xac0\xc3\xcc\xca\xa7\x18\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    str_0 = "Brc\x0cW"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    str_0 = ":!3"
    float_0 = 435.66
    bytes_0 = b"\x16\x83O\xe7\xa5N(\xbeb\x1f\x19\xd8\xf9"
    tuple_0 = (str_0, float_0, float_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    float_0 = -1836.9441
    set_0 = {float_0}
    list_0 = [set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    str_0 = "wc{[++Pw"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    int_0 = 4276
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    complex_0 = -2084.601133 - 1169.5434j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    bytes_0 = b"\x1c\x9d\xb1\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    str_0 = "r?g9!r{I&'0-bIg6"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    int_0 = -3156
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    str_0 = "DnK)0.U"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (str_0, set_0, set_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    bytes_0 = b"!\x8fa\x84\x93Z\x01\xb37\xc6\xb0\xa0t\xae\xc7\x84\x85*"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    str_0 = ";\rLpz(8?u\t*\ng1=%v>4N"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    str_0 = "h!I\rTquR;Vt1"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    int_0 = 1153
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    int_0 = -2030
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    list_0 = []
    str_0 = "sI1_BS'UNs8"
    str_1 = "5~Y3xv&_fK"
    bool_0 = False
    str_2 = "Z\tiF/sR9*]!7y*^.':>3"
    dict_0 = {str_0: str_0, str_1: list_0, str_0: bool_0, str_2: str_2}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    float_0 = 2934.4089
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    int_0 = 892
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    str_0 = "CC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    bytes_0 = b"\r;\x85\xaa`\x9b\x8cO\xabR\x08\xcd\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    int_0 = -202
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    str_0 = "6G%XMH4uN{iwRNi?w\rA%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    complex_0 = 1383.17036 - 1637.996j
    set_0 = {complex_0, complex_0, complex_0}
    dict_0 = {complex_0: set_0, complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    bytes_0 = b"\xc2m\xe4\x05\xb7 ]\xadj\xab\xad\x98\x03\x073:\xef\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    complex_0 = 3920.76 + 105.893j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    float_0 = -885.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    str_0 = "BA9}z l\t8)fZ/dm-&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    int_0 = -2306
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    float_0 = 344.51148
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    float_0 = -2329.23406
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    int_0 = 189
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    str_0 = ".eOd!~g_OB5Ng/\"'"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    str_0 = "UQz\t/ZT\\Zz$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    bytes_0 = b"}S\xfd\x1fu\x16\xb0\xf9zNK\xe9\x9f?v\x99~"
    set_0 = {bytes_0, bytes_0}
    float_0 = -335.6824
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    bytes_0 = b"\x1b\xb8\xee\x81^\x8b\xb0\xd6\xe6\xea\x14\x80\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    float_0 = -189.623796
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = []
    list_1 = [set_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    bool_0 = False
    str_0 = "c*+QS^n}|X)g"
    list_0 = [bool_0, bool_0, str_0, str_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    str_0 = "!d\ria+ii)k#LQyLIWv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    int_0 = -342
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    bytes_0 = b"\x0b\xf0\xcdu@\xf6\xf1\xd0E:N\xf9\x13\x87\xaaSI\x11\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    bytes_0 = b"\xf8\xcfu\x0f\x9c\xbe\xb4A\x00r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    str_0 = '$m]"yTj(sEiWTS'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    int_0 = -2528
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    str_0 = '2T\t6gZ~X|1,"6@'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    bytes_0 = b":m\x0b:\x0e]\xbej"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0, bool_0: bool_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    str_0 = 'K_\r[")Cs(Szdi1j'
    none_type_0 = None
    str_1 = "xy-2T#fg^& :1UL+"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    str_0 = "(5[\x0c>);C-X.L\n)B2\t"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    bytes_0 = b"\x84J("
    dict_0 = {}
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, dict_0, list_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    int_0 = -1548
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    list_0 = [set_0, tuple_0, set_0]
    str_0 = "W6b3\"@'"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    str_0 = "mh)J&W#eB/m,I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    int_0 = -2171
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    str_0 = "\n-e\tiNPf6N}2"
    str_1 = "o J<Hl.>\rA"
    str_2 = ";nAL \\Yt"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    float_0 = -402.069012
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    int_0 = 3053
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    str_0 = ")8"
    bytes_0 = b"\xda\x7f\x9c\xbc\t+(\\\tI\xcf>\x0f\xaf\x89"
    set_0 = {str_0, str_0, str_0, bytes_0}
    list_0 = [str_0, set_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    int_0 = -2684
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    str_0 = "\tki"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    int_0 = 4252
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    int_0 = 2691
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    int_0 = -89
    module_0.match(int_0, int_0)


def test_case_5190():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5191():
    str_0 = "Q/lW>ajmk=%!:3"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    bytes_0 = b"\xecDV\\\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    int_0 = -1771
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_5195():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5196():
    bytes_0 = b"gp\xfd\xf7\xe3\xde|\xf7;\xa8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    bytes_0 = b"\x82"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    int_0 = -911
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    int_0 = -1409
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    int_0 = 4358
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    bytes_0 = b"\xb5\x9bB\xadWv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    bytes_0 = b"\xa1{\xb1\x17\xd9\x06\xcc]\x9f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    str_0 = "5/75{X>r8U\n/IZ1w_hQ6"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    bytes_0 = b"\xdeV\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    float_0 = -978.8887
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    int_0 = -1012
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    float_0 = -2359.36
    str_0 = "}\\2J"
    list_0 = [str_0]
    tuple_0 = (float_0, str_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    bytes_0 = b"\xfb#5l\xec\xc8Y\xc0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    str_0 = "T5aRvJd)\nw&PiFK5V$y"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    float_0 = -6317.4845
    object_0 = module_1.object()
    tuple_0 = (float_0, object_0)
    list_0 = [tuple_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    str_0 = "vN%[\x0b^Y;<qE\t2@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    float_0 = 519.182
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    str_0 = "1rdd@\x0c)FNo$kLd/\x0b;8"
    set_0 = {str_0, str_0, str_0}
    int_0 = 3987
    tuple_0 = (set_0, int_0, int_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    list_0 = []
    tuple_0 = (list_0, list_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    str_0 = "c7o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    int_0 = -998
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


def test_case_5219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5220():
    int_0 = -2210
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    int_0 = -2003
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    float_0 = 939.36306
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    str_0 = "_2M!3AoD{'4iHY>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    int_0 = -423
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    int_0 = 1559
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    int_0 = -695
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    int_0 = -105
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    bytes_0 = b"\xdd\xd0\x10\xd8Q\x80\x90]p,\x9c"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


def test_case_5229():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5230():
    str_0 = "jN/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    str_0 = "FMkZ!=Bol A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    int_0 = 3175
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_5233():
    pass


def test_case_5234():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5235():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    complex_0 = -866.56 - 4941.822j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    bytes_0 = b"x=f9}p,\xa9]\x88W\xa8\xec\x86\x1aq\x05\xbe\x07\x97"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    int_0 = -2428
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_5240():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5241():
    float_0 = 2777.86
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    int_0 = -3233
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    str_0 = "\tK\\GfB8O\x0b1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    none_type_0 = None
    bytes_0 = b"\xc1l\xf3"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    str_0 = "7=jfx"
    set_0 = {str_0, str_0, str_0, str_0}
    bytes_0 = b"="
    tuple_0 = (set_0, bytes_0)
    module_0.match(tuple_0, set_0)


def test_case_5248():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5249():
    float_0 = -1016.0343
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    bool_0 = True
    bytes_0 = b"\x89\xaad\xf2d\x02\xfa\xfa|\xcc\nWn"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    float_0 = -1297.13165
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    none_type_0 = None
    bytes_0 = b'\x99.\xb4"\xb2\x13f\x19\x0b\xf5+K\xf3\xaeF\xb3^\xd6'
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    bytes_0 = b"\xads"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    int_0 = 2024
    bool_0 = False
    dict_0 = {int_0: int_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    float_0 = 2410.5259
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    bytes_0 = b"\xaf\xe2\x962\x14\x9f\xad\x10\xde\x03\x1av\xad\xb1\xd3\x0e7\x95\x0e"
    int_0 = -3932
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    bytes_0 = b"\x83\x01\xd4\xb0)\xdb\xd9\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    bytes_0 = b"iE\xa3\xaa#wi\xd2=\xde\xc1:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    str_0 = "R$Y+%\tm^J4EC*_"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    str_0 = ""
    set_0 = {str_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    bool_0 = True
    int_0 = -3903
    dict_0 = {bool_0: bool_0, int_0: bool_0, bool_0: int_0, int_0: bool_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    bytes_0 = b"`\xe5r\x82\xa9PJ\xa2\xe2\xfb\xc69\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    bool_0 = False
    dict_0 = {}
    bool_1 = True
    list_0 = [bool_1, bool_1, dict_0, dict_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    str_0 = "gWXy:Ey[)-^-"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    complex_0 = 3529.7 - 464j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    none_type_0 = None
    bytes_0 = b""
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    float_0 = 57.11075
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    bytes_0 = b"^,\xf2\xbc( j\x87zR\x13\xe7P\xfc\xd4"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    str_0 = "6%FLP6aR#jyY&_-z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    bytes_0 = b"{\x91\xe8!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    none_type_0 = None
    str_0 = "0a*f!Ouy$\t"
    list_0 = [str_0, none_type_0, none_type_0]
    float_0 = 3964.94
    bytes_0 = b"t"
    bytes_1 = b"s\x0fnc\xf6R\xd5.}\xea\x16\x17\x89\xf4v/Y#Y<"
    tuple_0 = (list_0, float_0, bytes_0, bytes_1)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    int_0 = -955
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    int_0 = -2546
    str_0 = "foF"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    float_0 = -2046.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    bytes_0 = b"}[\xd4\xbd\xfa\x86\xd01v\xef4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    bytes_0 = b"W2\x19\xb90\xe9\xc0\xacI \xbb\xbb\x9ctk\x12\xef(9\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    bytes_0 = b"\xe3\x0f_\xbcy5\xe4\x19\x808=3{>C \x15"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


def test_case_5282():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5283():
    none_type_0 = None
    int_0 = 1660
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    str_0 = '"'
    module_0.match(str_0, str_0)


def test_case_5285():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5286():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    int_0 = 1928
    module_0.match(int_0, int_0)


def test_case_5290():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5291():
    bool_0 = False
    str_0 = "kqIA\x0b{,p"
    str_1 = "Rob\r2Zj"
    dict_0 = {str_0: bool_0, str_1: bool_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    bytes_0 = b"3`\x1e\xf8\xceK\xf6\xce\xf6\\E\xe3\xae\xa9,\x7fJ\x8a\xc8"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    float_0 = 2803.75
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    int_0 = -2571
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    float_0 = 162.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    int_0 = 1275
    list_0 = [int_0]
    module_1.object(*list_0)


def test_case_5299():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5300():
    str_0 = "Y f%owV+~)\r"
    tuple_0 = ()
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    str_0 = "1\t[[mO\n7t\r"
    str_1 = "}}6"
    str_2 = "uPZip"
    float_0 = -1637.0
    dict_0 = {str_0: str_0, str_1: bool_0, str_2: str_0, str_0: float_0}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    bool_0 = True
    str_0 = "moX)stp3 +>:hA:"
    set_0 = {bool_0, bool_0, str_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    bytes_0 = b"\xa3\xb8\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    float_0 = -203.52327
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    str_0 = '@nJ{m"fo@i#6It:'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    int_0 = -2589
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    int_0 = -1075
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    int_0 = -237
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    int_0 = 180
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_5312():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5313():
    int_0 = 1146
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    str_0 = ".{>`/S\t"
    set_0 = {str_0, str_0}
    bool_0 = True
    tuple_0 = (str_0, set_0, set_0, bool_0)
    list_0 = [tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    bytes_0 = b"\xeb\x0c\x7f\xd3ez\x96\xcb\xdb/\x96\x10"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5318():
    complex_0 = 1620.78206 - 2174.4j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    int_0 = 518
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    int_0 = 2449
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    str_0 = '"'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = {str_0: str_0, str_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    bytes_0 = b"@r\x19\xb0Q\xe4&\x02i\xd6\xa4\xa2\xe7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    int_0 = 284
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    int_0 = 460
    module_0.get_new_command(int_0, int_0)


def test_case_5325():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5326():
    int_0 = -1400
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    bytes_0 = b"\xdc\x95\xde"
    dict_0 = {}
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: dict_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    int_0 = -3947
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_5329():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5330():
    int_0 = 783
    module_0.get_new_command(int_0, int_0)


def test_case_5331():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5332():
    str_0 = "\nr&eY 3n@DKP,jXqV"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = {str_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    bytes_0 = b"\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    str_0 = "sm0\"_z'ndoj?FKl\x0cXl"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    int_0 = -367
    set_0 = {int_0, int_0, int_0}
    list_0 = [int_0, int_0]
    tuple_0 = (set_0, list_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    bytes_0 = b"OvL\xac\xabBo"
    complex_0 = 369.7 - 2567.83319j
    str_0 = "2)9ae68s{gL&/s$EA+3_"
    tuple_0 = (bytes_0, complex_0, str_0, complex_0)
    dict_0 = {tuple_0: bytes_0, str_0: bytes_0, bytes_0: bytes_0, complex_0: tuple_0}
    list_0 = [dict_0, complex_0, dict_0, tuple_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    bytes_0 = b"\xd2\x91\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    int_0 = 198
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    float_0 = 2855.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    bytes_0 = b",\xb3~\x97 d\x83\xa9\x95\xe4\xa4\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    bytes_0 = b"\xe1\x0e$\xc2\xd5\xceQ"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    bool_0 = True
    float_0 = 3583.11017
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, float_0: bool_0}
    list_0 = [dict_0, dict_0, bool_0]
    bool_1 = False
    tuple_0 = (list_0, bool_0, bool_1)
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    int_0 = 1164
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    int_0 = -1211
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    bytes_0 = b"K\xa5.p\x84\xc4QP\xf4I"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    bytes_0 = b"\xa0*\xc3\xa2 "
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    bytes_0 = b"S\xc7\xb9\xca\x9b-x\x11\x03q5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    int_0 = -1942
    str_0 = 'f-ac@f6$3f+1`fb/"'
    list_0 = [int_0, int_0, str_0]
    tuple_0 = (int_0, int_0, str_0, list_0)
    list_1 = [tuple_0, str_0, int_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    float_0 = 1025.6
    list_0 = []
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    bytes_0 = b"\x0f\x02\xbdS8u/\x02\xba\xa2=\x94\xc6\xeb\xf6\x80\xf2\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    bytes_0 = b"\xba\xc4\xf52\xc4r>\x83U\xd5\xc9\xa9:NA\x9e\xdc)"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    bytes_0 = b"h\x00\x82\x10\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    complex_0 = 1983 - 211.15j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    tuple_0 = (complex_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    float_0 = 486.3739
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


def test_case_5359():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5360():
    bytes_0 = b"\xa8\xb69\xbdo\xed\x81\xdf"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    int_0 = 3211
    module_0.match(int_0, int_0)


def test_case_5362():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5363():
    bytes_0 = b"\xb6qRV\x8b<]\x9b+\xb31\xf1\n\xe0`\xd1I\x14\xc1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    bytes_0 = b"\x99\xc7+:\x1e\t\xae\x95\xb4rr\xd7"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    bool_0 = True
    int_0 = 1634
    set_0 = {bool_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    int_0 = 4349
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    int_0 = 1779
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    int_0 = 170
    float_0 = 2888.338
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    bytes_0 = b'q\n;\x7f\x10\x0e\xc9"j\xfb\xf9'
    module_0.match(bytes_0, bytes_0)


def test_case_5371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5372():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_5373():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5374():
    int_0 = 277
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    int_0 = 708
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    int_0 = 341
    str_0 = "UCOI>;Ivnd;"
    dict_0 = {int_0: str_0, int_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    str_0 = "5\\{ddB$>J!G#tM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    bytes_0 = b"\xdf\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    complex_0 = 445.8859 + 1477.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    bytes_0 = b"i\xe2\x9b\xe2Ao\xf5\x1ev\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    float_0 = 915.348965
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    bytes_0 = b'\xd30&\x06sw\xc6\xda^%9L{\xac\xc1"\xbc\xd6\n'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


def test_case_5384():
    pass


def test_case_5385():
    pass


def test_case_5386():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5387():
    str_0 = "XQ</"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    float_0 = -891.81
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    str_0 = 'Pyv_ai5e:+@m2]D23"='
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    str_0 = '?i5|;2"(2^I'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    int_0 = 362
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = ()
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    float_0 = -1986.0
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    bytes_0 = b"m\xc4\xf2@\x8e\x042\xe4f>\\+3r\x94Rd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    int_0 = 1556
    module_0.match(int_0, int_0)


def test_case_5399():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5400():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0, bool_0)
    module_0.match(tuple_0, list_0)


def test_case_5401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5402():
    int_0 = -3685
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    complex_0 = 421.56486 + 1121.8796j
    list_0 = [complex_0]
    module_1.object(*list_0, **complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    bytes_0 = b"c \xab\xdf\xe2y\x1c\x01\xefB\x90\xfb\xa3\xce\xe8W|\x8f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    int_0 = -1413
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    bytes_0 = b"\x9e\x13"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    int_0 = -1056
    set_0 = {int_0}
    module_0.match(set_0, set_0)


def test_case_5409():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5410():
    bytes_0 = b"\xfc\x8bWo<\t"
    module_0.match(bytes_0, bytes_0)


def test_case_5411():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5412():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    str_0 = "b-|sv<j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    bytes_0 = b"\xe5\n7\xa1\xce"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    dict_1 = {object_0: dict_0}
    module_0.get_new_command(dict_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    int_0 = 1772
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    float_0 = -44.311006
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    str_0 = "h j\n|4q1'FUYWUsCCS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    int_0 = 101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    str_0 = "_%`%uc"
    list_0 = [str_0, str_0, str_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    str_0 = '1rM8z"e0u`Fy)Q'
    str_1 = "@SVO+T"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    bytes_0 = b"\xdd\xeb\xbb\x93\x1f[\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    none_type_0 = None
    str_0 = "2<6!\\}gU"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    bool_0 = True
    str_0 = "VVB"
    tuple_0 = (str_0, str_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    float_0 = 2291.31
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    str_0 = "7\rD)jecM;P]f-R}qSV\t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    bytes_0 = b"\x14\xd0\xa5\xd9d\xa1"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    complex_0 = -2481.3781 - 308j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    int_0 = 188
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    str_0 = "}p|UWi{qvrk|PkZCa"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    bytes_0 = b'\x83\xa5\x0f\xfc\x16\xcb~1\x83\x13\x9e3\x9c*\xd7\x03\xefH"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    bytes_0 = b"\xfd(A\xabC\xcf\x82`%#M\x81\x97&\x1d\xd3\x9f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    int_0 = 1335
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    str_0 = '`e@">Ub'
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    str_0 = "kq?'C>Dc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    int_0 = 2174
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    tuple_0 = ()
    bytes_0 = b"&Ml\xa0\xcf\x87\xde\xe4c\xedLD\xb6\x9dY\xba\xec\xf3"
    bytes_1 = b"\xff\xbc\x12}\xe2"
    dict_0 = {tuple_0: tuple_0, bytes_0: tuple_0, bytes_0: bytes_0, bytes_1: bytes_1}
    module_0.get_new_command(tuple_0, dict_0)


def test_case_5439():
    pass


def test_case_5440():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5441():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "|j&=\rV+eg&c="
    str_1 = "?-/D =\x0b v"
    dict_0 = {str_0: list_0, str_1: str_0, str_1: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    bytes_0 = b"\xd9\xd2\x7fEO"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    str_0 = "Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    bytes_0 = b"5c\xbe\xd4\xc5\xd7\xd6A\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    int_0 = 937
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    int_0 = -2613
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    float_0 = 2395.75721
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    bytes_0 = b"\xc0vs\xd66\x85Y\xcd\xa2\x89<2^%R\xd6Y\xf7\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    float_0 = -1542.73883
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    complex_0 = 3825.136 - 435.464641j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    object_0 = module_1.object()
    str_0 = "{Rf"
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    int_0 = 3406
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    bytes_0 = b"\x96\xa6\xc6\x16\xa8\x9a\xf5\x9c\x9bP\xc9}r(gW"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    int_0 = 663
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    bytes_0 = b"\x8en#N\xfe\xa8k\x88X"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    str_0 = '*(?"MFg1_+e,%9A'
    str_1 = ">J\x0cQmaU\"'>7?R$a"
    str_2 = "F"
    str_3 = "E[\rzMy["
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_3: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    float_0 = 995.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    object_0 = module_1.object()
    object_1 = module_1.object()
    dict_0 = {object_1: object_1, object_0: object_1, object_1: object_0}
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    int_0 = 595
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    int_0 = 392
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    str_0 = "bX%zI-H#Ln#~"
    float_0 = -119.7
    str_1 = "Q\x0c-lR9<RbG#qJ,"
    tuple_0 = (float_0, str_1)
    set_0 = set()
    tuple_1 = (str_0, tuple_0, set_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    int_0 = 689
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    bytes_0 = b"2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    bytes_0 = b"?\xb299*\x8e1\xe3\x0bJ0\xd0"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    str_0 = "nxD\nLNWnEl ?1GG*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5468():
    pass


def test_case_5469():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5470():
    str_0 = "hK->`,r$qlpXD?k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    int_0 = 4276
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    bytes_0 = b'\xcf\x1d4\xfdYZ"\x13h\n:g\xb2\x08\xfd6\xfa'
    module_1.object(*bytes_0)


def test_case_5474():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5475():
    int_0 = 592
    float_0 = -1548.38985
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    float_0 = 388.8935
    set_0 = {float_0}
    list_0 = [set_0, set_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    str_0 = "TRcg|kc*VVJFx"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    complex_0 = -1368.097868 - 350.301j
    float_0 = 195.007
    dict_0 = {complex_0: float_0}
    module_0.get_new_command(dict_0, complex_0)


def test_case_5479():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5480():
    bytes_0 = b"\xf3}lR@=+6~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    bytes_0 = b"\xc4\xfaG\xf50\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    int_0 = -279
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    bool_0 = False
    bool_1 = True
    bytes_0 = b"\xc4o+\n\xb0\x00T\xc8g\x0e\xcdF"
    dict_0 = {bool_0: bool_0, bool_0: bool_1, bool_1: bytes_0}
    list_0 = [dict_0]
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    int_0 = 1510
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    int_0 = 2818
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    int_0 = -98
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    int_0 = -2976
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    bytes_0 = b",\x97E\x12\xd5=N\xe9\xbe\xd2u\xaf\xc3\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    float_0 = 1480.2
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    int_0 = 1497
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    bytes_0 = b"\x04\xa5x#2\xf6\xb8\xfbE\t\xa1E\x7f\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    int_0 = 124
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    bool_0 = False
    int_0 = -324
    tuple_0 = ()
    set_0 = set()
    tuple_1 = (bool_0, int_0, tuple_0, set_0)
    dict_0 = {bool_0: int_0}
    tuple_2 = (tuple_1, set_0, dict_0)
    module_0.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    float_0 = -2507.0
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    float_0 = 4024.06
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    int_0 = 861
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    str_0 = "J"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    str_0 = "g\t`|&-=F ~V[hD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    int_0 = 1169
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    int_0 = 296
    int_1 = -90
    set_0 = {int_0, int_1}
    tuple_0 = (set_0,)
    tuple_1 = (int_0, int_0, int_1, tuple_0)
    module_0.match(tuple_1, int_1)


def test_case_5502():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5503():
    str_0 = "AE>l<{sM!fD/i\t!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    float_0 = -668.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    str_0 = ""
    object_0 = module_1.object()
    object_1 = module_1.object()
    list_0 = [str_0, object_0, object_0, object_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    float_0 = -383.6
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (float_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    str_0 = '^9,"C8'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    bytes_0 = b"\xc1\xdcj\x89\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    int_0 = -1042
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    int_0 = 42
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    str_0 = "IUe>:#\t\rAK`Wi>p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    int_0 = -1696
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    bool_0 = False
    str_0 = "QNUk_o\r"
    list_0 = [bool_0, str_0]
    module_1.object(*list_0)


def test_case_5514():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5515():
    str_0 = "(9,1Ov"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    float_0 = 1476.18
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    complex_0 = -5031.9 + 4553.5502j
    tuple_0 = (complex_0, complex_0, complex_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    complex_0 = -292.13 + 816j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    bytes_0 = b"\x17.\x9c\xbbj"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0]
    tuple_0 = (bool_0, bool_0, set_0, list_0)
    list_1 = [tuple_0, bool_0, tuple_0]
    list_2 = [list_1]
    module_1.object(*list_2)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    complex_0 = 596 + 780.267j
    float_0 = 1045.2
    tuple_0 = (complex_0, float_0, float_0)
    list_0 = [tuple_0, float_0]
    module_1.object(*list_0)


def test_case_5523():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5524():
    float_0 = -2779.30092
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    float_0 = 3180.97
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    bytes_0 = b"X\xf4E\xc4\xc9\x88\xb9\xfb\xbe\x0b<\xea\xaa\x07\xf1O\x82.\x1a\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    int_0 = -1845
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    int_0 = -3360
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    bool_0 = True
    bool_1 = False
    int_0 = -3914
    list_0 = [bool_0, bool_1, bool_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    str_0 = "x^\x0c=4Xca73g}$<s1"
    bool_0 = True
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0,)
    tuple_2 = (tuple_1,)
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: tuple_2, tuple_1: tuple_1}
    bool_1 = False
    tuple_3 = (dict_0, bool_1)
    module_0.get_new_command(tuple_3, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    bytes_0 = b"\xdb\x93Go/\x98\xe92\xa9\xc9\xdc\xad\xa3"
    list_0 = [bytes_0, bytes_0]
    bool_0 = False
    tuple_0 = (bytes_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    str_0 = "v^N%A\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    bool_0 = False
    bytes_0 = b"\xf7{\x06\x82\xa4Y\x95\xe5\x10\xf0\xd5\xf5\x8b"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    str_0 = "-(j\nT-Tr\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    float_0 = 3840.237122
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    bytes_0 = b"\xf3\x1a\xc0\x8e\xc7k"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    str_0 = "bke0bHhBW]A9\x0bt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    int_0 = 644
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    str_0 = "w/.3J=Sf7{:4"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    str_0 = "J\n)T("
    str_1 = "8"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    int_0 = -3298
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    bytes_0 = b"\x7f|G*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    float_0 = 551.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    str_0 = "j{Oupn\x0b#GdGL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    str_0 = "/Ie>T"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    str_0 = ")pRY\n"
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    float_0 = -3247.680391
    str_0 = "c1 .suC=\x0bZQP=Nku!(|,"
    int_0 = 2255
    tuple_0 = (int_0,)
    tuple_1 = (float_0, str_0, tuple_0)
    set_0 = {tuple_1}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    bytes_0 = b"T\xd6K"
    bytes_1 = b"5\x12\xf1\xc4\xda)D\xfe\xd5i\xcc\x85\xe2A\xe0d3"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    int_0 = 4200
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    float_0 = 3844.7572
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    int_0 = -110
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    tuple_0 = ()
    bytes_0 = b"}z%\xd7\x9a\xae[\xcb\x8a\xb4a\xa5\x93\x05\x9cqF\xdd\xd1"
    list_0 = [bytes_0]
    dict_0 = {tuple_0: list_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    int_0 = 2370
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    int_0 = 5222
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    str_0 = "MwxVZ,"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    str_0 = "x%>K1#"
    module_0.get_new_command(dict_0, str_0)


def test_case_5560():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5561():
    complex_0 = 1965.766 + 4372.979j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    complex_0 = -2100 - 1910j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    float_0 = 537.45048
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    int_0 = 1682
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (int_0, bool_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    float_0 = 2991.919
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    bytes_0 = b"\xe0t\xc9\x07z+\xef\xb1/\xeb\xb3\x99\xc6\x03\xe7 "
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    int_0 = 2215
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    int_0 = 3172
    bytes_0 = b"3\x82\xb4\x18u-\xae\x1fp ,\xd0\xbd\xc3\x93tM\xe5\xcd"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    object_0 = module_1.object()
    list_0 = []
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    int_0 = 267
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    str_0 = "9gz7=p;{XOT~G\t8TwR:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    str_0 = "=t*bCNCeV'e+?"
    bool_0 = True
    bool_1 = False
    tuple_0 = (str_0, bool_0, str_0, bool_1)
    dict_0 = {tuple_0: str_0}
    none_type_0 = None
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    str_0 = "1I9mr K7My9)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    int_0 = -496
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    bytes_0 = b"\x15\xc6H\x92\x89\xce\xc2\x07\x8f\xb1\t\x802\x11\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    bytes_0 = b"\xd9\xc1\x03\xff\x14q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    bytes_0 = b"-x\xfbMK\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    str_0 = "129O^\x0bTspRN\x0c'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    str_0 = "wH:ty~3`@F!yPm@U_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    bytes_0 = b"\xb3\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    bool_0 = True
    int_0 = 336
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5583():
    int_0 = -1557
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5584():
    bool_0 = True
    str_0 = "B7H\x0bn"
    str_1 = 'Ad3"uD'
    list_0 = [bool_0, bool_0, str_0, str_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    complex_0 = 1493.5002 - 779.67244j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    bytes_0 = b"7i\xbd\xf4\x17\x1d\xe5\xe4K7\xea\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    int_0 = 572
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    str_0 = "VHVS\r=/ic;]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    bytes_0 = b" \x8b\xc4\xf7\x81\xda\x8e\xf0\x95=\x8f\x90\x1c\xc3\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5590():
    str_0 = "`mOIW\x0b`#{'ki<U5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5591():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5592():
    str_0 = "'9n~RTM8>\"0Yd`\rCU,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5593():
    complex_0 = -2140 - 4444.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    int_0 = -761
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    complex_0 = 927 - 214.29266j
    str_0 = "\rBl"
    str_1 = "X\r/&v\\"
    dict_0 = {str_0: str_0, str_1: complex_0}
    module_1.object(*complex_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    bytes_0 = b" q,\x06"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    list_0 = [dict_0, dict_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    complex_0 = 82 - 3033.58451j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    complex_0 = -1035 + 824.568669j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    float_0 = 3490.16
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    object_0 = module_1.object()
    str_0 = "[ulr5^%"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    bytes_0 = b"[\xb1\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_1: bool_0, bool_0: bool_1, bool_0: bool_1, bool_1: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    int_0 = -298
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    float_0 = -3267.18
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    int_0 = -637
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5609():
    str_0 = "!^zEV(\x0b]zMEWDCy\x0cO%|2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5610():
    bool_0 = True
    str_0 = "\nRG"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    str_0 = ")9\\c3~ehXd/ld\\`U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5612():
    int_0 = -1880
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5613():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    str_0 = "V3g+jbXNltnoa"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    int_0 = 317
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    str_0 = "T8GO@%pILaZ,V)]"
    module_0.match(str_0, str_0)


def test_case_5617():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5618():
    bytes_0 = b"L"
    tuple_0 = (bytes_0,)
    str_0 = 'O@Os\'.1C"<o?q".'
    tuple_1 = (bytes_0, tuple_0, str_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    bytes_0 = b"\xc5\xb5q\x84I\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5620():
    float_0 = -2944.595
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    float_0 = -3750.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    complex_0 = 1396.08746 - 2235.6879j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    int_0 = 1359
    module_0.match(int_0, int_0)


def test_case_5625():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5626():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5627():
    int_0 = -906
    tuple_0 = (int_0,)
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    str_0 = "~0\n@\rCWDaI2ZU~BJRY["
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5629():
    bytes_0 = b"\x9c\x02\xfd\xb6-\x16\xe6\xd7\xc1~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    str_0 = 'xM.LW&})-K"yx$`nx&%'
    list_0 = [str_0]
    module_1.object(*list_0)


def test_case_5631():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5632():
    bytes_0 = b"\x85\xc8\xce\x04G\xeaj\xd1\x81&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5633():
    str_0 = "?NtW>BhtX5iUebj"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5634():
    int_0 = -433
    module_0.get_new_command(int_0, int_0)


def test_case_5635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5636():
    str_0 = 'r"y$\x0c_\x0c<O'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    bytes_0 = b"\xbe\x91\xc1\x95\xfc\x929\x0c\xd7`\\q\x80\xc2\x1bL\x03\xf8"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    str_0 = "~oi}\n5TC"
    str_1 = 'S"At68}\\{\tMtqEA\\ ?nF'
    str_2 = "_ y1\\"
    str_3 = "zw"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_3: str_3}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5639():
    int_0 = 2849
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5640():
    int_0 = 1550
    str_0 = ":a^("
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5641():
    bytes_0 = b"\xb8^A"
    str_0 = "ki[8-?^D"
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = False
    tuple_0 = (list_0, str_0, bool_0)
    tuple_1 = (bytes_0, str_0, tuple_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5642():
    float_0 = -248.454
    bool_0 = True
    dict_0 = {float_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5643():
    float_0 = 3559.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5644():
    int_0 = -1086
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0, set_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5645():
    int_0 = 2365
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5646():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5647():
    float_0 = 458.6
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5648():
    str_0 = "KjRz^j+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5649():
    bytes_0 = b"~x-(\xaa\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5650():
    float_0 = 2224.8
    complex_0 = 1589.593344 - 1494j
    module_0.match(float_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5651():
    complex_0 = -602.9 - 516.284509j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5652():
    int_0 = -779
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5653():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    int_0 = 1189
    dict_1 = {}
    bool_0 = False
    tuple_0 = (dict_0, int_0, dict_1, bool_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5654():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5655():
    str_0 = "4#4IPEN\t_2pN(4~ {1#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5656():
    complex_0 = 2628 + 2399j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5657():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5658():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5659():
    int_0 = 359
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5660():
    bool_0 = True
    int_0 = -1203
    list_0 = [int_0]
    tuple_0 = (bool_0, int_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5661():
    str_0 = '"\n+<W6z*1*Rrf'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5662():
    str_0 = "f2aBYt\tB6:Rs_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5663():
    str_0 = "w\x0cw}Q)wXGTqSVx/{ZIo"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5664():
    int_0 = -995
    module_0.match(int_0, int_0)
