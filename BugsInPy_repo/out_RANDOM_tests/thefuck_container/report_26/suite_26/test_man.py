# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import man as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -3883
    dict_0 = {int_0: int_0}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2():
    pass


def test_case_3():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    module_0.match(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_11():
    pass


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "\r*-5KU5[kN W@ Kg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "\n<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = -447
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "v!.K\x0b.9-KHp-Pl"
    list_0 = []
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b"\x1f\x00D\x92\x0e\nEk\x97\xbc\x177p\xc6\x15\x1c\xed`\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = "XC"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


def test_case_23():
    pass


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = "`il6O|o(ivXpV<hIcli"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b"0\xd1\xeb\xd1\x85\xf3\xad\xcb\xf3\xc9\xf0\xa3\xba\x02\xbf\xdd"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b'U\x88O\xca3\xe5\xf6p"\xa1\x94\xf3\xfa\xac%|\xce\x89'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = "5Bi&N~"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    bytes_0 = b"\xb6\xe3 \x0e\xba\x13\x9c\xfc\xcc\xb4\xe6\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    tuple_0 = ()
    dict_0 = {}
    dict_1 = {tuple_0: dict_0, tuple_0: tuple_0}
    module_0.match(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "4Fc:IAH"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    bytes_0 = b"$\xa2o\xd3\xf16\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = "X`q'@\"J>p"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    bytes_0 = b"\x1bej\x10\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    int_0 = -535
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    bytes_0 = b"\x9a"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    bytes_0 = b"e\xfe\xb1\xfd\x9d^\x93\x8a\xe6"
    dict_0 = {bytes_0: bytes_0}
    bytes_1 = b""
    bool_0 = False
    tuple_0 = (bytes_0, dict_0, bytes_1, bool_0)
    module_0.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_46():
    bytes_0 = b"/ \x8d\x10f-\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    float_0 = 1229.43
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = "^'VR=`cLmdOG.sO3k"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    float_0 = -20.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    set_0 = set()
    bool_0 = True
    tuple_0 = (set_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    bytes_0 = b"~K[t_\xb6e6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    int_0 = 2235
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    bytes_0 = b"\xea^\xce\xf4M\xcbF\xa54s\xe5\x12\x17\x98\xbc\xcb\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    str_0 = "JH\tO]s>)f[a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    bytes_0 = b"\xf5j\x11P\x1d("
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bool_0, bool_0)
    list_0 = [tuple_0, tuple_0, bytes_0]
    str_0 = "OnTF"
    none_type_0 = None
    str_1 = "PAPx4hZt\rh+ru"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    int_0 = -1050
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    complex_0 = 297.8 - 1067.45j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    int_0 = 61
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    none_type_0 = None
    str_0 = "ZP\\nw`O\x0bVNc"
    dict_0 = {str_0: none_type_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    str_0 = 'Wm\'SmZK@wJD""~/%9MM3'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


def test_case_75():
    pass


@pytest.mark.xfail(strict=True)
def test_case_76():
    bytes_0 = b"\x12i\x1a\x0f\xbc\x13\x81\xac|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    bytes_0 = b"\xb2X\xd7e\x95\x91$\x90\xc2\x94gf\xb9e\x84\xed"
    float_0 = -1212.525082
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, float_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    str_0 = "A\\m\t>pr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    bytes_0 = b"\xaf\x96w\xd2{\x1c|\x8b\x800\xb1\x90\x99\xe8\x8b"
    set_0 = {bytes_0, bytes_0}
    bool_0 = True
    tuple_0 = (set_0, bool_0, bool_0, bytes_0)
    list_0 = [tuple_0, set_0, bool_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    bytes_0 = b"\xa5o\x9e\x11ya\xd7\x84\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_82():
    pass


@pytest.mark.xfail(strict=True)
def test_case_83():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    float_0 = -1443.260213
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    int_0 = -599
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_87():
    pass


@pytest.mark.xfail(strict=True)
def test_case_88():
    bytes_0 = b'Y\x07\x13-\x1c\xea\xec\x82\x8b\xf1"\x86\xa5\xe77\x94'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    float_0 = -464.25
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    float_0 = 355.537
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    str_0 = "\n/u\x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    int_0 = 610
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_97():
    bytes_0 = b"q\x7f\xb6,\x06\xba\x02o\xde\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    int_0 = 2145
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "NlcFj\rlUY\\jY\rA\x0be"
    set_0 = {int_0, str_0}
    tuple_0 = (list_0, str_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    int_0 = -2039
    module_0.get_new_command(int_0, int_0)


def test_case_100():
    pass


@pytest.mark.xfail(strict=True)
def test_case_101():
    int_0 = 1284
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    bytes_0 = b"h\xaf\xa9\xc6\xc49I"
    complex_0 = 569.02716 + 5035.278821j
    dict_0 = {complex_0: bytes_0, bytes_0: bytes_0, complex_0: complex_0}
    tuple_0 = (bytes_0, complex_0, bytes_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    float_0 = -2461.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    bytes_0 = b"U\x19\xd0u\xbc\x97\x96"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    complex_0 = 1742.300373 - 217.615956j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    bytes_0 = b"&\x82Rj:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    bytes_0 = b")\xd56w\xd7\x16\x89\x8a\xeaq\xc6&\x97\x9b\x87\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    float_0 = -1867.51136
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    str_0 = "5v{kx(-@.R="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    str_0 = "k;f:J+S"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    float_0 = 1218.755
    module_1.object(*float_0)


def test_case_122():
    pass


@pytest.mark.xfail(strict=True)
def test_case_123():
    str_0 = "E.|`*'&/!5=CNB^"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    complex_0 = -407.935131 + 3175.32j
    list_0 = [complex_0, complex_0]
    tuple_0 = (list_0, list_0)
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    float_0 = -3312.914
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    str_0 = "maqb?Q*qqXOG=J:\\_3)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    int_0 = -428
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    str_0 = ">X0E_O"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    bytes_0 = b"\x892<\xd7\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    bytes_0 = b'\x80\xe1"\x81\xb3t8'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    str_0 = "oQx$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    int_0 = -418
    set_0 = {int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_139():
    pass


@pytest.mark.xfail(strict=True)
def test_case_140():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    bytes_0 = b"H\x1d\x9aa\xcb\xb6\xf8\x7f\xec\x9bL"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    float_0 = 3099.82
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    float_0 = -870.734
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    int_0 = 99
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    int_0 = -568
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    bytes_0 = b":&\x13\xbd\x95\x19i\xc1e\xf8\xfb\x14\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    complex_0 = 2187.02741 + 96.5918j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    int_0 = -1509
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    str_0 = "@.}8\r_K;xsUp+\\,Ioac"
    str_1 = "tzLG-@Qu>"
    set_0 = {str_0, str_1, str_1}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    str_0 = ",VR"
    int_0 = -3089
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    str_0 = "96.&^QD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    str_0 = "\x0bU8F{ 1-ew|{]?s"
    str_1 = "I)S?%m_z*0"
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, str_0: str_0, str_1: object_0}
    module_1.object(**dict_0)


def test_case_157():
    pass


@pytest.mark.xfail(strict=True)
def test_case_158():
    float_0 = -824.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    bytes_0 = b"N\x0b,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    complex_0 = -773.105416 + 878.5941j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    str_0 = "{@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    bytes_0 = b"y\x8a\x83\xe5\xc7w\x96\x04^\xaaC"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    int_0 = 1634
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    int_0 = 94
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    str_0 = "Fw|ctX[gh}N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    bytes_0 = b"\xe0\xea\xc0\x123\xac\x061\xdb\xc7\xdd\xa4\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    bytes_0 = b"\xa4\x828\xb1\xcb\xa0>fx\x97F\x98_\xfc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    bytes_0 = b"\x8e\x12'\xdcu\xa7\xf5\xce+\xa6\\\xfa\xc5\x7f\xadY\xcdZ\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    bytes_0 = b"1\xcd;\x07\xc5/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    int_0 = 75
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    float_0 = 4766.535
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    bytes_0 = b"\x08\xb1\x15s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    int_0 = -3770
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_176():
    pass


@pytest.mark.xfail(strict=True)
def test_case_177():
    bytes_0 = b"?)\x89\x15\xda^\xe8\x18\x8b"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    bytes_0 = b"\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    bytes_0 = b"M3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    str_0 = " (R3k"
    bytes_0 = b"oh\xd0v\x80$e9\xc1\xdd^c"
    set_0 = {bytes_0, str_0}
    tuple_0 = (str_0, set_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    str_0 = "Ri:Um;|TR{^!DkKQB^j"
    module_0.match(str_0, str_0)


def test_case_183():
    pass


@pytest.mark.xfail(strict=True)
def test_case_184():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    none_type_0 = None
    bytes_0 = b"I\xf8,"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    bytes_0 = b"\xe9\x80p\x02\xd6\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    str_0 = "._]{E\\X/\rzc'Hn\x0bh"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    str_0 = '@?`?mH"XQY4Cx3&Y{'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_192():
    int_0 = 734
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    int_0 = -1299
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    str_0 = "#Nz/Q4Ien\r#OwJ5K6"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0, dict_0)
    list_0 = [tuple_0, str_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    int_0 = 283
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    bytes_0 = b"\xc4\x14q\xc3Z\xae\xfb\x96\xdeW\xb3\xa2y\x997#\x8f\xa5\x06Z"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    float_0 = -2201.559
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    int_0 = -1469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    str_0 = "%(K^/&UByc"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    int_0 = -2982
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    int_0 = -1195
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    int_0 = -351
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    float_0 = -2270.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    float_0 = 31.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    str_0 = "u+Ja|ju@nR|G<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    none_type_0 = None
    int_0 = -1832
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    set_0 = set()
    list_0 = [set_0]
    list_1 = [list_0, set_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_216():
    str_0 = "R@N2u~fp"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    bytes_0 = b"\xa9\x0e\xf1Z\x0eK\xab\xdc\xb6e\xd1#\xbb\xb2P\xc1m"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    int_0 = 1146
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    int_0 = -547
    module_0.match(int_0, int_0)


def test_case_220():
    pass


def test_case_221():
    pass


@pytest.mark.xfail(strict=True)
def test_case_222():
    complex_0 = 241.691 - 3807.05j
    set_0 = {complex_0, complex_0, complex_0}
    tuple_0 = (complex_0, set_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    bytes_0 = b"p\x87\x17Afc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    float_0 = 2895.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    str_0 = "9y'O|f\r`\r%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    complex_0 = -1715.80529 - 1703.916654j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    int_0 = -1107
    bytes_0 = b'\xbe\xd5"${\x1f\xca\xe7\xa0\xc1\x9d\xa0$\x01J'
    tuple_0 = (int_0, int_0, bytes_0, int_0)
    set_0 = {int_0, tuple_0, bytes_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    int_0 = -1233
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    int_0 = 2930
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


def test_case_232():
    pass


@pytest.mark.xfail(strict=True)
def test_case_233():
    list_0 = []
    str_0 = '_f>!VeJnF-\x0bN"D%'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    int_0 = -4348
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    str_0 = "I7d2MK9wG"
    set_0 = {str_0}
    complex_0 = -899 + 2527.5j
    dict_0 = {}
    bool_0 = True
    tuple_0 = (set_0, complex_0, dict_0, bool_0)
    bool_1 = False
    list_0 = [bool_1, dict_0, complex_0, bool_1]
    tuple_1 = (str_0, tuple_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


def test_case_237():
    pass


def test_case_238():
    pass


@pytest.mark.xfail(strict=True)
def test_case_239():
    str_0 = "IC'U\"JyMwUx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    int_0 = 252
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    dict_0 = {}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    str_0 = "x_O}8Frrr$Q`3V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    int_0 = -1695
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    bytes_0 = b"\xb9\xd8DD\x0f\x92K\xceS\xf8E8\x97\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    str_0 = "):\rjJEJz&n,\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    bool_0 = True
    int_0 = -991
    list_0 = [bool_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    bytes_0 = b"\x19S\xf5\x11\xaa\xc7\xf9\x94\x7f!\x1a\xe1\x90\x1a\xa4"
    list_0 = [bytes_0, bytes_0, bytes_0]
    int_0 = -1394
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    int_0 = 1878
    list_0 = [int_0, int_0]
    int_1 = 1895
    module_0.get_new_command(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_252():
    bytes_0 = b"\xe9\xf3\x02r\xc8\xc5\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0}
    tuple_0 = (list_0, list_0, dict_0, dict_0)
    list_1 = [tuple_0, bool_0]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_255():
    str_0 = "XN<JJ)%Y9p~Gml"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    float_0 = -1204.6959
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_257():
    pass


@pytest.mark.xfail(strict=True)
def test_case_258():
    str_0 = "Hi>n\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    str_0 = "KHm"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    str_0 = "A;{ba(\r}UBi"
    int_0 = 1783
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    float_0 = 1194.60892
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    float_0 = -1303.69
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    int_0 = 1332
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    bytes_0 = b"\x13\x0c\x935j\x19T\xc6\xf4\xbc\xf7;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    bytes_0 = b"\xc5V"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    float_0 = -770.167154
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    int_0 = -2498
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    bool_0 = False
    float_0 = -520.10201
    set_0 = {bool_0, bool_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    str_0 = "n\tW&-\nL+{|,g@N0)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    float_0 = -2917.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    str_0 = "FcqZ"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    float_0 = -3910.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    bytes_0 = b"\x07\xc2Qfv"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    bytes_0 = b"\x9fB\x98\x96vc\xf8\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    float_0 = 327.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    int_0 = 61
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    str_0 = "Qt"
    int_0 = -950
    tuple_0 = (str_0, str_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    int_0 = 1685
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    int_0 = 535
    tuple_0 = (int_0,)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    int_0 = -253
    module_0.get_new_command(int_0, int_0)


def test_case_285():
    pass


@pytest.mark.xfail(strict=True)
def test_case_286():
    bytes_0 = b"iE\x8c\xe5-\x17\xdf\xa2\xe9\x94\x86n\xee\xea[\x05\xc6Y\xa1\x16"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    complex_0 = -2866.927 + 4647.293j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    int_0 = -148
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    complex_0 = -863.1 - 1588.39j
    str_0 = '6ZhX"0%wE'
    dict_0 = {complex_0: str_0, str_0: complex_0}
    list_0 = []
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    str_0 = "CG}l&Nco..B8z\t\nj*lj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    bytes_0 = b"\x93% \xe3\x1a\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    int_0 = 3770
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    float_0 = 406.87606
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    int_0 = -3003
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    int_0 = 4200
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    str_0 = "9\n%7\ntWNIb\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    float_0 = -2563.40379
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    bytes_0 = b"^\xfd+\x03\x81wJ\x84\xec\xbcH\x8f\xc1!t\x1f\xd6\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    str_0 = "*z\rC5cX/)(w10W~Y3M"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    float_0 = 1116.005047
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_302():
    pass


@pytest.mark.xfail(strict=True)
def test_case_303():
    str_0 = "hok;g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    int_0 = -261
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    float_0 = 5923.867
    set_0 = {float_0, float_0, float_0, float_0}
    tuple_0 = (float_0,)
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    complex_0 = 2490.9 - 1111.51j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    str_0 = ")(YQ >9L:>T+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    list_0 = []
    str_0 = "(^1 FaT/"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    bytes_0 = b"_\xbf@\xa9&e\xf6\xa9jX\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    bytes_0 = b"l\xc5\xe3\xc4|\xd4\xd2\x7f\xf8\x1f\x98"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    int_0 = -554
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    bytes_0 = b"*\xb7\xb1N\xe4\xc9n\x01\xd3r\xc9\x85;\x97l\xf9\xfem\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    float_0 = -1035.643
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    str_0 = "@!(\tnNTLw.yEy\\rP|4"
    str_1 = 'vkiqi<\t"G.{\tY'
    str_2 = "V"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    int_0 = -968
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    bytes_0 = b"\xc8\x1d\x9a\x88d\xa1\x82rl"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    int_0 = -59
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    bytes_0 = b"\xb2\x18c\xfd\x1d\xf8:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    str_0 = "HWp)AS("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    bytes_0 = b'\xc8G\xbfo-"K\xb8\xe70\xa9\x9a\x1d\xb19\x05'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    none_type_0 = None
    bytes_0 = b"N\x93\xe0_\x95\xc2\x99\x95*<|\xb8r\xc7,\xf3"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    int_0 = 3802
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    none_type_0 = None
    bytes_0 = b"\xd7\xb9h\x84\x0f\xa6?Ru\x8e\xf5"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    bytes_0 = b"O\xd7\xcf\x0c\x01\xa0Y\xfb.\xafs\x0f,\x070\x02\xe6\x84)\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    float_0 = 1158.6152
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    bytes_0 = b"\xc3\xa9l\x07\x00-"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    str_0 = "-:~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    bytes_0 = b"\x82\x84\xc3"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_333():
    pass


def test_case_334():
    pass


@pytest.mark.xfail(strict=True)
def test_case_335():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    str_0 = '6E}@"|BcvfjCS>;BY1'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    bytes_0 = b"\x0e\xad\x1c\xa4\xc1\xcbIN\x19\xde\xbf\x81a\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    str_0 = "\r\tU2k#t%k+@i15Z"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_340():
    int_0 = 402
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    str_0 = "O)w,|BWaeV0\x0bCbYTt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    bytes_0 = b"v\xef\n'\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    complex_0 = 1045 + 177.7j
    dict_0 = {complex_0: complex_0}
    bool_0 = False
    bool_1 = True
    tuple_0 = (dict_0, bool_0, bool_1, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    str_0 = "|/YAhm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    bytes_0 = b"\x8f\xc4\xcf\xcb\xdb\x90 \xce\xfe\x8f\xdf\x0b\xf9\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    str_0 = "A`BX5Ec@pEz "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    str_0 = "\n\x0cmncTD|qj%6"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    bytes_0 = b"\xb2\xdf)s.'\x1b\xec\xfc\x86:6\xaa\x80"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    dict_0 = {}
    bytes_0 = b"K\x8d\xe4\x9b\xc5\x8d5<D\x0f^\x1f\xaaX$\xb3"
    tuple_0 = (bytes_0,)
    module_0.match(dict_0, tuple_0)


def test_case_351():
    pass


@pytest.mark.xfail(strict=True)
def test_case_352():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    float_0 = -121.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    str_0 = "p312n'gu\x0c"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    int_0 = 2556
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    str_0 = "4\t/:?."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    str_0 = "\t-U?I/hsJ`s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    int_0 = 659
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [int_0, int_0, dict_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    complex_0 = -3040.6 - 344.410599j
    module_0.match(complex_0, complex_0)


def test_case_361():
    pass


@pytest.mark.xfail(strict=True)
def test_case_362():
    int_0 = 3003
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_363():
    pass


@pytest.mark.xfail(strict=True)
def test_case_364():
    object_0 = module_1.object()
    str_0 = ""
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    int_0 = 849
    module_0.get_new_command(int_0, int_0)


def test_case_366():
    pass


@pytest.mark.xfail(strict=True)
def test_case_367():
    str_0 = "+`_FU\r\r>vqvhl\x0b9"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    str_0 = "x'Y%(CJ\nUE/Vn2fU"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    str_0 = "a#HDT"
    bytes_0 = b"\xf4\xd9 ?}\x05"
    int_0 = -1605
    tuple_0 = (str_0, str_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    dict_0 = {}
    tuple_0 = ()
    tuple_1 = (dict_0, dict_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    str_0 = "gcPU;QGoG8H"
    list_0 = [str_0]
    list_1 = [list_0, list_0, list_0, str_0]
    module_0.match(list_1, list_0)


def test_case_372():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_373():
    str_0 = "ML:m!uz87n$4h"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    complex_0 = -1108.9 - 771.06627j
    module_0.match(complex_0, complex_0)


def test_case_377():
    pass


@pytest.mark.xfail(strict=True)
def test_case_378():
    str_0 = "jV-VRp9D@d.eZP!4"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    bytes_0 = b"hU6J\x1b\xbb\xb0\x86b\xa3v\x1a\x1f\x1a\xd3\xec1\xc4N "
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    bytes_0 = b"WF\x94k?\xde\x147\x08\xd9\xac\xc8~\xde\xe2\xb0\xb5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    int_0 = 806
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    bytes_0 = b"\xed\x05\x8f.\xbaD\xd9~yh\x90\xb1\xcc\x10m\xfe\x88\xcd\xb8\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    int_0 = 984
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    bytes_0 = b"G\xdc\x19\xe6\xd8\x97"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    bytes_0 = b"\x95\xf4\xdc"
    module_0.match(bytes_0, bytes_0)


def test_case_389():
    pass


@pytest.mark.xfail(strict=True)
def test_case_390():
    float_0 = -2002.7361
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    int_0 = -959
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    str_0 = "@:m4#S'[H|,xoS5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    int_0 = -4056
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    bytes_0 = b"\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_396():
    pass


@pytest.mark.xfail(strict=True)
def test_case_397():
    int_0 = 772
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    float_0 = -864.0
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


def test_case_400():
    pass


@pytest.mark.xfail(strict=True)
def test_case_401():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    int_0 = -755
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    str_0 = "cRjd/=$\t<Rxe"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    float_0 = 2489.0
    bytes_0 = b",38\xcb\x03"
    tuple_0 = (float_0, bytes_0)
    list_0 = [tuple_0, bytes_0, tuple_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    bytes_0 = b"{\x82CI.W|\xdd\x93\xcbr\x16O\xe3\xc9\x02\xf4\x02]\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    int_0 = -3926
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    str_0 = "w-QTc*<C%]1\x0c"
    int_0 = -67
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\xac"
    tuple_0 = (bool_0, dict_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    bytes_0 = b'\x10\xf2*"x\xb7)\xb2s5.\xe0'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_412():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    int_0 = 3264
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    int_0 = -713
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    str_0 = "=Bn}|[Vl]Jd>bYQc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    bytes_0 = b"\xd1$\x95\xe4#*\x9b\x9e\xe4\xd4\x11\xac"
    none_type_0 = None
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    str_0 = "6;.'5@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    int_0 = 1673
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    int_0 = -3361
    list_0 = []
    dict_0 = {int_0: int_0, int_0: int_0, int_0: list_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_425():
    pass


@pytest.mark.xfail(strict=True)
def test_case_426():
    bytes_0 = b"\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    str_0 = "%K)\rB\npm[2w7|EE5O\\%7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_429():
    int_0 = -228
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_431():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    float_0 = -4909.0
    bytes_0 = b"\x84\xa5\x83"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    str_0 = "g\n?"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_434():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_435():
    bytes_0 = b"\x9f\xef\x84\x8c\x12\xe1]`\x83\xfc\xc2\x10\xa3\xf1\x18o\xa5"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    int_0 = 4326
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    bool_0 = False
    str_0 = "|wHNsA TK)jFci"
    tuple_0 = (bool_0, bool_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_439():
    pass


def test_case_440():
    pass


@pytest.mark.xfail(strict=True)
def test_case_441():
    list_0 = []
    str_0 = "E-/q\\"
    str_1 = "*Y{BBK+V$P}UrmRDS"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    str_0 = "<f)"
    tuple_0 = (str_0, str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    str_0 = 'l"jMF8}CX*-e_1'
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    bool_0 = True
    int_0 = -980
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    complex_0 = -2031.3 + 1295.3j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    int_0 = -1061
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    none_type_0 = None
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    bytes_0 = b"QL\xc3\x9b=\xbc\x866B\xe1\xd0"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    int_0 = 4261
    module_0.get_new_command(int_0, int_0)


def test_case_453():
    pass


@pytest.mark.xfail(strict=True)
def test_case_454():
    str_0 = "k4`]sL;8wfrI4&xM"
    module_0.match(str_0, str_0)


def test_case_455():
    pass


@pytest.mark.xfail(strict=True)
def test_case_456():
    str_0 = "Ks_L\rF9yCC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    int_0 = -1348
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    int_0 = -2929
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    int_0 = -1861
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    str_0 = "c$2mHC&?u(o!yBn|I.y"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    complex_0 = -2330.5819 - 3327.5201j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    bytes_0 = b"&\xc6\xa3KHM\xfcMA)\r#f\x04\x1e\x94G\xc4\x11\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    str_0 = "q>&\x0bS"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    bytes_0 = b'\xfb\x86\x97\x01\\"\xe2\xf6\x102\xd8\xa2'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    int_0 = 1259
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


def test_case_469():
    pass


@pytest.mark.xfail(strict=True)
def test_case_470():
    complex_0 = -3254.16435 - 2759.315j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    int_0 = -1250
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    int_0 = -3487
    list_0 = [int_0, int_0, int_0]
    list_1 = [int_0, list_0, list_0, list_0]
    object_0 = module_1.object()
    list_2 = [list_1, object_0, int_0]
    module_0.get_new_command(list_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    int_0 = 317
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    str_0 = "y<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    bytes_0 = b"\xc3\x83\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    float_0 = -2217.50745
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    none_type_0 = None
    int_0 = -1928
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    int_0 = -2055
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    bytes_0 = b"\x06B\xb93\xa4\x1b4\xd5\x1e\xba\xea\x9c\x11\xc7?2\xdc3\x8f7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    int_0 = 1526
    module_0.match(int_0, int_0)


def test_case_484():
    pass


@pytest.mark.xfail(strict=True)
def test_case_485():
    bytes_0 = b"\xcc\x98\x01# \x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    str_0 = "5J?X+0hJG[l\x0b*'JA\tFf@"
    complex_0 = 664.98 + 1481.17631j
    set_0 = {str_0}
    tuple_0 = (str_0, complex_0, set_0, complex_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    str_0 = '\tq>9"WzotRV\tc:z"dc+'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    str_0 = "AQC|^"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    complex_0 = 3637.9 + 1898.3016j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    str_0 = "e{&L7ON(,+f:NM(^R*q|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    int_0 = 784
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    bytes_0 = b"\xf3S\xe8\xde m\x8dh|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    float_0 = 811.754
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    float_0 = 2006.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    float_0 = 4296.72
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    dict_0 = {}
    none_type_0 = None
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    dict_0 = {}
    str_0 = "rZV@\rl,\x0bx7f-g-"
    tuple_0 = (dict_0, str_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    int_0 = -267
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    bytes_0 = b"\xd26\x90\x8d\x9e\xbd"
    int_0 = 1217
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    str_0 = "\ri"
    bytes_0 = b"\xf7"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    bytes_0 = b"\xebH\xef[gk\x95\xfe\xba\x1e\x92\xc6\xac\xe6\x9d\xc4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    bytes_0 = b")\x92"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    int_0 = 57
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    str_0 = "ui<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    bytes_0 = b"*\xf3\xdc\x89<\xe0v"
    list_0 = [bytes_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_507():
    float_0 = 890.7
    str_0 = "~[M"
    str_1 = "aj"
    list_0 = [float_0, str_1]
    tuple_0 = (float_0, str_0, str_1, list_0)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_508():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    float_0 = -1219.876308
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    bytes_0 = b"\xab\xf9\xd5\xf6\xb4\x90\xa9\x1b\x1fE\x81\xc1\xd8\xff\xb6(\x14\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    str_0 = "EPkc(S}JG-G?b|6`B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    str_0 = "q:"
    str_1 = "}\th\n8"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    complex_0 = 963.55082 + 694.6j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    complex_0 = -732.2385 + 1497.509279j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    str_0 = "{I"
    bytes_0 = b"\x01[w\xf0"
    set_0 = {str_0, bytes_0, bytes_0, str_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    bytes_0 = b"\xfax\x18\t\xa5_4\x8b.~\xb4\x11\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


def test_case_524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_525():
    int_0 = 695
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    bytes_0 = b"-\x97\x9d\x03\xe5\xba\xffP\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    str_0 = "("
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, str_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    int_0 = -979
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    str_0 = "a\x0c*5o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    list_0 = []
    complex_0 = -566.95 + 829.2j
    bytes_0 = b'"\xf8)\x9b\xb0\x17\xd1SM\xf0\x19\xb5\t\x14\x8a4\x12\xe17\xf3'
    tuple_0 = (list_0, complex_0, bytes_0)
    list_1 = [tuple_0, tuple_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_533():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


def test_case_534():
    pass


@pytest.mark.xfail(strict=True)
def test_case_535():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    float_0 = -554.0968
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    float_0 = -113.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    str_0 = "C88zPOd\x0bF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    bytes_0 = b"s\x07"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    complex_0 = 1350.3 + 1277.494j
    object_0 = module_1.object()
    dict_0 = {complex_0: complex_0, complex_0: object_0}
    module_0.get_new_command(dict_0, complex_0)


def test_case_541():
    pass


@pytest.mark.xfail(strict=True)
def test_case_542():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    float_0 = -383.9886
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    bytes_0 = b"\xd2)Rm"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    str_0 = "Xt_9$nMyICwOG'=!Tqk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    str_0 = "\\J:z=Rmv\\a]MN*9\tg}g\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    str_0 = "19\t*\\#3W"
    tuple_0 = (str_0,)
    str_1 = "\x0cVpw8XNo("
    tuple_1 = (tuple_0, str_1)
    bool_0 = False
    module_0.match(tuple_1, bool_0)


def test_case_549():
    pass


@pytest.mark.xfail(strict=True)
def test_case_550():
    str_0 = "&b!p{#:f$Hq?-A"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    complex_0 = -2067.710058 + 2334.29111j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    str_0 = "="
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    str_0 = "{\x0cFM{z"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    int_0 = 1201
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    complex_0 = 583.281737 - 1999.25463j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    object_0 = module_1.object()
    int_0 = -2878
    dict_0 = {object_0: int_0, object_0: object_0, int_0: object_0}
    module_1.object(**dict_0)


def test_case_558():
    pass


@pytest.mark.xfail(strict=True)
def test_case_559():
    str_0 = "sGy6N?}w8cJm&\x0b\\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    bytes_0 = b"^\x82e0\x94\xd0\xc9\x0fr"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    bytes_0 = b"\xdf\x85nE\xd3\xefn"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    float_0 = 253.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_565():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    int_0 = 1639
    tuple_0 = (int_0,)
    bytes_0 = b"\xe1\xc7\x91S\x86\xc1j\xa6gv\xf0\xed\xe1\x92d\xf4\x11\xd3"
    tuple_1 = (tuple_0, int_0, bytes_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    str_0 = "3V7yN([~q4;=ce{4#P>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    float_0 = -1923.0
    float_1 = 851.369
    module_0.get_new_command(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_569():
    str_0 = "okYp9KOS8"
    set_0 = {str_0, str_0, str_0, str_0}
    bool_0 = False
    list_0 = []
    tuple_0 = (set_0, bool_0, list_0, set_0)
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    int_0 = -4059
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    bytes_0 = b"\xb9\xad\x91BU\x9d\x97\xbak#\xfeFs6&F\x83\x1b\xff"
    float_0 = -3007.92
    bool_0 = True
    int_0 = -353
    list_0 = [int_0, bytes_0, int_0, float_0]
    tuple_0 = (bool_0, int_0, bytes_0, list_0)
    tuple_1 = (bytes_0, float_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    complex_0 = 1011 - 1371j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    int_0 = -210
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    bool_0 = False
    bytes_0 = b"l01\x0c\xb5\xfcA\t\xb3:|\x95\xa3\xdd\xfb'"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bytes_0: bool_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    str_0 = "\n3\"BZm9'vUV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    bytes_0 = b'"\xef\xfa\xc8\xff\xe1\t\xb9\xbb-\x8e\xd7\xaek\x08'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    str_0 = "^UDSyuf`Iw xr#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    bool_0 = False
    bytes_0 = b"\xa8\xa3-\xf9\x8c\xa6n\xff:;U\xc1\xa1\x13J\x02\x1a\r"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    bytes_0 = b"\xe2\xff\xeb\x1f1G\x08\x9e\x89\n!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    float_0 = -223.4124
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    bytes_0 = b"\xfe\x9d\x8f\xedr\xe3q\xd0[U/"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_1}
    list_0 = [dict_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    int_0 = 1250
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    str_0 = "tg\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    str_0 = "iAvich!=Y>.4Dy"
    module_0.get_new_command(str_0, str_0)


def test_case_589():
    pass


@pytest.mark.xfail(strict=True)
def test_case_590():
    set_0 = set()
    str_0 = "SEVik\\"
    list_0 = [set_0, str_0, set_0]
    list_1 = [set_0, list_0]
    list_2 = [list_1]
    module_0.get_new_command(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_591():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    float_0 = 1715.47722
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    str_0 = "H"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    str_0 = "0J`ZGr*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    str_0 = "<\r{eNN\nDk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    str_0 = ".9>!O=W:cjB*oFYKZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    float_0 = -64.0
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    float_0 = 2314.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_600():
    pass


@pytest.mark.xfail(strict=True)
def test_case_601():
    int_0 = -2126
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    int_0 = 208
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    str_0 = "Q'E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    int_0 = 586
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    float_0 = -1255.296
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    str_0 = "\x0cvmy1S8%6P"
    float_0 = -810.36469
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    str_0 = 'h,5,qBy6EHu"vHm'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    str_0 = 'iN\x0b|"6'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    bytes_0 = b"Z\x92a\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    bytes_0 = b"\xe9\x07{\x1fR\x02\xe5\xb0\xda"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    bytes_0 = b"\n\xe3\xc1\xa7o\xe2i\xf8-@\x98\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_616():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    set_0 = set()
    bool_0 = True
    tuple_0 = (set_0, bool_0, bool_0)
    int_0 = -1052
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    int_0 = -307
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    str_0 = "\x0b`Mcv`\\i:dNPB}JD':?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    int_0 = -3397
    int_1 = -1800
    tuple_0 = (int_0, int_0, int_1, int_0)
    dict_0 = {tuple_0: tuple_0}
    list_0 = [dict_0]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    bytes_0 = b"\x0fC\x99\x00'\xb3g\xf0pb\x19\xe4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    int_0 = 1663
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    int_0 = 3762
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    int_0 = -1414
    module_0.get_new_command(int_0, int_0)


def test_case_626():
    pass


@pytest.mark.xfail(strict=True)
def test_case_627():
    str_0 = '7%Y,K~)TT2g"`v<Jt)'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    str_0 = "3("
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    int_0 = 1238
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    bytes_0 = b"\x97\xaf\x816\x82\xae\xfa\x86Sc\x90'X\xcf\xc3\xed"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    int_0 = 1102
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    bytes_0 = b"\x13G\xd0B\x95]\x1c\xf3]\x7f\xeb\x8b\x8fQ\xcf\xd7\xcdMd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    bytes_0 = b":\x17\x1c\xf7\x80!:\x9b`\xf3`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    float_0 = 1020.48
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_638():
    pass


@pytest.mark.xfail(strict=True)
def test_case_639():
    int_0 = -4006
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    str_0 = "]oV^vF{- \rn I#++^}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_642():
    int_0 = -4887
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    str_0 = "vNxo+6=s<*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    complex_0 = -547.358 - 2375.6j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    str_0 = "\t{nK[lF}w"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    int_0 = -329
    object_0 = module_1.object()
    module_0.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    str_0 = "Wb>iT[Pd\t\tdrt\x0c'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    float_0 = -2916.7
    set_0 = {float_0, float_0, float_0}
    complex_0 = -3622.13 + 2512.66886j
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    int_0 = -3785
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    bytes_0 = b"\xcf\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_652():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    bytes_0 = b"\xfe\x1d:\x13\xd1 ,\xf5\xcfgr\xe7ud"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    str_0 = "m@6(X"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_657():
    pass


@pytest.mark.xfail(strict=True)
def test_case_658():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    bytes_0 = b"\xfd\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    int_0 = 2406
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    list_0 = []
    int_0 = -77
    tuple_0 = ()
    tuple_1 = (list_0, int_0, tuple_0, list_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    str_0 = "bK+7S\"1'cDaH"
    dict_0 = {str_0: str_0, str_0: str_0}
    complex_0 = 798.95 - 3645.295151j
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    complex_0 = 3742.4 - 942.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    str_0 = "h"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_667():
    pass


@pytest.mark.xfail(strict=True)
def test_case_668():
    float_0 = 108.0024
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    int_0 = 850
    bytes_0 = b"\x93\xac8\xad\xfd"
    tuple_0 = (int_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    int_0 = 2614
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    int_0 = 999
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    bytes_0 = b"a\xf4wo&r\xa8\xa6,a\\^\xf2\x17t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    int_0 = 4661
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    bytes_0 = b"l\x9a\xe1I\xf8\xeb\xca\x06\x81\xdb}\xb1#\x1f\x05\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    int_0 = 146
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    bytes_0 = b"\xe4\x7fx}\xcff\x05\xec\xa9\x9eR"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    str_0 = "O^T<YH;rXL*_stmjr^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    str_0 = "C,5<I"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    str_0 = "i@Ei?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    bytes_0 = b"\x9ch\x00\x90\t\xf9\xd5v\xc8$9\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    bytes_0 = b"M\x08[6\xcaS\x95\x1b\xe6\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    bytes_0 = b"nE\x8b\xef\xbdZ\xa8\x01\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    int_0 = 3538
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    complex_0 = 519.299192 - 80j
    int_0 = 514
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: int_0,
        int_0: complex_0,
    }
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_690():
    pass


@pytest.mark.xfail(strict=True)
def test_case_691():
    bytes_0 = b"z\x90\xaa\x07H\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    str_0 = '!1So$_:B"U/yD!s7'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    str_0 = "Pm&<fY~EpT"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    str_0 = "\n[\nwZ5l,{"
    none_type_0 = None
    str_1 = "NLLkJ4t1\r&39M_#5-7a"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    int_0 = 1398
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    bool_0 = True
    bytes_0 = b"\x82\xdb\x13\xe7\x8eH\x16\x89"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    bytes_0 = b":\xabf\xab\x98\x04C\xce\xc3]\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_700():
    pass


@pytest.mark.xfail(strict=True)
def test_case_701():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_702():
    complex_0 = -895.6 - 217.2j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    list_0 = [complex_0, complex_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    float_0 = 2337.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    str_0 = "PTN,sCJ%"
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (str_0, tuple_0, bool_0)
    tuple_2 = (str_0, tuple_1, tuple_0, str_0)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_705():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    str_0 = "?>2]bPeDD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_709():
    pass


@pytest.mark.xfail(strict=True)
def test_case_710():
    bytes_0 = b"\x0b\xdb\x0e\x15\xd7\xd4\xc1U\x8c$\x87\xdf,\x94=\x81Sf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    bool_0 = True
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    int_0 = -810
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    bool_0 = True
    bytes_0 = b"\x02\xc2\x97\x0b\xc2\x1a\x8aA\x97"
    tuple_0 = (bool_0, bool_0, bytes_0, bool_0)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    complex_0 = -2010.494 - 1823.6052j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, bool_0, tuple_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    none_type_0 = None
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    float_0 = 396.2
    module_0.get_new_command(float_0, float_0)


def test_case_719():
    pass


@pytest.mark.xfail(strict=True)
def test_case_720():
    bytes_0 = b"\xd0\x0c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_721():
    pass


@pytest.mark.xfail(strict=True)
def test_case_722():
    int_0 = -235
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    int_0 = -2268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    int_0 = 395
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    str_0 = "\r&U)'V6} d"
    str_1 = "Iz\tWJF@un>\t!C|$(%kL"
    int_0 = 1732
    str_2 = ".aQI"
    dict_0 = {str_0: str_0, str_1: int_0, str_2: int_0, str_2: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    bool_0 = False
    int_0 = 2876
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    float_0 = -2399.8824
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    bytes_0 = b"\xbe\x81\xeehf\xc78\xe1\x8f\xb8,\xd2\xf4v\xa7W\x07\xcf\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    float_0 = -622.7133
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    int_0 = -47
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    tuple_0 = (list_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    bool_0 = False
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    float_0 = -12.58269
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    str_0 = "h#N*[,GA$U2\\zTX"
    str_1 = "~H"
    dict_0 = {str_0: tuple_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    float_0 = 1204.48919
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    float_0 = -3342.598
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    str_0 = "!p"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    int_0 = 199
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    str_0 = "SZuh\x0b<qRJoqi"
    bytes_0 = b"\x16K\x0f\x93G\xa8"
    tuple_0 = (str_0, bytes_0)
    int_0 = 1659
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    float_0 = 3579.19
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    float_0 = -859.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    float_0 = 870.517227
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    int_0 = 364
    bytes_0 = b"\xe1\xe5\xa1p\x96D\xbe\x99E\x04g\xcb\xde%\\\x14\x8a"
    dict_0 = {int_0: int_0, bytes_0: int_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    float_0 = -1175.424
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    str_0 = "p\ttt~)\r!vwgX\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    object_0 = module_1.object()
    complex_0 = 3849 - 1953.533987j
    dict_0 = {
        complex_0: complex_0,
        object_0: object_0,
        complex_0: object_0,
        object_0: complex_0,
    }
    dict_1 = {
        object_0: object_0,
        object_0: object_0,
        object_0: dict_0,
        object_0: object_0,
    }
    bool_0 = False
    list_0 = [dict_1, dict_1, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    bool_0 = False
    complex_0 = 1860.1 + 310j
    set_0 = {bool_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    bytes_0 = b"\x1e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    str_0 = "\\Ec#"
    bool_0 = True
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    str_0 = "G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    str_0 = "EMu/qkPZ3^\nO{H?"
    str_1 = "Z`#{2\t~15|oCVY;"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    int_0 = 3181
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    bytes_0 = b"\x93\x912\xe9\x97"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    bytes_0 = b"\xba\x1b^\xcd\xdc2=\xd6\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    float_0 = -718.65143
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    complex_0 = 1135 + 279.8551j
    dict_0 = {complex_0: complex_0}
    int_0 = -260
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    float_0 = -284.8518
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    dict_0 = {}
    str_0 = "AZ:e\t~mfB}nWL"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    set_0 = set()
    float_0 = 1576.5
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    tuple_0 = ()
    set_0 = {tuple_0}
    int_0 = -3201
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    complex_0 = 1188.237 + 3852.83j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    list_0 = []
    complex_0 = -853.93039 + 2560.72j
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    int_0 = -937
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    float_0 = -860.2596
    module_0.match(float_0, float_0)


def test_case_774():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_775():
    bool_0 = True
    int_0 = -2821
    tuple_0 = (int_0, bool_0, int_0)
    float_0 = 3691.862
    set_0 = {tuple_0, tuple_0}
    tuple_1 = (bool_0, tuple_0, float_0, set_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    list_1 = [dict_0, list_0]
    list_2 = [list_1, list_1, list_1]
    module_0.match(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_777():
    int_0 = -3112
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    complex_0 = -1485.3228 - 667.54j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    str_0 = "^3:A!o3(V\rJ)w 0X"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    bytes_0 = b"\xc2\x05\xa1\x02\xb6\x15\x82\x03\x91w\x98U\x05\xb6\xa2\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    int_0 = 11
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    int_0 = 2530
    tuple_0 = (int_0,)
    set_0 = {tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    int_0 = 1149
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    float_0 = 1665.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    bytes_0 = b"\x8b>"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    complex_0 = -4481.33 + 779j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    float_0 = -1957.512
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    str_0 = "&P6@!"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    int_0 = 1612
    tuple_0 = (int_0, int_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    bytes_0 = b"\x12\x01J%\xf5\x8b"
    tuple_0 = (bytes_0, bytes_0)
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    str_0 = "ex\x0c-4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    float_0 = -1152.16
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    int_0 = -1474
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    str_0 = "[M9|1[EY}BK"
    int_0 = -22
    module_0.match(str_0, int_0)


def test_case_798():
    pass


@pytest.mark.xfail(strict=True)
def test_case_799():
    int_0 = -2498
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    bytes_0 = b"\xa6 \xaa\xfd\x0boe\x0e\xc8\x1d\xa9[E\xe0E\xba\x84}\xaag"
    complex_0 = -1018.27825 + 121.13j
    bool_0 = True
    tuple_0 = (bytes_0, complex_0, bool_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    none_type_0 = None
    set_0 = set()
    list_0 = [set_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    int_0 = 2068
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    int_0 = 1994
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    str_0 = "zet.zDY`JIz}&|<_l+>|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    int_0 = -70
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    float_0 = 1001.53
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    float_0 = -5511.68943
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    bytes_0 = b"\x1ae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    str_0 = "WaAyB52zJ8TBAqwFdG"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    bytes_0 = b"\x1f\xa6\x18M\xcb\x7f\xc2\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    str_0 = "R||"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    int_0 = -1933
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    int_0 = -262
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    float_0 = 834.523
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    bytes_0 = b"\xbb\xd2\x8d\x15P\x988\x15\xfb\xdas.\x9f\x9b\xbe*\x0b"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


def test_case_823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_824():
    str_0 = 'TKgq^QZ?t7ou~N$L"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    bytes_0 = b"J\xd9z\xd1-\xc2\xfc\xbb\x17@\xcb\xfa\x15Y\xb78"
    dict_0 = {bytes_0: bytes_0}
    dict_1 = {bytes_0: bytes_0, bytes_0: dict_0}
    int_0 = 435
    module_0.match(dict_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    float_0 = -1291.0
    module_0.get_new_command(float_0, float_0)


def test_case_827():
    pass


@pytest.mark.xfail(strict=True)
def test_case_828():
    bytes_0 = b"\x07\xf9\xf0"
    module_0.match(bytes_0, bytes_0)


def test_case_829():
    pass


@pytest.mark.xfail(strict=True)
def test_case_830():
    int_0 = -477
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    str_0 = "O+[Y>`Lfr}mX]\x0bH"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    float_0 = -2455.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    int_0 = -2143
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    float_0 = -2129.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    str_0 = 'j"`Iu9?*+kp^'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    int_0 = 2058
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    str_0 = "X!]=\x0c"
    bytes_0 = b"K"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    str_0 = "QI43=O\x0bU]/o@wn}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    int_0 = -5002
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    float_0 = 2903.324
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    bytes_0 = b"\x8f\x1eH\xfe\x0c\xc3>De\xe0%\xf2\x8c"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    float_0 = -2063.3771
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\xc4L-\x01\xa7\xa5\xb99\xa5\x96\x9e\xa1\xbb"
    list_1 = [list_0, bytes_0]
    bytes_1 = b"wdHt[\xf6\xef"
    set_0 = {bool_0, bytes_0, bytes_0, bytes_1}
    module_0.match(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    bytes_0 = b"\xdcx\xfbi\xaa\xe9\xa4#\xde"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: list_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    complex_0 = -2135.3025 + 4377.1621j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    complex_0 = 2071.2 - 2094.53j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    str_0 = ""
    str_1 = "0.:$eASVXXk_Q{/.Tu"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1}
    list_0 = [dict_0, str_1]
    dict_1 = {}
    module_0.get_new_command(list_0, dict_1)


def test_case_851():
    pass


@pytest.mark.xfail(strict=True)
def test_case_852():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    str_0 = "/oef%SMl,BR(Z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    str_0 = "17F4$C_c8l0[\x0c"
    str_1 = "9^HtYnVM;v<5"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    float_0 = 3252.18
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_857():
    pass


@pytest.mark.xfail(strict=True)
def test_case_858():
    int_0 = 2174
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    int_0 = 478
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    complex_0 = 1034.36379 - 2581.794j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    int_0 = -926
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    int_0 = 1804
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    str_0 = "aAhU4qb9g#"
    complex_0 = 1729.68 + 1610j
    dict_0 = {str_0: str_0, complex_0: complex_0, complex_0: str_0}
    bytes_0 = b"\xd6\x18\xfc2\xfe8\xd4\xf5\x1f\x1dMJ"
    tuple_0 = (str_0, complex_0, dict_0, bytes_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    int_0 = -4771
    list_0 = [int_0, int_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


def test_case_870():
    pass


@pytest.mark.xfail(strict=True)
def test_case_871():
    set_0 = set()
    tuple_0 = ()
    tuple_1 = (set_0, tuple_0)
    object_0 = module_1.object()
    list_0 = [object_0, tuple_1, tuple_0, set_0]
    complex_0 = -729 - 871.919j
    tuple_2 = (tuple_1, list_0, complex_0)
    module_0.match(set_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_872():
    complex_0 = -1305.212 - 1415.42j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    float_0 = -104.36283
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    int_0 = -872
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    int_0 = -1428
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    bytes_0 = b"\x8d\xbc"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    complex_0 = -63.314225 + 542.825j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_879():
    pass


@pytest.mark.xfail(strict=True)
def test_case_880():
    int_0 = 1514
    module_0.match(int_0, int_0)


def test_case_881():
    pass


@pytest.mark.xfail(strict=True)
def test_case_882():
    str_0 = "]~nP~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_884():
    pass


@pytest.mark.xfail(strict=True)
def test_case_885():
    int_0 = -1724
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    int_0 = 372
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    int_0 = 342
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    bytes_0 = b".\x81\xc3\xf0"
    module_0.match(bytes_0, bytes_0)


def test_case_889():
    pass


@pytest.mark.xfail(strict=True)
def test_case_890():
    str_0 = "~b*iR?%n-jJ!lfPGXh}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    int_0 = -10
    list_0 = [int_0, int_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    bytes_0 = b"\\BY\xdf7\xfc\xcd\xd2\xa4\x8b("
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    bytes_0 = b"2\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    str_0 = "nERS3EXC]0UjJ5"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    int_0 = 384
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_0, bool_0, bool_1, bool_1}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    bytes_0 = b"sJt>^"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0, bytes_0, tuple_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    str_0 = "4w5aM'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    int_0 = 1839
    tuple_0 = (dict_0, int_0, int_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    str_0 = "[}%\rG0}!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    complex_0 = 1032.65634 + 549j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    float_0 = 541.943938
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    bool_0 = False
    int_0 = -786
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    float_0 = -158.624
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    int_0 = -1776
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    none_type_0 = None
    int_0 = 92
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    int_0 = -2739
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    bytes_0 = b"\xbcP?\x08\xd9\xcc\x0f"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    float_0 = -1204.4
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [float_0, set_0, float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    str_0 = ":ZmY69Yzu'\\'>Ez,P"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    str_0 = "M1?<kO"
    str_1 = "lS\r,"
    str_2 = "y"
    dict_0 = {str_0: str_0, str_0: str_1, str_2: str_2, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    int_0 = -3722
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    str_0 = "-l\rL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    bytes_0 = b"\xf17ki\xaf\xa77y"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    float_0 = -378.0
    str_0 = "9~h\x0byzTNqtCvf$"
    dict_0 = {float_0: float_0, float_0: float_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_919():
    pass


@pytest.mark.xfail(strict=True)
def test_case_920():
    str_0 = "#an\x0cS~M2YX;c*G`"
    module_0.match(str_0, str_0)


def test_case_921():
    pass


@pytest.mark.xfail(strict=True)
def test_case_922():
    none_type_0 = None
    str_0 = "{"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    str_0 = '4ZuS-""z'
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    bytes_0 = b"\xeb\xb8G\xbf\x89\xdc\xa2\xc5oL\xb9d\x8a\xdb|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    int_0 = -388
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    float_0 = 1376.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    complex_0 = 358.7 + 1071.5768j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    float_0 = 1327.2309
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    bytes_0 = b"\xe89\xd5\xd2,\xe2\x07"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    str_0 = ";,B=t{k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    bytes_0 = b"\x8d\xbbB\x18O"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    bytes_0 = b"\x1f%~\t\xcc\xfd\xd7"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    float_0 = 1755.405
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    int_0 = -1048
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    int_0 = 2228
    str_0 = "x)zkOZs\rJe~ksw,x|"
    module_0.get_new_command(int_0, str_0)


def test_case_940():
    pass


@pytest.mark.xfail(strict=True)
def test_case_941():
    str_0 = "e1%z'[%tDX{hc"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    list_0 = [bool_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    str_0 = "Hn>R}FE&iHG+"
    str_1 = "X4&'jWU7oUb,a)8'"
    str_2 = "BU:SydU"
    str_3 = ")~EJOMzNaOEc|J\x0bo"
    dict_0 = {str_0: str_1, str_0: str_1, str_2: str_0, str_3: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    int_0 = -4298
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    str_0 = 'Sp\n_4H XHZ[%"'
    str_1 = ";AO+ueJ-PylR=aFm\x0c"
    set_0 = {str_0, str_0, str_0, str_1}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    bytes_0 = b"\xc1\x0b\xf3\xf7\xb4F\xefg\xde"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    float_0 = 684.6952
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    float_0 = -257.786
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


def test_case_949():
    pass


@pytest.mark.xfail(strict=True)
def test_case_950():
    int_0 = 1171
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    int_0 = -2571
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    str_0 = "YeM$hOBF\t+I\\>!#~!"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    bytes_0 = b"\xf9\xf5l\xe5\x1e)|\xc8\x02&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    complex_0 = -1514.31116 + 3082.70784j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    bytes_0 = b"\x91\xc7\xf5\x9cS"
    module_1.object(**bytes_0)


def test_case_956():
    pass


@pytest.mark.xfail(strict=True)
def test_case_957():
    bytes_0 = b"\xcb\xf1\xc3\x93\xe6\xdd\xe6\xdd\x91"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    bytes_0 = b"@J\x8b6A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    int_0 = 1499
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    int_0 = -1213
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    str_0 = ")Nzy@b'\"qxRMSIn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    str_0 = ' 0n4o\x0b|Sgo"[A~@V<a'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    bytes_0 = b"\xca\xa2\x98\xf1|w\xe9\x01\xb1\xa3m\x08\x9bw`\xc3y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    float_0 = -1275.254
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    bool_0 = False
    tuple_0 = (bool_0,)
    str_0 = ""
    list_0 = [tuple_0, tuple_0, tuple_0, str_0]
    str_1 = ",S{_vQ_>~$| Rj-$+a"
    dict_0 = {str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    str_0 = "28l0Dh.W&"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    float_0 = -2015.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    str_0 = ")a$$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    bytes_0 = b"\x82\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    int_0 = 1608
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    str_0 = "'<\"]J\rj*7suA'Z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    int_0 = -854
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    int_0 = -2394
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    bytes_0 = b"\r\x08[\x19*\x82a\xdf W\x86(\x8b"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    int_0 = -2877
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    str_0 = "^8DJB-cMB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    str_0 = "(l;1Hw2J/%/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    int_0 = -383
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    str_0 = "U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    bytes_0 = b"\x8d\x99"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    str_0 = "M:IP:"
    list_0 = []
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    complex_0 = -2823.75239 + 4301.374j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    float_0 = -1539.123271
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    str_0 = "X!hv\n$7S.Ro"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    complex_0 = -252.59 + 2731.3089j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    float_0 = 759.66
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    int_0 = -311
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0]
    str_0 = ""
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    complex_0 = 323.604497 - 1480j
    bytes_0 = b"\x1d\xc9L\xae\x19\xbf\xfc\xde'$\xf4\x07\xa5\xd6\x9c`\xb3\x15\xb3"
    dict_0 = {}
    bool_0 = True
    tuple_0 = (bytes_0, dict_0, complex_0, bool_0)
    list_0 = [complex_0, complex_0, tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    int_0 = 888
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    int_0 = -457
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    bytes_0 = b"\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    str_0 = "IYm36"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    bytes_0 = b"\x84\x93\x8e\xf8\xe7\xd9V\xcfW\x16\xef\x02\xd2"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    bytes_0 = b"tf\xb8\xf0\x07~\x8e\xc7F[\x84\x80@\xbe\x15\x980\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    str_0 = "5~rQwU.pzX\rxJ1<NqH"
    bool_0 = True
    int_0 = -1739
    dict_0 = {str_0: str_0, str_0: bool_0, int_0: bool_0, bool_0: int_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    int_0 = 1659
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_1004():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1005():
    str_0 = "mO\nhYABam1ai9o"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    int_0 = -2276
    list_0 = [int_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    float_0 = -2865.64675
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    float_0 = -1597.189083
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    str_0 = "~6KY-Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    float_0 = 1635.7653
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    str_0 = "SGX@\tr$q94DYyK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    bytes_0 = b"\xaa\xe7\xad{\xdb<\xfb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    float_0 = -2426.880239
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    str_0 = "57C;\nZf"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    bytes_0 = b"\xf6]\x08\xa7\xea\xe8\x89\xcdI\xa8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    list_0 = []
    str_0 = "\x0bq1eg/HclB4K-Ejh"
    dict_0 = {str_0: list_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    bool_0 = True
    int_0 = 2119
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    list_0 = [dict_0, dict_0, int_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    str_0 = "ib\x0b)T~Id`#\r\\FKJJCb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    int_0 = -1025
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    float_0 = 820.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    str_0 = "GZW^"
    module_0.match(str_0, str_0)


def test_case_1028():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1029():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    complex_0 = -3286.89915 - 1029.12j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    int_0 = 2625
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    int_0 = -506
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    int_0 = 189
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    int_0 = -4185
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    int_0 = 2186
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    int_0 = -168
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    int_0 = 886
    int_1 = 712
    tuple_0 = (int_0, int_0, int_1)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    float_0 = 1057.9525
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    int_0 = -1828
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_1044():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1045():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    bytes_0 = b"\xcc\x97\xde\xf4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    int_0 = 3281
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    str_0 = "\\=M1KJ(J(%5UFf2?+V]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    float_0 = 873.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    str_0 = "p5%ZMQx5)\t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    str_0 = "~4{r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    float_0 = -2464.56882
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    int_0 = -3484
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    bool_0 = True
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    int_0 = -2880
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    int_0 = -127
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    bytes_0 = b"y\x8f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, bytes_0, bytes_0]
    dict_0 = {}
    tuple_0 = (bytes_0, list_1, dict_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    int_0 = -4557
    list_0 = [int_0]
    bool_0 = True
    tuple_0 = (int_0, list_0, list_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    float_0 = -1666.9798
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    str_0 = "k-PCF6t#;#~M)Z"
    list_0 = [str_0, str_0, str_0]
    bool_0 = True
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    bytes_0 = b"4I|\x91\xbe\re\x98/K\x03;a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    int_0 = 1410
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    float_0 = 6414.7316
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    bytes_0 = b"\xd5\xdf\xc6}F\xb7\xfa\xfdQ!\x8d"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    int_0 = -845
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    str_0 = "NFyyr.BL_Y8&\tDxg!i'|"
    float_0 = -2083.538
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    bytes_0 = b"Kv\x05nI\xb7\xaa\xe1\xb99\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    int_0 = -2149
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    dict_0 = {object_0: list_0, object_0: object_0}
    tuple_0 = (dict_0, list_0)
    int_0 = -3169
    tuple_1 = (list_0, tuple_0, list_0, int_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    str_0 = '5aIS"mHOP'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    bytes_0 = b"U\xf0c\x8c\x90\xdbx\x80\xf2P\x9c \xcf\x9e\x93\xe8\xae?"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    bytes_0 = b'\x8dH\x93\xebT-.\x80\x1e(?\x0ckP\xbf\xf0"\xd7G'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    str_0 = ")hmCX6FN\x0c&Z}@6~am[UE"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    int_0 = 2684
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    bytes_0 = b"\x17}\xc7mT"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    str_0 = "Pnk3<LG$%pIt!nr2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    int_0 = -61
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    str_0 = "WQC,=,yi("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    str_0 = '$C~k \n,pL"E3f*>'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    str_0 = "?R9)"
    str_1 = "\te&lrsD"
    bytes_0 = b""
    str_2 = ""
    dict_0 = {str_0: str_0, str_1: bytes_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    str_0 = "/=U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    bool_0 = True
    str_0 = "`"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    bool_0 = True
    str_0 = "e\rG48Jx/p1:"
    set_0 = {bool_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    bytes_0 = b"fK&\xe0v5I"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    int_0 = -455
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    int_0 = 1485
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    bytes_0 = b"\xc4\xf21\x0ca\x83Q\xcb\\\xab'\x90\xd0"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    set_0 = set()
    bool_0 = True
    list_0 = [set_0, bool_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    bytes_0 = b"\x94A"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    complex_0 = 2516.47928 + 2457.01486j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


def test_case_1102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1103():
    bool_0 = True
    float_0 = -2889.9137
    list_0 = [bool_0, bool_0, float_0]
    module_0.match(list_0, bool_0)


def test_case_1104():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1105():
    float_0 = -802.37652
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    bytes_0 = b"\xb4\x0b\xd1\xad\x8b\x95\x8e8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    float_0 = -4212.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    complex_0 = 1102.09 - 1238.965j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    bytes_0 = b")\x9e\xe8\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    float_0 = 1224.7368
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    str_0 = "Q9|HV=2e\r"
    dict_0 = {str_0: str_0}
    bool_0 = True
    tuple_0 = (str_0, dict_0, bool_0)
    list_0 = [str_0, tuple_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    bytes_0 = b"\xd0"
    str_0 = "\rm"
    dict_0 = {str_0: bytes_0}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    complex_0 = 443.8 + 1314.73102j
    set_0 = {complex_0, complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_1117():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1118():
    str_0 = "\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    int_0 = -2281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    str_0 = "Ed\x0c[A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    str_0 = "eEgG7VZ6`` 0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    float_0 = -1219.0
    module_1.object(*float_0, **float_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    str_0 = "mI6DHMa)<G*D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    bytes_0 = b"\xc7\xf7Z\xb9;\x9dG\xab\x88\xf9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    int_0 = 188
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    int_0 = 2219
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    int_0 = 3009
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    bytes_0 = b"f\xbe,eZ\xeb\x1cg\xe2\xb2\xf4\x98\xd27\xcf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    complex_0 = 679.8 + 2151.240675j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_1135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1136():
    str_0 = "=*Q~,\nWwb7]=K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    complex_0 = -3491 - 1560.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    float_0 = 2584.4592
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_1141():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1142():
    float_0 = 1592.2314
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    complex_0 = 2671 + 4526.5001j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    int_0 = 1116
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    complex_0 = 1678 - 1559.7j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    bytes_0 = b"\x10\x87er\xf8k2\xc6\xa8\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    str_0 = "zJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    bool_0 = False
    str_0 = '"K'
    list_0 = []
    bytes_0 = b"C"
    tuple_0 = (bool_0, str_0, list_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    bytes_0 = b"*\x7fB\xe8\xe2\xcd\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    str_0 = "YNpa\rb.?cA\n6FP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    int_0 = -1110
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_1152():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1153():
    bytes_0 = b"\x11\x1ae9\x8a"
    float_0 = -2280.22
    dict_0 = {bytes_0: bytes_0, bytes_0: float_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    float_0 = -437.584
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    int_0 = 762
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    str_0 = ":L/ho:\tAZt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    str_0 = "EE~[Q{E\x0c!HGcBz8@bc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    none_type_0 = None
    int_0 = -1284
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    str_0 = "M`|c\r%=a"
    str_1 = "TT*/<]@:.s-`#\\M7!m%p"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    bytes_0 = b"H\x99|\xad\x8f\x87wF\x0c\xf2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    list_0 = []
    float_0 = -1275.626
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    list_0 = []
    tuple_0 = (list_0,)
    float_0 = -2650.45878
    bytes_0 = b"?\xe1"
    tuple_1 = (tuple_0, float_0, bytes_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    bytes_0 = b"\xb7|I9\xc2\x1cB6\xc3\xf4\xf7c}\xabT"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    float_0 = 1530.532
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    str_0 = ""
    str_1 = "NnAGV`f_DcD?n*x5y>t"
    str_2 = "X\\YfZS\x0b_D[3\r_auR]"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    complex_0 = -1727.2224 - 990.02j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    bytes_0 = b"\xd42O$/w\xb2T"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    float_0 = -1752.7781
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    bytes_0 = b""
    list_0 = []
    tuple_0 = (bytes_0, list_0, bytes_0, list_0)
    list_1 = [list_0, tuple_0, bytes_0]
    module_0.get_new_command(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    str_0 = "U\x0cp\x0b%\x0c:-N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    int_0 = 1341
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    str_0 = "A4\t[UA~,9/$(4\x0cP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    str_0 = "qwbM_f\\].sO\n(2sjX}V"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    bytes_0 = b"'+uy\x80\xd8\xa9C\x9f\xee\x01}\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    float_0 = -769.673
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    str_0 = "W\t\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    bool_0 = True
    str_0 = ",T%o"
    str_1 = "=l.eK_+nL"
    dict_0 = {str_0: bool_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    float_0 = 2089.0
    module_0.match(float_0, float_0)


def test_case_1180():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1181():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    int_0 = -1116
    tuple_0 = (int_0, int_0)
    bytes_0 = b"e\xa4H\xa7@j'G2\t\xc8S\xd1\xce\x15\x92\x04a\xe9\r"
    list_0 = [int_0, bytes_0]
    tuple_1 = (int_0, int_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    str_0 = "'"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    bool_0 = True
    int_0 = -3053
    set_0 = {bool_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    int_0 = 1635
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    int_0 = -3088
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    bool_0 = True
    int_0 = -2158
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    str_0 = "6K;{S-'MP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    float_0 = 659.5035
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    float_0 = 39.44055
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    int_0 = 1547
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    str_0 = ",$:QAd>d3L8TT"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    int_0 = 329
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    str_0 = "j[Y^85Y,[j"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    int_0 = -1484
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    str_0 = ")ugp("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    bool_0 = False
    str_0 = "3^s>"
    module_0.match(bool_0, str_0)


def test_case_1199():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1200():
    bytes_0 = b"y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    bytes_0 = b"\x07C\x99Sb\xca^M\x8aG="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    none_type_0 = None
    set_0 = {none_type_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    bytes_0 = b"s2\x88\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1204():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1205():
    int_0 = 1785
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    bytes_0 = b"Z\xe7\x91,"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    complex_0 = 512 + 126j
    float_0 = -3196.48894
    list_0 = []
    tuple_0 = (complex_0, float_0, list_0)
    tuple_1 = (tuple_0, float_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    int_0 = -3496
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    float_0 = -679.823
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    bytes_0 = b'\x18\x85\xa9S\xf0\xb7\xf2\x95J\x121"@H\x98TvB\x84\n'
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    int_0 = 1905
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    int_0 = -52
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    str_0 = "*\\_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    bytes_0 = b"i\xc5\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    complex_0 = -3021.519 + 293j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    none_type_0 = None
    bytes_0 = b"\r\x0be\xc6~y"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    bytes_0 = b"\xb1$\x8auX\xec\xe0\xcc\xe1o\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    bytes_0 = b"\xab\xb8\xf0'ji"
    bytes_1 = b"\x05\xd2q\xbc}Q\xbeP\xf1\xb7s0\xf4I\xf8\xbf"
    module_0.match(bytes_0, bytes_1)


def test_case_1222():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1223():
    bytes_0 = b"%\x94\\\xf1\xae\xad\xef\x9d\x87\xfd\xea{\x02\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    int_0 = -2646
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    tuple_0 = ()
    int_0 = 86
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    str_0 = "#n?V@VDk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    bytes_0 = b"p{\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    str_0 = "3`*EBr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    float_0 = 149.553094
    set_0 = {float_0, float_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    str_0 = "%Rtzc%7\td&"
    set_0 = {str_0, str_0, str_0, str_0}
    bytes_0 = b""
    bool_0 = True
    bytes_1 = b'5\xa8\xbf\xa1\x1c\xf1\xef@\x16e\x97\xbf\x1e\xb2\x1e\x86"\xa0'
    tuple_0 = (bool_0, bytes_1, bool_0, bool_0)
    tuple_1 = (str_0, set_0, bytes_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    bool_0 = False
    float_0 = -240.789891
    module_0.match(bool_0, float_0)


def test_case_1233():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1234():
    bytes_0 = b"m\xfdO\xa9y\xa4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    complex_0 = 45.3075 - 3081.40273j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    str_0 = ""
    bytes_0 = b"\xc8\xedFQ9\x95k\x05\xe2JeY"
    tuple_0 = (str_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    float_0 = -2328.8927
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    int_0 = 869
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    bool_0 = False
    bytes_0 = b"\x89\xde\xf7\xdbBT\xf6\xfe\x94\xee\xf9J>\xdb"
    bool_1 = True
    dict_0 = {bool_0: bytes_0, bool_1: bool_1, bool_0: bool_1}
    int_0 = 1083
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    bytes_0 = b"_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    complex_0 = -3728.0364 + 1923.171901j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    bytes_0 = b"\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    bytes_0 = b"\xcc\xe1\xe0\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    int_0 = -2576
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    bytes_0 = b"\xb3\xba\x00\x8b\x81KA/\xa6w\xe9\x81B\x14G\xfco5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    complex_0 = -1680.9083 + 2188.689613j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    float_0 = -2446.78421
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    float_0 = 1608.865
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    str_0 = '"\x0c*g9C'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    int_0 = 2276
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    bytes_0 = b"e\x14\xe0\xeatz\xdc4,\x1b\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    float_0 = 2104.142
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    str_0 = "]pvM6V."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    str_0 = ".k\"'>7h lbuX-D"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    float_0 = 314.9501
    int_0 = 338
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (float_0, int_0, float_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    complex_0 = 3465.8134 + 657.16j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    str_0 = "5%#{*ahusP>!w\nD\x0bU{2r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    str_0 = "&b5Bi({/bEec"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    int_0 = -189
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    str_0 = "lq59~!-wP$fk\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    float_0 = 159.5
    module_0.match(float_0, float_0)


def test_case_1268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1269():
    int_0 = 715
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    bytes_0 = b"\x8cI\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    str_0 = "/9,.*\rr^"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    str_0 = "Dw<]i*0W-#c86"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    int_0 = -1143
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bytes_0 = b'\x84\xd835qQ\xc6"\xbeS\x16)%w\xaa\xef'
    bool_0 = False
    int_0 = 1089
    float_0 = -3210.78573
    tuple_0 = (bool_0, bytes_0, int_0, float_0)
    float_1 = -2114.554
    tuple_1 = (tuple_0, float_1, tuple_0)
    dict_0 = {bytes_0: bytes_0, bool_0: bytes_0, tuple_1: int_0}
    float_2 = -208.0
    int_1 = -936
    tuple_2 = (dict_0, float_2, tuple_0, int_1)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    bool_0 = True
    int_0 = 3269
    module_0.match(bool_0, int_0)


def test_case_1278():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1279():
    float_0 = 3912.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    none_type_0 = None
    complex_0 = 1197 - 1187j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    complex_0 = 1358.12055 + 1260j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    int_0 = 141
    float_0 = -1079.0
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    str_0 = "f2%2'W1?\x0be]Tc\"bbh:"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    complex_0 = -438.807528 + 59.3909j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    float_0 = -235.0
    float_1 = 633.86875
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    bytes_0 = b"}\xa6M\x1cP\xc7\xae\n1xvl\x03\xf9\x1f"
    str_0 = "`B)GM#w?:N,&hMZ*{J "
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    str_0 = "lm(g{f\x0c0!yMH"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    bytes_0 = b"\x16"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    bool_0 = False
    list_0 = []
    list_1 = [bool_0, list_0, bool_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    bytes_0 = b"\xec\x12EY\x1b\x16\xaf\xa0-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    str_0 = ":M2-s1dt0"
    dict_0 = {}
    dict_1 = {str_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    bytes_0 = b"|\x04\x07e\x0fQ\xabv`\xa3\x11"
    list_0 = [bytes_0]
    int_0 = 1102
    list_1 = [list_0, int_0]
    tuple_0 = (list_1,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    int_0 = 2389
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    bool_0 = False
    str_0 = 'nuGa\n6d[S(+#F"CFYR'
    dict_0 = {bool_0: str_0, str_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    none_type_0 = None
    bytes_0 = b"}!\xf1DQ\xdf\xf0\xa6v\\,g\x8b\xfa\xee\xda\xc0<"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    float_0 = 2544.138314
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    float_0 = -2394.726
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    float_0 = 99.77
    float_1 = 1133.01362
    list_0 = [float_0, float_0, float_0, float_1]
    module_0.match(list_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    bytes_0 = b"\x0f\xe0w`7\xb7]yw\x98\x91O\x8e\x8e\xd9!\x12"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    str_0 = "*+SJ@YrWg<?m"
    int_0 = 1741
    dict_0 = {str_0: int_0}
    list_0 = [dict_0, dict_0, dict_0]
    dict_1 = {}
    module_0.match(list_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    float_0 = -240.5931
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    str_0 = "j!%Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    float_0 = 2846.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    int_0 = -2329
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    bool_0 = True
    complex_0 = 3545.967 - 3287.19j
    tuple_0 = (bool_0, complex_0, bool_0)
    bool_1 = True
    tuple_1 = (tuple_0, bool_1)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    str_0 = "}W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    int_0 = 4498
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    complex_0 = 2284.168 - 296.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    bytes_0 = b"E\x10`v\x87\xb2\xda\xe5\xeb\xedGO\x1c"
    bool_0 = True
    bytes_1 = b"\x18\x99"
    tuple_0 = (bytes_0, bool_0, bytes_1)
    set_0 = {bytes_1, tuple_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    bytes_0 = b"\x83\x18\xc8\xe3\xa3~2\x9a\xbe\x0b&\xe3\x06\xb0\xa9.\x08\xcav("
    list_0 = [bytes_0, bytes_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    str_0 = ".r0hir^"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    bytes_0 = b"j\xa1\t\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    int_0 = -3315
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    str_0 = "M`E0FEr&\x0b4Y_"
    float_0 = -581.2732
    list_0 = [float_0, str_0]
    tuple_0 = (str_0, float_0, list_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    complex_0 = -178.8 + 3140.85j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bool_0 = True
    bool_1 = False
    str_0 = "Jbh3\\~|e'(w0v+XyOc%"
    tuple_0 = (bool_0, bool_1, str_0)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    str_0 = ""
    set_0 = {str_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    float_0 = 1018.66243
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    str_0 = "-Uf,Jjq|\nuNjFoD{`\tO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    str_0 = 'UG!}\r"u\nvDM+:(jCo'
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    bytes_0 = b'\xa0\x1c"\xc4\xce\xc5\x08 \r>p\x91\xda\xd0\xabB\xc1'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    str_0 = "h"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    bytes_0 = b"\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    bytes_0 = b"\xe0\x99c)\x1e:4\xf5\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    bytes_0 = b"\xbc\xcd\x9b\x85\xf0\xaf\x7fgX6\xf4!\\X\xba\x19"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    int_0 = -2346
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    int_0 = -1624
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    bytes_0 = b"*\xe1j\xfb\xd4\x19\x14\xc1\x19\xd0\x9fZ("
    none_type_0 = None
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    set_1 = set()
    str_0 = "Ev"
    tuple_0 = (bool_0, set_0)
    int_0 = -2040
    tuple_1 = (set_1, str_0, tuple_0, int_0)
    list_0 = [set_0, bool_0, set_1, tuple_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    bytes_0 = b"@\x04\xdd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    str_0 = "p]2(.)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    float_0 = -2129.778
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    str_0 = "wCn:8+{!G>NJA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    int_0 = -3452
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    bytes_0 = b"\x04\xea?\xa7}\x88BZH.\xab\xe8a\xbe\xbd\xdb\xab8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    float_0 = -354.69958
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    str_0 = "Uzl*=$"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    str_0 = "[^,M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    str_0 = 'GYLD\x0c":JY+C2vL@zM3_'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    float_0 = -1145.63
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    str_0 = "U>?)0nW^IUix"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    str_0 = "DD=J)Xu2K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    int_0 = 911
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    str_0 = "o``nY@{jQE~>g,Wl"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    str_0 = "$K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    str_0 = 'h"{\\'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    str_0 = "u(0|Ed\x0bqT=L("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    int_0 = 6
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    str_0 = "oc^H.!5x}%rzNPWC!Ey"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    bytes_0 = b"\xd0\xc5,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    int_0 = -3469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    int_0 = -2681
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    bytes_0 = b"\x88%\xc0\x00b"
    str_0 = "a??C{ZWj%S<FZ?"
    tuple_0 = (bytes_0, str_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bytes_0 = b"r\x89\xfa\xb3\xc7\xdd\xc3\xba2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    complex_0 = 2531.25461 - 999.861973j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1367():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1368():
    tuple_0 = ()
    bytes_0 = b"\x1a\xa4\x10\x83\x1b\xe9o\xe9,"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    int_0 = -677
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bytes_0 = b"2P\xb8="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    bytes_0 = b"\xf2M\xe9Paj\x04?,\xd8x\x7fc\xfem"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    str_0 = ";F)X,}"
    str_1 = '{r"Y'
    bool_0 = False
    set_0 = set()
    tuple_0 = (str_0, str_1, bool_0, set_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    str_0 = ""
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    int_0 = 561
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    bool_0 = False
    str_0 = "%yVa\tYcGb1=gTWrh"
    complex_0 = -45.910992 + 1818.54j
    list_0 = []
    object_0 = module_1.object(*list_0)
    dict_0 = {bool_0: bool_0, str_0: str_0, bool_0: complex_0, object_0: list_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    bytes_0 = b"\xd2\xea\xc3.Bmt\xa2\x7f\x9an\x89\xf8\xce"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    bytes_0 = b"\xc95O\xfc5I\xddy\x8b\xd2\xce\xc4\x193mn"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    list_0 = []
    str_0 = "wea'dw:crq"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    str_0 = "eLi:&\x0b7lYwPg{;"
    str_1 = "a-+w4~xnk,*`"
    str_2 = ""
    str_3 = "4Ux"
    bool_0 = False
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_3: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    complex_0 = 294.54 - 1871.2j
    set_0 = {complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    complex_0 = -1379.9231 + 1581.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    str_0 = 'B"v44Eja?H'
    str_1 = 'sf=Vb{rQI"@S.).L4Ds&'
    str_2 = "1nSuJi?RVk(&"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    str_0 = "*3*3@-r.~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    int_0 = 2302
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    int_0 = -1450
    bytes_0 = b"\x82\xec\xa2"
    int_1 = 2220
    tuple_0 = (int_1,)
    dict_0 = {int_0: int_0, bytes_0: int_0, tuple_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    complex_0 = -1408 + 531.9933j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    float_0 = 1612.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    set_0 = set()
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    float_0 = 3587.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    float_0 = 1920.0
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    bool_0 = False
    int_0 = 1497
    tuple_0 = (bool_0, int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    str_0 = "+-lolp\rf_(93n78C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    bytes_0 = b"Y\xb2\xa0;L@g\x0f\n\xf0N\xe3y\xe4\xa0J"
    list_0 = [bytes_0]
    list_1 = [bytes_0, bytes_0, bytes_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    bool_0 = False
    int_0 = 1269
    dict_0 = {bool_0: int_0, int_0: int_0, bool_0: int_0, int_0: bool_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    int_0 = -1786
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    str_0 = "}DnR/<|~$\\\rJ:\t;Jz `"
    str_1 = "W,*&\tDh3<SV"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, str_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    complex_0 = 272 + 355.88447j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    int_0 = -99
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    tuple_0 = (int_0, dict_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    bytes_0 = b'8\x0eO\xff\xa3\x92\xebY"\xd5K>\xecI\xe3\xa6*'
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1405():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1406():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_1408():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1409():
    str_0 = "Go#W:,Q:u8{Z92 )}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    bytes_0 = b"v\xce\xbc&\xe1\x9f\xc7<9*H\x18\xde91{E\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    str_0 = "\nQ8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    int_0 = 667
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    bytes_0 = b"\x84\x0fQAb\xd9\x1er\x0c@\x8ek\xddf"
    object_0 = module_1.object()
    module_0.get_new_command(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    int_0 = 621
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    str_0 = "b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    bytes_0 = b"\x9fN\x16\t\xab\xfb\xe0\xb2\x9fShhM\xb5\x02\x03\x8d\xbauZ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    int_0 = 311
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    float_0 = 2983.994
    module_0.get_new_command(float_0, float_0)


def test_case_1420():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1421():
    int_0 = 1324
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    bytes_0 = b"9\x04\n}\xf4\x9d\x10G\xf1J7Yc\xa3"
    float_0 = 1128.31933
    dict_0 = {bytes_0: float_0, float_0: bytes_0}
    int_0 = 918
    tuple_0 = (dict_0, int_0, int_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    set_0 = set()
    bytes_0 = b""
    module_0.get_new_command(set_0, bytes_0)


def test_case_1424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1425():
    str_0 = "I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    bytes_0 = b"\xf1\xe5\x96{h\xf8n7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    int_0 = 490
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    str_0 = "':#pn zT<r\x0c1B3\\K;Chs"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    bytes_0 = b"i\xb7\x98V\x0b7\x1e\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    str_0 = "51WxL^Ta7Nf1h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    bytes_0 = b"P"
    float_0 = -462.778
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    complex_0 = -3258.95355 + 1793.39j
    int_0 = -1742
    bool_0 = False
    list_0 = [complex_0, int_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    int_0 = 973
    list_0 = []
    tuple_0 = (int_0, list_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    int_0 = 227
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    complex_0 = -712 - 326.23403j
    str_0 = ""
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    str_0 = "j"
    float_0 = -3268.803
    str_1 = 'g"'
    tuple_0 = (str_0, float_0, float_0, str_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_1441():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1442():
    complex_0 = -3375.10987 + 2369.491198j
    bool_0 = True
    set_0 = {complex_0, bool_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    float_0 = -2563.823
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    str_0 = "-"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    int_0 = 1505
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    bytes_0 = b"C\xbd\x957\x851\xfc/4"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    bytes_0 = b"\xcfn\xe5\xcf\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    str_0 = "'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    str_0 = "j?'6aQ).BEW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    str_0 = "h&\t:#c=Yi9D\r!H=/-%mY"
    str_1 = "=I0y/"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


def test_case_1453():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    str_0 = "$e~fr#'b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    int_0 = 576
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    int_0 = -622
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    str_0 = '=b"MM"%K,8'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    int_0 = 1507
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    int_0 = 1676
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    bytes_0 = b"\xdb\x15\xfc\xe6L\x7f\xf4\xf8\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1461():
    object_0 = module_1.object()


def test_case_1462():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1463():
    str_0 = "fh,^08$x|U<f*~4"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    bytes_0 = b"\x13\n\xb2\xf1Z\xed"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    str_0 = "|2}HI~51vrMP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    complex_0 = 2509.935 + 1613j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    float_0 = -16.8
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    bytes_0 = b"\xa2\x8b\x03\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: tuple_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    float_0 = -580.24
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    float_0 = -2977.04
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    str_0 = "N`uA{v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    int_0 = -460
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    str_0 = "gf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    bytes_0 = b'q\xa0\xe9\xb3\x0c"?\xb5\xb3'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    float_0 = -2780.625583
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    str_0 = "\x0b;!kRGR@%[.SGs?tJil@"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1480():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1481():
    str_0 = "jSzr#N\x0bE`\n2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    str_0 = ":q.9v"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    bytes_0 = b"\xa1\xf1U*\xcf\xf6\xe0"
    module_0.match(bytes_0, bytes_0)


def test_case_1485():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1486():
    str_0 = "Ep\x0b,$GgX_P]!I,gBF"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: str_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    bytes_0 = b"\xc8\x93\xab]F\x80\x1fDD\xf9\xa5"
    bool_0 = False
    bytes_1 = b"w\xb3\xc5\xc5\x7f\xf3X\x1c\xc2\x9d\x8b"
    tuple_0 = (bool_0, bytes_1)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    int_0 = 1047
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    int_0 = -1120
    set_0 = {int_0, int_0, int_0}
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, int_0, set_0, tuple_0)
    str_0 = "Ynp<(u=q\\\\\\ZA"
    tuple_2 = (tuple_1, str_0)
    module_0.get_new_command(bool_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    bytes_0 = b"\xd8Z\xaf\x9fT\xbf"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    str_0 = "{9$D&AER\th\r?b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    complex_0 = -2247.79 - 915j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    int_0 = 2685
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_1495():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1496():
    none_type_0 = None
    bytes_0 = b"-\xe3"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    float_0 = 2531.296
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    bytes_0 = b"\xba2\x1d\xab\x8d}\x8f\xdd\x8e\xafY\xf5\x94/\xed\xef\xc3z\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    bytes_0 = b"+*"
    set_0 = {bytes_0, bytes_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    complex_0 = 1934.4 + 312j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_1501():
    pass


def test_case_1502():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1503():
    bool_0 = True
    set_0 = set()
    list_0 = [bool_0, bool_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    int_0 = -1718
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    int_0 = 108
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    int_0 = -271
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    int_0 = -1393
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    bool_0 = False
    int_0 = -1709
    list_0 = [int_0, bool_0, int_0, int_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    float_0 = -462.684464
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    float_0 = 631.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    int_0 = 3151
    list_0 = [int_0, int_0, int_0]
    str_0 = ""
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    none_type_0 = None
    int_0 = 1785
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    int_0 = -3554
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    bytes_0 = b"\xc9\xbc\x14\xc0\xd5\t\xc1\xb2\xf1[]\x8c\x95\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    float_0 = 1363.318743
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    float_0 = 1064.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    bytes_0 = b"\xea\xd8\x83\x16P\xf4a\x87"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    bool_0 = False
    tuple_0 = ()
    dict_0 = {}
    tuple_1 = (bool_0, bool_0, tuple_0, dict_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    int_0 = -118
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    bytes_0 = b"\xda\xe2\xa0Lo\xc6\xef\xdcm\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    bytes_0 = b"\xe4\x96"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    float_0 = 279.039246
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    float_0 = -1931.29138
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    int_0 = 1117
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.object(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    str_0 = "f\tt"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    str_0 = ')4x"{vnM$WeWk+\\-k*p'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    str_0 = 'BYQ[C^ae|":\t)PE'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    bytes_0 = b"\xb8\x93\x84\x8f\xcd\xb6"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    str_0 = " >LXKDZDVZ6$3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    float_0 = 159.5894
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


def test_case_1534():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bytes_0 = b"}\xef\xdc\xcf\xb6@\x19jjS~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    str_0 = "W?>>I\x0c2\x0cw\r;LqTV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    float_0 = -1018.326
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    str_0 = "fs"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    str_0 = "?mF2k?i"
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, list_0, str_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    int_0 = 961
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    str_0 = "\x0b7i=mbW\r[G&/"
    bool_0 = True
    bytes_0 = b"\xc9\x0f\x1f\xde\xb4\x0c\xc3\xbf\x00\xfa\\s"
    tuple_0 = (bytes_0,)
    float_0 = -3562.21505
    tuple_1 = (str_0, bool_0, tuple_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    object_0 = module_1.object()
    complex_0 = -3564.157 + 95.42379j
    module_0.get_new_command(object_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    float_0 = -2737.849
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    int_0 = -663
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    bytes_0 = b'&Nn"'
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    complex_0 = -2201.909 + 2036.957143j
    bytes_0 = b"\xb8\x18\r\xaa\xb6\xe4/\xe6r\x84\x1aS"
    tuple_0 = (complex_0, bytes_0, bytes_0)
    list_0 = [tuple_0, bytes_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    int_0 = -104
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    float_0 = 605.051
    set_0 = {float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    str_0 = "J]`I2/<y<iV`e%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1553():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1554():
    int_0 = 716
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    int_0 = -2657
    int_1 = -742
    bytes_0 = b"\xf3\xd8\xb7\xc39Z\xf6Yo"
    int_2 = 2403
    tuple_0 = (int_1, bytes_0, bytes_0, int_2)
    set_0 = {int_0, int_0, tuple_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    str_0 = "E'\ni"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    bytes_0 = b"{\x11\x90?:(\xa9F\xac\xc0\x1a&\xfa\xc1\xb9\r\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    bool_0 = True
    int_0 = 1685
    str_0 = "R"
    tuple_0 = (int_0, str_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    str_0 = ";RAf"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    str_0 = "X&,q&zy2,{X'z`xv]3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    bool_0 = True
    str_0 = "~5o-"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    bytes_0 = b"\xf7\x16e\xd3\x8dr\xebO@\x11e\x0e}"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1565():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1566():
    none_type_0 = None
    int_0 = -1953
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    complex_0 = 1550 - 217.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    float_0 = 1143.0
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    bytes_0 = b"\xa1##}\xc5\x8f\x12\xd9\x02X\x04\x9cV(\xd9\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    int_0 = 682
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    int_0 = -3058
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_1572():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


def test_case_1575():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1576():
    int_0 = 550
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    complex_0 = -2614.73836 - 2363.269j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    str_0 = '4ptd*\tW"j*Ev*|&K58M'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [bool_0, bool_0, list_0]
    list_2 = [list_1, list_1, list_0]
    none_type_0 = None
    module_0.get_new_command(list_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    float_0 = -465.7
    module_1.object(*float_0, **float_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    int_0 = 875
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    complex_0 = 662.8357 + 198.34j
    list_0 = [complex_0, complex_0]
    list_1 = [complex_0, complex_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    bytes_0 = b"\x1c\xd6\x93J\n\x15w\x03\x1cy\xccL"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    int_0 = 1192
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    str_0 = "<"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


def test_case_1588():
    pass


def test_case_1589():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bool_0 = True
    complex_0 = -480.89945 + 1102.98j
    str_0 = "`E\n"
    tuple_0 = (complex_0, str_0)
    tuple_1 = (bool_0, tuple_0)
    tuple_2 = (tuple_1, complex_0, bool_0)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    complex_0 = -1455.4 + 65.54472j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    bytes_0 = b"g\xa5F"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    int_0 = -2246
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    str_0 = "U^q\r&D{0`+;W\\k-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    str_0 = "/6V5HMQr$6bSot"
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {str_0: list_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    none_type_0 = None
    str_0 = "tZO3 T.fc1RRV5"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    str_0 = "rYjm|Tk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    complex_0 = -1031.68 + 776.686j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    int_0 = 809
    tuple_0 = ()
    set_0 = {tuple_0}
    tuple_1 = (int_0, tuple_0, set_0, tuple_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    object_0 = module_1.object()
    bytes_0 = b"s{O\xd7>\xa7D\xf7\xe6\xda8\x8f~\xf1}E"
    set_0 = {object_0, object_0, object_0, bytes_0}
    module_0.get_new_command(set_0, object_0)


def test_case_1602():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    complex_0 = 122.5902 + 1438.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    int_0 = -544
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    bool_0 = True
    tuple_0 = ()
    str_0 = "z:'n#.k5rP96A|du]Xw"
    set_0 = {bool_0}
    tuple_1 = (bool_0, tuple_0, str_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "fXefj<Hs]/;D&6\t"
    set_0 = {str_0, bool_0}
    tuple_0 = (str_0, set_0)
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    str_0 = "[tX"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    bytes_0 = b"\x05g\xfb\xc1\xabt\xdb\x05F\x98"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    float_0 = -2628.5
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    int_0 = 702
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    object_0 = module_1.object()
    tuple_0 = ()
    list_0 = [object_0, object_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    str_0 = ",4'\nNVc3I\n"
    set_0 = {str_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    str_0 = "<Gp8T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    int_0 = -755
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    str_0 = "+i=klUU5k^J|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    int_0 = -1317
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    bytes_0 = b"H\xdb%\x98Rv\xb6g1"
    bool_0 = True
    dict_0 = {}
    set_0 = set()
    tuple_0 = (bytes_0, bool_0, dict_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_1621():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1622():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    bytes_0 = b'\xf4#V\x11\x85\xc5\xe9Q"7=\xfe*\xe6'
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    int_0 = 1849
    dict_0 = {int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    str_0 = "z|k+%_GI^,D{Mi[`eo~"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    bool_0 = False
    int_0 = -691
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    float_0 = -798.62
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    str_0 = "{7i]A>.nhXGk77I\rvm7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    str_0 = "b2;)\nj*i\x0b^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    float_0 = 561.63512
    list_0 = [float_0, float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    bytes_0 = b"8\x1f!\x97\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    int_0 = 2347
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    none_type_0 = None
    int_0 = 1109
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    complex_0 = 1408.53091 + 159.0219j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    str_0 = "33{&+unFM6"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    int_0 = 1618
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    float_0 = -4301.29838
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    bytes_0 = b"\x88\xa9\xd2\x9e\xdc\xe5."
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    bytes_0 = b"a\x15Y{\xbfP\xf9\x83\xe0j\xe6\x1cK\x14\xe6\x82#\xdd\x89\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    bytes_0 = b"Q\x8f\xb9\xe9\xb4\x91\x9c-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    str_0 = "s]C#|Gv1p"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    bytes_0 = b"W\xe3!\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    list_0 = []
    complex_0 = 3845.856 + 3103j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    str_0 = "etv\x0bh*1^vA(bEW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    str_0 = "CT%uVFT;&!\t>:,R@N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    int_0 = -620
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    str_0 = "mfG<j=t\x0bSUw"
    bytes_0 = b"\x04\x16"
    dict_0 = {str_0: bytes_0, bytes_0: str_0, bytes_0: str_0, bytes_0: bytes_0}
    dict_1 = {str_0: dict_0}
    none_type_0 = None
    module_0.match(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    float_0 = 1531.16135
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [bool_0, bool_0, bool_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    bytes_0 = b"\xbckj\x94,8\xd5\xb8<\x18\x83\xd3'TZ\xffe"
    tuple_0 = ()
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    str_0 = "2\\4E'>{N<v\x0c@:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    bytes_0 = b"8\x7f;\x7f\xf0\xae\xc1\xdc\x95\xe4z\xaa\xcb}\xd9FX\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    bytes_0 = b"L}\xe6\x80\xf6{\xf5\xdd: -O&"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    bytes_0 = b"\x88\xaf\x96\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    complex_0 = -2434.859648 - 215.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    int_0 = -439
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    str_0 = "7%vMz4NS-]Y)O"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    int_0 = 1589
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    int_0 = -184
    object_0 = module_1.object()
    module_0.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    float_0 = 1436.53
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    bytes_0 = b"A\xe7\x1cy\xc4 \xe4\xede\xf6"
    float_0 = 565.35
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    float_0 = -1354.38931
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    str_0 = "):%0~F\r{w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    set_0 = {tuple_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    bytes_0 = b"\x1al`\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    bytes_0 = b"\xd1+\x88`\xe2\x02\xb6\xab\xd5;3\xb7\x00\x14\xe1"
    module_0.match(bytes_0, bytes_0)


def test_case_1675():
    pass


def test_case_1676():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    str_0 = "L\nQjO\\:6dPx/t7on{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    int_0 = -1268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    complex_0 = -1393.30123 - 2659.97264j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    float_0 = -20.617148
    bytes_0 = b"\x1f\xc9\xffb\xc8A!\xb5"
    int_0 = -5084
    bool_0 = True
    tuple_0 = (float_0, bytes_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    float_0 = -917.62
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    str_0 = "tSO*d9m10B9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    int_0 = 3454
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    int_0 = -1459
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    float_0 = -2234.93
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    bytes_0 = b"\xa26\x0c\x89a\xbd\x13D\xb5Q\x972\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    float_0 = 3961.07
    dict_0 = {}
    bool_0 = True
    list_0 = [dict_0, float_0, float_0, dict_0]
    tuple_0 = (float_0, dict_0, bool_0, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    bytes_0 = b"+IgoH\xed[\x8a\x1cf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    float_0 = -1419.78896
    set_0 = {float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    tuple_0 = (list_0, object_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    bytes_0 = b"\xbd\xe1E\x18;X\xd3\x84\x98"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_1, bool_0}
    tuple_0 = (bool_1, set_0, bool_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    str_0 = "C}>{"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    int_0 = 3176
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    float_0 = -3531.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    set_0 = set()
    list_0 = [set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    int_0 = -1403
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    int_0 = -182
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    str_0 = "B"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    int_0 = 492
    module_0.get_new_command(int_0, int_0)


def test_case_1706():
    pass


def test_case_1707():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1708():
    bytes_0 = b"\x86\xd6WL\xd9\\.\x1e\xbd\x9eA\x12\xc9\xaaKrm4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    float_0 = -302.1939
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    int_0 = 1698
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    str_0 = "]3Nwx6c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    int_0 = -1528
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    int_0 = 4410
    module_0.match(int_0, int_0)


def test_case_1714():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1715():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    set_0 = {tuple_0, tuple_0, bool_1, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bytes_0 = b"\xc7\xb3\x01Xj"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    str_0 = "P::Hj\\gI[;E\r01I"
    bool_0 = False
    list_0 = [str_0, str_0, str_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    float_0 = 2506.748
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    complex_0 = 570.535036 - 4259.738j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    str_0 = "S]z]|=f.RP9"
    list_0 = [str_0, str_0, str_0]
    dict_0 = {str_0: list_0, str_0: list_0, str_0: list_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    bytes_0 = b"X\xeb\x06vy\x89\x80\x89c\xdb|4S8\xfd\xcc\x861"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    bytes_0 = b"\xcc\xe4\x8d\x86c\xe8+\x9a\xe9@\xe8\xd3\xa5\x91"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1727():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1728():
    float_0 = -40.67587
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    float_0 = -2483.0
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    float_0 = 1718.64322
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    int_0 = -3109
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    bytes_0 = b";\xac\xdd]\xa1\x14X\x08\x94"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    complex_0 = -218.62267 + 2385.0885j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    bytes_0 = b"\x12X\xa4\x11s\xbdL\x17"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    float_0 = -3485.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    bytes_0 = b"\x94\xff\xeb\xd6-\x94Wu\xd2]\xf8\x8e"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    str_0 = 'x=t5$m/k"5]N'
    str_1 = "6R#?]f }$Tdm:B R"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    int_0 = -3140
    module_0.match(int_0, int_0)


def test_case_1739():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1740():
    str_0 = '(3_"PkWZ\r%'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    int_0 = 636
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    bytes_0 = b")#!\xbd\xfe\x07\x07\xb4\xa5@6\x08)\x9b\xbb\xac\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    complex_0 = -86.35793 + 3948.8j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    complex_0 = -787 - 2582.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    complex_0 = -257.22 + 3747.022j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    str_0 = "M>Vn\ndTYc2yQrp2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    int_0 = -705
    tuple_0 = (int_0, int_0, int_0, int_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    str_0 = "y1KXVE\x0bS^ZkO1U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    float_0 = 2277.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    bytes_0 = b"\xeb\xf9\x85\x91\x06C\xd9+\\\x93\x1b\x06\x89\xab"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    complex_0 = -232.205 + 770.513866j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    float_0 = 997.01
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    str_0 = "7G_: x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    object_1 = module_1.object()
    module_1.object(*list_0, **object_1)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    float_0 = -2112.530857
    list_0 = []
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    bytes_0 = b"=R\x90\x03|\x9e\x9a\xf1\x8aU\x91\x90\x11"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    float_0 = 2047.43
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    int_0 = -2212
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    str_0 = "aRI__;W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    int_0 = 148
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    complex_0 = 2075.4276 + 1218.042145j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    bytes_0 = b"\xf3\xe9\xcd\xee&\x99\x9c"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    int_0 = -1650
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_1767():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1768():
    str_0 = ")\"'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    bytes_0 = b"/S\xd3!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    str_0 = "-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    str_0 = "yt-TNI*=:^"
    bytes_0 = b"\xd4b\x85\xa6\xeb\xea\xd8qO\xa1[l\xa4"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    str_0 = "Lt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    int_0 = -3174
    module_0.get_new_command(int_0, int_0)


def test_case_1775():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1776():
    bytes_0 = b"\xd8\x90\xa9\xe2\xa4Ao\xdb\xe1\xcdSsPk\xf3\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    str_0 = "U_i"
    bool_0 = True
    object_0 = module_1.object()
    list_0 = [str_0, bool_0, str_0, object_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = True
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    bytes_0 = b"\xb8\x935\xadU\xda\xd5\x8awBq\xb6_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    int_0 = 187
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    int_0 = -253
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    bytes_0 = b"\x0f\x99h\xab\x81\xf1\x00T\xdc_=D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    float_0 = -1927.647
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    bytes_0 = b"\\T\x9f\xc1\xaf\xeb.\x8f@\x85\x1d"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    bytes_0 = b"\x7fm\x11\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    bytes_0 = b":\xa7y"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    str_0 = "HB'0GS\x0c9R##b7Qz!"
    module_0.get_new_command(str_0, str_0)


def test_case_1789():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1790():
    float_0 = -2201.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    str_0 = "/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    bytes_0 = b"\x8cn\xa2\x04*\xe0\x11\t\xb7E::\xb2\xa5!\x07\xe7\xa7\xad\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1793():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1794():
    str_0 = "2tc&Z5i)EJxHL$\tsh!A?"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    int_0 = 16
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    float_0 = 796.3833
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    bytes_0 = b"*\xd3.\xf9qpl\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    bytes_0 = b"k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    str_0 = "S\x0cUQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    bytes_0 = b"\xdf/\xc4\x03:\xb7\xbfT"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    float_0 = 722.233606
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    int_0 = 1092
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    int_0 = -1586
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    str_0 = "\rB2PydyVEs))"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    bytes_0 = b" \xd4\x96\xa5)\xaf\xfah\xd8T/\x1c"
    str_0 = "!C6K>]-.\x0ci~ae"
    list_0 = [bytes_0, str_0, bytes_0, bytes_0]
    str_1 = "x^+GlQ}fW.\\0\x0b3%"
    dict_0 = {str_0: str_0, str_0: list_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    str_0 = "p56"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1813():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1814():
    str_0 = "ygV>?d8_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    bytes_0 = b"4\xb1\xe7Fv\x8dC\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    int_0 = 1697
    set_0 = set()
    dict_0 = {}
    tuple_0 = (set_0, dict_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    float_0 = 1301.486701
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    float_0 = -2805.3631
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    bytes_0 = b"8SW\x7fN\xe9\xf9\x0b\xbd6\\\x93\x0b>>Od<\x03\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    int_0 = 438
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    complex_0 = 2883.0597 - 365.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    bytes_0 = b"\x11\xb0\x1c\xb0\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    float_0 = 4229.004509
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    complex_0 = 260.2188 + 690.13j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1828():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1829():
    int_0 = 3562
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    str_0 = '#HR3L9~)/0a"g^v'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    int_0 = -3010
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    int_0 = -1086
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    complex_0 = 1472.165209 + 1362.3047j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    float_0 = 928.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    float_0 = -765.778
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    bytes_0 = b"\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1837():
    pass


def test_case_1838():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1839():
    int_0 = 1003
    int_1 = -208
    bytes_0 = b"\x046&\xd4o\xbb"
    tuple_0 = (int_0, int_1, bytes_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    complex_0 = 615.93187 + 1869.9j
    str_0 = 's"Co9H_%CB{{Sc'
    set_0 = {complex_0, complex_0, str_0, str_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    int_0 = 1634
    list_0 = []
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    int_0 = -1
    module_0.match(int_0, int_0)


def test_case_1843():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1844():
    str_0 = "~6\nB'~ACx^..Z\"[|"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    bytes_0 = b"\r\xefl\t\x16\xd1\xf9\x9e\xbaDR/\x9ch\x12b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    int_0 = 889
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    bytes_0 = b"]<\x8c\xda\xd4\xda\x8f\xced\t+\x90\xe3\x93\xbfV"
    bool_0 = False
    set_0 = {bool_0, bytes_0, bytes_0, bool_0}
    tuple_0 = (bytes_0, bool_0, bool_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    str_0 = "5J69v_yCJ`\tXn4g`M:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    object_0 = module_1.object()
    bool_0 = True
    bytes_0 = b"\x87\x81\xad/\xb7\x84\xfe\xe0\xaf\xbcY\x8d\xf6\xf9+\xf2]."
    str_0 = "4"
    tuple_0 = (object_0, bool_0, bytes_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    str_0 = "f`%_U~8\t p9fy|"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [str_0, dict_0]
    list_1 = [list_0, dict_0, dict_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    int_0 = -266
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1853():
    pass


def test_case_1854():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1855():
    int_0 = -662
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    int_0 = 585
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_1857():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1858():
    int_0 = 430
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    str_0 = "w?Gsn Zu7<mJ]"
    bool_0 = True
    tuple_0 = (dict_0, list_0)
    tuple_1 = (list_0, str_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    bytes_0 = b"*]\xb6}\x0c?\xb1m"
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    tuple_0 = (set_0, set_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    int_0 = -476
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    str_0 = "VRk;Gba"
    module_0.match(str_0, str_0)


def test_case_1863():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1864():
    list_0 = []
    str_0 = "IW8X|ZZ"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    int_0 = -1575
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    str_0 = ":(>lZ'xW,/Bew\x0b[}w_`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    float_0 = 553.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    int_0 = 1129
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_1869():
    pass


def test_case_1870():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bytes_0 = b"!dtZ6\xf5\x01O\xca\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    str_0 = "y&}{2\tWixEL?"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    float_0 = 455.86309
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    str_0 = "]w)*.`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    float_0 = -502.142
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    int_0 = -632
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    str_0 = ",r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    float_0 = -3603.656215
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    float_0 = -1175.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    int_0 = -1094
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    dict_1 = {}
    module_0.get_new_command(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    int_0 = -1210
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = (int_0, int_0, list_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    str_0 = "vm"
    bytes_0 = b"b\x8ce\xac\xb9T"
    tuple_0 = (str_0, bytes_0)
    list_0 = [tuple_0]
    list_1 = [list_0, str_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    str_0 = "C"
    module_0.get_new_command(str_0, str_0)


def test_case_1891():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1892():
    bytes_0 = b"\x07=\xbe~+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    float_0 = 2110.1266
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    int_0 = -646
    module_1.object(*int_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    str_0 = "E0)6\t\\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    int_0 = -528
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    bytes_0 = b"/"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    bytes_0 = b"\xec\x9f?\xfa"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    bytes_0 = b"\xf5\xa0\xadplD\xe4x\xed\x116"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1904():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1905():
    none_type_0 = None
    bytes_0 = b"\xcf\xd4yJ\xf3\xb1\x10\x87\x15+\x85"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    int_0 = -880
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    float_0 = 2377.085049
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    bool_0 = False
    int_0 = -875
    list_0 = [bool_0, bool_0, int_0, bool_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    float_0 = 340.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    str_0 = "\tWu{Oh iBDz:mT3|p^o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    none_type_0 = None
    int_0 = -631
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    int_0 = -1740
    list_0 = [int_0, int_0, int_0]
    str_0 = "t;i\rN[fv\rQ|rwI"
    dict_0 = {str_0: int_0, str_0: list_0, str_0: str_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    int_0 = -498
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    float_0 = 5171.71
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    float_0 = 2640.9605
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    str_0 = "g+>F2n%[&Q"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    complex_0 = 1254 - 1904.21007j
    module_0.match(complex_0, complex_0)


def test_case_1921():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1922():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, set_0, bool_0]
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    str_0 = "B(dV\x0bHt`H^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    float_0 = 2377.1518
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    int_0 = 1118
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    int_0 = 2741
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    int_0 = -540
    module_0.get_new_command(int_0, int_0)


def test_case_1928():
    pass


def test_case_1929():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1930():
    bytes_0 = b"%\xcb\xdaU\xa1\xd1\x03\xca"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    str_0 = 'jd#aV"FEyV\x0c~u+-5{|'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    bool_0 = False
    bytes_0 = b"W\xac\x9e\x9c\x00r\xc7\xfd\x90\xb8(x\x13"
    tuple_0 = (bool_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    complex_0 = 409 - 445j
    module_0.match(complex_0, complex_0)


def test_case_1935():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1936():
    bytes_0 = b"\x19\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    bool_0 = False
    list_0 = []
    list_1 = [bool_0, list_0, bool_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    str_0 = "#~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    str_0 = "[/d5= ee9n_\rpGa\\ebf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    int_0 = 1849
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    bytes_0 = b"f`\x1b\xaawV"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    tuple_0 = ()
    object_0 = module_1.object()
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    bytes_0 = b"\x14\xa0\x86K\xc6\xf7'"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


def test_case_1946():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1947():
    str_0 = "UQ_\x0c&SIW=M7?}rN\x0b"
    str_1 = "~5"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


def test_case_1948():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1949():
    int_0 = 1156
    str_0 = "m\x0c;+t"
    dict_0 = {str_0: int_0, str_0: int_0}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    int_0 = -1303
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    bytes_0 = b"\xee\x82\x99\xe72\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    str_0 = "tg$34)|L"
    module_0.get_new_command(str_0, str_0)


def test_case_1954():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1955():
    bytes_0 = b"\xc1\xef\xd5\x96\xb4#:\x1e\xfb\x90\xe3Sv[\xb2BHU\xfdr"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1956():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1957():
    str_0 = ",?A^7\n\\|/Mk"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    str_0 = '(?[8*";'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    int_0 = 2447
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    str_0 = "OjD4q%\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    bytes_0 = b"\x9ak\xb7\xcaz&\xfb\x8c\xf8\xbc\x15\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    int_0 = -1199
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    none_type_0 = None
    tuple_0 = (none_type_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    str_0 = "A(lw[3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    str_0 = "r\\F=Rbl\tYl\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    int_0 = -3737
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    bool_0 = True
    float_0 = -907.3497
    str_0 = "_~(V"
    tuple_0 = (bool_0, bool_0, float_0, str_0)
    module_0.match(tuple_0, float_0)


def test_case_1969():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1970():
    int_0 = 3352
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    int_0 = -2822
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_1972():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1973():
    int_0 = 391
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    bytes_0 = b"\xa7\x89(\x91\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    int_0 = -3310
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    bytes_0 = b")\x1b\x9f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    str_0 = " N8$Z]gu^]"
    module_0.get_new_command(str_0, str_0)


def test_case_1979():
    object_0 = module_1.object()


def test_case_1980():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1981():
    float_0 = 3382.0
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: bool_0, float_0: float_0, bool_0: bool_0}
    float_1 = -1344.5
    complex_0 = 1988.4285 + 2024.8j
    tuple_0 = (dict_0, float_1, complex_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    bytes_0 = b"\x13GP\xba\x96/\xba\x0e\x86r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    complex_0 = -186.208 - 1683.5193j
    set_0 = {complex_0, complex_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    str_0 = "Po%fME<P^$b0|\rB2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    none_type_0 = None
    int_0 = 682
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    bytes_0 = b"pW\x99\xa6"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    int_0 = 1419
    tuple_0 = (int_0,)
    bool_0 = True
    int_1 = 1690
    tuple_1 = (tuple_0, bool_0, int_1)
    set_0 = {tuple_1, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    bytes_0 = b"\xe0\xa4\x14\xb2\xc67\xddE\xa4\x07\xac\xc9\x03\xbd\xef\xf1\x8e2\xae\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    str_0 = "-7o,\raN\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    float_0 = -451.97
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    int_0 = 301
    tuple_0 = (int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    bool_0 = False
    str_0 = "t"
    tuple_0 = (str_0,)
    bytes_0 = b"\x990\xfd\x86\xec\xa3\xdb\t\xf7\xd9\xa9\xc4\xaf\x99\x1a\xaf\x1f\xb2\x08"
    tuple_1 = (bool_0, tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    bytes_0 = b"C\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    str_0 = "C\\<)(S8H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    str_0 = '}"Hq>7T;qh'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    int_0 = 3775
    int_1 = -3252
    tuple_0 = (int_0, int_1)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    int_0 = 2020
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    int_0 = -291
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2002():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2003():
    int_0 = -295
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    bytes_0 = b"~\xa2D\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    bool_0 = True
    int_0 = 594
    tuple_0 = (bool_0, int_0)
    list_0 = [tuple_0, int_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    bytes_0 = b"\x94gc\xf6J\xd4\xb1{\x0f\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    int_0 = -558
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    bytes_0 = b"\xb5\xd9c\x8c\xc4=|"
    bool_0 = True
    list_0 = [bytes_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    float_0 = -864.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    bool_0 = True
    str_0 = "N}i!@Xd#U3xd"
    set_0 = {str_0, str_0, bool_0}
    tuple_0 = (bool_0, bool_0, str_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    str_0 = "\x0cSc{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    str_0 = "("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    float_0 = 579.60509
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    int_0 = 658
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    int_0 = 1432
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    str_0 = 's=XEm#=-os.]9kf"\tWL)'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    str_0 = ",I,`i~\r\x0bf"
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, set_0, bool_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    int_0 = 2887
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    str_0 = "`^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    int_0 = 1429
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    str_0 = "%4UJAt)"
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    bool_0 = False
    set_0 = {bool_0}
    str_0 = "s`h{[rv"
    list_0 = [set_0, str_0, set_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    int_0 = -2836
    float_0 = -652.125835
    dict_0 = {int_0: float_0, float_0: int_0, int_0: float_0}
    tuple_0 = (int_0, dict_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    str_0 = "Z$,k+IRh \x0bM-vog$co"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


def test_case_2031():
    pass


def test_case_2032():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2033():
    int_0 = 1471
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    float_0 = 1180.698322
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    set_0 = {bool_0}
    module_0.get_new_command(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    complex_0 = -1544.2 + 2406.726818j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    int_0 = 1568
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    tuple_0 = ()
    bool_0 = True
    float_0 = 128.747776
    tuple_1 = (tuple_0, bool_0, float_0, bool_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    str_0 = "%c1ZL\t*%RfL&:"
    int_0 = -2895
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    float_0 = -628.8896
    module_0.match(float_0, float_0)


def test_case_2042():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2043():
    float_0 = 3797.76
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    str_0 = "?<63Y6!a*n \n8gh 'j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    dict_0 = {}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    int_0 = 404
    dict_0 = {}
    int_1 = -588
    tuple_0 = (dict_0, int_1)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    float_0 = 419.14
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    set_0 = set()
    bytes_0 = b"\x8b\xa7\x9e>\xc3\x129\r\xda\x0e\xe5"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    str_0 = "#V2EJx&\x0c=Yc_[L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    int_0 = 90
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (int_0, list_0, list_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    int_0 = 1017
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, bool_0]
    bytes_0 = b"\xa0\x9f\xba \x94\x01\xbe\xc9$"
    list_1 = [list_0, list_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    complex_0 = 3571.4 - 633.763j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    complex_0 = -2981.572 + 3863.8382j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    int_0 = -357
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    str_0 = "\nC"
    str_1 = "L0H>a\\c[6"
    tuple_0 = (str_0, str_1)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    bytes_0 = b"K\x16uK\xaf\xf7\xe7\xc1\x15,\xfd&\x0f\xe4\xfe\xb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bool_0 = True
    str_0 = "7\x0cWB#-\"m4>j'cPcj?ZN"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    object_0 = module_1.object()
    complex_0 = -1467.331939 - 354.941827j
    list_0 = [object_0, complex_0]
    list_1 = [list_0, complex_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    list_0 = []
    bytes_0 = b"]\t\xce\xdc\x85]\x92\xb8\xdf\x07\x9f9\x1a\xe7\xb0D\x89\x15\xb6"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    complex_0 = -1971.763 + 143j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    bool_0 = True
    int_0 = -4597
    tuple_0 = (bool_0, int_0, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    complex_0 = -8.9066 - 1199.53819j
    int_0 = -1253
    tuple_0 = (complex_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    int_0 = -195
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    bytes_0 = b">\xe6\xf7\xb8\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    complex_0 = -3763 - 1428.14146j
    bool_0 = False
    dict_0 = {
        complex_0: complex_0,
        complex_0: bool_0,
        bool_0: bool_0,
        bool_0: complex_0,
    }
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    bool_0 = False
    bytes_0 = b"3\xe3"
    int_0 = 2135
    tuple_0 = (bool_0, bytes_0, int_0, int_0)
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    complex_0 = 1391.433 + 1694.3j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    complex_0 = 3424.8 + 1741.14j
    set_0 = {complex_0}
    list_0 = [set_0, complex_0]
    dict_0 = {complex_0: list_0}
    tuple_0 = (set_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_2075():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2076():
    complex_0 = 3503.3 - 1010j
    tuple_0 = (complex_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    str_0 = "c%>t(Ha/1w'>i1s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    int_0 = -2114
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    dict_0 = {tuple_1: tuple_1, tuple_0: tuple_1, tuple_1: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    float_0 = 925.25
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    bytes_0 = b"\xb1"
    tuple_0 = (bool_0, dict_0, bytes_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    str_0 = "B1W@\\5\x0c*\x0c[g+9!=B!M9b"
    tuple_0 = ()
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    bytes_0 = b"0\xbd\x80\xfb\x87\xd8\x95o"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2084():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2085():
    str_0 = "\t?oo1@BG3}_Zy\r\r\nSu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    bytes_0 = b"\x14\x1a\xbd\x8e\xd6\x96\x1cq\xa2^\xb7"
    str_0 = "'f&/v"
    tuple_0 = (bytes_0, str_0)
    module_1.object(**tuple_0)


def test_case_2087():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2088():
    int_0 = -626
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    bytes_0 = b"\x7f6"
    int_0 = 1295
    bool_0 = False
    dict_0 = {int_0: bool_0}
    tuple_0 = (bytes_0, int_0, bool_0, dict_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    str_0 = "\x0c2}Oc}T'\\"
    list_0 = [str_0, str_0, str_0]
    bytes_0 = b"\xf5\x97|\xa3\xe1.n\xf2]\x01"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    bytes_0 = b"*\x89\x1d"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    bytes_0 = b"\xafLa\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    int_0 = 3506
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    int_0 = 2196
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    complex_0 = -156.21 - 2836.424347j
    tuple_0 = ()
    set_0 = {complex_0, tuple_0, tuple_0}
    module_0.get_new_command(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    bytes_0 = b"-\x9e?\xd59\xe6\xec\x85\xe2\xd9\x9d\x9dA\x04\\$\x1f8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    bytes_0 = b"\x10\x91\xe4\xfc\xad&\xdc\xa6\xfcl\x1d\xc1\t\xe1\xc4.`"
    bool_0 = True
    set_0 = {bytes_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    float_0 = -2369.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    bytes_0 = b"\x1e\x85\xac\xdd\x17"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    float_0 = -266.13
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    complex_0 = 706.3 + 375.27276j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    int_0 = -1356
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    str_0 = "qOJ~g&)GUL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    bytes_0 = b"\xdex\x83\xad\xb7c\xb5\xa0\x87>\xdc.\xe0\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    int_0 = 2086
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    complex_0 = 1585 + 1033.63j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    bytes_0 = b"L\x0c\xd515\xf6\xa1+\xc0\x89\x155\x8b\x9d\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    str_0 = "RWvla"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    bytes_0 = b"\xfb\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    float_0 = -1492.97793
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    str_0 = " oI>=CLk+^{:I.L ICgz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    int_0 = 1958
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    int_0 = -3256
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    float_0 = -489.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    bytes_0 = b"R\xf2\xb8\x9d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    str_0 = ":0\njJ*tO\nx"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    str_0 = "|{isI07r\x0b\rCIM7\x0cz#@li"
    list_0 = [str_0, str_0, str_0, str_0]
    tuple_0 = (str_0, list_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_2121():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2122():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    float_0 = -2326.188
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    int_0 = 67
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    str_0 = "\nTI*[8'?`6!OQ:xa0A"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    object_0 = module_1.object()
    bool_0 = False
    list_0 = [object_0, object_0, object_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    str_0 = "0/smp,j`X;`j!*q6?zld"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    str_0 = "P2s$^A\\K#R/"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    str_0 = "})"
    none_type_0 = None
    str_1 = "3&S*\x0b}n,\t>AGM) eDI5"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    bool_0 = False
    complex_0 = 1291.267526 + 276.4508j
    bytes_0 = b'%\xb4X_\x03\x94\xee\x0cd\xe5" \xd4\xd3'
    dict_0 = {bool_0: bool_0, bool_0: bool_0, complex_0: bool_0, bool_0: bytes_0}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, complex_0)


def test_case_2131():
    pass


def test_case_2132():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2133():
    int_0 = 1639
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    float_0 = 327.19015
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    int_0 = -2267
    list_0 = [int_0]
    str_0 = "@'``d\nBGA:SP9p?Tj"
    bool_0 = False
    dict_0 = {str_0: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    str_0 = "t),]o6FN)`uT48a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    int_0 = 1533
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    bytes_0 = b"\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    int_0 = 3432
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bytes_0 = b"z\x9c\xf8\xb1U\xba\xafp\x7f\x158wW0\xcd\xc7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    int_0 = 3078
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "H"
    str_1 = "\x0b*/Lc,D`f;E"
    bool_0 = False
    dict_0 = {str_0: none_type_0, str_0: list_0, str_1: bool_0, str_1: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    int_0 = -759
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    complex_0 = -644.34 + 3265.391898j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    str_0 = "|A{#|r>yV+NM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    bytes_0 = b"=)f\x16Ys!\xcd\x8f\xf0TRp"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    list_0 = []
    list_1 = [list_0, list_0]
    str_0 = "*x"
    dict_0 = {str_0: str_0, str_0: list_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    object_0 = module_1.object()
    list_0 = [object_0]
    tuple_0 = (object_0, list_0, object_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    bytes_0 = b')\xdd|\xadR\xf6"Y\x8e\x07\xc9\xe4\xfe'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    int_0 = 2026
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    int_0 = 3315
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    bytes_0 = b'\x87\x01"\xba\x01\xc1\x0c\xed\x84\n\xafi\xf3\xfc'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    bytes_0 = b"%,\xd4\xd0\xeeo\xc5\x9a\xb6u\xf3\xad\xfa\x91"
    int_0 = 758
    list_0 = [bytes_0, bytes_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    float_0 = -308.444729
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    bytes_0 = b"mc\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    str_0 = "5@M+'|KyBN7XOk>s"
    bytes_0 = b"\xd8\x01\xb3\xd5e\xc7U D\xf9\xfc`\xf8\xc0\x87D\x8bc"
    bool_0 = True
    tuple_0 = (str_0, bytes_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    bool_0 = False
    str_0 = "'k|ie"
    tuple_0 = (bool_0, str_0, str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    int_0 = -294
    set_0 = {int_0, int_0, int_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    none_type_0 = None
    int_0 = -2979
    dict_0 = {int_0: int_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    str_0 = ";(s*;ghk0P"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    float_0 = 266.2127
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    int_0 = 4789
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    str_0 = "f7M]m;z\x0b[,/klr"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    complex_0 = -3650.1226 - 1488.8j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    bytes_0 = b"\xcc\x96\x99\x81\xe6\x89"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    str_0 = "DU<%ondk,b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    int_0 = 488
    set_0 = {int_0, int_0}
    float_0 = 4187.0
    set_1 = {float_0}
    module_0.match(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    int_0 = -1297
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    str_0 = "\x0c0olx^zy\r;V%d}8."
    none_type_0 = None
    str_1 = ">%gI!j[*"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    bytes_0 = b"\xda!\x03\xd7\xd6\xdd\xc7\x11\x15\x82\x95\xad_A\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    str_0 = "]2mX7*qY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    bytes_0 = b"\xb5\x86\xc8j\x0bM"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    int_0 = -1144
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    bytes_0 = b"\xa8n\xee\xba\xdd~\x15"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    bytes_0 = b"\xcbI"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    int_0 = 3396
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0, bool_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    int_0 = -1524
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    float_0 = 872.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    bool_0 = False
    str_0 = "qhJB."
    set_0 = {bool_0, str_0, bool_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    str_0 = ":"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    bytes_0 = b"\xafC!-\xc0O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    int_0 = -491
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    str_0 = "622;FV\t+{OKiK!q38"
    complex_0 = 39.529 - 1442.1j
    tuple_0 = (str_0, complex_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_2191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2192():
    int_0 = 1179
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    bytes_0 = b"\x1c\x0f \xed\x94\xe6\xf6\x9b\x95\x1e\xc0\x9f"
    str_0 = "wp*X"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    bytes_0 = b"T9\x1d\xa5\xf6\xba\x91=\xc9D,\x8d\x15\xc0\xf0\xca\xcb\x0f`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    float_0 = 3581.502
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    int_0 = -4963
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


def test_case_2200():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2201():
    str_0 = "+^\n[L"
    bool_0 = True
    list_0 = [str_0, str_0, bool_0]
    list_1 = [list_0, str_0, str_0]
    bool_1 = True
    tuple_0 = (str_0, list_1, bool_1)
    bool_2 = True
    module_0.match(tuple_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    str_0 = "N@$92J(QaJY`A~<76j|c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    str_0 = "!\t4<&6&$7\x0b*x"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    str_0 = "nuK\x0c?|tB>FGb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    bytes_0 = b"\x12{\x0eeJ\xa0\xc2q\xce"
    module_0.match(bytes_0, bytes_0)


def test_case_2207():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2208():
    str_0 = "?Cz]1"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    str_0 = "{1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    str_0 = "}Hls/."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    int_0 = -253
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    bytes_0 = b"\nb\xc8M\xe8\xf6\xc0\x02\x0f\xf4}\x1dd\x12\x96az\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    str_0 = ""
    bool_0 = True
    set_0 = {str_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    bytes_0 = b"8-1\xd7\xbaV\xef\xaaZWV+Kk\xe7\xb4>T"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    bytes_0 = b"(\xd0\xc0\x0b\x825\xb60\x0b\xdd\x10*.S\xbb\x1eQ\x9bf\n"
    module_0.match(bytes_0, bytes_0)


def test_case_2216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2217():
    complex_0 = -2115.2 - 573j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    int_0 = 1077
    bytes_0 = b"t\x1eC\xea\xdf\x83%?\x1c"
    tuple_0 = (dict_0, int_0, bytes_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    float_0 = 4193.0
    bool_0 = True
    tuple_0 = ()
    str_0 = "QlV N-T{c\x0cH]xc"
    tuple_1 = (float_0, bool_0, tuple_0, str_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    float_0 = -135.0
    module_0.get_new_command(float_0, float_0)


def test_case_2222():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2223():
    int_0 = 2516
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    none_type_0 = None
    bytes_0 = b"\xd8\x8d\xaa\xb1*\x12=\x16\xbd0.\x99\x89\n"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    str_0 = "$_N%q~\nQ^3I3,t|.kn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    int_0 = -525
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    float_0 = -620.51
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    none_type_0 = None
    list_0 = [none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\x0b\xdb\x06v\xdd\x86kI-\x19/\xc3\xc4\xe6\x88c\x98W"
    bool_1 = True
    tuple_0 = (list_0, bytes_0, bool_1, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    str_0 = "* N!'t$FC\x0bye~:r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    int_0 = 469
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    int_0 = 244
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    float_0 = 730.60353
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    float_0 = 1932.6755
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    bytes_0 = b'\xd2\x0c"'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    int_0 = -243
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    str_0 = "kV :H%BNh TOpvqO\r6="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    bytes_0 = b"\xd1\xc7@50\xcaf\\\xc9`z=\x80\xa3\x8e\x13\xe8."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    float_0 = 1490.9702
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    str_0 = "PN *^zCYj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    bytes_0 = b"\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    bytes_0 = b"\xd5\xba"
    module_0.match(bytes_0, bytes_0)


def test_case_2248():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2249():
    str_0 = "g;?u)~)?f,Tu<l8BiU\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    float_0 = -868.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    int_0 = -2591
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    float_0 = -2889.85245
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    int_0 = 1191
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    bool_0 = False
    complex_0 = -1633.7 - 3412j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    str_0 = "XtdChW/YAG\nDg"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    bytes_0 = b"\xd9Rq\x88T\x14\xf4\xb4\x9e\xbd\xdc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    float_0 = 1210.2044
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    str_0 = "\x0bi+\x0ch]bf<-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    str_0 = "?!\rj;hN:@!b5+8t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    bytes_0 = b"J \xc7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    float_0 = -1588.64068
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    int_0 = 768
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    tuple_2 = (tuple_1,)
    tuple_3 = (tuple_2,)
    module_0.match(tuple_3, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    int_0 = 545
    bytes_0 = b".\x97\xb5"
    str_0 = "j7Sm>_P=qs"
    tuple_0 = (str_0,)
    tuple_1 = (int_0, bytes_0, int_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


def test_case_2269():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2270():
    float_0 = -882.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    int_0 = 2214
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    int_0 = -2559
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    str_0 = "<\\N$#7we,\x0cS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    bytes_0 = b"\x87_R"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    int_0 = 350
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    complex_0 = 681.4658 - 170.55325j
    set_0 = {complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    int_0 = -647
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    int_0 = 626
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    str_0 = 'biA\x0cn)Tz"`T70'
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    tuple_0 = ()
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    bool_0 = True
    dict_0 = {}
    module_0.match(bool_0, dict_0)


def test_case_2282():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2283():
    str_0 = ":9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    str_0 = "$"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    int_0 = 1128
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    bytes_0 = b"\xf8P\xcc\xa1mh\xc5\xba\xe0:7\xa4\xe1\x15\xff\n\xc4@"
    list_0 = [bytes_0, bytes_0]
    float_0 = -1831.81833
    list_1 = [float_0, bytes_0]
    tuple_0 = (bytes_0, list_0, float_0, list_1)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    complex_0 = 972.18 - 1568.421j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    str_0 = "fcTp[$_2~)AML@{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    bytes_0 = b"N\xe3Rr4\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    int_0 = 832
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    float_0 = -1175.7605
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    str_0 = "$M|w\rf\to>H~x4i-\x0c^xT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    str_0 = "87+i#=t"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    int_0 = -3159
    set_0 = {int_0, int_0, int_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    str_0 = "z-zx}u}m6r5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    bytes_0 = b"\x8a"
    int_0 = 3603
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, int_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    str_0 = "Q!e1B"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    bytes_0 = b"\x17\x8f\xaaP\xa1l\x911\xc7\xf2pI\xb5\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    str_0 = "tGjK!=Ly\x0bX8\nOQc"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    str_0 = "e^'5S%^to]NZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    int_0 = -2163
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bytes_0 = b"\xb6\r\xf2m5\xa6\x97!\x8c\xa7\xebo\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    str_0 = "X(3o\tmD"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    int_0 = 873
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    none_type_0 = None
    bytes_0 = b'\x85\xe8n|]\xb6"\xe4'
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    bytes_0 = b"?\xce\x00I\x10\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2309():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2310():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    int_0 = -1209
    tuple_0 = (bool_0, dict_0, bool_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    float_0 = -449.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    int_0 = 2667
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    int_1 = -342
    tuple_0 = (dict_0, int_1)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    list_0 = []
    object_0 = module_1.object(*list_0)
    set_0 = {object_0}
    bool_0 = False
    tuple_0 = (object_0, set_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    float_0 = -914.49395
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    bytes_0 = b"\x0c\xa6y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    str_0 = "@\nOzI!S\x0b@TKXw'u"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    float_0 = 1237.67
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    int_0 = 445
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    complex_0 = 402.78 + 1727.59j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    str_0 = "9@d.M!6xcM\x0b>zUN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    int_0 = 2863
    bool_0 = True
    module_0.match(int_0, bool_0)


def test_case_2325():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2326():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    str_0 = "X^F{>^n19/aIhKp54b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    str_0 = 'ts["ie>\t'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    int_0 = 1584
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    str_0 = 'FN17".^;u\nIGX'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    float_0 = 1277.175388
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    bytes_0 = b"\x193\x0c\xbd\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    float_0 = 1168.0
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    bytes_0 = b"le\xcf\x96W\x13*\xccO\x19k'k\xec\xcb\xed"
    bool_0 = True
    set_0 = {bool_0, bool_0, bytes_0, bool_0}
    tuple_0 = ()
    tuple_1 = (bytes_0, set_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    int_0 = -2611
    module_0.get_new_command(int_0, int_0)


def test_case_2337():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2338():
    complex_0 = -940 + 3676.559j
    module_1.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    int_0 = 963
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    complex_0 = 131.97517 + 1053.1299j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    int_0 = -1985
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    str_0 = "ShI\r)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    object_0 = module_1.object()
    tuple_0 = ()
    str_0 = "Y#'X9V6$DY!"
    tuple_1 = (object_0, tuple_0, str_0)
    module_0.match(tuple_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    int_0 = 2339
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    int_0 = -1649
    int_1 = -611
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    str_0 = "h"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    int_0 = 206
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    str_0 = "s5LZ"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2349():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2350():
    complex_0 = -1227.40004 - 2306.9729j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    bytes_0 = b"\xbcVr\xb8\x80\xbc\xddJ\x11n,\x87\xc0"
    float_0 = -2283.46358
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    int_0 = -1016
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    str_0 = 'mr,!3Ck)~]" h.\n3O:'
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    int_0 = -1
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    str_0 = "\tPn\nF"
    dict_0 = {}
    list_0 = [str_0, str_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    int_0 = -683
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    bytes_0 = b"\xc6E0N\xadR>\xf4\xa8\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    complex_0 = 531.6774 - 2047.77j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    bytes_0 = b"\xc6\xf6m\x8f\x13\x91\xf4\x9cpl"
    float_0 = 35.7707
    tuple_0 = (set_0, bytes_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    int_0 = -3089
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    str_0 = "f%\\n}7!fT_=<"
    set_0 = {str_0, str_0}
    bytes_0 = b"U\xb7$T\xe05wv\xf1;\x9e\xff"
    bool_0 = True
    tuple_0 = (set_0, bytes_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    str_0 = "=:c,\x0b;G>P#b3)R +c]cb"
    str_1 = "$Kh"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    bytes_0 = b"y\x95\x16\xe9\x1e\xf2\x87\xb6P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    list_0 = []
    bytes_0 = b"\x11\x9b\xf0*\x86D\xea\x0em908\xdcM\xe9\xae\x98\xc8\xa7H"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    object_0 = module_1.object()
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    int_0 = -916
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    int_0 = -1010
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    float_0 = 534.18009
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_2372():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2373():
    int_0 = -686
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    str_0 = "W:!>,o\t@\tf"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    bytes_0 = b"kF\xd0\xc2*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    complex_0 = -649 + 1321.65j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    str_0 = "Bkg&^Vj\x0b>ij_-)\x0c9"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    none_type_0 = None
    bytes_0 = b'\xee\x9b^v"\xb6\xf4p\x8e\xc6N\x12|?\xe3'
    tuple_0 = (none_type_0, none_type_0, bytes_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    int_0 = 2308
    module_0.get_new_command(int_0, int_0)


def test_case_2380():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2381():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    complex_0 = -950 - 3034.0998j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    none_type_0 = None
    bytes_0 = b"\x92\xc4\xd9%\xd0\xc7\xcd\xc3\x9e&\x13\xec\xb9\xef\xe8\xcf\x18"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    int_0 = -1772
    set_0 = {int_0, int_0}
    list_0 = [set_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    int_0 = 2548
    set_0 = {int_0, int_0}
    str_0 = "F85"
    bytes_0 = b"YR"
    tuple_0 = (int_0, set_0, str_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    complex_0 = 4349.89 - 1747j
    set_0 = {complex_0}
    list_0 = [set_0, complex_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    int_0 = -958
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    str_0 = "i"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    bytes_0 = b"\x0e7\x0c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    int_0 = 3843
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    str_0 = "0-~>vD06\x0cPA1eIHf2^3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    float_0 = -520.0
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0, bool_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    str_0 = "JFFQ/-~G\\iYj%6m$(iGd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    str_0 = ' "_V)cDn3Y\rE.wlA[,\t~'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    str_0 = "i)&'d?2PP\r8g<4"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    bytes_0 = b'\x08\x8c">\xe8\xc4\x9a\xf8\x03\xd7\x18\xde\xb4'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    int_0 = 2164
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    bytes_0 = b'\xc7>\x0c{\xa3g"\x83\xc5'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    str_0 = "b/"
    none_type_0 = None
    str_1 = 's0gZUfg>.;"|uOq!'
    str_2 = ""
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    str_0 = '6\tM$,j7I`x"9pvd]Yr\rK'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    float_0 = -2475.7265
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    complex_0 = 852.6 + 1338.675j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    bytes_0 = b"`yh\x8d8Z\x17%\x83?cv\xc7\x07*"
    list_0 = [dict_0, dict_0, bytes_0, dict_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    bool_0 = True
    str_0 = "z[l)Ux\r\nE0-^D/!,"
    int_0 = 1365
    bool_1 = False
    tuple_0 = (bool_0, str_0, int_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    str_0 = "u?$O8GQNwe7u:L$k<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    float_0 = -193.832
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    int_0 = 1432
    bytes_0 = b"\x85+i\xf6\xe0\xda/"
    module_0.match(int_0, bytes_0)


def test_case_2414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2415():
    int_0 = -954
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    bool_0 = False
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    none_type_0 = None
    float_0 = 1115.74079
    set_0 = {float_0, float_0, none_type_0}
    list_0 = []
    str_0 = "`%)i"
    tuple_0 = (float_0, set_0, list_0, str_0)
    str_1 = "o$a!vJ.2+5Lo:(KqwQ|"
    tuple_1 = (tuple_0, set_0, str_1)
    module_0.match(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    complex_0 = -672.4 + 5233.687784j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    int_0 = -1141
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    int_0 = -1577
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    float_0 = -203.16293
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    int_0 = -2552
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    float_0 = 1786.3087
    str_0 = ',;abU.J"a'
    list_0 = [float_0, float_0, str_0, float_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    bytes_0 = b"\xefm\r\xde0z\xf3%sq\x8f\xc9\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    float_0 = -242.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    int_0 = 953
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    int_0 = 5414
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    int_0 = -1430
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    bytes_0 = b"\nq[u`\xebD$\xaa$\x06"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    list_0 = []
    module_0.match(list_0, list_0)


def test_case_2433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2434():
    bytes_0 = b"\xa8\x0b\x99\xbbt\x85\xad\xf5I\x90\x93\x10R\xe2\x8c\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    set_0 = set()
    tuple_0 = (set_0, set_0, set_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    bytes_0 = b"\x11\xe8}\xf8$\x94\x84\xc3a\xaaz\x995\xff\x00"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    float_0 = 2299.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    bytes_0 = b"\xab\xe9\xcay)\xba4\x10\x95\x9dvF%s*9\xbc\xa0\xdd*"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bytes_0)
    dict_0 = {tuple_0: bool_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    int_0 = -4389
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    float_0 = 570.705
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    int_0 = -582
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    str_0 = "AT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    str_0 = "Ek999"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    int_0 = -4871
    int_1 = -4257
    tuple_1 = (tuple_0, int_0, int_1)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    bytes_0 = b"{d"
    set_0 = {bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    str_0 = ""
    bool_0 = False
    list_0 = [str_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: list_0}
    tuple_0 = (str_0, list_0, dict_0)
    module_1.object(*tuple_0)


def test_case_2448():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2449():
    int_0 = -280
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    int_0 = -718
    float_0 = 859.0
    dict_0 = {int_0: int_0, float_0: float_0}
    tuple_0 = (int_0, float_0, int_0, dict_0)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    complex_0 = 4367 - 172.48366j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    bool_0 = False
    bytes_0 = b"\xbd@fa)"
    tuple_0 = (bool_0, bytes_0)
    bool_1 = True
    set_0 = {bytes_0}
    tuple_1 = (tuple_0, bool_1, set_0, set_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    int_0 = -4726
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    bool_0 = False
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    complex_0 = 1861.4 - 2009.52j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    str_0 = "Z2~z!'t/#l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    bool_0 = False
    int_0 = 2614
    tuple_0 = (int_0,)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    str_0 = "b"
    bytes_0 = b"\xc2\xf9g\x9f\xb4McT\xf7\xb1@"
    bytes_1 = b"\n\xc6\xdf\xc3I\x86\xd0\x0e\xa0\t\xc7"
    float_0 = 2807.8091
    tuple_0 = (bytes_0, bytes_1, float_0)
    tuple_1 = (str_0, tuple_0)
    tuple_2 = (tuple_1,)
    module_0.get_new_command(tuple_2, tuple_2)


def test_case_2460():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2461():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    int_0 = 3003
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    int_0 = -6998
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    bytes_0 = b"c\xd6,3w\xdb\xb5w\x18"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, bool_0, bool_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    bytes_0 = b"3s\xc4\x05\xa6p\xc0\x97{%xa\x8b"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    int_0 = -565
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    float_0 = 1071.35959
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    complex_0 = 317.7 + 61.783j
    tuple_0 = (float_0, dict_0, complex_0)
    tuple_1 = (float_0, tuple_0)
    bytes_0 = b"\xc0\x06\xb0\x90|\xd3\xbdS\xd2\x9d\x89\xaf"
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    int_0 = -2680
    module_0.get_new_command(int_0, int_0)


def test_case_2472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2473():
    bytes_0 = b'\xf8\xff!l\x92*"\x00\x93w\xa5\x08\xc2\xd7\x15\xda\xf5\xd9'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    float_0 = 422.174147
    str_0 = "fmjp[MVR\n'"
    bool_0 = True
    tuple_0 = (dict_0, float_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    str_0 = "jOMb]\r."
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    int_0 = 641
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    str_0 = "kY]?=hWe{;;d\tP\n"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    float_0 = 905.969
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    bytes_0 = b"`\xb4.qN\xbd\x0e\xc7yPw"
    list_0 = [bytes_0, bytes_0]
    bytes_1 = b"qW\xfc\x0bj\x98|\xbbY\xba\x0ft\x85i"
    list_1 = [list_0, list_0, bytes_0, bytes_1]
    module_1.object(*list_1, **list_1)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    int_0 = -124
    module_0.get_new_command(int_0, int_0)


def test_case_2482():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2483():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    int_0 = 1518
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_2486():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2487():
    bytes_0 = b"\xaf\xcbK-\xc1\xfb\xe6\xbb\xf4y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    int_0 = 987
    module_0.get_new_command(int_0, int_0)


def test_case_2489():
    pass


def test_case_2490():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2491():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    str_0 = "\t;@\x0bS0(|*?\n`NRR9<%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    complex_0 = -3243.703421 - 2078.74348j
    float_0 = -1211.898778
    list_0 = [complex_0, complex_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    bytes_0 = b"\xf9\xa1\x90\x8b\x1c\x10\xe5\xaa"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    bytes_0 = b"?lU\x93\x19B\r\x93\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    bytes_0 = b"\xa1dQ\x9e%"
    str_0 = ".{GqUtC.*{\\"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    float_0 = -1562.83
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    int_0 = -1558
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    complex_0 = -1939.233707 + 1830.06261j
    bytes_0 = b'"\xc1\x1d\x89\xee\xbc\xfc\xc7\x80\x9a\x96\x8a\xa8\xdb]\x92\xfb9'
    module_0.get_new_command(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    bytes_0 = b"\x89:\x88mA\x08I\xf0XZ&\x1f\x1f\x99"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    float_0 = 3101.0
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = [dict_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    bytes_0 = b"\xf7\xef\xe1\xdeM\x8f\xc5\xfb\xbf!\x8e\xbbp%\x8e\x0f.\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    str_0 = "ifJ[ @Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    bytes_0 = b"d\x04\xce!0\xbf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_2507():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2508():
    bytes_0 = b"\x03\x1d\x87\x9b\xa915\xa1\xa9\x0e\xfb\xf2\xfaZ\xed"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    int_0 = -371
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    int_0 = 4885
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    float_0 = -1850.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    complex_0 = -3325.215 - 891j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    str_0 = "Tr\rrP\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    bool_0 = True
    bytes_0 = b"\x90\xb9\xa5aWM\x84\x97x\xf5\xb2R\xdd\x83\xee\x13N\xfd"
    str_0 = "K ruw_evj"
    object_0 = module_1.object()
    bool_1 = False
    list_0 = [object_0, bool_1, bool_1, str_0]
    tuple_0 = (str_0, object_0, bool_1, list_0)
    tuple_1 = (str_0, tuple_0)
    tuple_2 = (bool_0, bytes_0, tuple_1, tuple_1)
    module_0.match(tuple_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    int_0 = 2440
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    list_0 = [bool_1]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    str_0 = "$."
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    none_type_0 = None
    int_0 = 2544
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    int_0 = 1254
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    int_0 = 2337
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    str_0 = "DTwtZ>e"
    complex_0 = 1079.95 - 2791.01354j
    set_0 = {str_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    bytes_0 = b"B\x8f\x7f\xcck\xdf\x12#\x97\xde"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    bytes_0 = b"\xdbV\xfa\x06\x98J\xe4\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    bool_0 = False
    int_0 = -995
    tuple_0 = (bool_0, int_0, int_0)
    str_0 = "',=Q$e"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    int_0 = -576
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    int_0 = 3698
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    bytes_0 = b"\xba\x1eR\x03\xa1\x95\xa6\x938\x03\xc4\x9d\xd5{M\x0b\xd8\x91d"
    list_0 = [bytes_0, bytes_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    float_0 = -1572.6997
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    float_0 = -1410.7
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    int_0 = -1835
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    int_0 = 819
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    str_0 = "7rOTxl!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    bool_0 = False
    str_0 = "a*f\tb*"
    set_0 = {bool_0, str_0, str_0, bool_0}
    list_0 = [bool_0, bool_0, str_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    bytes_0 = b"/oj\x03'\xf2x"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2537():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2538():
    str_0 = 'Le\x0cp"JK 5M[&7'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    int_0 = 2469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    float_0 = -1482.8122
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    str_0 = "6&@p{kBx*V'"
    int_0 = -1371
    dict_0 = {int_0: str_0, str_0: int_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    bytes_0 = b"Y\x97\xbc~\x1cqtkd\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    bytes_0 = b"Y\x1a\x9d\xc4zJ\x86\x16\xdf\xe2P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    bytes_0 = b"p\x99\x98\xd0d\x85\x06sp\xf7\xdd\xa0\xc7\xc1zey"
    module_0.match(bytes_0, bytes_0)


def test_case_2547():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2548():
    float_0 = -1593.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    str_0 = "Ht[c~\n jE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    int_0 = -1049
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    float_0 = -1399.1
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    bytes_0 = b"\x91\x93\xe5|\x9c\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2555():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2556():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    bytes_0 = b"Q\xcaA\x9f\xb9\xf318yJ\xf1\xf9\x17\x1b:\x91\t\x93\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    int_0 = -1658
    int_1 = 3389
    float_0 = -4228.476
    list_0 = [int_0, int_1, int_1, float_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


def test_case_2560():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2561():
    int_0 = -884
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    bytes_0 = b"H\x1ahr\xd6\xaf\xf6\x05\x90\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    int_0 = 781
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    str_0 = "9~d\r+s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    bytes_0 = b"\n \x0e\xfd\xfb\xb7\x97BUD\x10\xcbq_\xd3\xd8\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    int_0 = -1017
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    bytes_0 = b"\r\xb5\xeb\x97A\x07\xc2\x8c"
    bytes_1 = b"\x1c{\xbe"
    list_0 = [bytes_0, bytes_1]
    module_0.get_new_command(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    tuple_0 = ()
    bytes_0 = b"\xae'\xea\xd0\xfb\x9c\x18\xda0\xa5\xafg7\x07s\x19\xadE\xa1\xb5"
    dict_0 = {tuple_0: tuple_0, tuple_0: bytes_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    bytes_0 = b"\xdb\x98\xdb\xbd&\xec\xf3\x9aRc)L,\xfc\x1e\x19\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    bytes_0 = b"x\xedis;\\\xba\x03\xe9\\A\xae\xa3\x8e\xac(v\xbb\xed"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    complex_0 = 3238.6 - 907.83j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    int_0 = 2428
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    int_0 = 2596
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    int_0 = -1389
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    bytes_0 = b"\xe9a\xbb\xc5\x8eH\xab\xb5syp\xe3\x1d$"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    str_0 = "0Rf2()j9{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    str_0 = "-\rAJY\t,b#&&2H;K[Hxe"
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    bytes_0 = b",~\x8c\x01+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    int_0 = 2295
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    list_0 = []
    int_0 = -1695
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bytes_0 = b"O\x0e\x15\x00rC\x1c4\xf6\xb7\xfa\xe1\x85\t\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    float_0 = -59.317
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    complex_0 = 204.58 + 188.86199j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    float_0 = 1578.796257
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    bytes_0 = b"[\xa7+!\xcb\xbe?\xb3\xd5%u\x8e\x05c\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    float_0 = 1025.0
    set_0 = {float_0}
    complex_0 = 4207.77 + 3599.45j
    module_0.get_new_command(set_0, complex_0)


def test_case_2590():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2591():
    str_0 = "#\nPy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, bool_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    float_0 = -2084.261
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    bytes_0 = b"\xed\x18eeMhHU\x9c\xb0\xfd\xd9t\x07\x05RB"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    float_0 = -530.5256
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    bytes_0 = b"@\xa9\xc8\xa3\xef\xbdR\xd1\xd5\xb0\xd5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    int_0 = -1407
    module_0.match(int_0, int_0)


def test_case_2599():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2600():
    str_0 = "z"
    str_1 = "Qax#\\_w1]^ZD)D"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
    module_0.match(dict_0, str_1)


def test_case_2601():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2602():
    int_0 = 1076
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    float_0 = 2737.653
    float_1 = -1208.892
    list_0 = [float_0, float_0, float_1, float_0]
    tuple_0 = (float_0, float_1, list_0)
    list_1 = [tuple_0, float_0, tuple_0, list_0]
    module_0.match(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    int_0 = -1494
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    none_type_0 = None
    bytes_0 = b"\xbb\x17\xeb"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    complex_0 = 3084.64258 - 3449.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    int_0 = -2515
    module_0.match(int_0, int_0)


def test_case_2610():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2611():
    complex_0 = -1952.685 - 2640.686053j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    bytes_0 = b"(\xbax\x08\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    float_0 = -768.4
    module_0.get_new_command(float_0, float_0)


def test_case_2614():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2615():
    str_0 = "pEW\t<,h5)]h;[a>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    str_0 = "5TtwFy0k^#<l:[Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    set_0 = set()
    str_0 = ""
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    str_0 = ">Y'4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    bytes_0 = b"]"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


def test_case_2620():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2621():
    int_0 = 3976
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    str_0 = "n>jE?=//OdbKJUe`;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


def test_case_2625():
    pass


def test_case_2626():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2627():
    bytes_0 = b"\xf3\x93\x1fF\xc0$+e\xb6\xae\xb4\x9fD\xdf_*N\xff\xbbK"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2628():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2629():
    bytes_0 = b"*\xde\xc3\xbf\x93o\xcb\x19Z+\x9b\x84\xa1m4\x83\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    str_0 = '"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    str_0 = "}JMFo0B 4QT"
    int_0 = -419
    str_1 = "gbh"
    tuple_0 = (str_0, int_0, str_1)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    bytes_0 = b"a\xa0\x84hS\xda\xe2b\xfc*\xc7tx\xe7-\xe5"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    float_0 = -528.231
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


def test_case_2635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2636():
    int_0 = -938
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    str_0 = "<$P?~!quxn-"
    module_0.get_new_command(str_0, str_0)


def test_case_2638():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2639():
    int_0 = -4286
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    complex_0 = -222.754 - 1608j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    float_0 = 3398.86054
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    int_0 = -455
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    bytes_0 = b"A\x18\xf0\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    int_0 = 429
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    float_0 = -2080.5803
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    str_0 = ";y3$^x_J3J|vm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    str_0 = "a~zc`\r\n+gP"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    str_0 = 'Pvqub""'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bytes_0 = b"!\xffw<\xc6mM\x96\xd3\xcf9zUp\x88\x86\xfa\x92\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    complex_0 = -1073.47208 + 424.982j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    str_0 = "V^[zt(kd(9rRHm"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    int_0 = 1873
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    object_0 = module_1.object()
    float_0 = -417.278
    module_0.match(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    str_0 = "L\\3'+LP$;es@A`YH?"
    bool_0 = True
    set_0 = {str_0, bool_0, bool_0}
    tuple_0 = (str_0, bool_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    none_type_0 = None
    bytes_0 = b"k\xc2\x19W\xedM\xe2\xa5\x9fL\xd1\x1a\xa3"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    float_0 = -633.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    bytes_0 = b"\x95\xfe\xb8\xf8"
    bool_0 = False
    int_0 = -532
    dict_0 = {}
    tuple_0 = (bytes_0, bool_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    complex_0 = -1275.8173 - 256.38j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2662():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2663():
    bytes_0 = b"v"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    bool_0 = True
    set_0 = {bool_0}
    float_0 = -1098.4
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    none_type_0 = None
    bytes_0 = b"\xebt\x0c\xb0"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    int_0 = 593
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    int_0 = -451
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    bytes_0 = b"*T?x /\xe6\xdb^\x91n\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    str_0 = "3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    str_0 = "&w<t,M$]-k6><#e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    set_0 = set()
    float_0 = -3142.9
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    bytes_0 = b"M\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    str_0 = '"*">J=BrJpe^n<n='
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    bytes_0 = b"\xbc\x87\t\xb3{\xd5\xbcJ\xcc\x10\x8a\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    bytes_0 = b"A\x19\xeaq)\xc4W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    float_0 = 659.76
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    str_0 = "iDi&-5|R]["
    str_1 = "]cdO\tLO1zR)d( B6qWu"
    module_0.match(str_0, str_1)


def test_case_2681():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2682():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    str_0 = "BS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    int_0 = 503
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    str_0 = "9g:z^Qs@L4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    int_0 = -1337
    set_0 = {int_0, int_0}
    list_0 = [int_0, int_0, set_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    str_0 = "58p?xqq\rO4\nW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    str_0 = "rXr5~q~s{R1qob3\nn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    int_0 = -3200
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    str_0 = "56:x3HL2`?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    float_0 = 4745.36593
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    int_0 = 3110
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    str_0 = "?AZe.~\x0c\x0b+slixdc\x0cngP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    str_0 = "$\x0cp"
    set_0 = {str_0, str_0, str_0}
    float_0 = -2114.354
    module_0.match(set_0, float_0)


def test_case_2696():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2697():
    int_0 = -1011
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    str_0 = "fIb'etaP^(MT(Kc$$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    bytes_0 = b"\xd9\x1d\xd4# O\xba\xf6\\hG\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    int_0 = -250
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    bytes_0 = b"^"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2703():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


def test_case_2704():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2705():
    str_0 = "xz2yloi>"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    int_0 = -1271
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    bytes_0 = b"\xf7\x99\xacF\x8e\x06i\x1d\xe3\x86rf#\x00\xe6\xaf"
    float_0 = -765.94224
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    float_0 = 1709.429951
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    bytes_0 = b"\xf4&\xc61Y'sQM\xc7\xed3+"
    tuple_0 = (bytes_0,)
    bool_0 = False
    set_0 = {tuple_0, bytes_0, bytes_0, bool_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    int_0 = 1495
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    str_0 = "\"7d}Y9L6?g('&o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    bytes_0 = b")W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    int_0 = 246
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    str_0 = "/m; ~9ni:"
    tuple_0 = ()
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    str_0 = "]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    int_0 = 544
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    str_0 = "N=pt!GJy.m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    str_0 = ")mN45SFk+\\$P\\iD{?"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    int_0 = -1373
    str_0 = "M</wffl\nd?nnq~]60\n"
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    bytes_0 = b"*\x90U\xf4s\xb7\xa7\x16\x91 \x857/\x91\x83\xd2t\xb6D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    int_0 = 120
    module_0.match(int_0, int_0)


def test_case_2725():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2726():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = 'rzL-5Y[D*>"OX&['
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    str_0 = "LKMuH~jmL(HKR\nKV\rk"
    bytes_0 = b"_\xb6\xf4\x16\xf8M\xf4\xd1ZF:z5\xa79[a\xc7\x85\xca"
    bool_0 = False
    tuple_0 = (str_0, bytes_0, bool_0, bytes_0)
    list_0 = [tuple_0, bytes_0, str_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    str_0 = "oK2\nx$$x,N`i}a\x0c_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    bool_0 = False
    bytes_0 = b"."
    dict_0 = {}
    tuple_0 = (bool_0, bytes_0, dict_0)
    tuple_1 = (tuple_0, bool_0)
    tuple_2 = (bool_0, tuple_1, bool_0)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    bytes_0 = b"\xc4\x99v\x02q\xb8PH/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    int_0 = -108
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    complex_0 = -661.6 + 208.780171j
    set_0 = {complex_0, complex_0}
    tuple_0 = (set_0, set_0, set_0)
    tuple_1 = (complex_0, tuple_0)
    module_0.match(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    str_0 = "d"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    str_0 = "g8,]6&s2B(PqP`?4U"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


def test_case_2735():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2736():
    bytes_0 = b"\xfd\x9eH\xc2p\x06\xb3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    bytes_0 = b"\xc4\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    int_0 = -145
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, tuple_0)


def test_case_2740():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2741():
    str_0 = "S h+F?L'@-MzD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    bool_0 = True
    str_0 = "r%S@|4^vM"
    list_0 = [bool_0, str_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    int_0 = -1332
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    bytes_0 = b"\x91\xf6(\x8f\x95p\xae"
    float_0 = 627.3063
    tuple_0 = (bytes_0, float_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


def test_case_2745():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2746():
    bytes_0 = b"ST>\xcd[\x9a\xae\xd3M\x1b\xc6\xb4)"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    str_0 = ":'`=s8TO*>6?N"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


def test_case_2749():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2750():
    bytes_0 = b"\x19>\x1f\xc4&}&\x03C\xa8}\\\xc2\xb7\xb6~y"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    bytes_0 = b"\xd1\xc6\xee\x86&\xd4]b\x17\rN\x82\xe6\xaa\xbe+\x10\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    float_0 = 1276.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    str_0 = ":h"
    tuple_0 = ()
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    str_0 = "2OnO~@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    int_0 = 1558
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    bytes_0 = b'"X\xbe\xe3\x93.p\x1e\x97\x17\xe1\xc4'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    str_0 = "N&w_q1)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    int_0 = 2707
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    str_0 = ""
    str_1 = "!\x0cLWH\r%x7"
    bool_0 = True
    set_0 = {str_0, str_0, str_0, bool_0}
    dict_0 = {str_0: str_0, str_1: set_0, str_0: set_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = True
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    str_0 = "@]?K\t:cK\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    int_0 = -874
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    float_0 = 1297.704517
    list_0 = [float_0, float_0, float_0]
    str_0 = ""
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


def test_case_2764():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2765():
    int_0 = -1164
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    complex_0 = -527.1763 - 1362.827j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    str_0 = "o@-\x0cPh,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    str_0 = "\t"
    bytes_0 = b"\xb9\xa9\x92\x0et\xb4)\xd6G\xb4\xb4\xf0\xaf\xc0"
    bool_0 = True
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_0}
    tuple_0 = (bytes_0, bool_0, dict_0)
    tuple_1 = (str_0, tuple_0)
    tuple_2 = ()
    module_0.match(tuple_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    float_0 = 1074.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    str_0 = "Qx$CFCUy"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    bytes_0 = b" Ol\xbc\xaa3Z\x92\x93Qb\x9e\th\xc1Z\x1e\xa7\xb3\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    object_0 = module_1.object()
    object_1 = module_1.object()
    list_0 = [object_0, object_1]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    float_0 = -2412.345674
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    int_0 = 632
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, dict_0)
    module_0.match(tuple_0, dict_0)


def test_case_2775():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2776():
    str_0 = '.e"ze/'
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    int_0 = -3014
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    str_0 = "6Gh\r\rxiW-A]l]t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    bytes_0 = b"\xe2l9\xf46"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    list_1 = [list_0]
    tuple_0 = (object_0, list_1)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    int_0 = 1296
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_2784():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2785():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    list_0 = [dict_0, dict_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    bytes_0 = b"=S\x17\x156(f\x81Pg\xc9\xbe9\xce\x1fT$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    float_0 = -4111.6
    module_0.match(float_0, float_0)


def test_case_2788():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2789():
    str_0 = "(^I1qpf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    complex_0 = 902.2667 + 1252.739387j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    int_0 = 1320
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    str_0 = "yqP-LSE4^\\4h >Z_:e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    bytes_0 = b"\xae?\x02\xf8R\xf0\xd4\xc4\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    str_0 = "c2>*Mgo{iJ6;TE^\r]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    int_0 = -3283
    module_0.match(int_0, int_0)


def test_case_2796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2797():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    int_0 = 1057
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    bytes_0 = b'0\x14"j\xa3\x8e\x8c'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    set_0 = set()
    int_0 = -601
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    float_0 = 369.06556
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    complex_0 = -945.7991 + 1575j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    str_0 = ",f3Q';C"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    bytes_0 = b"\x83\xa2*\xf4\x1f!t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    int_0 = 2619
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    float_0 = 1589.21988
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    int_0 = -447
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    int_0 = -1991
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    bytes_0 = b"\xc7~\xd7\xb7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    int_0 = 477
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    str_0 = "7`\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


def test_case_2813():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2814():
    bytes_0 = b"\x86i\x8c\xe0\xd4\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    float_0 = 979.74
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    set_0 = set()
    bool_0 = False
    int_0 = 2657
    list_0 = [bool_0, bool_0, int_0, bool_0]
    tuple_0 = (set_0, bool_0, int_0, list_0)
    str_0 = "SO8"
    str_1 = "AZEfjRd\r"
    bytes_0 = b"h\x9e\x84\xa4D\xa7\xba]:\x89\xb2"
    tuple_1 = (str_0, bool_0, str_1, bytes_0)
    tuple_2 = (tuple_0, tuple_1)
    module_0.match(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    str_0 = ";\nJ\n YcF"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_2818():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2819():
    str_0 = 'wI/"h\x0bj.,\r$e}\\/I\t8F|'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    bool_0 = True
    str_0 = "bf'2lM|aJr5f7"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    float_0 = -4114.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_1}
    tuple_0 = (bool_0, bool_1, set_0)
    str_0 = "6B>FfG8\r\x0b"
    list_0 = [tuple_0, str_0]
    list_1 = [list_0, list_0, str_0]
    str_1 = "P+=-43CVR+_bvC\t+y"
    str_2 = "\\yC19i.\x0c\r 'Rw*A\""
    str_3 = "\x0ccAick55ZwJAi"
    dict_0 = {str_1: list_1, str_2: str_0, str_1: bool_0, str_3: str_1}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    int_0 = 613
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    str_0 = '`uPzD\rc^"""g,|hL'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    float_0 = -437.7431
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    int_0 = 501
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    str_0 = "9"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    int_0 = -190
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    complex_0 = -817.2 - 1749.059j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    int_0 = 572
    str_0 = "p.q"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    str_0 = "]qH^g/E6tK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    float_0 = -1714.957
    list_0 = [float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_2834():
    pass


def test_case_2835():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2836():
    int_0 = -977
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bytes_0 = b"SNBW\xde\x0c\xcd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2838():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2839():
    int_0 = 2498
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    bytes_0 = b"$\x91\xaeFD\x1d\xb7i\xbaC\xd9YmxDT\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    bytes_0 = b"\x0b\x98\xd4\x7f\x97\x15\xd0\x82\xd1-\x9bq\xa3\xa06\x07[\xa9\x93\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    bytes_0 = b"^\x1d\x8dD\xff)\xe1\x99\x95\xf1\xdb\x10K2\n_6\x18\x80\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    tuple_0 = ()
    int_0 = -745
    list_0 = [tuple_0, int_0, tuple_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    complex_0 = 346.48 - 2373.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    bytes_0 = b"\xbe\x0b\t4\x81\x8ai"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    str_0 = "miOf :m\x0c7#Cu6-\rB.#L"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_2849():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2850():
    str_0 = " F`GMpLF(/8X"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    bytes_0 = b"\x14s\x8f\xbe\x08\x05v\xf9D\x8f\xf2\xa9\x9an\xae\xf3\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    str_0 = "z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bytes_0 = b"H\x9f\x87\x92\x8eLs"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2854():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2855():
    float_0 = -998.0
    module_0.match(float_0, float_0)


def test_case_2856():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2857():
    float_0 = -3520.971895
    str_0 = "\x0cw\n6dzS"
    bool_0 = True
    tuple_0 = (float_0, str_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    int_0 = 2450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    bytes_0 = b".a\xcf{\xba\xd7\xc8mJ\xa5N\xbd\xcc\x15\x8eq,%\xa4\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


def test_case_2862():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2863():
    float_0 = -1303.5908
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    float_0 = 1892.976
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    str_0 = "Yv!wX5"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    int_0 = -2557
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    bytes_0 = b"\x12\xd4k\xb5\xd8D\xd3\xea\xacj6\x10\xa8\xeb\xdd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    bytes_0 = b"\xbb\x04\x9a*\xc9_\xe5TB\xf7\xa1;p"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    float_0 = -4931.5787
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    complex_0 = 770.134 + 1223.194j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    int_0 = -52
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    list_0 = []
    dict_0 = {}
    float_0 = 2089.78
    tuple_0 = (dict_0, float_0, float_0)
    tuple_1 = (list_0, tuple_0)
    bool_0 = True
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    bytes_0 = b"\xe6\xb8G\x94.\xf8\x19+\x8cq\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    bytes_0 = b"\x98B"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    int_0 = -1601
    list_0 = [int_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    float_0 = -4028.0
    list_0 = [float_0]
    tuple_0 = (float_0, list_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_2881():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2882():
    str_0 = "EG>ii*k"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (list_0, list_0, str_0, str_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    float_0 = -2325.9
    set_0 = {float_0}
    module_1.object(**set_0)


def test_case_2884():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2885():
    str_0 = "L#XyKt"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


def test_case_2886():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2887():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    str_0 = "cDI3\x0c\rx0"
    list_0 = []
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    int_0 = 4017
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    str_0 = "3ss"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    int_0 = 1539
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    float_0 = 1893.0
    list_0 = [float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    float_0 = 1757.129
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    bytes_0 = b";\xe81\xfce\x08\xc4/\x84t\xfa\xf7\xf1\x81(\x062\xa2\x07\xd6"
    bytes_1 = b"j\xc76"
    str_0 = "`\n@7"
    tuple_0 = (bytes_0, bytes_1, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    bytes_0 = b"\xc2\xdd\xa1\x03\x08\x826%\x8c\x80\x98@oq\x80"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    int_0 = 2060
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    str_0 = "/;\r^B\r go4X}6\rmgxE"
    module_0.match(str_0, str_0)


def test_case_2899():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2900():
    int_0 = -1098
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    bytes_0 = b"\xba4\x97n\x18\\\xb7\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2902():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2903():
    float_0 = -3465.19112
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    bytes_0 = b"\xa17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\xa6\x197\x02-K\x99\x85*\x00\x95\xea0\x7f\xbd#\x03,"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    bytes_0 = b"\xee#j\x0fp\xd6"
    set_0 = {bytes_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    bytes_0 = b"\x8e\xf2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    float_0 = 2002.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    str_0 = "IwMfM44qUCukSF3=$JJI"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    int_0 = 1228
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    int_0 = -555
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    str_0 = "V"
    str_1 = "P4p1"
    int_0 = -1465
    bool_0 = False
    int_1 = -1555
    bytes_0 = b"\x0e-\x11"
    tuple_0 = (bool_0, int_1, bytes_0)
    dict_0 = {str_0: str_0, str_1: int_0, str_0: str_1, str_1: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bytes_0 = b"\xa7\xfc1t\x9e\xacg\xd4\x9e\x83\x84\x91\xb1\xa1U4\x16\x0c\x95J"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    str_0 = "S[ykt>-NhuQ\x0bCJp\x0bO\x0bl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    bytes_0 = b"\xb2\x90\xb7\x9a\x91\xb4L\xc2A\x1aD"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    none_type_0 = None
    str_0 = "npucv"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    bytes_0 = b"\x16\xd8n\xfb\xf3\xb1\xf01\xca\x04\xfd\x0f\xa0\xb1ko\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    bytes_0 = b":\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    str_0 = ";\\H('+L\x0bY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    int_0 = -680
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    bool_0 = True
    int_0 = -1181
    module_0.get_new_command(bool_0, int_0)


def test_case_2926():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2927():
    bool_0 = True
    tuple_0 = ()
    set_0 = {bool_0, tuple_0}
    str_0 = ""
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    str_0 = "u/*~#HP~RWr\n'rA>l1vj"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    int_0 = 63
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    str_0 = "`fE{-"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    none_type_0 = None
    int_0 = 372
    list_0 = [none_type_0, none_type_0, int_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    str_0 = "++Nh)h@PDw,J"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    none_type_0 = None
    str_0 = "X"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    int_0 = 214
    bytes_0 = b"\xfa\x17\xb5SrZ\xe2\xe7X\xb2E\x14\xe1\x177\xe4\xaf\x8eT\x91"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    bytes_0 = b"\xfc\xbe\x1f2\xdau\xbd\x90\xc4V"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2937():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2938():
    str_0 = "]G6  R9rf(\rEIGJ]@"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    str_0 = "`&"
    bool_0 = False
    dict_0 = {str_0: str_0}
    dict_1 = {str_0: str_0, str_0: bool_0, str_0: dict_0}
    module_0.match(str_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    str_0 = "Y%m<'k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    object_0 = module_1.object()
    str_0 = "\rC:@\n`kLD"
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    complex_0 = 2098.2 + 193.329j
    str_0 = "'o9M(sj`\x0cqyR"
    module_0.match(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    str_0 = '(?*["{\x0cW`+\x0clX|p'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bool_0, dict_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    bytes_0 = b"\xb8\r(h\x9c 9_\xa0\xd5\x8e]UbI`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    bytes_0 = b"d}"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    int_0 = -1966
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    bytes_0 = b"\xf1*\x98J\xca\xa4\xb7\xd1\xedyH\xd2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    int_0 = 4784
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    none_type_0 = None
    str_0 = "4qnn!^Fo.'N5"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bytes_0 = b"06\xbf\xce\xc1.n\xa4Bec"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    str_0 = "N%SYyL<np{a)rwZ%T>"
    tuple_0 = (str_0, str_0)
    bytes_0 = b"\xb3\r\xda"
    bool_0 = True
    tuple_1 = (tuple_0, str_0, bytes_0, bool_0)
    bytes_1 = b"E\xcer\x8e\xed\xe4d\x01"
    set_0 = {bytes_0, tuple_0, tuple_0}
    dict_0 = {tuple_1: bytes_1, bool_0: set_0, str_0: tuple_0}
    module_1.object(*dict_0, **dict_0)


def test_case_2956():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2957():
    int_0 = 1814
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    complex_0 = -2286.63281 - 2199.464563j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    float_0 = -2096.211
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


def test_case_2960():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2961():
    bool_0 = True
    str_0 = ""
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    str_0 = "#M'\"OvG"
    bool_0 = False
    list_0 = [str_0, str_0, bool_0, str_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    int_0 = -1697
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    str_0 = "IDV0{&sBX"
    dict_0 = {}
    tuple_0 = (str_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    bool_0 = True
    int_0 = -1424
    list_0 = [bool_0, bool_0, bool_0, int_0]
    list_1 = [bool_0, bool_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    int_0 = -1713
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    int_0 = -2439
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    float_0 = -1209.69139
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    float_0 = 271.4233
    tuple_0 = ()
    bytes_0 = b"\xf4t\xfcb\xa2Az\x8c\x90"
    tuple_1 = (float_0, tuple_0, bytes_0, bytes_0)
    bytes_1 = b"D\xf8\x9e\xf6\x94=\xa7$\x95\x0f\xc0"
    module_0.get_new_command(tuple_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    none_type_0 = None
    bytes_0 = b"kMS\\\xb3\xef^\x8c\x81\x11x\xe6"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    int_0 = -2816
    complex_0 = -939.8 - 2325.018j
    tuple_0 = (int_0, complex_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_2974():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2975():
    str_0 = "f;z2cHd{"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    none_type_0 = None
    str_0 = "irKA4<vh\rpnkAHVvN"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    bytes_0 = b"\xb3\xd1%\x12\x90\xff\xe5B\x8cM\x04\xd5"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    float_0 = -3822.5
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    int_0 = 2548
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    int_0 = -3013
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    int_0 = -2316
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    object_0 = module_1.object()
    dict_0 = {}
    float_0 = -2294.99
    tuple_0 = (object_0, object_0, dict_0, float_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    int_0 = 2154
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    float_0 = -1978.9435
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    str_0 = 'y"J7"R%c}Jv'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    tuple_0 = ()
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = ()
    tuple_1 = (dict_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    float_0 = 2132.79996
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    int_0 = -1214
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    bytes_0 = b"n\xd1\x08\x85\xc7\xae\xb3\x9a\xb0N"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    float_0 = 108.25813
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    str_0 = "._\x0b5;)l)F2q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_2998():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2999():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    str_0 = "4\nmUOtu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    str_0 = "9xwNS5*wKX."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    str_0 = "<^1Po?1rT YI}4C'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    complex_0 = -3000 + 2339j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    bytes_0 = b"x&\x19\xbcU#\xb28e\x90\xf3P\x0bl\x8d+"
    module_0.match(bytes_0, bytes_0)


def test_case_3006():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3007():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    str_0 = "BfLc-c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    str_0 = "SDo\x0cVLiR|Ww6bTcl!{"
    none_type_0 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    bytes_0 = b"\xc2\xab&\xb9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    str_0 = "7%ARI"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    int_0 = -1701
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    bytes_0 = b"\xddi\xce\x9c\xa7d@\xe9AV?\xa3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    complex_0 = -161.2738 + 1385j
    set_0 = {complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    float_0 = 390.68
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    bytes_0 = b"}\xa2C"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    int_0 = -624
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    bytes_0 = b"$\x85?j\x16LYP\xff\xf6\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    str_0 = '(U"cgQ1K'
    str_1 = "}9UH).\rj\r"
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_0}
    dict_1 = {str_0: str_0, str_0: str_0, str_1: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    bytes_0 = b"p\xb8\xdf\xed\xb2j\x17O\xbc\xda|\x1e\xeb\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    bytes_0 = b"sK\x03\xd7dY\xde\x97*\xa9i\x7f$"
    module_0.match(bytes_0, bytes_0)


def test_case_3025():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3026():
    float_0 = -1139.0
    module_0.match(float_0, float_0)


def test_case_3027():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3028():
    str_0 = "E\tYD$^Jw\rS~h1\n19"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    int_0 = 1771
    str_0 = "0kAsFw|%rK4\"1'p"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    str_0 = "sek_]\tddj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    bytes_0 = b"\xf4\x08\xf0\xfa\x7fD+\xe7"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    str_0 = "L:\x0c~,FX/3:6Mxw  y"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


def test_case_3036():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3037():
    complex_0 = -1388.695074 - 1742j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    float_0 = -467.5682
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    bytes_0 = b"_%3\x16\x96\x11\xd3N\x0c\x7f\xc0\x90~\x04DCd\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    int_0 = -147
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    str_0 = "|5s"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


def test_case_3043():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3044():
    int_0 = 682
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    bytes_0 = b"\xfa\xd65\xfc\x94;\xafv\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    bytes_0 = b"\x0e"
    bytes_1 = b"Bs\xff\xa5~"
    list_0 = [bytes_1, bytes_1, bytes_1, bytes_1]
    tuple_0 = (bytes_0, bytes_1, list_0)
    module_0.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    bytes_0 = b"\x90C\xf0\x7f\xfa\x1c\x1dr"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    int_0 = 4493
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    int_0 = -816
    module_0.get_new_command(int_0, int_0)


def test_case_3052():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3053():
    str_0 = "tD"
    module_0.match(str_0, str_0)


def test_case_3054():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3055():
    float_0 = -327.757
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    float_0 = 366.15261
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    int_0 = 2464
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    str_0 = "^i5]d#CK;T$k\nwZ/iEy,"
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0, str_0, tuple_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    int_0 = -1101
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    complex_0 = -613.7 - 1327.19313j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_1: bool_0, bool_0: bool_1}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    str_0 = "?PSI2p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


def test_case_3065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3066():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_1, bool_0]
    tuple_0 = (bool_0, bool_0, bool_1, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    float_0 = -3848.2
    float_1 = -390.6305
    set_0 = {float_0, float_1, float_0, float_0}
    str_0 = "` o}ST/.;'#rGsR`="
    dict_0 = {}
    bool_0 = False
    tuple_0 = (set_0, str_0, dict_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    bytes_0 = b"\x98$\xc8\xf3\xe8S\x1e\x84\xe5\xc3\x91)\x13\xf2\x16"
    int_0 = -1404
    tuple_0 = (bytes_0, int_0)
    module_0.match(bytes_0, tuple_0)


def test_case_3069():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3070():
    str_0 = "T*Wa&#x<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0, bool_0)
    str_0 = "dQ+ly`K"
    str_1 = "u@(c|V9D+gZtbFne1"
    str_2 = 'p#g;AgA&6KH.,P"aK=,v'
    dict_0 = {str_0: bool_0, str_1: tuple_1, str_2: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    bytes_0 = b"A/\x05\xcb\xda\xd8\xcc%\x94s\xff\x88D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    bytes_0 = b"Y%\x99n`XQ\x90\x91+="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    int_0 = 591
    module_0.match(int_0, int_0)


def test_case_3075():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3076():
    float_0 = 290.51176
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    bytes_0 = b'm\xc2\rQ"D'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    str_0 = "3f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    str_0 = "Cz|~G6ZO>'z~%ft"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    float_0 = -469.1
    bytes_0 = b"[\xde\xa9o\xe4\x1e\x85)pF\x7f"
    module_0.match(float_0, bytes_0)


def test_case_3081():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3082():
    str_0 = "1OTDNHwtnzv8#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    float_0 = 1263.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    int_0 = 593
    list_0 = []
    tuple_0 = (int_0, list_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    bytes_0 = b"\x86]\xf7w"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    int_0 = 1876
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    bytes_0 = b"\xdb\xb5\x1a\xf8a\xc4F\r\x10\x8a\xbd\xbb\x86J\xafx6\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    bytes_0 = b"\x9a\xa0\x95\xb73\xd99d\xf4\xb3\xddlq5\xfc\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    int_0 = 2328
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    bytes_0 = b"\xd7B\xc5Yx-\xda\xc1\xb3\xf4\x8eJ\xb4&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    int_0 = -2894
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    bytes_0 = b"\xe6X\xf7\xa9Dn\xac<\x17\x95\xb9\xa71\x03\xbd| F`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    int_0 = 2975
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    str_0 = "h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    float_0 = 1420.137
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    int_0 = -3026
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    bytes_0 = b"\x99c\xa9?x\xa0\x03\xbc\xbd\xfa\xb3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    int_0 = 2707
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    none_type_0 = None
    str_0 = '$jzpUvb#ntoDT"?S6+\ro'
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    int_0 = -2024
    object_0 = module_1.object()
    list_0 = [int_0, object_0, object_0]
    str_0 = "-E"
    bytes_0 = b"\x14VT\xe6X\x1d1\xac"
    dict_0 = {int_0: object_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, list_0, dict_0)
    tuple_1 = (list_0, str_0, tuple_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    int_0 = 416
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    str_0 = "SkkNy\x0b)#"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    int_0 = -2718
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    float_0 = -1646.555742
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    str_0 = "TLi"
    module_0.match(str_0, str_0)


def test_case_3106():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3107():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    int_0 = -266
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    bytes_0 = b"\xe8c\n"
    module_0.match(bytes_0, bytes_0)


def test_case_3111():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3112():
    bytes_0 = b"\n\r]\xd9E\x0en\xc8I\xff\xa3\x89'\x1f\xb1v\xc0\xdc"
    int_0 = -5445
    module_0.get_new_command(bytes_0, int_0)


def test_case_3113():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3114():
    str_0 = "GG4j-:F!el?6<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    bytes_0 = b"\x08+\x15\x84>\xae\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    int_0 = 860
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    int_0 = -244
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    bytes_0 = b"\x04\xa8\x9a\x15\x84I\x14\xf9\xe7<}"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_3120():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3121():
    int_0 = -1153
    module_0.match(int_0, int_0)


def test_case_3122():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3123():
    str_0 = "td?`n>5k"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    complex_0 = 876.3078 - 3919.54j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    int_0 = 250
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    bytes_0 = b"er\xd0\xa9d\xcdb\x99\t\x0e\r\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    int_0 = -1190
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    bytes_0 = b"\x0e"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    float_0 = 1672.0
    tuple_0 = (float_0, float_0, float_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    int_0 = 1515
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    float_0 = -1129.7828
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    complex_0 = 3768.9168 + 1051.24595j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bytes_0 = b"\x03S\xdfW2 \xeaj\xb2_\x7f\xaf\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    int_0 = -2177
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    bytes_0 = b"]\xde\x94\xd3@\xe1"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    int_0 = 997
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    str_0 = "\rve"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    bytes_0 = b"\x00\xdac\x08\xb4Q\xf2\xab\xa4\x96\x10C\x0e\x0cf\xfe"
    str_0 = "3h7Tv"
    set_0 = {bytes_0}
    tuple_0 = (set_0,)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, str_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    float_0 = -1278.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0,)
    int_0 = 1385
    tuple_1 = (tuple_0, int_0, bool_0)
    list_0 = [tuple_1, tuple_1, int_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


def test_case_3141():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3142():
    str_0 = "n4)b\x0bsf^="
    bool_0 = False
    set_0 = set()
    tuple_0 = (set_0,)
    float_0 = -415.807
    tuple_1 = (str_0, bool_0, tuple_0, float_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    int_0 = -2772
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    bytes_0 = b"\xac/^\x96\x0b\xf9\x05\xcd\xd2\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    bool_0 = True
    bytes_0 = b"\xad_\x02]`\xf1$\x80\xd8\xf5\x89H\x97G\xcc\xf2"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    int_0 = -3375
    module_0.get_new_command(int_0, int_0)


def test_case_3148():
    pass


def test_case_3149():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3150():
    str_0 = "Pay"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_3151():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3152():
    bytes_0 = b"\x8e?\xef"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    bytes_0 = b"^\xf4\xc2\xd2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    bytes_0 = b"s\x0c&"
    bool_0 = True
    set_0 = {bytes_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    int_0 = -654
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    int_0 = -1429
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    bytes_0 = b"\xb6\xb2qa\n"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    bytes_0 = b"b\xccn.\x91Ls"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    int_0 = 1701
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    float_0 = 1440.56205
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    str_0 = "D%r\tsv7!X<Td4Lj +gL^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    float_0 = 2180.31172
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    float_0 = 3529.049
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    int_0 = 1834
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    bytes_0 = b"t=U`\xaaw\xadr\x1b\xb5\x00\xf2\xe2\x9b\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    str_0 = "# R-"
    set_0 = {str_0}
    list_0 = [set_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    int_0 = 630
    int_1 = -1165
    tuple_0 = (int_1,)
    bool_0 = False
    tuple_1 = (int_0, tuple_0, bool_0, int_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    int_0 = 1351
    tuple_0 = (int_0, int_0)
    str_0 = "GxESLNf<%To5S>6J"
    str_1 = "Bi}:~`Mmh|"
    dict_0 = {tuple_0: int_0, str_0: str_0, str_1: str_0, str_0: str_0}
    str_2 = '&$qFLC.d|w"J,'
    module_0.match(dict_0, str_2)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    bytes_0 = b"\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    int_0 = -1242
    float_0 = -358.21332
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    str_0 = "av8(roLM"
    list_0 = [str_0]
    list_1 = [list_0]
    str_1 = "hX%e4$!!ZY}"
    dict_0 = {str_0: list_0, str_1: str_1}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    int_0 = -1473
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    int_0 = -3788
    int_1 = 1390
    set_0 = {int_0, int_1}
    module_0.match(set_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    int_0 = 1360
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    bytes_0 = b"\xe3<?\xdeO"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    bytes_0 = b"\xc4X\xbc\xd5\xe2v\xae\xda\xf9\x1d4\x15\xb9\xb8\x19\xd7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    str_0 = "8PmRO[^ tL.e\n^"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    complex_0 = -7096.5 + 2595.90597j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    int_0 = 472
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    bytes_0 = b"\x92\x82\x11|\xf5#;\xd2\x95 "
    set_0 = {bytes_0}
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    str_0 = "^{n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    str_0 = "e:\rveg(c\\mVu"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    int_0 = -2533
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    bytes_0 = b"\x15M\xb2\x8a\xb4\x01\xb9\x1c\xee"
    tuple_0 = (bytes_0,)
    int_0 = 2143
    tuple_1 = (int_0,)
    dict_0 = {tuple_0: tuple_1, bytes_0: tuple_1}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    str_0 = 'GM>vU"*/q&BAf~~fO'
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    int_0 = -119
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    float_0 = -656.452
    int_0 = -1159
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    float_0 = 3159.61
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    bool_0 = False
    float_0 = -2791.65
    module_0.get_new_command(bool_0, float_0)


def test_case_3197():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3198():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    bytes_0 = b"\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    bytes_0 = b"\xa9o\x86"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    str_0 = "6h/VQb"
    list_0 = [str_0]
    bool_0 = False
    bool_1 = False
    tuple_0 = (str_0, list_0, bool_0, bool_1)
    bool_2 = True
    module_0.get_new_command(tuple_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    bytes_0 = b"\xd5\xf2\x1b\xe2\xfe"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    int_0 = -502
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    int_0 = 925
    module_0.match(int_0, int_0)


def test_case_3206():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3207():
    bytes_0 = b"\x87`\x99V\x7f\x9aCS\xe1V\xd7\xc960\xe9\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    bytes_0 = b"\x8e]\x9f\xd7HU"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    int_0 = -593
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3211():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3212():
    float_0 = 929.6613
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    bytes_0 = b"n\xcf"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    complex_0 = 670 - 988.33j
    tuple_0 = (complex_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    str_0 = "sKk\x0cq`sgw~\x0b\r"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    int_0 = 116
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    int_0 = 2960
    bool_0 = False
    list_0 = [int_0, bool_0, int_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    bytes_0 = b"=p\x81)yD\xe1c\xec\xfeG}\xc8\x9b\xe6\xa5ET"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    int_0 = 2317
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    str_0 = "dWk0)E\tpX,cee T"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_3221():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3222():
    str_0 = "Y5VS=x-xz-r \rnmC"
    set_0 = {str_0, str_0, str_0, str_0}
    complex_0 = -1392.4 + 3400j
    tuple_0 = (complex_0,)
    tuple_1 = (set_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (dict_0, dict_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    float_0 = 3316.6
    tuple_0 = (float_0,)
    list_0 = [tuple_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    int_0 = 1390
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    int_0 = 2829
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    float_0 = 2003.8
    int_0 = -2446
    list_0 = [float_0, int_0, float_0, float_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    bytes_0 = b"\xd2"
    bytes_1 = b""
    int_0 = -2342
    bool_0 = True
    list_0 = [int_0, bytes_1, bool_0, int_0]
    tuple_0 = (bytes_0, bytes_1, int_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    bytes_0 = b"\x815\xb0\x96\xf4\xcao\x13bA1\x81{'Dm"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    int_0 = 102
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    none_type_0 = None
    int_0 = 2286
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    complex_0 = -1545.358414 + 517.69758j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    bytes_0 = b"\xe5\x920\x02\xbf\xf73\xe3\xb1\xfd"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    bool_0 = False
    str_0 = ""
    list_0 = [bool_0, str_0, bool_0, bool_0]
    tuple_0 = (bool_0, str_0, str_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    list_0 = [set_0, object_0, set_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    str_0 = "iF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    str_0 = "I<6aa,jdX!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    int_0 = -301
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    str_0 = "E0Y{}_%f"
    int_0 = -1212
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    str_0 = "\rcljq/B\rZ@0z7{S~"
    float_0 = -449.985
    bytes_0 = b'\xea"\x00\x17\xf3\xb9\nU\xac\xb8\xafw\x08\xb8\xc5'
    tuple_0 = (str_0, float_0, bytes_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_3246():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3247():
    bytes_0 = b"y\x01bp\xac\xc1\x9aO\x94\xaf"
    bytes_1 = b""
    set_0 = {bytes_0, bytes_1}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    float_0 = 1437.0
    dict_0 = {float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    float_0 = -720.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    int_0 = 1683
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    complex_0 = -1251 - 4033.349j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    float_0 = 1349.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    str_0 = "ADDW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    int_0 = -1421
    module_0.get_new_command(int_0, int_0)


def test_case_3256():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3257():
    str_0 = '\nMX|+_.3.^\x0b"%W"_#nIy'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    bytes_0 = b"\x91\x05\x84\x87"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, set_0, set_0, set_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    str_0 = ";2w`kQ8Z\rB="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    str_0 = "pfo/T\t815)}q*F,N"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    float_0 = -502.23
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    complex_0 = 476.11477 + 709.80289j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3263():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3264():
    bytes_0 = b"\x17\xe6\xe7d\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    complex_0 = 513.09 + 1834j
    set_0 = {complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    float_0 = -2853.0
    module_0.match(float_0, float_0)


def test_case_3268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3269():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    complex_0 = 1403.4 - 2363.387586j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    none_type_0 = None
    str_0 = ""
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    bytes_0 = b"\xd8\x84q\xb6\xa9E\xb2\x00<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    int_0 = -531
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    str_0 = "L5E)_*w"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    int_0 = 4351
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    bytes_0 = b"\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    int_0 = -1882
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    bytes_0 = b"T/uF"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    bytes_0 = b"\x05\x9f`l\xb1\xd6i\x8c\x82\x9d\xaf ]\xd3RS"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    int_0 = 835
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    str_0 = '<5ojJ1(@xTd(nk3"h'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    complex_0 = 3151.4 + 2866.326712j
    bool_0 = False
    dict_0 = {complex_0: complex_0, complex_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bytes_0 = b"[T/\xf2\x8d[\x13:56\xec"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    float_0 = -398.43
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    str_0 = "0gxU):Q5gh8Z^\ng*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    bool_0 = False
    bytes_0 = b"BY\x1dx/\x99\xbf\x81\xa8\\\xcf\xc9\xb3Q\x07\xbfW\xdc"
    dict_0 = {bool_0: bytes_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    str_0 = ".-  %0=2d_+{-_4}I@\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    str_0 = "D94yNZ]'b?~}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    bytes_0 = b"\xc9\xd8\xea\x16\xca\xafo'\xc4\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    tuple_0 = ()
    bool_0 = True
    bool_1 = False
    dict_0 = {tuple_0: tuple_0, tuple_0: bool_0, bool_0: bool_1}
    list_0 = [dict_0, bool_1]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    float_0 = -2274.12
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    int_0 = 43
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3299():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3300():
    str_0 = "Zlj@\nj(R\tDNUs^\\X\r\x0cA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    float_0 = -346.00112
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    int_0 = -1333
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    bytes_0 = b"\xc7\xfd\xa2d\x19,\xf6\x88Jp\xe4M"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    int_0 = -3400
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    bytes_0 = b"\xfd\x05i\x88\x88\x8b\x8a@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    none_type_0 = None
    str_0 = "2%\x0bxpR~Er"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    float_0 = 912.99
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    int_0 = 9
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    bytes_0 = b"\xb8\x16[c\xf5\xba\x88\xda\xa5,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    float_0 = 165.157237
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    int_0 = 349
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    str_0 = "Y+"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    str_0 = "I0K;:4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    bytes_0 = b"f~h"
    set_0 = {bytes_0}
    list_0 = [set_0, set_0]
    set_1 = set()
    module_0.get_new_command(list_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    str_0 = "!C;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    bool_0 = True
    bytes_0 = b"Qi\x0e.V\xca\xd5$&\xcd\xf0\x96/\xe0"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    bytes_0 = b"\xf0f\r9\xbe\xce\xc8\t"
    dict_0 = {}
    bytes_1 = b"\xb4\x85\xdc\x162\x9br\xdc\x03\nd\xb1\x07\xef\xad"
    tuple_0 = (bytes_0, dict_0, bytes_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    float_0 = 702.744
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


def test_case_3321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3322():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    dict_0 = {tuple_1: tuple_1, tuple_0: tuple_1}
    module_0.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    int_0 = 1012
    list_0 = [int_0, int_0, int_0, int_0]
    bool_0 = False
    str_0 = "K\r"
    tuple_0 = (list_0, int_0, bool_0, str_0)
    tuple_1 = (int_0, tuple_0, str_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    bytes_0 = b"\xe8\xda\xc5\x86\xc8\xfe\x9b\xa3\x93Q\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    str_0 = "a"
    none_type_0 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    float_0 = -1645.11905
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    str_0 = "4(4* DTDU15_'!`rA"
    module_0.match(str_0, str_0)


def test_case_3328():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3329():
    str_0 = '"nqM'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_3331():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3332():
    bytes_0 = b"\x88\xde\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    str_0 = "Fm`*2<uI/Y8b_K\r%Niy$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    int_0 = -58
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    none_type_0 = None
    float_0 = -222.5307
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    str_0 = "gD\x0c_9>e.\n$\\=y)(d=w/]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    int_0 = 968
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    bytes_0 = b"\x9b\xbc\xe7.\x00\xf0a\xd5\xb7\xad|c\x1c\xaa\xdd\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    str_0 = "&i@n6\\I{Y+g.A$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    str_0 = "JE\x0b+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    bytes_0 = b"\xd9\xbb\x11F"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    str_0 = "1NX8c}@Q%Sle2CC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    int_0 = 154
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    str_0 = "Xbkke"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    str_0 = "-/A88"
    bool_0 = True
    set_0 = {str_0, bool_0, str_0, str_0}
    str_1 = "WAN"
    module_0.get_new_command(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    str_0 = ":Mw6/xIlDMd72"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3347():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3348():
    int_0 = -282
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    int_0 = -843
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    float_0 = 144.80475
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    int_0 = -2008
    bytes_0 = b"\xe3l\xfb\xef'\rgj\x1c\xb4\xbf\xbe\x15x\xb3\x0c\xda\tD"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_3354():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3355():
    bytes_0 = b'R3\x1b\xda\xa4\xc8\xd8\xaf\x9e\xde&?"fa'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    str_0 = "~|f\r<H1S\x0c;.|:"
    str_1 = "sI0Fe~ "
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    float_0 = -1954.47822
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    float_0 = 2137.05897
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    int_0 = 3322
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    int_0 = 2646
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    str_0 = "\"&'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    float_0 = -997.0
    list_0 = [float_0]
    tuple_0 = (float_0, list_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    int_0 = 1627
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    complex_0 = -3118.06209 + 125.2j
    module_0.match(complex_0, complex_0)


def test_case_3366():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    float_0 = 1861.587
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    int_0 = 442
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    bytes_0 = b"\x0b\xd3"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    bytes_0 = b"\x7f\xc2\xa0'\xc1"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0}
    set_0 = set()
    complex_0 = 1105.2 - 1141.72j
    tuple_0 = (dict_0, set_0, bytes_0, complex_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    str_0 = "DHaOXJEbm"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    str_0 = "/\r=7z~q:Q"
    bool_0 = True
    tuple_0 = (dict_0, list_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    int_0 = 2693
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    str_0 = "<9p@c)6)qpB!O&O"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    float_0 = 3456.4528
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    int_0 = 3197
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3378():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3379():
    str_0 = "8PZ$YM)W`/Zk13Z\n0:7)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    str_0 = "4mzB_Vx|as"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    int_0 = -209
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    bytes_0 = b"\x98\x98"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    float_0 = -86.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    object_0 = module_1.object()
    set_0 = {object_0}
    bool_0 = False
    bool_1 = False
    tuple_0 = (set_0, bool_0, bool_1, bool_1)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    int_0 = -119
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    bool_0 = False
    str_0 = "&Sl\x0c]"
    tuple_0 = (str_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    str_0 = "CM\\:#"
    float_0 = -567.9
    dict_0 = {str_0: str_0, str_0: str_0, str_0: float_0}
    dict_1 = {str_0: str_0, str_0: str_0, str_0: dict_0}
    list_0 = [dict_0]
    tuple_0 = (str_0, dict_1, str_0, list_0)
    module_0.get_new_command(tuple_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    str_0 = "~m4c71\\F4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    float_0 = 2281.5518
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    bytes_0 = b"\xa9\xbcM\xfc\xa7$\xe2\x97\xe3\xd029\xbf;\x87Z\xb9\x10\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    complex_0 = -1264 + 1989.69j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    str_0 = "J%kB"
    tuple_0 = (str_0,)
    list_0 = [tuple_0, tuple_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    str_0 = "5Y+X6 bnzgol"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    str_0 = "[#;Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    bytes_0 = b"\xde\xcc\\\x88\x00c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    bytes_0 = b"\xec\x1dO1\xeb"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    float_0 = 1036.59163
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    int_0 = -2255
    bytes_0 = b""
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    int_0 = -1019
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_3406():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3407():
    float_0 = -669.9585
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    bool_0 = True
    str_0 = "F,9TJV^K~N3[~Nj("
    set_0 = {bool_0, str_0}
    bytes_0 = b"A=\xb3"
    tuple_0 = (bool_0, str_0, set_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    int_0 = 1515
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    int_0 = 1561
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    float_0 = -1343.3679
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    bytes_0 = b"\xa7M\xdcwd*8\x8f\xe0\xbfiMS\x0f\xa0\xbepY\xcc\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    float_0 = -1838.81925
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    bytes_0 = b"\xfe^\xe3\x9f\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    int_0 = -127
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    int_0 = -63
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    str_0 = 'C!"9=l>#p'
    str_1 = "_=j"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    str_0 = "Az:'v%I0+hFSZMY[SBX\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    int_0 = 1778
    module_0.get_new_command(int_0, int_0)


def test_case_3421():
    pass


def test_case_3422():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3423():
    str_0 = "#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    bytes_0 = b"\n\xfb\x9130\xe9\xdb\xfe\xf2\t+V\xc2\xf11"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    bytes_0 = b"K\xf3\xbd\xdc\x8dA\xa9A\xfc|\xaf\x91\xb1(j"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    float_0 = -1039.45
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    str_0 = "\rN(xi[NrraJos:XSz+"
    str_1 = "U\tzE(!3wyo.\t`OKNc'\n3"
    list_0 = [str_0, str_1, str_0, str_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    bytes_0 = b"}>\xe7\xd4-\xa7!\xd2\xd6\xa1\x8b\xd5o\xe3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    int_0 = -3155
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    int_0 = 3035
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    int_0 = 1487
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = "\rArDYu<q)Ux"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    bool_0 = True
    int_0 = -1635
    bytes_0 = b"2\x95\xd2\x80\xa2\x12R\xd4\xd2\xb8\xbe"
    tuple_0 = (bytes_0, bool_0)
    tuple_1 = (bool_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    int_0 = -421
    module_0.match(int_0, int_0)


def test_case_3436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3437():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    int_0 = 392
    module_0.get_new_command(int_0, int_0)


def test_case_3439():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3440():
    int_0 = 3768
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    str_0 = ",$P$OiBJP"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    bytes_0 = b" P\xd8\xb9-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    float_0 = -4181.681
    module_0.get_new_command(float_0, float_0)


def test_case_3445():
    pass


def test_case_3446():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3447():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    int_0 = -1107
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    bytes_0 = b"\xd8\xf6<\xa21"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    bytes_0 = b"\xbd\xf6w\xc8\xff|\xb9jt"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3452():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3453():
    complex_0 = 421 + 3250.68j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    float_0 = 2293.6
    module_0.get_new_command(float_0, float_0)


def test_case_3455():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3456():
    float_0 = 153.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    str_0 = "v\nC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    int_0 = 2093
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    str_0 = "\x0cI`f'{GUV\n~ /;b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    float_0 = 712.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    int_0 = 356
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    int_0 = 1186
    str_0 = 'pH"D\x0b8IaBHSPTr\\TDbEY'
    dict_0 = {str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    int_0 = 770
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    complex_0 = -831.69292 + 2334.239185j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    int_0 = -3606
    bytes_0 = b"\xef\xe2\xd7/ \xd6Z\xcd\x02g\xfd\xd1<"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bool_0 = False
    bytes_0 = b"\xf5\xf48\x85\xb7\xf5"
    tuple_0 = (bool_0, bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    str_0 = "v8|7$4Rd_/W<~H1"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    int_0 = 875
    list_0 = []
    bytes_0 = b"\xed\x02\xdfpg\x8f"
    bool_0 = True
    complex_0 = 1165.917 + 2646j
    tuple_0 = (bool_0, complex_0)
    tuple_1 = (tuple_0,)
    tuple_2 = (int_0, list_0, bytes_0, tuple_1)
    list_1 = [tuple_2, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    str_0 = "&D`d;jm'4"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_3472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3473():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    float_0 = -1794.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    bool_0 = False
    set_0 = set()
    list_0 = [bool_0, set_0, set_0, bool_0]
    tuple_0 = (set_0, list_0)
    list_1 = [bool_0, bool_0, bool_0, tuple_0]
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    str_0 = "IL,0ZzM[Qcj/;"
    dict_0 = {str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    int_0 = -1237
    str_0 = "TVXP)cr$"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    complex_0 = 1030.936 - 2.93j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: list_0}
    tuple_0 = (dict_0,)
    str_0 = ""
    tuple_1 = (list_0, tuple_0, str_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    str_0 = "\x0b%P.\\Ch,UFc79ndJ67CU"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    str_0 = "T  /fDMn?i$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    bytes_0 = b"\x93\x1cM]\x18\xce\x86B\x1fu\xdbF\x07\x82\x01\xa6\xc8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    float_0 = 88.747161
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    str_0 = "*x"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    bytes_0 = b"\x83u\x98\xd2V/\xbb\x06\x86\xb6*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    float_0 = 1661.7365
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    complex_0 = 285.273928 + 1256.77j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    str_0 = "w\x0c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    bytes_0 = b"\x8c\xf8\xfd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    str_0 = "22nc;/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    str_0 = "sar[,>@7=\\\r#"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    bytes_0 = b"8`\xe5\xc8\x02S\xc2\xa2\xbd\xcf@\xde\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    bool_0 = True
    bool_1 = False
    bool_2 = True
    str_0 = "Y$qY\r\x0bd6{a,R j,"
    tuple_0 = (bool_0, bool_1, bool_2, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    float_0 = 2347.56
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    int_0 = -2176
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    bool_0 = False
    bool_1 = True
    bytes_0 = b"\x1b\x88U\xd4^?\x16\xb4\xdd3CU\xe9"
    tuple_0 = (bool_0, bool_1, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    float_0 = 656.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    bytes_0 = b"@X\xfd\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    int_0 = 4519
    bytes_0 = b"\x90\xbffS\xa5\x103\x17\xcf\xdb\x84\xb1\x14\xbc\xb77\xee\xb9M"
    float_0 = -3436.1218
    tuple_0 = (int_0, int_0, bytes_0, float_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    str_0 = "$:-H?la\ta?"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    bytes_0 = b"\tj_\x1e\x10\x91<\xdd\x9b\xe3"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    int_0 = -1766
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    float_0 = -4890.16766
    tuple_0 = (dict_0, float_0)
    float_1 = -3986.81617
    module_0.get_new_command(tuple_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    str_0 = "9l"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    float_0 = -1681.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    int_0 = -648
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (list_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    bytes_0 = b"V\xa7\xf5\xa8:|\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    bytes_0 = b"\xfa\xce\x06\xaa\x0e\x91R\\\xb6\xe9U$ \xc5\x13]\x96\xbb\xc2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    str_0 = "8 yl;SN"
    int_0 = 2772
    list_0 = [str_0, str_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    float_0 = -2112.8324
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    str_0 = "eyo\nf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    str_0 = 'OeN["iq5V'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    bytes_0 = b"\xc0\x82\xacM\xb1\x17\xf8\xab\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    bytes_0 = b"\xe3\xf6\x96\xc5\xb8D\x8a\xe4"
    bool_0 = False
    dict_0 = {bytes_0: bool_0, bytes_0: bool_0, bool_0: bytes_0, bytes_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    float_0 = 356.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    bytes_0 = b"P\xf42\xa7\xce\xc2$\x85\x04\x8cG,\x03B\xfb\x07qI)\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    str_0 = "CPjr]ts ^-n\\!Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    str_0 = "t]pPo>,ie&p!8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    str_0 = ",'_"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


def test_case_3528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3529():
    bytes_0 = b"(\xa8[\x9a\xbe\xd9\x14\xae/\n>\x1en"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    int_0 = -1967
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    bytes_0 = b"~\x16"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    bytes_0 = b"\x95\xdb\xb1e\xd1\xd3\x84\xc7\xcd\xa8\xb19\xack"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3533():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3534():
    complex_0 = -3495.7 - 1834.1405j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    bytes_0 = b"\xd5\xc9\xb4\x18\xea\x0e\x1f\xe7\x13\xbd\xc1\x1d\xb5\x7f\x82b\xa7:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    int_0 = 1072
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    bytes_0 = b"{\x1f\xdc\x0f\x1c\xcb\x11\xfcI\xcd\\\xbam\xccT"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    bytes_0 = b"\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    float_0 = -2480.69465
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    float_0 = 1079.5804
    list_0 = [float_0]
    str_0 = "M&$u>s"
    str_1 = "?"
    str_2 = "98>8"
    dict_0 = {str_0: float_0, str_1: str_1, str_0: float_0, str_2: str_0}
    module_1.object(*list_0, **dict_0)


def test_case_3542():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3543():
    float_0 = 1317.0
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    float_0 = -4256.2
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    str_0 = "=kGSc!\r-"
    module_0.get_new_command(str_0, str_0)


def test_case_3546():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3547():
    str_0 = "7Z;}`;.8v?q=1:T$"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    int_0 = 4680
    int_1 = 1202
    module_0.match(int_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_1: bool_0, bool_0: bool_1, bool_1: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    str_0 = 'T=`.C6`"P?QcJV=Y!'
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    float_0 = -1377.71072
    bytes_0 = b"`\x00\xa2\xebq_\xbb"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    int_0 = -1360
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    bytes_0 = b"\xa0\xdd\x95\xe7\xf2\xce\xcb?\x88\xb2\xb7;\x00"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    str_0 = ".W%to"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    bytes_0 = b"'y\x80R\xbc\x16\xcc\xe1\xeb|\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_3557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3558():
    str_0 = "S8KY+~ZjXsvQd^#\r\\wW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    int_0 = -203
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    int_0 = -1364
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    list_1 = [list_0, list_0, set_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    bytes_0 = b"6p\xca\xb1\x9c(\xca\xf69\xfd\xef_!\x02\x11)\xe9\xe5"
    module_0.match(bytes_0, bytes_0)


def test_case_3563():
    pass


def test_case_3564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3565():
    int_0 = -1203
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    str_0 = "'r@"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    int_0 = -1351
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    int_0 = -3858
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    str_0 = "O.m"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    bytes_0 = b"\x9c\xae\x98\xdb\xf6\xbaBZ\x8aJ~\x15\xfe<\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    str_0 = "/!gb"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    str_0 = "+E\x0c~+z/l"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (str_0, list_0)
    float_0 = -4105.8
    list_1 = [tuple_0, float_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    int_0 = 1915
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    int_0 = -2185
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    none_type_0 = None
    str_0 = "mg\r8"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    complex_0 = -468.5349 - 1291j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    str_0 = "\n\tia-AD\\GZ,>[9:Vt<\t"
    float_0 = 196.668
    set_0 = {float_0, str_0, float_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    str_0 = "w|\x0cy"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    float_0 = 422.1136
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    int_0 = 83
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    str_0 = "6i-t#{pcB"
    bytes_0 = b"\x14i_H\x1e\xa9]&\xd0"
    tuple_0 = (str_0, bytes_0)
    set_0 = {str_0, tuple_0, tuple_0, bytes_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    bytes_0 = b"\xa7 d\xfd\x80\x94\xf3\xb9\x13~\xd1i^\xdb\xaa\xd75:\xb2\xde"
    complex_0 = -495.87 - 1897j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    int_0 = -1119
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    int_0 = -2774
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    int_0 = 2904
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    bytes_0 = b"\xd8\xafB\x0b\x07\xa4\\\xfb\xcf{U\x8a-\x95^"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3590():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3591():
    bytes_0 = b"\xbe\x9a\xc9\x1b\xa0\xda\xb8Xj\x06\xd4\x9b^\x03"
    set_0 = {bytes_0}
    list_0 = [set_0, bytes_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    str_0 = "{j0N_7O#0Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    int_0 = -689
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    str_0 = "cC\x0c%xz"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    bytes_0 = b"Aw\xf8q="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    str_0 = "Qx6/Zd1H"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    bytes_0 = b"4\xe0[\x83\x8b\xe1\xfaZd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    int_0 = 579
    bytes_0 = b"\xe1X\xa5\x1c\xe0g\t$\xcdc\xbcY\xfe\x9d\xf1"
    tuple_0 = (int_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bytes_0 = b"gM\x08\xf7|\x12\x0eA\xf9l"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3603():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3604():
    float_0 = 1240.98
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.get_new_command(object_0, object_1)


def test_case_3606():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3607():
    bytes_0 = b"\xf3\x13/\\j?"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    str_0 = "}3"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    object_0 = module_1.object()
    float_0 = -2348.93
    tuple_0 = (object_0, float_0)
    list_0 = [tuple_0]
    module_0.match(list_0, float_0)


def test_case_3613():
    pass


def test_case_3614():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3615():
    int_0 = -1586
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    str_0 = "<=Sf_PJiyN!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    int_0 = -49
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "O{zGo[g1`!u"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    float_0 = 455.67
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    int_0 = -4947
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    object_0 = module_1.object()
    str_0 = ",K"
    tuple_0 = (object_0, str_0)
    list_0 = [tuple_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    float_0 = -902.980718
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    complex_0 = 2057.05603 + 521j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    float_0 = 852.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    str_0 = "S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    bytes_0 = b""
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    int_0 = 1347
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    complex_0 = 2971.65 - 669j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    str_0 = ";c;CVc"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    str_0 = "9t"
    int_0 = 1433
    tuple_0 = (str_0, int_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    bytes_0 = b"\x93\x0e;\xc4\xefc*\x03+0\xb6\xfe\x85b`\x04[\xb2\x98"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    tuple_0 = ()
    str_0 = "*w@\x0b>}=0>`#H"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    str_0 = "Zv^Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    float_0 = 1098.751
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    str_0 = "+Rfp\x0ca3!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    str_0 = "t;\t2zM!b"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    int_0 = -570
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    complex_0 = 1598.97148 + 2039.553j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    str_0 = "`+\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    int_0 = -3955
    tuple_0 = (int_0,)
    set_0 = {tuple_0, tuple_0, int_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    bytes_0 = b"\x8c\x87\x89\xe0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    int_0 = -1195
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    str_0 = "P\\RPg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    int_0 = -975
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    tuple_0 = ()
    int_0 = -198
    tuple_1 = (tuple_0, int_0)
    bytes_0 = b"\xf9_"
    int_1 = -418
    list_0 = [int_1, int_0]
    tuple_2 = (tuple_1, bytes_0, int_1, list_0)
    module_0.match(tuple_2, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    float_0 = 1330.0
    tuple_0 = (float_0, float_0, float_0)
    module_0.match(tuple_0, tuple_0)


def test_case_3652():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3653():
    bytes_0 = b""
    object_0 = module_1.object(*bytes_0)
    module_0.get_new_command(object_0, object_0)


def test_case_3654():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3655():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    str_0 = "->b+{1\x0ctfJz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    complex_0 = -318.19 + 3081j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    complex_0 = 715.2 - 49.6154j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    float_0 = -831.1088
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    bytes_0 = b"\xd3GV\xf7 \xfc\xc7\xde\xe9}\xc8\xfb\xa7\xd0\xbb\xc7\x91\x17\xe4"
    bytes_1 = b"}\xbar\xb1\x11\xd5\xebaF"
    set_0 = {bytes_0, bytes_1, bytes_0, bytes_1}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    bool_0 = True
    int_0 = 171
    dict_0 = {bool_0: bool_0, int_0: bool_0}
    float_0 = 2750.663
    tuple_0 = (dict_0, float_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    none_type_0 = None
    int_0 = -1144
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    int_0 = -50
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    bytes_0 = b"vjX\x1f`j\xfa\xc5\xdc\x83\xf3 "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    str_0 = "7k~\x0cW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    bytes_0 = b"]9\xea\x1c\x8cA\xb5\xaa\xfc\x01\x10\xf3F"
    module_0.match(bytes_0, bytes_0)


def test_case_3670():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3671():
    bytes_0 = b"\xcf52\xa9\xa3c\x06\xd9\x96\xb7\xdb\xadv\xf2l\xf5\xbb."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    bytes_0 = b"\xf93n\x1d(\xa8\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    bytes_0 = b"\xf7\x1b'\xa0\xf7\xe29\x06\xda\xa3j"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    str_0 = "\x0c#00uHwn\t%Zp8l[gYW@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    dict_0 = {}
    int_0 = -2402
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    str_0 = "vsc~vp"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    bytes_0 = b"o\xdb\x8f\xa4\xcf\x1b\xe2\tG\xb4@\x8c?"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    int_0 = -1031
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    float_0 = 2150.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    int_0 = -2468
    int_1 = 1018
    bool_0 = True
    bool_1 = True
    tuple_0 = (int_0, int_1, bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    float_0 = -8.66531
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    int_0 = 12
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    str_0 = "?OSaD(g\t&R~u.twH%V-"
    module_0.get_new_command(str_0, str_0)


def test_case_3684():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3685():
    float_0 = -791.951323
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    float_0 = -5028.263217
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    complex_0 = -900.5241 - 397.80973j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    float_0 = -1878.392
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    str_0 = "qx+q\na>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    int_0 = -1839
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    float_0 = -1586.01
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    bytes_0 = b"\xdb\xff\x84Me"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    int_0 = -929
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    int_0 = 2277
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    bytes_0 = b"\xd3k\xa1LwW\x99J"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    int_0 = 2126
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    int_0 = -4558
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    float_0 = 203.43822
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    int_0 = 1896
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    float_0 = -265.6799
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, dict_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    bytes_0 = b"r\x16\x95\x9d\x05\x90\xc4\xe1\xe9Wf\xdc\xc1\xbcWT\x02ki"
    module_0.match(bytes_0, bytes_0)


def test_case_3705():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3706():
    bytes_0 = b"\xcaK\x8b\xa6\x93.\xd4!)\x14,\x01\xc9\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    bytes_0 = b"jv\xe1.\xb72\x8cs"
    float_0 = -1872.232822
    bool_0 = False
    tuple_0 = (bytes_0, float_0, bool_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    int_0 = 2040
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    str_0 = "."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    int_0 = 752
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    bytes_0 = b"H\xf5g1\xff\xe6<\x18a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bytes_0 = b";\x82\xe6\xc63\xec\xdb\xe3"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    str_0 = "'\x0b\t"
    int_0 = 1874
    tuple_0 = (str_0, int_0)
    tuple_1 = (str_0, tuple_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    bytes_0 = b"r\xaa?\xfbJ\x95\xe6u:\xdb"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    str_0 = "*ma='{\tC}\x0b\neo!"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    int_0 = 564
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    float_0 = -844.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    int_0 = 2006
    tuple_0 = (int_0,)
    list_0 = [tuple_0, int_0, tuple_0, int_0]
    str_0 = "Mo}\r|z\tuD"
    dict_0 = {str_0: tuple_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    int_0 = 2482
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    int_0 = 934
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    complex_0 = 857 + 553.357432j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    bytes_0 = b"\xf4\x0c\xbe\xa9*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    str_0 = ""
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


def test_case_3726():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3727():
    str_0 = "2#"
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    int_0 = -2444
    module_0.match(int_0, int_0)


def test_case_3729():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3730():
    str_0 = ",6v(bkE"
    bytes_0 = b"\xbb\xc5\xf8)4+\x07$(\xccy\xb5\x95\x8a"
    tuple_0 = (str_0, bytes_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    int_0 = 1800
    int_1 = 4878
    list_0 = [int_0, int_0, int_0, int_1]
    set_0 = set()
    bool_0 = True
    tuple_0 = (list_0, set_0, bool_0, set_0)
    bytes_0 = b"\xdb\x0e\x132\xa2#\x7f\x1f\xee\x1e\x06%\xc9\xad\x91\xe5\x03\xb2"
    tuple_1 = (int_0, tuple_0, int_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_0)


def test_case_3732():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3733():
    float_0 = -106.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    int_0 = -561
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    bytes_0 = b"\xd3\xd3\xf56\xf0\xd3\xfe4\xed\xe5\xc6\xb0WN\xa7\xeb\x07\x0c\n?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    str_0 = "YB$vk3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    int_0 = 1224
    str_0 = " qE2-K?8}NA#]|3dEb%j"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    str_0 = 'E.\t"pl"P#o`JCKL:\x0b'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    str_0 = '5Y"<.\\Sc~'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    bytes_0 = b"$"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3743():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3744():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_3745():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3746():
    int_0 = 906
    module_0.get_new_command(int_0, int_0)


def test_case_3747():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3748():
    int_0 = -789
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    str_0 = "B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    str_0 = "j<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    bool_0 = True
    bytes_0 = b"^\xf8\xaf?\x98\xaajPp\x83\xdd"
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = False
    int_0 = 571
    tuple_0 = (bool_1, int_0, list_0)
    tuple_1 = (bool_0, bytes_0, list_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    bytes_0 = b"Oz#\xff7\xfc\xc1\xb7\xf5f\xce\x1dS\xe1\xc9]\xd3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    bytes_0 = b"\x1d\xc0\xe8\xc0\x1a\xaa\xd5\nx*\xab\xc1\x104\xc5\xdb\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    int_0 = 572
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    int_0 = -2965
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    int_0 = -2651
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    complex_0 = -718.98 + 854.3j
    int_0 = 793
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    int_0 = 799
    bytes_0 = b"\xcdrDQ\xad\xbd"
    module_0.get_new_command(int_0, bytes_0)


def test_case_3760():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3761():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    complex_0 = -997.616 - 2106.855138j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    int_0 = 2102
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    float_0 = -1403.0405
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    int_0 = -2759
    str_0 = " ~N:%$\x0c\n\rS'&)P=Lcv?>"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    bytes_0 = b"I\xdak\xc4?U\xc2\xdc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    bytes_0 = b"\xcc\xf2\x0e\xe3\xc8\x9c\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0, bool_0]
    complex_0 = -1012.385 + 1219j
    tuple_0 = (set_0, complex_0)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    str_0 = "u8@P:O%{bK7J\\]U,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    bytes_0 = b"\xfaegu\xe9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    str_0 = ">AkzDy'\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    str_0 = 'j<MtzCh/vM"gE5c"\rmR'
    module_0.get_new_command(str_0, str_0)


def test_case_3776():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3777():
    float_0 = -248.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    str_0 = "e"
    set_0 = {str_0, str_0}
    module_0.get_new_command(str_0, set_0)


def test_case_3779():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3780():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    int_0 = 2665
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    int_0 = -2891
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    str_0 = "Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    bytes_0 = b"\xc3\xf0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    int_0 = -1788
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    float_0 = 918.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    float_0 = 284.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    bytes_0 = b"\xf2\x9c\x8cm^\xf8D)N"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    bytes_0 = b"\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    str_0 = "0<hb\n&+R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    str_0 = "}iT`"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_3794():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3795():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    bytes_0 = b".\x8awz\xbbU\x19\xce\x93\xdcI\xc3\x9cC\xed\x9a\x80[\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    str_0 = "q(7\rC\x0bQ)W8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    float_0 = -1279.38
    module_0.match(float_0, float_0)


def test_case_3800():
    pass


def test_case_3801():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3802():
    bytes_0 = b"\xea\xe1\xfb\xc8z\xb2\xca\xd0\x8b\xf12\xc4\x14\x9d\x10A\x82\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    int_0 = 338
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    bytes_0 = b"3\x8c\x13\xc0|0\xf1\xd0\xb6\x808"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    str_0 = "B\\JOAU,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    complex_0 = -1460 + 1019.5362j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0, tuple_0, complex_0]
    module_0.get_new_command(list_0, dict_0)


def test_case_3809():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3810():
    str_0 = "Sb\tV fyRHhF!3Z?~)"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    bytes_0 = b"\xebd.\xee\xaa\x99\xf7)\x96L\x06\xb8\xa7\xe5\xc2Z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    bytes_0 = b"'\x92H\xd7\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    int_0 = -2355
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    int_0 = 745
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    bytes_0 = b"\x96\x9c{\x95>uF2\xcd\x84F GX\xc1\x85D\x8e\x17\xeb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    str_0 = "v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    float_0 = -1445.0
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    bytes_0 = b"\x032+\x9cH*L\xf1\x01\xbd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    int_0 = -214
    list_0 = [int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    str_0 = "NC8KR\t0~'(4w"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    str_0 = "U5I37;UP%W7dRy!cP&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    complex_0 = -418.6 + 389.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    set_0 = {bool_0, bool_0, bool_0, tuple_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    bytes_0 = b"g\x90"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    int_0 = -287
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    str_0 = "+5{RHe|`53u[I7Y3^jD|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    str_0 = "^/,#m"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0, bool_0, list_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    int_0 = -1330
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    bytes_0 = b"\xdf\xb2zT\x13\xa2\xf3\x82\x06\xea2\x8f\x03\xecujT\x17"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    str_0 = "t\\\r|i5W`1Yi=E~9+1w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {bool_0, tuple_0, bool_0}
    tuple_1 = (set_0,)
    dict_0 = {bool_0: bool_0, bool_0: tuple_1, tuple_0: set_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    str_0 = "e/)ng%\\rV"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_3835():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3836():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    str_0 = "C/gbWLmE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    str_0 = "AC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    complex_0 = 991.662293 + 1301.37057j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    str_0 = "dl\\_"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    int_0 = -2272
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    str_0 = "4QGu2i@RA,m2r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    list_0 = []
    float_0 = 1390.633
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    complex_0 = -1649.7879 + 3322.8j
    int_0 = -1042
    bytes_0 = b"\xbb\xcac\xc1%\xad"
    tuple_0 = (bytes_0,)
    tuple_1 = (complex_0, int_0, tuple_0)
    bool_0 = True
    list_0 = [tuple_1, tuple_1, bool_0, complex_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    str_0 = 'fkTc"&'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    int_0 = -3913
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: bool_0, bool_0: bool_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    complex_0 = 2665.89 - 568.98351j
    module_0.match(complex_0, complex_0)


def test_case_3849():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3850():
    complex_0 = 807 + 1362.589335j
    module_0.match(complex_0, complex_0)


def test_case_3851():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3852():
    int_0 = 582
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    str_0 = 'Y"a\\[$?;9DJ%d[L+|[C'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    float_0 = 740.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    float_0 = -1611.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    int_0 = 253
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    int_0 = -157
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    bool_0 = False
    complex_0 = -1480.72888 - 1953.2j
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: complex_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    int_0 = -421
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    bytes_0 = b"\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    bytes_0 = b"\xee\xb4\xc90V"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    int_0 = -502
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    complex_0 = -1289.54805 - 821.286j
    module_0.match(complex_0, complex_0)


def test_case_3866():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3867():
    float_0 = -705.8134
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    complex_0 = -2237.720435 - 658j
    bool_0 = False
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    bytes_0 = b"g|\x81d\x98\xb7W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    str_0 = '+e"VTl0lxcE\r--'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    bool_0 = True
    int_0 = -3281
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    str_0 = "Ay\t$]|?17jMDXb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    int_0 = 574
    int_1 = -348
    dict_0 = {int_0: int_1, int_1: int_1}
    module_0.get_new_command(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    bytes_0 = b"\x9c\xb9c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    dict_0 = {}
    list_0 = [dict_0]
    list_1 = [list_0, dict_0, list_0, dict_0]
    module_0.get_new_command(list_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    str_0 = "g=5#>6zq ,Re"
    int_0 = -390
    tuple_0 = (str_0, str_0, int_0, str_0)
    set_0 = {tuple_0, int_0, tuple_0, int_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    float_0 = -2672.86937
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    int_0 = -3077
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    bool_0 = True
    bytes_0 = b"5v\xba\xc0\xfb\x14\xcb\xcd\xd8\xc3\x10"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    int_0 = -2465
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    bytes_0 = b"Z\xe1\xeev"
    bool_0 = True
    bool_1 = True
    tuple_0 = (bytes_0, bool_0, bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    float_0 = -4250.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    str_0 = '"Q\t5\\[&<'
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    str_0 = "hHs1`<&\x0cV-{9Lp=o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    int_0 = 680
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    int_0 = -1287
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    bool_0 = True
    str_0 = "Y9K@PchlEz6\\:9"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    str_0 = "ka/17(q^gw#.&<$0Nzq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_3894():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3895():
    int_0 = 4341
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_3896():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3897():
    str_0 = "{X_n|"
    set_0 = {str_0, str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_3899():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3900():
    str_0 = "O\\(s &j95I.7"
    str_1 = "5%7.^r"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    complex_0 = 1947.1 - 1572.32453j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    bytes_0 = b"w"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = False
    list_1 = [list_0, bytes_0, bool_0]
    int_0 = -426
    tuple_0 = (list_1, int_0, list_0, list_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_3903():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3904():
    bool_0 = True
    str_0 = "[d',NX;6kR5S"
    list_0 = [str_0, str_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    int_0 = 472
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    bytes_0 = b"\x06\x10<g\xf9\xd6\xe8\x04\x02s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    int_0 = -1659
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    bytes_0 = b"72J\xed,\x8bl\xe3\xba(\xc2j\x9f\x95_\r%;_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    int_0 = 200
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3910():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3911():
    bytes_0 = b"N \x0cM\xd1e\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    str_0 = "(5zLVhH8\r@n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    bytes_0 = b"p\xc1\xc0g"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    int_0 = 515
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    bytes_0 = b"\xff\xa5h2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    str_0 = "bQ}d|s~o\n[2f,3j?="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    bytes_0 = b"N\x1b\xafV@\xb5\x93\xdb\xe8+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    float_0 = -310.2957
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    str_0 = "b4/p-d5\"'d'z~-z\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    float_0 = 3062.14
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    bytes_0 = b"\x1b"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    int_0 = 1054
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    complex_0 = -1230.19 - 2093.002j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    int_0 = 462
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    float_0 = -595.3
    complex_0 = -1022.6052 - 1676.08121j
    module_0.match(float_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    str_0 = "\x0c[YGTa}4F74"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    str_0 = "OOThAYC(dp6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    int_0 = -1478
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    int_0 = 1664
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    none_type_0 = None
    bool_0 = True
    str_0 = "*bg%~\\%wNv"
    str_1 = "\r^yRE}r5~G/?3MOI=2"
    tuple_0 = (bool_0, str_0, str_1, bool_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    bytes_0 = b"]\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    float_0 = -994.0
    set_0 = {float_0}
    str_0 = "W%(!C5u4xB4zdYGWVeV"
    str_1 = "H5~iZBY"
    dict_0 = {str_0: set_0, str_1: set_0, str_0: float_0}
    module_1.object(*float_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    complex_0 = -3200 - 2357.424j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    int_0 = 2242
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    str_0 = "^6IPqsb,'u0R4p?V>T"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    bytes_0 = b'"\xb9\x89\x15\xcc1\xb5\xa7\xd0\xce\xb0%\x9b\xac\xd9\xad$\xb2'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    float_0 = -2210.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    str_0 = ' hE4"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    dict_0 = {bool_0: bool_0, bool_0: tuple_0, bool_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    str_0 = "HfN)QBst"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    str_0 = "6i{E^{f}Sd"
    bytes_0 = b"\xaa\xe4\xc1\xfd"
    tuple_0 = (str_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    list_0 = []
    float_0 = 5060.072442
    bool_0 = True
    dict_0 = {}
    tuple_0 = (float_0, bool_0, dict_0)
    list_1 = [list_0, tuple_0, bool_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    int_0 = -814
    list_0 = []
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    bytes_0 = b"F\x0fy\xa7.\xc5t\x1b\xce\x18\xf3\xad\x82\xaf\x96\x99\xf7\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    float_0 = -2133.83
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    complex_0 = -1205.03 + 2686.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    bool_2 = False
    tuple_1 = (bool_2,)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    bytes_0 = b"\xf3[}[#1~\xcdJ\xa5\x88\xe2\x17XR\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    bytes_0 = b"\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    int_0 = 193
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    bool_0 = False
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    int_0 = 1196
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    str_0 = "kx1cwSK.#"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    bytes_0 = b"u\xdc\xcd\xa2\r\xcbs\xc4>"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3957():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3958():
    complex_0 = -2783 + 2313.9569j
    bytes_0 = b"\x12\x8a\x07\xf0]\xdb\xa5\x04\xbfH\xda\x89\x9f\x9e\xc3\xeeC\xd6"
    tuple_0 = (complex_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    bytes_0 = b"A\xcc\x9eSR\x8e3xY\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    str_0 = "EU=<>GB+2ZM\x0bt<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    bytes_0 = b"\xda\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    int_0 = -990
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    int_0 = -215
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    str_0 = "F&^xKM5>%G3{aPqqzB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    none_type_0 = None
    str_0 = "m9:H?a}"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    int_0 = 276
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    float_0 = 159.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    str_0 = "s2+3u"
    bool_0 = True
    dict_0 = {str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    bytes_0 = b"\xe1\x82\x87\x99M\x00#\x94o\xbcP\xda\xe6"
    set_0 = set()
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    str_0 = "0\x0bW:++\x0b\t7$fj"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    bytes_0 = b"\xc1d\xc8\xce\xb5\x06,\xda5\xc5\xaa\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    str_0 = "Md~3c%),`hvs6S'=M"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    int_0 = -1554
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    str_0 = "I/UlsY.b6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    int_0 = -6010
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    int_0 = -4844
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    float_0 = -453.961051
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    float_0 = 1304.416
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    bytes_0 = b"\xd2p\xcb\x8f\x0f\xa1YJ1l\x00\xd3\xe0\x07Kf'\xbf\x9c\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    int_0 = -1829
    complex_0 = -141.391 - 1160.2j
    module_0.get_new_command(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    bool_0 = True
    bytes_0 = b""
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    float_0 = -2191.796
    str_0 = "P`pn-:\x0b9rmkd"
    tuple_0 = (float_0, float_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    bytes_0 = b"\x92\x8f\x95?\x8d\x08~\xff\xb63\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    float_0 = 2491.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    int_0 = 3782
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    bytes_0 = b"\x02>J\xf8\xa8\x9a3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    str_0 = "#co!+\n\te+h$wzwATEK"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    int_0 = -689
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (set_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    str_0 = "Vr79#@ "
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    str_0 = "\x0b[l+|tIo\tUe;.XJNe:"
    module_0.get_new_command(str_0, str_0)


def test_case_3995():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3996():
    int_0 = 1705
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    str_0 = "C^Ns\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    complex_0 = 1936.2 + 1785.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    int_0 = 3450
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    str_0 = "-,^H9n 8}pI78"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    bytes_0 = b'"y\x94\x072\xd1'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    complex_0 = 1228.2689 - 1427j
    list_0 = [complex_0]
    module_0.match(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    float_0 = 1857.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    bool_0 = False
    str_0 = "4;$RjSW\tWRG$h}"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    bytes_0 = b"\xaf\xf4\xc5\xdcU\xc44r\x03"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4007():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4008():
    str_0 = "\x0cNP[j\x0c^]'}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    bytes_0 = b"\xfd\x89\xd5\xf7\x9b\x8a\xfdr"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    str_0 = "0mW49?jgT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    bytes_0 = b"\xc4\xfd9\x9eX"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    str_0 = '}qotU<ot}?gn2BSuj"'
    module_0.match(str_0, str_0)


def test_case_4014():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4015():
    object_0 = module_1.object()
    int_0 = -861
    bool_0 = True
    dict_0 = {object_0: object_0, int_0: object_0, bool_0: bool_0, object_0: object_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    str_0 = "pssf1G=ne<uF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    bytes_0 = b"\x1a\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    bool_0 = False
    dict_0 = {}
    bool_1 = True
    list_0 = [bool_1, bool_1, dict_0, bool_0]
    tuple_0 = (bool_1, list_0)
    tuple_1 = (bool_0, dict_0, tuple_0)
    module_1.object(*tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    int_0 = 1231
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    int_0 = 1267
    str_0 = " V"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    bytes_0 = b'*\x82\x9a\xc0\xc9tD5!x\x95"O\xc2'
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    int_0 = -788
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    int_0 = 1640
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    bytes_0 = b"\x04\x1ex\x16"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    bytes_0 = b"\xbc'\r"
    set_0 = set()
    list_0 = [bytes_0, bytes_0, set_0]
    dict_0 = {}
    tuple_0 = (list_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    complex_0 = 2008.127926 + 1848.770689j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    bytes_0 = b"\x92X\xcax\x87w\xe7\x8a\xa4\xdft\xb8I\xfa\x01\xff\xb9P7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    complex_0 = 388.21 - 1063.786j
    module_0.match(complex_0, complex_0)


def test_case_4030():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4031():
    bytes_0 = b"\xdd\x01\xb7\xac\x8f.\xa7\r(\x9a\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    str_0 = "2:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    int_0 = -1018
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    none_type_0 = None
    str_0 = "V/\r%"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    list_0 = []
    object_0 = module_1.object(*list_0)
    set_0 = {object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    float_0 = -3739.9
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    complex_0 = -2577.361 + 292j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0, bool_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    none_type_0 = None
    bytes_0 = b"\xadD\xb4\xb9\xd5G\t\xac\xd8Sf\xbc\xad\xa0\x04=\xd4v\xde"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    bytes_0 = b"\xf3\x03\xbb4(\x98\x8d\xa3\xd7\xac#\xee\xd1\x14V\\\xe1\x01\xe3s"
    bytes_1 = b"\x94\xb7\x88d*T$<0"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    float_0 = -2040.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    str_0 = "g0SAjq7\\K:\r=S(.aMZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    float_0 = -892.294368
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    bytes_0 = b"\xb1\xf4\x04N8V\xef\xf0\xab6x\xb3\xcbv\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    str_0 = "0smA>KtH$`B&kd~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    float_0 = -963.02368
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    bytes_0 = b"\xc1\xa4\xfb!\xa5"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    complex_0 = -1354.63 + 2340.7j
    dict_0 = {complex_0: complex_0}
    str_0 = "O`5)-\\D\x0bn8mq3e5b#& "
    bool_0 = False
    float_0 = -1801.4748
    bool_1 = True
    set_0 = {str_0, str_0, float_0, bool_1}
    tuple_0 = (bool_0, float_0, set_0)
    tuple_1 = (dict_0, str_0, tuple_0, set_0)
    list_0 = [tuple_1, set_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


def test_case_4049():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4050():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    str_0 = "~nt?$!D~~s"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    bytes_0 = b"+\xf0\x1e\xa6\x10E}6z\xd6t>aN\x0b\xc2\x8d"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_4052():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4053():
    complex_0 = -160.1085 + 784j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    int_0 = -2226
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    str_0 = "C1q+kB8gdt{OY5t\\"
    str_1 = "cvMd>ob'QYNFW\tw\"o"
    str_2 = "9=^mka{64Os$w3TnE|$p"
    dict_0 = {}
    dict_1 = {str_0: str_0, str_1: str_0, str_2: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    bytes_0 = b"i\xd6\xce\xd5\x07e2\x9e\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    str_0 = "\nPs.\\%72eIKO/;l\n"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_4058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4059():
    str_0 = "-p+O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    str_0 = "[['z3-&hV}99_og"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bytes_0 = b"\xf4\xecp\x04\xba\x04=\xaf\xc8\x8c\xf7pJ\x92\x87\xdd\xdc\x9d\xf1"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bytes_1 = b'\x1f\xa2\x1b"\t\xb9X\x95\xb4\xd4?\x0f'
    float_0 = 2726.882
    tuple_0 = (bytes_0, list_0, bytes_1, float_0)
    str_0 = "z\nKgD2X!<4WWLF&H."
    dict_0 = {str_0: bytes_0, str_0: bytes_1, str_0: str_0, str_0: bytes_1}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    float_0 = -6382.5332
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    str_0 = "FLe_.&f\rw'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    int_0 = 853
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    str_0 = "1:I%HV"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    int_0 = 307
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    str_0 = "\x0b)t<Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    str_0 = "4"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    float_0 = -2137.4824
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    int_0 = 837
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    str_0 = 'kt{,"oB3(p?7<Bfz'
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    str_0 = " 3H;e-<_8`Y]sGm[iR\t"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    str_0 = "@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    str_0 = "\rM5gb8m"
    int_0 = -1400
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    int_0 = 3687
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    int_0 = -3063
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    set_0 = set()
    list_0 = [set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    int_0 = 2146
    dict_0 = {}
    bytes_0 = b"\x7fV \x93\x7f!"
    bool_0 = True
    tuple_0 = (int_0, dict_0, bytes_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    complex_0 = 3741.71 + 1193j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_4086():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4087():
    str_0 = "j\x0bpI,esb ?(\rzd_M?{"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    str_0 = "*WW3$8\t7V|;0%0"
    bool_0 = True
    dict_0 = {bool_0: str_0}
    bool_1 = True
    tuple_0 = (str_0, bool_0, dict_0, bool_1)
    tuple_1 = (str_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    float_0 = 52.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    bytes_0 = b"\x03\xbd'\xa3\xd3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    bool_0 = True
    int_0 = 1702
    list_0 = [int_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    bytes_0 = b"\xcd8\x9f\x88\xb8J"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    int_0 = -2230
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    int_0 = -1758
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    str_0 = "833BtXv7Ld9r_]rxw%.3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_0}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    str_0 = "w4Bc_1^y~GvaqygEe85"
    str_1 = "CP@YB+s8%?2UHDd\x0cQ_%h"
    str_2 = "h`0\x0c!P6.K"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    int_0 = -3298
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    int_0 = 1766
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    bytes_0 = b"\x9c\xaf"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    int_0 = 2847
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    str_0 = "N}t`y\\_FxJLZl r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    str_0 = "\nm9w\n*Vu scwhO;r+"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    bytes_0 = b"\xa8$)\xaa\xe0'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    complex_0 = -1137.9 + 582.6207j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    str_0 = 'fJWQU\\)@qAOkTI"'
    module_0.match(str_0, str_0)


def test_case_4109():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4110():
    bytes_0 = b"d\x8b\x8b\x99\x9b\xfa\xe0\xd5X>\xeaTy\xbbw4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    bytes_0 = b"wHg\xacGF\xd3W!\xcd\x85\xd6\x07\x89\x8b~\xcb\xe0\xa7\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    float_0 = -1318.63
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    str_0 = "z6&\nV8M\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    bytes_0 = b'\xfbY\xb6\xd18\x97\xae@T"z\x03\xd3'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    bytes_0 = b"\xd4\xd1\x9b\x11"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    str_0 = 'X"K{eY*?K^XBfBMP'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    str_0 = '02u2!>"n8umA'
    str_1 = ";"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    str_0 = ""
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    int_0 = 937
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    bytes_0 = b"%.\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    int_0 = -1390
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    int_0 = 1351
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    int_0 = -1828
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    str_0 = "\r_O\r}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    bool_0 = False
    bytes_0 = b"J\xd7\xb4\x03\xcdsC"
    tuple_0 = (bool_0, bytes_0, bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    int_0 = 69
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    bytes_0 = b"U\xb4\x14\xcf\x08\xb2\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    float_0 = -1026.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    str_0 = "@\r\n#DUxS\ncpF1o4'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    float_0 = -833.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "6~v"
    tuple_0 = (bool_0, bool_0, list_0, str_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    int_0 = 407
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    tuple_0 = ()
    int_0 = -1049
    set_0 = {tuple_0, int_0, tuple_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    int_0 = 692
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


def test_case_4139():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4140():
    float_0 = 3436.4
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    bytes_0 = b"\x11_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    str_0 = "F`y\x0c%0r\tlWp,*\r9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    bool_0 = False
    bool_1 = True
    dict_0 = {}
    tuple_0 = (bool_0, bool_0, bool_1, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    str_0 = "MMzIZ7jzL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    float_0 = 1966.40435
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    float_0 = 839.44
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    int_0 = -3682
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    float_0 = 1243.506
    str_0 = '4Eh\t/,[>U,{+"7Z3e\r4x'
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    bytes_0 = b'\xb0"V\x02D\x10'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    int_0 = 950
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    tuple_0 = ()
    float_0 = -2259.8
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    float_0 = 128.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    str_0 = "WLld~@AI"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    set_0 = set()
    float_0 = 636.381
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    complex_0 = 2298.704181 + 4085.5542j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    int_0 = -1327
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    float_0 = 1027.185
    tuple_0 = (float_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    float_0 = 1211.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    int_0 = 2538
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    none_type_0 = None
    tuple_0 = ()
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    none_type_0 = None
    int_0 = -939
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    str_0 = "{m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    bytes_0 = b"\xd5M\x1d\xc3\x06@\x13V\xe3K\xfe"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    float_0 = 1783.2482
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    float_0 = -981.9329
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    bytes_0 = b"\xe7-GdX\xbbO\xce"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    tuple_0 = ()
    set_0 = {tuple_0}
    dict_0 = {tuple_0: set_0}
    tuple_1 = (set_0, set_0, dict_0)
    tuple_2 = (tuple_1, tuple_1)
    module_0.get_new_command(tuple_2, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    str_0 = "O4hI"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    str_0 = 'u7 m"\ti/\\Y'
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bytes_0 = b"\xc1\x89\x8dR%+&%Q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    float_0 = -949.651
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    bytes_0 = b"\xaa\x96\xf2\x1f\xa6\x9f{\xfc\xf5\x83\x87I\x9bb\xc1&o"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    bytes_0 = b"A\xe8l\x17<6\x06J\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    bytes_0 = b"(\x08Hm\xa5\xbeIL\x9d-\xaa\x16QZS\xa7-\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    int_0 = -400
    bool_0 = True
    list_0 = [int_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    bytes_0 = b'S\x91\xb7\xa6\x8d\xd4"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    int_0 = -1103
    module_0.match(int_0, int_0)


def test_case_4181():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4182():
    str_0 = "jY;{g{["
    str_1 = "xsL2KtdDX]KBj"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    int_0 = -1265
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    bytes_0 = b"\xa4y\xef\x1a\xb3p\xcdAE\xcc\xbe\x19\x1b\x8c\xf5+x\xb6\x82+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    bytes_0 = b"\xbb\xa2\x16f\xc4\xc9."
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4187():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4188():
    int_0 = 702
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    int_0 = -1248
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    complex_0 = -475.3 - 327.0456j
    int_0 = 3778
    tuple_0 = (complex_0, int_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    str_0 = "PF PdpR\x0cwvvC&u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    int_0 = 979
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    str_0 = "`,CPQa{2-XC{}t`8 \\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    str_0 = "TQNxu^,+\n{`y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    bytes_0 = b"eS\x98h\x05\xa2\xecrAbC\xd1\xae\xfd\xe4\x14 \xd5"
    bool_0 = True
    set_0 = {bool_0, bytes_0}
    tuple_0 = (bytes_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    bytes_0 = b"7"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    int_0 = 4594
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    str_0 = ":fGY"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    object_0 = module_1.object()
    str_0 = 'l-\x0bAx5}%C",\\'
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    bytes_0 = b"\xacV\xb7\xd3)\x97\xac\xdf\xaf\x03\xaf\x84\x98\x87\xb84y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    int_0 = 1000
    list_0 = []
    str_0 = "J&8,Ki\t=V5"
    tuple_0 = (list_0, str_0)
    tuple_1 = (int_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


def test_case_4205():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4206():
    int_0 = -1826
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    str_0 = "\x0cUEw20_ZU)]4FFnBoK"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    bool_0 = False
    float_0 = -807.3
    dict_0 = {bool_0: bool_0, bool_0: bool_0, float_0: float_0}
    list_0 = [dict_0, float_0, dict_0, float_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    str_0 = "hbWJG$/_q=!l8.;/V/ee"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    int_0 = 2068
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    bool_0 = False
    dict_0 = {}
    list_0 = [bool_0, dict_0, bool_0, dict_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4213():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4214():
    complex_0 = 2542.673 - 2051.1696j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, dict_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    str_0 = "z{2jD+J"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    float_0 = -1651.78338
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    int_0 = -1409
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    bytes_0 = b""
    complex_0 = 928.8 - 2010.16j
    module_0.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    float_0 = -3531.14821
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    str_0 = ')\rZle"n"$Nk*#\\e\tNb_T'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    bytes_0 = b"_+D}G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    bytes_0 = b"\xf56\xc7\x19\xba\xc8o.\xf6\xc6\x1c\xa4r\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    complex_0 = 1052 - 520.84343j
    bytes_0 = b"<R\x10|\xcf%\xbd\\\xbf\\B\xe0\xdd"
    module_0.match(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    str_0 = "meG$BEB-z\rrxB"
    int_0 = 2039
    tuple_0 = (str_0, int_0, str_0, int_0)
    list_0 = [tuple_0, tuple_0, str_0, str_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    int_0 = 687
    module_0.match(int_0, int_0)


def test_case_4231():
    pass


def test_case_4232():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4233():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    bytes_0 = b"\xd7\x91\x11\x1b\xd6\xba\xd9\xa7\x1f&\xe8\x92\xc4HJ\x93\xc2"
    tuple_0 = (set_0, bytes_0)
    list_0 = [tuple_0]
    bool_0 = False
    tuple_1 = (tuple_0, list_0, bool_0, tuple_0)
    module_0.match(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    float_0 = -941.385719
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    str_0 = "{|~th>^6r|\ndN "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    str_0 = "ve"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    bytes_0 = b"\xcd\xae\xdd\xa3\xc6\x8d\xd1d\x9ebT[\xb8\xbc\xebE"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    float_0 = 1723.55
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    float_0 = 2531.39
    module_0.match(float_0, float_0)


def test_case_4239():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4240():
    bool_0 = True
    str_0 = 'zr=/XJ,tmt9`\x0cU"%cv'
    dict_0 = {bool_0: str_0, str_0: str_0, str_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    str_0 = "yJDI9dmL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    str_0 = "O0%]N"
    module_0.match(str_0, str_0)


def test_case_4244():
    pass


def test_case_4245():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4246():
    bytes_0 = b"\x05{\xf5\xbc\x82\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    bytes_0 = b"U\xad?Q1-f\x84\x15\xb5o("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    complex_0 = 4950.797528 - 1593.55651j
    set_0 = {complex_0, complex_0}
    module_0.match(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    int_0 = -852
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    int_0 = -711
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    str_0 = "y[\"DAkBVeT4v*xV6V%'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    int_0 = 1924
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    int_0 = -630
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    bytes_0 = b"cU\x99\xce\x94\xda\xf6o\xad-\xee\xa3n\xd4\x06)\x05\xab\x81~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    str_0 = "rhb bB"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    bytes_0 = b"\xb4\x84\\\xa5^m\x1d\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    bytes_0 = b"\xef\xff\xa5x\x96\xb4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4260():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4261():
    int_0 = -944
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    str_0 = "F[Dq,cT.z%t[;I($"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    float_0 = 1602.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    float_0 = -2116.99
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    str_0 = "m'*@xm!\treT<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    int_0 = -1543
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    bytes_0 = b"\xfc\x0cw"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    bytes_0 = b"\x7f"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    str_0 = ";DW"
    int_0 = 947
    str_1 = "E)\n<?W+t<=X~\x0b&t"
    str_2 = "NBXWd`i\x0cK&8PVYE@"
    dict_0 = {str_0: int_0, str_1: str_0, str_0: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    int_0 = 751
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    str_0 = "6@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    str_0 = "\\nE\n\t|B$YNZ </P"
    set_0 = {str_0, str_0}
    bytes_0 = b"\xe3]Dxy@\xbd\x12vr\xfd\xb1\xb8@8"
    tuple_0 = (str_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, set_0)


def test_case_4274():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4275():
    bool_0 = False
    list_0 = []
    list_1 = [list_0]
    module_0.match(bool_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    bool_0 = True
    bytes_0 = b"B@j\x93\xe1DlTm\xae\x94\x85\x9b\xd6\xf6"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    bytes_0 = b"\xd3\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "tz6s&y"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    str_0 = "pC%9L"
    int_0 = -4194
    dict_0 = {}
    tuple_0 = (str_0, int_0, dict_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    complex_0 = 453 + 601.384025j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    int_0 = 874
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    int_0 = 1250
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_4283():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4284():
    bytes_0 = b"\x05\xb3:\xbd\xf7\x03V\x06f\x87\xa7\xef[\xaa\t\x07\xb3iw "
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    complex_0 = -1927.568 - 1398.51j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    object_0 = module_1.object()
    bytes_0 = b"\\|\xff"
    list_0 = [object_0, bytes_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    str_0 = "h`'V_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    int_0 = 4037
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    bytes_0 = b"PH\xd2\x0c\xd2\x00p"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    bytes_0 = b"\x8c\xe5\x02\xea\xf1 \x0c\xc1Xy \xdd\xb5>#\xde\xa3\x81\x1b\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    int_0 = -4127
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    int_0 = 2732
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    str_0 = "n\rNd~I|YL@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    int_0 = 2642
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4296():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4297():
    bytes_0 = b'o\x88\x90F\xae\xf3\xb3"\x8c9\xbd\xb1\x89{'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    str_0 = "\\\trLA\t.C3<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    int_0 = 1426
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    str_0 = "F\n`Fawi3gW3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    str_0 = "FnPW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    int_0 = 1915
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    str_0 = 'D)jD"uL[!c'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    str_0 = "<ntGC;9Es+2)V?]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    str_0 = "ZZTBt4Y%U~N$<(|PFhG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    int_0 = -2933
    tuple_0 = ()
    dict_0 = {int_0: int_0, int_0: tuple_0}
    bool_0 = True
    tuple_1 = (int_0, dict_0, dict_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    str_0 = "/rmon\x0bbERY5&9M1=/T"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    int_0 = -619
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4312():
    bytes_0 = b"\x89\x8d \x8b\x9c=\xf2\x1bw\x96"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    int_0 = -1880
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    int_0 = -735
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    int_0 = -2800
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    bytes_0 = b""
    set_0 = {bytes_0}
    tuple_0 = (set_0, bytes_0)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    float_0 = 1844.863923
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    float_0 = 2383.09
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"`f\x8es\xe9\xca\xce\xc2\xee"
    list_0 = [dict_0, bytes_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    bytes_0 = b"\x14]ywO_\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    int_0 = 1220
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    str_0 = "<\r.1$"
    float_0 = 848.516
    bool_0 = False
    tuple_0 = (str_0, float_0, str_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    int_0 = 1761
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    bytes_0 = b"b\xce"
    tuple_0 = (list_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    float_0 = 4717.9
    complex_0 = -1683.591348 - 5610j
    str_0 = "QZ6hdFwoR3g"
    tuple_0 = (float_0, complex_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    float_0 = 200.0615
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    str_0 = "uCSB"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    complex_0 = -730 + 625j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    bytes_0 = b"\xcf;\xbfvE\x97H\x00u\xd2 T<\xed\x91\x04\x91"
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = False
    tuple_1 = (bytes_0, bytes_0, tuple_0, bool_1)
    list_0 = [tuple_1, tuple_0]
    tuple_2 = (list_0, bytes_0)
    module_0.get_new_command(tuple_2, tuple_2)


def test_case_4332():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4333():
    int_0 = -656
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    complex_0 = 2091.174961 - 2618.6648j
    dict_0 = {}
    tuple_0 = (complex_0, dict_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    int_0 = -992
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    float_0 = -1187.88
    set_0 = {float_0, float_0}
    bytes_0 = b"K\xc7\xd7-[\xe7\x0fx\xb7"
    tuple_0 = (float_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    int_0 = -47
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    complex_0 = -1430.7009 + 1608.63j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    int_0 = 1154
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    float_0 = 1295.42
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    float_0 = 1821.04015
    set_0 = {float_0, float_0, float_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    bytes_0 = b"\x9b:\xfcd\xcaq\xd7\xee\x81\x91\xfe\xe7\x8e?\xb0\x0c\xf0\x13\xaeu"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    str_0 = " Uk U"
    list_0 = [str_0, str_0, str_0, str_0]
    tuple_0 = (str_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    bytes_0 = b"\xaf\x96!\xf7\xed\xc9\xee\x13]"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    complex_0 = 1025 + 4213.9j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    int_0 = -2337
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    bytes_0 = b""
    list_0 = []
    tuple_0 = (bytes_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    float_0 = 3592.9918
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    bytes_0 = b"\x96"
    bool_0 = False
    list_0 = [bytes_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    complex_0 = 40.595 + 1738.8217j
    list_0 = [complex_0]
    dict_0 = {}
    complex_1 = 2092 - 240.3j
    set_0 = set()
    tuple_0 = (dict_0, list_0, complex_1, set_0)
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    set_0 = set()
    tuple_0 = (set_0,)
    list_0 = []
    tuple_1 = (set_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    float_0 = 1604.828
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    bytes_0 = b'1+\xfbsh\xe1\xcc\xa9L\xf9"C'
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bytes_0, bool_0, list_0)
    list_1 = [tuple_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    int_0 = -89
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    str_0 = "jb!pJoh@+M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    str_0 = "U~9TaTms7z3!E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    int_0 = -536
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    bytes_0 = b"\x08\xb9J\xd3\xb8*]^\x05[\xe7s"
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    int_0 = 3556
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    bytes_0 = b"+\x86R\x92\x95.\xc5^R_\x17\xbe\x1atq\x051@\xf4"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    bytes_0 = b"\xe4?"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    int_0 = -1692
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    str_0 = "4+8cGt0@y-I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_4371():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4372():
    str_0 = "Ze\t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    bytes_0 = b"\xfb\x18\xb3.\x11 't\xb2T@\xc4]"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    int_0 = -1324
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    int_0 = 1602
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    str_0 = "EUvW)87+<%d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    object_0 = module_1.object()
    bool_0 = False
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: bool_0,
        object_0: bool_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    int_0 = -3576
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    str_0 = ")S(-L&Tz"
    str_1 = "m]sX >Q8rK"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    str_0 = "7z"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    list_0 = [tuple_0, str_0, bool_0]
    tuple_1 = (list_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    str_0 = "%*&oalgEk>#F/DJ="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    str_0 = "<1tt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    int_0 = 59
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    int_0 = -316
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    bytes_0 = b"\xe3n\xd0]\xbcir"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    bytes_0 = b'\xbc\xcc\xbb\xcfd3\x93\x9c\x1d"\xc0\xbcL\x14\x83\x91\xd0\x04\xdf'
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    float_0 = 2058.80188
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    bytes_0 = b"\x0b\x18\x81\xb9\xb1+eFf\x12e\x90\x92"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    str_0 = "z)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = "QNI"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    str_0 = "0+s"
    str_1 = "=k^<|&3blU-KMdRH?x?-"
    dict_0 = {str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    str_0 = ".-W*KJc~H*x[2"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    bytes_0 = b"\x89\xe6\x81\ty\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    none_type_0 = None
    int_0 = -1868
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    int_0 = 1146
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    float_0 = -4061.59092
    tuple_0 = (float_0, float_0)
    set_0 = {float_0, tuple_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    bytes_0 = b"\x1b\xb3\x03\x9e\x86\xf5e\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    int_0 = -2091
    module_0.get_new_command(int_0, int_0)


def test_case_4403():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4404():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    float_0 = -81.71451
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    list_0 = []
    str_0 = "Ftf"
    str_1 = 'f*5<L>.Fe"bF7'
    dict_0 = {str_0: str_0, str_1: list_0, str_0: str_0, str_1: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    bytes_0 = b""
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    str_0 = "YhyKr](\x0b}QS+m8L+HGE$"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    int_0 = -420
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    str_0 = ">At\n\x0c7"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    int_0 = -2979
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    str_0 = "AZ,hY0:2L}rl{"
    dict_0 = {str_0: str_0}
    bool_0 = True
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    str_0 = "Ex gdc+"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    int_0 = 217
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    float_0 = 2046.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    bytes_0 = b"\xab\xeb0\xd3\x9c\xc0\xaa\xd6/=\x11\x89\x8f\xc8\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    bytes_0 = b"\xd4\x15P;\xb8\x11"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    int_0 = -1964
    set_0 = set()
    module_0.get_new_command(int_0, set_0)


def test_case_4419():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4420():
    bytes_0 = b"\xb4\x99\xbd\xfe\x0f\xb5\x96\x86:"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


def test_case_4421():
    pass


def test_case_4422():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4423():
    int_0 = 917
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    bytes_0 = b"I\xeb>\x7ft\x83\x1f]"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    str_0 = "?)!7ARu1m!\x0b7;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    bool_0 = True
    bytes_0 = b"\xcclW\x874N\xcaJ\xa6\xd6\xd9"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    bytes_0 = b"\xbc0\x9e2j\xc4\xb5i\x14\x88N"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    str_0 = 'm+"\\?\x0cG.Ul\rf'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    str_0 = "[ BjS8m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    str_0 = "^v{gkhakx3^vH-"
    str_1 = "8:h*dON-_~"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_4433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4434():
    bytes_0 = b"\x98\x1d\x03:z\x0c\xdc\xf9\x98:\x0c"
    str_0 = 'yT2c"P4%Y'
    list_0 = [bytes_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    complex_0 = 1697.01123 - 1761.31j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4437():
    int_0 = -1555
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    bool_1 = True
    int_0 = 1686
    tuple_0 = (dict_0, bool_1, bool_0, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    bytes_0 = b'\xa2\xcch\\\xd5\xa0"\x00m\x16\xa7\xed\x15b\xb2\x95-\x8d'
    module_0.match(bytes_0, bytes_0)


def test_case_4440():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4441():
    bytes_0 = b"\n"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    str_0 = "O"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    bytes_0 = b"\xe5e<\x1f\xe3\x87I\xb5\xe8\xbc\x8fv"
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    complex_0 = 1573.978793 - 4114j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4446():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4447():
    bytes_0 = b"\xd95\xed"
    module_0.match(bytes_0, bytes_0)


def test_case_4448():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4449():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    int_0 = -435
    list_0 = [tuple_1, int_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    str_0 = "f \\\x0b!V|#\\K_-9)uMi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    float_0 = 751.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_1}
    module_0.get_new_command(set_0, bool_0)


def test_case_4455():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4456():
    str_0 = "+^wIA1!\rr.P"
    float_0 = -2091.52581
    bool_0 = True
    tuple_0 = (str_0, float_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    bool_0 = True
    bytes_0 = b"\xb0#N\xba\x1d\x1c\xaa<\xf6\x90\xaa\x7f#\x0b"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    tuple_0 = ()
    int_0 = -1131
    bool_0 = True
    tuple_1 = (tuple_0, int_0, bool_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    bytes_0 = b"\xe4$\xeaGZ\xe8M\x9b\x90`\xb2\xdb\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    bool_0 = True
    int_0 = -3871
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    str_0 = "M]53 bFW@+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    str_0 = "*M=qmvRNfk_T.="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    bytes_0 = b",\xafN\xc7Uhq\xcb#\xa5\xcb\x95`J"
    module_0.match(bytes_0, bytes_0)


def test_case_4465():
    pass


def test_case_4466():
    pass


def test_case_4467():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4468():
    complex_0 = -676.48 - 1182.76254j
    list_0 = [complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    int_0 = -1742
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    int_0 = 468
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    int_0 = 2661
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    str_0 = 'C_Da!"khk'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    bytes_0 = b"f\x9d\x02A4?\x19nI\x13gH\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    str_0 = "*pelJr"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    float_0 = -1799.572184
    list_0 = [float_0, float_0, float_0, float_0]
    list_1 = [float_0, float_0]
    tuple_0 = (list_0, list_1, list_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    bytes_0 = b"\xc4\x87\x86\xf1\xc5m\x8eB\xc1\xd6\xef;\xb5\x9fC"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    str_0 = "\x0bXA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    str_0 = "Fkc"
    tuple_0 = ()
    dict_0 = {str_0: tuple_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    str_0 = "9s36:pDXOKS;\nSkA,Yy"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    bytes_0 = b"\x19\xf9\x18\xe0E\xe8\xac\x12f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    int_0 = 998
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    str_0 = ",9Tx.FTTIx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    str_0 = "?~=V"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    float_0 = 1075.153
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    bytes_0 = b"'\xb3\xc7KJ\x8a\xd5M\xac\xde\x1df\xc5e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    int_0 = 831
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    complex_0 = 231.31462 + 176.8338j
    module_0.match(complex_0, complex_0)


def test_case_4491():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4492():
    int_0 = -1199
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    complex_0 = 1498.6 - 2269.261687j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    complex_0 = 2284.5 + 959.67862j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, complex_0)


def test_case_4495():
    pass


def test_case_4496():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4497():
    str_0 = "k5mN.vb\\4\x0bA*W,E\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = "}&A3iD"
    tuple_0 = (bool_0, set_0, str_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    str_0 = "K5%mAMZa*Fw9?5;<@XjB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    float_0 = -416.604
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    float_0 = -2846.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    str_0 = "3&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    str_0 = "S[M"
    bool_0 = False
    tuple_0 = (bool_0, bool_0, str_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    float_0 = -147.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    str_0 = "#VGE"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    bytes_0 = b"\x1a\x1f\xaa\xe1\x1d\x8a\x18`6\xe6\xbdW\xfc\xac\xf6N\xbam"
    list_0 = [bytes_0, bytes_0, bytes_0]
    int_0 = -716
    tuple_0 = (list_0, list_0, list_0, int_0)
    list_1 = [bytes_0, bytes_0, bytes_0, tuple_0]
    bool_0 = False
    tuple_1 = (list_1, bool_0)
    module_1.object(**tuple_1)


def test_case_4509():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4510():
    complex_0 = 517.361 - 918.4739j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    bytes_0 = b"}SF\x1b\xa2I\xf8\xa2u"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4512():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4513():
    str_0 = "?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    complex_0 = 2704.4 + 316.8555j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    str_0 = '"J?3;lBSj2.@"1{|(A~Z'
    str_1 = ",!0z1a#w71}}mD4ru"
    dict_0 = {str_0: str_1, str_0: str_0}
    dict_1 = {str_0: dict_0, str_1: str_1, str_1: dict_0, str_1: str_0}
    module_0.match(dict_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    int_0 = -2652
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    bytes_0 = b"\xdfq\xfd\xec\xe5%{\xfe\x82\x9bsz\xbc\xd0\x1f\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    str_0 = "9e<z)"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    bytes_0 = b"\xc1`\x7f,\xabv\r\xe0\xa4\x87Eu\x06\xd2\xc8\xb01\xa6Q"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    bytes_0 = b"6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    bytes_0 = b"Z\x8a\x1f\xaf9\xafr.wC1\x8e\x95\xe8\x06\x94"
    object_0 = module_1.object()
    module_0.get_new_command(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    none_type_0 = None
    bool_0 = True
    dict_0 = {bool_0: none_type_0}
    tuple_0 = (bool_0, dict_0, bool_0, bool_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    float_0 = -1063.7
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    str_0 = "\\(gSP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    float_0 = 527.6622
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    str_0 = "h6kt\\PnsW{x\x0c"
    str_1 = "Np4DL)r\t_XPN"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    complex_0 = 1189 - 278.74j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    int_0 = -219
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    str_0 = "wG2l':2"
    dict_0 = {}
    tuple_0 = (str_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    str_0 = "8ZvK9+\nM8%X@P4bZV"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    str_0 = "'Q2{UG]v9U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    str_0 = "E[#!9_N_m"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    int_0 = -692
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    none_type_0 = None
    float_0 = -1781.29114
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    int_0 = 364
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    float_0 = -1032.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    bytes_0 = b"\xf78PF\t}m"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    bytes_0 = b"\x89b\xc3&\x8c\\z\x1c:\x80\xcd\x8c\xf7R\x17\xeeb\xc0\xe5"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    bytes_0 = b"[L\x07c\xe9GI"
    tuple_0 = (bytes_0, bytes_0)
    set_0 = set()
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    bytes_0 = b"\x1c\xcax"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    int_0 = -1603
    str_0 = "N\nsv^q)f_\r-w(ef(F*^"
    bytes_0 = b"#"
    tuple_0 = (int_0, str_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    int_0 = -553
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    none_type_0 = None
    int_0 = -994
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    str_0 = ":E8"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    int_0 = 2861
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    bytes_0 = b"5\x08Ur\xa3\x8b\x91\xe7\x15&\x97\x96xu"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    bytes_0 = b"\xca\xf1~%\x1d\xb3a\x18\xbf\x03\xd5\xdb\xf0\x19\xb0\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    bytes_0 = b"_A:\x05\xc8\xe2\xba\x81\xc0\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    bytes_0 = b"G\x90Ra \xe1z}\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    complex_0 = 2638 - 1949.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    str_0 = "r!1N8B~kgl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    int_0 = 4730
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    str_0 = "tGYuI5[-Pm!Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    int_0 = -119
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    float_0 = -1546.198
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    bytes_0 = b"\x1e\x07Bz\x86D3\x01\x1ecn\xd1\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    int_0 = 1272
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    float_0 = 2295.157977
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    bytes_0 = b"\xd0"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    int_0 = -3145
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    int_0 = -1326
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4568():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4569():
    float_0 = 1871.260643
    module_0.get_new_command(float_0, float_0)


def test_case_4570():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4571():
    int_0 = 162
    bool_0 = False
    set_0 = {int_0, int_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    int_0 = 1389
    list_0 = [int_0, int_0]
    str_0 = "G'#\t,^7wP?"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    int_0 = 406
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bytes_0 = b'\x05\xe4\xb1"\xd1\x1c\x0b\x03\xb4\xdb\x13\xef%\xcf$\xf0'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4576():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4577():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    int_0 = -189
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    bytes_0 = b"\xea\xf1\xb7\x1eOj\x04\x93\xe0\xe9\x96\xd7\xe9s"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    bytes_0 = b"\xd6\x9fH\xe2\xb1\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    float_0 = 472.6769
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    bytes_0 = b"a\x8ev|\xdc\x92\xc6\xb4\xca\x8a\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    int_0 = 1202
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    float_0 = -2154.39829
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    str_0 = ":"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    bytes_0 = b"w\xbfD\x19\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    str_0 = "%,$*FX+xnZhA7k*}k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    complex_0 = 3976 - 1548.2561j
    bool_0 = True
    bool_1 = False
    tuple_0 = (complex_0, bool_0, bool_1)
    bytes_0 = b"\x0b\xbf="
    tuple_1 = (tuple_0, bool_0, bytes_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    bytes_0 = b"\xb0\xc1\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    str_0 = "6$*Fq8"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    str_0 = ""
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    int_0 = -364
    module_1.object(*int_0)


def test_case_4597():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4598():
    str_0 = "v%B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    float_0 = -826.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    int_0 = -2559
    bytes_0 = b"\xfe\xeaE\x86\x16\xfd\xc65\xa8P\xc9v\xde6{Vtg"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    bytes_0 = b"\xa8\xad\xae#\x0e\x8f\xea\x02\xc6\xb9\x8a,\x88\xa28\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    int_0 = 2130
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    bytes_0 = b"RW\xc9\x9b\xa4\xf7\xf5\xde\x9aB\xc1&K\xfa\x82r\x08\x10_v"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    int_0 = -83
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    bytes_0 = b"`\xd9\x8aFr\x15\xeb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    float_0 = -2025.63
    module_0.get_new_command(float_0, float_0)


def test_case_4610():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4611():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    str_0 = ":\ti;v\nh`8H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    bytes_0 = b"a\x7fm\x90}\xeb\x8b\x1c#\xd1\xb4}^%\xa9\xb28H\x8f\xb5"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    str_0 = " {;.6{mqHt"
    str_1 = "h"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    str_0 = "J2@`tO1>"
    int_0 = 2884
    dict_0 = {str_0: str_0, str_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    str_0 = "F"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    bytes_0 = b"\x84\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    str_0 = "yi4w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    bytes_0 = b"^9}q\x9b\xb8\xfc\xc7\xef\x89V"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    str_0 = "k_4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    str_0 = "\trsq%qs/@u<N4JGb"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    int_0 = 884
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    int_0 = 1657
    module_0.match(int_0, int_0)


def test_case_4626():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4627():
    str_0 = "cFIC{(P7p"
    str_1 = 's,J6eilb\x0b"nbWF'
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    int_0 = -2023
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    bytes_0 = b"\xca\x1b.\x8a\x86Gbu\xf6\xd6\xa4\x9e)\x9e\xf1=\x0b\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    int_0 = -2892
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    int_0 = 2557
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    float_0 = 275.308
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    set_0 = set()
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(bool_0, tuple_0)


def test_case_4636():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4637():
    bool_0 = False
    object_0 = module_1.object()
    dict_0 = {bool_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    str_0 = "r!Tv(k("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    str_0 = "2\x0c~O6M"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    str_0 = "tL\x0bL,\"A\x0bQq{52'#i"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    int_0 = -1232
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    complex_0 = 99.03507 - 903.3j
    list_0 = [complex_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    str_0 = "\r'aj}{\nO$SM#w-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    int_0 = 433
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    str_0 = "Td>)s}vxyO*eW"
    int_0 = -4257
    tuple_0 = (str_0, str_0, int_0, int_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    int_0 = -5380
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    set_0 = set()
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_1,)
    tuple_1 = (set_0, bool_0, tuple_0, set_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    bool_0 = False
    str_0 = ""
    bytes_0 = b"\x0bQc.\xeeF\xc4\x18uT\xa9\x0ee\xce;B"
    tuple_0 = (bool_0, str_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    float_0 = -2877.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    bytes_0 = b"r\xdf\xfe\x1f\xdd\x9e[\xa5\x10\xd5v\xdf\xeab\x85\x06\x17}\x1e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bytes_0 = b'\n/\x8b"'
    module_0.get_new_command(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_1: bool_0}
    int_0 = 200
    tuple_0 = (dict_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    float_0 = -1354.384834
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    bytes_0 = b"\xce\xe7\xf9u\xdcNH\xdd\xf2"
    set_0 = {bytes_0, bytes_0}
    int_0 = 3926
    tuple_0 = (bytes_0, set_0, set_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    str_0 = '+Wj$3$C670"i3\x0c^(xt6c'
    float_0 = -1354.75
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    bytes_0 = b"\xbf\xb9D\xe7:\x92\xb1\xdf\x1aA\x05n\xe4\x03\xdf\x0b\x95)\xe0"
    bool_0 = True
    str_0 = 'k\\r"+z#I>Ecc{J+B'
    tuple_0 = (bytes_0, bool_0, str_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    bool_0 = False
    float_0 = -320.0
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    bytes_0 = b";B\xe5%N0\x13\x8f\xdf\x16\xf1\x0f\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    int_0 = -1276
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    float_0 = 421.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    float_0 = -2820.982
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    none_type_0 = None
    bytes_0 = b'\xe0\x15\x9bg\x89H\xc5a\x87\x8f"\xfd\xb5]'
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    complex_0 = 658.5 - 2250.30727j
    bool_0 = True
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: bool_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    int_0 = -2366
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    bytes_0 = b"<\xf9\x0fw\xd3\x92\xd5\xbb\xbf?\x01\xbf\x97!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    int_0 = -2057
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    str_0 = "e-lS!|m\x0c5&iJ=%"
    bytes_0 = b"\x97\xc9\x9a\xe2zy`\xeb\xf3.\xf0\xd4\x14\x9a\x860\xb1"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    int_0 = -119
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    str_0 = "2b\x0b:!k,XR6~&o\r}v\\j"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    str_0 = "Q\x0c+t@9i8Y4P*`fU*Q~"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    set_0 = set()
    int_0 = -1316
    bool_0 = True
    tuple_0 = (set_0, int_0, bool_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    int_0 = 1171
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    bytes_0 = b"\xf3\xf8\x16\x9f\xdcA\xafh4.\x92\x15H\xfdF\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    bytes_0 = b"R\xcb-"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    str_0 = "vn="
    list_0 = [str_0, str_0]
    list_1 = [list_0]
    bool_0 = False
    module_0.get_new_command(list_1, bool_0)


def test_case_4680():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4681():
    bool_0 = False
    object_0 = module_1.object()
    list_0 = [bool_0, bool_0, object_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    bytes_0 = b"\x1d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    bool_0 = False
    tuple_1 = (bytes_0, tuple_0, bool_0, bool_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    complex_0 = 463.852 + 689j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    bool_0 = False
    str_0 = "@D1'9"
    str_1 = '"\x0b7C!KR9]+fFZA'
    tuple_0 = (bool_0, str_0, str_1)
    dict_0 = {tuple_0: str_1, bool_0: str_1, str_1: str_1}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    bytes_0 = b"\x18\x9d\tk/"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4687():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4688():
    float_0 = -40.01374
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    bytes_0 = b"Z\xd5\xcd"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    int_0 = -1152
    int_1 = 412
    list_0 = [int_0, int_1]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    str_0 = "+wL\\e]Yz[XQ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    float_0 = -1081.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    float_0 = -1697.9439
    module_0.match(float_0, float_0)


def test_case_4694():
    pass


def test_case_4695():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4696():
    bytes_0 = b"-\x92\x8c\x1by\xda\xc3\x95e\xb2\xdd\xf9Z\xeb\xfb\xfa"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, dict_0, bool_0]
    tuple_0 = (dict_0, list_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    str_0 = "F'UJ9-JE%Y0XHS/"
    module_0.get_new_command(str_0, str_0)


def test_case_4699():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4700():
    float_0 = 1426.4
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    list_0 = [tuple_0, tuple_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    complex_0 = 3483.84 + 56j
    list_0 = [complex_0, complex_0]
    str_0 = ">NO"
    bool_0 = False
    float_0 = 2667.42
    tuple_0 = (list_0, str_0, bool_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    str_0 = "Lq"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    int_0 = 915
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    str_0 = "lyke),4q\x0c`VS"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    float_0 = -2084.5
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


def test_case_4706():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4707():
    int_0 = -3091
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    none_type_0 = None
    int_0 = 1629
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    bytes_0 = b"q\x02K\x7f\x13%\xb2\xaaXK\xbe\xba\x9a\\\xdf\x94\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    bytes_0 = b"\x97\xba\x91\xd0\xd7\xc72\xe9\r)d\xda\x94\t0\x00.\xd1"
    float_0 = 4294.428
    dict_0 = {bytes_0: bytes_0, bytes_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    complex_0 = 3067.364 + 732.593135j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    str_0 = "Og@EAlMug!xeF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    bytes_0 = b"\xd9\xa30\x8bo\x9e\xcdu\x8a\xa3?J\x00\xfd\\\x0c~\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    tuple_0 = ()
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    bytes_0 = b"\x0c\x8b\x9e(\xc1\xad\x7f\xc5\xcb+\x18h\x7f\x16"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    float_0 = -2124.5599
    int_0 = 2222
    tuple_0 = (float_0, int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    str_0 = " =Q"
    tuple_0 = (bool_0, set_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    bytes_0 = b'lZI\xd3"\x8f+\x19\xe4\xcf\xe8'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    bytes_0 = b"P\xf79B=\xec\xf2\xc9qV\x9a\x82\x95l\x0b\xc6\xa11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    str_0 = "mr\x0bc,=<S~?.*)zXC.2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    bytes_0 = b"\xf0\t\x8c!\xf3\xb1\xa2\xc6\xbb\xd4LG\t\xd5\x1c\xb6i T%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    bytes_0 = b"\xb55\xf5q\xb8=m\x15\xe0\xe5Q\xc8&n[\xfdF"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    bytes_0 = b"\x19L\xb7\xd6<q\x85u\xba2\x9e\x9d\xdf\x9d\xf1"
    dict_0 = {bytes_0: bytes_0}
    bytes_1 = b"\x1d\x19sgN\xad\xb4\x19\xf5\x9e"
    module_0.get_new_command(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    none_type_0 = None
    bytes_0 = b"B{V\xd5\xbeNm\xe8\x01I\xee\x10\x0eG:M\x19\x1f}\x06"
    module_0.get_new_command(none_type_0, bytes_0)


def test_case_4726():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4727():
    bytes_0 = b"\xc1\x7f\xd9R\xecu\xe0\xc7\xbed9\x9a\x8a\xba\x94)\xb3\xe9\x9e\x89"
    module_0.match(bytes_0, bytes_0)


def test_case_4728():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4729():
    float_0 = -165.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    int_0 = 1414
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    int_0 = -5611
    int_1 = -1062
    set_0 = {int_0, int_1, int_1}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    str_0 = "M092wC"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    int_0 = 549
    str_0 = 'Wm2QX"N'
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    float_0 = 380.41
    dict_0 = {float_0: float_0}
    tuple_0 = (float_0, dict_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    bytes_0 = b"\x934"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    str_0 = "iH[xa"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bool_0 = True
    str_0 = "sX="
    tuple_0 = (bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    str_0 = "K"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    int_0 = 566
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    bytes_0 = b"BK"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


def test_case_4742():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4743():
    str_0 = "z\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    list_0 = [tuple_0, tuple_0, bool_0, tuple_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    bytes_0 = b"U\xfb\x96\xd1NH<\x05\x0c`A\xc2\xc9\xad\xe0\xdc7mK"
    dict_0 = {bytes_0: bytes_0}
    str_0 = "I"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    dict_0 = {}
    bytes_0 = b"\x90\x9a#w\xfc\x96\x12{\xc6\xe3P\x06\xa1"
    bytes_1 = b"\xea\x1d^;M\xed\xb9\xeduO\xd2I\x9b"
    tuple_0 = (dict_0, bytes_0, bytes_1, bytes_0)
    module_0.get_new_command(tuple_0, bytes_1)


def test_case_4747():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4748():
    bytes_0 = b"\x1d\xb9\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    bytes_0 = b"\xa1\x18\xd2\xf2\xa4\xdf0[\xd2\xc0\x03\xaag\xf0\xd8\x1eO"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0, bool_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


def test_case_4751():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4752():
    int_0 = -233
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    bytes_0 = b"\t+\xc2\xeb\xca\x1b\xe9\xf8j}7V5\xf7\x87_/"
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (bytes_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    bytes_0 = b"G\xac\xa7\xfc\xf1\xb9D\xe8/\x87\xae\x08]\xa2\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    bytes_0 = b"\xc4Z\xa1\xa6\xa7G\x93\xc5\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    bytes_0 = b"\nl\xb8\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4758():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4759():
    bytes_0 = b"D\x0b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    str_0 = "n-NrGVWuE27}122Cc"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    str_0 = "ebr$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    float_0 = -310.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    complex_0 = 144 - 4545.67299j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    int_0 = -2071
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    int_0 = -2047
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (int_0, set_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    int_0 = 730
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    int_0 = -1324
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    str_0 = "KG?ol`#RYN-\t/cVt(:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    int_0 = -1186
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    bytes_0 = b"<\xbeO\xa8\r\x0fD\x8c"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    int_0 = -973
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    bytes_0 = b"F\x00;r(\xc8\x16\x12\x84F\xdb\x92>\x08\x7f\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    int_0 = -1165
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    int_0 = 3302
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    bytes_0 = b"\xd0\x1e5\x0f\xe8R\xdbfR]\xf2\x9a\xc3"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    int_0 = -1587
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    str_0 = '}c"xBf,$m/PQ[/'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    complex_0 = -4408 + 5251.18107j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    float_0 = 1662.93
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    bytes_0 = b"\x91^\x02\x9f\x9a(\x00\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4788():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4789():
    bytes_0 = b"xp\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    str_0 = "Kxxmep\n]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    str_0 = "#G\x0b6)Ba\nY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    float_0 = -2525.718423
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    str_0 = ']vT*Eb5zo"F!'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    int_0 = 796
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    bytes_0 = b'\xb5o\xc0\xb8\xf3\x1d\xce"'
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4797():
    set_0 = set()
    bytes_0 = b"\x1eX\xa6,|R\x8eh"
    bool_0 = True
    int_0 = -1938
    tuple_0 = (set_0, bytes_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    int_0 = 1609
    module_0.get_new_command(int_0, int_0)


def test_case_4799():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4800():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    float_0 = -943.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    int_0 = -120
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    bytes_0 = b"\xf56\xe8)D\xc6);\xa8.\x95xV\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    bytes_0 = b"e\xe5\xfe"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    float_0 = -1349.54
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    bytes_0 = b"\x08\x03"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    float_0 = 4847.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    bytes_0 = b"\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    int_0 = -657
    list_0 = [int_0, int_0, int_0, int_0]
    dict_0 = {}
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    str_0 = 'p-:{8yOJ")oGR)P|\t'
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    bytes_0 = b"\xa9\x80;\xa0$\xc94\xc61\xd2\x87\xe5\xbd\xfb\xc7\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    bytes_0 = b"\xdd\x89\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    int_0 = -2151
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    float_0 = 648.4475
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    float_0 = 2094.898
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    int_0 = -1365
    tuple_0 = (set_0, int_0, bool_0)
    module_0.match(tuple_0, int_0)


def test_case_4820():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4821():
    none_type_0 = None
    bytes_0 = b"\x9b\x99\xd7\x16>K\x11\x93\x85\xffJ\xd9.u"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    float_0 = -3598.971
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    str_0 = "6';`ENx|++Q"
    list_0 = [str_0]
    tuple_0 = (str_0, list_0)
    bool_0 = True
    bytes_0 = b"\xee(\x0f\xd36/\xf6\\Y\x020\xe3"
    tuple_1 = (tuple_0, bool_0, bytes_0)
    float_0 = -215.355
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    complex_0 = 2693.60329 - 16j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    bytes_0 = b"\xd0\x80\xb9F,\xf4\x02\xa2\xdf"
    int_0 = 3930
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    bytes_0 = b"Z\x8c\xe9\x90\x1c\xb9\x82"
    bool_0 = True
    str_0 = "g[@=#h0I2@jq;qg\x0cM"
    tuple_0 = ()
    tuple_1 = (bytes_0, bool_0, str_0, tuple_0)
    bool_1 = False
    module_0.match(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    int_0 = 514
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


def test_case_4829():
    pass


def test_case_4830():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4831():
    float_0 = 2139.591
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


def test_case_4832():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4833():
    bytes_0 = b",\x1b'\xd3[\xb5\x0f\x11c\xb0\x87J\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    bytes_0 = b"\xc7\xecC\xabU?\x8f\r\xaePT\xe1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    str_0 = "yCp^$7IZ~)z\x0c7R:dQ&7l"
    list_0 = [str_0, str_0, str_0, str_0]
    tuple_0 = (str_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    int_0 = -2797
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_1, bool_1]
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    bytes_0 = b"\x02\xde"
    list_0 = []
    tuple_0 = (bytes_0, list_0)
    int_0 = 972
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    bytes_0 = b"\xe6\xcd\xf1\x02\x8b\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    bytes_0 = b"(\xfa\xda\xa2"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    str_0 = "'XZ4A"
    bool_0 = True
    tuple_0 = (str_0, bool_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    int_0 = 2947
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    str_0 = "0T%>E;"
    int_0 = 2423
    module_0.match(str_0, int_0)


def test_case_4846():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4847():
    str_0 = "/4y<e<%2uL]d{`l"
    float_0 = 670.44
    tuple_0 = (str_0, float_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    bytes_0 = b"\xd6Y\xb1\xbb\x13(\x0e4\xac\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    int_0 = -1898
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    int_0 = 1008
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    bytes_0 = b"\xd7V?\x18\xdc\x92\x873\xc5U\x18\xf2?-L\xfdL\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    int_0 = 1972
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    complex_0 = -1461.172454 + 570.82111j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    str_0 = "f"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    int_0 = -1577
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    bytes_0 = b"Qq\x0b\xf7\xd9\xd4\x9f\xb1\xf7+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bytes_0 = b"\xef\x9b|\xcf\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    str_0 = "p,+q\\0N?a"
    str_1 = "?%"
    tuple_0 = (str_0, str_1)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    bool_0 = True
    list_0 = []
    tuple_0 = (bool_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    int_0 = 820
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    int_0 = -1254
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    complex_0 = -420.37996 - 1339.639j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    str_0 = "dGC/dF,0*\t;\x0bWeM)"
    list_0 = [str_0]
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bytes_0 = b"\xc6\xd0\xdd\xfd\x13_N"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    float_0 = -537.158
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    bytes_0 = b"k\x96\xfa\xe3S\x0e\xce\xc4\t\x1b\xd8\xec"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    complex_0 = -1817.9 - 1142.6j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    int_0 = -1304
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    bool_0 = False
    str_0 = "T["
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    bytes_0 = b"\n["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    float_0 = 900.765824
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    bytes_0 = b"p\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    object_0 = module_1.object()
    int_0 = -3801
    int_1 = -1492
    dict_0 = {int_0: object_0, int_1: object_0}
    dict_1 = {object_0: object_0, object_0: int_0, object_0: int_0, object_0: dict_0}
    bytes_0 = b"\xac\xe3\xce"
    module_0.get_new_command(dict_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    str_0 = "#\\N.?`%u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    bytes_0 = b"\xeeb\x1een\x1b\x18\x91\xeb\x0fn\x1a\xc3\x10\x03@"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    str_0 = "wIB]nf(xqB2s h+i)Nw@"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    float_0 = -2161.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    int_0 = -3566
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    str_0 = "as}>P4"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    str_0 = " #Pb\t',(l\t^VgAL"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    str_0 = "<"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    bytes_0 = b"\x9f\x1eB\xa9\x7f\xf4!\x98\x87!!\xa3\x00)naO\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    float_0 = -365.67
    set_0 = {float_0, float_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    complex_0 = 2892.94512 - 3114.69983j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    float_0 = -246.0
    set_0 = {float_0, float_0, float_0, float_0}
    float_1 = -532.57
    list_0 = [float_0, float_1, float_0]
    tuple_0 = (float_0, set_0, float_1, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    int_0 = 937
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    float_0 = 1337.66
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    float_0 = 1546.99849
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    int_0 = 2071
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    float_0 = -3493.6452
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    str_0 = "\n4U$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    int_0 = 2402
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [int_0, tuple_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    int_0 = 306
    int_1 = -1479
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    str_0 = "\n^QL:RJTRB!tQ|3"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    bytes_0 = b"\x18R\xcf\xc8\x103\x8e,\xe8\xc2\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    float_0 = -757.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    bytes_0 = b"\xb0\x1bvH\xbb\x96\x1e\xea\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    bytes_0 = b"\xb0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    bytes_0 = b"#\xec9\xd9\x89\xb0\xf0\x0cK\xa37\x93y\xf2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    complex_0 = 1216.211179 - 219.1j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    dict_1 = {bool_0: dict_0, bool_0: bool_0, bool_0: dict_0, bool_0: dict_0}
    module_0.get_new_command(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    bytes_0 = b"FV7\xae\xce\x88\xcc~\x18\x1d\xc2g\x88Y\xc1q\x1b\x01"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    bytes_0 = b"]\xe5\x1a\x0b"
    tuple_0 = (bytes_0, bytes_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    str_0 = ">Utu<m"
    str_1 = "SXm}L^O`JJz,{,("
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


def test_case_4911():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4912():
    float_0 = 30.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    bytes_0 = b'.T\xac\xbf!\xe6\x8e"Y'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    bytes_0 = b"q\xffu\x871T\x0c\xa6\xd9"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    bytes_0 = b"\xa0<x\x0f\x04\x86$D\x8f\t\x1fl\xa6\x01\x16\xc2\x94\x10\x9f\xa2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    bytes_0 = b"K\xcf\x16D\xf6\xe1\xf1\xba\xde\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    str_0 = "Q\t\\V XnGD*kp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    int_0 = 1048
    list_0 = [int_0, int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    object_0 = module_1.object()
    dict_0 = {}
    tuple_0 = (object_0, dict_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    list_0 = []
    list_1 = [list_0]
    list_2 = [list_0, list_0, list_0, list_1]
    module_1.object(*list_2)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    int_0 = 2254
    set_0 = {int_0, int_0, int_0}
    complex_0 = -3451.382189 - 4042.52886j
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    int_0 = 2820
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    str_0 = "Db,LjG6D2)35l#n"
    int_0 = -4181
    tuple_0 = (str_0, int_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    int_0 = 173
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    tuple_0 = ()
    set_0 = {tuple_0}
    bytes_0 = b"\x06\xa0!%\x1b"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    int_0 = -513
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    int_0 = -274
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_4931():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4932():
    bytes_0 = b"|\xf4"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    bytes_0 = b"\xfc[\x90\x94"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    bytes_0 = b"y\xfaS&\x1c\x9b\xa4.9\x94\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    float_0 = 175.802302
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    bytes_0 = b"k\xc9\xf2s\x8bT\xd9\x03\x9a"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4938():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4939():
    str_0 = "Di.SDMWu0b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    int_0 = -298
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    str_0 = " "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    str_0 = "|a 6h<^%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    bytes_0 = b">\x10\xf8!\xfd\xbd\xc0\x1c\x0ecMR\xba\xb63"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    int_0 = 1181
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, int_0, set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    float_0 = 2494.715
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    set_0 = set()
    str_0 = "D3wqA]Cb\t}A"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(*set_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    int_0 = 1330
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    int_0 = -2926
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    int_0 = 2667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    int_0 = -1117
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = "r/d"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    str_0 = "gnP("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    str_0 = "\n "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    object_0 = module_1.object()
    bytes_0 = b"Is|%"
    list_0 = [object_0, object_0, bytes_0, bytes_0]
    tuple_0 = (list_0, object_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    int_0 = 1626
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    str_0 = 'oH{"\rTM}Kye/6!J"\\Aa'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    str_0 = "@Vy%?"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    bytes_0 = b"A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    str_0 = "_\x0be&kSN7?:c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    str_0 = "oeFQ,("
    module_0.get_new_command(str_0, str_0)


def test_case_4964():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4965():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    str_0 = "h`DltpUU6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    str_0 = ";>ik2u1H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    bool_0 = False
    int_0 = 164
    list_0 = [bool_0, bool_0, bool_0, int_0]
    str_0 = "/^(l"
    dict_0 = {str_0: list_0, str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    bytes_0 = b"a[\x02v\x00\x1e \xcd\x9e\xf7Q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    bytes_0 = b"\x91I'+@\xd5\x88\xddD\xf5\xae"
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    bytes_0 = b"\x8a\x8ce`o\xb8\xb2\xe8lM\x8fC\xc5"
    module_0.match(bytes_0, bytes_0)


def test_case_4973():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4974():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    bytes_0 = b"\x1b\xb1\xd2j\xdd\x1f\xae\x1c. \x1b@q\x96k#\xf0\xb4\xca"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4976():
    pass


def test_case_4977():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4978():
    none_type_0 = None
    float_0 = -1479.25786
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    bytes_0 = b"\x97TY\xf4\xf5\xb5$/\x9b\xad\x18\xcc\xec\xc1\xae\xb8\xf8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4981():
    pass


def test_case_4982():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4983():
    int_0 = -308
    float_0 = -846.516
    tuple_0 = (float_0,)
    set_0 = {int_0, int_0, int_0, tuple_0}
    str_0 = "~>"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4985():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4986():
    bytes_0 = b"\xca\xed\xaeJE\xb3o\t\x05\xaa>\x03\xbb1\xfaj"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    str_0 = "`Rl0{@\"'vH}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    str_0 = "B],?L("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    str_0 = "jp~i"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    int_0 = -2957
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    int_0 = 3828
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    bytes_0 = b"\xc3df]\xfb\x1d\xa6F\x1aHy\xd3xq&*\x85\xec\x8b\xa7"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    int_0 = -592
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    complex_0 = 2374 + 1033.91277j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    bytes_0 = b"P\xb8\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    bytes_0 = b"\xf5["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    int_0 = 84
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    str_0 = "IU%3DHOx#"
    int_0 = 750
    set_0 = {str_0, int_0}
    str_1 = "SMAk\t#<5$Uu/q cw2"
    tuple_0 = (str_0, int_0, set_0, str_1)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    bytes_0 = b"XM\xdd\xe2QV\x99["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    str_0 = "1'\x0bI4_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    float_0 = 1529.8262
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    int_0 = -878
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    int_0 = 2210
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    int_0 = 2630
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    bool_0 = True
    int_0 = -3201
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    set_0 = set()
    dict_0 = {}
    object_0 = module_1.object(*set_0, **dict_0)
    list_0 = [object_0, object_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    bytes_0 = b'\x03\x8b\xc0B;\x15" R\xacgJ\xf0\xa0\x014'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    float_0 = -328.291879
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    bytes_0 = b"\x92\xa7Y\xeb\xdf\x8d+\x07sb\xb7\xf8\x9e\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    float_0 = 1052.467
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    int_0 = 3184
    bytes_0 = b"=\xe9\xcf\x1b\xd0"
    module_0.match(int_0, bytes_0)


def test_case_5013():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5014():
    bytes_0 = b""
    bool_0 = False
    set_0 = {bytes_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    int_0 = 271
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: bool_0}
    str_0 = "u+0$]_S:.6`kNS"
    bytes_0 = b""
    set_0 = {str_0, bytes_0}
    module_0.get_new_command(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    bytes_0 = b"\x19\x9b\xe6\xcb\xfd\xc0\x08y\xd1(=\t\xd7\xb3g\x12\xe5\x8c c"
    module_0.match(bytes_0, bytes_0)


def test_case_5017():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5018():
    bytes_0 = b"uX\xa3\x99\xde\xa5\xf2>\xcf6\xdbn\x0e\x88"
    int_0 = 209
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    bytes_0 = b"\x85\xb2\xece`,\xb3\xad\xcf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    int_0 = 401
    dict_0 = {}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    bytes_0 = b"2B\x8f\xc6\x8e\x17LK0\xac\xaf\xc1\xa8\xd4\x91\x9c\x19\xd842"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    bytes_0 = b""
    tuple_0 = (bytes_0, bytes_0)
    dict_0 = {}
    float_0 = -1832.081
    tuple_1 = (tuple_0, dict_0, float_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    float_0 = 247.625052
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    int_0 = 1750
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    bytes_0 = b"\x89\x970No6\x98#\x1aR?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    bytes_0 = b"\x8b\n\x9di\\\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    str_0 = "1e>&c6b4g!D_\\\r]1"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    complex_0 = -1107.9 - 665.01j
    module_0.match(complex_0, complex_0)


def test_case_5031():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5032():
    str_0 = "Js<h\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    float_0 = 591.663233
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    int_0 = 3078
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    object_0 = module_1.object()
    bool_0 = True
    bool_1 = False
    tuple_0 = (object_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    int_0 = 3502
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    str_0 = 'Qa54~"5 '
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    str_0 = "U,.@7ayeB?P.\tV2|$e2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    bool_0 = False
    complex_0 = -2496.09 + 291.27j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    int_0 = 200
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    bytes_0 = b"f84~\xbc+4\x14)\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    int_0 = 486
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    int_0 = 3589
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    float_0 = 2659.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    str_0 = "\x0cs8ON1tDx|.t4r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    float_0 = -127.52706
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_1, bool_1}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    float_0 = 900.575
    bool_0 = False
    str_0 = ""
    list_0 = []
    tuple_0 = ()
    tuple_1 = (bool_0, str_0, list_0, tuple_0)
    set_0 = {bool_0}
    tuple_2 = (float_0, bool_0, tuple_1, set_0)
    module_0.match(tuple_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    int_0 = -3035
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    bytes_0 = b"\xeevL4\x94"
    str_0 = "[\\\x0cMeOs6PHmBTkbke(+b"
    str_1 = "S3'Qc!q u"
    dict_0 = {str_0: bytes_0, str_0: str_1}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    bytes_0 = b"*Q\xe8\xcc6\n\xdc\xd8s\xcbbC\xfd\xd24\xddr\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5054():
    pass


def test_case_5055():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5056():
    bytes_0 = b"X!\xbb\xa7\xa7|d\xe5\x16l\xd4ptO\x81\xfa\x94a~"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    float_0 = -4555.0
    str_0 = "v"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    str_0 = "PG5zdf=v=o5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    str_0 = "X#9BeKh\ra"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    bytes_0 = b"\xda\xc7\xf9\xa4C\xd8LD;"
    bytes_1 = b"\x88"
    str_0 = "mo]Ii+7"
    tuple_0 = (bytes_0, bytes_1, str_0, bytes_1)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    int_0 = -264
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    str_0 = "\rCxjA"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    str_0 = "B3#\\\\\t\ryG`&7ie# ;~R\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    str_0 = "6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    bytes_0 = b"\xe6\xc4%@\x87\xf1\x07\xde\xa4\xf7\xd2\x7f\x9e\xfa4\xe5\xbb=\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    int_0 = 899
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    int_0 = 852
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    float_0 = 1569.8918
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    str_0 = "Ue5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5070():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5071():
    bytes_0 = b"*\x83\xfbN\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    int_0 = 703
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    bytes_0 = b"\xf0,%z\x121"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    str_0 = "+DMn2[c@g\rG'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    str_0 = "t4!`c2z,4\r~'_<3\x0c+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    int_0 = -2797
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_5078():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5079():
    int_0 = -837
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    int_0 = 572
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    complex_0 = 1591.81 - 1936.935834j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    float_0 = 1413.94
    bytes_0 = b"[\xe6\x04\x97\xa0\x9a.\x9b\x95\x8c\x84\x7fT"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    float_0 = -825.0
    str_0 = "g[:|b_}n\\jEB\x0bfM9d"
    list_0 = [float_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    int_0 = -51
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    bytes_0 = b"|\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    bytes_0 = b"\x97\xe1x\xfd\xa8C"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    str_0 = "$uNe5'T5SLn"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    str_0 = "DV0!]]k\r_jV86"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    str_0 = "\rm\tg"
    str_1 = ""
    str_2 = "QY+-Q"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    bytes_0 = b'\xfa!"C\xc6\xcd\x0c\xe3IV\xc75Z\xee\n\xa8\xf0\x88\x1c*'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    str_0 = "`\nDV>mV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    bytes_0 = b"\xc8\xb8\xaaN\x1b_Y."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    int_0 = 169
    str_0 = "F&t]Q7-WmcX?P/"
    dict_0 = {int_0: int_0, int_0: str_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    str_0 = "0iF.2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    bytes_0 = b"\xa1\xae\xd0--Asx\xda|\x08\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    int_0 = 64
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    str_0 = "}_8n5L,<SE\t<+*L;"
    none_type_0 = None
    str_1 = 'SxRV"|FV!I8iXlD}'
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    int_0 = 1271
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    bytes_0 = b"(\x7f\xcb+\x0cE\xdbG\x126\xcd\x98\x8d\xdc\xc2\x18\x8bR7"
    bool_0 = True
    dict_0 = {bool_0: bytes_0, bool_0: bytes_0, bytes_0: bool_0, bytes_0: bool_0}
    tuple_0 = (dict_0, bytes_0, bytes_0)
    tuple_1 = (bytes_0, bool_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    int_0 = 1598
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    int_0 = 524
    tuple_0 = (list_0, int_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    bytes_0 = b"\xd1\xcfD\xf0\x92\xa0\xa1\xcav\xa2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    str_0 = "7$Aw*@K2n?F~Cdv!NU:"
    none_type_0 = None
    str_1 = "\x0bqcWQ\t31mm"
    str_2 = "$\x0bZW5"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    float_0 = -3465.05705
    set_0 = {float_0, float_0, float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    bytes_0 = b"\xd1\x99\xea\xbb\x03\r\xe6t\x8b\x8c\xef\xc0\x02"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    str_0 = "lH52Uut!X4gSS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    float_0 = 216.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    bool_0 = True
    str_0 = "!4U_\nmn)Dle<m\x0cb\n%r`"
    dict_0 = {bool_0: bool_0, str_0: str_0, bool_0: str_0, str_0: bool_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    bytes_0 = b"\x18m\x8c\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    bool_0 = False
    dict_0 = {}
    bytes_0 = b"\x90\x8dJ9\xdc\xdd\x0b\x14%W\xaa^\xdb\xe4\xc0\x1f"
    tuple_0 = (bool_0, dict_0, bytes_0, bytes_0)
    list_0 = [tuple_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    str_0 = "nNf7S)\\,4"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    bytes_0 = b"\x01p$\x15'\xc2\x7f\x17\xfa\xe4\x0c\xb7s\x0ed\x1a\x85"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    complex_0 = -109.06042 + 1282.3283j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    bytes_0 = b"\x90A\x8f\xf8\xfe\xb2yu\xf9s\xd4\x122\x0f\xfa\x1ba>"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    none_type_0 = None
    bytes_0 = b'T\xeb;p\x1d\xdd\xba\xe0|L\xf8\xa0\xd4\xcebd\x0e"\x7f'
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    complex_0 = 1181.5 + 2795.80358j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    bytes_0 = b"\xbd\xb4\x8b\xe0[\x8e\xc6\x08["
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    str_0 = "|shM;/]^?JU\\\t]"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    complex_0 = -1575 - 731.10354j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    str_0 = "u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    bytes_0 = b"]\x83\xb6\xa4kN\x8e(\xd4\xffT"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    float_0 = 2916.154
    list_0 = [float_0]
    list_1 = [float_0, list_0]
    module_0.get_new_command(float_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    str_0 = "B}'h%r{u#dnl*SV\t6bb"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    bytes_0 = b"/\xd1!\x7fJ\x00Z"
    list_1 = [list_0, list_0, bytes_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    int_0 = -702
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    str_0 = "zoLR6f@dfpv?L{p5D\r="
    tuple_0 = (str_0,)
    int_0 = -4485
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    int_0 = 2533
    tuple_0 = ()
    int_1 = -3013
    bytes_0 = b"&\x91SA\x85\x93\n\x86\xa7t\xc8\xe2\x01t/\x06\xee"
    tuple_1 = (tuple_0, int_1, bytes_0)
    module_0.get_new_command(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    float_0 = 1615.6
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    float_0 = -2758.54
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    str_0 = "\npv/`_H\\|ARk"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    bytes_0 = b"\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    int_0 = 667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    bytes_0 = b"\xe3~\xf05!z\x8f"
    module_0.match(bytes_0, bytes_0)


def test_case_5145():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5146():
    int_0 = -4106
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    str_0 = "'[?o-\x0cuv9zx%Z1AQU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    int_0 = 1970
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    str_0 = " ]5Fo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    bool_0 = False
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


def test_case_5153():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5154():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    int_0 = 1736
    bool_0 = True
    dict_0 = {int_0: int_0, bool_0: int_0, bool_0: int_0}
    dict_1 = {int_0: int_0, int_0: int_0, int_0: dict_0}
    none_type_0 = None
    module_0.match(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    int_0 = 2975
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    int_0 = -470
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    str_0 = "ux"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    int_0 = 109
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    int_0 = -426
    bool_0 = False
    module_0.match(int_0, bool_0)


def test_case_5163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5164():
    float_0 = 288.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    complex_0 = 865.9 - 4081.146j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    bytes_0 = b"\x7f\xc2r\xc8@"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    str_0 = ""
    none_type_0 = None
    str_1 = "R-`km$,4"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    float_0 = -1424.57
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (list_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    bytes_0 = b"\xbd\xad\x03\x94-\xfe\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    bytes_0 = b"\xffT\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    int_0 = -4631
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    object_0 = module_1.object()
    str_0 = 'V"R\nN9gE\x0baB~d%L\x0c*'
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    int_0 = -673
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    list_0 = []
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    str_0 = "H|*MueF7[+"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    str_0 = 'kKv8\t"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    float_0 = 829.013
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    int_0 = 2365
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    str_0 = "oF4v\t4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    int_0 = -2843
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    str_0 = "hX}4\\hI-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    int_0 = -1609
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    bytes_0 = b"w]\x88\xab|P\xdb\xee\x18\xca\x19U\\n\x7f\x8b\xd5"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    list_0 = [bool_0]
    tuple_0 = (dict_0, bool_0, bytes_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    str_0 = "@TP@NrkF[+W H;V~"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    int_0 = 1360
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    bytes_0 = b""
    set_0 = {bytes_0, tuple_0, bytes_0, bytes_0}
    tuple_1 = (tuple_0, list_0, bytes_0, set_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    str_0 = "FX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    str_0 = "\n7\\oL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    int_0 = 1797
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_5193():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5194():
    float_0 = -2588.3096
    module_0.get_new_command(float_0, float_0)


def test_case_5195():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5196():
    int_0 = 1470
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    int_0 = 1415
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    str_0 = "Rl%]yMl-i\x0be@8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    str_0 = "FENF]&T"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    str_0 = "[@HI8eb"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5201():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5202():
    bytes_0 = b"}\x96\x83\x93B\x15\x13e\x1b\x08!@<\xe20\xa6\xce\xe7\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    int_0 = -397
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    bytes_0 = b"dX\xe0\xa8v\x9cfT\xf8\xc4\x0f4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    bytes_0 = b"\re-I"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    str_0 = "=H45*}}K\x0c\n\x0b^H"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    str_0 = "w6~#]t=:\x0bVB#ZbZ"
    float_0 = 2168.0
    dict_0 = {str_0: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    int_0 = -192
    bytes_0 = b"\x1edP\x14"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    complex_0 = -3017.051759 - 840.496j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    str_0 = "3g==Eh)$\\O\x0b"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    str_0 = "EQ*DmP/D7nnZ^&8Im"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    float_0 = 3629.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    str_0 = "&WdCw[t["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    bytes_0 = b"Z\x9bcj\x07\x01\x9d\xeb\x9d\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    float_0 = 3204.334778
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    int_0 = -346
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    float_0 = 208.29
    int_0 = 309
    set_0 = {float_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    bytes_0 = b"\x16<N\xb4lwdd\xf2D\x16\x93zFP\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    float_0 = 1651.91937
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    str_0 = "5DS/@k#p2:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    tuple_0 = ()
    float_0 = 197.1209
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    int_0 = 2484
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    float_0 = 439.0962
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    str_0 = "W\x0b{uWfji<']!U}/c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    bytes_0 = b"\x89\x91_U\xaap\xe26\xb2\x8d\xb54\x98\xe0\x08\x1adN"
    module_0.match(bytes_0, bytes_0)


def test_case_5228():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5229():
    object_0 = module_1.object()
    list_0 = [object_0]
    str_0 = '"\\S{+LEnj/'
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    float_0 = -632.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    bytes_0 = b"\xa6\xad\x9c\xde\xc9\xd8Y\x89\xa8\xda\x1aN\xca\x9ah,\xca"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    str_0 = "P1VP^56fa"
    set_0 = {str_0}
    list_0 = [set_0]
    set_1 = set()
    module_0.get_new_command(list_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    str_0 = " #].gDX'oy"
    float_0 = -1011.053
    tuple_0 = (str_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    float_0 = -3000.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    complex_0 = -3590 - 927.55j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    int_0 = -831
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    str_0 = "Q'iR]63SQ2dP{Y-7"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    str_0 = 'Q"Q'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_5241():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5242():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    str_0 = "s&(8p\n6{\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    int_0 = -660
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    str_0 = "i}(iTJ@+Gs[D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    int_0 = -671
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    bytes_0 = b"\x1el\xf0\xed\xe0[\xb09\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    int_0 = -782
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    complex_0 = -2537.01889 + 736.5089j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    bytes_0 = b"\xb9\xb4z\xf792\x02P\xf0\xb2\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    int_0 = -1036
    bool_0 = False
    bool_1 = False
    set_0 = {bool_1, bool_1}
    tuple_0 = (int_0, int_0, bool_0, set_0)
    module_0.match(bool_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    float_0 = 4478.43
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    complex_0 = 27 - 0.254629j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    float_0 = 1120.791827
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    complex_0 = -288.476 + 4035.62j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    int_0 = -624
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    str_0 = "@In*1oU"
    set_0 = {str_0}
    tuple_0 = (set_0, set_0)
    bool_0 = False
    int_0 = -418
    tuple_1 = (str_0, tuple_0, bool_0, int_0)
    module_0.match(tuple_1, set_0)


def test_case_5258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5259():
    complex_0 = 5860.62 + 1341.25j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    str_0 = "Q,Sf=\r#be}pfV%O"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    int_0 = 320
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    int_0 = 466
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    str_0 = "'j,zM"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


def test_case_5267():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5268():
    bytes_0 = b'7l\xcf\x0cP"6`j\xf4/t\x04\x10\xd4L\xdf'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    str_0 = "v_xcHwc'H^v`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    int_0 = -749
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    int_0 = -723
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    bytes_0 = b"\xb5\xccZ\xc4h\x11\xec\xa7Z0\xf9\x8a\xca\xd2\xa0v"
    bool_0 = False
    float_0 = -1422.23
    set_0 = {bytes_0, float_0}
    tuple_0 = (bytes_0, bool_0, set_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    bytes_0 = b"\xcbI\xd3\xce\x1f\xe5H\x0f%\xd3L\x88P\xd7\xf2+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    float_0 = -3522.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    list_0 = []
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    bytes_0 = b"\x8d\xdb\x96\xf3\xbd]\xae\x98;\xdf?^\x8f\xc1 \x93N\xf1#r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    str_0 = 'LAk:WO#yMHGVb@"f.'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    int_0 = 1791
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = [list_0, object_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_1.object(**set_0)


def test_case_5283():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5284():
    complex_0 = 144.18371 - 1312.4328j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    bytes_0 = b"\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    str_0 = "7DqES2?l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    bytes_0 = b")\x9a\x19\x1f2\xdd\xb9\xa8\xaa\xfa\x9d!z\\\x0f\xa9"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    int_0 = -227
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    bytes_0 = b"`\xa0\xd7|\xa0\x02\xee\x04\x02\xa9\x93\xa6\x17B\xbb%/\x99^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    bytes_0 = b"\x82\xdeYk\\\xf6o\x83\xfd\x0f(bS"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    bytes_0 = b"\xd3\x8dm\xde\xda\x01\xccW$N*\x1f\x93\x13\xe2\xdaV\xf0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    complex_0 = 825.963 + 1548.1524j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    bytes_0 = b"`\xdb\x0c5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    str_0 = "<Q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    int_0 = 1864
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    str_0 = "il|nK.6nYa"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    dict_0 = {}
    list_0 = [dict_0]
    float_0 = -544.808143
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    float_0 = 959.7
    module_0.match(float_0, float_0)


def test_case_5300():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5301():
    int_0 = -2266
    module_0.get_new_command(int_0, int_0)


def test_case_5302():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5303():
    str_0 = "ZcqX+Q\x0cbZ3\n. n0x*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    int_0 = 218
    module_0.match(int_0, int_0)


def test_case_5305():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5306():
    bytes_0 = b"zO|7*\xfdM7\xf4w\x9a.\x97Y^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    float_0 = -1843.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    int_0 = -113
    module_0.get_new_command(int_0, int_0)


def test_case_5310():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5311():
    complex_0 = 756.851 - 1622j
    list_0 = [complex_0, complex_0, complex_0]
    complex_1 = -1042.62638 + 726.838j
    module_0.match(list_0, complex_1)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    bytes_0 = b"\x89\x97\xdc\xbc\xac2\xbeK\xff\x0b"
    set_0 = set()
    list_0 = [bytes_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    complex_0 = -400.845 + 3414.598j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    bytes_0 = b"p\\!2\xb1\xd0\xf9\xc8\xec\xa3Fb@s\xe7\x9f{\xae\xfa"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    int_0 = 804
    module_0.get_new_command(tuple_0, int_0)


def test_case_5315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5316():
    complex_0 = -1805.3582 - 1772.9064j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    bytes_0 = b"\x00\x84\xe1\xc2\xf8\x81\x11Oh\x15^2u\xfd#\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    str_0 = "9n `Lie_,c4}WD"
    dict_0 = {str_0: tuple_0}
    float_0 = -1334.752282
    set_0 = {float_0}
    tuple_2 = (str_0, dict_0, float_0, set_0)
    module_0.match(tuple_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    bytes_0 = b"\x82\\\xe6\x90I\x82]\xc0\n\xe2\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    str_0 = "UyX_>\t/j{Fe]!r\x0cbP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    int_0 = 466
    set_0 = {int_0}
    module_0.match(set_0, int_0)


def test_case_5324():
    pass


def test_case_5325():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5326():
    int_0 = 114
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    float_0 = 3447.1436
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


def test_case_5328():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5329():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    float_0 = 2049.91
    module_0.match(float_0, float_0)


def test_case_5331():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5332():
    int_0 = 425
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    str_0 = "ghwqvIJM^D*,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_5336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5337():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    bytes_0 = b"\x955m\xd6s"
    module_0.match(bytes_0, bytes_0)


def test_case_5339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5340():
    complex_0 = 986.376 - 438.565097j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    int_0 = -1305
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    int_0 = 2168
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    float_0 = 2054.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    str_0 = "y6Y\x0bQZ\tv?5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    float_0 = -1410.46
    set_0 = {float_0, float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    int_0 = 3583
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    none_type_0 = None
    complex_0 = 4447.01834 - 1189.04429j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    str_0 = ":]FUzL&Wcg]=y8\\7$]<"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    str_0 = "\ta_4SkN-@:B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    bytes_0 = b"\xe7\xed\xa1\x94]\x89E\xaaCx\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    str_0 = "UBaF7d\t&>!x[R"
    module_0.match(str_0, str_0)


def test_case_5355():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5356():
    bytes_0 = b"\x86\x1d"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    bytes_0 = b"\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    float_0 = 2955.8
    str_0 = "WKy~"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    str_0 = "'S'_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    str_0 = "WB%saT^&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    int_0 = 405
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    str_0 = "l;eK|L\nc$JHBb||VRy6\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    tuple_0 = ()
    set_0 = {tuple_0}
    object_0 = module_1.object()
    module_0.match(set_0, object_0)


def test_case_5364():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5365():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    float_0 = -949.013735
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    float_0 = 2563.6055
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    int_0 = 450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_1, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    int_0 = -702
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    str_0 = '+"4CZrgIu%;lxR+'
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    complex_0 = -3165.3 - 20j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    int_0 = 2159
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    none_type_0 = None
    float_0 = 2637.07
    dict_0 = {float_0: float_0, none_type_0: none_type_0, none_type_0: float_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    float_0 = -3215.15
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    float_0 = -1656.07
    module_0.match(float_0, float_0)


def test_case_5377():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5378():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1]
    dict_0 = {bool_0: bool_1, bool_1: bool_1, bool_0: bool_0}
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    int_0 = -2977
    list_0 = [int_0, int_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    str_0 = "9Sy_zNe UDfM{^@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    int_0 = 1638
    int_1 = 4253
    dict_0 = {int_0: int_0, int_0: int_0, int_1: int_1, int_1: int_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    str_0 = "+u,;'w$`@\n.4*zsy"
    int_0 = 1218
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    float_0 = 748.045
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    none_type_0 = None
    float_0 = -977.427667
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    int_0 = -750
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    str_0 = "\tI\x0cr^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    int_0 = 4885
    float_0 = 1559.0
    bytes_0 = b"\xaeWP\xc5\xdd\xbb\xf8\x85\xbf\x81\xd4:E\x87\x9b7"
    bool_0 = True
    tuple_0 = (int_0, float_0, bytes_0, bool_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    bytes_0 = b"l\xb0\xf6\xe6\x9aX"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    int_0 = -753
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    none_type_0 = None
    module_1.object(**none_type_0)


def test_case_5393():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5394():
    str_0 = "2E{`Mm.3UP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    float_0 = 4003.439278
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    str_0 = "Q'@Zv7SX\x0b"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    str_0 = "G\n"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    int_0 = 2339
    float_0 = -3759.391323
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    int_0 = -216
    module_0.match(int_0, int_0)


def test_case_5400():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5401():
    int_0 = 2580
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    str_0 = "+\rcGn\x0bSx5yy\x0b\x0bs4\\u@p"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    bytes_0 = b"\xbe\x8fc="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0, dict_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    int_0 = 354
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_5406():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5407():
    dict_0 = {}
    complex_0 = -1168.703 + 2455j
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    str_0 = ")9^)l`qYv:N(k\tW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    bytes_0 = b"\x87\xe5^\x13\x95L\x958\xceN\xfe\xe9\xd9s\x08\xdc"
    float_0 = -3219.08181
    module_0.get_new_command(bytes_0, float_0)


def test_case_5410():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5411():
    float_0 = 3075.344
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    str_0 = "wzLzet8;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    bytes_0 = b"\x168\x1e9\x1b\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    bool_0 = True
    int_0 = -558
    set_0 = {bool_0, bool_0, int_0}
    dict_0 = {bool_0: set_0, bool_0: set_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    int_0 = -2311
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    str_0 = "1Ta\to6YMzI\x0b#[?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    str_0 = "Ur=u0Vze7(I0"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    complex_0 = -3030.017892 + 395.39436j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    bool_0 = False
    int_0 = -2726
    tuple_0 = (bool_0, int_0)
    list_0 = [tuple_0, int_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    float_0 = 115.71649
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    none_type_0 = None
    str_0 = " s\r(l/\\"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    bytes_0 = b"\xc51\x85\xb4\xd9\x1f\xd9\x94\x80\x90l\xb9\x0f"
    module_0.match(bytes_0, bytes_0)


def test_case_5425():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5426():
    str_0 = "rFZuBb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    int_0 = 369
    module_0.match(int_0, int_0)


def test_case_5428():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5429():
    bytes_0 = b".\xffH"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    bytes_0 = b"\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    str_0 = "wF\\ 7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    int_0 = 1928
    str_0 = "S\rb]vfTYfBOM(Zu.%ti"
    bytes_0 = b"\x04\xa5"
    set_0 = {bytes_0, bytes_0, bytes_0, str_0}
    dict_0 = {}
    bool_0 = False
    tuple_0 = (set_0, bytes_0, dict_0, bool_0)
    tuple_1 = (int_0, str_0, bytes_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    str_0 = '+v><E.Gj"Mj`VKiKLb'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    str_0 = "/WS=@_"
    bool_0 = False
    tuple_0 = ()
    bool_1 = True
    dict_0 = {str_0: str_0, bool_0: tuple_0, tuple_0: bool_0, bool_1: bool_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    int_0 = 223
    bool_0 = True
    str_0 = "Q\\EN>.-"
    tuple_0 = (int_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    str_0 = "zaU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    float_0 = 2040.96
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    str_0 = "c$F?\x0cLc\x0cE@[\rbJ\ny\n\\)"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"\xd3r"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    int_0 = -1614
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    str_0 = "wK0|Uc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    int_0 = 905
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    bytes_0 = b"\x00|\xbf\xa0JE\x8c\xd7\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    str_0 = "C-Fp8}&+ ed:n0Rl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    str_0 = "`yZQAr["
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    int_0 = 3252
    float_0 = 1534.066537
    dict_0 = {int_0: int_0, int_0: int_0, int_0: float_0}
    int_1 = -2689
    module_0.get_new_command(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    bool_0 = True
    float_0 = -98.0
    tuple_0 = (bool_0, float_0, float_0)
    bool_1 = False
    set_0 = {bool_1}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    str_0 = "U~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    str_0 = "L%"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    complex_0 = -1797 - 184.596845j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    int_0 = -784
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    str_0 = 'BisKV~z"lSZS=Z()E(t\x0b'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    str_0 = "[&X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    bytes_0 = b"\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    int_0 = 3549
    float_0 = 887.09
    str_0 = 'UJZ;V"1x'
    tuple_0 = (int_0, float_0, str_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    int_0 = -500
    tuple_0 = ()
    bytes_0 = b"\x93\xd5\x98\xa5\xfd\xf6\xa6L\xcd0juI\x8d \xc0*\x9a"
    tuple_1 = (tuple_0, tuple_0, bytes_0)
    tuple_2 = (int_0, int_0, tuple_1)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    bytes_0 = b"\x84?\x8a\xbdP"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    int_0 = 4796
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    bytes_0 = b"-\xf1\xbe{\xa1\xccX\xca\xeeK\xa8\xbb\x05\x02\xe5\xc508\x0c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    bytes_1 = b"\xb3(\x19\x8b\xaa\xb20\xcff\xa8X\xf8\x0c>"
    int_0 = 1720
    str_0 = "DJ"
    tuple_0 = (dict_0, bytes_1, int_0, str_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    float_0 = -674.2192
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    bytes_0 = b"\xd0\xa6\x97\x1e\xe2a\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5469():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5470():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    bytes_0 = b"\xb4\x1e\xf4=\xc0\xb6l\xf9\x0b\xf8z\xff\xa1\x93"
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, bytes_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    bytes_0 = b"\x1bQG)?8\x02\xd0\xf5H\xc6i\x1dAI\\"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    bool_0 = True
    bool_1 = True
    str_0 = "g/5z\\M"
    tuple_0 = (bool_0, bool_0, bool_1, str_0)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    bool_0 = True
    bytes_0 = b"\x9e\xa1"
    module_0.get_new_command(bool_0, bytes_0)


def test_case_5475():
    pass


def test_case_5476():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5477():
    int_0 = 131
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    complex_0 = 2740.060007 - 904.710747j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    str_0 = "lM(cGbAFre9]V%n\n(+,"
    module_0.match(str_0, str_0)


def test_case_5480():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5481():
    int_0 = -2213
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    float_0 = -107.9783
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    str_0 = "o-X?\nVN r.vOVr!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    bytes_0 = b"5@\x8axc\xf8\x15\xbdu\xed8\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    bytes_0 = b"K\x98~t\x8d;?\xf4\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    int_0 = -4250
    module_0.get_new_command(int_0, int_0)


def test_case_5487():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5488():
    str_0 = "qiKbJS-:~;%?"
    module_0.get_new_command(str_0, str_0)


def test_case_5489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5490():
    float_0 = 710.29273
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    str_0 = "_Tu;Ix\tt\x0c-;>8?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    bytes_0 = b"\x10\xd0\x81\x84\xf8C"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


def test_case_5494():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5495():
    str_0 = "f/VEJ?\x0b5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    bytes_0 = b"\xcdU\xbc\x0ek\xabI\xd2u<\x7f#\x91\xd8,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    float_0 = 2392.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    bytes_0 = b"\xe1\xbe\x8d\x84~5\xab\xb5I"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    int_0 = -494
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    complex_0 = 1172.88971 - 1565j
    list_0 = [complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    int_0 = 338
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    complex_0 = 3877.988 - 2702j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    str_0 = "Se/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = True
    tuple_0 = (bool_1,)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    str_0 = "{!Xy3z,sl&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    complex_0 = -1223 + 2042.19827j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.object(*list_0, **complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    bytes_0 = b"\xb9\x8e\xd4T\xc3\xde\x88s\xc8\xd7\x9d\xb9r\xa2)\x8b\x1e\xae2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    int_0 = -708
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    int_0 = 1986
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    int_0 = -154
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    str_0 = ""
    str_1 = "l\r'#TxKZkX5$<uF|'OF\n"
    object_0 = module_1.object(*str_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_1: object_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    int_0 = -177
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    float_0 = 1073.99651
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    bytes_0 = b"q\xe4\xef\x95\xbb\xafa\xf0\xd5\xf4\xbe\xec\xb3R\x0f\xcc\xaa\x85"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    bytes_0 = b"\xe9N>\xbf\x14`w\xae\x01\xf5\xeb\xcf\xcb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    complex_0 = -7449.761825 + 797j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    bytes_0 = b'\xb5\x1e\xd3\xaa\xbe\xe5\xcc\r\x1f"m\xc4\xfb\xba'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    dict_0 = {}
    bool_0 = False
    bytes_0 = b"\xfd.A\x9f\xb5\xc5\xec\x0cs\xd2\xa3"
    tuple_0 = (dict_0, bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    bytes_0 = b"\x95\x03]\x1b"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    str_0 = "4U.q8\x0cV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    int_0 = -60
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    bytes_0 = b'\xe1_\xcd\xc8?\x86\xb1\x90\x02\x95"U)u)Aq\xf2'
    object_0 = module_1.object()
    complex_0 = -101 - 86.52j
    tuple_0 = ()
    tuple_1 = (bytes_0, object_0, complex_0, tuple_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    bytes_0 = b"La'w\x9dfmJ\nra\xbd\xb1\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    bytes_0 = b"\xfb\xb8\x96\xe2\xe5`\xa0\xe1\xb8b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_5526():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5527():
    float_0 = 3435.9
    complex_0 = -3473 - 76j
    module_0.match(float_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    str_0 = "8Up:76c/7 "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    bytes_0 = b"3A\x06\x11\xe3\xfc\xb2\xbc\xdc\xcc\xef\xa7\x9c\xc3\x10&"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    int_0 = -1910
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    int_0 = -2303
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


def test_case_5534():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5535():
    float_0 = -2083.28817
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    str_0 = "B*{\t\n)"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_5538():
    pass


def test_case_5539():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5540():
    object_0 = module_1.object()
    complex_0 = 503.6879 - 2288.3834j
    module_0.match(object_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    float_0 = 705.01
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    str_0 = "a>RF^]Wa\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    dict_0 = {}
    str_0 = "c&q;$N/C\rsd~7:r*6"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    str_0 = "43DS5l;E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    int_0 = 2553
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    int_0 = 2483
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    float_0 = 395.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    float_0 = -519.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    str_0 = "@,2G\nve\nzM"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    bytes_0 = b"\xc5Y\xbe\xac\x12\xe8\x9f\x9b\x85c\xc0#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    str_0 = "g\t@\x0c\r_'?|fg+L>j"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_5553():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5554():
    bytes_0 = b"\x94\xdb\x0c<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    float_0 = 1170.25084
    module_0.match(float_0, float_0)


def test_case_5556():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    int_0 = 1061
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    bytes_0 = b">4\xa3y\xffS\x0f\xe37\x07\xc52"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    bytes_0 = b"\xbc\xb1-\x9d\x140\x9fp\xbcNl\xed,`ZIX\xa9"
    list_0 = []
    list_1 = [bytes_0, list_0, list_0]
    list_2 = [list_1]
    tuple_0 = (list_2, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    int_0 = -3423
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    str_0 = '^=,S"i;Q/t|'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    int_0 = 1691
    set_0 = {int_0}
    list_0 = [set_0, set_0, int_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    float_0 = 3375.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    int_0 = -729
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    float_0 = -961.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    complex_0 = -2680.348628 + 1159.84j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    complex_0 = -193.4288 + 3214.45j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    bytes_0 = b'\x84\xc8"\xf0Y\x13\xfa\xc6\x88R'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    int_0 = -1603
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    str_0 = ""
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    int_0 = -2436
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    str_0 = '"2QShx8fM&^$9ad'
    module_0.get_new_command(str_0, str_0)


def test_case_5574():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5575():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    str_0 = ":l_Umz)f7)E"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    complex_0 = 3929.09462 - 347.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    int_0 = -3136
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    int_0 = 749
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    int_0 = -361
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    float_0 = 575.4
    module_0.get_new_command(float_0, float_0)


def test_case_5582():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5583():
    float_0 = 898.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5584():
    bytes_0 = b"\x11\xe8\x8b\xde\xf3v\x8f0\xe0 "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    complex_0 = 1948.1911 + 1757.92j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    float_0 = 101.291413
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    bytes_0 = b"2o\xef\x9a\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    str_0 = "8|7Rx;-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5590():
    str_0 = "~"
    bytes_0 = b"\x0b\x86\x93\xb71\xd9\x9c\x1c[P\x85\xfe"
    tuple_0 = (str_0, str_0)
    dict_0 = {str_0: str_0, str_0: bytes_0, tuple_0: bytes_0, bytes_0: tuple_0}
    list_0 = [dict_0, tuple_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5591():
    bytes_0 = b" n\xab\xf0\xfb\xa1\xa0\x03/\x11\x0b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5592():
    float_0 = -4096.663
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_5593():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5594():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    bytes_0 = b"P9m\x0b\xa4e,\xa4\x88eq\xe9ky\xeb\xe9"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    bytes_0 = b"\x94\x85\x98<"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    str_0 = 'v~+McVt?A\x0bk"ctCH\tHc'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    bytes_0 = b"O\xa8\xf1\x1eq\x08ljo"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    int_0 = -120
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    float_0 = 3592.69
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    complex_0 = 1043 - 141j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    str_0 = "UT%\ra=5\n7,(U-9r'M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    bytes_0 = b"\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    int_0 = 1373
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    complex_0 = -454.1065 + 2939.475847j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    str_0 = "V'KCK3,9\rFDPC"
    float_0 = 1257.35893
    bytes_0 = b"\x19"
    set_0 = {bytes_0, str_0}
    tuple_0 = (str_0, float_0, set_0)
    module_0.match(tuple_0, float_0)


def test_case_5609():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5610():
    bytes_0 = b"\x05w\r\xe5\x8a\xca0\xc5\xc7\n\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    str_0 = " {X50a[sP4S2\x0c]~lz"
    bool_0 = False
    list_0 = [str_0, bool_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5612():
    int_0 = 2853
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5613():
    float_0 = 1552.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    bytes_0 = b"\x1ap.\xcf*%h\xa6\xf6\xc3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    int_0 = 708
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    int_0 = 132
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    int_0 = -1034
    bool_0 = True
    str_0 = "*uxs)\x0b0)*#ugP05"
    tuple_0 = (int_0, int_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    float_0 = 493.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_5620():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5621():
    bytes_0 = b"\t\xb8\tk\xa2\x12Z\x043%\xb6'\xd2&2_n\xd6}"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    bytes_0 = b"\x91=\x88\x8f1&\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    none_type_0 = None
    str_0 = "renu0"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    float_0 = -504.702892
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5627():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    list_0 = [set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    int_0 = 2512
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5629():
    str_0 = "RS>+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    bytes_0 = b"@\x90\xdf\x19\x0b\xf9\xb8uv"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5631():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5632():
    none_type_0 = None
    int_0 = 707
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5633():
    bytes_0 = b"\x88\xf4\xea\x19t\xb8\x10\xb3\xd4[\xbeP{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5634():
    complex_0 = -2926.8 + 1207.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5635():
    int_0 = 908
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5636():
    int_0 = -859
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    int_0 = -2284
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5639():
    int_0 = 3820
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5640():
    str_0 = "@QNh)pC )PG>\rRSN!"
    complex_0 = -1178.862872 + 2.536j
    dict_0 = {}
    tuple_0 = (str_0, complex_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5641():
    bytes_0 = b"I\xb3,\xf5g\xf3h>\xb7\xa6Y\xae*D\x89*j$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5642():
    int_0 = 1371
    set_0 = {int_0, int_0, int_0}
    bytes_0 = b'\xd9m8\xfbj\xee"\xa829\xb3\xa6\x8a)\xcfi6'
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5643():
    bytes_0 = b"ya"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5644():
    str_0 = "u@<;9o. ?5uYXTZd"
    tuple_0 = (str_0,)
    bytes_0 = b"\xe0\x06\xb2e\xdeM+"
    set_0 = {str_0, bytes_0}
    tuple_1 = (bytes_0, bytes_0, bytes_0, set_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5645():
    int_0 = -4956
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5646():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


def test_case_5647():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5648():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5649():
    bytes_0 = b"\xc9\xee3"
    set_0 = {bytes_0, bytes_0}
    float_0 = -1742.1241
    list_0 = [set_0, float_0, bytes_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5650():
    complex_0 = 1234.70099 + 1888.14857j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5651():
    str_0 = "`I\x0c:{>"
    module_0.get_new_command(str_0, str_0)


def test_case_5652():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5653():
    str_0 = "ny)(Wf"
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = True
    tuple_1 = (str_0, tuple_0, bool_1, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5654():
    int_0 = -2555
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5655():
    int_0 = -882
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5656():
    str_0 = "vaL]Md(\\IVTrvE23Umi"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5657():
    str_0 = "48\x0bNgb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5658():
    int_0 = -4736
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5659():
    float_0 = 494.39
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5660():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5661():
    float_0 = -318.22711
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5662():
    bytes_0 = b"\xf3\xbbG\xe7\xc4\x9d3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5663():
    str_0 = "S*,C?=z9$B4+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5664():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5665():
    bytes_0 = b"\xc6r4\xc1\xf7\x19\x00l\xc8e\x02\x99\xdd\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5666():
    complex_0 = -2405.79458 - 612.08351j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5667():
    str_0 = "@\x0czH52%T AO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5668():
    str_0 = "U}g6GNO5P\x0cU2rrD"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5669():
    bytes_0 = b';os\x1b\x16\xe6^I\xb8"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5670():
    float_0 = -56.92161
    list_0 = [float_0]
    tuple_0 = (float_0, list_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5671():
    int_0 = -350
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5672():
    int_0 = -1609
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5673():
    bytes_0 = b"\x02\x1f\xae\xb7\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5674():
    str_0 = "&RiDng$v[B3Kj"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


def test_case_5675():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5676():
    int_0 = -3025
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5677():
    int_0 = 876
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5678():
    float_0 = -1043.99129
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5679():
    str_0 = "^CH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5680():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5681():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5682():
    bytes_0 = b"\xb8U\xd0\xaa:\x9e\x9e\xf0\x13<\x98\\+\xbe"
    module_0.get_new_command(bytes_0, bytes_0)
