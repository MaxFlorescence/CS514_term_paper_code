# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import redistricting as module_0
import scipy.stats._morestats as module_1
import numpy.ma.extras as module_2
import email.utils as module_3
import scipy.stats._mstats_basic as module_4
import email.iterators as module_5


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "grid"
    int_0 = 2426
    module_0.Redistricting(str_0, int_0, str_0, str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ")2Z\x0c>1Jr\nl'z3C QW["
    str_0.get_center()


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    none_type_1 = None
    module_1.ansari(none_type_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_2.clump_unmasked(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "mL\tAfw#;I0{d?"
    int_0 = -2041
    var_0 = module_3.localtime()
    int_1 = -2274
    var_1 = var_0.__repr__()
    module_0.Redistricting(var_0, int_0, str_0, var_0, int_1, h=var_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -2572
    str_0 = "}htPUE&KKxCd)zu1Co"
    none_type_0 = None
    int_1 = -1030
    module_0.Redistricting(str_0, str_0, int_0, none_type_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "IJKh72kd:I"
    bool_0 = False
    none_type_0 = None
    module_0.Redistricting(
        str_0,
        bool_0,
        none_type_0,
        none_type_0,
        bool_0,
        population_key=bool_0,
        graph_name=bool_0,
        assignment_name=str_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "i\x0c`"
    bool_0 = True
    module_0.Redistricting(
        str_0,
        str_0,
        str_0,
        str_0,
        bool_0,
        single_updaters=bool_0,
        assignment_name=str_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    str_0 = "l_2=z"
    int_0 = -31
    bool_0 = False
    bool_1 = False
    dict_0 = {str_0: int_0, str_0: bool_0, str_0: bool_0, str_0: bool_1}
    str_1 = "W-E2SG\x0c)KWAwb-:A<!"
    var_0 = module_4.tmax(bool_1)
    dict_1 = {str_1: var_0}
    str_2 = "bUvJ](3aw"
    module_0.Redistricting(
        none_type_0,
        none_type_0,
        dict_0,
        none_type_0,
        bool_0,
        bool_0,
        dict_1,
        graph_name=var_0,
        assignment_name=str_2,
    )


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    var_0 = module_5.typed_subpart_iterator(none_type_0)
    bool_0 = False
    module_0.Redistricting(
        var_0, none_type_0, none_type_0, none_type_0, bool_0, h=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "P\x0c4\x0b"
    none_type_0 = None
    int_0 = -1852
    bool_0 = False
    dict_0 = {}
    module_0.Redistricting(
        none_type_0, int_0, str_0, none_type_0, bool_0, dict_0, h=int_0
    )
