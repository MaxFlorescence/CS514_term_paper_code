# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import composer_not_command as module_0
import enum as module_1
import locale as module_2
import re as module_3
import builtins as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "*5}F^M9pjVk%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5():
    error_0 = module_2.Error()
    none_type_0 = None
    module_3.fullmatch(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "&\x0c@:Sk${1M E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xact\xce\xbf\xefYs\xae|P\xfb\x84\x8d\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    module_3.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 1822
    module_3.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = -395
    tuple_0 = (int_0,)
    module_3.split(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_3.purge()
    var_0.__contains__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = -446
    var_0 = module_3.purge()
    var_0.__contains__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "bNdTL"
    tuple_0 = (str_0,)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    var_0 = module_3.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    list_1 = [list_0, var_0, list_0, list_0]
    module_1.unique(list_1)


@pytest.mark.xfail(strict=True)
def test_case_22():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_23():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b"\xed"
    str_0 = "A*Te\nX"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    float_0 = -2542.386276
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    int_0 = -1700
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    int_0 = 2532
    module_3.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = 'nKk3s&6lc"8'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    var_0 = module_3.purge()
    module_3.compile(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    error_0 = module_2.Error()
    none_type_0 = None
    module_0.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    error_0 = module_2.Error()
    none_type_0 = None
    module_3.subn(error_0, error_0, error_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "=^0?kA'z![|>\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    float_0 = -2302.25813
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    bytes_0 = b"\xa0\x7fz\x80\x97%\x92\xd7["
    str_0 = "VEZe\rX%!HA"
    module_3.match(bytes_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    int_0 = 737
    module_3.subn(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    int_0 = -1547
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    int_0 = -594
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    complex_0 = 1446.0328 + 1887.8919j
    none_type_0 = None
    error_0 = module_3.error(complex_0, none_type_0)
    set_0 = {error_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    tuple_0 = ()
    str_0 = "P~C\t"
    var_0 = module_3.compile(str_0)
    var_0.__reversed__(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    float_0 = -2190.50742
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    float_0 = -676.0
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    int_0 = -1180
    module_3.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bool_0 = False
    list_0 = [bool_0]
    module_3.findall(bool_0, list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    list_0 = []
    module_3.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    int_0 = -1842
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    bytes_0 = b"\xceh\xc6lO\xbfNH\xe1"
    float_0 = -1806.632
    dict_0 = {bytes_0: bytes_0, float_0: bytes_0, bytes_0: bytes_0}
    module_3.search(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    str_0 = "M@L%Idh,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    bytes_0 = b">\xa3\xcdl &\xb9\x1a\xb5\xb0\xad"
    module_3.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    var_0 = module_3.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    bool_0 = True
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    bytes_0 = b"\xb9I\xcc\xfc\xd1\xc8\xc0\x83M\xa8\xfb\xdb\xdc\xebp\x10\xd9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    str_0 = 'rab;Cu\rU"==oNp\n'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_3.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    dict_0 = {}
    module_3.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_63():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    float_0 = 2986.9
    module_3.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    bool_0 = True
    error_0 = module_3.error(bool_0, bool_0)
    none_type_0 = None
    module_3.split(bool_0, none_type_0, error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_71():
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    module_0.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_72():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_73():
    str_0 = "~j>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    str_0 = "5j#j8A (Rwc1f~Gy#H(n"
    module_3.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    bool_0 = False
    none_type_0 = None
    module_3.sub(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    none_type_0 = None
    float_0 = 4383.577148
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    str_0 = "6+eb;2(C %\n2"
    str_1 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_3.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    int_0 = -1905
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    str_0 = "P'AY83G<D1w,t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    none_type_0 = None
    str_0 = ",1esn\x0b0<?U hbq"
    module_3.sub(none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    base_exception_0 = module_4.BaseException()
    var_0 = module_3.purge()
    var_0.__iter__(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    int_0 = -2736
    module_3.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    float_0 = 3010.02
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    float_0 = 236.77
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    float_0 = -1114.19
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_3.template(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    enum_dict_0 = module_1._EnumDict()
    float_0 = 1251.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    str_0 = '4vxSL)i<\x0c iD;%"}'
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_94():
    none_type_0 = None
    bytes_0 = b""
    var_0 = module_3.split(bytes_0, bytes_0)
    with pytest.raises(TypeError):
        var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    bytes_0 = b"z\xdc\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    str_0 = "t"
    str_1 = ",~o5VtMq`fr`"
    str_2 = "&r"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    none_type_0 = None
    bytes_0 = b"\x9f\x90\xe8"
    var_0 = module_3.subn(bytes_0, bytes_0, bytes_0)
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    float_0 = -2322.8
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_3.fullmatch(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    int_0 = 1079
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    var_0 = module_3.purge()
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_101():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    str_0 = "'E5J'T~I8\t pc8cN\"}L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    str_0 = "M=hDE`^{gtr,(4$dG>"
    dict_0 = {str_0: str_0}
    module_3.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    dict_0 = {}
    none_type_0 = None
    module_3.search(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    str_0 = "VL>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    int_0 = -314
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    var_0 = module_3.purge()
    module_3.split(var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    bytes_0 = b"Hb\xf1\xa7U\xe7\x11?T\x15\x9d\xfd\x9b\xd2\xd3\xf9\xa4"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    float_0 = 86.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    str_0 = "(|B:uUQW_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_3.fullmatch(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    int_0 = -848
    set_0 = {int_0, int_0}
    module_3.sub(int_0, int_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    str_0 = "P$JY\r0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    str_0 = "[Dta)c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    error_0 = module_2.Error()
    none_type_0 = None
    module_3.match(error_0, none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    bytes_0 = b"\x88=\x1ei("
    module_3.split(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    auto_0 = module_1.auto()
    module_3.split(auto_0, auto_0, flags=auto_0)


def test_case_124():
    none_type_0 = None
    var_0 = module_3.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    float_0 = 3634.36543
    none_type_0 = None
    module_3.match(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    list_0 = []
    exception_0 = module_4.Exception(*list_0)
    list_1 = []
    module_3.escape(list_1)


@pytest.mark.xfail(strict=True)
def test_case_128():
    str_0 = "1YF"
    var_0 = module_3.sub(str_0, str_0, str_0)
    var_0.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    bool_0 = True
    module_3.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    complex_0 = 2501.7973 + 6420.16034j
    none_type_0 = None
    module_3.fullmatch(complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    int_0 = -2349
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    bytes_0 = b"rC\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    bytes_0 = b"$|\xad\x1a\xbc~\x9f\x04>\xa2\x06\xd9\x00\xa0X\xd0\x1aw"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    dict_0 = {}
    object_0 = module_4.object(**dict_0)
    none_type_0 = None
    module_3.split(dict_0, object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    dict_0 = {}
    module_1.unique(dict_0)


def test_case_138():
    pass


@pytest.mark.xfail(strict=True)
def test_case_139():
    bytes_0 = b"\x80l\xd0\\4\x9b\xf0\x9b\x8f\x1b\x81\x10\x94\x02\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    bool_0 = False
    none_type_0 = None
    module_3.finditer(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    bytes_0 = b"\x90\xd3)"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    int_0 = -2224
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    int_0 = 465
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    int_0 = -517
    module_3.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_147():
    str_0 = "6GKm\x0c(\x0bqTB:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    var_0 = module_3.purge()
    module_3.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    str_0 = "\rMT\x0b??\\h"
    module_3.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    int_0 = -616
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, int_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    bool_0 = False
    error_0 = module_3.error(bool_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    tuple_0 = ()
    none_type_0 = None
    module_3.findall(tuple_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    str_0 = "!*_'U#fb!"
    var_0 = module_3.escape(str_0)
    module_3.compile(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    bytes_0 = b"z\x0e]\xdb\x85C\xc5("
    none_type_0 = None
    module_3.match(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    none_type_0 = None
    regex_flag_0 = module_3.RegexFlag.VERBOSE
    module_0.match(none_type_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    bytes_0 = b"Xv9\xd6\xe47\xa3\xcc\x9f\xf2\x08\xffH\xd5\xa5/|\xd0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    enum_dict_0 = module_1._EnumDict()
    module_3.escape(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    int_0 = -1016
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    error_0 = module_2.Error()
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    int_0 = 757
    set_0 = {int_0, int_0}
    module_3.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    none_type_0 = None
    module_3.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    bytes_0 = b"\x84Q\xb1p\xb4*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    str_0 = "h5)ZLC_WK!Ox(e^"
    none_type_0 = None
    str_1 = '.l2["ay)='
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_3.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    var_0 = module_3.purge()
    str_0 = "PGD& k32J\t35SuFG"
    none_type_0 = None
    module_3.findall(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    none_type_0 = None
    bytes_0 = b"\xd8\xbcs\xe0\x9b\xe5n\xe0\xd4[\xdeD\x81\xa6\x86\xa8lu"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    int_0 = 1066
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    int_0 = -857
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    var_0 = module_3.purge()
    bytes_0 = b":\xa8\xe0\xf6\xcc\x17s\x15\x89E\x8fM"
    module_3.subn(var_0, bytes_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    bytes_0 = b"R"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_176():
    int_0 = -122
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    none_type_0 = None
    bool_0 = True
    module_3.subn(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


def test_case_179():
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()


@pytest.mark.xfail(strict=True)
def test_case_180():
    bytes_0 = b"\xf0\xae,\x90@6\n\xc3qX\xb6\x1aL"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_182():
    pass


@pytest.mark.xfail(strict=True)
def test_case_183():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    str_0 = "WnX\n9\x0b-YW\rN'cd*qT~"
    var_0 = module_3.findall(str_0, str_0)
    float_0 = 172.9
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_3.fullmatch(dict_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    int_0 = -1021
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    bytes_0 = b"6"
    none_type_0 = None
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    str_0 = ",^"
    var_0 = module_3.sub(str_0, str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    var_0 = module_3.purge()
    var_0.__setitem__(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    float_0 = 737.78
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    set_0 = set()
    none_type_0 = None
    module_3.sub(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    int_0 = 1220
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    none_type_0 = None
    error_0 = module_3.error(none_type_0)
    dict_0 = {error_0: error_0, error_0: error_0, error_0: error_0}
    module_0.get_new_command(dict_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    var_0 = module_3.purge()
    module_3.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    bytes_0 = b"B\xbe}\xe2\xb0Xh\xed"
    list_0 = [bytes_0]
    module_3.findall(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    module_3.compile(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    int_0 = -1013
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    float_0 = 1740.87276
    none_type_0 = None
    module_3.fullmatch(float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    float_0 = -969.0
    none_type_0 = None
    int_0 = -1203
    module_3.subn(float_0, none_type_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    complex_0 = -1333.35393 + 3818.227j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    var_0 = module_3.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    bytes_0 = b"F\x95B\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_213():
    bytes_0 = b"#\x80\xf1\xa2\x95\xc9\xc4d\x1e\xac\xcd\xfb"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    int_0 = -4344
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    complex_0 = 4746.4216 - 1686j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    enum_dict_0 = module_1._EnumDict()
    module_0.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    regex_flag_0 = module_3.RegexFlag.DOTALL
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    bool_0 = True
    module_3.split(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    str_0 = 'Ump8"M$YG2M:>w.s'
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    str_0 = "6\t'~)tWQ! U{*`J8A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    tuple_0 = ()
    module_3.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    bool_0 = True
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    regex_flag_0 = module_3.RegexFlag.DOTALL
    none_type_0 = None
    module_0.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    float_0 = 562.5822
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    bytes_0 = b"\xce\x82\xa6\xc6\xa1"
    var_0 = module_3.compile(bytes_0)
    var_1 = module_3.purge()
    var_1.__getitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    float_0 = 1207.0
    module_3.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    bool_0 = False
    none_type_0 = None
    module_3.fullmatch(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    int_0 = -1129
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    bytes_0 = b"L\xbf{!RV\xbc\xac\x00\xa9\xd8\xb8\\\x0f\x85"
    var_0 = module_3.template(bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    list_0 = []
    module_1.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    int_0 = -2632
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    var_0 = module_3.purge()
    module_1.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    int_0 = -1064
    module_0.get_new_command(int_0, int_0)


def test_case_249():
    pass


@pytest.mark.xfail(strict=True)
def test_case_250():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_0.match(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    none_type_0 = None
    module_1.EnumMeta(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    bytes_0 = b"\xf3jV\xab\x0e\xfa\x87\xa1Q"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    str_0 = "u"
    var_0 = module_3.template(str_0)
    var_1 = var_0.__dir__()
    module_0.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_255():
    bytes_0 = b"j\x86F6\xeb\xec\x9ac\xdc\xcc\xd4\xee=\x00r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    float_0 = 59.707481
    list_0 = [float_0, float_0, float_0, float_0]
    module_3.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    bool_0 = False
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    list_0 = []
    module_2.Error(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    str_0 = "~=4bJ;pY"
    str_1 = '"=JZGU74^)H<Jjx\x0bN$\x0c'
    str_2 = "p=Zd."
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    none_type_0 = None
    module_4.BaseException(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    var_0 = module_3.purge()
    module_3.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    str_0 = "OhvcA71A%Kb!qN"
    none_type_0 = None
    module_3.fullmatch(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    bytes_0 = b"\xc9\xc0D\xee\x88\x8e\x8eE|\x8apq\x11"
    var_0 = module_3.escape(bytes_0)
    module_0.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_271():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_3.sub(exception_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    float_0 = -2947.1641
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    str_0 = "!PdJ$cBIp`4L(X\r@\\\nP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    str_0 = "Tx>@x"
    var_0 = module_3.findall(str_0, str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    str_0 = "E)?`/\x0c\x0cz\tiY7"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    bool_0 = True
    module_3.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    int_0 = -620
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    int_0 = -1047
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    str_0 = "F;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    int_0 = 1864
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    dict_0 = {}
    none_type_0 = None
    module_3.finditer(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    str_0 = "oA?1\tsxO\"NRzzH^dC^L'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    str_0 = "5@>2>z:nW}"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    int_0 = 1557
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_289():
    pass


@pytest.mark.xfail(strict=True)
def test_case_290():
    str_0 = "}>tgs(CBkp\n,#ts"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    str_0 = '"-&O5Y[f+zZ'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    bytes_0 = b"\xb7\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    bytes_0 = b"\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    str_0 = "m?$V}P.PSJcXG74YW+x["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    none_type_0 = None
    exception_0 = module_4.Exception()
    module_0.get_new_command(none_type_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    none_type_0 = None
    float_0 = -807.1
    var_0 = module_3.purge()
    var_0.__call__(none_type_0, float_0, none_type_0, qualname=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    int_0 = -357
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    regex_flag_0 = module_3.RegexFlag.TEMPLATE
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    complex_0 = -3472.03 - 848.7061j
    module_3.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    bytes_0 = b"\xe6\xb2\xa0\xed\x8f^l\xcf"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    str_0 = "bGPe"
    set_0 = {str_0, str_0}
    module_3.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    bool_0 = False
    error_0 = module_3.error(bool_0)
    module_0.match(error_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    bytes_0 = b"Y;\x8b\x9b\x91\xb8\xe2m"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    bytes_0 = b"\xf6p\x13"
    float_0 = -1515.456594
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    complex_0 = 1694.48 + 700j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    bytes_0 = b"\xb3\x00\xe6g\xbf\x1dt)\xc6\x9b\xcfb"
    module_3.fullmatch(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    str_0 = "'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    bytes_0 = b"hA\xcf@\xd3\x81?\x08e{Gm\x99\x93\xfa\xf4Io\x16`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    int_0 = -1464
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    var_0 = module_3.purge()
    var_0.__contains__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_3.search(set_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    bytes_0 = b"\xd4\x11\x87[U~\xac\xd5\xb8O\x83i\x83\x1aq\xf2\xd9\xae\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    complex_0 = -3048.4 + 1024.0116j
    module_3.finditer(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    bytes_0 = b"\xeb\xc0Y\xf6"
    none_type_0 = None
    module_3.subn(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    bool_0 = True
    int_0 = -1127
    set_0 = {bool_0, bool_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    str_0 = "6@Y&mB.WGc0vU{oR"
    var_0 = module_3.fullmatch(str_0, str_0)
    list_0 = [var_0, var_0, str_0]
    module_0.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    complex_0 = 1170.119 + 573.2553j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    int_0 = 2092
    module_3.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    str_0 = "z>o|J1F"
    var_0 = module_3.search(str_0, str_0)
    error_0 = module_3.error(var_0)
    module_3.findall(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    bytes_0 = b"?by\x86\xce\xc9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    str_0 = 'n\t:\ri"T|,?T:"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    int_0 = -52
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    int_0 = 281
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    int_0 = 384
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    bytes_0 = b"#\x18\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    int_0 = 913
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_3.search(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    float_0 = 2693.807
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    float_0 = 2315.08
    module_3.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    float_0 = -593.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    bytes_0 = b"e\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    str_0 = "&w(J*1C8,EJHk"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.EnumMeta(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    bytes_0 = b"n\x1al\xd6#`\xce\xd0\xc4\xee3To)=\x19\x7f"
    module_3.subn(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    int_0 = -218
    module_3.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    none_type_0 = None
    int_0 = -1463
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    int_0 = 336
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    list_0 = []
    module_3.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    str_0 = "<\x0b2h7}d="
    none_type_0 = None
    module_3.split(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    str_0 = '[|\tbl&Vonl;k]*\n"@jN'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    int_0 = -839
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    regex_flag_0 = module_3.RegexFlag.MULTILINE
    none_type_0 = None
    module_0.match(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    list_0 = []
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    bytes_0 = b"\xdcJ \x05\xa3\xd6\xd8\xc2KE\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    str_0 = "D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    tuple_0 = ()
    bytes_0 = b"n~\x99\x9a\x83\x0e]"
    list_0 = [tuple_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    str_0 = "{U<T\x0c\x0b2.ZOrJ\n<f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    var_0 = module_3.purge()
    module_3.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    str_0 = "ecr"
    var_0 = module_3.finditer(str_0, str_0)
    list_0 = [var_0]
    module_3.match(list_0, var_0, str_0)


def test_case_370():
    pass


@pytest.mark.xfail(strict=True)
def test_case_371():
    float_0 = 1550.321
    dict_0 = {float_0: float_0, float_0: float_0}
    module_3.findall(float_0, dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    str_0 = "\"'&ul{$~s&xn\\9eobe&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    base_exception_0 = module_4.BaseException()
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    bytes_0 = b"\xe8\xc9\x0c\xff\x8f\xb14v\xe1~\xcdj.\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    int_0 = 3434
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    bool_0 = True
    list_0 = [bool_0]
    module_3.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    int_0 = 429
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    bool_0 = True
    none_type_0 = None
    module_3.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    str_0 = ">s)2c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    auto_0 = module_1.auto()
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    auto_0 = module_1.auto()
    none_type_0 = None
    module_0.match(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    exception_0 = module_4.Exception()
    list_0 = [exception_0]
    var_0 = module_3.purge()
    var_0.__setattr__(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    str_0 = "em"
    module_3.split(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    bool_0 = False
    none_type_0 = None
    enum_dict_0 = module_1._EnumDict()
    enum_dict_0.__setitem__(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    bytes_0 = b"p*\xf7P\xf5\xf1\x9f^:b\x96\x1f6\xb3"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_3.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    bytes_0 = b"\x93\x7f\xe7\x7fI"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    str_0 = "l=b'nl^Z1-@z|"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    str_0 = "sXJ"
    var_0 = module_3.search(str_0, str_0)
    complex_0 = 1398.251216 - 4777.09j
    var_1 = module_3.purge()
    var_1.__repr__(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    int_0 = 890
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    str_0 = "oG4"
    str_1 = "N(.w[@<H"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    none_type_0 = None
    module_3.compile(none_type_0)


def test_case_400():
    pass


@pytest.mark.xfail(strict=True)
def test_case_401():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    var_0 = module_3.purge()
    module_3.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    bytes_0 = b"\xe3\x84\xceA\xe7\xf65Q"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    int_0 = 2413
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    var_0 = module_3.purge()
    list_0 = [var_0, var_0]
    module_0.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    complex_0 = 171.06274 + 3833.7761j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    exception_0 = module_4.Exception()
    module_0.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    str_0 = "\tN\x0b>3k<kh]"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    bytes_0 = b"\xc3\xa6\xd1\xf4\x19>\xd18\xbb\xb4\x1f\x86F e\xe5\xd3\x93\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    list_0 = []
    module_3.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    bytes_0 = b"\x9e\x84\xf3SP.\xed\xd4"
    var_0 = module_3.compile(bytes_0)
    var_0.__len__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    none_type_0 = None
    module_3.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    bytes_0 = b"^\xad\x86\x00\xbe\xf7\x1d\x1dgZ"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    dict_0 = {}
    module_3.search(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    float_0 = -239.668
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    complex_0 = -1359.1 + 3293.94j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    dict_0 = {}
    var_0 = module_3.purge()
    var_0.__len__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    regex_flag_0 = module_3.RegexFlag.UNICODE
    tuple_0 = ()
    tuple_1 = (regex_flag_0, tuple_0, regex_flag_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_425():
    str_0 = "PO!`\\RfHmtK1yE(C(efL"
    none_type_0 = None
    module_3.subn(str_0, str_0, none_type_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    int_0 = -64
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    int_0 = 1123
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    bytes_0 = b"jk\x84%Z\x95T\xc6\xf7\xa8\x05T\x9f\x0e\xbc(\x93"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    str_0 = "wFnSNPK\n9o!dm@qfvx"
    var_0 = module_3.escape(str_0)
    module_0.get_new_command(var_0, var_0)


def test_case_433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_434():
    none_type_0 = None
    module_3.escape(none_type_0)


def test_case_435():
    pass


@pytest.mark.xfail(strict=True)
def test_case_436():
    set_0 = set()
    module_3.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    bytes_0 = b"\x8c\xaf\x89S\x83\x135\xab\x9f\x1fx\x83\x9f7\x83"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    float_0 = 1646.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    none_type_0 = None
    module_3.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    str_0 = "Wrh1\n6^wtAO~\rr"
    module_3.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    bytes_0 = b"\x1b\x91\xa8\xef<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    bool_0 = True
    module_3.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    int_0 = 205
    module_3.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    str_0 = "fiK4N}sQ}2]\x0bkZ^"
    var_0 = module_3.escape(str_0)
    module_0.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    int_0 = 3364
    module_3.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    int_0 = 2167
    module_3.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    str_0 = ":7B6\\ZEpfgW="
    none_type_0 = None
    module_3.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    str_0 = "(*\nJKXvS\t69{:A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    none_type_0 = None
    int_0 = -5381
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    str_0 = "@\x0b7$aX3\x0c{o]&bjO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    float_0 = -1643.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    str_0 = "w9zv1AE@0c[;"
    module_3.split(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    int_0 = 745
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    bool_0 = False
    none_type_0 = None
    module_3.sub(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    str_0 = 'u7d"hBMBIA]*kkT'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    bytes_0 = b"WX%\xfe!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    regex_flag_0 = module_3.RegexFlag.VERBOSE
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    regex_flag_0 = module_3.RegexFlag.VERBOSE
    set_0 = {regex_flag_0, regex_flag_0, regex_flag_0, regex_flag_0}
    module_0.get_new_command(set_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_465():
    bytes_0 = b"}|"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_3.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    exception_0 = module_4.Exception()
    module_3.search(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    bytes_0 = b'"\xc1*\xb5'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    bytes_0 = b"\xd3\x8d\xb8\xb7\x1a'0\xa0]k\x04\xbdv;\xa8\x86D\xa1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    float_0 = 393.57262
    none_type_0 = None
    module_3.subn(float_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    float_0 = 485.744045
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_474():
    int_0 = -1667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    bytes_0 = b"v\xdc\x0e\xb74\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    str_0 = ",8<."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_479():
    float_0 = -341.971
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    int_0 = 891
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_483():
    complex_0 = -301 - 2701.4216j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    int_0 = 2509
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    int_0 = 4322
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    str_0 = "@_$(b.Mw3lW6sW,O_B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bool_0 = True
    bytes_0 = b"\xb9uw|\xcd\x99\xf1\xcf\xd99\x91\xe6\x9b/{\x92\x17"
    none_type_0 = None
    module_3.sub(bytes_0, bytes_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    bytes_0 = b"\x99\xbew32\x17\x0b&\xa0\xc1\xeb\x800\x10\x81"
    module_0.match(bytes_0, bytes_0)


def test_case_490():
    pass


@pytest.mark.xfail(strict=True)
def test_case_491():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    complex_0 = -1932.6006 + 1471.29j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    str_0 = "Kn_"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    dict_0 = {}
    module_3.template(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    error_0 = module_2.Error()
    none_type_0 = None
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_498():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    complex_0 = -1082.98705 + 2844j
    int_0 = 165
    module_0.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    str_0 = '"IQXF|RWuZOjZ%AX'
    var_0 = module_3.match(str_0, str_0)
    module_1.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    int_0 = -2382
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    complex_0 = -92.106586 - 1329.7j
    list_0 = [complex_0, complex_0]
    module_1.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    exception_0 = module_4.Exception(*list_0)
    module_0.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    str_0 = "9Z\rJN<Hosy~8+`%"
    var_0 = module_3.compile(str_0)
    dict_0 = {var_0: var_0}
    module_0.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_510():
    int_0 = 247
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    str_0 = "N=X\\Ky=zBKR{Mi\x0c>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    error_0 = module_2.Error()
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    complex_0 = -78.37247 + 3803.367199j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    int_0 = -2767
    none_type_0 = None
    module_3.findall(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    str_0 = '"Usg$'
    bool_0 = False
    var_0 = module_3.search(str_0, str_0)
    var_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    int_0 = 665
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    str_0 = "K\\:ArBy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    int_0 = 2366
    set_0 = {int_0, int_0}
    module_3.findall(set_0, set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    none_type_0 = None
    complex_0 = 478.33906 + 850j
    dict_0 = {complex_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    float_0 = -1314.2758
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    bytes_0 = b"\x9e\x9ey\x02\x83"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    tuple_0 = ()
    module_3.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    str_0 = "hS~w?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0)
    var_0.__delattr__(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    bytes_0 = b"\xfe\x05\x8d~ \xa8\xb0\x97>\x9e\x85\xed"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    exception_0 = module_4.Exception()
    module_3.subn(exception_0, exception_0, exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    var_0 = module_3.purge()
    var_1 = module_3.purge()
    bool_0 = True
    none_type_0 = None
    module_3.sub(bool_0, bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    auto_0 = module_1.auto()
    module_1.auto(*auto_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_534():
    bytes_0 = b"\xf8\xaf\x91p"
    module_3.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    int_0 = 2103
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    bool_0 = False
    module_3.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    bytes_0 = b"M\x9c\xe7\x88"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    bool_0 = False
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    bool_0 = False
    none_type_0 = None
    module_3.template(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    bytes_0 = b" "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    bytes_0 = b"\xbb\xe8\xec0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    bool_0 = False
    none_type_0 = None
    module_3.sub(bool_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    int_0 = -1113
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    int_0 = -2824
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    str_0 = "P%~0<"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    complex_0 = 1802.121417 + 286.89j
    int_0 = -1645
    module_0.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    str_0 = "\x0cO9a4vC6YNPI=m/"
    var_0 = module_3.subn(str_0, str_0, str_0)
    list_0 = [var_0]
    module_0.get_new_command(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    int_0 = 3519
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    none_type_0 = None
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    module_3.split(none_type_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_558():
    bytes_0 = b"\xd8\xcez\x9a\x97_\xcba\xef\xbc\x9c\ti\x93\x9c\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    bytes_0 = b"\xa6#b\x0cBT \xb0t\x19\x00\x81\x9a\x9d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    str_0 = "a"
    list_0 = [str_0]
    exception_0 = module_4.Exception(*list_0)
    module_0.get_new_command(exception_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    str_0 = "MA;O)\ngnc1V"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    var_0 = module_3.purge()
    set_0 = {var_0}
    tuple_0 = (set_0, var_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    float_0 = -4014.183
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    float_0 = 493.3278
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    str_0 = ";av?AH<#:y3B)5g=HjG"
    module_3.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    str_0 = "p(rj?W.q7xHn!0"
    module_3.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    float_0 = 1128.21
    none_type_0 = None
    module_3.finditer(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    complex_0 = -325.7 - 1017j
    module_3.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    none_type_0 = None
    str_0 = "Yywl&}l~2`p>"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    exception_0 = module_4.Exception()
    module_3.compile(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    list_0 = []
    error_0 = module_2.Error(*list_0)
    module_0.match(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    var_0 = module_3.purge()
    int_0 = -2550
    tuple_0 = (var_0, int_0, var_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    var_0 = module_3.purge()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    int_0 = 2919
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    complex_0 = 719.5342 - 1170.644617j
    module_3.findall(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    str_0 = "y%1#K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    float_0 = -1084.03749
    str_0 = '1"pLoa/i!U>Lo'
    module_3.sub(float_0, float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    bool_0 = True
    none_type_0 = None
    module_3.sub(bool_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    complex_0 = -733.311 + 868.4118j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    bool_0 = True
    var_0 = module_3.purge()
    var_0.__setattr__(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    str_0 = "hC.otzOeDi[]]"
    str_1 = ""
    str_2 = "Hj+b%TQ"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_0: str_2}
    module_4.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    int_0 = -4286
    str_0 = ""
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    bytes_0 = b"7\x9a\xf6)\xcc\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    bytes_0 = b"#\x11\xc2P\xeeQ\x9e\x17\xc7\xa4,"
    module_3.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    bytes_0 = b"\xcb\x00\xe9Q\xe8\n2\xa0\x1d\x98\xb2\xfc\x87B\xa6)TK"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    int_0 = 1767
    module_3.subn(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    var_0 = module_3.purge()
    dict_0 = {var_0: var_0, var_0: var_0}
    module_3.search(var_0, dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    none_type_0 = None
    enum_dict_0 = module_1._EnumDict()
    module_0.get_new_command(none_type_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    str_0 = "t\\+5ff{(mDG\\?}"
    module_3.sub(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    bool_0 = True
    none_type_0 = None
    module_3.match(bool_0, bool_0, none_type_0)


def test_case_603():
    str_0 = "^!Obeh6y*4/bpm"
    var_0 = module_3.sub(str_0, str_0, str_0)
    var_1 = module_3.sub(var_0, var_0, var_0)
    with pytest.raises(AttributeError):
        var_1.__getattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    str_0 = "D/tj3V*>SLY"
    module_3.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    float_0 = 513.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    str_0 = "\nsl7*/=QA7[[(2xCEN9"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_609():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    complex_0 = -2050.77 + 986.629j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    bytes_0 = b"\xf8\x1e\x91\x1d"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    int_0 = 925
    none_type_0 = None
    module_3.search(none_type_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    bytes_0 = b"\x9b\x7f|\xebY/\r"
    module_3.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    float_0 = 2173.59757
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    bool_0 = True
    module_3.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_618():
    str_0 = "(U\t$Hr}iZ"
    none_type_0 = None
    module_3.sub(str_0, str_0, none_type_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_620():
    var_0 = module_3.purge()
    module_3.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    str_0 = "7A3etHblB%[-um0\x0b H$7"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    exception_0 = module_4.Exception()
    module_0.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    list_0 = []
    module_3.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    int_0 = -1603
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    str_0 = "1+!\n"
    complex_0 = 3488.551 + 8372.349377j
    str_1 = "ACm4rk?[1r |3|"
    dict_0 = {str_0: complex_0, str_0: str_0, str_1: complex_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    str_0 = '3p/ZQw,Xo8?kd7R9u"/'
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    float_0 = -2675.19414
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    exception_0 = module_4.Exception()
    module_3.findall(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    bytes_0 = b"'C\xac\xa0P\xb6<\x8f\xe9G\xab\xcb\x08\xb0\xc5B1\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    float_0 = 1253.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    str_0 = "1d3S$$XOs^K!"
    var_0 = module_3.escape(str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_632():
    str_0 = "(Fy@2'\tpo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    int_0 = -18
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    tuple_0 = ()
    module_3.fullmatch(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    dict_0 = {}
    module_3.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    bytes_0 = b"SiJ\r\x99\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    float_0 = -2336.0
    module_3.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    str_0 = "=W\x0bK348)R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    bool_0 = False
    int_0 = 3848
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    int_0 = -1688
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    int_0 = -3206
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    float_0 = -859.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    bool_0 = True
    module_3.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    bool_0 = True
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    dict_0 = {}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    set_0 = set()
    module_3.fullmatch(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    int_0 = -2085
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    bool_0 = True
    module_3.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    str_0 = "]~\x0c;<7u|jX\n@Su$"
    str_1 = "<.4lL?%f\x0c4y|+OZc\n/"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_3.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    complex_0 = 1452.17806 - 836.09486j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    none_type_0 = None
    bytes_0 = b"4K1\x86\x0c\xaag"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_3.finditer(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    bytes_0 = b"M\xe9E\x80"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    str_0 = "Kw\x0cIg^4+/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    bool_0 = True
    bytes_0 = b"\xd8KS\xa4;|O\xf6s\xeb"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    int_0 = -654
    list_0 = [int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    var_0 = module_3.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    int_0 = -1366
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    int_0 = 1429
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    bytes_0 = b"\x18*\xd4\xd7\xd55"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    bytes_0 = b"\xd4\xbc\r\xd2K\xdf\xffq"
    var_0 = module_3.compile(bytes_0)
    none_type_0 = None
    module_0.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    var_0 = module_3.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    int_0 = 887
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    bytes_0 = b"<\x87b2\xe6F\x82C\xb9\x1c[\xae?7\xaf\xcf@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    float_0 = -1950.0
    module_3.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    bytes_0 = b"}\x93"
    var_0 = module_3.fullmatch(bytes_0, bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    str_0 = ";N4Jy89i@%g\x0bkdHJHlka"
    var_0 = module_3.finditer(str_0, str_0)
    module_1.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    str_0 = "?"
    str_1 = "xL4c(^33Ik["
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    int_0 = -552
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    bytes_0 = b"\xbe\xe3{D\x9a\x98 \xec\x94\x1a?R\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    str_0 = "q>H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    bytes_0 = b"\\\xb8\xab\x964M\x03Z#\xa6\xfcD\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    bytes_0 = b"i"
    error_0 = module_3.error(bytes_0, pos=bytes_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    set_0 = set()
    module_3.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    float_0 = -1331.63967
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    str_0 = "3\tEm"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    float_0 = 2000.2525
    bytes_0 = b"i\xd9r\xd1\x8f\xc5\xf4>J\xdf|A"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0, var_0)
    tuple_1 = (float_0, set_0, tuple_0, set_0)
    float_1 = 492.565
    module_0.match(tuple_1, float_1)


@pytest.mark.xfail(strict=True)
def test_case_690():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    int_0 = 2065
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    str_0 = ":^xv^q24Ko <kL%U"
    str_1 = "}#Q~Y"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_1}
    module_0.match(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_693():
    complex_0 = -1984.075155 + 1252.457863j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    tuple_0 = ()
    none_type_0 = None
    module_3.sub(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_3.subn(enum_dict_0, enum_dict_0, enum_dict_0, enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    str_0 = "%."
    list_0 = [str_0]
    module_3.split(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    bytes_0 = b"?\xe2\x81\xd7\xfc\xe7uH\x0e\xe3d\xe8p$\xb9\xe3\x9cy\x1e\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    int_0 = 2967
    set_0 = {int_0, int_0}
    module_3.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    bytes_0 = b"\x8cQ\xc8\x9fTef^\xe5\xbe^Y\xa4\x06 \xf4\xcfD\xf6\xdd"
    module_3.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    bytes_0 = b"\x1f\tj\xb7$\x95\xe4p\xa13\xc5\x89W\xe04&1q\xa6"
    module_1.EnumMeta(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    float_0 = 2151.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    bytes_0 = b"\x04\x1b\xa1\xe3\x13\xda^o\xea\xba\xb2\xea\x87K"
    set_0 = {bytes_0}
    str_0 = 'C/9ciGGx(\\vMK"t!'
    float_0 = 4010.321
    tuple_0 = (set_0, str_0, float_0)
    module_1.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    bool_0 = True
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    dict_0 = {}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    bytes_0 = b"\xa0\xfbV\x12\x00\x85)&\xe8\xef\xff\xae\x15\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    str_0 = "g`'"
    var_0 = module_3.match(str_0, str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    bool_0 = True
    int_0 = -15
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    str_0 = "kDDn$g5B}\rZ!]\x0b:8Iv&"
    var_0 = module_3.compile(str_0)
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    str_0 = "?Z)"
    str_1 = "G8'a\",U;d'&<5+B9O8s#"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_3.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    str_0 = "I#KGbGkq#\x0bI>P.cKkVr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    str_0 = "=J%b7"
    str_1 = "o,\r%'"
    str_2 = "\x0bKOn|V*"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_0: str_2}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    float_0 = 1919.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    bytes_0 = b"\x04o\xd1]\xa11\x80J\xc9L\xc8#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    int_0 = 1301
    str_0 = "!k"
    dict_0 = {str_0: int_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    float_0 = -1271.00821
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    int_0 = 1471
    list_0 = [int_0, int_0]
    dict_0 = {int_0: int_0, int_0: list_0, int_0: list_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    int_0 = 3281
    module_3.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    str_0 = "F'kn}Y<\nC"
    module_3.split(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    bool_0 = True
    none_type_0 = None
    module_3.fullmatch(bool_0, bool_0, none_type_0)


def test_case_724():
    pass


@pytest.mark.xfail(strict=True)
def test_case_725():
    str_0 = "<U_Mj=_0x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    bytes_0 = b"\x80r\xa8M\x1a\x00\x1f*0\xbc>"
    list_0 = [bytes_0]
    module_3.sub(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    int_0 = 93
    module_3.split(int_0, int_0, flags=int_0)


def test_case_730():
    pass


@pytest.mark.xfail(strict=True)
def test_case_731():
    int_0 = 1125
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    bytes_0 = b"\x81\x9e\xbdD\x11\xdb\x95u\xe2i"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_3.subn(bool_0, bool_0, set_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    str_0 = "$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    int_0 = 884
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    bytes_0 = b"Z~\x13}Y\xa7\x92\x835L\x820\xac@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    complex_0 = 1077.4627 + 462.3758j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    bool_0 = True
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    float_0 = 1592.127
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_751():
    int_0 = -1099
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    str_0 = "E=FUnjd1un"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    float_0 = 4657.364
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    float_0 = -168.0
    none_type_0 = None
    module_3.subn(float_0, float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    float_0 = -450.675
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    bytes_0 = b"\r\xcc\x88$\xc8J\xa5\xa7b\x90\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    int_0 = 324
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    str_0 = "R?B(<\"'/(%C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    bool_0 = False
    module_3.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    float_0 = -423.2
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    set_0 = set()
    auto_0 = module_1.auto()
    module_0.match(auto_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    int_0 = -1145
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    float_0 = -2983.0
    module_3.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    bool_0 = True
    module_3.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    int_0 = -5944
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    bytes_0 = b"\x0b\xeb\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    str_0 = "S.!aHE-Pql}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, none_type_0)
    module_3.search(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    int_0 = -1658
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    bool_0 = True
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    int_0 = 1946
    module_3.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    bytes_0 = b"\xaa0\x10\x8e\xf0Y"
    list_0 = [bytes_0]
    module_3.finditer(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    float_0 = -1047.28
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    float_0 = -3773.88
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    complex_0 = -1169.583588 - 888.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    int_0 = 215
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    int_0 = -330
    none_type_0 = None
    module_3.split(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    int_0 = -4037
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    int_0 = 2370
    module_3.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    str_0 = "W%:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    bytes_0 = b"\x1c=\x15\xb4\xde\xd1X\xdb\xfbJ\xaa\xf9\x18\tt\x19\xbdd\x1f"
    var_0 = module_3.findall(bytes_0, bytes_0)
    tuple_0 = (var_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    bytes_0 = b"\xbbc\x1aV<\xd6\xb7e\xb3hy"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    float_0 = 3691.12
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    str_0 = "I!7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    float_0 = -1107.348
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    exception_0 = module_4.Exception()
    bytes_0 = b"\x03\x8c9\x15\x10\x9a\x9ami&f\x92\xa2\xbc\xdb\xd6\xee\x00\xe5"
    int_0 = 1374
    list_0 = [bytes_0, bytes_0, bytes_0, int_0]
    module_3.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    int_0 = 12
    var_0 = module_3.purge()
    module_0.get_new_command(int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    int_0 = 3727
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    str_0 = "!9<G7Te\nht,|'"
    module_0.match(str_0, str_0)


def test_case_802():
    pass


@pytest.mark.xfail(strict=True)
def test_case_803():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_804():
    str_0 = "\n'kfy\x0c{p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    str_0 = "-fKRQ3SE#lz\x0c>x\\"
    str_1 = "ruaD\n',!$"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_1: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    list_0 = []
    module_1.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    str_0 = "UE$5ka9Ldm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    var_0 = module_3.purge()
    set_0 = {var_0, var_0, var_0, var_0}
    module_0.match(var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    float_0 = 1313.424
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    complex_0 = -72 - 536.089993j
    module_3.split(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    dict_0 = {}
    module_3.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    float_0 = 385.0
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    bytes_0 = b"\xde5\xad\xe6tM\xfd7\xcc\xa5\xad\x86\xd2"
    set_0 = {bytes_0, bytes_0}
    module_3.template(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    bytes_0 = b"u"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    var_0 = module_3.purge()
    set_0 = {var_0, var_0}
    int_0 = -3213
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    bytes_0 = b"FN)\x8e\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    bool_0 = True
    error_0 = module_3.error(bool_0)
    module_3.template(bool_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    float_0 = -1156.09047
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    str_0 = "LeAO8M>P^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    complex_0 = -1723 + 156.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    bool_0 = False
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    str_0 = "m+t~f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    bool_0 = True
    module_3.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    float_0 = -74.0
    module_3.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    int_0 = -3726
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    str_0 = "5Uw6,$oz:hm94"
    none_type_0 = None
    module_3.sub(str_0, none_type_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    float_0 = -3126.4685
    int_0 = -222
    set_0 = {float_0, int_0}
    module_3.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    bytes_0 = b"%\x0c\xe6$\x86\xb5\xc4\x8f_\xc1\xee\x0e\x06\xae\\\xf2\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    int_0 = 1743
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    str_0 = ">T"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    none_type_0 = None
    set_0 = {none_type_0}
    var_0 = module_3.purge()
    var_0.__contains__(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    float_0 = 6032.9443
    module_3.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    int_0 = -1005
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    str_0 = "]=Ar0yYbDUSoa?Nh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    bytes_0 = b"\xd2\xd9kW\xf0\xc3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    str_0 = "p:-H\\9&^q$p\n[.X"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    str_0 = "=K&4lp"
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__delattr__(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    str_0 = "v4eL}-W\n[it|"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    str_0 = "<8KrYhFgna`I+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    int_0 = 508
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    str_0 = ".Ap\x0c*pD\n"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    int_0 = 861
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    bool_0 = False
    none_type_0 = None
    module_3.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    int_0 = 511
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    set_0 = set()
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_3.sub(set_0, enum_dict_0, none_type_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    none_type_0 = None
    var_0 = module_3.purge()
    module_3.fullmatch(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    none_type_0 = None
    module_3.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    list_0 = []
    module_0.match(list_0, list_0)


def test_case_861():
    pass


@pytest.mark.xfail(strict=True)
def test_case_862():
    bool_0 = False
    module_3.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    int_0 = 896
    module_0.match(int_0, int_0)


def test_case_867():
    pass


@pytest.mark.xfail(strict=True)
def test_case_868():
    bytes_0 = b"\xece"
    none_type_0 = None
    module_3.subn(bytes_0, bytes_0, bytes_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    int_0 = 1184
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    int_0 = -1756
    none_type_0 = None
    module_3.subn(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    enum_dict_0 = module_1._EnumDict()
    enum_dict_0.__setitem__(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    bytes_0 = b"\xaa\x8a\xeb\xb9\xfa9v"
    none_type_0 = None
    error_0 = module_3.error(bytes_0, none_type_0, bytes_0)
    set_0 = {error_0, none_type_0}
    module_3.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    int_0 = -453
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    str_0 = "1pqsc64\r\\c#FPr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    float_0 = 3898.62307
    module_3.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    none_type_0 = None
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    int_0 = 1170
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    str_0 = "n&\x0c1\rt#Ef\x0b. z"
    set_0 = {str_0, str_0, str_0}
    complex_0 = 1796 - 1865.52127j
    module_3.search(set_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    bool_0 = False
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    int_0 = -850
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    dict_0 = {}
    str_0 = "<d"
    var_0 = module_3.escape(str_0)
    var_1 = module_3.escape(var_0)
    var_1.scan(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    str_0 = "anelI7RtU(\\ hQ/#^@b0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    int_0 = -1800
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    str_0 = "\t\"kr'9*Mz"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    int_0 = 2223
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    str_0 = "]R|E}\x0b"
    str_1 = "cR,!R%^@]731"
    var_0 = module_3.finditer(str_1, str_1)
    str_2 = "Yi"
    dict_0 = {str_0: str_0, str_1: var_0, str_1: var_0, str_2: str_2}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    str_0 = "(\x0c3B\x0cT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    str_0 = "\t>St6j\\Gxq"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    none_type_0 = None
    bool_0 = True
    module_3.split(none_type_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    float_0 = 1260.337542
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    bytes_0 = b")Ra?k\x00\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    str_0 = ":g@NecdVM,3:>bn\t>i"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    bytes_0 = b"\x0b\x9f\xa1&,\xf8\\Y\xae\x00\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    module_0.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_903():
    int_0 = 1192
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    exception_0 = module_4.Exception()
    module_3.search(exception_0, exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    complex_0 = 414.391101 - 1699.85j
    none_type_0 = None
    module_3.sub(complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    int_0 = -793
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    float_0 = -3392.727731
    module_3.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    bytes_0 = b'h\xc4\x17h\xab\x1eV"\r\xab\xda\x06\x8f'
    var_0 = module_3.escape(bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    bytes_0 = b"\x91\xa4\xff\x05\x11\xe2\xf6\r\x9cB\xea4\xe3k\xa6C\xa6{"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    bytes_0 = b'5\xb1&"\xc5\xd2\x94\xdb\xb8@\n?\xd3\x92\xfa\xba\xf5\x98'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    bool_0 = False
    bytes_0 = b"\x02\xb4"
    module_3.compile(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    bytes_0 = b"\xb38\xf1'"
    set_0 = set()
    module_3.compile(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    int_0 = 1358
    bytes_0 = b"Wh\xa7c/\xdd\x81\xbc\x11\x97\x07L&\xc6\x86"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    str_0 = 'QIue7v4;"<&FJ'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    complex_0 = 535.862 + 1669.8207j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    int_0 = -175
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    bytes_0 = b"\xd1:#\xf9\xfa^"
    bool_0 = True
    set_0 = {bytes_0, bytes_0, bool_0}
    dict_0 = {bytes_0: set_0}
    module_3.search(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    complex_0 = 243.95 + 5597.91325j
    none_type_0 = None
    module_3.subn(complex_0, complex_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    int_0 = -491
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    str_0 = 'Rq\x0cEQ.Ql~ T:}C"mH7 '
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    int_0 = -1816
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    int_0 = 1276
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    int_0 = 3429
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    int_0 = 201
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    str_0 = "-KCsST!`^2 awY1F"
    none_type_0 = None
    module_3.sub(str_0, str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    var_0 = module_3.purge()
    module_3.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    float_0 = -543.8
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    bytes_0 = b"T\x8f\xc1+8"
    float_0 = 1494.75
    tuple_0 = (bytes_0, float_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    int_0 = -870
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    int_0 = -155
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    complex_0 = 542 + 4255.36743j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    bytes_0 = b"\x83\x9c\xb5v\xe3\xf6\xcd@\xb6k\xd2+0~\x1b4\xb3\x16\x98r"
    regex_flag_0 = module_3.RegexFlag.VERBOSE
    module_0.get_new_command(bytes_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    bytes_0 = b"O@b;\xb3\xbf\xa8A\x96[\xb6\x17\x8br\xa7"
    module_3.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    complex_0 = 3494.160715 - 424.1j
    module_3.Scanner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    int_0 = 414
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    bytes_0 = b"\xf2\x9a\xdc\x92"
    none_type_0 = None
    module_3.finditer(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    str_0 = "PK\n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    none_type_0 = None
    int_0 = 2962
    set_0 = {none_type_0, none_type_0, none_type_0, int_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    var_0 = module_3.purge()
    int_0 = -867
    none_type_0 = None
    module_3.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    bytes_0 = b"\x1c\x1c\x10\xffp\xd0\xef=`\xa3 \xa4h\x9e\xea'"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    var_0 = module_3.purge()
    module_3.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    var_0 = module_3.purge()
    bool_0 = False
    module_3.findall(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    float_0 = -426.135
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    int_0 = -1578
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    str_0 = ","
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    regex_flag_0 = module_3.RegexFlag.ASCII
    module_3.sub(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    bytes_0 = b"\xd8\xdf_"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_1.auto(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    int_0 = -3065
    module_3.split(int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    int_0 = -94
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    var_0 = module_3.purge()
    module_3.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    str_0 = "j/}h+\\vDYwS8WV#D 2L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    int_0 = 1313
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    var_0 = module_3.purge()
    dict_0 = {var_0: var_0}
    module_3.subn(var_0, var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    bytes_0 = b"\x8aX\xbb'IL\x12\x1c\x045\x97\xd8"
    var_0 = module_3.template(bytes_0)
    module_1.auto(*var_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    float_0 = -1665.0
    module_3.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    complex_0 = 802.168955 - 3506j
    list_0 = [complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    int_0 = 2004
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    str_0 = "]fXs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    str_0 = "|m,U[e\x0b\x0bgBlu|fB5"
    module_3.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    int_0 = -1391
    bool_0 = True
    none_type_0 = None
    module_3.findall(int_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    float_0 = 1811.3
    module_3.subn(float_0, float_0, float_0, float_0)


def test_case_978():
    pass


@pytest.mark.xfail(strict=True)
def test_case_979():
    str_0 = ""
    var_0 = module_3.compile(str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    bytes_0 = b"\xb5\xf8\xe0M\x0c\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    float_0 = -2337.798236
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    tuple_0 = ()
    module_3.search(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "\r+Ic"
    dict_0 = {str_0: none_type_0, str_0: str_0}
    module_4.BaseException(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    str_0 = "86"
    module_3.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    bool_0 = True
    none_type_0 = None
    module_3.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    bool_0 = False
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    bool_0 = False
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    bool_0 = True
    module_3.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    bytes_0 = b"\xa8\x7f\xaf\xb2"
    var_0 = module_3.findall(bytes_0, bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    regex_flag_0 = module_3.RegexFlag.DOTALL
    module_3.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    float_0 = -376.86
    module_3.sub(float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    str_0 = "p<wk(Xq\\*W(W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    complex_0 = 353.902 + 2249j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    bool_0 = False
    module_3.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    bytes_0 = b"\xefP"
    var_0 = module_3.template(bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    bool_0 = True
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    float_0 = -4444.617557
    module_3.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    var_0 = module_3.purge()
    module_1.EnumMeta(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    str_0 = "Nub-nB7CDL"
    none_type_0 = None
    module_3.search(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    bool_0 = False
    module_3.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    bytes_0 = b"\xa5\xbc\x16\xde\x83\xe6\x06\x8c\x1f\x890"
    var_0 = module_3.escape(bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    bytes_0 = b"\x97=\x95\xee\xe4\x1a\x0b\xb8\x80*_\x08\xc1\x00\x99\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    bytes_0 = b"\xc3\xf9\xd9"
    none_type_0 = None
    module_3.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    str_0 = "P_O]X>x,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    base_exception_0 = module_4.BaseException()
    module_0.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    complex_0 = 809.286 + 490.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    int_0 = -2543
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    int_0 = -2025
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    str_0 = "Z1u,)6f?<\r\x0bOgd\x0cx6s b"
    none_type_0 = None
    module_3.fullmatch(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    complex_0 = -460.3 - 2216.621j
    float_0 = -114.966
    module_0.match(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    bytes_0 = b"\xf4\r\x910\x1b\xfd!-\x87\xf5\xf7\xf1bZ\xcd'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    str_0 = "cK#mM]h"
    var_0 = module_3.escape(str_0)
    list_0 = [var_0, var_0, str_0]
    module_0.get_new_command(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    bytes_0 = b"ON"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    float_0 = -820.3
    dict_0 = {float_0: float_0}
    module_3.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    bool_0 = True
    none_type_0 = None
    module_3.template(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    bytes_0 = b"\xfa\xc0\xa4\xdc\xff\xbc\xb1\x8f\xc5\xcc]"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    dict_0 = {}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    float_0 = 713.47036
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_3.sub(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    bytes_0 = b'\xf1"p\\\xcc\xbf-r\x13o\x89\xbf\xfd'
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_3.finditer(list_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    bool_0 = False
    none_type_0 = None
    module_3.subn(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    enum_dict_0 = module_1._EnumDict()
    float_0 = 1636.8965
    none_type_0 = None
    module_3.split(float_0, none_type_0)


def test_case_1037():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1038():
    exception_0 = module_4.Exception()
    module_3.template(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    int_0 = 3129
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    bytes_0 = b"\x8f\xa9\x08\xd2L\xdf"
    var_0 = module_3.escape(bytes_0)
    bool_0 = False
    none_type_0 = None
    module_3.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    bytes_0 = b"\xfd\x001\x8a\xfb[,\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    module_3.search(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    str_0 = 'Qqnc8x\r/9jC27n!"'
    module_0.get_new_command(str_0, str_0)


def test_case_1046():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1047():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    int_0 = -114
    module_3.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    str_0 = "J\\Z_QM\x0b=ac5)$D,\n]p"
    module_3.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    complex_0 = -16.0132 + 74.35j
    module_3.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    bytes_0 = b"\x17\x85G\xf6=\xe6"
    list_0 = []
    var_0 = module_3.compile(bytes_0)
    tuple_0 = (bytes_0, list_0, var_0)
    module_1.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    int_0 = -2108
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    bool_0 = True
    module_3.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


def test_case_1059():
    bytes_0 = b"R\x8a"
    var_0 = module_3.finditer(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    int_0 = -1026
    list_0 = [int_0, int_0, int_0]
    regex_flag_0 = module_3.RegexFlag.VERBOSE
    tuple_0 = (list_0, regex_flag_0)
    module_0.get_new_command(tuple_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    float_0 = 4133.27
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    bytes_0 = b"\xaaa\xc1\x0c\xbc\x97g\xb2\xf2\x0c\x85A\xf3gi?\xccu(\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    str_0 = "p|`h"
    module_3.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    int_0 = 1444
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    str_0 = "|"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1066():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1067():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    str_0 = "aCvg=4b\\>`q"
    none_type_0 = None
    str_1 = ")0jc#q"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    complex_0 = 117.083152 - 622.468j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    int_0 = -1404
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    complex_0 = -2118.36214 + 1863.9048j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    tuple_0 = ()
    module_3.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    str_0 = "g&ti-CK]4!X51\x0bH$+ah"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1079():
    int_0 = 427
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    bytes_0 = b"-\x1e\xe6\x87\xd5Z\xf2P"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    var_0 = module_3.purge()
    none_type_0 = None
    float_0 = 4872.1
    module_3.subn(none_type_0, none_type_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    set_0 = set()
    enum_dict_0 = module_1._EnumDict()
    enum_dict_0.__setitem__(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    str_0 = "F\x0b K"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    bool_0 = False
    module_3.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    bytes_0 = b"\x05U\x10\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    regex_flag_0 = module_3.RegexFlag.IGNORECASE
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    bytes_0 = b",\xea\x06\xd9\x9e\xf3-\xa3H\xa2"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    bytes_0 = b"r\x07or "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    bool_0 = True
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    set_0 = set()
    module_3.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    float_0 = 452.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    float_0 = 465.846
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    int_0 = -302
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    bytes_0 = b"\x90\xec\xa6\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    complex_0 = -4790.23102 - 74.924j
    module_3.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    none_type_0 = None
    regex_flag_0 = module_3.RegexFlag.DEBUG
    module_3.findall(none_type_0, regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    bytes_0 = b"\xdd\x9a\xb9\xbc\xaa;\xfc"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    int_0 = 2870
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    str_0 = "qb3l\t=\\!\x0beHVFi}IEa"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    tuple_0 = ()
    module_3.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    complex_0 = -1706 + 559.71161j
    module_3.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    bytes_0 = b"\xe3L\xae.\xdat\xaa4+\xfb\xc5V)"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, bytes_0]
    module_3.finditer(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1114():
    bytes_0 = b"\xba \xd1`\xc0Y\x0f\xd0eX\x99"
    list_0 = [bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_3.search(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    base_exception_0 = module_4.BaseException()
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_4.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    str_0 = "K6Y"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    int_0 = 210
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    var_0 = module_3.purge()
    module_3.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    regex_flag_0 = module_3.RegexFlag.MULTILINE
    module_3.subn(regex_flag_0, regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0, var_0)
    module_3.error(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_1128():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    none_type_0 = None
    module_3.escape(none_type_0)


def test_case_1130():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1131():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    float_0 = -729.64297
    list_0 = [float_0, float_0]
    module_3.Scanner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    bytes_0 = b"\xday-u\xfaSqI\xb8\x04\xcf\x80_o1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    int_0 = -755
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    float_0 = -1987.77
    set_0 = {float_0}
    module_3.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    var_0 = module_3.purge()
    module_3.template(var_0, var_0)


def test_case_1140():
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    set_0 = set()
    with pytest.raises(AttributeError):
        var_1.__getattr__(var_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    complex_0 = -949.43233 - 3235.672j
    var_0 = module_3.purge()
    var_0.__contains__(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    str_0 = "1^@\rq\x0cw&.l')"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    bytes_0 = b"\xe9\x13\xfa\xb3<\x83|\xff4\t\xdf\xa6\x83y\xe0\xc1Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    list_0 = []
    list_1 = [list_0, list_0]
    module_3.compile(list_1)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    float_0 = -112.8747
    module_0.get_new_command(float_0, float_0)


def test_case_1146():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1147():
    int_0 = 1089
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    int_0 = 1548
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    int_0 = -685
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    int_0 = -1326
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    regex_flag_0 = module_3.RegexFlag.IGNORECASE
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    str_0 = "netOFS0%n2+?Q<\tYJ$`"
    none_type_0 = None
    module_3.subn(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    str_0 = ";"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    int_0 = -2025
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__contains__(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    str_0 = "ri\rNZJm\t"
    str_1 = "TZrr/C\rGFlC%+Gh_)"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_3.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1157():
    int_0 = -3767
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    dict_0 = {}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    list_0 = []
    none_type_0 = None
    module_3.subn(none_type_0, list_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    list_0 = []
    base_exception_0 = module_4.BaseException(*list_0)
    list_1 = [base_exception_0]
    list_2 = [list_1, list_1]
    str_0 = "c\r#Zv+&h\x0b<G!K;'va0"
    str_1 = "[9n\\<Q>D}9"
    str_2 = "6tNfDZ\x0cKg@Ax}"
    dict_0 = {str_0: list_0, str_1: base_exception_0, str_2: str_1}
    module_1.auto(*list_2, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    bytes_0 = b'7\x99]I\xeay"\x06\xf7\xd0\x8ea=\x923\xc4\x06'
    bytes_1 = b"\xfc\xb0\xf6i\x17\xe1\xf2\xed\n"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    str_0 = "tBs)hJ@]i2"
    module_3.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    bytes_0 = b"\x17&"
    module_3.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    float_0 = -2080.2
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    list_0 = []
    module_3.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    str_0 = "jf=2&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    bytes_0 = b"\xed_\xb1\x9c\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    var_0 = module_3.purge()
    module_3.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    bytes_0 = b"\xcb"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    int_0 = 350
    none_type_0 = None
    module_3.search(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    dict_0 = {}
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    float_0 = 3982.51158
    module_3.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    str_0 = '\\u fC$")1'
    list_0 = [str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    int_0 = -1228
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    bytes_0 = b">\x86\xe2\x08\xba\xf1c\xa5$\xa8"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    int_0 = 1383
    module_3.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    bytes_0 = b"u\xf9 \xb5W "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    int_0 = -4695
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    bool_0 = True
    bytes_0 = b"\xeak\x07\xdewR\xc9"
    var_0 = module_3.findall(bytes_0, bytes_0)
    var_0.__reversed__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    bytes_0 = b"e\xa5\xb6?o\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    int_0 = 1743
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1188():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1189():
    bytes_0 = b"s\x90\x9ePG6^T\xf1\rr\xc9P"
    module_3.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    str_0 = "Uh\rVIGMw"
    module_0.match(str_0, str_0)


def test_case_1191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1192():
    int_0 = 631
    module_3.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    bytes_0 = b"\xd9\xb0P\x0e\xbe\xf3\xf3\\\xabdH\x08"
    int_0 = -669
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    str_0 = "Uu&u<L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    str_0 = "=;ieZk8`wQ+%"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    bool_0 = True
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    int_0 = 1572
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    int_0 = -46
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    bytes_0 = b"r\x07\xb5Us\xfa&\xa5\xe9F/"
    var_0 = module_3.findall(bytes_0, bytes_0)
    module_0.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    bytes_0 = b"\xf68\xb5o\x1b\x81\x8c\xb3\x82f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    str_0 = "</lKIBe"
    dict_0 = {str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    tuple_0 = ()
    module_3.split(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    int_0 = 995
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    object_0 = module_4.object()
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    int_0 = 3062
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    str_0 = "pPM?\x0b@L_d+[+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    str_0 = "4;im"
    var_0 = module_3.search(str_0, str_0)
    regex_flag_0 = module_3.RegexFlag.LOCALE
    set_0 = {regex_flag_0}
    none_type_0 = None
    module_3.fullmatch(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    dict_0 = {}
    error_0 = module_2.Error(**dict_0)
    module_3.template(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1213():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    str_0 = "`NR1"
    var_0 = module_3.compile(str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    str_0 = "OIgC6n\\\n\x0c!$FUIH`"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    var_0 = module_3.purge()
    module_3.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    complex_0 = -2654.934305 - 3533.1j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_3.subn(dict_0, complex_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    float_0 = -4111.08873
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    bytes_0 = b"\x12-\xb6s"
    none_type_0 = None
    error_0 = module_3.error(bytes_0, none_type_0, none_type_0)
    module_1.unique(error_0)


def test_case_1220():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1221():
    bytes_0 = b"\x866\x02\xb5\xe5e\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1222():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1223():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1225():
    float_0 = 1966.0
    module_3.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    bool_0 = True
    module_3.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    bytes_0 = b""
    var_0 = module_3.escape(bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    complex_0 = 1956.4344 + 293.70604j
    module_3.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    int_0 = 1316
    none_type_0 = None
    module_3.split(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    int_0 = -1726
    none_type_0 = None
    set_0 = {int_0, int_0, none_type_0}
    module_3.split(int_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    int_0 = 1425
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    auto_0 = module_1.auto()
    module_0.get_new_command(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    regex_flag_0 = module_3.RegexFlag.TEMPLATE
    module_3.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    str_0 = "\t>`|'1\t"
    none_type_0 = None
    module_3.subn(str_0, none_type_0, str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    float_0 = 1816.981156
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    str_0 = "KAN*o\rE( W@hC"
    module_3.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    str_0 = "c!"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    str_0 = "\r:nYYsO1b Kpoc2*!Hr~"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_2.Error(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    complex_0 = 3592 + 1230.6453j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    none_type_0 = None
    complex_0 = 164.6328 - 1576.8333j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    none_type_0 = None
    bytes_0 = b"\xed\x92[8\x1b>\xf1BN\xe7\xa6\x9b\xec\x95"
    module_3.search(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    float_0 = -1237.143
    module_3.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    bytes_0 = b"\xfe\x13b\xd8h"
    module_0.match(bytes_0, bytes_0)


def test_case_1254():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1255():
    int_0 = 1117
    bytes_0 = b"\xaa\xb9``\xe3\xeeeGE\xad3\xd7"
    set_0 = {int_0, bytes_0, int_0}
    module_1.unique(set_0)


def test_case_1256():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1257():
    int_0 = 539
    complex_0 = -3204.025 + 2318.93242j
    module_0.get_new_command(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    bytes_0 = b"\xf6\xc1\x81\xdd\xf2\x0833\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    set_0 = set()
    module_1.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    complex_0 = -2583.53505 + 673.01391j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    none_type_0 = None
    list_0 = [none_type_0]
    error_0 = module_2.Error(*list_0)
    module_0.get_new_command(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    error_0 = module_2.Error()
    module_3.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    float_0 = -1017.00103
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    regex_flag_0 = module_3.RegexFlag.IGNORECASE
    module_3.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    bytes_0 = b"L"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    str_0 = "n:.+3W$@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    list_0 = []
    none_type_0 = None
    module_3.subn(none_type_0, list_0, none_type_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    str_0 = '[}E91!"['
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    int_0 = -1974
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    dict_0 = {}
    module_3.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    bytes_0 = b"\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    float_0 = 3078.53744
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bytes_0 = b"5\xaf*\xcd\xa1\x82\x7f\x0e\xd4\x8cW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    str_0 = "~5Eh[4&c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    int_0 = 3435
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    int_0 = -1821
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    str_0 = "{rtt,G)P9-*Q=Ke|d_s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    error_0 = module_2.Error()
    module_3.escape(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    float_0 = 22.5
    module_3.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    bytes_0 = b"\xb55\xfd\x0c_\xea\xc6!\x80\xb9\xe4\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    str_0 = "?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    str_0 = 'HNE|xwu9LU"V$7 C}g'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    int_0 = 1733
    list_0 = [int_0, int_0]
    module_3.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    str_0 = "`-c:/Vy\n/zl"
    none_type_0 = None
    module_3.subn(str_0, str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_1291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1292():
    str_0 = 'ntA(/XNq4c\rf"\tY6)vV'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_3.match(tuple_0, none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    regex_flag_0 = module_3.RegexFlag.DOTALL
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    bytes_0 = b"\xd3}\xf0\x94\xe2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1297():
    bool_0 = True
    none_type_0 = None
    bytes_0 = b"\x9a<\xbb\x15"
    var_0 = module_3.escape(bytes_0)
    var_1 = module_3.finditer(var_0, var_0)
    with pytest.raises(AttributeError):
        var_1.__getattr__(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    int_0 = 652
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    int_0 = 1166
    module_3.subn(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    set_0 = set()
    module_3.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    set_0 = set()
    module_3.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    str_0 = "O\\+\t[@NF"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    int_0 = -1766
    module_3.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    int_0 = 260
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    str_0 = "`bD._E."
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    float_0 = -1811.1713
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    bytes_0 = b"\xa2\x1fz[\xcc/\xdaC\xe0\xb7\xe2|,\xacn\x08\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    list_0 = []
    module_3.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    enum_dict_0 = module_1._EnumDict()
    module_0.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    float_0 = -1084.195
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    str_0 = "n]@\t/Xn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    str_0 = "."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    str_0 = "feer<sQ\n s`g`A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    str_0 = "RXo#a4.q!1Z)<"
    list_0 = [str_0, str_0, str_0]
    module_3.search(str_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    float_0 = 2024.68
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_3.purge()
    var_0.__setattr__(float_0, float_0, enum_dict_0)


def test_case_1322():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1323():
    base_exception_0 = module_4.BaseException()
    dict_0 = {base_exception_0: base_exception_0, base_exception_0: base_exception_0}
    module_0.get_new_command(base_exception_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    base_exception_0 = module_4.BaseException()
    module_0.get_new_command(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    str_0 = "O[(~\t_|(~;}g?TtK\x0cF "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    error_0 = module_2.Error()
    var_0 = module_3.purge()
    module_0.match(error_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    int_0 = 3691
    none_type_0 = None
    module_3.split(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    str_0 = "_%eM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    bytes_0 = b"\x96r\x07\xb9\xcbU\x06"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    int_0 = 4146
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    float_0 = 3058.05
    module_3.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    str_0 = "(,49H.N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    var_0 = module_3.purge()
    module_1.auto(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    error_0 = module_2.Error()
    none_type_0 = None
    module_0.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    bool_0 = False
    module_3.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    bool_0 = True
    module_3.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    bytes_0 = b"\xb5K\x06Z\x8a\x9ddG\xe7\xc2\x87"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__call__(bytes_0, set_0, module=none_type_0, start=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    error_0 = module_2.Error()
    tuple_0 = (error_0,)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1343():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    int_0 = 4577
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    str_0 = "c_;"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    error_0 = module_2.Error(*tuple_0)
    none_type_0 = None
    module_3.findall(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    int_0 = 259
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    float_0 = -1225.949704
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    bytes_0 = b'\x883n"vQ\xd0\xd3i\xc4:\x8cP\xd3d\x88U\x04'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "\\eo"
    str_1 = "3DLRWW\x0ckKuV0Za9P0"
    str_2 = "L\x0csTXEG\t"
    dict_0 = {str_0: list_0, str_1: list_0, str_2: str_2}
    module_1.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    set_0 = set()
    module_3.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    complex_0 = -1412.219013 - 1010.256558j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    bytes_0 = b"\xba\xc1u_\xd3?\x86\xd3L-\xe9C\x92@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    int_0 = -5246
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bytes_0 = b"\xe3"
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bytes_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    int_0 = -1469
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    str_0 = "DbqXI>B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    int_0 = -502
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    int_0 = 1040
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    none_type_0 = None
    str_0 = "jF\nneZu,L~K.sc"
    var_0 = module_3.template(str_0)
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    str_0 = "W<kk|UX=;~s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    regex_flag_0 = module_3.RegexFlag.UNICODE
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    bytes_0 = b"\xd14\x07\x0cd46\xdck\xfdq\xd1s@l9\xc2"
    module_3.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    bool_0 = True
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    object_0 = module_4.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    bytes_0 = b"\xefg\xe9~ND\xab;\xa4\xe2\xff\x92\x80Lu\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1373():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1374():
    tuple_0 = ()
    module_3.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    error_0 = module_3.error(list_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    bytes_0 = b"P\x05\xf4"
    var_0 = module_3.template(bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    dict_0 = {}
    none_type_0 = None
    module_3.compile(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    set_0 = set()
    module_3.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    str_0 = "H^\nl#_rsq!>QqO_"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    bool_0 = True
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    complex_0 = -2576.96 + 567j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    bytes_0 = b"\xd0\xa4\x01\x19c\xa9I"
    module_3.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    bytes_0 = b"\xbe+\x81\xb6~\xaf\xe4\xb7\xcb}\xe3\xf2\\5K\x06\xf7\xdf\x1f\x93"
    module_3.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    str_0 = '"eB^'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    bool_0 = False
    none_type_0 = None
    module_3.subn(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    int_0 = 390
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    bool_0 = True
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    var_0 = module_3.purge()
    bool_0 = False
    list_0 = [var_0, var_0, var_0, bool_0]
    module_0.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    bytes_0 = b'\x04,)\xdc\xc3Q\x06\r\x9b\x12l\xf3\xff"ck\xbdL'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    int_0 = 1087
    module_3.Pattern(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    float_0 = -1441.31466
    module_3.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    str_0 = "4);XmUU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    complex_0 = -1484 - 2544.77j
    module_3.split(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    int_0 = 0
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    bytes_0 = b"\x0e\xa5\xcfuK\x05"
    bool_0 = True
    list_0 = [bytes_0, bool_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    float_0 = 1796.97
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    int_0 = 1473
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    str_0 = "TLA%R>~?e8\nw\x0b8l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    str_0 = "(}"
    module_3.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    int_0 = 662
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    bytes_0 = b"\x80\xbaR}\xa4\xf9P(\xd6\xb4\xcf\x7f\xb1\xd7"
    module_3.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    str_0 = "*H2i(vMo/$*bQ4"
    module_3.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    float_0 = -3638.07
    module_3.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    int_0 = -654
    module_3.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    bytes_0 = b"Z\xc5n\x1b\x86%z\xd0{\xbb\x1d\x93ka\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    str_0 = ')?I"S/*~[pe/bjpfpZZ'
    module_3.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    auto_0 = module_1.auto()
    module_3.template(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    float_0 = -2488.0
    bytes_0 = b"C\xe4\x91\xcd\xefVU\\g\xb8\x9e\xd4\xcf\xa2\x04\xf2"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    var_0 = module_3.purge()
    module_3.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    var_0 = module_3.purge()
    list_0 = [var_0, var_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    int_0 = -1333
    set_0 = {int_0, int_0, int_0}
    module_3.search(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    float_0 = -422.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    str_0 = "2#S(9q,_T1\n"
    none_type_0 = None
    module_3.split(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    str_0 = "I^E5rjeg.ozT2"
    none_type_0 = None
    module_3.search(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    bool_0 = True
    module_3.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_3.search(none_type_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    regex_flag_0 = module_3.RegexFlag.DOTALL
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    str_0 = " Og\t*9i@"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: bool_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    complex_0 = 675.56 - 1634j
    module_3.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    set_0 = set()
    module_3.fullmatch(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    int_0 = -989
    complex_0 = -611 - 615.842j
    list_0 = [int_0, int_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    bool_0 = False
    module_3.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_3.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    float_0 = 1965.9
    module_3.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1448():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    complex_0 = 793.324666 + 622.1876j
    module_3.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    complex_0 = -871.3 - 1448.1031j
    module_3.subn(complex_0, complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    bool_0 = True
    module_3.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    str_0 = "Bg8?>L+3de:%`H@nfl\\"
    none_type_0 = None
    module_3.sub(str_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    var_0 = module_3.purge()
    module_1.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    set_0 = set()
    none_type_0 = None
    module_3.findall(none_type_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    set_0 = set()
    bool_0 = True
    list_0 = [set_0, set_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    int_0 = 2908
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    float_0 = 1407.888
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1463():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    bool_0 = True
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    str_0 = 'jmf7vFUIr:f\rPXW"f5tw'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    float_0 = 2853.91
    none_type_0 = None
    module_3.split(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    int_0 = -761
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "#bu"
    tuple_0 = (list_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    str_0 = "@'8'2j\x0cY"
    list_0 = [str_0]
    list_1 = [list_0, list_0, str_0]
    exception_0 = module_4.Exception(*list_1)
    module_0.match(exception_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    set_0 = set()
    module_3.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    str_0 = "[~ C}YkvT"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    bytes_0 = b"\x82\x8c\xe6\xc9[f\xa3\xd2\xdb\xa4\xcd\xd7\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    bytes_0 = b"J"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    bytes_0 = b"L\xd3\xef/*i'\xc6\xedD\x18\xb2\x86\xc0\x9d\x1b\xf7\xa0"
    var_0 = module_3.findall(bytes_0, bytes_0)
    module_3.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bytes_0 = b"s\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    float_0 = -277.918017
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    int_0 = -3181
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    var_0 = module_3.purge()
    module_3.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    bytes_0 = b"\xe2\x82&w@\\\x99"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    int_0 = 1858
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    int_0 = -1210
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    int_0 = 2724
    module_3.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1489():
    str_0 = "bOir"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    str_0 = "L}[u3[e:;[cy%B2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    bytes_0 = b"\xfb\x84w\xcd\x12\xa3\x8ac\xef"
    none_type_0 = None
    module_3.finditer(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1493():
    float_0 = -4207.892
    set_0 = {float_0}
    int_0 = 79
    list_0 = [set_0, int_0]
    exception_0 = module_4.Exception(*list_0)
    module_0.get_new_command(exception_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    int_0 = 909
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    bool_0 = False
    set_0 = {bool_0}
    module_3.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    bytes_0 = b"\xa3\xa2+\\m|\xbf\xb0e\xbe\xaf\x7f\xf5"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    str_0 = "x\x0caqRuI?"
    module_3.subn(str_0, str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    bytes_0 = b"\xd1\xed\x11\x1f[\xc4I\x19\xae[f\x8d\x9f"
    module_3.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_1500():
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    regex_flag_0 = module_3.RegexFlag.DEBUG
    module_3.fullmatch(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    complex_0 = 1775.27309 - 2947.653j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    str_0 = "#"
    module_3.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    str_0 = " vOy%P"
    module_3.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    none_type_0 = None
    module_3.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    var_0 = module_3.purge()
    list_0 = []
    list_1 = [list_0, list_0]
    error_0 = module_3.error(list_1)
    none_type_0 = None
    float_0 = -97.528137
    module_3.subn(float_0, error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_3.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    tuple_0 = ()
    module_3.split(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    str_0 = "Z,/"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    var_0 = module_3.purge()
    str_0 = "HTDemj\r8WB8\n"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    complex_0 = 839.236 - 1944.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    bytes_0 = b'\xb7\xeb\x0e"=\x050\x97\x9d\n'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    set_0 = set()
    module_3.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    str_0 = "0f*z@,"
    var_0 = module_3.sub(str_0, str_0, str_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    str_0 = "\x0c&Ym5O/d<"
    error_0 = module_3.error(str_0, pos=str_0)
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    var_0 = module_3.purge()
    module_3.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    base_exception_0 = module_4.BaseException()
    module_3.findall(base_exception_0, base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    int_0 = -2635
    var_0 = module_3.purge()
    var_0.__setattr__(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    bytes_0 = b"\x82\x01=\xcd"
    dict_0 = {}
    module_0.match(bytes_0, dict_0)


def test_case_1522():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1523():
    int_0 = 956
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    int_0 = 1476
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    bytes_0 = b"\x88S\xe4\xc4\xb7\xf0l"
    var_0 = module_3.template(bytes_0)
    dict_0 = {var_0: var_0, bytes_0: var_0}
    module_0.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    str_0 = "$S}s!hu1(g\x0b.p),r"
    var_0 = module_3.compile(str_0)
    error_0 = module_3.error(var_0)
    module_0.match(error_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    int_0 = 841
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    bool_0 = False
    module_3.sub(bool_0, bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1530():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    int_0 = 3108
    none_type_0 = None
    module_3.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    float_0 = -2871.11
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    bool_0 = True
    module_3.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    int_0 = -5410
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bool_0 = False
    none_type_0 = None
    module_3.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1537():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    var_0 = module_3.purge()
    module_3.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    float_0 = -737.0
    none_type_0 = None
    module_3.findall(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    float_0 = -2520.949
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    str_0 = "(q]W"
    module_3.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1549():
    bytes_0 = b"\xd8l_\xa2\x16\xacc\x87\x83\xcb\x96\xd2c\x9a\x136"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    tuple_0 = ()
    module_3.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    str_0 = "_O%((LMmHkgu*n"
    bytes_0 = b"\xbb\x93\xef\x7fs%oV\x9b\x9a\x9d\xb2\xf1\xc2\xefL\xd1\xe5"
    tuple_0 = (str_0, bytes_0)
    bool_0 = False
    set_0 = {tuple_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_1554():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1555():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_1}
    none_type_0 = None
    module_3.fullmatch(dict_0, none_type_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    bytes_0 = b"{\xbde\x8ey\xd1[\x04\n\x831\xa0\xff\xd3XTb\xb4\xd2"
    module_3.sub(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    str_0 = "k\r]6&dT1Ww{"
    var_0 = module_3.compile(str_0)
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    int_0 = -416
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    float_0 = 2743.767
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    float_0 = -2877.930286
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    complex_0 = -605.243174 + 907.07j
    module_3.subn(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    int_0 = -901
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    bytes_0 = b"M\x87\x12\xd0|GZ\x02\x88F"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1567():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_3.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    str_0 = "}U"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    str_0 = "KS@Ov!y%zJ2KpCcHJQ"
    dict_0 = {str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    int_0 = -2142
    var_0 = module_3.purge()
    module_0.get_new_command(int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_3.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    int_0 = 4104
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    int_0 = -995
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    str_0 = "W'8w7~b68@xx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bytes_0 = b"\xf6\xe3\xda\x99\x04\x96\xd5\x1d\xb4(\xc7\x81+\x04\xbaH"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1579():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    str_0 = "lR!A`Tspd"
    bytes_0 = b"u\x1f\x91\xe1"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    var_0 = module_3.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    bytes_0 = b"[\x1c\xdf\xb1\x83\x18\xca"
    none_type_0 = None
    module_3.fullmatch(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    bytes_0 = b"m\xc3^\x9f\x1f1\xbd\xe0\xfbk\xb9"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bytes_0 = b"%Q\xd1Xz\xccw"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    str_0 = "\rjDP1qe[(kOaA})'?"
    module_3.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    set_0 = set()
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    str_0 = "\r@|Hm=T|DRd[R`OG\x0c"
    str_1 = 'C+H"w$#(zbd+gc.\x0c4\\'
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    exception_0 = module_4.Exception()
    bytes_0 = b"\xbaR\xf1\xa1\x98\xb6\xc1\xd0\x0eP\xbf\xc4\xb3_X\xf3;\x84\x83\xaa"
    var_0 = module_3.template(bytes_0)
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    bytes_0 = b"\xb5'c\xb1|)4H\xd5`\xc0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    regex_flag_0 = module_3.RegexFlag.DEBUG
    module_3.finditer(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    str_0 = "/lv^qVQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    float_0 = 2728.417967
    var_0 = module_3.purge()
    var_0.__repr__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    bool_0 = True
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    str_0 = "[f]Zjs?Op*\x0c:=VwYa"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    str_0 = "zvf"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    str_0 = "|EZc23;\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    float_0 = 2305.72
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    bytes_0 = b"\x0c\xf1"
    var_0 = module_3.compile(bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    str_0 = "aUzZ(^o_hpT5#X:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    tuple_0 = ()
    error_0 = module_3.error(tuple_0, tuple_0)
    var_0 = module_3.purge()
    var_0.__setattr__(error_0, error_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    bytes_0 = b"\xe3\xf5\xe0\x0f\x14\xb3\xdd\xe1\xa7\xf9\xef\xe5\x1c\x97\x0fw\x0fi\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    complex_0 = 672 + 455.590916j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    str_0 = "M-Y\\3*+anxPMc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    bytes_0 = b"\xd0t\xfd)%W\xfc(\x86\x8d\xb9\xa4\xce\x9a\xa4\xc5"
    module_3.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    list_0 = []
    bool_0 = False
    module_3.match(bool_0, bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    var_0 = module_3.purge()
    module_3.escape(var_0)


def test_case_1618():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1619():
    bytes_0 = b"#\x83\x9aO_qX"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    str_0 = ":/arw_Wm{!njtn+GF\t"
    set_0 = {str_0, str_0}
    module_3.compile(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    int_0 = -19
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    int_0 = -548
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    int_0 = -864
    module_0.match(int_0, int_0)


def test_case_1624():
    var_0 = module_3.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1626():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1627():
    int_0 = -452
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    list_0 = []
    error_0 = module_2.Error(*list_0)
    module_0.match(list_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    int_0 = -1130
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    str_0 = "1<zCwK0\tC22e7'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    bytes_0 = b"t\x11^\xd2[\xeb\x8a\xdd\x80\xd7l\xdf(\xa3\xe9\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    complex_0 = 1585.6102 - 838j
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: complex_0}
    none_type_0 = None
    module_3.subn(complex_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    complex_0 = 1889 + 277.863553j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_3.match(list_0, list_0, list_0)


def test_case_1636():
    dict_0 = {}
    str_0 = ";d'A _j"
    var_0 = module_3.match(str_0, str_0)
    with pytest.raises(TypeError):
        var_0.__new__(dict_0, dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    complex_0 = -2416.08511 - 1981.7767j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    bool_0 = False
    int_0 = -752
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    auto_0 = module_1.auto()
    module_3.split(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    bytes_0 = b"\xc4\xde\xd7\x1f\xe3\xe6"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    int_0 = 243
    module_3.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_3.split(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    float_0 = 490.14304
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    bytes_0 = b"\xb1\x02\xec\xbd+\xf8\xf0q"
    none_type_0 = None
    module_3.split(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    int_0 = -728
    module_3.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    list_0 = [exception_0, dict_0, dict_0, exception_0]
    module_0.match(exception_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [bool_0, bool_0]
    module_3.fullmatch(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    str_0 = "Q"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    int_0 = -3059
    module_3.Scanner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    str_0 = "q15g]1zY.g1`hcj*"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    var_0 = module_3.purge()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    none_type_0 = None
    float_0 = -153.40653
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    complex_0 = -3848.05 - 6368.22157j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    float_0 = -1283.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    int_0 = 1878
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    str_0 = "*FV8`\nln(E)U[v&<LtE+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1665():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    bool_0 = False
    module_3.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    str_0 = "dQ52a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    bytes_0 = b"\x87\xe9\xd9\xd7s\xe4\x08\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    int_0 = 885
    none_type_0 = None
    module_3.match(int_0, none_type_0)


def test_case_1670():
    enum_dict_0 = module_1._EnumDict()
    exception_0 = module_4.Exception()


@pytest.mark.xfail(strict=True)
def test_case_1671():
    float_0 = -986.5
    none_type_0 = None
    module_3.match(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    str_0 = "slc{5D?\r4J#9"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    bytes_0 = b"\x0c\xc2\xd3lX\xfc\x82\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    set_0 = set()
    module_3.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    none_type_0 = None
    int_0 = 841
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    bytes_0 = b"\x8eh\xc3A\xbc.\x1d8\xb9@\xe6k"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    str_0 = ""
    var_0 = module_3.finditer(str_0, str_0)
    var_1 = var_0.__dir__()
    module_0.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    var_0 = module_3.purge()
    set_0 = {var_0, var_0, var_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    int_0 = -2307
    complex_0 = 2750.8 + 1848.093j
    module_0.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    bytes_0 = b"\x87\x0b x\x8c\xcb\xb4C"
    var_0 = module_3.search(bytes_0, bytes_0)
    module_3.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    bytes_0 = b"\xe6VU\x88\xd0\x9a\x7f\xbb\x02Z\xb8\xec\x94\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    bytes_0 = b"O\xcd\xa7{\xc6\xb8}>}O\xcc\x84\x83\x04\xa4\x84:"
    none_type_0 = None
    module_3.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    bytes_0 = b"P\xef\xed\xffn\xc2\x95N\xc9\xf0\x87H\xc7 \xff\x15e\xa6\x1f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    str_0 = "c_A\x0bi8igc3"
    set_0 = {str_0, str_0}
    module_3.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    none_type_0 = None
    int_0 = -336
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    none_type_0 = None
    module_1.auto(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    int_0 = 529
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    complex_0 = -1951.63513 - 3902.154688j
    module_3.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    none_type_0 = None
    str_0 = "\\]"
    var_0 = module_3.compile(str_0)
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    none_type_0 = None
    str_0 = "mO/Jd\\L"
    str_1 = "6Zi**v:~%aAz2LmT"
    dict_0 = {str_0: str_0, str_1: none_type_0, str_1: str_1}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1699():
    bytes_0 = b"QHA<\xf0[\xfd"
    set_0 = {bytes_0, bytes_0}
    module_3.finditer(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    str_0 = "\taBJRgsnxfk=e"
    none_type_0 = None
    module_3.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bytes_0 = b"\x8a\xa5\xea-\xc2\x87\x91\xb6\xb2\xb2q\xc1\t\x89r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    bytes_0 = b"\xb1\xce\xf3\x02\xec\x82\x06\x87W\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    var_0 = module_3.purge()
    tuple_0 = ()
    module_3.finditer(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    float_0 = -290.4875
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    str_0 = "mVP'"
    dict_0 = {str_0: str_0}
    module_3.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    float_0 = 876.487
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    int_0 = 1653
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bytes_0 = b"l[\nh"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    int_0 = 2044
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_3.split(dict_0, tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    int_0 = -1414
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    int_0 = 1625
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    str_0 = "z6q]|\\\x0cExcC-"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    list_0 = []
    dict_0 = {}
    error_0 = module_2.Error(*list_0, **dict_0)
    module_0.match(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    module_0.match(exception_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    float_0 = -1383.72243
    module_3.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    bytes_0 = b"\x18k"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    int_0 = -2741
    float_0 = -152.8595
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    int_0 = -1794
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    none_type_0 = None
    int_0 = -121
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    list_0 = []
    module_1.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    bytes_0 = b"\x95\x91\x98\x06\xc7\xd9\x90\xa7\xafy"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    complex_0 = -1036 - 444.921945j
    module_3.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    bytes_0 = b"\x11\x92Ik\xc5\xe0\x18\x95\\\xc1f\xcb\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    str_0 = "-q-<V(OBaS/s"
    str_1 = "*x;<>TXj.GH;>[|~7"
    str_2 = "o2-SfcJ<P&>b("
    str_3 = 'sfG"|,\x0b\\'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_3: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    str_0 = ">>hH='(B`<F"
    list_0 = [str_0, str_0]
    list_1 = [list_0]
    module_3.search(list_1, str_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bytes_0 = b"d\x96d\xa95#\xf1k\x1a\x07\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    int_0 = 4005
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    int_0 = 1943
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    str_0 = "X](iX<t9RE=Y$Rg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    bool_0 = True
    var_0 = module_3.purge()
    list_0 = [var_0, bool_0]
    module_3.finditer(var_0, list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    int_0 = -616
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    bytes_0 = b"0\xcf\xe2l$v7\xf5\xf6\xe3\xd9\xe4\xd71\x97\xbbt"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    float_0 = 232.47
    list_0 = []
    var_0 = module_3.purge()
    var_0.__getitem__(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    str_0 = "mM?.j2[M1> D2:n\t"
    dict_0 = {str_0: str_0}
    module_3.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    str_0 = "mXwM=n> JN29[r):L7{p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    str_0 = 'JOOp/\n&b".Lat4'
    str_1 = "7\ts=g*)8"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    str_0 = "238vT5W>oGi-93f~Od"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    str_0 = "3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    complex_0 = -2527.414 + 317j
    none_type_0 = None
    module_3.sub(complex_0, complex_0, complex_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    list_0 = []
    module_3.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bool_0 = True
    none_type_0 = None
    module_3.subn(bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    str_0 = "iN[\x0cXGj?mx"
    module_3.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    int_0 = -2545
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    float_0 = 1606.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    str_0 = "Ri&s4:s1]1\x0b"
    module_3.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1761():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    none_type_0 = None
    str_0 = "D"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    str_0 = "dV^_c+MCM]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    bytes_0 = b"\xfe<\x83d\xa5\xf0t\xf0A\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    int_0 = 1141
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    int_0 = -267
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    var_0 = module_3.purge()
    module_3.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    var_0 = module_3.purge()
    module_3.subn(var_0, var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    str_0 = "{FH%P\\1aRW9\\*Y;4@#"
    bool_0 = False
    str_1 = "$B\t"
    dict_0 = {str_0: str_0, str_0: bool_0, str_1: str_0, str_1: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    int_0 = -792
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    dict_0 = {}
    var_0 = module_3.purge()
    var_0.__reversed__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    int_0 = 4384
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    var_0 = module_3.purge()
    module_3.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    str_0 = "_}?&FEVjZl39M\t[2n%s"
    none_type_0 = None
    module_3.match(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    bytes_0 = b"\x89"
    none_type_0 = None
    module_3.fullmatch(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    bool_0 = False
    module_3.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    auto_0 = module_1.auto()
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    str_0 = ""
    var_0 = module_3.compile(str_0)
    module_0.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    float_0 = 360.0
    module_3.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    int_0 = -4533
    module_3.Scanner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1786():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    module_1.EnumMeta()


def test_case_1789():
    none_type_0 = None
    var_0 = module_3.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    int_0 = -251
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    int_0 = 1373
    module_3.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    str_0 = ">q@7ICacK*^vdw*:2*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, none_type_0)
    bytes_0 = b"1_\x00\x07c\xf0*\xfd\xee\xa9\xef&7\xb2@\xd0\t"
    module_3.sub(error_0, bytes_0, none_type_0, flags=error_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    float_0 = -1352.2
    module_4.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    tuple_0 = ()
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    str_0 = ">X) ']^Ll!'J"
    var_0 = module_3.escape(str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    bool_0 = False
    none_type_0 = None
    module_3.compile(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    complex_0 = 1852.97551 - 790.095j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    bytes_0 = b"\xd9\xa9\x9a\x17\t"
    var_0 = module_3.compile(bytes_0)
    var_0.__iter__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    var_0 = module_3.purge()
    list_0 = []
    module_1.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    regex_flag_0 = module_3.RegexFlag.LOCALE
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    int_0 = -408
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    enum_dict_0 = module_1._EnumDict()
    module_3.sub(enum_dict_0, enum_dict_0, enum_dict_0, flags=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bytes_0 = b"\xcbA3\xc4Q%\t\t\xaa\xa5\xe2W"
    var_0 = module_3.sub(bytes_0, bytes_0, bytes_0)
    bytes_1 = b"\x990\xeff\xb8w\xbf\x8f"
    module_3.subn(var_0, bytes_0, bytes_0, var_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    complex_0 = 191.3 - 1966.62709j
    bool_0 = True
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    dict_0 = {}
    module_3.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    int_0 = 1608
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    float_0 = 714.808
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    int_0 = 3058
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    complex_0 = 1086.73541 - 268.80015j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    tuple_0 = ()
    module_3.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    bytes_0 = b"\x9b\xc9AL"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    str_0 = "JPh`htEf*k}`^"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    bool_0 = True
    str_0 = "85 s0axRg%"
    module_3.compile(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    bytes_0 = b"\x01\x87\xaceJ\xf4M\x1c5S)"
    module_3.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    int_0 = -1665
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_3.subn(bool_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    bytes_0 = b"\xae<; \xef<\x9a^\xcc"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    regex_flag_0 = module_3.RegexFlag.UNICODE
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    int_0 = -1881
    module_3.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    int_0 = -36
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0]
    module_3.search(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    none_type_0 = None
    bool_0 = False
    module_3.subn(none_type_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    bytes_0 = b"Y\xdc\xb8jd\xb0qQ\xc1G#\x1b\x12\xa9\xd5"
    none_type_0 = None
    module_3.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    float_0 = 2328.538
    set_0 = {float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    str_0 = '=7-"s%!#\\Hz?n\r'
    str_1 = " j}B)xvKa"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    dict_0 = {}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    str_0 = "Sk;rJuSK\x0b\\) "
    str_1 = "/\ro7R\tC'0;\n"
    str_2 = "$?~@L\r5f+@?D\tc"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_1: str_1}
    module_4.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    str_0 = "(mP&|{0\na:YQ,2-"
    list_0 = [str_0, str_0, str_0]
    module_4.Exception(*list_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    str_0 = "34"
    str_1 = "JHsZ|gL21=sn#FJg[_"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    none_type_0 = None
    module_3.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    dict_0 = {}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    int_0 = 615
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    none_type_0 = None
    module_1.EnumMeta(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    str_0 = "~2\x0bC@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    list_0 = []
    bytes_0 = b"\xbdk)9\xa0\x9b\x19D\x1d\x82"
    var_0 = module_3.escape(bytes_0)
    var_0.__len__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    bool_0 = True
    module_3.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    var_0.__contains__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    int_0 = 2624
    module_3.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    bool_0 = True
    none_type_0 = None
    module_3.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    str_0 = "d/"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    dict_0 = {}
    module_3.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    bytes_0 = b"m\x14Vt\x83\xee\x97\xb1\xd7\xb7\xc4\xc7O\xd0Q\xf5\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    int_0 = 1101
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    int_0 = 3804
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1864():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    none_type_0 = None
    bytes_0 = b"\xee\xb0\xcc,\xf3\x84`\xea\xcc"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    int_0 = -13
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    bytes_0 = b"a"
    var_0 = module_3.finditer(bytes_0, bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    int_0 = -1343
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    str_0 = "2)~@%.g9n"
    module_3.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    bytes_0 = b"zT\xbf=,\x9e\xeb\xe4I\x83\xab3\xba\x1d\xaeZ\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    float_0 = -234.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    str_0 = '6h==IJ"fBDUENzr'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    dict_0 = {}
    module_3.subn(dict_0, dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    str_0 = 'O[?3khoQg\\we --,"e,'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    int_0 = 1282
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    str_0 = "\\LjDdd0D/m=i\rwQ~B"
    module_3.sub(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    int_0 = 203
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    float_0 = -1540.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    int_0 = 494
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    float_0 = -335.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    complex_0 = -2659.985 + 477.25j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    bytes_0 = b"\xc5\xf7AnL7\x97\x17\xf2#P||6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    set_0 = set()
    list_0 = [set_0]
    module_3.sub(list_0, list_0, list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    str_0 = "h\x0c}%l`v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    int_0 = -1155
    module_3.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    int_0 = 2922
    dict_0 = {int_0: int_0, int_0: int_0}
    dict_1 = {}
    exception_0 = module_4.Exception(**dict_1)
    module_0.get_new_command(dict_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    enum_dict_0 = module_1._EnumDict()
    list_0 = [enum_dict_0, enum_dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    int_0 = -1252
    int_1 = -271
    list_0 = [int_0, int_0, int_1, int_1]
    module_3.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_0.get_new_command(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    int_0 = 974
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = []
    tuple_0 = (list_0,)
    tuple_1 = (int_0, dict_0, tuple_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    float_0 = 3560.5371
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    int_0 = 1432
    none_type_0 = None
    module_3.template(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_4.Exception(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    bytes_0 = b"u\x8bX\xa0s\xaf\x035h\x85\xef["
    module_3.finditer(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    float_0 = -2130.17
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    regex_flag_0 = module_3.RegexFlag.VERBOSE
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    int_0 = -2074
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    bool_0 = False
    module_1.EnumMeta(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_1911():
    enum_dict_0 = module_1._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_1912():
    int_0 = 1098
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    bool_0 = False
    list_0 = [bool_0]
    error_0 = module_2.Error(*list_0)
    module_0.match(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    int_0 = 1356
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    int_0 = 1639
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    str_0 = "sx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    tuple_0 = ()
    module_3.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    str_0 = "qe<VZ[y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    str_0 = "Th;\rQ|Y,-xD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    complex_0 = -759.276219 - 372.4446j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    str_0 = "QC&^1*hqB?%Z(yUb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    str_0 = "qUXkB>l#c"
    none_type_0 = None
    module_3.split(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    var_0 = module_3.purge()
    module_3.match(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    float_0 = -2875.15337
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    float_0 = 447.5384
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    var_0 = module_3.purge()
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    int_0 = 1687
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    str_0 = "f\tA9'Z'[R`x3|t%;r"
    auto_0 = module_1.auto()
    module_0.match(str_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    float_0 = 4062.1972
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    complex_0 = -1976.329 + 1645.5806j
    module_3.finditer(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    bytes_0 = b"\xecw"
    bool_0 = False
    module_3.sub(bytes_0, bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    bytes_0 = b"\xbf\xb6u\\ "
    list_0 = [bytes_0]
    base_exception_0 = module_4.BaseException(*list_0)
    module_0.get_new_command(base_exception_0, bytes_0)


def test_case_1937():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1938():
    bool_0 = True
    enum_dict_0 = module_1._EnumDict()
    enum_dict_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    float_0 = 2969.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    list_0 = []
    none_type_0 = None
    module_3.sub(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    int_0 = 3704
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    bytes_0 = b"\xa6\x12}\xc8\xe7\x9f}<\x98\xbd"
    var_0 = module_3.template(bytes_0)
    module_4.BaseException(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_3.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    bytes_0 = b"\xfb\xf6\x88\x91\x82\xc2\xa2f\x06\x84\x92\xeax"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    float_0 = -518.35
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    int_0 = 1723
    module_3.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    bytes_0 = b"3\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    int_0 = 3379
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    str_0 = "^>t<W\nL%AVdB~pCht"
    str_1 = "X,t4|'TtvGu!X\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    int_0 = 1048
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    none_type_0 = None
    bool_0 = True
    module_3.subn(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    bytes_0 = b"\xcc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    str_0 = "PX|@Dgb>1n9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    var_0 = module_3.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_3.compile(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    str_0 = "_|{\\8NYSL0\t"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bool_0 = False
    var_0 = module_3.purge()
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    bool_0 = False
    module_3.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    bytes_0 = b"\x18\x8a\xf1\xf7\x02)\xaf\xec\xf5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    int_0 = 2226
    module_3.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    bool_0 = True
    none_type_0 = None
    module_3.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    float_0 = 1410.3623
    module_3.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    int_0 = -1579
    module_3.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    complex_0 = 3953.861 - 123.2408j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    int_0 = -2430
    module_3.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    int_0 = 1595
    module_3.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    str_0 = "W_PZ"
    var_0 = module_3.subn(str_0, str_0, str_0)
    none_type_0 = None
    bytes_0 = b"\xa0\x13H"
    var_1 = module_3.match(bytes_0, bytes_0)
    var_1.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    bool_0 = True
    none_type_0 = None
    module_3.search(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    float_0 = -529.39
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    var_0 = module_3.purge()
    int_0 = 499
    module_3.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    bytes_0 = b"\x05\x8e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_3.match(enum_dict_0, enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    str_0 = "|l~SUS0R[4rf6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    bytes_0 = b"\x1d\xa0C\xc3&j\x13\xfa\x0fj\x82"
    none_type_0 = None
    module_3.subn(bytes_0, none_type_0, bytes_0)


def test_case_1980():
    str_0 = "HO({ih|cXp>\n"
    bytes_0 = b"Wf\x04\xe7\x0c\x9e\x8e\xe2]\x0cG\xe6\x86\x92\x8c"
    var_0 = module_3.search(bytes_0, bytes_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    bool_0 = False
    module_3.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    str_0 = ""
    str_1 = "a="
    dict_0 = {str_0: str_0, str_1: str_1}
    module_3.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_3.findall(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    str_0 = "?Dc%:I4"
    module_3.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    int_0 = -1829
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, int_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    bool_0 = True
    error_0 = module_2.Error()
    module_0.match(bool_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    bytes_0 = b"\x7f%%\x06f\x98\r\x06\xe8\xf8@Zd\x02\xc6k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    str_0 = "$xfpi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    int_0 = -161
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    str_0 = "[@eq''^\n_]\x0b\"2I@3X893"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    var_0 = module_3.purge()
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    bool_0 = False
    var_0 = module_3.purge()
    var_0.__contains__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    int_0 = 636
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    float_0 = -286.43
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    tuple_0 = ()
    module_3.fullmatch(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    int_0 = 5006
    int_1 = -870
    str_0 = "oO\rsrme\\&`X\rh+)uQ"
    module_3.sub(int_0, int_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    int_0 = -5778
    set_0 = {int_0, int_0, int_0, int_0}
    dict_0 = {int_0: int_0, int_0: set_0}
    module_3.split(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    bytes_0 = b"\x91p\xdd\x99\x05=\xde\xb2\xf7L\xf2\xc5\xb9x\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    bytes_0 = b"\x11\x07\xdd\xba\xcf\x0f\nn\x0e\x02\x9d>j\xbd}\r"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_3.finditer(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_3.Scanner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    str_0 = "z\\'e_|&9XnC=)&3#xcB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    int_0 = 2410
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    float_0 = -2848.96
    module_3.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    int_0 = 2264
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_3.sub(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    int_0 = 1772
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    bytes_0 = b"_\xc87\xcf\xe7P\x006\x8c\x12q<"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    int_0 = 1232
    int_1 = 1490
    list_0 = [int_0, int_0, int_1, int_0]
    module_3.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    complex_0 = 1472.11374 - 2158.1233j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    int_0 = 830
    set_0 = {int_0, int_0, int_0, int_0}
    module_3.sub(set_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    bytes_0 = b"\xbc8\\_\xabWV\xba\x859"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    none_type_0 = None
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    module_0.get_new_command(none_type_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    int_0 = -3105
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    var_0 = module_3.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    tuple_0 = (dict_0, var_0, var_0)
    module_3.fullmatch(tuple_0, tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    tuple_0 = ()
    module_3.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    var_0 = module_3.purge()
    float_0 = -2325.55
    module_0.match(var_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    str_0 = "IN"
    module_3.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    str_0 = "9z{v1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    bytes_0 = b"\x9f\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    float_0 = 4549.34762
    module_3.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    bytes_0 = b"4l\xf9\x98\xd9<\xb0!K\xdb\xa9(\x1f,!\xd1\xe1\xc3"
    var_0 = module_3.escape(bytes_0)
    var_1 = module_3.compile(var_0)
    var_2 = var_1.__dir__()
    module_0.match(var_2, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    complex_0 = 2659.58649 + 857.635644j
    var_0 = module_3.purge()
    var_0.__getitem__(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    bool_0 = True
    none_type_0 = None
    module_3.match(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    bytes_0 = b"R.`\xfd"
    var_0 = module_3.escape(bytes_0)
    bool_0 = True
    module_3.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    int_0 = 31
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    bool_0 = False
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    float_0 = -3990.0771
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bytes_0 = b"\x8c\x88r\x99:\x83m\xeeUsm\x83V\x1f\xed\x87\x9d&\x8bh"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    bool_0 = False
    none_type_0 = None
    module_3.sub(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    str_0 = "w`cCd`%JVOp)N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    int_0 = 233
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    int_0 = -1719
    none_type_0 = None
    module_3.match(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    bytes_0 = b"%\xd9T6E"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    bytes_0 = b"g:\xf3\xf8\xf0\xc8Q\xb1r\x17\xdc\x11\xf3\x90\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    str_0 = "@@OQ\x0bU%n~MId@P'L1"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    int_0 = 1826
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    str_0 = "n__*1wF"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    bytes_0 = b"*4F%"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    bytes_0 = b"\x1bV\x99\xe5\xa0\x12\x02\x00\xd2\x9e\xd9\xaf\xa6"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    complex_0 = -224.44585 + 1608.156212j
    none_type_0 = None
    module_3.search(complex_0, none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    str_0 = "\nLLPz7\rN8Z^1A;i3v#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    complex_0 = -2780.186 - 463.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    str_0 = "2>}\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    str_0 = "Ip\n|}<Rl=P|m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2066():
    str_0 = "B\\"
    dict_0 = {str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    bytes_0 = b"\t\x9b\xc5\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


def test_case_2069():
    set_0 = set()
    str_0 = "^!|"
    dict_0 = {str_0: set_0}
    var_0 = module_3.purge()
    with pytest.raises(TypeError):
        var_0.__new__(set_0, set_0, set_0, set_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    list_0 = []
    module_3.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    float_0 = 1038.47
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    bool_0 = True
    none_type_0 = None
    module_3.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    int_0 = -1385
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    int_0 = 3527
    none_type_0 = None
    module_3.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    complex_0 = 248 + 2813.8113j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    int_0 = -3179
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


def test_case_2079():
    pass


def test_case_2080():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2081():
    bool_0 = True
    module_3.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    str_0 = "G NX M\x0cY"
    bytes_0 = b"\t}>"
    var_0 = module_3.findall(bytes_0, bytes_0)
    var_0.__reversed__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    complex_0 = 2395.83 + 2901j
    module_3.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    int_0 = 442
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    int_0 = -2865
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    dict_0 = {}
    list_0 = [dict_0]
    module_3.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    float_0 = -2300.042
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    int_0 = -26
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    str_0 = "j:6=*\n"
    set_0 = {str_0}
    module_3.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    complex_0 = -969.8 - 1929.2811j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_3.search(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    bytes_0 = b"4\x86\xddt\xe5\x10\xbd\xed\xf7\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    auto_0 = module_1.auto()
    module_0.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    bytes_0 = b"]\x1b\x84\xe7\xd3)\xd0\xc0\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    bytes_0 = b"\xb5sM\xad\x13\xfa=R\xfc\xc1\x07b\xf9\xa2\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    auto_0 = module_1.auto()
    dict_0 = {auto_0: auto_0, auto_0: auto_0}
    module_0.get_new_command(dict_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    float_0 = -4123.1649
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    float_0 = 587.88
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    tuple_0 = ()
    module_3.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    bytes_0 = b"uV\x14h\xbc\xfa\xa1\xe2~"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    str_0 = "\"g;~%|C?'us<`}X):"
    list_0 = [str_0, str_0]
    str_1 = ",l=iS?p6G73_+R'|"
    module_0.get_new_command(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    bytes_0 = b"\x95\xa6\x0c\xfd\xc1\xec\xcd\x9eyY\xa9!7:L|\xc4\xb28\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    bytes_0 = b'\xc0rB\xcf3O\x9c"\x8c\xba{\xfd\x08m\x8a,_\xc1'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    int_0 = 2748
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    int_0 = -428
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    str_0 = ':03eDk\'"\rFd%.T")j'
    none_type_0 = None
    str_1 = '|\t"q]~#huhgv*Y2g~Cn8'
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    str_0 = ";>BRc5e]"
    list_0 = [str_0, str_0, str_0, str_0]
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    float_0 = -1678.6463
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    bytes_0 = b"\xd0\xe9\x9a:\xb7ZU\xea\xf6\x9c\xc6\xb32\xf1\xa1h\xd4\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    int_0 = -1009
    tuple_0 = (int_0,)
    none_type_0 = None
    module_3.sub(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    bytes_0 = b"?~\x8b\xd9\x8e\x91\xcc\xcc"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    int_0 = -1992
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    bool_0 = True
    module_3.split(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    int_0 = 1631
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    str_0 = "a6y|&g\n>Sh--"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    complex_0 = 203.5 - 2581.4744j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    none_type_0 = None
    bytes_0 = b"\x8f"
    module_3.split(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2133():
    none_type_0 = None
    module_4.Exception(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    str_0 = "|rZy7T-ddNowiEwjNG0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    none_type_0 = None
    int_0 = -1230
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    bytes_0 = b"G\x06\x8b\xe7\x7f\xa96\xd1"
    set_0 = {bytes_0, bytes_0}
    module_3.finditer(set_0, set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    complex_0 = -326.6526 + 3077.284j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    bytes_0 = b"\x93\xe4\xe0]\x98\xf1\x8c\x0c\xe0)\x15\xdc\xd2c>?\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.auto(*list_0)


def test_case_2141():
    str_0 = "9akCoKde\tvIs9_R&L"
    var_0 = module_3.finditer(str_0, str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    str_0 = "M]t[To\r)J=j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    bytes_0 = b"\x1a\x86m\xf0\xb7\xeeSB\x99\xc5/t:.N\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    module_1.EnumMeta()


def test_case_2146():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2147():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    tuple_0 = ()
    module_3.sub(tuple_0, tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    int_0 = -3436
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_3.subn(list_0, list_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    none_type_0 = None
    str_0 = "S-\t'&[ Pt\x0bXjjo|4k^y,"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    float_0 = 340.822305
    module_3.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    bool_0 = True
    none_type_0 = None
    module_3.sub(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    complex_0 = -1300.4844 + 1620.96289j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    complex_0 = 4642.6 - 720j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    str_0 = "t3)-S18mi+t&Y^^s"
    tuple_0 = (str_0,)
    module_3.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    complex_0 = 3136.2048 - 3673.202207j
    module_3.split(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    int_0 = 435
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    str_0 = "e#1/[#?x3m D-"
    list_0 = [str_0, str_0, str_0]
    module_1.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    str_0 = "\r$D6rBG,`wG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    float_0 = -1164.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    int_0 = -3490
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    var_0 = module_3.purge()
    var_0.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    bytes_0 = b"^X1\x12\x80~E\x83\xfe\xa4\x1bXn\x98\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    str_0 = "~--vomm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    complex_0 = -2283.65 + 947.017486j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    complex_0 = 2654.245 - 1628.92357j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    var_0 = module_3.purge()
    module_1.EnumMeta(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    str_0 = "g[QTtgl-|YbA\t'~d<{^|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    bool_0 = True
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    int_0 = -3927
    error_0 = module_3.error(int_0)
    module_2.Error(*error_0)


def test_case_2178():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2179():
    int_0 = 325
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    complex_0 = 1331.7245 + 1563.023j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    none_type_0 = None
    module_1.EnumMeta(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    str_0 = "w^rDP`?^>l*"
    var_0 = module_3.subn(str_0, str_0, str_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_3.findall(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    none_type_0 = None
    module_3.template(none_type_0)


def test_case_2186():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2187():
    str_0 = "%=91N?S;(VWB#aFO/d|("
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    bytes_0 = b"e\x1b4%\xa1\xb1\xe0\xd4m\x9c\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    list_0 = []
    none_type_0 = None
    module_3.fullmatch(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    list_0 = []
    tuple_0 = (list_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    bytes_0 = b"W\x86\xdb;\x8b-"
    set_0 = {bytes_0}
    module_3.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    dict_0 = {}
    module_1.EnumMeta(**dict_0)


def test_case_2194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2195():
    bool_0 = False
    module_3.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    list_0 = []
    module_2.Error(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    str_0 = "kB6{KFjRM\x0bHhvXg02\\fL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    set_0 = set()
    tuple_0 = (set_0,)
    list_0 = []
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    complex_0 = 53 + 2344.6012j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2203():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    bytes_0 = b"M\x10\xc0\x8dB\xce`\x93\x9e"
    bool_0 = False
    module_3.finditer(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    str_0 = ")s__|e"
    module_0.get_new_command(str_0, str_0)


def test_case_2206():
    var_0 = module_3.purge()


@pytest.mark.xfail(strict=True)
def test_case_2207():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    int_0 = 1768
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    bytes_0 = b"\x14\ty\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_3.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    int_0 = 1820
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, none_type_0)
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    int_0 = -1711
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2216():
    complex_0 = 1051.4 + 394.6035j
    module_3.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    float_0 = -499.325
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    str_0 = "pji|'[v]7CcqKNx"
    var_0 = module_3.template(str_0)
    set_0 = {var_0, str_0, var_0, var_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    none_type_0 = None
    str_0 = "f)i<<#3}O+2"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    int_0 = -1093
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    float_0 = -3071.1
    module_3.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    int_0 = 1027
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    str_0 = "1[/x~s$Z<"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    complex_0 = 5144.39472 + 196.854527j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    int_0 = 2006
    int_1 = 375
    list_0 = [int_0, int_0, int_1, int_1]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    str_0 = "-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    str_0 = "WTLp "
    module_3.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    int_0 = -1183
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    list_0 = []
    module_3.search(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    int_0 = -3423
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    bytes_0 = b"Y\xcb\xc0;\x91v%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    dict_0 = {}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    dict_0 = {}
    module_3.fullmatch(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    str_0 = "U(d{F;nk1`<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    str_0 = "PBuZ.g#A$3dv"
    module_3.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    bool_0 = False
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    bytes_0 = b"08\xa3\xa8\xe9{\xaa+\xe5\x00\x89\x9d="
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    int_0 = 2428
    module_3.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    tuple_0 = ()
    none_type_0 = None
    module_3.split(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    complex_0 = 2599.649 - 1927.959j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    list_0 = []
    module_1.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    bytes_0 = b"\xdd\xc2\xfd\xda\xa6\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    float_0 = -508.69
    module_3.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    int_0 = 886
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    bool_0 = True
    str_0 = ""
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    float_0 = -409.9759
    module_3.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    bytes_0 = b"M]H\x90\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    bool_0 = True
    none_type_0 = None
    module_3.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    bool_0 = True
    float_0 = 597.549
    var_0 = module_3.purge()
    var_0.__setattr__(bool_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    str_0 = "h@gX3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    none_type_0 = None
    complex_0 = -3848.433215 - 1605.372747j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    int_0 = -2253
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    str_0 = "BrU^{~rL;(r(Z8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    var_0 = module_3.purge()
    module_3.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    set_0 = set()
    module_3.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    float_0 = 2415.831
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    bool_0 = False
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    str_0 = "K"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0, var_0)
    var_1 = var_0.__bool__()
    module_3.split(tuple_0, var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    complex_0 = 2276.87 + 1939j
    module_3.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    bool_0 = True
    var_0 = module_3.purge()
    var_0.scan(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    dict_0 = {}
    module_3.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    float_0 = -3692.1
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    regex_flag_0 = module_3.RegexFlag.DEBUG
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, pos=none_type_0)
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    str_0 = " W`b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    bytes_0 = b',\x8f\xd9\xa7\x08\xefB\xae\x18"H\xa3b\x9d\xd8'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    float_0 = 1999.0
    module_3.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    bytes_0 = b"\xa3DR\xb1\xaf\xa1~\x80\x10A\x06\xf8\xf8^C\xe8(\xa5!"
    none_type_0 = None
    module_3.finditer(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    var_0 = module_3.purge()
    none_type_0 = None
    var_1 = module_3.purge()
    var_1.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    int_0 = -2623
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    bytes_0 = b"q\x19p"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    bytes_0 = b"d\x08am\xb2\x96\xef\x9a"
    module_3.subn(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    dict_0 = {}
    module_3.search(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    module_0.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    bytes_0 = b'\xd5Aj\xff\x97\xd3&\x9e"\x9e\x9e|\xc3\x89V\xe1\x84\x89,'
    var_0 = module_3.compile(bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    int_0 = -2415
    none_type_0 = None
    module_3.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    bytes_0 = b"M[)\xdf\xeb\xe4\x8d\x93\xdc@\x10\xf7w\\z\xcd\xe2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    str_0 = "vDsQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    var_0 = module_3.purge()
    list_0 = [var_0, var_0, var_0]
    tuple_0 = (var_0,)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    bytes_0 = b"\xcd\xba\xa6\x97\xad\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    str_0 = "^nl{"
    str_1 = "$3;`\x0bt/\r]n:"
    str_2 = "U\t"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    bytes_0 = b""
    module_3.split(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    int_0 = -3799
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    list_0 = []
    none_type_0 = None
    module_3.match(list_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    dict_0 = {}
    error_0 = module_2.Error(**dict_0)
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2314():
    str_0 = "2q18 W:A}"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    str_0 = "L0|3p5=8pO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    error_0 = module_2.Error()
    str_0 = "IQ5|hHX a[i5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    bytes_0 = b")L\x98\xd4\x92~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    int_0 = -1621
    none_type_0 = None
    module_3.findall(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    int_0 = -464
    error_0 = module_3.error(int_0)
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    bool_0 = True
    none_type_0 = None
    module_3.search(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    none_type_0 = None
    str_0 = "Uegpb#,a\tx@H'[>"
    module_3.subn(none_type_0, str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    int_0 = -1294
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_3.finditer(set_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_3.split(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    int_0 = -404
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    bytes_0 = b"y\x96\n\x8a\x07\xf9\xb3\xfb1\x88"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    bytes_0 = b"\xb0y\x8eP"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    complex_0 = -3269 - 2623.2j
    bool_0 = True
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    none_type_0 = None
    bytes_0 = b"X"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    bool_0 = True
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    int_0 = 593
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    bool_0 = True
    float_0 = -677.969
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    bytes_0 = b"$e\xac\xbdz\xd3}\x7f\xdb\xbdn%\xb4"
    str_0 = '.#}]"/a:8M6q'
    var_0 = module_3.split(str_0, str_0)
    var_0.__iter__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    int_0 = 654
    module_3.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    float_0 = -3636.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0)
    var_1 = module_3.purge()
    var_2 = var_1.__dir__()
    var_2.__call__(tuple_0, var_0, tuple_0, start=var_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_2340():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    str_0 = ";vONo_#`:$>h>?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    int_0 = 1499
    set_0 = {int_0, int_0}
    module_1.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    float_0 = 492.06
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    bool_0 = False
    none_type_0 = None
    module_3.sub(bool_0, bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    complex_0 = -1623.1636 + 1038.506901j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    str_0 = ""
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    float_0 = 234.9
    none_type_0 = None
    module_3.finditer(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    var_0 = module_3.purge()
    var_1 = module_3.purge()
    var_1.__contains__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    bytes_0 = b"/\xbd\x8d\xaf1\xf1\x85C\x87\xe8\xb8a9n\xde\x816\x10\x0e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    bytes_0 = b"\xf9\xb5\xb8\xbb\xb2\x08\x13G-9\x9cQ!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    none_type_0 = None
    module_3.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_2359():
    int_0 = 102
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    float_0 = 2352.5
    module_3.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    dict_0 = {}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    int_0 = -1290
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    int_0 = -341
    tuple_0 = (int_0,)
    module_3.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    enum_dict_0 = module_1._EnumDict()
    bytes_0 = b"\xf7\x19VX\x19_Xr3o\x08\xdc#\xcf\xfb%g\x0b|\x06"
    module_3.subn(enum_dict_0, enum_dict_0, bytes_0, flags=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    bool_0 = False
    module_3.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    bytes_0 = b"?\xb0\xaa\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    float_0 = 1513.38
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    int_0 = -568
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    bytes_0 = b"\x14;\xd5\xe3\xdad\xfdW\x1e\x03"
    bool_0 = False
    str_0 = "3W"
    tuple_0 = (bytes_0, bool_0, bytes_0, str_0)
    none_type_0 = None
    module_3.search(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    var_0 = module_3.purge()
    auto_0 = module_1.auto()
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    set_0 = set()
    module_1.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    bool_0 = True
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    bool_0 = True
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    int_0 = 899
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    bool_0 = False
    none_type_0 = None
    module_3.subn(bool_0, none_type_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    bool_0 = False
    none_type_0 = None
    module_3.findall(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    str_0 = "A|~\x0cRtNip#&MZ8"
    module_3.Scanner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    bytes_0 = b"\x83_O4\xe6\\\xcd\xfc\xcb\x1cm"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_3.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    str_0 = "2Q>()b<\\'NPn!T\"^-\nu"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_3.match(none_type_0, str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    var_0 = module_3.purge()
    set_0 = {var_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    var_0 = module_3.purge()
    module_3.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    int_0 = -949
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    int_0 = -568
    dict_0 = {int_0: int_0, int_0: int_0}
    module_3.search(int_0, int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    bool_0 = False
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    complex_0 = -2221.0478 + 547.07j
    module_3.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    bool_0 = True
    none_type_0 = None
    module_3.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    float_0 = -882.825045
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    float_0 = -964.04
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    float_0 = 927.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    float_0 = -225.22453
    module_3.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    str_0 = "bxfc"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    str_0 = "]K5&B+*,Q>K3e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    int_0 = -878
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, none_type_0)
    module_0.get_new_command(error_0, error_0)


def test_case_2408():
    bool_0 = True
    var_0 = module_3.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    float_0 = 1487.975242
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    complex_0 = 965 - 2668.64348j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    set_0 = set()
    none_type_0 = None
    module_3.subn(set_0, set_0, set_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    int_0 = 1006
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    bytes_0 = b" \xd3{\x93\xb6\x9e\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    int_0 = 13
    error_0 = module_3.error(int_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    str_0 = ":^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    complex_0 = 830.898508 - 1442.262072j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    str_0 = "0D>jjWdp4=n5]g\x0b|"
    var_0 = module_3.subn(str_0, str_0, str_0)
    var_1 = var_0.__dir__()
    module_0.match(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    bool_0 = False
    none_type_0 = None
    module_3.sub(bool_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    str_0 = "&"
    var_0 = module_3.escape(str_0)
    var_1 = module_3.compile(var_0)
    module_0.get_new_command(var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    bytes_0 = b"\xdf\x935e\xce=\xfbs!Af\x08/\\\xed\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    bytes_0 = b"9*"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    bool_0 = False
    tuple_0 = ()
    module_3.fullmatch(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    var_0 = module_3.purge()
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    bytes_0 = b"\x04\x16~\xec\xaf\xeb\xb6\xf3l\x06M\xe8\t\x96h}9o"
    none_type_0 = None
    module_3.fullmatch(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bytes_0 = b"_^\xcd\x80\x08"
    module_3.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    str_0 = ")A$i,&\r\\>gw2xS"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_2431():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2433():
    str_0 = 'x8+d/@PHx"l/v,W@'
    var_0 = module_3.fullmatch(str_0, str_0)
    int_0 = 914
    module_3.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    str_0 = "IfH"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    str_0 = "\x0ctm<*"
    module_3.sub(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    float_0 = 183.9061
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2439():
    float_0 = -830.58
    none_type_0 = None
    module_3.subn(float_0, float_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    str_0 = ".|a*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    complex_0 = -1090.3909 + 898.52211j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    var_0 = module_3.purge()
    module_3.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    complex_0 = 1208.42271 + 2390.342683j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    str_0 = "6I(m=cY_P]h\r/{t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    int_0 = -3413
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    str_0 = ",mdI*4Mg\t)f!:4B!o-I"
    str_1 = "{y\rC&B'SP\x0bqB$L8I2Ne"
    str_2 = "2Gzh'R"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_0: str_2}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    int_0 = -712
    bytes_0 = b"P\xd2\xbd\x8c"
    str_0 = "[Y\x0cpVsB\\`&:\x0b"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bytes_0, int_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    str_0 = "ldKwc21*Lw+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    complex_0 = -188.486 + 1302.541j
    module_3.sub(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    str_0 = "D0elcb`y/Oa<%\x0bR\\S"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    bytes_0 = b"\xe4Q\xaa\xd5X7\xdb9\x87\xfb\xafu)\x99\x9d\t\xf0\x8fJ,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    none_type_0 = None
    str_0 = "\r|?IPty|Y(|)c6i/"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2457():
    float_0 = 638.012
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    str_0 = "Y58yXk=H.1$PCcVj@"
    none_type_0 = None
    module_3.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    str_0 = ""
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    int_0 = 723
    list_0 = []
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    int_0 = 3789
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    str_0 = "Nz"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    int_0 = 1937
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    error_0 = module_2.Error()
    none_type_0 = None
    module_3.fullmatch(error_0, error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    exception_0 = module_4.Exception()
    module_3.findall(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    str_0 = "aKO|M5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    var_0 = module_3.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    var_0 = module_3.purge()
    var_1 = module_3.purge()
    module_3.compile(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    none_type_0 = None
    bytes_0 = b"\xa3\x8d\xc0, \xcf\xa9\xcf}\xd3"
    dict_0 = {none_type_0: none_type_0, none_type_0: bytes_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    bytes_0 = b"\x07"
    none_type_0 = None
    module_3.finditer(none_type_0, bytes_0)


def test_case_2475():
    bytes_0 = b"\x18\xc8\xa4\xf8Em"
    var_0 = module_3.search(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    str_0 = "\\;s4a+=1X"
    module_3.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    bytes_0 = b">^\xd0o]\xd1Z\xed\xeb\xc3\xda(b\xa0\x8c?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    str_0 = "\te*8H|Wg7nQ^*|K\t"
    module_3.subn(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    int_0 = -2954
    module_3.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    str_0 = "f2+"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    float_0 = -3793.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    regex_flag_0 = module_3.RegexFlag.IGNORECASE
    none_type_0 = None
    module_3.match(none_type_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    tuple_0 = ()
    module_3.fullmatch(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    str_0 = "<Xlg o^d]sdT,k&rv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    none_type_0 = None
    module_1.unique(none_type_0)


def test_case_2488():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2489():
    bytes_0 = b"\x8e"
    error_0 = module_3.error(bytes_0)
    module_3.subn(error_0, bytes_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    int_0 = -927
    module_3.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    int_0 = 760
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    str_0 = "8?`BIC&$"
    bool_0 = True
    str_1 = "b+:3q_A}eX[y0"
    dict_0 = {str_0: bool_0, str_1: bool_0, str_1: str_0}
    module_1.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    bool_0 = False
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


def test_case_2497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2498():
    bytes_0 = b"*\x84\xd28/\x8dP\x93\x0fE\x8f\x14\xa0\xdcc\xc7k\xce\x00a"
    module_3.split(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    none_type_0 = None
    int_0 = 3415
    module_3.fullmatch(none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    float_0 = -780.7
    module_3.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    str_0 = "@q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    str_0 = "RnRM\\)eMDg`s3X\tb'&ny"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_3.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    float_0 = 1648.9
    module_3.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_3.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    str_0 = '_KDoXfa[4<wG"g\\k=;'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    bool_0 = False
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    none_type_0 = None
    float_0 = 2614.97
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    bytes_0 = b"W\xca\x05T\x01\xbaOp"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    complex_0 = 1475 + 557.9734j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    var_0 = module_3.purge()
    none_type_0 = None
    module_0.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    str_0 = "#:|<096cnz&rmzI"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    int_0 = 5342
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    str_0 = "V,Waf"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    bool_0 = False
    str_0 = "'"
    module_3.subn(bool_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    complex_0 = -1387.33697 - 62.81431j
    var_0 = module_3.purge()
    var_0.__delattr__(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    str_0 = "l"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    bool_0 = False
    none_type_0 = None
    module_3.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    complex_0 = -365.31 + 3653j
    module_1.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2533():
    int_0 = -2581
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    bytes_0 = b"\xb1\xa82\xa5\xe4\x8b\xd6\xdb~A\x82R\xa6"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    str_0 = "r}n>/D?"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    int_0 = -186
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    int_0 = -805
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    bytes_0 = b"\x96\xc3\xd7\xa5\xdb"
    error_0 = module_3.error(bytes_0, bytes_0)
    module_3.template(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    exception_0 = module_4.Exception()
    module_3.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    bytes_0 = b"L\xb0\xda>\x8b\xcd\xaa\xd5\xbe\xdeJ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    bool_0 = True
    str_0 = "/5CjhBZSH.N2;U!,#K"
    var_0 = module_3.escape(str_0)
    var_0.__call__(bool_0, bool_0, type=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    bytes_0 = b"yj\xaf\x99\xd2\xae\xa37i\x9b\xcf\xea[\xbe"
    set_0 = {bytes_0, bytes_0}
    error_0 = module_3.error(set_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    complex_0 = -2398.42 - 1403.964j
    set_0 = {complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    dict_0 = {}
    base_exception_0 = module_4.BaseException(**dict_0)
    module_3.finditer(base_exception_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    int_0 = 2670
    bytes_0 = b"*3,\x1c"
    dict_0 = {int_0: int_0, int_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    int_0 = 2864
    str_0 = "*uPoe$WSL5"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, pos=none_type_0)
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    float_0 = -1599.059
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    bytes_0 = b"\xe4&*/\x0c\xae\xefH"
    module_3.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    bytes_0 = b"Z,\xe9\xb8\xc9sM\xdd\xd0ce,,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    int_0 = 1350
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    str_0 = "^H^^GAzafB."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    str_0 = "g!M<s,*B{ZraPBGCJ*Lt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    bytes_0 = b"\xa0t\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    int_0 = -1567
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    int_0 = 3601
    none_type_0 = None
    module_3.split(int_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    error_0 = module_2.Error()
    bool_0 = True
    module_3.fullmatch(error_0, error_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    none_type_0 = None
    module_3.escape(none_type_0)


def test_case_2570():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2571():
    bool_0 = False
    set_0 = {bool_0}
    module_3.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    bytes_0 = b"I\xfcf\x80%\x99"
    error_0 = module_3.error(bytes_0)
    none_type_0 = None
    module_0.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    str_0 = "fHg1?wY"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    str_0 = "5:6_\x0cz*woR6)"
    module_3.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    float_0 = -647.2081
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    var_0 = module_3.purge()
    set_0 = {var_0, var_0, var_0}
    dict_0 = {var_0: var_0, var_0: set_0}
    module_0.get_new_command(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    str_0 = "W'\\0KNRJ;FRZR"
    var_0 = module_3.compile(str_0)
    module_3.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    dict_0 = {}
    error_0 = module_2.Error(**dict_0)
    tuple_0 = (error_0,)
    module_0.match(tuple_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    error_0 = module_2.Error()
    module_3.search(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_3.sub(list_0, bool_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    int_0 = 156
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bytes_0 = b"\xbd~\nVk\xd6"
    var_0 = module_3.compile(bytes_0)
    module_0.get_new_command(var_0, bytes_0)


def test_case_2584():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2585():
    none_type_0 = None
    complex_0 = -710.5281 - 2786j
    dict_0 = {}
    tuple_0 = (complex_0, dict_0)
    set_0 = set()
    tuple_1 = (tuple_0, set_0, set_0)
    module_0.match(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    bool_0 = False
    none_type_0 = None
    module_3.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    bytes_0 = b"\x8e\xb5x\xf6\x81\x92\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    str_0 = "ta.+[z-Rm@[G9m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    float_0 = -3215.392
    bytes_0 = b"\xd4N2Z\xd7\xd4\xb6\xb4\xf6\x18\xb6\x1d\xb9\x0ft\xfeKL\xe2"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    str_0 = "Dv93\\}"
    bool_0 = True
    module_3.sub(str_0, bool_0, str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    complex_0 = 1423 + 3352j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    int_0 = 1817
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    var_0 = module_3.purge()
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    complex_0 = -2010.430702 + 1449.90693j
    dict_0 = {complex_0: complex_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    float_0 = 2064.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    str_0 = "C\t:,p\t,:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    int_0 = 1858
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    int_0 = -1982
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_3.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    complex_0 = -2183.8 - 5539j
    module_3.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    none_type_0 = None
    str_0 = ",BJ.\r0 %0<Uz"
    var_0 = module_3.compile(str_0)
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    bytes_0 = b"\xb5"
    none_type_0 = None
    module_3.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    bool_0 = True
    none_type_0 = None
    module_3.search(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    error_0 = module_2.Error()
    module_3.template(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bytes_0 = b"\xfdY\x92\xa6\xf0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    str_0 = "#\nq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    str_0 = "yNq cD2g)-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    complex_0 = -1807.83 + 373.8411j
    module_3.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    int_0 = 1351
    bytes_0 = b"\x94!*T\x1bw"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    bool_0 = False
    module_3.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    int_0 = 1567
    list_0 = [int_0, int_0]
    exception_0 = module_4.Exception(*list_0)
    none_type_0 = None
    module_3.sub(exception_0, exception_0, none_type_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    bool_0 = True
    module_3.template(bool_0)


def test_case_2620():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2621():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    var_0 = module_3.purge()
    module_3.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    list_0 = []
    module_3.subn(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    str_0 = "@R6~\t-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    str_0 = '\rF#"*b9my;/'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    int_0 = -1159
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    int_0 = -1066
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    none_type_0 = None
    set_0 = set()
    module_3.compile(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    bytes_0 = b"\xf2+\x01\xf5"
    var_0 = module_3.finditer(bytes_0, bytes_0)
    module_0.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    none_type_0 = None
    module_3.escape(none_type_0)


def test_case_2631():
    bool_0 = True
    dict_0 = {}
    str_0 = "v7T|>6)"
    var_0 = module_3.escape(str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    list_0 = []
    list_1 = [list_0, list_0]
    module_1.auto(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    float_0 = 107.465493
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    bytes_0 = b"N\xbd\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    str_0 = "M_\x0cVQ8TOos{fX\x0cu#"
    var_0 = module_3.finditer(str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    bytes_0 = b"fa\x03\xfd5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    int_0 = 977
    module_3.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    int_0 = 346
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    str_0 = "/A;%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    bytes_0 = b"\x97\x91"
    var_0 = module_3.template(bytes_0)
    set_0 = {var_0}
    module_0.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    list_0 = []
    object_0 = module_4.object(*list_0)
    list_1 = [list_0, list_0, list_0]
    module_0.match(object_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    complex_0 = 1149.446885 + 667.942j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    tuple_0 = ()
    module_3.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    bytes_0 = b"\xc6\xbd\x08,\x10R\\\x89\x0c\x1c\xe1hI\xb3\x9f6>\xfda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    int_0 = 361
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    float_0 = 2787.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    str_0 = ""
    none_type_0 = None
    str_1 = ",m`t\rg@tJ,?mwkbp]}"
    str_2 = "bgd2s=,"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_1: none_type_0,
    }
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    var_0 = module_3.purge()
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    int_0 = -729
    module_3.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_2655():
    bool_0 = True
    none_type_0 = None
    module_3.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    str_0 = "xHinmtqj?sC"
    none_type_0 = None
    module_3.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    var_0 = module_3.purge()
    none_type_0 = None
    module_0.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    regex_flag_0 = module_3.RegexFlag.MULTILINE
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    int_0 = 1449
    none_type_0 = None
    module_3.finditer(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    int_0 = 1868
    module_3.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    dict_0 = {}
    module_3.split(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    bytes_0 = b"}\xf0H\x86"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    tuple_0 = ()
    module_3.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    bytes_0 = b"\xaa\xb5_\xa4-\xc7\xf4\xa6\xba\n\xc7"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    float_0 = -1164.46524
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    str_0 = "iFg;nS(u{"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    none_type_0 = None
    int_0 = 1702
    module_3.findall(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    int_0 = -951
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    float_0 = 78.6
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    var_0 = module_3.purge()
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    int_0 = -1330
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    bytes_0 = b";\xa4\x8f\xb0.\xeb\x8e\xbcP\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    error_0 = module_2.Error()
    set_0 = {error_0, error_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    base_exception_0 = module_4.BaseException()
    module_3.Pattern(*base_exception_0, **base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    complex_0 = -3507.345326 + 198.4644j
    module_3.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    bool_0 = False
    error_0 = module_3.error(bool_0)
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    exception_0 = module_4.Exception()
    module_3.finditer(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    int_0 = 1908
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    error_0 = module_2.Error()
    module_3.escape(error_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    str_0 = "~G\r^TQyRGVf}>V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    bytes_0 = b"\xf8\x93\x80r\x1d\x12\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    str_0 = "\rQ]\nupwT9_xJ"
    var_0 = module_3.purge()
    var_0.__len__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    int_0 = -628
    module_3.split(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    float_0 = -3738.0075
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_2697():
    str_0 = "Gt\rO,}0!S:)G,;:,?34i"
    module_3.subn(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    str_0 = "0V^j+A(n|.59~!>>P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    module_0.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    bytes_0 = b"/x\xa1\x02*\xaf\xda\xe0i\xab{A\x15>\xe2es\xb2"
    module_3.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    float_0 = 3059.0
    bytes_0 = b's\xdb9\xfcww9\xaa.*\x116\xa4"\xdc\x07'
    set_0 = {float_0, float_0, float_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    bool_0 = False
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    complex_0 = -3500.418 + 678.25097j
    module_3.split(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    str_0 = "<N$}~G%)&W]*zM"
    list_0 = [str_0]
    exception_0 = module_4.Exception(*list_0)
    module_3.subn(exception_0, str_0, str_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    str_0 = "]4/&Ztpt"
    module_3.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    var_0 = module_3.purge()
    module_3.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, none_type_0)
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    float_0 = 1812.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    int_0 = 127
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    float_0 = 8.252912
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    bool_0 = False
    bytes_0 = b"\x19"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    bytes_0 = b"c|o\xa5\xb8\x0c"
    module_3.split(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    set_0 = set()
    module_3.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    int_0 = 2263
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    error_0 = module_2.Error(*list_0)
    module_3.search(error_0, error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    str_0 = "$yLBq_XdL$2b/4Fe;Vt"
    var_0 = module_3.purge()
    var_0.__delattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    bytes_0 = b'\xcck8\xf7\xff\xe9"\x7f\xdb'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    bytes_0 = b'"\xe7\ng\xc9<\xf2h~T\x8by'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    int_0 = -3062
    list_0 = [int_0, int_0, int_0]
    module_3.sub(list_0, list_0, list_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    bytes_0 = b"N\x93\x17\x9a\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    complex_0 = 2950.6634 - 3030j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    str_0 = "hnN<`M<**-E(AUd f)"
    module_3.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    int_0 = -131
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    bool_0 = False
    module_3.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    none_type_0 = None
    int_0 = 3337
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    bytes_0 = b"f_\x9b>\xd6\x14\x07\x818!\xb8\x9a\xcfS\x98Q\xe8\xdc\xa5\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    complex_0 = 588.134 - 3120.197j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    int_0 = -3035
    module_1.EnumMeta(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    float_0 = 3207.27511
    str_0 = ":&*q\x0bJ0bSMq+sR\t]EY>"
    float_1 = 1684.71799
    tuple_0 = (float_0, str_0, float_1, float_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    none_type_0 = None
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    var_1.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    complex_0 = 2125.2 + 98.2j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    bytes_0 = b"$e\x9d\x8c+.j:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    bytes_0 = b"\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    var_0 = module_3.purge()
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    error_0 = module_2.Error()
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    tuple_0 = ()
    none_type_0 = None
    module_3.fullmatch(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    complex_0 = 1010.136 - 662.451j
    tuple_0 = (complex_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_0.match(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    int_0 = -1263
    module_3.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    bytes_0 = b"\xfd\xe7\xe0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    str_0 = "\x0by"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    str_0 = "{<s y6=A8:E7!^W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    float_0 = 4399.07
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    str_0 = "BiC>G1,y$Fp2\n\\`?]"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    int_0 = 3948
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    str_0 = "Vk(bDj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    enum_dict_0 = module_1._EnumDict()
    int_0 = -3483
    module_3.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    int_0 = -1393
    module_3.error(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2763():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    int_0 = -1869
    none_type_0 = None
    module_3.subn(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    int_0 = -1638
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    bool_0 = False
    module_3.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    str_0 = "M94CRw\\H-22hbF{"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    none_type_0 = None
    module_4.Exception(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    float_0 = 2218.48
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    list_0 = []
    module_3.sub(list_0, list_0, list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    float_0 = 2884.552558
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    complex_0 = 288.36 + 537.34j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    bytes_0 = b"/t\xd4\xee\x93Hl\xc8O\xbe\x95\xb5ws\x90\xcc\xd3"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    bytes_0 = b"P"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    bytes_0 = b"a\xbek\x7f\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    bytes_0 = b"\xee\x8a\x91M\xec\x1b\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    float_0 = -608.785312
    str_0 = "c\t'&B<1U*J5d"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    list_0 = []
    list_1 = [list_0, list_0]
    module_3.search(list_1, list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2785():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_2786():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2787():
    int_0 = 577
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    set_0 = set()
    list_0 = [set_0]
    module_3.Pattern(*list_0, **set_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    str_0 = "C"
    none_type_0 = None
    module_3.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    list_0 = []
    module_3.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    int_0 = -63
    module_3.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    bool_0 = True
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_3.sub(bool_0, list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    int_0 = -1301
    module_3.Match(*int_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    list_0 = []
    module_3.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    bytes_0 = b"/\x85Q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2802():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    bytes_0 = b"]\xb1\x16\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    regex_flag_0 = module_3.RegexFlag.LOCALE
    module_2.Error(*regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    complex_0 = -3566.82857 - 2612.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    bool_0 = False
    module_3.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    str_0 = "ZUfMcW6>)X6);o/Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    str_0 = "(w:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    float_0 = 793.283
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    float_0 = 398.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    float_0 = 320.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    int_0 = 614
    module_3.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    none_type_0 = None
    str_0 = "0'\x0c:U@V"
    var_0 = module_3.split(str_0, str_0)
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    bytes_0 = b"ra\x1c\x9e\x071r\xedft"
    none_type_0 = None
    bytes_1 = b",T"
    var_0 = module_3.fullmatch(bytes_1, bytes_1)
    var_0.__call__(
        bytes_0, bytes_0, none_type_0, qualname=none_type_0, type=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_2821():
    bool_0 = False
    module_1.auto(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    str_0 = "M<3 ,zGgcP\tA'\ns92"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    str_0 = ":N"
    module_3.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    enum_dict_0 = module_1._EnumDict()
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    bytes_0 = b"~M\xdc"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    int_0 = 1606
    none_type_0 = None
    module_3.subn(int_0, none_type_0, none_type_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    str_0 = "x:"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    str_0 = "FDS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bytes_0 = b"\xb0\x990\x85\xbf\xd2\x94\xed\xd2_\xcb\xf4\x8be[ZN\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    bool_0 = False
    bool_1 = True
    module_3.subn(bool_0, bool_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    float_0 = -2808.9097
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    bool_0 = False
    list_0 = [bool_0]
    error_0 = module_3.error(bool_0)
    tuple_0 = (list_0, error_0)
    module_3.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    complex_0 = 17.588 - 3656j
    module_0.match(complex_0, complex_0)


def test_case_2842():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2843():
    float_0 = 2032.811
    module_3.Scanner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    bytes_0 = b"\xf0\x0e\xb7or\x19\xbb\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    int_0 = 702
    none_type_0 = None
    module_3.subn(int_0, none_type_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    float_0 = -2876.16354
    module_0.get_new_command(float_0, float_0)


def test_case_2847():
    bytes_0 = b",8o0*}\xb1\xbe\xfc"
    none_type_0 = None
    var_0 = module_3.purge()
    with pytest.raises(TypeError):
        var_0.__new__(bytes_0, bytes_0, bytes_0, bytes_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    str_0 = "h~DL:'%"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    str_0 = ""
    set_0 = {str_0, str_0}
    module_3.subn(set_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    int_0 = 379
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    bytes_0 = b"\x7f;\xb95\xb1380RG\x7f\x17\x8e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    set_0 = set()
    module_3.sub(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_3.match(exception_0, none_type_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    bool_0 = True
    none_type_0 = None
    module_3.subn(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    exception_0 = module_4.Exception()
    list_0 = [exception_0, exception_0, exception_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    exception_0 = module_4.Exception()
    module_3.search(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    str_0 = "v2x+MEaCd77"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    bytes_0 = b'"n\x84'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    str_0 = " -w\r%?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    int_0 = -1158
    module_3.Scanner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    str_0 = "\rvH?J*A68zC&%P("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    none_type_0 = None
    module_3.escape(none_type_0)


def test_case_2867():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2868():
    int_0 = 837
    module_3.split(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    none_type_0 = None
    enum_dict_0 = module_1._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    str_0 = "/\\Z2"
    str_1 = "\t"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    str_0 = "$&jc~L{cHo!xi"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    int_0 = -5216
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    str_0 = "(q[~(Ja>\x0bY<B@`[\x0brE0I"
    module_3.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2877():
    float_0 = -1355.302
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    int_0 = -2413
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    int_0 = 4411
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    str_0 = "Hr9]\rxx\r]X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    str_0 = ":|1+\nIT5"
    var_0 = module_3.escape(str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    str_0 = "dySKkva-\x0bo#$!>q/gv"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    float_0 = -731.1624
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    object_0 = module_4.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    bool_0 = False
    none_type_0 = None
    module_3.match(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    str_0 = "{2\t\n3t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    complex_0 = -724 - 437.458j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2890():
    int_0 = -1692
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    bool_0 = True
    module_3.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    float_0 = 1394.71
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    int_0 = 242
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    bytes_0 = b"[\xaaf\x0c\x88\x02\xe8\x05,S\xba\xe7["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    int_0 = 1519
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    complex_0 = -1248.2 - 846.155j
    module_3.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    bytes_0 = b"\xefK\xed\x18\xc6!\xf7c\r\xf1x6\x04\x97\x9fx\x13w"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    int_0 = -1652
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    str_0 = "6LF"
    str_1 = "(K8JK16Ng\x0c6]"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    str_0 = "m.?5c_p-9[\x0cP{V~[Dg6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    none_type_0 = None
    module_2.Error(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    var_0 = module_3.purge()
    int_0 = 737
    exception_0 = module_4.Exception()
    dict_0 = {int_0: int_0, int_0: exception_0, int_0: exception_0, int_0: int_0}
    module_3.fullmatch(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    str_0 = "~Z"
    var_0 = module_3.finditer(str_0, str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    bytes_0 = b"\x91\x05"
    bool_0 = True
    list_0 = [bytes_0, bool_0]
    module_1.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = "a_wz"
    dict_0 = {str_0: list_0, str_0: none_type_0}
    dict_1 = {str_0: list_0, str_0: dict_0, str_0: dict_0, str_0: dict_0}
    module_2.Error(*list_0, **dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    int_0 = 2300
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    float_0 = -2616.0
    module_3.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    bool_0 = False
    error_0 = module_2.Error()
    module_0.get_new_command(bool_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    int_0 = -29
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    str_0 = "g\x0blaB"
    none_type_0 = None
    module_3.fullmatch(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    int_0 = 106
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    str_0 = "ZT1dYCUh>I6RN7p4QC;9"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    list_0 = []
    none_type_0 = None
    module_3.subn(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    none_type_0 = None
    module_3.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    float_0 = -1497.97
    var_0 = module_3.purge()
    var_0.scan(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    bytes_0 = b'4\x91f\xceZh6`\xb9\xaa9y"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    float_0 = 433.09481
    module_3.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    str_0 = "]\r<\\L8<*@*vB;HCl]X"
    set_0 = {str_0}
    module_3.Pattern(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    int_0 = 1003
    error_0 = module_3.error(int_0, int_0)
    error_1 = module_3.error(error_0)
    var_0 = module_3.purge()
    dict_0 = {var_0: var_0}
    module_3.search(var_0, dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    float_0 = -665.224
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    complex_0 = 894.3 + 2646.51j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    bool_0 = True
    list_0 = [bool_0]
    module_3.subn(bool_0, bool_0, bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    none_type_0 = None
    int_0 = 1402
    error_0 = module_3.error(none_type_0, pos=int_0)
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, none_type_0, none_type_0)
    str_0 = "\x0bI"
    dict_0 = {}
    str_1 = "9nsxZ:gh,l%z"
    dict_1 = {str_0: dict_0, str_0: dict_0, str_1: str_0}
    module_1.EnumMeta(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    float_0 = 3732.922
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    set_0 = set()
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    float_0 = -1652.974
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    float_0 = 528.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    str_0 = "NiBP\x0c!DHi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    list_0 = []
    none_type_0 = None
    module_3.findall(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    float_0 = 1270.01451
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    int_0 = 106
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    float_0 = -190.347
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    bytes_0 = b"\xc9\x06\x85\x8d\xb4\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    complex_0 = 540 - 712.4121j
    module_3.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    float_0 = 1310.424
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_3.split(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    bool_0 = True
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    bool_0 = True
    module_3.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    none_type_0 = None
    module_4.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    var_0 = module_3.purge()
    module_3.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    int_0 = 1785
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    str_0 = ";Ur,A@\n\\bf{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    int_0 = 2078
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    int_0 = -264
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    str_0 = "NzEE=+CD4Hcfa"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    int_0 = -772
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    int_0 = 379
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    bytes_0 = b"\rl^;_lm\xf0B\n\xa1\xc7\x02m"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    str_0 = "Ak[Ew"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    exception_0 = module_4.Exception()
    dict_0 = {exception_0: exception_0}
    module_3.finditer(dict_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    str_0 = "/jYs"
    str_1 = "<?m/aYD"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2968():
    float_0 = -2015.6356
    float_1 = 647.0
    module_3.split(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    int_0 = -1853
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    bytes_0 = b"\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    bytes_0 = b"\x13\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    float_0 = -2180.816453
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    str_0 = "Z$\n!w61@eYKD\\b,"
    module_3.sub(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    int_0 = -891
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    bool_0 = False
    none_type_0 = None
    module_3.sub(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    bytes_0 = b"0\x8dX\xe5V\x06\xdf\xe4\xcd\xbf\xcf5\xf2"
    module_3.subn(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    int_0 = 1478
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    int_0 = -702
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    int_0 = -1311
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    dict_0 = {}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    int_0 = 2141
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    int_0 = -602
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    bytes_0 = b" \xcc\x0f\xc5\xef\xa5\xbb\xcc\x06\x7f\x13"
    tuple_0 = (bytes_0,)
    module_3.finditer(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    module_3.Pattern()


def test_case_2992():
    int_0 = 1209
    var_0 = module_3.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    str_0 = "RVM]mxNTudJ"
    none_type_0 = None
    module_3.match(none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    str_0 = "BaoDU"
    var_0 = module_3.search(str_0, str_0)
    tuple_0 = (str_0, var_0)
    module_0.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    complex_0 = 889.7 - 1244.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    bytes_0 = b"\x94\xc3\xd5\xb2"
    none_type_0 = None
    module_3.search(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    set_0 = set()
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    bytes_0 = b"\xb3e]0~H\xbe"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    int_0 = 336
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    bytes_0 = b"v\xbf\x937\xe7\xb4\x8c\xcc4"
    var_0 = module_3.search(bytes_0, bytes_0)
    module_0.match(var_0, var_0)


def test_case_3003():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3004():
    float_0 = -2623.52927
    none_type_0 = None
    module_3.search(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    bytes_0 = b"\x91O\xed\xd2\xf4"
    module_3.split(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    bytes_0 = b"\x84"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    list_0 = []
    str_0 = "@"
    none_type_0 = None
    str_1 = "k^uIB"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_4.BaseException(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    int_0 = -1513
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    var_0 = module_3.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    set_0 = set()
    none_type_0 = None
    module_3.search(set_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    float_0 = -1368.21491
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    var_0 = module_3.purge()
    module_3.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    var_0 = module_3.purge()
    bool_0 = True
    dict_0 = {var_0: var_0, var_0: bool_0, var_0: bool_0, var_0: bool_0}
    module_3.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    bytes_0 = b"3'\xcb\x83"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_3.search(list_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    float_0 = 5099.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    float_0 = -1589.0901
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    set_0 = set()
    bytes_0 = b""
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    float_0 = 177.0925
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    int_0 = -923
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    int_0 = -1009
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3032():
    int_0 = -3146
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    bytes_0 = b"\x16=g\n\x1d\xd7nQ\x14\x93\x97(2\xc9"
    none_type_0 = None
    module_3.sub(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3035():
    str_0 = "7~\nll0'K="
    var_0 = module_3.compile(str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    bytes_0 = b"U\xcf\xa3\xef\xdf\xe9\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    str_0 = "=e 6{>(e;"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_3.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    bytes_0 = b"4U\xb6\xe4\x84\x04\xb9\x17\x06\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    regex_flag_0 = module_3.RegexFlag.LOCALE
    str_0 = ""
    var_0 = module_3.search(str_0, str_0)
    module_0.get_new_command(regex_flag_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    str_0 = "#fGYx1\r\\a;}s[6|J.r6'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    int_0 = 2072
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3047():
    float_0 = 556.90289
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    str_0 = "v\x0b+k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    int_0 = 634
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    int_0 = -2304
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    bytes_0 = b"\xcb8K"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    str_0 = "/=bBR@ A9(5.a4g$"
    module_3.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    int_0 = -1357
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    int_0 = 2050
    module_1.EnumMeta(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    var_0 = module_3.purge()
    bytes_0 = b"\xf7\x91\x8a\xa3\x9a\x0c\xeb\xc3\xe7\xf2'\\(l\x97\x7f"
    none_type_0 = None
    var_1 = module_3.purge()
    var_1.__delattr__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    bool_0 = False
    module_3.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    str_0 = " Ye!hiy\x0ct "
    var_0 = module_3.search(str_0, str_0)
    module_3.fullmatch(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    int_0 = -195
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    float_0 = -532.62
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    float_0 = -1994.5561
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    float_0 = 678.767
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_3073():
    bytes_0 = b"\xc6\xadS\xa0\x967\xb9KDQ"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    bytes_0 = b"\xd6\xe91\x94q\x11\x84\xea\xae\xe1N7\xc0\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    bool_0 = False
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    int_0 = 1875
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_3.match(list_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    int_0 = 63
    dict_0 = {int_0: int_0}
    module_3.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    int_0 = 2992
    module_3.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    float_0 = -5058.794614
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    int_0 = -973
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    bytes_0 = b"e\xd7\x82\x8eH\xa9\xee\xfdi\xba6\xba"
    none_type_0 = None
    module_3.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    int_0 = 1006
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    list_0 = []
    module_3.subn(list_0, list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    int_0 = 552
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    int_0 = 1182
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    int_0 = -3031
    module_3.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    float_0 = -4024.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    tuple_0 = ()
    module_3.fullmatch(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    error_0 = module_2.Error()
    none_type_0 = None
    module_3.sub(error_0, none_type_0, error_0, flags=error_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    int_0 = 1765
    module_3.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    float_0 = -1078.5806
    module_3.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    str_0 = "lr;NQJ}ez^Y|SB"
    module_3.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    int_0 = 4605
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    int_0 = -1599
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    bool_0 = False
    none_type_0 = None
    module_3.sub(bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    int_0 = -460
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    float_0 = -4746.894
    error_0 = module_2.Error()
    module_0.match(float_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    bytes_0 = b"\x0c\x9c\xf4)\xff\x18\xec\xf7H}?\x0e;\x93\xb7\xcd&\x98["
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    str_0 = "{s(gl#-2Xlox"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    str_0 = "Z}\r\t0r!!Lk"
    var_0 = module_3.fullmatch(str_0, str_0)
    module_3.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    int_0 = -2008
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    var_0 = module_3.purge()
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    str_0 = "'h}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    var_0 = module_3.purge()
    list_0 = [var_0, var_0, var_0]
    module_3.split(list_0, list_0, var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    bytes_0 = b"IQ\x9byp"
    var_0 = module_3.purge()
    var_0.__iter__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    str_0 = "G"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3120():
    bytes_0 = b"X"
    var_0 = module_3.escape(bytes_0)
    var_1 = module_3.split(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    float_0 = -426.32
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    bool_0 = False
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    auto_0 = module_1.auto()
    module_3.escape(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    var_0 = module_3.purge()
    set_0 = {var_0, var_0, var_0, var_0}
    module_0.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    int_0 = -3338
    bytes_0 = b"M\x7f\x1f\x02d\xb6\xf6\xf70\x08t\x13\x18b\xe6\xcb`\xa3\xe6"
    tuple_0 = (int_0, int_0, bytes_0)
    none_type_0 = None
    module_3.search(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    bool_0 = False
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    bytes_0 = b"k\xdc_K9\xcb0"
    var_0 = module_3.finditer(bytes_0, bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    float_0 = -3088.3841
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    str_0 = "-\\]"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    int_0 = -1418
    module_3.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    bytes_0 = b"\xec\xd4\x15{2\xb1\x8eX\xcc*\xca\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    int_0 = -2610
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    str_0 = "oKect$/K1|\td#OEY"
    dict_0 = {str_0: str_0}
    module_4.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    bytes_0 = b"w"
    none_type_0 = None
    module_3.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    bytes_0 = b"\x1dJcJ\xad[\x9d\x00$\x80/R\xba"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_3.compile(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    exception_0 = module_4.Exception()
    str_0 = '?N[~N?\\(nk"G'
    module_3.finditer(exception_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    bool_0 = True
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    tuple_0 = ()
    module_3.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    str_0 = ";\rICAHQ`,3ZKb\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    int_0 = -2440
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    float_0 = -541.49
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    int_0 = -595
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3151():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    bool_0 = False
    int_0 = -683
    module_3.findall(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    bytes_0 = b"I\x8dQ\x8b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    complex_0 = -670.59744 + 1697.39j
    none_type_0 = None
    module_3.fullmatch(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    str_0 = "c[\x0bTbJjQ$=W:~3<d"
    module_3.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    float_0 = 324.06
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    regex_flag_0 = module_3.RegexFlag.DOTALL
    none_type_0 = None
    set_0 = {none_type_0}
    module_3.finditer(regex_flag_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    int_0 = -2069
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    complex_0 = 3210.321 - 1159.475j
    module_3.subn(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    str_0 = '^tK"n;11a~02p*ty'
    var_0 = module_3.escape(str_0)
    module_0.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    str_0 = "\x0bu|9OJ4VYj.O~_"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    float_0 = 3503.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_3.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    str_0 = "<7g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    str_0 = "ub$J^n`[,W"
    var_0 = module_3.purge()
    var_0.__len__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    int_0 = -2292
    enum_dict_0 = module_1._EnumDict()
    enum_dict_0.__setitem__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    complex_0 = -3306.7077 + 1124.25068j
    module_3.split(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    str_0 = "H-Mx1aSVV''/:*j$b_"
    var_0 = module_3.compile(str_0)
    tuple_0 = (var_0, var_0, var_0, var_0)
    module_0.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    float_0 = 1422.978424
    module_0.get_new_command(float_0, float_0)


def test_case_3180():
    int_0 = 354
    var_0 = module_3.purge()
    with pytest.raises(TypeError):
        var_0.__new__(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    float_0 = -493.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    bytes_0 = b"^.\x0f\xd0\xbbk"
    complex_0 = 261 + 3181j
    module_3.sub(bytes_0, complex_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    complex_0 = 590.3 - 1119.136666j
    module_3.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    float_0 = 2063.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    bool_0 = False
    module_3.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    auto_0 = module_1.auto()
    list_0 = [auto_0, auto_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    bool_0 = False
    module_3.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    complex_0 = -5602.4658 - 2916.91j
    none_type_0 = None
    module_3.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    float_0 = -278.71
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    complex_0 = 750.065284 + 453.15554j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    bool_0 = False
    none_type_0 = None
    module_3.fullmatch(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    int_0 = 1326
    bytes_0 = b"wq#\xcc\xd2R\x8f\xac\x9e\x90,\x10kx4\x1d\xb7"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    bool_0 = False
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    error_0 = module_2.Error()
    module_3.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    float_0 = -3534.0778
    none_type_0 = None
    module_3.finditer(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    str_0 = "LXGK\x0b2J`VO<|ZQ8S>n"
    none_type_0 = None
    module_3.search(none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    enum_dict_0 = module_1._EnumDict()
    module_3.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    float_0 = 3154.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    int_0 = 1528
    module_3.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    bytes_0 = b"}\x10\xa8\x1a{"
    var_0 = module_3.escape(bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    bytes_0 = b"G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    str_0 = "2]Qf]:#{O\x0bzh07"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    float_0 = -1480.755
    module_3.subn(float_0, float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_3.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    str_0 = "z\x0b\n_\x0cA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    error_0 = module_3.error(list_0, list_0)
    module_0.get_new_command(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    int_0 = -45
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_3220():
    int_0 = 1605
    module_3.Match(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    float_0 = -2736.724588
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3223():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    int_0 = 1433
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    bytes_0 = b"LARMd\xb3w"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    complex_0 = 947.25 + 825.7j
    none_type_0 = None
    module_3.finditer(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    bytes_0 = b"*arsP\x84]\xcc`\x10\xa0\xe26\xad\xf1\xa3\xd8d"
    module_3.subn(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    var_0 = module_3.purge()
    tuple_0 = (var_0,)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    str_0 = "j`B"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    str_0 = "/3+`Xr6$ClxP:1~|2>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    float_0 = -1561.13
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    int_0 = 2692
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    dict_0 = {}
    module_3.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    var_0 = module_3.purge()
    bytes_0 = b"7\n"
    module_3.subn(var_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    float_0 = -1237.0
    module_3.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    bytes_0 = b"r\x93l}\x94Upkj\xd4"
    error_0 = module_3.error(bytes_0, pos=bytes_0)
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    complex_0 = -560.364795 + 1083.291j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    int_0 = -2559
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    bool_0 = True
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    int_0 = -2280
    module_3.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    int_0 = 351
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    float_0 = 2212.565
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    bytes_0 = b'\xa6\x91b\xb9\xbe\x99\x0f"w\xab\x0c\xf1'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    bool_0 = True
    module_3.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    bytes_0 = b"d\x99\xa8\x15\x8ar\xb8N.O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    str_0 = "%wXp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    dict_0 = {}
    base_exception_0 = module_4.BaseException(**dict_0)
    module_0.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    bytes_0 = b"\xef\x12\x8c\xcfm\xbae\xe8g\xe7\xd7\xf9\x1d\xd6\x7f\x14\xe4"
    str_0 = "!k73VzR\x0bu"
    var_0 = module_3.split(str_0, str_0)
    var_0.__repr__(bytes_0)


def test_case_3253():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3254():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0, var_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    str_0 = "?u{X<3 &n&G$"
    dict_0 = {str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    int_0 = 1231
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    none_type_0 = None
    base_exception_0 = module_4.BaseException()
    module_0.get_new_command(none_type_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    bool_0 = False
    none_type_0 = None
    module_3.split(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    float_0 = 871.493
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    bytes_0 = b">\xbdL{\xd5&"
    var_0 = module_3.match(bytes_0, bytes_0)
    var_0.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3266():
    str_0 = "]v><r"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    int_0 = -1597
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    complex_0 = 139.728607 + 1056j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    int_0 = -3543
    module_3.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    int_0 = -395
    module_3.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    bool_0 = True
    module_3.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    var_0 = module_3.purge()
    module_3.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    str_0 = "{hn;3ku?0O7`?FoKZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    var_0 = module_3.purge()
    set_0 = set()
    module_1.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    bytes_0 = b"\xe4i"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    float_0 = -332.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    bytes_0 = b"J\x01,\x8e\xf5\x85x\x12\xa0\x18\x9a\xa4\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    bytes_0 = b"\xab\xa1\xf3e@\xe3\x07\xfa\xb6Z\x17\xa0\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    none_type_0 = None
    str_0 = "lM6"
    dict_0 = {str_0: none_type_0}
    module_1.auto(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    int_0 = 490
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    str_0 = "tNquI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    tuple_0 = ()
    module_3.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    none_type_0 = None
    enum_dict_0 = module_1._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bytes_0 = b"\ni\xf4O\xf8\xfb"
    set_0 = {bytes_0}
    none_type_0 = None
    module_3.finditer(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    bytes_0 = b"9E^U\xc6'\x19\xe4j\xe0\x84\x9f\xa6\xff>\x7fk\xdc\xd5"
    error_0 = module_2.Error()
    module_0.match(bytes_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    set_0 = set()
    module_3.split(set_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    str_0 = "XL\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    int_0 = -1603
    error_0 = module_3.error(int_0, pos=int_0)
    tuple_0 = (error_0,)
    dict_0 = {tuple_0: error_0, error_0: int_0, error_0: error_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    list_0 = []
    module_3.fullmatch(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    str_0 = "@[`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    bytes_0 = b"\xc6\x16m\xef\x80\x98A\x1c\x97\x99P9\xba\xba"
    list_0 = [bytes_0, bytes_0]
    module_3.template(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    bytes_0 = b"\xb7\xc7\xb2\x91o\xd9\xee\xd5\xd5\x8d\xdb\x1co\xe5m(\x87\xaf\xb7\xf6"
    int_0 = -734
    tuple_0 = (int_0,)
    set_0 = {bytes_0, bytes_0, bytes_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    int_0 = -557
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0, var_0, var_0)
    module_0.match(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    int_0 = -1811
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_3.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    bytes_0 = b"\xcd|\xf8\x97\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    str_0 = "mNP 6zZ@q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    str_0 = "47*$v@y*?1K:s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    bool_0 = False
    none_type_0 = None
    module_3.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    int_0 = 2528
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    float_0 = 593.399
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    float_0 = -4981.352
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    float_0 = -2762.8524
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    int_0 = 2792
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    none_type_0 = None
    bytes_0 = b"\x98\xb2\xc4\xf6\x95\x87\x98\xeb\xab"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    str_0 = " nK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    bool_0 = True
    module_3.compile(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    str_0 = "GI[5D{zu$vOQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    bytes_0 = b"1\xdd_\xcc\xcd7\xe4F\xe6;R\xab\xe5>\xae(*"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    str_0 = "9UVA3<{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    error_0 = module_2.Error()
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    str_0 = "S\x0clR*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    dict_0 = {}
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    module_3.split(dict_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    str_0 = "@{W\x0co//.-Cm0f,~_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    float_0 = -792.2518
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_3.sub(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    str_0 = ""
    var_0 = module_3.search(str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    int_0 = -1728
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    int_0 = -869
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    str_0 = '8QdP+^G"*Q<'
    var_0 = module_3.escape(str_0)
    module_0.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    none_type_0 = None
    error_0 = module_3.error(none_type_0)
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    bytes_0 = b"\xbb%\xbb"
    var_0 = module_3.findall(bytes_0, bytes_0)
    bool_0 = False
    module_0.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    float_0 = -1310.99739
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_3340():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3341():
    int_0 = 2851
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    bytes_0 = b"\xe6\x1b\xe2\x05\xadO\xfbI"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    bool_0 = True
    none_type_0 = None
    module_3.subn(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    none_type_0 = None
    bytes_0 = b"A\xbb\xaa8\xc3%\x95\x9e\x01\x07\xd4N\xf3D 3"
    var_0 = module_3.match(bytes_0, bytes_0)
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    regex_flag_0 = module_3.RegexFlag.VERBOSE
    none_type_0 = None
    module_3.sub(regex_flag_0, regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    str_0 = "7o!la#+3)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    float_0 = -1364.29
    module_3.split(float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    bytes_0 = b"\x90\n\xcb\xc7\xf4\x92\rb\x85\xf7*\xdb2\xa7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    str_0 = "(34lV>(F.*'\rpPv"
    module_3.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    int_0 = 2379
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    float_0 = -1147.8917
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    bool_0 = False
    module_3.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    str_0 = "3Bk95/@F&zr["
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__call__(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    str_0 = "%:\ng*m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    str_0 = "$Ka#;:9rL8uKq.QFsb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    none_type_0 = None
    str_0 = "\n;rC|\\=,/\x0c5XpB}T1"
    var_0 = module_3.findall(str_0, str_0)
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    bytes_0 = b"MIh"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    regex_flag_0 = module_3.RegexFlag.DEBUG
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    tuple_0 = ()
    module_3.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    enum_dict_0 = module_1._EnumDict()
    error_0 = module_3.error(enum_dict_0, pos=enum_dict_0)
    module_1.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    str_0 = "\\\n\x0c~\x0b;:)"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    set_0 = set()
    module_3.Scanner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    str_0 = "\tk_e7'0JV*&r#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    str_0 = "L{kf(,k]^OW6"
    dict_0 = {str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    int_0 = -547
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    var_0 = module_3.purge()
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


def test_case_3372():
    bool_0 = False
    dict_0 = {}
    var_0 = module_3.purge()
    with pytest.raises(TypeError):
        var_0.__new__(bool_0, bool_0, bool_0, bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    int_0 = -2401
    module_3.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    int_0 = 41
    module_3.split(int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    bool_0 = False
    none_type_0 = None
    module_3.subn(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    int_0 = -28
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    none_type_0 = None
    int_0 = -1415
    module_3.subn(int_0, int_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    int_0 = 1928
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    int_0 = -250
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    float_0 = 1648.6
    none_type_0 = None
    module_3.finditer(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    bytes_0 = b"\x8e\x0eF\x02\xac\xda"
    var_0 = module_3.escape(bytes_0)
    module_3.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    str_0 = "2U9UT\"='t9ULE,SX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, none_type_0, none_type_0)
    module_3.subn(error_0, none_type_0, error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    int_0 = 930
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    complex_0 = -1770.687 - 46.3701j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    int_0 = 215
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    bytes_0 = b"\xac\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    int_0 = -4637
    none_type_0 = None
    module_3.search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    bytes_0 = b"\xae\t\xe27\x08\xe7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    list_0 = []
    module_3.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    int_0 = -2109
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_3.search(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    int_0 = -53
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    float_0 = -288.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    int_0 = -1622
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    bool_0 = True
    none_type_0 = None
    module_3.split(bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    none_type_0 = None
    bytes_0 = b"\x9a\x07\xba{\xc7\xe5\xe5\xdc\xd7\x0cW"
    module_3.finditer(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    bytes_0 = b"\x99V\x991\\u\x98\xb2wM\xbc\xe3z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    bool_0 = True
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    var_0 = module_3.purge()
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    error_0 = module_2.Error()
    bool_0 = True
    module_3.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    str_0 = "CV-W?6jaL[K /"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bytes_0 = b"\xb4N$F7\x08$\xdb\xcb\xba)#p\x84\x0c\xad\x96"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0, dict_0, bytes_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    bytes_0 = b"\xda\x8d\xa4 \xc6\xbf\xb3>8\xda\x1a7"
    base_exception_0 = module_4.BaseException()
    str_0 = "];.;>mjJWK+1tpXf"
    dict_0 = {bytes_0: base_exception_0, bytes_0: base_exception_0, str_0: str_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    str_0 = "v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    str_0 = "\x0cvi\r"
    bool_0 = True
    list_0 = [str_0, str_0, bool_0, str_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    str_0 = "tcK/7KIOVNOM#<\x0c`Up&u"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    bytes_0 = b"\xf1\x91%\xce\x87t\x1c\x1d\xfaq\xc5\xf0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    int_0 = 2231
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    auto_0 = module_1.auto()
    none_type_0 = None
    module_3.subn(auto_0, none_type_0, auto_0, flags=auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    bytes_0 = b"\xfb\x1b\x92\x9dc_\xad\x9d\x91\x17\x1e-L\x89f\xe1u"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    bytes_0 = b'B\xd3"\xacgf'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    complex_0 = 222.2 + 1368.2969j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    bytes_0 = b"\xc1\x06W\x8c\x91|\x0e\xf7Ad\x0b"
    var_0 = module_3.compile(bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_3428():
    float_0 = 2.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    str_0 = "\"b'UrNAvq\x0b0JmgN"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    bool_0 = False
    bytes_0 = b"\xed\xd0\x9dNh\xc5\xc2"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    str_0 = ""
    var_0 = module_3.compile(str_0)
    var_1 = module_3.split(var_0, str_0)
    module_0.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    int_0 = 936
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    bytes_0 = b"&\xf1\xe3\xed\x0e\x8a3\x92\x19\xae\xf2"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_3.fullmatch(bytes_0, bytes_0)
    tuple_0 = (bytes_0, list_0, var_0)
    module_3.subn(tuple_0, var_0, bytes_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    int_0 = -991
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    var_0 = module_3.purge()
    dict_0 = {var_0: var_0, var_0: var_0}
    module_3.Scanner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    int_0 = -3382
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    int_0 = -4689
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    str_0 = "Xp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    str_0 = "CT&9c2F{"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    str_0 = "AMHG0cc>,\tHQ]i^"
    var_0 = module_3.split(str_0, str_0)
    module_3.finditer(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    base_exception_0 = module_4.BaseException()
    module_3.sub(base_exception_0, base_exception_0, base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3445():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, none_type_0)
    module_3.finditer(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    str_0 = "`#m2~#&J@'"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    bytes_0 = b"Tf\x1aNs:\x19\xfet\xfd\x86\xe2\x8a\xa8"
    var_0 = module_3.split(bytes_0, bytes_0)
    tuple_0 = (bytes_0, var_0, var_0, var_0)
    module_0.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_3.sub(exception_0, exception_0, exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    int_0 = 1530
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    str_0 = "(lQ;[$5"
    module_3.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    int_0 = 698
    none_type_0 = None
    module_3.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    int_0 = 1064
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    float_0 = 424.452
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    int_0 = -1915
    int_1 = 3
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    bytes_0 = b" {7+\x8ds\x12Y\x1e"
    module_3.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    int_0 = -1821
    none_type_0 = None
    module_3.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    set_0 = set()
    module_3.search(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3467():
    int_0 = 1281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    str_0 = "X0@,#aiqZ\\76V>lv"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    float_0 = -1154.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    bytes_0 = b"\xed9-\xcd\xe6b\x91\x82\xf60\xa2\x93\xcf"
    var_0 = module_3.search(bytes_0, bytes_0)
    module_0.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bytes_0 = b"\x05T\x9c\xfe\x93\x00\x8c\x92\x90\x04\x84^\xeb"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    bytes_0 = b"\x1a\x99\xd6\xdeS\x11\x88y\xa8pD\x19Z"
    none_type_0 = None
    module_3.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    bytes_0 = b"\xf1\xf0tUas\x8dPc\xca|\n\xd1\xe2\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3474():
    none_type_0 = None
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    with pytest.raises(TypeError):
        var_1.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    float_0 = -4408.98602
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    str_0 = "P~:t5hjo$9;f64iNf/pn"
    dict_0 = {str_0: str_0}
    module_3.split(dict_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    int_0 = 553
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_3.fullmatch(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    bytes_0 = b"`\xd3\xce\x94\x9a\xf6P\x04f\x96\x8e@\xaa\x9b\xef\x03\xe5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    list_0 = []
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    set_0 = set()
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    bytes_0 = b"\x8e\x95P\xad1\xe6@\xe4\xbb\xf4\xea\xffXn@\xab\x02D\xe2"
    module_3.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    none_type_0 = None
    module_1.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    object_0 = module_4.object()
    module_3.template(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    bool_0 = False
    str_0 = "g/\x0b^zpq6%feQ1\x0bYN}HH"
    tuple_0 = (bool_0, str_0, bool_0)
    module_3.finditer(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    str_0 = ""
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    complex_0 = -3321 + 2055.591j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    enum_dict_0 = module_1._EnumDict()
    module_3.Match(**enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    float_0 = -764.24824
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    int_0 = -1798
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    base_exception_0 = module_4.BaseException()
    none_type_0 = None
    module_0.get_new_command(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    float_0 = -1564.2
    module_3.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    str_0 = "%\rH(0Bq\\\\"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    str_0 = "MeW"
    dict_0 = {str_0: str_0, str_0: list_1}
    module_4.Exception(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0)
    dict_0 = {tuple_0: var_0, var_0: tuple_0, tuple_0: var_0}
    module_3.finditer(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    bytes_0 = b";w\x05\x1f\xa7\x87rc\xbc\xbc\x01\x115{N"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    bytes_0 = b"\x0e\x14\xf2\xfd'\x04\xa9\xa9\x83\xb2\xd2#\xc9"
    var_0 = module_3.escape(bytes_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: var_0, var_0: bytes_0, var_0: bytes_0}
    module_0.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    bytes_0 = b"U"
    module_3.finditer(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    bool_0 = False
    module_3.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    int_0 = -1645
    tuple_0 = (int_0,)
    module_3.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    var_0 = module_3.purge()
    module_3.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    str_0 = "4n6Au-%v!$4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    int_0 = -5011
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    float_0 = 808.7
    module_3.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    bytes_0 = b"\x0e\xf7\xb2%=:\xdfl\x0c"
    var_0 = module_3.compile(bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    float_0 = -3933.27417
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    complex_0 = 1175.62302 + 1037.5j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    tuple_0 = ()
    module_3.compile(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    str_0 = "Z`3:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    str_0 = "$'sGrthv"
    none_type_0 = None
    module_3.split(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    str_0 = "dM\t4Yk]-9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    bytes_0 = b"Y\xbf\x84\xe9?4U<r\xf0\xfe\x93\xdb\xfb\x81"
    var_0 = module_3.sub(bytes_0, bytes_0, bytes_0)
    bool_0 = True
    none_type_0 = None
    module_3.sub(bool_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    error_0 = module_2.Error()
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(error_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bytes_0 = b"\xe9\x04<\x8a\xe0x\xb8\xf9F\xc9k\x02G\x0fke7\x87C\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    complex_0 = -835.603868 - 97.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    none_type_0 = None
    str_0 = "d!>N "
    module_3.search(none_type_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


def test_case_3526():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3527():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    int_0 = -160
    var_0 = module_3.purge()
    var_0.__delattr__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    str_0 = "@AO,TrlB25"
    var_0 = module_3.fullmatch(str_0, str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    error_0 = module_2.Error()
    var_0 = module_3.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    float_0 = -2347.3
    module_3.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    int_0 = 124
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    none_type_0 = None
    bytes_0 = b"'G\x08\xfd\x84"
    var_0 = module_3.findall(bytes_0, bytes_0)
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    str_0 = "86g\rZ]cTNu8Yx\x0cif"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    bytes_0 = b")\xa0\x9c<\xf6?\xe2\xd55\xe1\xc3\x1e\x8d\xbe=\xd9\x81!\xec\x8c"
    module_3.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    str_0 = 'M4uq8"X~X_o\x0bnoP?e'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    int_0 = 1775
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    base_exception_0 = module_4.BaseException()
    none_type_0 = None
    module_0.match(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    bytes_0 = b"\xc0\x97\x9c\xb5!\xe0\xaeP\xd7|\x99\x17\xe1u3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    complex_0 = -38.729 + 1863.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    tuple_0 = ()
    module_3.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    list_0 = []
    module_1.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    regex_flag_0 = module_3.RegexFlag.ASCII
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    bytes_0 = b"F\xe6/-\x16\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    var_0 = module_3.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    str_0 = "7v+)\t0\x0cwJmo#6P"
    module_3.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    complex_0 = 1697.283 - 487.457877j
    set_0 = {complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    int_0 = 1009
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    float_0 = 2047.164535
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    bool_0 = True
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    float_0 = 3277.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    float_0 = 746.25409
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    complex_0 = -582.009177 - 854.996236j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    set_0 = set()
    none_type_0 = None
    module_3.split(set_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    float_0 = -3555.7
    list_0 = [float_0, float_0]
    module_3.subn(list_0, float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    int_0 = 1368
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    bytes_0 = b"\xe8\t\xc7\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    int_0 = -2431
    none_type_0 = None
    module_3.finditer(none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    str_0 = "f:+KK(@lQbHLDQ;0R"
    tuple_0 = ()
    module_3.split(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    str_0 = "~M^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    bytes_0 = b'%"\x99J\xd3\xd6\x86\x0b\x8e\x97{}\xa0U\x97\xcb3x\xc1'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    float_0 = 1714.6953
    module_3.Match(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_3572():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3574():
    float_0 = 745.492602
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    var_0 = module_3.purge()
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    bytes_0 = b"\xdf;\x96\xd8\xe1-\xe5\xb9\xf7:\x7f\xec"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    bytes_0 = b"\x0f\xe3}n\x03[\xcb\xdf\x8f\x07&\x82\xd2y\t\xd3\xd1\x92\xe7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    complex_0 = 427 + 1308.9356j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    bytes_0 = b'"(\x97\x1d\x90\xa9\xf8i;\xcaN\xbc~\xb4\xf4\xf5!'
    none_type_0 = None
    module_3.subn(none_type_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    float_0 = 3487.222
    module_3.split(float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    int_0 = 117
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    str_0 = "BT_"
    module_0.match(str_0, str_0)


def test_case_3587():
    list_0 = []
    exception_0 = module_4.Exception(*list_0)


def test_case_3588():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3589():
    int_0 = 261
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__call__(none_type_0, none_type_0, qualname=none_type_0, start=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    bytes_0 = b"\x13\xf1 \xd4=\xde#\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_3594():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    var_0 = module_3.purge()
    bytes_0 = b"\x91\xcd\xb20e\x1e\xd8\x9dQY"
    module_3.subn(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    dict_0 = {}
    exception_0 = module_4.Exception(**dict_0)
    module_0.get_new_command(exception_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    int_0 = 1275
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_3.split(dict_0, bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    dict_0 = {}
    bytes_0 = b"\xf4\x8aU\xdbW\xd8"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_3.search(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    int_0 = 1244
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    int_0 = 3909
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3609():
    str_0 = "J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    str_0 = "E0"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    int_0 = -1441
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    str_0 = "YMl#ot)\x0b(-\\6"
    bytes_0 = b"I\xdd\xe3R\xfc\xfa\xc0\x00=\xf3\xa7\xa9@\xf5\x04\xf2;"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: bytes_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    tuple_0 = ()
    module_3.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    var_2 = var_1.__bool__()
    module_3.fullmatch(var_2, var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    complex_0 = -1022.67 - 1101.31332j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    float_0 = -2166.9821
    list_0 = [float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    bytes_0 = b"\x15 \xb4`v\xe4\xc0g"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    float_0 = 2143.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    str_0 = '"&RxpI\x0c\x0bVc/Ez|}'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    int_0 = 3562
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    int_0 = -2601
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    bool_0 = True
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    bytes_0 = b"\xb1\x81\x1d|B\xb3{\x1a\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    str_0 = "dTZ([i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    float_0 = -3716.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    str_0 = "wB#tkZ|B"
    module_0.match(str_0, str_0)


def test_case_3633():
    float_0 = -3131.52
    var_0 = module_3.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    bool_0 = True
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    int_0 = -112
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    bool_0 = True
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    var_0 = module_3.purge()
    module_3.subn(var_0, var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    bool_0 = False
    none_type_0 = None
    module_3.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    str_0 = "O'1\x0c"
    var_0 = module_3.findall(str_0, str_0)
    module_0.match(var_0, var_0)


def test_case_3640():
    none_type_0 = None
    var_0 = module_3.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    none_type_0 = None
    module_3.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    int_0 = -2138
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    int_0 = -2255
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    bytes_0 = b'\xdd~\x17s\xd4\x97\xb3<\xc6"\x84\x8bV+\xb3\x8b\t'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_3.finditer(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    str_0 = "--{EJJbxV|]\t@q"
    none_type_0 = None
    module_3.sub(str_0, str_0, str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    bytes_0 = b"k\xaf\xc21\xba\xd5\xb5\x10W\x8d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    float_0 = 896.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    bytes_0 = b"\x8e\x98\n\xf3F\xe5\x7f\xe7_\x8a"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    float_0 = 1674.7727
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    bytes_0 = b"OTd"
    var_0 = module_3.findall(bytes_0, bytes_0)
    module_3.subn(var_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    var_0 = module_3.purge()
    module_3.split(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, pos=none_type_0)
    module_3.sub(error_0, error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    str_0 = "V=KlhxEv8#UT2^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    set_0 = set()
    none_type_0 = None
    module_3.subn(set_0, set_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    float_0 = -2972.547046
    bool_0 = False
    module_3.search(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    int_0 = -375
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    exception_0 = module_4.Exception()
    module_3.compile(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    int_0 = 100
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    var_0 = module_3.purge()
    var_1 = module_3.purge()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    str_0 = "]5KrSuux"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    float_0 = -6129.23619
    str_0 = "!d(\x0b,wR Qw"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    bool_0 = False
    module_3.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    bytes_0 = b"\x8c:\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    tuple_0 = ()
    bool_0 = True
    module_3.fullmatch(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    bytes_0 = b"\xa2)\x18'\xd5\x1f\xbf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    int_0 = 168
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    float_0 = -3389.649
    none_type_0 = None
    module_3.findall(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    str_0 = ""
    str_1 = "E5=6E%mY`8{;FT8G+GEO"
    var_0 = module_3.finditer(str_1, str_1)
    var_0.__contains__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    int_0 = 1565
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3683():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    float_0 = -1914.32585
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    bytes_0 = b"\xf2\xe1\xbf\xbe!~1\x19\x15\xc9\t\x1dxq\xd3m\x92"
    var_0 = module_3.finditer(bytes_0, bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    bytes_0 = b"\x0b\x839V"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    str_0 = "3\t.AhVd"
    none_type_0 = None
    module_3.split(str_0, none_type_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    bool_0 = True
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    bool_0 = True
    none_type_0 = None
    module_3.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    str_0 = "H=IDAy.dF33bu6Z^&n "
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    bool_0 = True
    bytes_0 = b"b\xce\xcf\x99S\x92\x06\x87\xf6\xa6\xb9\x12"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    enum_dict_0 = module_1._EnumDict()
    list_0 = [enum_dict_0, enum_dict_0]
    exception_0 = module_4.Exception(*list_0, **enum_dict_0)
    module_0.match(exception_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    var_0 = module_3.purge()
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    bytes_0 = b"\x06-Kq\x06\xe2\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    var_0 = module_3.purge()
    int_0 = 165
    module_0.match(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    none_type_0 = None
    int_0 = -1952
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    str_0 = "V<!UB[*N=z\x0cAKej"
    module_3.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    bool_0 = False
    none_type_0 = None
    module_3.fullmatch(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    module_0.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    int_0 = -236
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    float_0 = 3317.3215
    module_3.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    str_0 = "l7|%*0DG$Tpi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    var_0 = module_3.purge()
    module_3.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    none_type_0 = None
    module_3.escape(none_type_0)


def test_case_3716():
    exception_0 = module_4.Exception()


@pytest.mark.xfail(strict=True)
def test_case_3717():
    tuple_0 = ()
    module_3.findall(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    int_0 = 2968
    none_type_0 = None
    module_3.findall(int_0, none_type_0)


def test_case_3720():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3721():
    str_0 = '\r__)h\\"M+^TdD&#\x0b='
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    float_0 = -1263.7
    module_3.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    int_0 = 277
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    str_0 = "BC.Qv Vx}+J}c`"
    set_0 = {str_0, str_0, str_0}
    module_3.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    int_0 = 499
    module_3.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    str_0 = "d"
    str_1 = "\n="
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0, str_1: str_1}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    str_0 = "6$i`N]\t&\x0cN/Bi[c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_3731():
    str_0 = 'N>EEh"Tan'
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    int_0 = -3726
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    int_0 = 3286
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    float_0 = -1282.8368
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    str_0 = "v:1-|(iY8W/\\"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    var_0 = module_3.purge()
    module_3.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    bytes_0 = b"\x94l\xc9\x1b@K \x8c+\xf3J\x0b\x97usA\xb1x\x16R"
    var_0 = module_3.findall(bytes_0, bytes_0)
    module_3.subn(var_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    bytes_0 = b"\xfb\xda"
    module_0.match(bytes_0, bytes_0)


def test_case_3743():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3744():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_3.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    error_0 = module_2.Error()
    int_0 = -1843
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    bool_0 = False
    set_0 = {bool_0}
    module_3.search(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    int_0 = -1620
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    str_0 = "72}T"
    var_0 = module_3.finditer(str_0, str_0)
    module_0.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    int_0 = -185
    module_3.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    int_0 = -522
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    dict_0 = {}
    module_3.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    int_0 = -1313
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    str_0 = "as!YzFvFN!E{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    var_0 = module_3.purge()
    module_3.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    bool_0 = False
    none_type_0 = None
    module_3.sub(bool_0, bool_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    int_0 = 1086
    tuple_0 = ()
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    str_0 = ">\\7X.nzDY\tR8"
    dict_0 = {str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0, bool_0, bool_0, dict_0]
    module_3.sub(list_0, bool_0, bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    bytes_0 = b"}^\x9f\x14BBsC\xaa\x13*^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    str_0 = "4?RKnkz}v\n/%[l.#"
    tuple_0 = (str_0,)
    module_3.fullmatch(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    auto_0 = module_1.auto()
    module_3.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    bytes_0 = b"\xcf;\xd1\x10vgw\x7f\xd2O\xef\x00\xc5\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    bytes_0 = b"\x98h\x8a\x8a\x002@+0\xd5I\x9aj<Z\x8a\x9b\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    int_0 = -2721
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    float_0 = -1260.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    bool_0 = True
    none_type_0 = None
    exception_0 = module_4.Exception()
    module_3.split(bool_0, none_type_0, flags=exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    int_0 = 3417
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    bool_0 = False
    bool_1 = True
    module_3.split(bool_0, bool_0, flags=bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    var_0 = module_3.purge()
    module_3.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    bytes_0 = b"\xb2."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    float_0 = -1363.57388
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    dict_0 = {}
    module_3.split(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    bytes_0 = b"=\x96\x9b\x8eo]\xc8F;Ja\x14\xe4\xd3\xec'"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    int_0 = -942
    module_3.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    str_0 = "Y;_A'c?FcJSu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    str_0 = " NV]{i&|u\\"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    int_0 = 2652
    module_3.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    bool_0 = True
    none_type_0 = None
    module_3.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    float_0 = -2333.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    int_0 = -608
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    none_type_0 = None
    str_0 = 'p"\x0c!jksd(j\rj'
    module_3.split(none_type_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    str_0 = "Z|IUq"
    var_0 = module_3.compile(str_0)
    module_0.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    float_0 = -291.46979
    module_3.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    int_0 = -658
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    float_0 = 1919.45
    error_0 = module_3.error(float_0, float_0)
    list_0 = []
    exception_0 = module_4.Exception(*list_0)
    none_type_0 = None
    module_3.fullmatch(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    bytes_0 = b"\xe5\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_3.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    module_3.sub(dict_0, bool_1, bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    dict_0 = {}
    module_3.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    float_0 = 3535.81
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    bytes_0 = b"\x86\x13\xf5U\x95Z@\xf0\xcf\xcf\xd3\x8b\x99\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    bool_0 = True
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    int_0 = 1246
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    set_0 = set()
    none_type_0 = None
    list_0 = [set_0, set_0]
    module_3.sub(list_0, none_type_0, none_type_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    int_0 = -2454
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    int_1 = -630
    tuple_0 = (int_0, int_0, var_1, int_1)
    var_2 = module_3.purge()
    var_2.__setitem__(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    str_0 = ")Op((i6gL;"
    module_3.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    base_exception_0 = module_4.BaseException()
    module_3.compile(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    int_0 = 3096
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    var_0 = module_3.purge()
    var_0.__delattr__(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    str_0 = "iF9I]G~*^h/\rBWT$?q56"
    bool_0 = False
    module_3.split(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    int_0 = 1481
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    str_0 = "~jD`3!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    none_type_0 = None
    module_1.EnumMeta(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    bytes_0 = b"\x05z"
    bool_0 = False
    module_3.fullmatch(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    str_0 = "B}3|\t`R~h|L;@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__call__(none_type_0, none_type_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    bytes_0 = b"P\xcc\xf3[\x18\xdf\xc9n)\xbb\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    str_0 = "!\r0CXI$Yv}\x0b{"
    var_0 = module_3.escape(str_0)
    module_0.match(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    str_0 = "QFDWVnj} *6tC"
    list_0 = [str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    bool_0 = False
    none_type_0 = None
    module_3.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    str_0 = "L"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    bytes_0 = b"\x9d\xf13\x99y\xc0Bm\xb0N(="
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    bytes_0 = b"\xfe"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    error_0 = module_2.Error()
    set_0 = {error_0, error_0, error_0, error_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    none_type_0 = None
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    var_1.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    bytes_0 = b"9"
    var_0 = module_3.template(bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    str_0 = "R\x0c/>\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    int_0 = 1235
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    none_type_0 = None
    module_2.Error(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    bytes_0 = b"\xab\xc9\xc0\x08dp$\x8dL="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    int_0 = 684
    module_3.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    none_type_0 = None
    bytes_0 = b"\n\xf8\x15\xbf{\xee\x97\xbf\x9bF.\x80\xfc\xfb\xf3\xab\xbc\x89\x9c"
    module_3.subn(none_type_0, bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    bool_0 = False
    str_0 = "\x0bil}B"
    var_0 = module_3.fullmatch(str_0, str_0)
    var_0.__setattr__(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    bytes_0 = b"\xd5\x1b\x13`0Y\xcbZ\xcd\xef\x0cs\xa1\xd0\t\xe6\xdf\x06\x0b"
    none_type_0 = None
    module_3.split(bytes_0, none_type_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    int_0 = 93
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bytes_0 = b"\xfd\xb4\xb5+\x02p\xe1F+yR\x91\xa7\x89&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    enum_dict_0 = module_1._EnumDict()
    module_0.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    str_0 = "E\x0ccF`6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    bytes_0 = b"i"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    var_0 = module_3.purge()
    bool_0 = False
    module_3.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    dict_0 = {}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    regex_flag_0 = module_3.RegexFlag.IGNORECASE
    module_0.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    bool_0 = False
    module_3.Pattern(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    str_0 = "+|YY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    bool_0 = True
    str_0 = ""
    set_0 = {bool_0, bool_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    int_0 = 993
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    bytes_0 = b"E\xdc\x92\xf6tN\xabe'\x94\x0cLE\x8b["
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    none_type_0 = None
    float_0 = 786.29
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    bool_0 = True
    none_type_0 = None
    module_3.finditer(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    int_0 = 310
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    bytes_0 = b"\xa7?\xec\x83\x11\x12\xd3\xfc\x14\xe2\xec\xe1\xb8=\xed\xe3\x9c|\x82A"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    complex_0 = 2786 + 475.4j
    module_3.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    bool_0 = False
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    str_0 = "nx\x0c8"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    int_0 = -1356
    var_0 = module_3.purge()
    set_0 = {int_0, int_0, var_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    bytes_0 = b"i&\xe3\xa3"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    dict_0 = {}
    module_3.Pattern(*list_0, **dict_0)


def test_case_3877():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3878():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "PVrB:uLfhD~6eD[\r"
    dict_0 = {str_0: str_0}
    module_4.BaseException(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    bool_0 = True
    none_type_0 = None
    module_3.fullmatch(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    float_0 = 5828.421
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3884():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    int_0 = 505
    module_3.subn(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    str_0 = "^=s8ssE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    float_0 = -2263.0
    none_type_0 = None
    float_1 = 1206.88
    module_3.split(float_0, none_type_0, flags=float_1)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3889():
    set_0 = set()
    module_3.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    complex_0 = 4569 - 1195.35923j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    list_0 = []
    module_1.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3894():
    int_0 = 3492
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    bool_0 = False
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    bytes_0 = b"?\x84\x7f\xf7\x87R\xcf\xb1\xfbWsgH\x0f@#\x8d"
    var_0 = module_3.purge()
    var_0.__iter__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    set_0 = set()
    module_3.Scanner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    str_0 = "l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    complex_0 = -547.943 + 4244.016j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    str_0 = "is|"
    var_0 = module_3.findall(str_0, str_0)
    tuple_0 = (var_0, var_0)
    module_0.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    tuple_0 = ()
    module_3.search(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    bool_0 = False
    none_type_0 = None
    module_3.split(bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    int_0 = 3776
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    module_1.EnumMeta()


def test_case_3907():
    bytes_0 = b"|B\xdb\xb3mt\x95\xe0\x8b\xfb\x85\xdd\xc0h:w\x1f"
    var_0 = module_3.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    int_0 = 3375
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    bool_0 = True
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    str_0 = "MJB@f*6*3x3A"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    int_0 = 2258
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    float_0 = -1900.42
    module_3.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    complex_0 = -2300.389 + 423.089j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    int_0 = 2458
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    str_0 = ",ExK* bAg;HlQk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    str_0 = "&t`zBN]5teJI,RZbxa"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    exception_0 = module_4.Exception(*list_0)
    module_3.finditer(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    str_0 = "j^L'>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    bytes_0 = b"p\xa8\x11\xdc\xda"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    dict_0 = {}
    module_3.sub(dict_0, dict_0, dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    list_0 = []
    exception_0 = module_4.Exception(*list_0)
    module_0.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    set_0 = set()
    module_3.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    exception_0 = module_4.Exception()
    module_3.subn(exception_0, exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    complex_0 = -426.2 + 229.85811j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3929():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3930():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    bool_0 = False
    module_3.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    str_0 = "v<+x%yps9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    float_0 = 833.2
    tuple_0 = (float_0,)
    bool_0 = True
    module_3.findall(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    int_0 = 2477
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    bool_0 = True
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    int_0 = -1093
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    float_0 = 3943.7579
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    bool_0 = False
    var_0 = module_3.purge()
    var_0.__setattr__(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    bytes_0 = b"F"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    bool_0 = False
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    bool_0 = True
    module_3.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    str_0 = "4HO#TS&H|sX/yH\ng?U"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_4.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    none_type_0 = None
    str_0 = "~w5MwPT5"
    var_0 = module_3.compile(str_0)
    var_0.__call__(none_type_0, none_type_0, qualname=none_type_0, type=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    str_0 = "P2He1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    int_0 = -306
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    int_0 = -2453
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    str_0 = "b#B&+ahj{Hm^4|($ "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    bytes_0 = b"\xcd\xb4\x8b\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    module_0.match(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    int_0 = -639
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    str_0 = "Q d\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    str_0 = "GM`;"
    module_3.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    int_0 = 636
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    set_0 = set()
    module_1.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    none_type_0 = None
    bool_0 = False
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    bytes_0 = b"r\xbf\xfaB\xa9T\xbfE\xef\xf5\xf2pC\xa6\x06\xe9\xb9\x1ck\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    bytes_0 = b"\xb2\x18Rc\xd1\x024\xa2\xef\xb8A6K\xa6fr\x06\x97"
    var_0 = module_3.escape(bytes_0)
    var_1 = var_0.__dir__()
    module_0.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    str_0 = "[$m\rw__y=u5wG\x0bS&[:%"
    set_0 = {str_0}
    module_1.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    int_0 = 5450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    bytes_0 = b"\xdbR\xcf3\xe4\n\xcb\x1b"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    regex_flag_0 = module_3.RegexFlag.DOTALL
    module_3.split(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    var_0 = module_3.purge()
    module_3.Match(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3971():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    module_3.finditer(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    float_0 = 2615.66681
    module_3.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    bool_0 = False
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    str_0 = "/Zk2=Jd8xAC`W&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    bytes_0 = b"Z\x14\xa2_%uy\xaf*:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    float_0 = -1244.0
    module_3.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    bytes_0 = b"*\x0c<\x94J\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    str_0 = "U~ylcBXr{O9H/]Ga"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    str_0 = "=ha:I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    bool_0 = False
    module_3.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    int_0 = -911
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    int_0 = -1227
    none_type_0 = None
    module_3.search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    int_0 = 1421
    none_type_0 = None
    error_0 = module_3.error(int_0, none_type_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    object_0 = module_4.object()
    str_0 = "Q3+!"
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    bytes_0 = b"k\xd0\xe2\x84\xdd\xabw\x03D1'\xdb\xee\xf1\xac"
    var_0 = module_3.template(bytes_0)
    tuple_0 = ()
    module_3.template(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    bytes_0 = b"\x915c\xbaD\xc6\xdd=\xa0B~M\xaa\x92\xf6\xa9\xb0L"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    float_0 = 1261.712482
    tuple_0 = (float_0,)
    module_3.split(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    bytes_0 = b"?l\x8b\x19{]IN\xa3\xcd\xc1\x86&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_3997():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3998():
    float_0 = -2409.92657
    list_0 = [float_0]
    module_3.Match(*list_0, **float_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    float_0 = 1855.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    int_0 = -3542
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    complex_0 = -2723 - 4322.342j
    module_3.sub(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    tuple_0 = ()
    module_3.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4006():
    str_0 = "g!}*8!oa*d\\l%y*A"
    str_1 = "4mz6b/5';`"
    str_2 = "m&!BZ>%Dc<?"
    dict_0 = {str_1: str_0, str_2: str_2}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    int_0 = 1406
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    str_0 = "M"
    dict_0 = {str_0: str_0}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    bool_0 = True
    module_3.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    tuple_0 = ()
    none_type_0 = None
    module_3.sub(none_type_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    bool_0 = False
    module_3.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    str_0 = "qs\x0b>v`w)\tUOqI"
    module_3.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "Z@h8Dr;mynCK967L#jR"
    module_2.Error(*list_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    int_0 = -879
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    complex_0 = 3172.6476 - 609.4j
    str_0 = "0<^4S%s:vuC"
    list_0 = [complex_0, str_0, complex_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    bytes_0 = b"\xa4s)\x87\x15\x97\xc2\xfd\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    str_0 = "}2UC;e\ny"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    bytes_0 = b'\x03\x8a\xb3"\x95\x08\xd8o\xb7t\x14)'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    str_0 = "E7!x{BZGM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    exception_0 = module_4.Exception()
    module_0.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    float_0 = 3981.41211
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    str_0 = "w\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    set_0 = set()
    module_1.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    float_0 = 3072.3
    module_3.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    str_0 = "gR5R"
    none_type_0 = None
    module_3.finditer(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    bool_0 = True
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    str_0 = "b\x0c-ELso!HM\x0b"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_3.search(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    int_0 = -1232
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    str_0 = ";\x0c0.{;ZE[,u[t#wcJ7"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4039():
    str_0 = "M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    bool_0 = False
    none_type_0 = None
    module_3.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    var_0 = module_3.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    bool_0 = True
    module_3.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    float_0 = 438.7602
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    int_0 = -496
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    var_0 = module_3.purge()
    module_3.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    var_0 = module_3.purge()
    module_3.fullmatch(var_0, var_0, var_0)


def test_case_4048():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4049():
    bytes_0 = b"\xdc-\xc7p\xa2\x9a\x97LH"
    module_3.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    str_0 = ":AXpIa{Mr\r\nO{?T2"
    error_0 = module_3.error(str_0, str_0)
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    regex_flag_0 = module_3.RegexFlag.TEMPLATE
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4053():
    int_0 = 1133
    module_0.get_new_command(int_0, int_0)


def test_case_4054():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4055():
    int_0 = -3304
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    int_0 = -2451
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    bytes_0 = b"Nf\xb4Fk\xac^\x19\xaf\x87[R\x7fe\x02\xfa\xde;\xd2"
    module_3.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    str_0 = "\x0cwfzwb\x0c+"
    var_0 = module_3.escape(str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_4062():
    int_0 = -2997
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    list_0 = []
    module_3.subn(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    list_0 = []
    module_3.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_0.match(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_3.sub(enum_dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    str_0 = "\\fu&_$ ,d|\x0b<FF\r"
    var_0 = module_3.compile(str_0)
    module_3.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    bytes_0 = b"\xe0\xea"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    exception_0 = module_4.Exception()
    module_3.finditer(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    list_0 = []
    module_3.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_3.split(tuple_0, tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    dict_0 = {}
    none_type_0 = None
    module_3.fullmatch(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    int_0 = 3547
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    int_0 = -1062
    var_0 = module_3.purge()
    float_0 = 1062.1605
    module_3.sub(int_0, var_0, var_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4077():
    enum_dict_0 = module_1._EnumDict()
    module_3.fullmatch(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    bytes_0 = b"\xfa)@\xc5"
    module_3.Pattern(*bytes_0)


def test_case_4079():
    none_type_0 = None
    var_0 = module_3.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    dict_0 = {}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    str_0 = "zw[`\\KKh"
    none_type_0 = None
    module_3.subn(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    int_0 = -2086
    module_0.match(int_0, int_0)


def test_case_4086():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4087():
    var_0 = module_3.purge()
    int_0 = -3142
    none_type_0 = None
    module_3.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    str_0 = "g\x0c)3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    complex_0 = -1893.9 + 58j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    int_0 = 3814
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    str_0 = "cgurKr"
    str_1 = "\x0ch~ ;h+V]*\t)#KvLn"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    str_0 = "5 +I<z)S;BK\r70} "
    module_3.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    var_0 = module_3.purge()
    var_0.__len__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    float_0 = 1121.0147
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    bytes_0 = b"\x04\xe7U\xe3\xb5\xb2\x08"
    module_3.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    str_0 = "=fXgtM@cQL5)PFKI\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    str_0 = "IR3)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    bytes_0 = b"$<\xdc\xf3f\xee\xb8\x8b/\xdd\x1dfX\x11\x15zS"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    bytes_0 = b"\xc7\xbc\x91\xe3\xdc\x1e\xfc\xb0J\xf8\x8c"
    var_0 = module_3.match(bytes_0, bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    bytes_0 = b"\xbe\x91`\xb7hf\x96\xdf\xf4\x9d?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    int_0 = -4269
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    int_0 = 1008
    module_3.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    float_0 = 1114.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    float_0 = 2880.7433
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    int_0 = 141
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    float_0 = 1119.1577
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    var_0 = module_3.purge()
    module_3.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    int_0 = 3093
    module_3.sub(int_0, int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    int_0 = 1759
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    var_0 = module_3.purge()
    var_0.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    var_0 = module_3.purge()
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4118():
    bytes_0 = b"\xcerm\x85vE\xf6i\xbdNg7\x8at\xc6\xf1\xa0F"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    none_type_0 = None
    bytes_0 = b""
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    bytes_0 = b"q\x98\xfd\x9em\xff 2\x88\x84{\x9bTw\x97"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    int_0 = 172
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    int_0 = -3676
    none_type_0 = None
    module_3.split(int_0, none_type_0)


def test_case_4124():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4125():
    bytes_0 = b"\xf9?\x1f<\x93\x8bLk"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    set_0 = set()
    bool_0 = False
    module_3.finditer(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    str_0 = "T65sQ`&?->}eul]`G,Y"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    int_0 = -784
    module_3.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    error_0 = module_2.Error()
    module_3.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    str_0 = '\x0cw<?@A!"E9N'
    error_0 = module_3.error(str_0)
    module_3.split(error_0, str_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    float_0 = 657.159078
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    bytes_0 = b"\x99\xa2K\x90"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    str_0 = "Ck.uc=Mx9Ex"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    int_0 = 1604
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    str_0 = "mTEAh\rc"
    none_type_0 = None
    module_3.sub(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    none_type_0 = None
    float_0 = 170.475
    module_3.sub(none_type_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    bool_0 = False
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    bool_0 = True
    module_3.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    int_0 = 515
    module_3.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    int_0 = 2278
    module_3.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    float_0 = 1034.3946
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    str_0 = "i\t;,k{\tD&S>Eh-4r^m<z"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    int_0 = 5929
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    int_0 = -898
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    bytes_0 = b"\xbe]\xf1\x97a\xed>\x89:v\xa1C\xc114\x9c"
    base_exception_0 = module_4.BaseException(*bytes_0)
    module_0.match(base_exception_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    bytes_0 = b"a\x00\xd2\xd0&\xf8\xba"
    none_type_0 = None
    module_3.subn(bytes_0, bytes_0, bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    str_0 = 'kEf"s>'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    bool_0 = True
    none_type_0 = None
    module_3.compile(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    set_0 = set()
    error_0 = module_3.error(set_0, set_0)
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4155():
    bytes_0 = b"\x99\r\x12+-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    bytes_0 = b"\xc1"
    module_1.auto(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    int_0 = 3359
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    bytes_0 = b":\t:\n\xa5\xa1\xdb\x9c\xdb\xb1\xa1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, bytes_0, dict_0)
    module_3.sub(tuple_0, bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    float_0 = -1289.368313
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    bool_0 = True
    none_type_0 = None
    module_3.sub(bool_0, none_type_0, bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    float_0 = 1062.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    complex_0 = 322.67 + 1338.268996j
    module_3.error(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    str_0 = "X:q'20?yfQ/s\x0c"
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    module_0.match(str_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    int_0 = 621
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    complex_0 = 2467 - 1286.5603j
    set_0 = {complex_0}
    list_0 = []
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    var_0 = module_3.purge()
    str_0 = "c4eo%$Wo>(FRntH"
    set_0 = {str_0}
    module_3.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    str_0 = "+#Er1VMWz!\\Y$"
    str_1 = ">@nr\nqWu)w"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    none_type_0 = None
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    var_1.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    str_0 = "EbW`q$SGf6iT3 uto"
    error_0 = module_3.error(str_0, pos=str_0)
    module_0.get_new_command(error_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    tuple_0 = ()
    none_type_0 = None
    module_3.subn(tuple_0, none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    bytes_0 = b"O\x95\xc37\xc2\x0eE,^"
    module_3.subn(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    complex_0 = -138.058863 - 1793.232473j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    tuple_0 = ()
    var_0 = module_3.purge()
    var_0.__delattr__(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    bytes_0 = b"?\xf4\x7fS\xc9\xccj"
    list_0 = [bytes_0]
    int_0 = -807
    module_3.fullmatch(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    int_0 = 1585
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    int_0 = 1440
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4188():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    str_0 = "rWX4en"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    var_0 = module_3.purge()
    module_3.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    int_0 = 270
    module_3.subn(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4193():
    int_0 = 3504
    module_3.subn(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_3.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    int_0 = -784
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    bytes_0 = b"\x9b\x1b\xd8\x8f\xc9F\x05S\xcb\xc4d\xb17\\\x8aU\x91\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    int_0 = -2159
    none_type_0 = None
    module_3.sub(int_0, none_type_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    var_0 = module_3.purge()
    module_1.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4201():
    int_0 = -3334
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    int_0 = -666
    none_type_0 = None
    module_3.search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    float_0 = -2559.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    complex_0 = 756.296 + 2200.6164j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    bytes_0 = b""
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    none_type_0 = None
    int_0 = -414
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    str_0 = "EDc{wQb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    tuple_0 = ()
    module_3.Scanner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    bytes_0 = b"\x9b=^"
    none_type_0 = None
    module_3.subn(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    var_0 = module_3.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    str_0 = "DlB(x+9;;xe"
    module_3.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    str_0 = "6"
    var_0 = module_3.subn(str_0, str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    int_0 = 1280
    module_3.Match(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    exception_0 = module_4.Exception()
    str_0 = "|W"
    str_1 = "9"
    dict_0 = {str_0: str_1, str_0: str_0, str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    bytes_0 = b"\\\xc3kD\xd9CrD\x06\xc7\xd0\x8eF\x0b\x8c\x01\xbb&\x0f"
    var_0 = module_3.split(bytes_0, bytes_0)
    module_0.get_new_command(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    str_0 = "L=z]&'x~ieqp3K09"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    float_0 = -570.367
    module_3.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    bytes_0 = b"u\x87\xa8\xf31\x11\xc5\xbf\x13go9\x16\xf5\xf7\xa4\xbdn0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    exception_0 = module_4.Exception()
    var_0 = module_3.purge()
    module_3.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    set_0 = set()
    tuple_0 = ()
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    float_0 = -196.8
    none_type_0 = None
    module_3.subn(float_0, none_type_0, none_type_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    complex_0 = 559.5742 - 1500.126507j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    int_0 = 3482
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    bytes_0 = b"\xa6s%\xe8\x18\x94c\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    bytes_0 = b"\x88\xba\xaas\xb3\x8a\xd7\x995"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    str_0 = "uB)_af@K,X[# \tKS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    str_0 = "}u\\ED6+'7G5(0[=7gv!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    set_0 = set()
    module_3.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    int_0 = 2311
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    str_0 = "1ueU3k>{n_.{(VRyD"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    int_0 = -635
    bool_0 = True
    module_3.subn(int_0, int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    bytes_0 = b"[\xda\xe6JY\xdd\xe1(\x11\xf2\x83\xd2\x0e\x0cH\xd5:WZ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    int_0 = -1164
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    bytes_0 = b"pA\x13\r\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    enum_dict_1 = module_1._EnumDict()
    enum_dict_1.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    bytes_0 = b"\x04m\xe0\xdf\xf6E\x97L\xb0~\xce/Kj0D\r\x9f\xc7\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    enum_dict_0 = module_1._EnumDict()
    module_3.compile(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    str_0 = '(2>H3.gbjW=F1_m\x0bp\\U"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    bytes_0 = b"\x0cXr"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    bool_0 = True
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    bytes_0 = b"\xbfQ\x1c\xb4l\xfa\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    bytes_0 = b"\x81=\xe0\xc64\xbd^NOSTTp"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    str_0 = "I|:o14\n\\BHEq9`6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    bytes_0 = b"\x9fY\xda\x97\xbfI%\xd0>\x92M\x13y2\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    str_0 = "zvG\"f|]ti=dPkC3oZ'\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    bytes_0 = b"J\xc0\xfbKN\x80\x1ba\xe1\x1e\xe8\xa6\xca\xb3\x10\x9e.P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    enum_dict_0 = module_1._EnumDict()
    int_0 = 845
    tuple_0 = (enum_dict_0, int_0, int_0, int_0)
    module_3.finditer(tuple_0, int_0)


def test_case_4257():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4258():
    bytes_0 = b"\x1d\x12\xe6\x9b\x8c\xfb%v\xe3j"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    enum_dict_0 = module_1._EnumDict()
    list_0 = [enum_dict_0, enum_dict_0]
    module_0.get_new_command(list_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_1, bool_1}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    bytes_0 = b"}"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    bytes_0 = b""
    none_type_0 = None
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    var_1.__getitem__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    complex_0 = -573.11 + 950j
    module_3.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    float_0 = -215.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    float_0 = -1923.7832
    none_type_0 = None
    enum_dict_0 = module_1._EnumDict()
    enum_dict_0.__setitem__(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


def test_case_4269():
    pass


def test_case_4270():
    enum_dict_0 = module_1._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_4271():
    int_0 = 749
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    int_0 = 754
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    str_0 = "xKc<&EI/*I@ UQiXU}A_"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_4.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    float_0 = 1827.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    int_0 = 3788
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    bytes_0 = b"\xfa0\xd9b\x10\x00\x18WuJ\xd9\xdf\xdb"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_3.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    var_0 = module_3.purge()
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_3.finditer(enum_dict_0, enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    bool_0 = False
    bytes_0 = b'\xd6\xca\x9c\xb2\t\x83C\x1f\nXT"'
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    str_0 = "CT\nsC"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    int_0 = -713
    module_0.match(int_0, int_0)


def test_case_4283():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4284():
    set_0 = set()
    module_3.sub(set_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_4286():
    float_0 = 555.39
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bool_0 = True
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    str_0 = "Ay|S(~\thC6rs~+6"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    int_0 = 79
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4292():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    none_type_0 = None
    int_0 = -1937
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    str_0 = "6T#"
    var_0 = module_3.findall(str_0, str_0)
    list_0 = [str_0, str_0, var_0, var_0]
    module_3.findall(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    int_0 = -2895
    module_3.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    int_0 = -4332
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    bool_0 = False
    int_0 = 3118
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    str_0 = "|JC/d&BN;"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_3.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    int_0 = -973
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    bytes_0 = b".\xa3\xad\xe8^"
    var_0 = module_3.fullmatch(bytes_0, bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4304():
    bytes_0 = b"\xecx\xac\x06"
    list_0 = [bytes_0, bytes_0]
    module_3.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    int_0 = 3962
    module_3.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    int_0 = -3030
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    complex_0 = -0.00707 - 3118.02928j
    none_type_0 = None
    module_3.findall(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    float_0 = -578.6
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    complex_0 = 1094.602136 + 2241j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    float_0 = -1750.8082
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    var_0 = module_3.purge()
    var_0.__setitem__(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    exception_0 = module_4.Exception()
    module_3.fullmatch(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    bytes_0 = b"\x9a\x1fB\x97\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    str_0 = "iuy>2z_Os"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    int_0 = -1526
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    int_0 = -2476
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    float_0 = 205.62217
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    complex_0 = 3850 + 746.45j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    int_0 = 1013
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    bytes_0 = b"\xfe\x08\xae+\xed\x08\x14\xe9A\xcb6J\x1d\xf3]\xd9z\x98N\xb8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    float_0 = -352.5
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    var_1.scan(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4324():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_4325():
    bytes_0 = b"\x8b\xc3\xb9\x85\xe9\xa4%\xbb\xdf\xf2%\x08T\xe3\xe8\xb0\xd5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    float_0 = 2782.8
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    bytes_0 = b"\x8a(6ed\x01r\xe5\r\x8b\x16\x96\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


def test_case_4330():
    bytes_0 = b""
    str_0 = "a<V\x0b)I*Z"
    str_1 = "x|yF084uB#V*}_eQ"
    str_2 = "KV\rZ-,RHF\nIKS6,"
    dict_0 = {str_0: str_0, str_1: bytes_0, str_2: str_2}
    var_0 = module_3.subn(bytes_0, bytes_0, bytes_0)
    with pytest.raises(TypeError):
        var_0.__new__(bytes_0, bytes_0, bytes_0, bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    dict_0 = {}
    module_3.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    str_0 = 'o",'
    var_0 = module_3.match(str_0, str_0)
    module_3.match(var_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    int_0 = -5122
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    base_exception_0 = module_4.BaseException()
    module_3.split(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    int_0 = -1025
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    bytes_0 = b"\xb9\x07$$\x9b\x80\x96\xff*1B\x1a\xc5`\xb2"
    none_type_0 = None
    module_3.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    int_0 = 244
    regex_flag_0 = module_3.RegexFlag.UNICODE
    module_0.get_new_command(int_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    int_0 = -1085
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    int_0 = 1122
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    str_0 = "I\x0cLz8^2A;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    float_0 = -2031.48
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    float_0 = -1846.79656
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    bytes_0 = b"\xdczt\xa9\x1c\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_1.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    bytes_0 = b"\x14 *\xa3TF\xb89V\x93\xbd\x8a\x0c!~\xb7'\x9eD["
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    str_0 = ""
    module_3.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    int_0 = -2759
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    bytes_0 = b"\xe9\x17\xe6\xce\xbe\xcd\x0c\xd2\n\x16\x1b\x11K\xbc\x9b"
    var_0 = module_3.split(bytes_0, bytes_0)
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    int_0 = -1095
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    bytes_0 = b"\xd0G\xbb\xa2\x87\x97N\xaf\xe1\xf3\x11=\xa3>"
    var_0 = module_3.escape(bytes_0)
    var_0.__iter__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    complex_0 = 2289.5 + 1377.24323j
    list_0 = [complex_0]
    dict_0 = {}
    module_3.Match(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    int_0 = -344
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    str_0 = "n|4Qb]1_3GxB67'){"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    int_0 = 106
    module_3.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    int_0 = -248
    module_3.split(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    bytes_0 = b"\xa2}l5\xb2\r%\xed\xab+\x80E\x95"
    bytes_1 = b"\x91\xe6\xc2+\x00<\xb2`\x98\xb7Y\x85\xabBR\xd1\xfc\x13"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    str_0 = "ZBvUx#TbT(J7J"
    module_3.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    exception_0 = module_4.Exception(*list_0)
    module_0.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bytes_0 = b"-\xe1q\x89\xfc\x81\xe2CM^\xca?T\x85\x08\x7f\xf4\x8e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    error_0 = module_2.Error()
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    str_0 = "Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


def test_case_4374():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4375():
    float_0 = -2754.71
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    int_0 = 943
    module_3.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    int_0 = -462
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    list_0 = []
    module_3.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    bool_0 = True
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    complex_0 = 3441.699635 + 1262.9655j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    int_0 = 2647
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    int_0 = -4426
    none_type_0 = None
    module_3.sub(int_0, int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    int_0 = 3531
    module_3.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    int_0 = -2647
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    bytes_0 = b"\x8b\xf2J\x82\xe6q\x1eq&\x94\x00\x15\x0c\xcat\x03\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    set_0 = set()
    module_3.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    float_0 = 2446.65517
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    int_0 = 1618
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    set_0 = set()
    module_3.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    int_0 = -603
    list_0 = [int_0, int_0]
    module_3.subn(list_0, list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_1.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    var_0 = module_3.purge()
    module_3.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    float_0 = 989.9
    module_3.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    bool_0 = True
    module_3.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    float_0 = 2843.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    none_type_0 = None
    bool_0 = False
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    str_0 = ""
    module_3.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    bool_0 = True
    bytes_0 = b"=\x00\x80\xab!"
    none_type_0 = None
    module_3.search(bool_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    str_0 = "Sp"
    var_0 = module_3.template(str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    int_0 = -1717
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    bool_0 = False
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    int_0 = -1791
    set_0 = {int_0, int_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    bool_0 = False
    none_type_0 = None
    module_3.search(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    bytes_0 = b"\x07\xda^\xd2\xca\x9a\xd9\x0b,`bx\xb8\xd5,\xd1\x89-\x8a\xb4"
    var_0 = module_3.search(bytes_0, bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    list_0 = []
    none_type_0 = None
    module_1.EnumMeta(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    int_0 = 1184
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    int_0 = -236
    module_0.match(int_0, int_0)


def test_case_4416():
    bytes_0 = b""
    str_0 = "9"
    var_0 = module_3.match(bytes_0, bytes_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    bytes_0 = b"\xfeS\xbcy"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    str_0 = ">"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_4.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, none_type_0)
    module_3.subn(error_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    int_0 = 1485
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    bytes_0 = b"`\xab:\x0e\xdc\xd1ty\xae\x8f"
    set_0 = {bytes_0}
    var_0 = module_3.purge()
    var_0.__call__(bytes_0, set_0, module=bytes_0, type=set_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    int_0 = -555
    module_0.match(int_0, int_0)


def test_case_4423():
    none_type_0 = None
    str_0 = "LO Rw.w^!bjp@W"
    str_1 = "%cf"
    str_2 = ""
    str_3 = ""
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    var_0 = module_3.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    str_0 = ':tk\r"]t,WL2'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    bool_0 = True
    module_3.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    int_0 = -383
    module_3.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_3.finditer(set_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    bool_0 = False
    module_3.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    int_0 = -374
    list_0 = [int_0, int_0]
    module_3.template(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    float_0 = -577.6
    module_0.get_new_command(float_0, float_0)


def test_case_4433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4434():
    bool_0 = True
    module_3.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    bytes_0 = b"\xda`\xec\xb3\x9d\x9e\x8b\x1e\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    float_0 = -1242.0
    module_3.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    float_0 = 2699.479
    none_type_0 = None
    module_3.subn(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    module_0.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    str_0 = "/*4Mc\x0b<|A(/F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    str_0 = "kFH@<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    str_0 = "|J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    str_0 = '"FC"j=]+lEW?dZ* !OG'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    float_0 = 1695.306451
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    list_0 = []
    exception_0 = module_4.Exception(*list_0)
    module_3.Pattern(**exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    bytes_0 = b"\xff\xedapMm7\xba\x857\xdfcT"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    str_0 = "1U-{7~6)EPg0"
    none_type_0 = None
    module_3.sub(str_0, none_type_0, none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    complex_0 = -3529.888 - 1976.83499j
    error_0 = module_3.error(complex_0)
    module_0.match(error_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    var_0 = module_3.purge()
    module_1.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    int_0 = -3634
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    str_0 = "$u_tv@Fmvq\nt1UI"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    complex_0 = -601.2262 - 1031.1409j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    str_0 = "<-"
    var_0 = module_3.findall(str_0, str_0)
    module_3.findall(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    float_0 = 776.37
    module_3.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    str_0 = "LMry`w\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    float_0 = 752.9966
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    bytes_0 = b"\x17"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    str_0 = "V99YWKS/,\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    str_0 = 'Pa~\x0cS\x0cqn"<m@<'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    int_0 = 2271
    set_0 = {int_0, int_0}
    module_3.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    str_0 = "s#LtF*REY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    int_0 = 1818
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    float_0 = 638.249976
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    var_0 = module_3.purge()
    dict_0 = {var_0: var_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    bytes_0 = b"\x83h8X\xba\x80[\xce{Q\x00\x9c|\x0c\x05\xff\x16N"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    str_0 = "yV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    int_0 = 3619
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    float_0 = -312.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    int_0 = -2590
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    str_0 = "AozoK;\n'\r{+L8N)yPZu9"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    bytes_0 = b"~0\xf1Wl\xa2\x05\t^\xff1\xce\x87\x0e\x87D\xb9\xdcT\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    float_0 = 737.67259
    module_3.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    bool_0 = True
    module_3.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    var_0 = module_3.purge()
    dict_0 = {var_0: var_0, var_0: var_0}
    module_0.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    var_0 = module_3.purge()
    module_4.object(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    str_0 = "UIvV*I$5XB)'c1"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    bool_0 = True
    none_type_0 = None
    module_3.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    float_0 = 2573.8225
    module_3.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    int_0 = 763
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    int_0 = -722
    set_0 = set()
    module_3.sub(set_0, int_0, int_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    bool_0 = False
    none_type_0 = None
    module_3.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    str_0 = "x$-v0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, none_type_0, none_type_0)
    module_0.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    str_0 = "j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    bytes_0 = b"\xa2r\xb4\x1f\x98#\x10Y\xca\x86\xc9\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    float_0 = -3952.752
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    bytes_0 = b'"%\xa3\\\xa0\x04\x0e\xb9x\x84'
    module_3.match(bytes_0, bytes_0, bytes_0)


def test_case_4498():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4499():
    float_0 = 2627.21804
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_3.search(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    float_0 = 4118.88799
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    bool_0 = True
    float_0 = -1918.718
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    none_type_0 = None
    str_0 = "\x0c)\r+kq=TEpOn;t"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    float_0 = 3155.0
    float_1 = -2037.45267
    set_0 = {float_1, float_1, float_0, float_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    list_0 = []
    module_4.BaseException(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    float_0 = 1985.25446
    module_3.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_3.subn(dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    str_0 = "n_i!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    int_0 = 1011
    module_3.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    bytes_0 = b":\x94\x1f\xc4vtf\xf6\x08\xd71\x9ao\xd0\x9f\x82n"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    str_0 = "(SQY[7WfD0j50"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4519():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    str_0 = '#A"\n,p(4I4gi?N'
    none_type_0 = None
    str_1 = "H>D>\tX!$ik/B~:"
    str_2 = "pG6(D\tm"
    str_3 = "+&)W!m"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    bool_0 = False
    module_3.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    float_0 = 4226.6332
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    bytes_0 = b"y\x05b\xe6\xaf\xf4\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    int_0 = -2570
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    float_0 = 1375.43739
    none_type_0 = None
    module_3.subn(float_0, float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    exception_0 = module_4.Exception()
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    float_0 = -1389.6153
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    none_type_0 = None
    bool_0 = False
    module_3.search(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    str_0 = "C:*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    int_0 = 1678
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


def test_case_4538():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4539():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    list_0 = []
    auto_0 = module_1.auto(*list_0)
    module_3.escape(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    enum_dict_0 = module_1._EnumDict()
    bytes_0 = b"\x9bj\t)\xea%\x7f\x08\xf89\x0f"
    list_0 = [enum_dict_0, enum_dict_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    var_0 = module_3.purge()
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    tuple_0 = ()
    module_3.search(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    float_0 = -376.611
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    str_0 = ""
    module_3.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    bool_0 = False
    module_3.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_3.template(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    float_0 = -1710.073326
    module_3.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    str_0 = "D\rl+VCQ{n6':-=\t0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    str_0 = "aOdA_\rG`{#\r>U7"
    var_0 = module_3.escape(str_0)
    var_1 = module_3.search(var_0, var_0)
    module_0.get_new_command(str_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    complex_0 = -1170 - 33.163261j
    module_3.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    bytes_0 = b"\x0cQ\xe1\xfd\xe9\x16tWF\xe96/K\x19\xc6"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bool_0: bytes_0}
    module_3.subn(dict_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    int_0 = 1513
    none_type_0 = None
    module_3.sub(int_0, int_0, int_0, none_type_0, none_type_0)


def test_case_4560():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4561():
    bytes_0 = b'\x9e\xbd^"h\x03'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    bytes_0 = b"\xde\xc5 \x140\xe1\xc9U\xe2\x90i"
    dict_0 = {bytes_0: bytes_0}
    module_3.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    complex_0 = -195 + 840.459302j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    str_0 = "}y_"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    int_0 = 1949
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    bool_0 = False
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    float_0 = -5258.85073
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    none_type_0 = None
    bool_0 = False
    module_3.split(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    bool_0 = True
    set_0 = {bool_0}
    module_3.search(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    none_type_0 = None
    error_0 = module_2.Error()
    module_0.match(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    int_0 = 2391
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    list_0 = []
    module_3.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bool_0 = False
    module_3.template(bool_0, bool_0)


def test_case_4576():
    int_0 = -626
    none_type_0 = None
    var_0 = module_3.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    float_0 = 1706.423255
    none_type_0 = None
    module_3.search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    float_0 = 1122.82061
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    int_0 = 1316
    set_0 = {int_0}
    module_3.compile(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    int_0 = -1112
    module_3.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    float_0 = -206.12
    module_3.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    int_0 = -1667
    module_1.auto(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    bytes_0 = b"\x9b=\x11\x0f\xder\n<Z\xc1\x962*8\x12k\x15\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    str_0 = "u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    complex_0 = 3342.15087 - 1591j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    complex_0 = -282.83259 - 723.34j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    bytes_0 = b"\xecGI\x15o\x7f\xddu\xee\xc373"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_3.split(bytes_0, bytes_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    str_0 = "K'X251.GhZ%lU0xI\x0c"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    list_0 = []
    none_type_0 = None
    module_3.Match(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    none_type_0 = None
    str_0 = "8RCWb{-%DCs/F"
    var_0 = module_3.match(str_0, str_0)
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    str_0 = "0?-nI%&ui{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    int_0 = -199
    module_3.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    bool_0 = False
    module_3.findall(bool_0, bool_0, bool_0)


def test_case_4599():
    var_0 = module_3.purge()
    var_1 = var_0.__bool__()
    with pytest.raises(AttributeError):
        var_0.__getattr__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    float_0 = 3104.547117
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    str_0 = "z%Jv45gj,g2E"
    str_1 = "K\x0bn"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_1: str_0}
    module_3.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    int_0 = -543
    module_3.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    bytes_0 = b"\nX;uE"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    bytes_0 = b"\xebR\xbb\xb8\xe9\x03\x1e*4\xa5\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    int_0 = -612
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    float_0 = -698.58572
    module_3.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    list_0 = []
    module_3.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    str_0 = 'CF }\x0b[b~E"5'
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_3.template(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    bool_0 = True
    module_3.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    bytes_0 = b"9\x10\xbc(\xe6\xf9\xbe"
    module_3.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    float_0 = -3100.0
    none_type_0 = None
    module_3.subn(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    float_0 = 1436.5173
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    bytes_0 = b"\xb7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4617():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    dict_0 = {}
    none_type_0 = None
    module_3.findall(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    float_0 = -726.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    bytes_0 = b"\x8f\xd1%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    float_0 = -968.3441
    module_3.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    str_0 = "z7S.XPP\x0bk. 8Yn]{y"
    var_0 = module_3.findall(str_0, str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    float_0 = -2246.044
    module_3.subn(float_0, float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_3.split(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    float_0 = -3530.104
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    var_0 = module_3.purge()
    module_1.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    str_0 = 'E6y<\nRg!"\t'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    var_0 = module_3.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    str_0 = "wO*8I94]>qOW#Ar6\tS%"
    str_1 = "B;J}4\rr}FzE\nv+\t"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    bool_0 = True
    none_type_0 = None
    module_3.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    var_0 = module_3.purge()
    float_0 = -2082.972
    module_3.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    bytes_0 = b"\x8c\xad\xc2{\xd2\x08\x84\xfd\xbcO\xd8\x03\xf9"
    str_0 = "BkTmc$V{x)<RgoO>6\x0c7"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    var_0 = module_3.purge()
    module_3.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    auto_0 = module_1.auto()
    set_0 = {auto_0, auto_0, auto_0}
    none_type_0 = None
    module_3.finditer(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    list_2 = [list_1, list_1, list_1]
    module_0.match(list_1, list_2)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    str_0 = "{KJgt\t}~Ch"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    var_0 = module_3.purge()
    module_3.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    bytes_0 = b"\x850 \x13c\xf7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    bool_0 = True
    bool_1 = False
    bytes_0 = b"qY\x80\xab\n\xda\x05;\x86\xc9\xf33<C\xa4j"
    tuple_0 = (bool_0, bool_1, bytes_0)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    int_0 = 4304
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    int_0 = 2868
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    float_0 = 522.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    bool_0 = True
    bytes_0 = b"F~o\x8d"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    int_0 = -2362
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    int_0 = 2700
    module_3.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    int_0 = -66
    none_type_0 = None
    module_3.search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    str_0 = "O\r|uM5]AP~YzEO8vL6j"
    error_0 = module_3.error(str_0, pos=str_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    bytes_0 = b"E\xfc\xc3\xe6L\x0b\xf5X7t\xb9\x11\x06c\x98\x828\x1d\xd7"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_3.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    int_0 = 1055
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    int_0 = 279
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    bytes_0 = b"s\xc0\x97\xca\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    str_0 = ""
    list_0 = [str_0]
    tuple_0 = (str_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    float_0 = 1088.9
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_3.fullmatch(float_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    complex_0 = -196.1 - 1225j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    bytes_0 = b"A\xf0\xb2\xe9 \x98\x9d6\xd1U\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    none_type_0 = None
    str_0 = "1"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    regex_flag_0 = module_3.RegexFlag.MULTILINE
    module_3.findall(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    int_0 = 1770
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    int_0 = 2882
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    float_0 = 13.47861
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    bytes_0 = b"$\xb0\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    dict_0 = {}
    int_0 = 2227
    list_0 = [dict_0, dict_0, dict_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    int_0 = 1449
    list_0 = []
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    str_0 = "%~{"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    bool_0 = False
    bool_1 = False
    module_3.findall(bool_0, bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    str_0 = "UcBQUTw65}G}!op"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    complex_0 = 496.42 + 282.92556j
    none_type_0 = None
    module_3.search(complex_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    float_0 = -1315.33764
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    none_type_0 = None
    error_0 = module_3.error(none_type_0)
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    none_type_0 = None
    module_2.Error(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    bool_0 = True
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    bytes_0 = b"\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    str_0 = "\\\x0c'<755.)~"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_3.split(dict_0, str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    bool_0 = False
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    float_0 = -1229.6
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    str_0 = "ZGG>07so}HD\t\t2<h( M_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"\xb3\xb7Z\xdc$\xf7#\xbc\xdc\x07\xd08|"
    tuple_0 = (list_0, bytes_0)
    module_3.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    int_0 = -2242
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    bool_0 = True
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4695():
    str_0 = 'Bg}6<,E7?q&V"cnG^\\p'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    tuple_0 = ()
    module_3.sub(tuple_0, tuple_0, tuple_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    bytes_0 = b"\xd7*\xa1W\xb6\xdb\xc7\xf9r\xbdX?\x8f\x19\xdd\xc5\xb2"
    module_3.sub(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    none_type_0 = None
    bytes_0 = b"\xe4\x94j"
    module_3.sub(none_type_0, none_type_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    complex_0 = 342.106 - 2260j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    int_0 = -2154
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    int_0 = 316
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    none_type_0 = None
    int_0 = 902
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    var_0 = module_3.purge()
    module_3.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    bytes_0 = b"T"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    float_0 = -2137.59
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    float_0 = 3011.115
    module_3.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    var_0 = module_3.purge()
    module_3.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    float_0 = 1919.81
    set_0 = {float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    bool_0 = False
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    str_0 = "P%\\9?8!9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_3.match(dict_0, bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    float_0 = 192.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    bool_0 = False
    str_0 = ""
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    str_0 = "\tPW..Qi8)3H"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    none_type_0 = None
    error_0 = module_3.error(none_type_0)
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    str_0 = "\nin\r3,=>_c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    float_0 = -3673.451
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_4727():
    list_0 = []
    module_3.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    str_0 = "#_CzY[\x0bj@mQ~+8!0Y,"
    module_3.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    str_0 = "/^nD27*\x0bQ~+~+qW9EF"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    complex_0 = 241.36225 + 394.95j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    bool_0 = False
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    int_0 = -3305
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    tuple_0 = ()
    module_3.split(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    complex_0 = -1483.84 - 203.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    none_type_0 = None
    bool_0 = False
    module_3.subn(none_type_0, none_type_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bytes_0 = b"\xb3\xf4\x03b/\xdf\xb4\xbcb\xc7\xdd\xa4;\xf0F"
    str_0 = "l"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    int_0 = -775
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    int_0 = -468
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    int_0 = 1380
    none_type_0 = None
    module_3.sub(int_0, int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    bytes_0 = b"\x95\xab\xcb\xea\xf63\xecZ\xad"
    module_3.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    int_0 = 421
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    var_0 = module_3.purge()
    module_3.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


def test_case_4747():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4748():
    bytes_0 = b"\xb0\xa1\xc9C=ej3>`\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    int_0 = 1237
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    int_0 = 4018
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    str_0 = "yhY\t`AwLhx\x0ctk%Qlx\x0bC>"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_4752():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4753():
    int_0 = 1867
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    float_0 = -131.148108
    dict_0 = {float_0: float_0}
    bool_0 = True
    tuple_0 = (float_0, dict_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    bool_0 = True
    module_3.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    auto_0 = module_1.auto()
    set_0 = {auto_0}
    var_0 = module_3.purge()
    var_0.__repr__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    list_0 = []
    auto_0 = module_1.auto(*list_0)
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    int_0 = -767
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    bool_0 = False
    none_type_0 = None
    module_3.fullmatch(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    float_0 = -2949.4178
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    module_3.findall(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    int_0 = 3078
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    str_0 = "etC,'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    int_0 = -2952
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    float_0 = -2183.979
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    bool_0 = False
    none_type_0 = None
    module_3.split(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    var_0 = module_3.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    module_3.subn(list_0, list_0, list_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    bytes_0 = b"VD\x9e\xc0\x19V\xcbJ2O\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    str_0 = "9"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    object_0 = module_4.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    complex_0 = -561.783 + 2610.92352j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    bytes_0 = b"c2\xd4\xf7\xb2\x0ek\xb3\xec\x87\xb4\x15\xd1\x9d\x12HW"
    dict_0 = {bytes_0: bytes_0}
    module_3.fullmatch(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    enum_dict_0 = module_1._EnumDict()
    module_0.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    var_0 = module_3.purge()
    list_0 = [var_0, var_0]
    module_3.split(list_0, var_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    bool_0 = True
    none_type_0 = None
    module_3.search(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    int_0 = 170
    none_type_0 = None
    module_3.subn(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    bytes_0 = b"\xf8C\xed\xfd+8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    float_0 = -810.15
    module_4.BaseException(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    tuple_0 = ()
    module_3.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    int_0 = -56
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    bytes_0 = b"\x86\xbe\xb9\x8ew\xc6\xaa\xaf\xa0\xee\xe0\xd9z\xa8\x02-\xa6\xbe"
    var_0 = module_3.template(bytes_0)
    module_3.split(var_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    var_0 = module_3.purge()
    module_3.compile(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    str_0 = "[coVA+j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    str_0 = ""
    str_1 = ""
    var_0 = module_3.split(str_0, str_1)
    bytes_0 = b"+\x05\xc5\x10gst\xba\x89\x0b\xb9$\x1e\x08`\x98\xf0\x1e)"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_3.findall(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    complex_0 = 725.4822 + 2522.99j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    int_0 = 1195
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    bool_0 = True
    module_3.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    float_0 = 1143.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    str_0 = "r8 "
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    int_0 = -202
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    none_type_0 = None
    list_0 = [none_type_0]
    error_0 = module_2.Error(*list_0)
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    error_0 = module_2.Error()
    str_0 = "p?[nr9Y"
    dict_0 = {str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    str_0 = "savqoi(9Mh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    str_0 = "kn9~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    int_0 = -2680
    module_3.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    bytes_0 = b"\xa7\x83\xe3wf\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    str_0 = "v_;:K.X>aMKzrmtY^"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    int_0 = -412
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    bool_0 = True
    none_type_0 = None
    module_3.finditer(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    none_type_0 = None
    module_1.EnumMeta(*var_1, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    float_0 = -3179.4
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    none_type_0 = None
    module_4.BaseException(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    str_0 = "\r$"
    var_0 = module_3.split(str_0, str_0)
    tuple_0 = (str_0, var_0)
    module_3.match(var_0, tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    complex_0 = 293.051 + 431.367716j
    none_type_0 = None
    module_3.finditer(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    none_type_0 = None
    error_0 = module_3.error(none_type_0)
    module_0.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    bytes_0 = b"\xb0=\xf0M\xb3\xa0`\x9eS"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    none_type_0 = None
    int_0 = 2786
    module_3.fullmatch(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    set_0 = set()
    module_3.Match(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    bool_0 = True
    none_type_0 = None
    module_3.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    bool_0 = True
    module_3.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    int_0 = 1427
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    complex_0 = -987.714197 + 1061.624564j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    str_0 = "Md"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    regex_flag_0 = module_3.RegexFlag.LOCALE
    module_3.template(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    list_0 = []
    none_type_0 = None
    module_3.sub(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    str_0 = ";!WP\x0c(OI]mue"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    str_0 = "]\tR=`"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    int_0 = -679
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    enum_dict_0 = module_1._EnumDict()
    dict_0 = {}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    set_0 = set()
    none_type_0 = None
    module_3.findall(set_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0, bool_1, bool_1}
    tuple_0 = (bool_1, set_0)
    module_3.findall(bool_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    bytes_0 = b"\xd9\xc8\x9d\x10 P\xdc\xec\x91\xb6\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    bool_0 = False
    bytes_0 = b"\xc5\x12*I\xbf\xc4\x9f\x97T\x8c\xc2Hy\xb8.\x16E\xb6\xa8="
    tuple_0 = (bool_0, bytes_0)
    dict_0 = {tuple_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    var_0 = module_3.purge()
    var_1 = var_0.__dir__()
    var_2 = var_1.__dir__()
    module_0.match(var_2, var_2)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    int_0 = -1439
    module_3.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    int_0 = 2720
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    str_0 = "TIqY\no&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    int_0 = -1928
    error_0 = module_3.error(int_0)
    module_3.sub(int_0, int_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    bytes_0 = b"9\x16H"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    bool_0 = True
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    complex_0 = 1838.35476 + 316.01j
    module_3.match(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    bytes_0 = b"D\x88H{1|\\\xde%\x87iuF\n"
    var_0 = module_3.sub(bytes_0, bytes_0, bytes_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    str_0 = "Z^nbY~_N}o'/2'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    bytes_0 = b"\x08Wx\xcd\xef(%2pN\x1d\xe7\x9b\x12\x8c\xa8#T\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    none_type_0 = None
    error_0 = module_2.Error()
    module_3.fullmatch(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    var_0 = module_3.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_3.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    complex_0 = -2811.11473 + 2246.7655j
    none_type_0 = None
    module_3.fullmatch(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bytes_0 = b"\xdamTZ\xa0"
    bool_0 = False
    module_3.split(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    int_0 = -2011
    module_3.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    int_0 = -546
    tuple_0 = (int_0,)
    set_0 = {int_0, tuple_0, tuple_0, int_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    float_0 = 4133.26
    module_3.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    int_0 = -2550
    module_3.subn(int_0, int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    int_0 = -1242
    module_0.get_new_command(int_0, int_0)


def test_case_4872():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4873():
    int_0 = -444
    error_0 = module_3.error(int_0, pos=int_0)
    module_0.get_new_command(error_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4875():
    tuple_0 = ()
    module_3.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    float_0 = 688.89
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    float_0 = 1450.02
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


def test_case_4879():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4880():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    list_0 = []
    module_3.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    str_0 = "J\x0bqEyc4.[9IOT}("
    set_0 = {str_0, str_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    bytes_0 = b"\x9br\xa6\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    bytes_0 = b"\xa9\xdc\x9b|\xfc\xf5\xf9.\xeb."
    var_0 = module_3.fullmatch(bytes_0, bytes_0)
    set_0 = set()
    module_3.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    str_0 = '?v<\rJCM?" [+\\-'
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    str_0 = 'zajx,m{:\x0c\r(G\n#I57"\tM'
    var_0 = module_3.escape(str_0)
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    int_0 = 1247
    none_type_0 = None
    module_3.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    int_0 = -179
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    float_0 = -495.276
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    bool_0 = False
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    list_0 = []
    module_1.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    bytes_0 = b"\x1c\xd6\xed\xe2\x91\xa5\x82f\xec\xbe&\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_4895():
    bytes_0 = b"u\x8dr\xffQs-\x80\xe9=j\xad\xf4+\xb1w\xa4\xcb\xa9"
    var_0 = module_3.compile(bytes_0)
    none_type_0 = None
    module_3.subn(bytes_0, bytes_0, none_type_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    bool_0 = False
    var_0 = module_3.purge()
    var_0.__contains__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    list_0 = []
    none_type_0 = None
    module_3.finditer(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    str_0 = "T/4ug@^v2M@_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    str_0 = "Ym>"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    bool_0 = True
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    float_0 = 5566.936
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    var_0 = module_3.purge()
    module_3.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    dict_0 = {}
    module_3.subn(dict_0, dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    complex_0 = -1376.47818 + 1748.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    bytes_0 = b"e\xbe"
    exception_0 = module_4.Exception(*bytes_0)
    none_type_0 = None
    str_0 = "/"
    var_0 = module_3.finditer(str_0, str_0)
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    int_0 = -1149
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    bytes_0 = b"^_\xb6\xf2wDV\xeb\xde\xd7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    bytes_0 = b"x\x83\xb6\xb2hSvYH\xbd\xc1o\x01b\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    complex_0 = -1642.33821 - 3559.5j
    none_type_0 = None
    module_3.subn(complex_0, complex_0, none_type_0, flags=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    float_0 = -280.97071
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    none_type_0 = None
    list_0 = [none_type_0]
    module_4.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    bytes_0 = b""
    var_0 = module_3.split(bytes_0, bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_3.search(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    float_0 = -891.417
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    none_type_0 = None
    int_0 = -1778
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    var_0 = module_3.purge()
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    bytes_0 = b"\xfb\xe2\xb1P\xea\xb6E\x84u\xcc[\xd5\xa4}E\xf0\x8c2"
    var_0 = module_3.escape(bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    bytes_0 = b"\x0eE\x91\x80"
    dict_0 = {}
    list_0 = [bytes_0, dict_0, dict_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    int_0 = 2423
    none_type_0 = None
    module_3.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    complex_0 = -104.96 + 2712.189j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    float_0 = 1036.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    bytes_0 = b"\x1cy\x07\x97\\\xca\xb9\x91\x03\xe0\xcd\x96\xd5\x11\xf2"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_4933():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4934():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    int_0 = -262
    none_type_0 = None
    module_3.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    int_0 = 1962
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    bool_0 = True
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    base_exception_0 = module_4.BaseException()
    module_3.finditer(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    float_0 = 2459.5553
    tuple_0 = ()
    module_3.sub(float_0, float_0, float_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, none_type_0)
    module_0.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    float_0 = 288.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    bool_0 = True
    module_3.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    list_0 = []
    module_3.match(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    float_0 = -2060.4666
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    str_0 = "'!w`1OUNvV"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    none_type_0 = None
    bool_0 = False
    module_3.sub(none_type_0, none_type_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    var_0 = module_3.purge()
    set_0 = {var_0, var_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    bool_0 = False
    none_type_0 = None
    module_3.findall(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    bytes_0 = b"\xee\x01\x00P\x1f\x9b\xfa\xfcf\x89\\\x8f\xd5"
    none_type_0 = None
    module_3.split(bytes_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    auto_0 = module_1.auto()
    none_type_0 = None
    module_0.get_new_command(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_4957():
    int_0 = 1241
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    tuple_0 = ()
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, tuple_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    int_0 = 2566
    module_3.split(int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    enum_dict_0 = module_1._EnumDict()
    enum_dict_0.__setitem__(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    str_0 = "^~VIo,LgR"
    none_type_0 = None
    module_3.search(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    int_0 = -1310
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    str_0 = "XH4mOPl/j\x0cBwz^|Pd}nW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    str_0 = "Bv[jLM<\r5\x0cH$735"
    module_3.split(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    regex_flag_0 = module_3.RegexFlag.UNICODE
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    str_0 = "\nLVdT:\r-FP"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    int_0 = 582
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_3.split(dict_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    int_0 = 2749
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    bool_0 = False
    var_0 = module_3.purge()
    var_0.scan(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    complex_0 = 44 - 321.601j
    str_0 = "Re("
    tuple_0 = (complex_0, str_0)
    none_type_0 = None
    module_3.split(tuple_0, complex_0, none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    list_0 = []
    module_3.sub(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    int_0 = -140
    set_0 = {int_0}
    module_3.match(set_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    bool_0 = False
    module_3.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    bool_0 = False
    module_3.findall(bool_0, bool_0)


def test_case_4983():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4984():
    float_0 = -167.6832
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    bytes_0 = b"\xfb\xe4\xca:Cd\x83\xe4\x17\xc1\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    str_0 = "_74"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    str_0 = '8)4f"{'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    str_0 = ""
    none_type_0 = None
    module_3.sub(str_0, none_type_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    bool_0 = False
    bytes_0 = b"O\xe9|L\xdb\xaem\xa8\xbd;\x97\xb5\xe5 u"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    str_0 = "4#qdU$XH?<Su.k-g"
    none_type_0 = None
    module_3.sub(str_0, none_type_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    str_0 = "dNCo"
    str_1 = "3>9^1v}&\\/]X{XnYJ:"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    str_0 = "\n"
    none_type_0 = None
    module_3.sub(str_0, str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    bool_0 = False
    none_type_0 = None
    module_3.findall(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    bool_0 = False
    module_2.Error(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    bool_0 = False
    error_0 = module_3.error(bool_0, bool_0)
    dict_0 = {error_0: bool_0, bool_0: error_0, error_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    int_0 = -1043
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    str_0 = "\\{sZg\t\r8;$+"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    int_0 = -180
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    error_0 = module_2.Error()
    str_0 = "g&V\x0bD`;KX|09V\r~'Ud@i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    int_0 = 597
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    int_0 = 3880
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    float_0 = -1470.16
    tuple_0 = (float_0,)
    module_3.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    bool_0 = True
    module_3.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    regex_flag_0 = module_3.RegexFlag.TEMPLATE
    bytes_0 = b"\x88\xce)-uk(\xc7\xf6<\r"
    set_0 = {regex_flag_0, regex_flag_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    exception_0 = module_4.Exception()
    none_type_0 = None
    module_0.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    str_0 = "&;&;#7wWwFT2{*"
    set_0 = set()
    tuple_0 = (str_0, set_0)
    module_3.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    bool_0 = True
    float_0 = -1893.6
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    bytes_0 = b"\xb5\xfa{\xebr\x90\xb5\x12\x84\xd8\xd38"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    bool_0 = False
    none_type_0 = None
    module_3.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    str_0 = 'T9-Qyt",Q4b\\\r~g'
    dict_0 = {str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    str_0 = "ME%i}u\n"
    none_type_0 = None
    module_3.split(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    bytes_0 = b"\xe8\xd0AG\x08\x10Q1\x1d?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    str_0 = "4\rLdxvB~})"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    str_0 = "V\nV\r3B+>^{N<6hK"
    module_3.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    float_0 = 3230.28514
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    enum_dict_0 = module_1._EnumDict()
    module_3.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    float_0 = -1968.58
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    enum_dict_0 = module_1._EnumDict()
    module_3.subn(enum_dict_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    bytes_0 = b"7\x10\x83\xe8\x89\xe9\x05"
    list_0 = [bytes_0]
    module_3.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    complex_0 = 2600.89 - 1861j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    str_0 = "B"
    var_0 = module_3.search(str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    bool_0 = False
    none_type_0 = None
    module_3.template(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    str_0 = "\r_"
    module_3.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_3.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    str_0 = "ZX?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    int_0 = -1819
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    str_0 = "cp'E.Y>Hl1\x0bD%D,=l%"
    module_0.get_new_command(str_0, str_0)


def test_case_5042():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5043():
    int_0 = 484
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    bytes_0 = b"\x86h\xd1\x99\x97\xff\xcd?\x1a"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    bytes_0 = b"\x13v:Q\x9f\xf0\x92\x04{\xfc\xfb\x97)\xa7"
    module_3.subn(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    int_0 = 172
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    list_0 = []
    module_3.sub(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    bytes_0 = b"7\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    int_0 = -1959
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    float_0 = -1890.255826
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    var_0 = module_3.purge()
    bytes_0 = b"Bc\xf2/\x96\xa0\xe2"
    module_3.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    int_0 = -1513
    tuple_0 = ()
    list_0 = [int_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    dict_0 = {}
    module_3.search(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    int_0 = -1305
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_3.purge()
    module_0.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_1.EnumMeta(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    str_0 = "p~|[C\tq\rMH0_YjAXr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_3.fullmatch(tuple_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    base_exception_0 = module_4.BaseException()
    set_0 = set()
    module_3.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    float_0 = 1596.218514
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    float_0 = -4072.012818
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    bytes_0 = b"&\xe9\x04\x8d;j\xcc\xcf\xea"
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = "{_XzCKOLBp\rtg.nIzjh"
    dict_0 = {str_0: bytes_0}
    module_3.Pattern(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    str_0 = "Y^$!/7C!B"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    int_0 = -2220
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    str_0 = "[i,cP+-HQ2P{Ut{y_\x0b"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    int_0 = 502
    none_type_0 = None
    module_3.findall(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    var_0 = module_3.purge()
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    int_0 = -4624
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    str_0 = ""
    str_1 = "L2kC"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_4.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    bytes_0 = b"$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5079():
    enum_dict_0 = module_1._EnumDict()
    bytes_0 = b"\n\xcc\xd2\x87%h"
    var_0 = module_3.escape(bytes_0)
    var_0.__repr__(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    bool_0 = False
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5084():
    str_0 = 't)"tjr_K_?'
    module_3.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    float_0 = -747.42545
    module_3.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    int_0 = -4123
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    str_0 = ":uTK{4"
    var_0 = module_3.escape(str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_5089():
    bytes_0 = b"\xb8\x85\xf0\x03"
    error_0 = module_2.Error(*bytes_0)
    module_3.escape(error_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    str_0 = "k_1'6SV'9\tU:S"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    none_type_0 = None
    dict_0 = {}
    list_0 = []
    module_3.subn(none_type_0, none_type_0, dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    float_0 = 810.0275
    module_3.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    int_0 = -799
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    none_type_0 = None
    int_0 = -3119
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    int_0 = -742
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_3.sub(bool_0, set_0, none_type_0)


def test_case_5100():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5101():
    str_0 = "l"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


def test_case_5102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5103():
    bool_0 = True
    int_0 = 3196
    none_type_0 = None
    module_3.split(none_type_0, bool_0, int_0)


def test_case_5104():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5105():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    bool_0 = False
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    int_0 = -3658
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    str_0 = "]VA{\x0bL`vS>0"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    base_exception_0 = module_4.BaseException()
    module_3.template(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    bytes_0 = b"\x96\x15\xa2\xf9Y\xd6]\x9e~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    bool_0 = False
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    list_0 = []
    module_3.sub(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    none_type_0 = None
    int_0 = -75
    module_3.findall(none_type_0, int_0, int_0)


def test_case_5116():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5117():
    bytes_0 = b"\xbe"
    var_0 = module_3.escape(bytes_0)
    list_0 = [var_0]
    module_3.fullmatch(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    bytes_0 = b"\x96\xf3\xf0|O\xe3\x1f`\x13\x1dh"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    bool_0 = True
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    int_0 = 1120
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    str_0 = "sH^uP}T$C`"
    error_0 = module_3.error(str_0)
    none_type_0 = None
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    bytes_0 = b"\x1f\x9b\xccB\xb3\xffa\x070@\xac\x824\xf6_\xf8\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    str_0 = "$Yng[L;w5dd5g]l|:'d"
    tuple_0 = (str_0,)
    module_1.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    bool_0 = True
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    str_0 = "X41G4)\x0cW\x0bF=T+?Je"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    int_0 = 3280
    module_3.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    int_0 = 645
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    str_0 = "^&a[TP DNU|3 5>7*b1Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    str_0 = "*)sc6y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    float_0 = -1280.303138
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    str_0 = "0)<<Wv&D\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    bytes_0 = b"\xbdqB\x12\xae\xdc\x8bd"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    bytes_0 = b"S\xab\xddn"
    module_3.sub(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    error_0 = module_2.Error(*list_0)
    module_0.get_new_command(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    str_0 = "H$Ao\x0bB6*vx~Cju]'"
    var_0 = module_3.compile(str_0)
    list_0 = [str_0, str_0, var_0, var_0]
    module_4.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    int_0 = -2982
    bytes_0 = b"\x98\x03gp"
    module_3.fullmatch(int_0, int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    bool_0 = False
    module_3.Match(*bool_0)


def test_case_5144():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5145():
    bytes_0 = b"T\xed.\xdb\xd6zkn\xc0A\xd1\xf4\x9c"
    tuple_0 = (bytes_0,)
    module_3.finditer(tuple_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    str_0 = "&nfH,?bJ3Q62"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    float_0 = -1579.068
    module_3.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    float_0 = -1190.4446
    none_type_0 = None
    module_3.finditer(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    bytes_0 = b"DEz!\xa8\x12)}\x96X&\x165\x90h\xc9\xe3Q\x8d"
    module_3.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    var_0 = module_3.purge()
    module_3.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    int_0 = -1252
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    none_type_0 = None
    bytes_0 = b"\xb2\xc0\xae\xc5\x0b\xed\xce\x19\xc6I\xc8\xe6\xecu"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    float_0 = 2306.4
    none_type_0 = None
    module_3.finditer(float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    int_0 = 969
    module_1.EnumMeta(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    bool_0 = True
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    set_0 = set()
    var_0 = module_3.purge()
    var_0.__repr__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    bool_0 = True
    float_0 = 1907.85
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    enum_dict_0 = module_1._EnumDict()
    int_0 = 180
    module_0.match(enum_dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    float_0 = 383.46597
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5165():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    int_0 = 294
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5168():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    bytes_0 = b"\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    int_0 = 1865
    module_3.sub(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    var_0 = module_3.purge()
    var_1 = module_3.purge()
    module_0.match(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    bool_0 = True
    module_3.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    bool_0 = False
    none_type_0 = None
    module_3.sub(bool_0, bool_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    bytes_0 = b"\xfb\\\xb1\t\xb6\xf0\xf7Z\xebY\xcd\x84\xfad\x9c\xc1O\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    bool_0 = True
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5177():
    float_0 = -3094.214096
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    str_0 = '"~\x0b;P{Yg)R"5cLPCZRw'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    str_0 = ",Y?s(>Y&J7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    var_0 = module_3.purge()
    module_1.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    str_0 = "6}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    str_0 = '[F|!SZ"\\rbw/.1sFn\x0bG'
    str_1 = "e6B\x0cGO8L(!8Ya}~M6"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    bytes_0 = b"`\xc7e~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    bool_0 = False
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    tuple_0 = ()
    var_0 = module_3.purge()
    var_0.__setitem__(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    float_0 = 1066.43907
    module_0.match(float_0, float_0)


def test_case_5187():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5188():
    str_0 = "r@D]_\\s4)Vh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    bytes_0 = b"xl`\xe0\x8b\x93\x98\xf3LJ,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    int_0 = 874
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    bytes_0 = b"\x0b&E*IQ]&\xb4\x97\xe4\xccV\n\x00\xdb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_3.Scanner(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    var_0 = module_3.purge()
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0, var_0, var_0)
    module_3.compile(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    int_0 = -2622
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    bytes_0 = b" .\xdf.\xd6==`\x0c\xe1;\x06r\xfa\xaet\xe9\xa5"
    none_type_0 = None
    module_3.fullmatch(bytes_0, none_type_0)


def test_case_5200():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5201():
    bytes_0 = b"\xa3\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    str_0 = "f|D`S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    bytes_0 = b"\xf6\xbe"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, bytes_0}
    var_0 = module_3.escape(bytes_0)
    module_0.get_new_command(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    int_0 = -1474
    str_0 = "tRs{+\t"
    none_type_0 = None
    module_3.match(int_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    int_0 = 495
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    str_0 = 'm/"\nFq.yd-^ `U"O('
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    str_0 = "D r$P9}Q[6xK,UAG4*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    str_0 = "CM\x0b<I\x0c^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    bytes_0 = b"\xf79\xcb\xff\x9d\xa1d\x9anD\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    str_0 = "%"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    bool_0 = False
    none_type_0 = None
    module_3.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    bytes_0 = b'\xda/\x85\xd3\x89\xc5<n\xeb\xe1r"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    complex_0 = -365.9826 - 938.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    str_0 = "p[cox"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    bytes_0 = b"\xd7y\xa5\xe9\xb6\x01\xb1"
    var_0 = module_3.compile(bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_5219():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    float_0 = -1324.86056
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    float_0 = 1537.891652
    none_type_0 = None
    module_3.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    dict_0 = {}
    module_3.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    bool_0 = False
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    str_0 = "71I[ xpE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    int_0 = -1002
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    int_0 = 76
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    float_0 = 1369.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    none_type_0 = None
    bytes_0 = b"\xec\xfc\xb1\xe0\x85\xa4\x98\x9d\xdc8\xd6;\xe7\xbf"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    float_0 = 316.338983
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = "n{YST2Y$5v"
    dict_0 = {str_0: str_0}
    module_1.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    float_0 = -639.86802
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    bool_0 = False
    module_3.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    int_0 = 215
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    float_0 = -390.144168
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    str_0 = "e,1sa4q\ta\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    bool_0 = True
    bool_1 = True
    module_3.finditer(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    var_0 = module_3.purge()
    module_3.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    str_0 = "_|"
    str_1 = "]<l\x0cut"
    str_2 = 'g?km (v>=H$}Hy:y;\x0b"'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    var_0 = module_3.purge()
    module_3.match(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    str_0 = "(LVKg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    int_0 = -16
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    str_0 = "xTJ6GPo}z"
    var_0 = module_3.escape(str_0)
    module_0.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    str_0 = "@E\tAG[Ya\tJDP"
    int_0 = -3590
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    bytes_0 = b"\xeal\xe5#"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    float_0 = -1293.383
    module_3.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    bytes_0 = b"\xa6\x8d\xf7\x1a\xf9i\\;\\\x10"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    float_0 = 1724.691
    none_type_0 = None
    module_3.split(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    complex_0 = -3396.6195 - 1479.944j
    module_3.split(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    str_0 = ""
    none_type_0 = None
    module_3.fullmatch(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    str_0 = 'F}d;@"a5acRPQ`-0'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    int_0 = -2286
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    int_0 = 2678
    none_type_0 = None
    module_3.subn(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    error_0 = module_2.Error()
    dict_0 = {error_0: error_0, error_0: error_0, error_0: error_0}
    module_0.get_new_command(dict_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    float_0 = 1880.451
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    int_0 = -3016
    module_3.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    set_0 = set()
    module_3.finditer(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    int_0 = 1661
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    dict_0 = {}
    module_3.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    str_0 = ":)`~"
    module_3.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    str_0 = "7l/|v'^k(\np,xLuIUBy:"
    module_3.subn(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    int_0 = -2440
    module_3.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    bytes_0 = b"\xeb\xaf,\x9c\x1c\x8a\xaec\xbbV\xe7\xe6b\xbe\x19\xaf\x16"
    var_0 = module_3.sub(bytes_0, bytes_0, bytes_0)
    module_0.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    bytes_0 = b"X\x1a\x1f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    str_0 = "}Q.vC]YcM*h\x0csr8U!"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    bool_0 = True
    none_type_0 = None
    module_3.findall(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    bool_0 = True
    module_3.Match(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    str_0 = "k\tlVMe0,h{XYZtKLA"
    var_0 = module_3.sub(str_0, str_0, str_0)
    module_0.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    none_type_0 = None
    module_4.BaseException(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    float_0 = -2514.57
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    str_0 = "jYUmu^79dWQ\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    int_0 = 647
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    str_0 = "C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    float_0 = -3151.301688
    module_3.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, pos=none_type_0)
    regex_flag_0 = module_3.RegexFlag.UNICODE
    module_0.get_new_command(error_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    dict_0 = {}
    none_type_0 = None
    module_3.split(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    bytes_0 = b"\x89\xa2\xc5a\xf7\x93\xdb\x15\x8c\xe5\xeab?h\xed\xa6\xcd\x8e\xfd\x06"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    regex_flag_0 = module_3.RegexFlag.VERBOSE
    module_3.template(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    enum_dict_0 = module_1._EnumDict()
    list_0 = [enum_dict_0, enum_dict_0]
    module_3.template(list_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    bytes_0 = b"F\xdcZ\xc9h%\x06\xf6\t\xaf/\x92f\xf2P`)|\xdb"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_3.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    int_0 = -615
    module_3.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    float_0 = -1713.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    int_0 = -1789
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    bytes_0 = b"\x11\x1a\x00\xbc\xc1wb\x0bx\x14L+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    bool_0 = True
    int_0 = 1711
    tuple_0 = (bool_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    float_0 = -717.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    int_0 = -1332
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    int_0 = 443
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    float_0 = -6790.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    bytes_0 = b"\xfb\x9f\x8b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_3.compile(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    float_0 = -1717.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    bytes_0 = b"\xa9\x9d\xc2\x0b\x96\xb5\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    complex_0 = 1320 + 2543.2j
    module_3.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    str_0 = "u,=aJm"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    bytes_0 = b"\x8e\xac;\xdfoA\xa923q\xe8\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    str_0 = "nyF(V!)0y<T!{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_5310():
    float_0 = -3751.8791
    list_0 = [float_0, float_0]
    var_0 = module_3.purge()
    var_0.__reversed__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    int_0 = -904
    none_type_0 = None
    module_3.subn(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    str_0 = 'Ga;[r"sa\\Tr\tUe&N+;*'
    module_0.match(str_0, str_0)


def test_case_5314():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5315():
    str_0 = "+WG^09}m\tbgH_`]c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    bool_0 = False
    set_0 = {bool_0}
    module_1.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    float_0 = 1004.0
    module_3.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    bool_0 = False
    none_type_0 = None
    module_3.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    int_0 = 2501
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    var_0 = module_3.purge()
    module_3.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    int_0 = -3791
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    int_0 = 719
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    int_0 = -128
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    bytes_0 = b"#G\x85*"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_3.compile(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    bytes_0 = b"\x84O\x17\xb1\xff\xf5\xfe\x11\x12{\x91"
    none_type_0 = None
    module_3.subn(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    var_0 = module_3.purge()
    module_3.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    dict_0 = {}
    module_1.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    regex_flag_0 = module_3.RegexFlag.VERBOSE
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    str_0 = "ucDP,{4pygI$cxB*K"
    str_1 = "t%.5G"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    dict_0 = {}
    module_3.template(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    regex_flag_0 = module_3.RegexFlag.DEBUG
    module_0.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_3.sub(list_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    float_0 = 1849.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    str_0 = "9["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    int_0 = 1190
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    bool_0 = True
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    none_type_0 = None
    str_0 = "@nYv"
    var_0 = module_3.fullmatch(str_0, str_0)
    var_0.__call__(none_type_0, none_type_0, module=none_type_0, type=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    str_0 = "Y?9EjA"
    var_0 = module_3.findall(str_0, str_0)
    module_0.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    bool_0 = True
    module_3.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    bytes_0 = b",\x89\xa1\xae\x92s\xc3\xff\x1d.h\xa5\xce+~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    dict_0 = {}
    module_3.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    bool_0 = False
    var_0 = module_3.purge()
    var_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    int_0 = 2066
    var_0 = module_3.purge()
    var_0.__call__(int_0, int_0, module=int_0, qualname=int_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    bytes_0 = b"\x99\xc38P\xe0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    str_0 = "e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    float_0 = 2778.067
    var_0 = module_3.purge()
    dict_0 = {float_0: var_0, var_0: float_0, var_0: float_0}
    error_0 = module_3.error(dict_0)
    var_0.__len__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    float_0 = -317.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0, var_0, var_0)
    module_0.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_5356():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    int_0 = -2615
    module_3.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    bool_0 = False
    none_type_0 = None
    module_3.subn(bool_0, none_type_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    str_0 = "%1Wrj{Q!*ng<ti"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    none_type_0 = None
    module_2.Error(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    bytes_0 = b"\xcc\x8e\x9fM\x95\xb5\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    var_0 = module_3.purge()
    module_3.Scanner(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    str_0 = "\x0cz:=6=\\TOLY\x0cN"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    dict_0 = {}
    none_type_0 = None
    module_3.fullmatch(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    float_0 = 205.16229
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    str_0 = "b$8tE(\rwnkh43Z0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    bool_0 = True
    str_0 = "je7u"
    module_3.split(bool_0, str_0, str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_3.subn(tuple_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    str_0 = ";m2sEaKKg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5375():
    none_type_0 = None
    module_3.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    var_0 = module_3.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    module_3.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    bool_0 = True
    module_3.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    bytes_0 = b"\xf3\xeb\xfc|?l\x9bF}\x9c\x1e`\x98\x0b\xad'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    int_0 = 709
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    exception_0 = module_4.Exception()
    set_0 = {exception_0, exception_0, exception_0}
    str_0 = 'U8kw5|$.w";BDm*;O'
    tuple_0 = (set_0, str_0)
    module_0.get_new_command(tuple_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    int_0 = 1884
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    str_0 = "},;\x0b~P;(}\x0c`f<?\x0bT1;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    int_0 = -1093
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    bytes_0 = b"\xa7\xb7\xde"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    int_0 = 736
    module_4.Exception(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    error_0 = module_2.Error()
    module_3.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    float_0 = 284.5
    module_3.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_5389():
    none_type_0 = None
    list_0 = [none_type_0]
    module_4.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    str_0 = 'rR?"IBRTTTo N>='
    module_3.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    bytes_0 = b"\xd5I\xe8[\xae\x1c\xf5\xfa\xe3_\xc4\x9e\xa4>\xcb%\xfbx\xc4$"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    str_0 = "0PIU;hcW{#^l\n<&-"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    bytes_0 = b"P\x16aR8I\x1a\xfeI\xaf2\xbb\x11]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5397():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    float_0 = -1065.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    float_0 = 2815.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    int_0 = -1120
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    complex_0 = 610.54527 - 4341.3994j
    list_0 = [complex_0, complex_0, complex_0]
    module_3.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    str_0 = "alAe0*]+U/t~Gfl~m\x0c\x0c"
    str_1 = "qmc7]u{t$i"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    str_0 = "Hdgh_#j"
    str_1 = '"\x0b]l.r'
    str_2 = "-oEc$ZH|WL9-Yamk\x0c4"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    base_exception_0 = module_4.BaseException()
    var_0 = module_3.purge()
    var_0.__reversed__(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    float_0 = 2747.13456
    module_3.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    none_type_0 = None
    error_0 = module_3.error(none_type_0)
    none_type_1 = None
    set_0 = set()
    module_3.findall(none_type_1, none_type_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    str_0 = "&oB\t=wy<Oi7EdyD/B"
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    str_0 = "?$PhE"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    bool_0 = False
    bytes_0 = b"+\xfb\xa9\x9d\xe4\x83"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    var_0 = module_3.purge()
    list_0 = []
    module_1.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    bytes_0 = b"\xe8\x15\xb9I\xf5:\xf6\xb7QHL4\x8f\x93\x1e1\xef\xfc\x0c\x15"
    none_type_0 = None
    module_3.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    int_0 = -281
    none_type_0 = None
    module_3.sub(int_0, int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    none_type_0 = None
    bytes_0 = b"\xcc\xec\xce\xda\xa3\x0c\xa3\xf1*\xd3\xa8X\xb5\xb4?\xbe\xa4\x86\xae#"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    str_0 = "_;]J'!a?v"
    module_3.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    str_0 = "tyx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    var_0 = module_3.purge()
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    str_0 = "KIM/ZzqG"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    int_0 = -1802
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    var_0 = module_3.purge()
    module_1.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    bytes_0 = b'\xa2\xb3d#\t)"'
    none_type_0 = None
    module_3.sub(bytes_0, bytes_0, none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    enum_dict_0 = module_1._EnumDict()
    module_3.Scanner(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    str_0 = "'qVna;AIn]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    bytes_0 = b"\xf16\x9a+3\xd6\xac\xd3\x98+\x18\xb2\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    regex_flag_0 = module_3.RegexFlag.UNICODE
    module_3.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    var_0 = module_3.purge()
    module_3.match(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    bytes_0 = b"\xf1w!\x01\x11\x81b\xae=\xe6\x91\x06\xd9\xb2P\n\x96\x15I"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    none_type_0 = None
    var_0 = module_3.purge()
    var_0.__call__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    enum_dict_0 = module_1._EnumDict()
    module_3.template(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    float_0 = -774.2735
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    int_0 = -81
    list_0 = [int_0, int_0, int_0]
    module_3.finditer(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    bytes_0 = b"?N\xb4Z\x10F8\xf9\x9b\xc3\xb8G9O"
    none_type_0 = None
    module_3.findall(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    bytes_0 = b";\xb4\x8f\x14:(\xb0\xfb\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5447():
    int_0 = 898
    str_0 = "ttu-@"
    var_0 = module_3.compile(str_0)
    var_0.__repr__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    error_0 = module_2.Error()
    list_0 = [error_0, error_0, error_0]
    base_exception_0 = module_4.BaseException(*list_0)
    module_0.get_new_command(base_exception_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    int_0 = 2276
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    complex_0 = 535 + 2999.9566j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    str_0 = "[h6cX\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    float_0 = -4165.07351
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    regex_flag_0 = module_3.RegexFlag.UNICODE
    none_type_0 = None
    module_0.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    str_0 = "w#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    str_0 = "^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    bytes_0 = b"\xcb^2\xb4\xa3\xc6{r\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    complex_0 = 1053.99 + 1262.1343j
    module_3.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    int_0 = -2083
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    bytes_0 = b"\xb4\x9bW\x9c\xd9\xc4\x84\xe1!\x13\xa0eh\x7f0\x98\xdc\xa2c\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    float_0 = -1016.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    bool_0 = True
    module_3.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    bytes_0 = b"U)\x1e\x12\xd3\x96~\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    int_0 = -1729
    module_3.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    str_0 = "%}B'=7uXLjk(+q1$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    int_0 = -904
    var_0 = module_3.purge()
    var_0.__contains__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    int_0 = 1433
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    int_0 = 17
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    float_0 = -2637.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    bytes_0 = b"&\x94\xa4\x0f\x1d9\xd1\xbc\xbfvf\x96\x1e\x10B\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    int_0 = 1848
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    bytes_0 = b"Vk(p"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    float_0 = 2098.79985
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    int_0 = -2449
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    str_0 = "1$YMa\t:nYRU!&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    bool_0 = False
    error_0 = module_3.error(bool_0)
    bool_1 = True
    none_type_0 = None
    module_3.fullmatch(bool_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    complex_0 = -1557.719032 + 3009.2j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    int_0 = 3058
    tuple_0 = (int_0, int_0)
    complex_0 = -235 + 2372j
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    bool_0 = False
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    module_3.split(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    float_0 = 789.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    int_0 = 1457
    list_0 = [int_0, int_0]
    str_0 = "%<.?U!6Zp_Sv>"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    float_0 = 3009.05888
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    int_0 = 3535
    module_1.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    float_0 = -2227.404
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    str_0 = 'n)^O\\%,WN(<F=y.Y)"fe'
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    bytes_0 = b"\xc9D\xdd\x181T\x10\xa92\x1c\x9c~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    str_0 = "gTfl9Sd~J0$]6$~V9"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    bytes_0 = b"+u!\xb6X"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    bool_0 = False
    module_3.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    str_0 = ":N\x0cT"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    object_0 = module_4.object()
    none_type_0 = None
    module_3.subn(object_0, none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    bytes_0 = b"\x97_\xa8\xd5@\x8eR\x13\xb6%\xce\xe8\xb2\xec"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    bytes_0 = b"\xd7<1n\xd8\x8d\xba\x7f\xed\xfd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    bytes_0 = b"\xe1\x85f7\x82\xd0)t>lM\x94c\xcc\xa7E\x11\xe1\x1b\xea"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    regex_flag_0 = module_3.RegexFlag.UNICODE
    tuple_0 = (regex_flag_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_5510():
    int_0 = -1282
    bytes_0 = b"6;%\xc3\x88\xcf\xa7-"
    var_0 = module_3.fullmatch(bytes_0, bytes_0)
    with pytest.raises(TypeError):
        var_0.__new__(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    int_0 = 791
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    bytes_0 = b"\xd0\xbdP-X\n3e}\xb1;lDo\xc2\x8dc"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_3.match(tuple_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    float_0 = 812.776
    tuple_0 = (float_0,)
    str_0 = '!Uw5M?\r,b"lL{;4R^QG'
    module_3.fullmatch(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5515():
    int_0 = -1374
    module_3.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    none_type_0 = None
    error_0 = module_3.error(none_type_0, pos=none_type_0)
    module_0.match(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    str_0 = "G(r|x5gtrFgQ$|"
    module_3.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    bytes_0 = b"\xc9*\x97"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    bytes_0 = b"\x15\xc6=$A\x0e\xc2f\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    var_0 = module_3.purge()
    tuple_0 = (var_0, var_0)
    module_0.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_3.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    bool_0 = True
    module_3.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    none_type_0 = None
    module_3.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    int_0 = 1012
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    int_0 = 809
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    float_0 = -1023.2265
    module_3.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    bool_0 = True
    module_3.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    none_type_0 = None
    bool_0 = True
    str_0 = "cjKf)sH[%"
    list_0 = [bool_0, none_type_0, none_type_0]
    tuple_0 = (bool_0, str_0, list_0)
    module_3.compile(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    bool_0 = True
    bool_1 = False
    module_3.finditer(bool_0, bool_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    list_0 = []
    exception_0 = module_4.Exception(*list_0)
    none_type_0 = None
    module_3.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    str_0 = "s(<Lwx\x0b\\"
    dict_0 = {str_0: str_0}
    module_1.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    int_0 = 4038
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    bool_0 = True
    module_3.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5536():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    str_0 = "T6q?wC 7<01v;\tCQ}>2q"
    var_0 = module_3.purge()
    var_0.__repr__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    int_0 = 1024
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    dict_0 = {}
    error_0 = module_2.Error(**dict_0)
    module_0.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    var_0 = module_3.purge()
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    str_0 = "H5#G"
    module_3.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    str_0 = "n``-z`93:"
    var_0 = module_3.subn(str_0, str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    str_0 = "^\tB*u 8yo*}_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    str_0 = "0l)9bb^);l_3g.]"
    dict_0 = {}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    none_type_0 = None
    module_3.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    int_0 = 703
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    int_0 = -823
    module_3.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    bytes_0 = b"\x135C4s\x7f9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    module_3.Match()


@pytest.mark.xfail(strict=True)
def test_case_5553():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    enum_dict_0 = module_1._EnumDict()
    module_3.compile(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    float_0 = -470.775
    module_3.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    none_type_0 = None
    module_3.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    bytes_0 = b"\xe0\x96\xdd_\xf5\x87\x9b\xab\xc4p\xe3\x97\xef\xcb\xc1Y\x86)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    bytes_0 = b"\x8fY\xaf\x9c6pH\x13\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    float_0 = 1300.7164
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    int_0 = 2697
    module_3.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    int_0 = -740
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    var_0 = module_3.purge()
    set_0 = {var_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    float_0 = 810.93153
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    bytes_0 = b"\x90M\x07\xbf\r\x98'\x93\xbb\xdd\x03\x85\x05\x90\xee\xf4/\xaa\xe3"
    none_type_0 = None
    module_3.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    float_0 = 2039.34
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    int_0 = -1190
    none_type_0 = None
    module_3.match(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    int_0 = -3126
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    bytes_0 = b'"R^#?\xdf\xea\x91\x8e*\x1b\xec\xfc\xf6\xe7\xa4\xacz\x96\xe0'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    int_0 = 1549
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    str_0 = "?Ts>@El`!8'FWu1a[p"
    none_type_0 = None
    module_3.finditer(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5572():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    none_type_0 = None
    set_0 = {none_type_0}
    module_3.subn(none_type_0, none_type_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    base_exception_0 = module_4.BaseException()
    module_3.findall(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    none_type_0 = None
    module_3.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    none_type_0 = None
    module_3.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    bool_0 = False
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    int_0 = 855
    error_0 = module_3.error(int_0, pos=int_0)
    module_0.match(int_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    none_type_0 = None
    module_3.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    int_0 = 1167
    list_0 = [int_0, int_0, int_0, int_0]
    dict_0 = {}
    list_1 = [list_0, list_0, dict_0, dict_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    int_0 = -1899
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5583():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_5584():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5585():
    str_0 = "VL+[B\t^.;C=^"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    float_0 = -2515.12
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    float_0 = -3685.707
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_3.findall(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    auto_0 = module_1.auto()
    set_0 = {auto_0, auto_0, auto_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    float_0 = 436.6
    str_0 = "I7sqzxS]o$Ez0\"'K"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5590():
    bool_0 = False
    module_3.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5591():
    str_0 = ")sJ:(9R:z_d=02T"
    var_0 = module_3.escape(str_0)
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5592():
    var_0 = module_3.purge()
    module_3.finditer(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5593():
    str_0 = "ZQ.O\x0b5xe #mf~c"
    none_type_0 = None
    module_3.search(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    int_0 = 1128
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    bytes_0 = b"\xfe67Co\xd0mc\xbd\xf7\x0b\xa3\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    none_type_0 = None
    module_3.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    str_0 = "(xsl%p<@]V0="
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    list_0 = []
    module_1.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    str_0 = "F6"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    tuple_0 = ()
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    none_type_0 = None
    module_3.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    none_type_0 = None
    module_3.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    float_0 = -261.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    bytes_0 = b"\xb7"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    str_0 = "_LW'?~\nP "
    dict_0 = {str_0: bytes_0}
    module_4.Exception(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    float_0 = -583.89
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    bytes_0 = b"\x16\xdcd6\xe0\x8b\x01\xb8\x90\xcc\x04"
    none_type_0 = None
    module_3.match(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    none_type_0 = None
    module_2.Error(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    float_0 = 1470.2
    none_type_0 = None
    module_3.match(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5609():
    module_3.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5610():
    bytes_0 = b"\xa82\x1eb\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    bytes_0 = b"A\xd8\xf8\xb6\xe2gw|\xf1\x19\x90(\x84D$"
    module_0.match(bytes_0, bytes_0)


def test_case_5612():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5613():
    var_0 = module_3.purge()
    error_0 = module_2.Error()
    none_type_0 = None
    module_3.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    float_0 = -777.3576
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    int_0 = -889
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    bytes_0 = b"\xef\x85\xff"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    str_0 = "CB4Y]s,LERyqv-"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    float_0 = -617.194023
    none_type_0 = None
    module_3.search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5620():
    none_type_0 = None
    module_3.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    list_0 = []
    none_type_0 = None
    module_3.sub(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    bool_0 = True
    error_0 = module_3.error(bool_0, pos=bool_0)
    bool_1 = False
    module_0.match(error_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    float_0 = 959.9422
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    str_0 = "7`LF%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    list_0 = []
    module_3.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5627():
    float_0 = 955.63
    module_1.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5629():
    str_0 = "~aYnqV~a/MH"
    error_0 = module_3.error(str_0)
    module_0.get_new_command(error_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    bool_0 = False
    module_3.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5631():
    str_0 = "(EvuxR`G):# %0Pz"
    var_0 = module_3.escape(str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5632():
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5633():
    bool_0 = True
    module_3.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5634():
    regex_flag_0 = module_3.RegexFlag.UNICODE
    bool_0 = True
    module_0.get_new_command(regex_flag_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5635():
    int_0 = -1589
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_3.match(dict_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5636():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "^-;V"
    str_1 = 'x\x0cx"KYFy8xU=@[['
    dict_0 = {str_0: str_0, str_1: str_1, str_1: none_type_0}
    module_1.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    bytes_0 = b"i\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    str_0 = "T9C#'QrqlH`I~o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5639():
    none_type_0 = None
    module_3.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5640():
    bytes_0 = b"\x1d\xc8\x12L\xa2#\r\xbdD\x8f\xa9\x93a\xc5&\xf5("
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5641():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5642():
    int_0 = 4086
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5643():
    int_0 = 3148
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5644():
    bytes_0 = b"\x80\xe1\xcf"
    module_1.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5645():
    base_exception_0 = module_4.BaseException()
    module_1.unique(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5646():
    str_0 = "k!ScPJbq-Q%;jH>\\M@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5647():
    str_0 = ">O(V+h%"
    var_0 = module_3.purge()
    var_0.scan(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5648():
    dict_0 = {}
    auto_0 = module_1.auto(**dict_0)
    module_0.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_5649():
    complex_0 = -3847.09 - 551.101693j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5650():
    str_0 = ","
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5651():
    bool_0 = False
    str_0 = "UQ"
    module_3.split(bool_0, bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5652():
    int_0 = -1253
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5653():
    bytes_0 = b"!{\x80"
    module_3.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5654():
    bool_0 = False
    list_0 = []
    error_0 = module_2.Error(*list_0)
    dict_0 = {bool_0: bool_0, bool_0: error_0, bool_0: error_0, bool_0: list_0}
    module_3.findall(dict_0, error_0)
